Domain,Action Name,Cosine Sim Score,Pair Type,Comparison Mode,Query Content,Answer Content,Query Action Schema,Manipulation Details
libraryworld,remove-from-shelf,0.7851868271827698,Positive (Correct Match),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Imagine a librarian approaching a shelf where one book is placed on top of another. The 'remove-from-shelf' action allows the librarian to take the top book off the shelf, provided it is accessible and the librarian's hands are free. This action makes the book on the shelf accessible and the librarian holds the removed book.

Action name: remove-from-shelf


Your answer:
","Parameters:
1. ?x - book
2. ?y - book
3. ?cat - category

Preconditions:
```
(and
    (on-shelf ?x ?y)
    (accessible ?x)
    (hands-free)
    (belongs-to-category ?x ?cat)
)
```

Effects:
```
(and
    (holding ?x)
    (accessible ?y)
    (not (accessible ?x))
    (not (hands-free))
    (not (on-shelf ?x ?y))
    (shelf-empty ?cat)
)
```
","(:action remove-from-shelf
    :parameters (?x - book ?y - book ?cat - category)
    :precondition (and (on-shelf ?x ?y) (accessible ?x) (hands-free) (belongs-to-category ?x ?cat))
    :effect (and (holding ?x) (accessible ?y) (not (accessible ?x)) (not (hands-free)) (not (on-shelf ?x ?y)) (shelf-empty ?cat))
)",
libraryworld,remove-from-shelf,0.7851868271827698,Positive (Correct Match),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Imagine a librarian approaching a shelf where one book is placed on top of another. The 'remove-from-shelf' action allows the librarian to take the top book off the shelf, provided it is accessible and the librarian's hands are free. This action makes the book on the shelf accessible and the librarian holds the removed book.

Action name: remove-from-shelf


Your answer:

**Explanation:** 

Imagine you are a librarian in a library, and you need to take a book off the shelf. This book is placed on top of another book. The action ""remove-from-shelf"" lets you take the top book off the shelf. To do this, certain conditions, called ""preconditions,"" must be met to make sure you can successfully take the book.

For the action ""remove-from-shelf,"" let's break down what needs to be true before you can take the book off the shelf:

1. **The book must be on the shelf:** This means the book you want to take is on top of another book on the shelf.
2. **The book must be accessible:** This means the book isn't covered by other books or objects, so you can easily reach it.
3. **Your hands must be free:** You need to have empty hands to pick up the book, meaning you aren't already holding something else.
4. **The book must belong to a certain category:** This helps you know which book you are taking and ensures you are organizing the books properly.

Once these preconditions are met, you can proceed with the ""remove-from-shelf"" action. This action results in several changes, called ""effects,"" that update the status of the books and your hands:

1. **You are now holding the book:** This indicates you have picked up the book from the shelf.
2. **The book underneath becomes accessible:** Since you have removed the top book, the book underneath is now easy to reach.
3. **The book you removed is no longer accessible:** Because you are holding the book, it's not available on the shelf anymore.
4. **Your hands are no longer free:** Since you are now holding the book, your hands are occupied.
5. **The book is no longer on the shelf:** This shows that the book has been taken off the shelf.
6. **The shelf is now empty for that category:** This helps keep track of the shelf space and organization.

To summarize, the preconditions ensure the book is on the shelf, accessible, your hands are free, and you know which category the book belongs to. The effects update the situation to show you are holding the book, the book underneath is now accessible, and the shelf is empty for that category.","Parameters:
1. ?x - book
2. ?y - book
3. ?cat - category

Preconditions:
```
(and
    (on-shelf ?x ?y)
    (accessible ?x)
    (hands-free)
    (belongs-to-category ?x ?cat)
)
```

Effects:
```
(and
    (holding ?x)
    (accessible ?y)
    (not (accessible ?x))
    (not (hands-free))
    (not (on-shelf ?x ?y))
    (shelf-empty ?cat)
)
```
","(:action remove-from-shelf
    :parameters (?x - book ?y - book ?cat - category)
    :precondition (and (on-shelf ?x ?y) (accessible ?x) (hands-free) (belongs-to-category ?x ?cat))
    :effect (and (holding ?x) (accessible ?y) (not (accessible ?x)) (not (hands-free)) (not (on-shelf ?x ?y)) (shelf-empty ?cat))
)",
libraryworld,remove-from-shelf,0.717778205871582,Positive (Correct Match),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Imagine a librarian approaching a shelf where one book is placed on top of another. The 'remove-from-shelf' action allows the librarian to take the top book off the shelf, provided it is accessible and the librarian's hands are free. This action makes the book on the shelf accessible and the librarian holds the removed book.

Action name: remove-from-shelf


Your answer:
","**Explanation:** 

Imagine you are a librarian in a library, and you need to take a book off the shelf. This book is placed on top of another book. The action ""remove-from-shelf"" lets you take the top book off the shelf. To do this, certain conditions, called ""preconditions,"" must be met to make sure you can successfully take the book.

For the action ""remove-from-shelf,"" let's break down what needs to be true before you can take the book off the shelf:

1. **The book must be on the shelf:** This means the book you want to take is on top of another book on the shelf.
2. **The book must be accessible:** This means the book isn't covered by other books or objects, so you can easily reach it.
3. **Your hands must be free:** You need to have empty hands to pick up the book, meaning you aren't already holding something else.
4. **The book must belong to a certain category:** This helps you know which book you are taking and ensures you are organizing the books properly.

Once these preconditions are met, you can proceed with the ""remove-from-shelf"" action. This action results in several changes, called ""effects,"" that update the status of the books and your hands:

1. **You are now holding the book:** This indicates you have picked up the book from the shelf.
2. **The book underneath becomes accessible:** Since you have removed the top book, the book underneath is now easy to reach.
3. **The book you removed is no longer accessible:** Because you are holding the book, it's not available on the shelf anymore.
4. **Your hands are no longer free:** Since you are now holding the book, your hands are occupied.
5. **The book is no longer on the shelf:** This shows that the book has been taken off the shelf.
6. **The shelf is now empty for that category:** This helps keep track of the shelf space and organization.

To summarize, the preconditions ensure the book is on the shelf, accessible, your hands are free, and you know which category the book belongs to. The effects update the situation to show you are holding the book, the book underneath is now accessible, and the shelf is empty for that category.
Parameters:
1. ?x - book
2. ?y - book
3. ?cat - category

Preconditions:
```
(and
    (on-shelf ?x ?y)
    (accessible ?x)
    (hands-free)
    (belongs-to-category ?x ?cat)
)
```

Effects:
```
(and
    (holding ?x)
    (accessible ?y)
    (not (accessible ?x))
    (not (hands-free))
    (not (on-shelf ?x ?y))
    (shelf-empty ?cat)
)
```
","(:action remove-from-shelf
    :parameters (?x - book ?y - book ?cat - category)
    :precondition (and (on-shelf ?x ?y) (accessible ?x) (hands-free) (belongs-to-category ?x ?cat))
    :effect (and (holding ?x) (accessible ?y) (not (accessible ?x)) (not (hands-free)) (not (on-shelf ?x ?y)) (shelf-empty ?cat))
)",
libraryworld,remove-from-shelf,0.0675392746925354,Easy Negative (Inter-Domain Mismatch),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Imagine a librarian approaching a shelf where one book is placed on top of another. The 'remove-from-shelf' action allows the librarian to take the top book off the shelf, provided it is accessible and the librarian's hands are free. This action makes the book on the shelf accessible and the librarian holds the removed book.

Action name: remove-from-shelf


Your answer:
","Parameters:
1. ?from - cells
2. ?to - cells

Preconditions:
```
(and
    (connected ?from ?to)
    (at-hero ?from)
    (not (is-destroyed ?to))
    (not (has-trap ?from))
    (has-trap ?to)
    (arm-free)
)
```

Effects:
```
(and
    (at-hero ?to)
    (is-destroyed ?from)
    (not (at-hero ?from))
)
```
","(:action remove-from-shelf
    :parameters (?x - book ?y - book ?cat - category)
    :precondition (and (on-shelf ?x ?y) (accessible ?x) (hands-free) (belongs-to-category ?x ?cat))
    :effect (and (holding ?x) (accessible ?y) (not (accessible ?x)) (not (hands-free)) (not (on-shelf ?x ?y)) (shelf-empty ?cat))
)",
libraryworld,remove-from-shelf,0.0897703617811203,Easy Negative (Inter-Domain Mismatch),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Imagine a librarian approaching a shelf where one book is placed on top of another. The 'remove-from-shelf' action allows the librarian to take the top book off the shelf, provided it is accessible and the librarian's hands are free. This action makes the book on the shelf accessible and the librarian holds the removed book.

Action name: remove-from-shelf


Your answer:
","Parameters:
1. ?from - cells
2. ?to - cells

Preconditions:
```
(and
    (connected ?from ?to)
    (at-hero ?from)
    (not (has-trap ?from))
    (not (is-destroyed ?to))
    (not (has-trap ?to))
    (not (has-monster ?to))
)
```

Effects:
```
(and
    (at-hero ?to)
    (is-destroyed ?from)
    (not (at-hero ?from))
)
```
","(:action remove-from-shelf
    :parameters (?x - book ?y - book ?cat - category)
    :precondition (and (on-shelf ?x ?y) (accessible ?x) (hands-free) (belongs-to-category ?x ?cat))
    :effect (and (holding ?x) (accessible ?y) (not (accessible ?x)) (not (hands-free)) (not (on-shelf ?x ?y)) (shelf-empty ?cat))
)",
libraryworld,remove-from-shelf,0.10826129466295242,Easy Negative (Inter-Domain Mismatch),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Imagine a librarian approaching a shelf where one book is placed on top of another. The 'remove-from-shelf' action allows the librarian to take the top book off the shelf, provided it is accessible and the librarian's hands are free. This action makes the book on the shelf accessible and the librarian holds the removed book.

Action name: remove-from-shelf


Your answer:
","Parameters:
1. ?loc - cells
2. ?s - swords

Preconditions:
```
(and
    (at-hero ?loc)
    (at-sword ?s ?loc)
    (arm-free)
)
```

Effects:
```
(and
    (holding ?s)
    (not (at-sword ?s ?loc))
    (not (arm-free))
)
```
","(:action remove-from-shelf
    :parameters (?x - book ?y - book ?cat - category)
    :precondition (and (on-shelf ?x ?y) (accessible ?x) (hands-free) (belongs-to-category ?x ?cat))
    :effect (and (holding ?x) (accessible ?y) (not (accessible ?x)) (not (hands-free)) (not (on-shelf ?x ?y)) (shelf-empty ?cat))
)",
libraryworld,remove-from-shelf,0.13337838649749756,Easy Negative (Inter-Domain Mismatch),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Imagine a librarian approaching a shelf where one book is placed on top of another. The 'remove-from-shelf' action allows the librarian to take the top book off the shelf, provided it is accessible and the librarian's hands are free. This action makes the book on the shelf accessible and the librarian holds the removed book.

Action name: remove-from-shelf


Your answer:
","Parameters:
1. ?loc - cells

Preconditions:
```
(and
    (at-hero ?loc)
    (arm-free)
    (has-trap ?loc)
)
```

Effects:
```
(and
    (trap-disarmed ?loc)
    (not (has-trap ?loc))
)
```
","(:action remove-from-shelf
    :parameters (?x - book ?y - book ?cat - category)
    :precondition (and (on-shelf ?x ?y) (accessible ?x) (hands-free) (belongs-to-category ?x ?cat))
    :effect (and (holding ?x) (accessible ?y) (not (accessible ?x)) (not (hands-free)) (not (on-shelf ?x ?y)) (shelf-empty ?cat))
)",
libraryworld,remove-from-shelf,0.18069863319396973,Easy Negative (Inter-Domain Mismatch),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Imagine a librarian approaching a shelf where one book is placed on top of another. The 'remove-from-shelf' action allows the librarian to take the top book off the shelf, provided it is accessible and the librarian's hands are free. This action makes the book on the shelf accessible and the librarian holds the removed book.

Action name: remove-from-shelf


Your answer:
","Parameters:
1. ?from - cells
2. ?to - cells
3. ?s - swords

Preconditions:
```
(and
    (connected ?from ?to)
    (at-hero ?from)
    (has-monster ?to)
    (not (is-destroyed ?to))
    (not (has-trap ?from))
    (holding ?s)
)
```

Effects:
```
(and
    (at-hero ?to)
    (is-destroyed ?from)
    (not (at-hero ?from))
)
```
","(:action remove-from-shelf
    :parameters (?x - book ?y - book ?cat - category)
    :precondition (and (on-shelf ?x ?y) (accessible ?x) (hands-free) (belongs-to-category ?x ?cat))
    :effect (and (holding ?x) (accessible ?y) (not (accessible ?x)) (not (hands-free)) (not (on-shelf ?x ?y)) (shelf-empty ?cat))
)",
libraryworld,remove-from-shelf,0.09276842325925827,Easy Negative (Inter-Domain Mismatch),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Imagine a librarian approaching a shelf where one book is placed on top of another. The 'remove-from-shelf' action allows the librarian to take the top book off the shelf, provided it is accessible and the librarian's hands are free. This action makes the book on the shelf accessible and the librarian holds the removed book.

Action name: remove-from-shelf


Your answer:
","Parameters:
1. ?loc - cells
2. ?s - swords

Preconditions:
```
(and
    (at-hero ?loc)
    (holding ?s)
    (not (has-trap ?loc))
    (not (has-monster ?loc))
)
```

Effects:
```
(and
    (arm-free)
    (is-destroyed ?s)
    (not (holding ?s))
)
```
","(:action remove-from-shelf
    :parameters (?x - book ?y - book ?cat - category)
    :precondition (and (on-shelf ?x ?y) (accessible ?x) (hands-free) (belongs-to-category ?x ?cat))
    :effect (and (holding ?x) (accessible ?y) (not (accessible ?x)) (not (hands-free)) (not (on-shelf ?x ?y)) (shelf-empty ?cat))
)",
libraryworld,remove-from-shelf,0.0675392746925354,Easy Negative (Inter-Domain Mismatch),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Imagine a librarian approaching a shelf where one book is placed on top of another. The 'remove-from-shelf' action allows the librarian to take the top book off the shelf, provided it is accessible and the librarian's hands are free. This action makes the book on the shelf accessible and the librarian holds the removed book.

Action name: remove-from-shelf


Your answer:

**Explanation:** 

Imagine you are a librarian in a library, and you need to take a book off the shelf. This book is placed on top of another book. The action ""remove-from-shelf"" lets you take the top book off the shelf. To do this, certain conditions, called ""preconditions,"" must be met to make sure you can successfully take the book.

For the action ""remove-from-shelf,"" let's break down what needs to be true before you can take the book off the shelf:

1. **The book must be on the shelf:** This means the book you want to take is on top of another book on the shelf.
2. **The book must be accessible:** This means the book isn't covered by other books or objects, so you can easily reach it.
3. **Your hands must be free:** You need to have empty hands to pick up the book, meaning you aren't already holding something else.
4. **The book must belong to a certain category:** This helps you know which book you are taking and ensures you are organizing the books properly.

Once these preconditions are met, you can proceed with the ""remove-from-shelf"" action. This action results in several changes, called ""effects,"" that update the status of the books and your hands:

1. **You are now holding the book:** This indicates you have picked up the book from the shelf.
2. **The book underneath becomes accessible:** Since you have removed the top book, the book underneath is now easy to reach.
3. **The book you removed is no longer accessible:** Because you are holding the book, it's not available on the shelf anymore.
4. **Your hands are no longer free:** Since you are now holding the book, your hands are occupied.
5. **The book is no longer on the shelf:** This shows that the book has been taken off the shelf.
6. **The shelf is now empty for that category:** This helps keep track of the shelf space and organization.

To summarize, the preconditions ensure the book is on the shelf, accessible, your hands are free, and you know which category the book belongs to. The effects update the situation to show you are holding the book, the book underneath is now accessible, and the shelf is empty for that category.","Parameters:
1. ?from - cells
2. ?to - cells

Preconditions:
```
(and
    (connected ?from ?to)
    (at-hero ?from)
    (not (is-destroyed ?to))
    (not (has-trap ?from))
    (has-trap ?to)
    (arm-free)
)
```

Effects:
```
(and
    (at-hero ?to)
    (is-destroyed ?from)
    (not (at-hero ?from))
)
```
","(:action remove-from-shelf
    :parameters (?x - book ?y - book ?cat - category)
    :precondition (and (on-shelf ?x ?y) (accessible ?x) (hands-free) (belongs-to-category ?x ?cat))
    :effect (and (holding ?x) (accessible ?y) (not (accessible ?x)) (not (hands-free)) (not (on-shelf ?x ?y)) (shelf-empty ?cat))
)",
libraryworld,remove-from-shelf,0.0897703617811203,Easy Negative (Inter-Domain Mismatch),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Imagine a librarian approaching a shelf where one book is placed on top of another. The 'remove-from-shelf' action allows the librarian to take the top book off the shelf, provided it is accessible and the librarian's hands are free. This action makes the book on the shelf accessible and the librarian holds the removed book.

Action name: remove-from-shelf


Your answer:

**Explanation:** 

Imagine you are a librarian in a library, and you need to take a book off the shelf. This book is placed on top of another book. The action ""remove-from-shelf"" lets you take the top book off the shelf. To do this, certain conditions, called ""preconditions,"" must be met to make sure you can successfully take the book.

For the action ""remove-from-shelf,"" let's break down what needs to be true before you can take the book off the shelf:

1. **The book must be on the shelf:** This means the book you want to take is on top of another book on the shelf.
2. **The book must be accessible:** This means the book isn't covered by other books or objects, so you can easily reach it.
3. **Your hands must be free:** You need to have empty hands to pick up the book, meaning you aren't already holding something else.
4. **The book must belong to a certain category:** This helps you know which book you are taking and ensures you are organizing the books properly.

Once these preconditions are met, you can proceed with the ""remove-from-shelf"" action. This action results in several changes, called ""effects,"" that update the status of the books and your hands:

1. **You are now holding the book:** This indicates you have picked up the book from the shelf.
2. **The book underneath becomes accessible:** Since you have removed the top book, the book underneath is now easy to reach.
3. **The book you removed is no longer accessible:** Because you are holding the book, it's not available on the shelf anymore.
4. **Your hands are no longer free:** Since you are now holding the book, your hands are occupied.
5. **The book is no longer on the shelf:** This shows that the book has been taken off the shelf.
6. **The shelf is now empty for that category:** This helps keep track of the shelf space and organization.

To summarize, the preconditions ensure the book is on the shelf, accessible, your hands are free, and you know which category the book belongs to. The effects update the situation to show you are holding the book, the book underneath is now accessible, and the shelf is empty for that category.","Parameters:
1. ?from - cells
2. ?to - cells

Preconditions:
```
(and
    (connected ?from ?to)
    (at-hero ?from)
    (not (has-trap ?from))
    (not (is-destroyed ?to))
    (not (has-trap ?to))
    (not (has-monster ?to))
)
```

Effects:
```
(and
    (at-hero ?to)
    (is-destroyed ?from)
    (not (at-hero ?from))
)
```
","(:action remove-from-shelf
    :parameters (?x - book ?y - book ?cat - category)
    :precondition (and (on-shelf ?x ?y) (accessible ?x) (hands-free) (belongs-to-category ?x ?cat))
    :effect (and (holding ?x) (accessible ?y) (not (accessible ?x)) (not (hands-free)) (not (on-shelf ?x ?y)) (shelf-empty ?cat))
)",
libraryworld,remove-from-shelf,0.10826129466295242,Easy Negative (Inter-Domain Mismatch),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Imagine a librarian approaching a shelf where one book is placed on top of another. The 'remove-from-shelf' action allows the librarian to take the top book off the shelf, provided it is accessible and the librarian's hands are free. This action makes the book on the shelf accessible and the librarian holds the removed book.

Action name: remove-from-shelf


Your answer:

**Explanation:** 

Imagine you are a librarian in a library, and you need to take a book off the shelf. This book is placed on top of another book. The action ""remove-from-shelf"" lets you take the top book off the shelf. To do this, certain conditions, called ""preconditions,"" must be met to make sure you can successfully take the book.

For the action ""remove-from-shelf,"" let's break down what needs to be true before you can take the book off the shelf:

1. **The book must be on the shelf:** This means the book you want to take is on top of another book on the shelf.
2. **The book must be accessible:** This means the book isn't covered by other books or objects, so you can easily reach it.
3. **Your hands must be free:** You need to have empty hands to pick up the book, meaning you aren't already holding something else.
4. **The book must belong to a certain category:** This helps you know which book you are taking and ensures you are organizing the books properly.

Once these preconditions are met, you can proceed with the ""remove-from-shelf"" action. This action results in several changes, called ""effects,"" that update the status of the books and your hands:

1. **You are now holding the book:** This indicates you have picked up the book from the shelf.
2. **The book underneath becomes accessible:** Since you have removed the top book, the book underneath is now easy to reach.
3. **The book you removed is no longer accessible:** Because you are holding the book, it's not available on the shelf anymore.
4. **Your hands are no longer free:** Since you are now holding the book, your hands are occupied.
5. **The book is no longer on the shelf:** This shows that the book has been taken off the shelf.
6. **The shelf is now empty for that category:** This helps keep track of the shelf space and organization.

To summarize, the preconditions ensure the book is on the shelf, accessible, your hands are free, and you know which category the book belongs to. The effects update the situation to show you are holding the book, the book underneath is now accessible, and the shelf is empty for that category.","Parameters:
1. ?loc - cells
2. ?s - swords

Preconditions:
```
(and
    (at-hero ?loc)
    (at-sword ?s ?loc)
    (arm-free)
)
```

Effects:
```
(and
    (holding ?s)
    (not (at-sword ?s ?loc))
    (not (arm-free))
)
```
","(:action remove-from-shelf
    :parameters (?x - book ?y - book ?cat - category)
    :precondition (and (on-shelf ?x ?y) (accessible ?x) (hands-free) (belongs-to-category ?x ?cat))
    :effect (and (holding ?x) (accessible ?y) (not (accessible ?x)) (not (hands-free)) (not (on-shelf ?x ?y)) (shelf-empty ?cat))
)",
libraryworld,remove-from-shelf,0.13337838649749756,Easy Negative (Inter-Domain Mismatch),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Imagine a librarian approaching a shelf where one book is placed on top of another. The 'remove-from-shelf' action allows the librarian to take the top book off the shelf, provided it is accessible and the librarian's hands are free. This action makes the book on the shelf accessible and the librarian holds the removed book.

Action name: remove-from-shelf


Your answer:

**Explanation:** 

Imagine you are a librarian in a library, and you need to take a book off the shelf. This book is placed on top of another book. The action ""remove-from-shelf"" lets you take the top book off the shelf. To do this, certain conditions, called ""preconditions,"" must be met to make sure you can successfully take the book.

For the action ""remove-from-shelf,"" let's break down what needs to be true before you can take the book off the shelf:

1. **The book must be on the shelf:** This means the book you want to take is on top of another book on the shelf.
2. **The book must be accessible:** This means the book isn't covered by other books or objects, so you can easily reach it.
3. **Your hands must be free:** You need to have empty hands to pick up the book, meaning you aren't already holding something else.
4. **The book must belong to a certain category:** This helps you know which book you are taking and ensures you are organizing the books properly.

Once these preconditions are met, you can proceed with the ""remove-from-shelf"" action. This action results in several changes, called ""effects,"" that update the status of the books and your hands:

1. **You are now holding the book:** This indicates you have picked up the book from the shelf.
2. **The book underneath becomes accessible:** Since you have removed the top book, the book underneath is now easy to reach.
3. **The book you removed is no longer accessible:** Because you are holding the book, it's not available on the shelf anymore.
4. **Your hands are no longer free:** Since you are now holding the book, your hands are occupied.
5. **The book is no longer on the shelf:** This shows that the book has been taken off the shelf.
6. **The shelf is now empty for that category:** This helps keep track of the shelf space and organization.

To summarize, the preconditions ensure the book is on the shelf, accessible, your hands are free, and you know which category the book belongs to. The effects update the situation to show you are holding the book, the book underneath is now accessible, and the shelf is empty for that category.","Parameters:
1. ?loc - cells

Preconditions:
```
(and
    (at-hero ?loc)
    (arm-free)
    (has-trap ?loc)
)
```

Effects:
```
(and
    (trap-disarmed ?loc)
    (not (has-trap ?loc))
)
```
","(:action remove-from-shelf
    :parameters (?x - book ?y - book ?cat - category)
    :precondition (and (on-shelf ?x ?y) (accessible ?x) (hands-free) (belongs-to-category ?x ?cat))
    :effect (and (holding ?x) (accessible ?y) (not (accessible ?x)) (not (hands-free)) (not (on-shelf ?x ?y)) (shelf-empty ?cat))
)",
libraryworld,remove-from-shelf,0.18069863319396973,Easy Negative (Inter-Domain Mismatch),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Imagine a librarian approaching a shelf where one book is placed on top of another. The 'remove-from-shelf' action allows the librarian to take the top book off the shelf, provided it is accessible and the librarian's hands are free. This action makes the book on the shelf accessible and the librarian holds the removed book.

Action name: remove-from-shelf


Your answer:

**Explanation:** 

Imagine you are a librarian in a library, and you need to take a book off the shelf. This book is placed on top of another book. The action ""remove-from-shelf"" lets you take the top book off the shelf. To do this, certain conditions, called ""preconditions,"" must be met to make sure you can successfully take the book.

For the action ""remove-from-shelf,"" let's break down what needs to be true before you can take the book off the shelf:

1. **The book must be on the shelf:** This means the book you want to take is on top of another book on the shelf.
2. **The book must be accessible:** This means the book isn't covered by other books or objects, so you can easily reach it.
3. **Your hands must be free:** You need to have empty hands to pick up the book, meaning you aren't already holding something else.
4. **The book must belong to a certain category:** This helps you know which book you are taking and ensures you are organizing the books properly.

Once these preconditions are met, you can proceed with the ""remove-from-shelf"" action. This action results in several changes, called ""effects,"" that update the status of the books and your hands:

1. **You are now holding the book:** This indicates you have picked up the book from the shelf.
2. **The book underneath becomes accessible:** Since you have removed the top book, the book underneath is now easy to reach.
3. **The book you removed is no longer accessible:** Because you are holding the book, it's not available on the shelf anymore.
4. **Your hands are no longer free:** Since you are now holding the book, your hands are occupied.
5. **The book is no longer on the shelf:** This shows that the book has been taken off the shelf.
6. **The shelf is now empty for that category:** This helps keep track of the shelf space and organization.

To summarize, the preconditions ensure the book is on the shelf, accessible, your hands are free, and you know which category the book belongs to. The effects update the situation to show you are holding the book, the book underneath is now accessible, and the shelf is empty for that category.","Parameters:
1. ?from - cells
2. ?to - cells
3. ?s - swords

Preconditions:
```
(and
    (connected ?from ?to)
    (at-hero ?from)
    (has-monster ?to)
    (not (is-destroyed ?to))
    (not (has-trap ?from))
    (holding ?s)
)
```

Effects:
```
(and
    (at-hero ?to)
    (is-destroyed ?from)
    (not (at-hero ?from))
)
```
","(:action remove-from-shelf
    :parameters (?x - book ?y - book ?cat - category)
    :precondition (and (on-shelf ?x ?y) (accessible ?x) (hands-free) (belongs-to-category ?x ?cat))
    :effect (and (holding ?x) (accessible ?y) (not (accessible ?x)) (not (hands-free)) (not (on-shelf ?x ?y)) (shelf-empty ?cat))
)",
libraryworld,remove-from-shelf,0.09276842325925827,Easy Negative (Inter-Domain Mismatch),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Imagine a librarian approaching a shelf where one book is placed on top of another. The 'remove-from-shelf' action allows the librarian to take the top book off the shelf, provided it is accessible and the librarian's hands are free. This action makes the book on the shelf accessible and the librarian holds the removed book.

Action name: remove-from-shelf


Your answer:

**Explanation:** 

Imagine you are a librarian in a library, and you need to take a book off the shelf. This book is placed on top of another book. The action ""remove-from-shelf"" lets you take the top book off the shelf. To do this, certain conditions, called ""preconditions,"" must be met to make sure you can successfully take the book.

For the action ""remove-from-shelf,"" let's break down what needs to be true before you can take the book off the shelf:

1. **The book must be on the shelf:** This means the book you want to take is on top of another book on the shelf.
2. **The book must be accessible:** This means the book isn't covered by other books or objects, so you can easily reach it.
3. **Your hands must be free:** You need to have empty hands to pick up the book, meaning you aren't already holding something else.
4. **The book must belong to a certain category:** This helps you know which book you are taking and ensures you are organizing the books properly.

Once these preconditions are met, you can proceed with the ""remove-from-shelf"" action. This action results in several changes, called ""effects,"" that update the status of the books and your hands:

1. **You are now holding the book:** This indicates you have picked up the book from the shelf.
2. **The book underneath becomes accessible:** Since you have removed the top book, the book underneath is now easy to reach.
3. **The book you removed is no longer accessible:** Because you are holding the book, it's not available on the shelf anymore.
4. **Your hands are no longer free:** Since you are now holding the book, your hands are occupied.
5. **The book is no longer on the shelf:** This shows that the book has been taken off the shelf.
6. **The shelf is now empty for that category:** This helps keep track of the shelf space and organization.

To summarize, the preconditions ensure the book is on the shelf, accessible, your hands are free, and you know which category the book belongs to. The effects update the situation to show you are holding the book, the book underneath is now accessible, and the shelf is empty for that category.","Parameters:
1. ?loc - cells
2. ?s - swords

Preconditions:
```
(and
    (at-hero ?loc)
    (holding ?s)
    (not (has-trap ?loc))
    (not (has-monster ?loc))
)
```

Effects:
```
(and
    (arm-free)
    (is-destroyed ?s)
    (not (holding ?s))
)
```
","(:action remove-from-shelf
    :parameters (?x - book ?y - book ?cat - category)
    :precondition (and (on-shelf ?x ?y) (accessible ?x) (hands-free) (belongs-to-category ?x ?cat))
    :effect (and (holding ?x) (accessible ?y) (not (accessible ?x)) (not (hands-free)) (not (on-shelf ?x ?y)) (shelf-empty ?cat))
)",
libraryworld,remove-from-shelf,0.14298784732818604,Easy Negative (Inter-Domain Mismatch),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Imagine a librarian approaching a shelf where one book is placed on top of another. The 'remove-from-shelf' action allows the librarian to take the top book off the shelf, provided it is accessible and the librarian's hands are free. This action makes the book on the shelf accessible and the librarian holds the removed book.

Action name: remove-from-shelf


Your answer:
","**Explanation:**

Imagine you're guiding a hero who just woke up in a mysterious dungeon. Each room can have different things: some are empty, others have monsters, some have traps, and a few might have swords. There's also a special room with an exit—our hero's goal.

Now, let's talk about the action called **move-to-trap**. This action involves our hero moving from one room (we'll call it ""Room A"") to another room (""Room B""), where, unfortunately, there's a trap waiting. Here's why each part of the plan (or action schema) makes sense:

1. **Connected Rooms**: Our hero can only move to a room directly connected to the one they're currently in. This is like being in your house and only being able to walk into rooms that have doors leading from where you are now.

2. **Hero's Current Location**: The hero must start in Room A to move to Room B. You can't move from a place if you're not actually there, right?

3. **Room B Not Destroyed**: The room our hero is moving to mustn't be already destroyed (or in ruins). It's like making sure the bridge you want to cross hasn't collapsed.

4. **Room A Doesn't Have a Trap**: It’s safer if the room our hero is leaving doesn't have a trap. Imagine trying to leave a room with a trap; it could activate and cause trouble!

5. **Room B Has a Trap**: Since the action is called **move-to-trap**, it specifically involves moving to a room with a trap, almost like knowing there's a puddle ahead but stepping into it anyway because it's the only path forward.

6. **Hero's Arm is Free**: This indicates that the hero isn’t holding anything like a sword. It’s important because handling traps might require free hands—think about needing your hands free to disarm or avoid a trap carefully.

When our hero completes this action, several things happen:
- **Hero is now in Room B**: Just like when you walk into another room, you’re no longer in the first room.
- **Room A is destroyed**: This could mean the hero leaves it in a way that no one can follow—maybe they close a heavy door that locks automatically.
- **Hero is no longer in Room A**: It confirms that the hero has completely left Room A.

This action is designed for specific situations in the dungeon where the hero might need to move strategically, even into risky areas, to navigate through the dungeon and eventually find the exit.
Parameters:
1. ?from - cells
2. ?to - cells

Preconditions:
```
(and
    (connected ?from ?to)
    (at-hero ?from)
    (not (is-destroyed ?to))
    (not (has-trap ?from))
    (has-trap ?to)
    (arm-free)
)
```

Effects:
```
(and
    (at-hero ?to)
    (is-destroyed ?from)
    (not (at-hero ?from))
)
```
","(:action remove-from-shelf
    :parameters (?x - book ?y - book ?cat - category)
    :precondition (and (on-shelf ?x ?y) (accessible ?x) (hands-free) (belongs-to-category ?x ?cat))
    :effect (and (holding ?x) (accessible ?y) (not (accessible ?x)) (not (hands-free)) (not (on-shelf ?x ?y)) (shelf-empty ?cat))
)",
libraryworld,remove-from-shelf,0.16679519414901733,Easy Negative (Inter-Domain Mismatch),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Imagine a librarian approaching a shelf where one book is placed on top of another. The 'remove-from-shelf' action allows the librarian to take the top book off the shelf, provided it is accessible and the librarian's hands are free. This action makes the book on the shelf accessible and the librarian holds the removed book.

Action name: remove-from-shelf


Your answer:
","**Explanation:**

Imagine our hero in a big, scary dungeon, just like a character from a fairy tale or a video game. The dungeon has several rooms, and some rooms are safe while others have monsters or traps. The hero's goal is to escape from this dungeon, moving from one room to another until he finds the exit.

Now, let's talk about the action called ""move"" that our hero can take. The action ""move"" lets the hero go from one room (we'll call this the ""current room"") to a connected room (let's call this the ""next room""). Think of the dungeon like a big house with many doors connecting the rooms; the hero can only move through a door if it’s open and the room on the other side is safe.

In the PDDL (a kind of programming language for planning what actions to take), the action ""move"" needs some conditions to be met before the hero can move:
1. **The rooms must be connected:** Just like you can't walk through a wall at home, the hero can only move to a room if there's a direct connection (like a doorway or a corridor).
2. **The hero must be in the current room:** The hero can only leave a room if he's actually in it.
3. **The current room shouldn’t have a trap that could hurt him.**
4. **The next room shouldn’t be destroyed:** The hero can't go into a room if it’s already been collapsed or destroyed (maybe from a previous adventure!).
5. **The next room shouldn’t have a trap or a monster:** This makes sure our hero doesn’t walk into new danger.

When the hero moves:
- **He is now in the next room:** Just like if you walk to another room in your house, you're then in that new room.
- **The room he left gets destroyed:** This might sound strange, but imagine if every time he left a room, the door magically closed and locked forever, so he can’t go back the same way.
- **He is no longer in the current room:** This is just confirming that he has moved on from the previous room.

These rules help our hero make smart moves through the dungeon, avoiding danger and making progress towards escape. This way of setting up the hero's actions makes sure he can navigate through the dungeon safely and eventually find his way out.
Parameters:
1. ?from - cells
2. ?to - cells

Preconditions:
```
(and
    (connected ?from ?to)
    (at-hero ?from)
    (not (has-trap ?from))
    (not (is-destroyed ?to))
    (not (has-trap ?to))
    (not (has-monster ?to))
)
```

Effects:
```
(and
    (at-hero ?to)
    (is-destroyed ?from)
    (not (at-hero ?from))
)
```
","(:action remove-from-shelf
    :parameters (?x - book ?y - book ?cat - category)
    :precondition (and (on-shelf ?x ?y) (accessible ?x) (hands-free) (belongs-to-category ?x ?cat))
    :effect (and (holding ?x) (accessible ?y) (not (accessible ?x)) (not (hands-free)) (not (on-shelf ?x ?y)) (shelf-empty ?cat))
)",
libraryworld,remove-from-shelf,0.211978942155838,Easy Negative (Inter-Domain Mismatch),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Imagine a librarian approaching a shelf where one book is placed on top of another. The 'remove-from-shelf' action allows the librarian to take the top book off the shelf, provided it is accessible and the librarian's hands are free. This action makes the book on the shelf accessible and the librarian holds the removed book.

Action name: remove-from-shelf


Your answer:
","**Explanation:**

Imagine you're helping a hero navigate through a tricky dungeon filled with different challenges. The hero's objective is to escape, but along the way, they might find useful items like swords that can help protect against monsters.

In our scenario, the action of picking up a sword is crucial. Let's think of it like this: if you enter a room and see a sword on the floor while your hands are free, you can pick it up. The action schema in PDDL, which is a way to represent planning problems, explains this in a structured format.

The preconditions for our action ""pick-sword"" are:
1. **The hero must be in the same room as the sword** (represented as `(at-hero ?loc)` and `(at-sword ?s ?loc)`). This makes sense because you can't pick up something that's not in the same room as you.
2. **The hero's hand must be free** (`(arm-free)`). Just like you can't hold two grocery bags in one hand easily, our hero needs a free hand to pick up the sword.

The effects after the hero picks up the sword are:
1. **The hero is now holding the sword** (`(holding ?s)`). This indicates that the hero has successfully picked up the sword.
2. **The sword is no longer in its original place** (`(not (at-sword ?s ?loc))`). Just like if you take an apple from a basket, the apple isn't in the basket anymore.
3. **The hero's hand is no longer free** (`(not (arm-free))`). Holding the sword means the hand that was free is now occupied.

This action schema is a simple way to model the interaction between the hero and the sword in the dungeon. It helps ensure that all necessary conditions are met before the action takes place, making the hero's journey through the dungeon logical and structured. This way, the hero doesn't magically have a sword without picking it up or has two items in one hand, which keeps our dungeon adventure realistic and understandable.
Parameters:
1. ?loc - cells
2. ?s - swords

Preconditions:
```
(and
    (at-hero ?loc)
    (at-sword ?s ?loc)
    (arm-free)
)
```

Effects:
```
(and
    (holding ?s)
    (not (at-sword ?s ?loc))
    (not (arm-free))
)
```
","(:action remove-from-shelf
    :parameters (?x - book ?y - book ?cat - category)
    :precondition (and (on-shelf ?x ?y) (accessible ?x) (hands-free) (belongs-to-category ?x ?cat))
    :effect (and (holding ?x) (accessible ?y) (not (accessible ?x)) (not (hands-free)) (not (on-shelf ?x ?y)) (shelf-empty ?cat))
)",
libraryworld,remove-from-shelf,0.09859811514616013,Easy Negative (Inter-Domain Mismatch),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Imagine a librarian approaching a shelf where one book is placed on top of another. The 'remove-from-shelf' action allows the librarian to take the top book off the shelf, provided it is accessible and the librarian's hands are free. This action makes the book on the shelf accessible and the librarian holds the removed book.

Action name: remove-from-shelf


Your answer:
","**Explanation:**

Imagine our hero in a dungeon, a place with rooms connected like a spider web. Each room can be just an empty space, or it might have something like a monster, a trap, or even a sword. Somewhere in this maze, there's a special room that has an exit—the ultimate goal for our hero.

Now, let's focus on a specific action our hero might need to take: **disarming a trap**. In our scenario, the hero finds themselves in a room with a trap. The action to disarm this trap is what we need to understand.

The action is named `disarm-trap`. This action, like any other, has specific requirements (preconditions) that must be met before the hero can perform it. These preconditions are:
1. **The hero must be in the same room as the trap.** This makes sense because you can't disarm a trap from another room. It's like needing to be in the kitchen to turn off a stove.
2. **The hero's hand must be free.** This means the hero can’t be holding anything, like a sword. It's a bit like needing both hands free to tie your shoes properly.
3. **There must actually be a trap in the room.** Obviously, the hero can't disarm a trap if there isn't one there!

If all these conditions are met, then the hero can go ahead and disarm the trap. The results (effects) of this action are:
1. **The trap in the room is disarmed.** This means the room is now safe from that trap.
2. **The trap is no longer considered to be in the room.** It's like cleaning up a spill; once it's cleaned, it's not there anymore.

By breaking down the action like this, we see how each condition helps ensure the action can be carried out safely and effectively. It’s just like following a recipe—each ingredient needs to be added at the right time for the dish to come out right!
Parameters:
1. ?loc - cells

Preconditions:
```
(and
    (at-hero ?loc)
    (arm-free)
    (has-trap ?loc)
)
```

Effects:
```
(and
    (trap-disarmed ?loc)
    (not (has-trap ?loc))
)
```
","(:action remove-from-shelf
    :parameters (?x - book ?y - book ?cat - category)
    :precondition (and (on-shelf ?x ?y) (accessible ?x) (hands-free) (belongs-to-category ?x ?cat))
    :effect (and (holding ?x) (accessible ?y) (not (accessible ?x)) (not (hands-free)) (not (on-shelf ?x ?y)) (shelf-empty ?cat))
)",
libraryworld,remove-from-shelf,0.23667368292808533,Easy Negative (Inter-Domain Mismatch),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Imagine a librarian approaching a shelf where one book is placed on top of another. The 'remove-from-shelf' action allows the librarian to take the top book off the shelf, provided it is accessible and the librarian's hands are free. This action makes the book on the shelf accessible and the librarian holds the removed book.

Action name: remove-from-shelf


Your answer:
","**Explanation:**

Let's imagine our hero in the dungeon scenario. The hero wakes up and finds themselves in a room, wanting to move to an adjacent room where, unfortunately, there's a monster. Here's how we translate this scenario into a set of instructions, or a 'domain model,' in planning language.

The action we're talking about is called ""move-to-monster."" This means our hero is trying to move from one room (let’s call it Room A) to another room (Room B) where there is a monster. To ensure this action can happen, there are certain conditions that need to be met (these are called 'preconditions') and certain outcomes that will happen as a result of the action (these are called 'effects').

1. **Preconditions**:
   - **Connected Rooms**: Room A and Room B must be connected by a corridor. This makes sense because our hero can't magically jump from one room to another; there must be a path.
   - **Hero's Current Location**: The hero must currently be in Room A. If the hero isn't there, they can't start moving from it!
   - **Monster Presence**: Room B must have a monster. After all, the action is specifically about moving to a room with a monster.
   - **Room Integrity**: Room B should not be destroyed. A destroyed room might mean it’s collapsed or inaccessible, so it's logical our hero can’t move into it.
   - **Safety in Room A**: Room A should not have a trap. This makes sure our hero is safe and able to move without getting caught in a trap.
   - **Armed Hero**: The hero must be holding a sword. It’s a dangerous task to move into a room with a monster, so having a sword means the hero is prepared for a fight.

2. **Effects**:
   - **Hero's New Location**: After the action, the hero will be in Room B. They've successfully moved.
   - **Change in Room A's Status**: Room A becomes 'destroyed.' This might represent that the room is no longer safe or viable after the hero leaves, maybe because of the haste in escaping or some mechanism triggered by the departure.
   - **Update Hero's Old Location**: The fact that the hero was in Room A is no longer true, which is updated in our model to reflect the hero’s new position.

This planning helps organize our thoughts and actions logically, ensuring every step is clear and all necessary precautions are taken. Think of it like giving someone directions with a checklist: ""Before you go there, make sure this, this, and this are true, and once you do, this and this will happen."" This ensures everyone knows what to expect and how to prepare! 
Parameters:
1. ?from - cells
2. ?to - cells
3. ?s - swords

Preconditions:
```
(and
    (connected ?from ?to)
    (at-hero ?from)
    (has-monster ?to)
    (not (is-destroyed ?to))
    (not (has-trap ?from))
    (holding ?s)
)
```

Effects:
```
(and
    (at-hero ?to)
    (is-destroyed ?from)
    (not (at-hero ?from))
)
```
","(:action remove-from-shelf
    :parameters (?x - book ?y - book ?cat - category)
    :precondition (and (on-shelf ?x ?y) (accessible ?x) (hands-free) (belongs-to-category ?x ?cat))
    :effect (and (holding ?x) (accessible ?y) (not (accessible ?x)) (not (hands-free)) (not (on-shelf ?x ?y)) (shelf-empty ?cat))
)",
libraryworld,remove-from-shelf,0.1307467818260193,Easy Negative (Inter-Domain Mismatch),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Imagine a librarian approaching a shelf where one book is placed on top of another. The 'remove-from-shelf' action allows the librarian to take the top book off the shelf, provided it is accessible and the librarian's hands are free. This action makes the book on the shelf accessible and the librarian holds the removed book.

Action name: remove-from-shelf


Your answer:
","**Explanation:**

Imagine you're helping a hero navigate a dungeon full of monsters and traps, a bit like playing a video game. Now, the hero has a sword, but in this part of the game, the hero decides to destroy the sword. To understand why certain conditions are checked before the hero can destroy the sword safely, let's break it down using the action ""destroy-sword"" from the game's rules (or in technical terms, the PDDL action schema).

Firstly, the hero needs to be in the same location as the sword. This makes sense, right? You can't throw something away or break it if it's not with you. So, the condition `(at-hero ?loc)` ensures that the hero is at the right spot to perform the action.

Secondly, the hero must be holding the sword. It’s similar to needing both hands on a bat to swing it; here, the hero needs to have the sword in hand to destroy it, checked by `(holding ?s)`.

But why check for no traps or monsters in the room? Think of it like trying to do something delicate, like assembling a model airplane, in a room with a loose tiger. Not a great idea, right? If there’s a monster in the room, destroying the sword might make the hero vulnerable to attack. Similarly, a trap could be triggered by the noise or movement, putting the hero in danger. So, `(not (has-trap ?loc))` and `(not (has-monster ?loc))` ensure that the environment is safe for the hero to break the sword without turning the situation worse.

Now, what happens after the sword is destroyed? The effect is that the hero’s hand is now free (`arm-free`), the sword is confirmed as destroyed (`is-destroyed ?s`), and the hero is no longer holding it (`not (holding ?s)`). It’s like cleaning up after finishing a task: put away the tools, clean up the mess, and free up your hands for the next task.

In simple terms, this action schema is like a set of instructions to make sure the hero does something risky (like destroying a sword) safely and responsibly, without making the dangerous dungeon situation even worse.
Parameters:
1. ?loc - cells
2. ?s - swords

Preconditions:
```
(and
    (at-hero ?loc)
    (holding ?s)
    (not (has-trap ?loc))
    (not (has-monster ?loc))
)
```

Effects:
```
(and
    (arm-free)
    (is-destroyed ?s)
    (not (holding ?s))
)
```
","(:action remove-from-shelf
    :parameters (?x - book ?y - book ?cat - category)
    :precondition (and (on-shelf ?x ?y) (accessible ?x) (hands-free) (belongs-to-category ?x ?cat))
    :effect (and (holding ?x) (accessible ?y) (not (accessible ?x)) (not (hands-free)) (not (on-shelf ?x ?y)) (shelf-empty ?cat))
)",
libraryworld,remove-from-shelf,0.5250560641288757,Semi-Hard Negative (Intra-Domain Mismatch),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Imagine a librarian approaching a shelf where one book is placed on top of another. The 'remove-from-shelf' action allows the librarian to take the top book off the shelf, provided it is accessible and the librarian's hands are free. This action makes the book on the shelf accessible and the librarian holds the removed book.

Action name: remove-from-shelf


Your answer:
","Parameters:
1. ?x - book

Preconditions:
```
(holding ?x)
```

Effects:
```
(and
    (not (holding ?x))
    (accessible ?x)
    (hands-free)
    (on-table ?x)
)
```
","(:action remove-from-shelf
    :parameters (?x - book ?y - book ?cat - category)
    :precondition (and (on-shelf ?x ?y) (accessible ?x) (hands-free) (belongs-to-category ?x ?cat))
    :effect (and (holding ?x) (accessible ?y) (not (accessible ?x)) (not (hands-free)) (not (on-shelf ?x ?y)) (shelf-empty ?cat))
)",
libraryworld,remove-from-shelf,0.697905421257019,Semi-Hard Negative (Intra-Domain Mismatch),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Imagine a librarian approaching a shelf where one book is placed on top of another. The 'remove-from-shelf' action allows the librarian to take the top book off the shelf, provided it is accessible and the librarian's hands are free. This action makes the book on the shelf accessible and the librarian holds the removed book.

Action name: remove-from-shelf


Your answer:
","Parameters:
1. ?x - book

Preconditions:
```
(and
    (accessible ?x)
    (not (checked-out ?x))
)
```

Effects:
```
(and
    (checked-out ?x)
    (not (accessible ?x))
    (book-request ?x)
    (return-due ?x)
)
```
","(:action remove-from-shelf
    :parameters (?x - book ?y - book ?cat - category)
    :precondition (and (on-shelf ?x ?y) (accessible ?x) (hands-free) (belongs-to-category ?x ?cat))
    :effect (and (holding ?x) (accessible ?y) (not (accessible ?x)) (not (hands-free)) (not (on-shelf ?x ?y)) (shelf-empty ?cat))
)",
libraryworld,remove-from-shelf,0.4014960527420044,Semi-Hard Negative (Intra-Domain Mismatch),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Imagine a librarian approaching a shelf where one book is placed on top of another. The 'remove-from-shelf' action allows the librarian to take the top book off the shelf, provided it is accessible and the librarian's hands are free. This action makes the book on the shelf accessible and the librarian holds the removed book.

Action name: remove-from-shelf


Your answer:
","Parameters:
1. ?x - book

Preconditions:
```
(and
    (checked-out ?x)
    (holding ?x)
)
```

Effects:
```
(and
    (not (checked-out ?x))
    (not (holding ?x))
    (not (book-request ?x))
    (not (return-due ?x))
    (accessible ?x)
    (hands-free)
)
```
","(:action remove-from-shelf
    :parameters (?x - book ?y - book ?cat - category)
    :precondition (and (on-shelf ?x ?y) (accessible ?x) (hands-free) (belongs-to-category ?x ?cat))
    :effect (and (holding ?x) (accessible ?y) (not (accessible ?x)) (not (hands-free)) (not (on-shelf ?x ?y)) (shelf-empty ?cat))
)",
libraryworld,remove-from-shelf,0.6028046607971191,Semi-Hard Negative (Intra-Domain Mismatch),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Imagine a librarian approaching a shelf where one book is placed on top of another. The 'remove-from-shelf' action allows the librarian to take the top book off the shelf, provided it is accessible and the librarian's hands are free. This action makes the book on the shelf accessible and the librarian holds the removed book.

Action name: remove-from-shelf


Your answer:
","Parameters:
1. ?x - book

Preconditions:
```
(and
    (accessible ?x)
    (on-table ?x)
    (hands-free)
)
```

Effects:
```
(and
    (not (on-table ?x))
    (not (accessible ?x))
    (not (hands-free))
    (holding ?x)
)
```
","(:action remove-from-shelf
    :parameters (?x - book ?y - book ?cat - category)
    :precondition (and (on-shelf ?x ?y) (accessible ?x) (hands-free) (belongs-to-category ?x ?cat))
    :effect (and (holding ?x) (accessible ?y) (not (accessible ?x)) (not (hands-free)) (not (on-shelf ?x ?y)) (shelf-empty ?cat))
)",
libraryworld,remove-from-shelf,0.8817847967147827,Semi-Hard Negative (Intra-Domain Mismatch),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Imagine a librarian approaching a shelf where one book is placed on top of another. The 'remove-from-shelf' action allows the librarian to take the top book off the shelf, provided it is accessible and the librarian's hands are free. This action makes the book on the shelf accessible and the librarian holds the removed book.

Action name: remove-from-shelf


Your answer:
","Parameters:
1. ?x - book
2. ?y - book
3. ?cat - category

Preconditions:
```
(and
    (holding ?x)
    (accessible ?y)
    (belongs-to-category ?x ?cat)
    (not (shelf-overflow ?cat))
)
```

Effects:
```
(and
    (not (holding ?x))
    (not (accessible ?y))
    (accessible ?x)
    (hands-free)
    (on-shelf ?x ?y)
    (shelf-empty ?cat)
)
```
","(:action remove-from-shelf
    :parameters (?x - book ?y - book ?cat - category)
    :precondition (and (on-shelf ?x ?y) (accessible ?x) (hands-free) (belongs-to-category ?x ?cat))
    :effect (and (holding ?x) (accessible ?y) (not (accessible ?x)) (not (hands-free)) (not (on-shelf ?x ?y)) (shelf-empty ?cat))
)",
libraryworld,remove-from-shelf,0.5250560641288757,Semi-Hard Negative (Intra-Domain Mismatch),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Imagine a librarian approaching a shelf where one book is placed on top of another. The 'remove-from-shelf' action allows the librarian to take the top book off the shelf, provided it is accessible and the librarian's hands are free. This action makes the book on the shelf accessible and the librarian holds the removed book.

Action name: remove-from-shelf


Your answer:

**Explanation:** 

Imagine you are a librarian in a library, and you need to take a book off the shelf. This book is placed on top of another book. The action ""remove-from-shelf"" lets you take the top book off the shelf. To do this, certain conditions, called ""preconditions,"" must be met to make sure you can successfully take the book.

For the action ""remove-from-shelf,"" let's break down what needs to be true before you can take the book off the shelf:

1. **The book must be on the shelf:** This means the book you want to take is on top of another book on the shelf.
2. **The book must be accessible:** This means the book isn't covered by other books or objects, so you can easily reach it.
3. **Your hands must be free:** You need to have empty hands to pick up the book, meaning you aren't already holding something else.
4. **The book must belong to a certain category:** This helps you know which book you are taking and ensures you are organizing the books properly.

Once these preconditions are met, you can proceed with the ""remove-from-shelf"" action. This action results in several changes, called ""effects,"" that update the status of the books and your hands:

1. **You are now holding the book:** This indicates you have picked up the book from the shelf.
2. **The book underneath becomes accessible:** Since you have removed the top book, the book underneath is now easy to reach.
3. **The book you removed is no longer accessible:** Because you are holding the book, it's not available on the shelf anymore.
4. **Your hands are no longer free:** Since you are now holding the book, your hands are occupied.
5. **The book is no longer on the shelf:** This shows that the book has been taken off the shelf.
6. **The shelf is now empty for that category:** This helps keep track of the shelf space and organization.

To summarize, the preconditions ensure the book is on the shelf, accessible, your hands are free, and you know which category the book belongs to. The effects update the situation to show you are holding the book, the book underneath is now accessible, and the shelf is empty for that category.","Parameters:
1. ?x - book

Preconditions:
```
(holding ?x)
```

Effects:
```
(and
    (not (holding ?x))
    (accessible ?x)
    (hands-free)
    (on-table ?x)
)
```
","(:action remove-from-shelf
    :parameters (?x - book ?y - book ?cat - category)
    :precondition (and (on-shelf ?x ?y) (accessible ?x) (hands-free) (belongs-to-category ?x ?cat))
    :effect (and (holding ?x) (accessible ?y) (not (accessible ?x)) (not (hands-free)) (not (on-shelf ?x ?y)) (shelf-empty ?cat))
)",
libraryworld,remove-from-shelf,0.697905421257019,Semi-Hard Negative (Intra-Domain Mismatch),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Imagine a librarian approaching a shelf where one book is placed on top of another. The 'remove-from-shelf' action allows the librarian to take the top book off the shelf, provided it is accessible and the librarian's hands are free. This action makes the book on the shelf accessible and the librarian holds the removed book.

Action name: remove-from-shelf


Your answer:

**Explanation:** 

Imagine you are a librarian in a library, and you need to take a book off the shelf. This book is placed on top of another book. The action ""remove-from-shelf"" lets you take the top book off the shelf. To do this, certain conditions, called ""preconditions,"" must be met to make sure you can successfully take the book.

For the action ""remove-from-shelf,"" let's break down what needs to be true before you can take the book off the shelf:

1. **The book must be on the shelf:** This means the book you want to take is on top of another book on the shelf.
2. **The book must be accessible:** This means the book isn't covered by other books or objects, so you can easily reach it.
3. **Your hands must be free:** You need to have empty hands to pick up the book, meaning you aren't already holding something else.
4. **The book must belong to a certain category:** This helps you know which book you are taking and ensures you are organizing the books properly.

Once these preconditions are met, you can proceed with the ""remove-from-shelf"" action. This action results in several changes, called ""effects,"" that update the status of the books and your hands:

1. **You are now holding the book:** This indicates you have picked up the book from the shelf.
2. **The book underneath becomes accessible:** Since you have removed the top book, the book underneath is now easy to reach.
3. **The book you removed is no longer accessible:** Because you are holding the book, it's not available on the shelf anymore.
4. **Your hands are no longer free:** Since you are now holding the book, your hands are occupied.
5. **The book is no longer on the shelf:** This shows that the book has been taken off the shelf.
6. **The shelf is now empty for that category:** This helps keep track of the shelf space and organization.

To summarize, the preconditions ensure the book is on the shelf, accessible, your hands are free, and you know which category the book belongs to. The effects update the situation to show you are holding the book, the book underneath is now accessible, and the shelf is empty for that category.","Parameters:
1. ?x - book

Preconditions:
```
(and
    (accessible ?x)
    (not (checked-out ?x))
)
```

Effects:
```
(and
    (checked-out ?x)
    (not (accessible ?x))
    (book-request ?x)
    (return-due ?x)
)
```
","(:action remove-from-shelf
    :parameters (?x - book ?y - book ?cat - category)
    :precondition (and (on-shelf ?x ?y) (accessible ?x) (hands-free) (belongs-to-category ?x ?cat))
    :effect (and (holding ?x) (accessible ?y) (not (accessible ?x)) (not (hands-free)) (not (on-shelf ?x ?y)) (shelf-empty ?cat))
)",
libraryworld,remove-from-shelf,0.4014960527420044,Semi-Hard Negative (Intra-Domain Mismatch),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Imagine a librarian approaching a shelf where one book is placed on top of another. The 'remove-from-shelf' action allows the librarian to take the top book off the shelf, provided it is accessible and the librarian's hands are free. This action makes the book on the shelf accessible and the librarian holds the removed book.

Action name: remove-from-shelf


Your answer:

**Explanation:** 

Imagine you are a librarian in a library, and you need to take a book off the shelf. This book is placed on top of another book. The action ""remove-from-shelf"" lets you take the top book off the shelf. To do this, certain conditions, called ""preconditions,"" must be met to make sure you can successfully take the book.

For the action ""remove-from-shelf,"" let's break down what needs to be true before you can take the book off the shelf:

1. **The book must be on the shelf:** This means the book you want to take is on top of another book on the shelf.
2. **The book must be accessible:** This means the book isn't covered by other books or objects, so you can easily reach it.
3. **Your hands must be free:** You need to have empty hands to pick up the book, meaning you aren't already holding something else.
4. **The book must belong to a certain category:** This helps you know which book you are taking and ensures you are organizing the books properly.

Once these preconditions are met, you can proceed with the ""remove-from-shelf"" action. This action results in several changes, called ""effects,"" that update the status of the books and your hands:

1. **You are now holding the book:** This indicates you have picked up the book from the shelf.
2. **The book underneath becomes accessible:** Since you have removed the top book, the book underneath is now easy to reach.
3. **The book you removed is no longer accessible:** Because you are holding the book, it's not available on the shelf anymore.
4. **Your hands are no longer free:** Since you are now holding the book, your hands are occupied.
5. **The book is no longer on the shelf:** This shows that the book has been taken off the shelf.
6. **The shelf is now empty for that category:** This helps keep track of the shelf space and organization.

To summarize, the preconditions ensure the book is on the shelf, accessible, your hands are free, and you know which category the book belongs to. The effects update the situation to show you are holding the book, the book underneath is now accessible, and the shelf is empty for that category.","Parameters:
1. ?x - book

Preconditions:
```
(and
    (checked-out ?x)
    (holding ?x)
)
```

Effects:
```
(and
    (not (checked-out ?x))
    (not (holding ?x))
    (not (book-request ?x))
    (not (return-due ?x))
    (accessible ?x)
    (hands-free)
)
```
","(:action remove-from-shelf
    :parameters (?x - book ?y - book ?cat - category)
    :precondition (and (on-shelf ?x ?y) (accessible ?x) (hands-free) (belongs-to-category ?x ?cat))
    :effect (and (holding ?x) (accessible ?y) (not (accessible ?x)) (not (hands-free)) (not (on-shelf ?x ?y)) (shelf-empty ?cat))
)",
libraryworld,remove-from-shelf,0.6028046607971191,Semi-Hard Negative (Intra-Domain Mismatch),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Imagine a librarian approaching a shelf where one book is placed on top of another. The 'remove-from-shelf' action allows the librarian to take the top book off the shelf, provided it is accessible and the librarian's hands are free. This action makes the book on the shelf accessible and the librarian holds the removed book.

Action name: remove-from-shelf


Your answer:

**Explanation:** 

Imagine you are a librarian in a library, and you need to take a book off the shelf. This book is placed on top of another book. The action ""remove-from-shelf"" lets you take the top book off the shelf. To do this, certain conditions, called ""preconditions,"" must be met to make sure you can successfully take the book.

For the action ""remove-from-shelf,"" let's break down what needs to be true before you can take the book off the shelf:

1. **The book must be on the shelf:** This means the book you want to take is on top of another book on the shelf.
2. **The book must be accessible:** This means the book isn't covered by other books or objects, so you can easily reach it.
3. **Your hands must be free:** You need to have empty hands to pick up the book, meaning you aren't already holding something else.
4. **The book must belong to a certain category:** This helps you know which book you are taking and ensures you are organizing the books properly.

Once these preconditions are met, you can proceed with the ""remove-from-shelf"" action. This action results in several changes, called ""effects,"" that update the status of the books and your hands:

1. **You are now holding the book:** This indicates you have picked up the book from the shelf.
2. **The book underneath becomes accessible:** Since you have removed the top book, the book underneath is now easy to reach.
3. **The book you removed is no longer accessible:** Because you are holding the book, it's not available on the shelf anymore.
4. **Your hands are no longer free:** Since you are now holding the book, your hands are occupied.
5. **The book is no longer on the shelf:** This shows that the book has been taken off the shelf.
6. **The shelf is now empty for that category:** This helps keep track of the shelf space and organization.

To summarize, the preconditions ensure the book is on the shelf, accessible, your hands are free, and you know which category the book belongs to. The effects update the situation to show you are holding the book, the book underneath is now accessible, and the shelf is empty for that category.","Parameters:
1. ?x - book

Preconditions:
```
(and
    (accessible ?x)
    (on-table ?x)
    (hands-free)
)
```

Effects:
```
(and
    (not (on-table ?x))
    (not (accessible ?x))
    (not (hands-free))
    (holding ?x)
)
```
","(:action remove-from-shelf
    :parameters (?x - book ?y - book ?cat - category)
    :precondition (and (on-shelf ?x ?y) (accessible ?x) (hands-free) (belongs-to-category ?x ?cat))
    :effect (and (holding ?x) (accessible ?y) (not (accessible ?x)) (not (hands-free)) (not (on-shelf ?x ?y)) (shelf-empty ?cat))
)",
libraryworld,remove-from-shelf,0.8817847967147827,Semi-Hard Negative (Intra-Domain Mismatch),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Imagine a librarian approaching a shelf where one book is placed on top of another. The 'remove-from-shelf' action allows the librarian to take the top book off the shelf, provided it is accessible and the librarian's hands are free. This action makes the book on the shelf accessible and the librarian holds the removed book.

Action name: remove-from-shelf


Your answer:

**Explanation:** 

Imagine you are a librarian in a library, and you need to take a book off the shelf. This book is placed on top of another book. The action ""remove-from-shelf"" lets you take the top book off the shelf. To do this, certain conditions, called ""preconditions,"" must be met to make sure you can successfully take the book.

For the action ""remove-from-shelf,"" let's break down what needs to be true before you can take the book off the shelf:

1. **The book must be on the shelf:** This means the book you want to take is on top of another book on the shelf.
2. **The book must be accessible:** This means the book isn't covered by other books or objects, so you can easily reach it.
3. **Your hands must be free:** You need to have empty hands to pick up the book, meaning you aren't already holding something else.
4. **The book must belong to a certain category:** This helps you know which book you are taking and ensures you are organizing the books properly.

Once these preconditions are met, you can proceed with the ""remove-from-shelf"" action. This action results in several changes, called ""effects,"" that update the status of the books and your hands:

1. **You are now holding the book:** This indicates you have picked up the book from the shelf.
2. **The book underneath becomes accessible:** Since you have removed the top book, the book underneath is now easy to reach.
3. **The book you removed is no longer accessible:** Because you are holding the book, it's not available on the shelf anymore.
4. **Your hands are no longer free:** Since you are now holding the book, your hands are occupied.
5. **The book is no longer on the shelf:** This shows that the book has been taken off the shelf.
6. **The shelf is now empty for that category:** This helps keep track of the shelf space and organization.

To summarize, the preconditions ensure the book is on the shelf, accessible, your hands are free, and you know which category the book belongs to. The effects update the situation to show you are holding the book, the book underneath is now accessible, and the shelf is empty for that category.","Parameters:
1. ?x - book
2. ?y - book
3. ?cat - category

Preconditions:
```
(and
    (holding ?x)
    (accessible ?y)
    (belongs-to-category ?x ?cat)
    (not (shelf-overflow ?cat))
)
```

Effects:
```
(and
    (not (holding ?x))
    (not (accessible ?y))
    (accessible ?x)
    (hands-free)
    (on-shelf ?x ?y)
    (shelf-empty ?cat)
)
```
","(:action remove-from-shelf
    :parameters (?x - book ?y - book ?cat - category)
    :precondition (and (on-shelf ?x ?y) (accessible ?x) (hands-free) (belongs-to-category ?x ?cat))
    :effect (and (holding ?x) (accessible ?y) (not (accessible ?x)) (not (hands-free)) (not (on-shelf ?x ?y)) (shelf-empty ?cat))
)",
libraryworld,remove-from-shelf,0.6384035348892212,Semi-Hard Negative (Intra-Domain Mismatch),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Imagine a librarian approaching a shelf where one book is placed on top of another. The 'remove-from-shelf' action allows the librarian to take the top book off the shelf, provided it is accessible and the librarian's hands are free. This action makes the book on the shelf accessible and the librarian holds the removed book.

Action name: remove-from-shelf


Your answer:
","**Explanation:** 

Imagine you are a librarian holding a book in your hands, and you want to place it on a nearby table. The action ""place-on-table"" lets you do this. To make sure everything goes smoothly, there is a condition, called a ""precondition,"" that must be met before you can place the book on the table.

For the action ""place-on-table,"" let's break down what needs to be true before you can place the book on the table:

1. **You must be holding the book:** This means you have the book in your hands, ready to place it on the table.

Once this precondition is met, you can proceed with the ""place-on-table"" action. This action results in several changes, called ""effects,"" that update the status of the book and your hands:

1. **You are no longer holding the book:** This shows that you have placed the book on the table.
2. **The book becomes accessible:** Now that the book is on the table, it is easy to reach and pick up again if needed.
3. **Your hands are now free:** Since you have placed the book on the table, your hands are empty again.
4. **The book is on the table:** This indicates the new location of the book.

To summarize, the precondition ensures you are holding the book, making sure you are ready to place it on the table. The effects update the situation to show that you have placed the book on the table, it is now accessible, and your hands are free again.
Parameters:
1. ?x - book

Preconditions:
```
(holding ?x)
```

Effects:
```
(and
    (not (holding ?x))
    (accessible ?x)
    (hands-free)
    (on-table ?x)
)
```
","(:action remove-from-shelf
    :parameters (?x - book ?y - book ?cat - category)
    :precondition (and (on-shelf ?x ?y) (accessible ?x) (hands-free) (belongs-to-category ?x ?cat))
    :effect (and (holding ?x) (accessible ?y) (not (accessible ?x)) (not (hands-free)) (not (on-shelf ?x ?y)) (shelf-empty ?cat))
)",
libraryworld,remove-from-shelf,0.6450091600418091,Semi-Hard Negative (Intra-Domain Mismatch),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Imagine a librarian approaching a shelf where one book is placed on top of another. The 'remove-from-shelf' action allows the librarian to take the top book off the shelf, provided it is accessible and the librarian's hands are free. This action makes the book on the shelf accessible and the librarian holds the removed book.

Action name: remove-from-shelf


Your answer:
","**Explanation:** 

Imagine a librarian in a library who helps patrons borrow books. When a patron wants to borrow a book, the librarian needs to make sure certain conditions are met before they can check the book out. These conditions are called ""preconditions.""

For the action ""check-out,"" let's think about what needs to be true before the librarian can let the patron borrow the book:

1. **The book must be accessible:** This means the book is not covered by other books or objects, making it easy for the librarian to pick up. If the book isn't accessible, the librarian can't reach it to check it out.
2. **The book must not be already checked out:** If the book is already checked out to someone else, it can't be borrowed by another patron until it's returned.

Once these preconditions are met, the librarian can proceed with the check-out action. The action results in several changes, called ""effects,"" that update the status of the book:

1. **The book is marked as checked out:** This indicates that the book is now borrowed and can't be checked out by another patron until it's returned.
2. **The book is no longer accessible:** Since the book is borrowed, it's no longer available on the shelf for others to take.
3. **There is a request for the book:** This keeps track of the borrowing transaction.
4. **A return due date is set:** This helps the library know when to expect the book back.

To summarize, the preconditions ensure the librarian can access the book and that it isn't already borrowed. The effects update the system to show the book is now checked out, not accessible, and has a return due date.
Parameters:
1. ?x - book

Preconditions:
```
(and
    (accessible ?x)
    (not (checked-out ?x))
)
```

Effects:
```
(and
    (checked-out ?x)
    (not (accessible ?x))
    (book-request ?x)
    (return-due ?x)
)
```
","(:action remove-from-shelf
    :parameters (?x - book ?y - book ?cat - category)
    :precondition (and (on-shelf ?x ?y) (accessible ?x) (hands-free) (belongs-to-category ?x ?cat))
    :effect (and (holding ?x) (accessible ?y) (not (accessible ?x)) (not (hands-free)) (not (on-shelf ?x ?y)) (shelf-empty ?cat))
)",
libraryworld,remove-from-shelf,0.6513895988464355,Semi-Hard Negative (Intra-Domain Mismatch),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Imagine a librarian approaching a shelf where one book is placed on top of another. The 'remove-from-shelf' action allows the librarian to take the top book off the shelf, provided it is accessible and the librarian's hands are free. This action makes the book on the shelf accessible and the librarian holds the removed book.

Action name: remove-from-shelf


Your answer:
","**Explanation:** 

Imagine a patron is returning a borrowed book to the library. The librarian needs to process this return to update the book's status and remove any return due date. The action ""return-book"" describes how the librarian can do this. There are specific conditions, called ""preconditions,"" that must be met to ensure the return can be processed correctly.

For the action ""return-book,"" let's break down what needs to be true before the librarian can return the book:

1. **The book must be checked out:** This means the book is currently borrowed by someone and needs to be returned.
2. **The librarian must be holding the book:** This indicates the librarian has the book in their hands, ready to process the return.

Once these preconditions are met, the librarian can proceed with the ""return-book"" action. This action results in several changes, called ""effects,"" that update the status of the book and the librarian's hands:

1. **The book is no longer checked out:** This shows that the book has been returned and is available for borrowing again.
2. **The librarian is no longer holding the book:** This indicates the librarian has processed the return and placed the book back in its proper place.
3. **Any request for the book is removed:** If there was a request for this book, it is no longer needed since the book is now available.
4. **The return due date is removed:** This updates the system to show that the book is no longer due for return.
5. **The book becomes accessible:** Now that the book is back in the library, it is easy to find and borrow again.
6. **The librarian's hands are now free:** Since the librarian has finished processing the return, their hands are empty and ready for the next task.

To summarize, the preconditions ensure the book is currently borrowed and the librarian has it in their hands, ready to return. The effects update the situation to show that the book is no longer checked out, any requests and due dates are removed, the book is accessible again, and the librarian's hands are free.
Parameters:
1. ?x - book

Preconditions:
```
(and
    (checked-out ?x)
    (holding ?x)
)
```

Effects:
```
(and
    (not (checked-out ?x))
    (not (holding ?x))
    (not (book-request ?x))
    (not (return-due ?x))
    (accessible ?x)
    (hands-free)
)
```
","(:action remove-from-shelf
    :parameters (?x - book ?y - book ?cat - category)
    :precondition (and (on-shelf ?x ?y) (accessible ?x) (hands-free) (belongs-to-category ?x ?cat))
    :effect (and (holding ?x) (accessible ?y) (not (accessible ?x)) (not (hands-free)) (not (on-shelf ?x ?y)) (shelf-empty ?cat))
)",
libraryworld,remove-from-shelf,0.5846755504608154,Semi-Hard Negative (Intra-Domain Mismatch),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Imagine a librarian approaching a shelf where one book is placed on top of another. The 'remove-from-shelf' action allows the librarian to take the top book off the shelf, provided it is accessible and the librarian's hands are free. This action makes the book on the shelf accessible and the librarian holds the removed book.

Action name: remove-from-shelf


Your answer:
","**Explanation:** 

Imagine you're a librarian in a library, and there's a table full of books that need to be sorted. You want to pick up one of these books. To do this, certain conditions, called ""preconditions,"" must be met to ensure you can successfully pick up the book.

For the action ""take-from-table,"" let's break down what needs to be true before you can pick up a book:

1. **The book must be accessible:** This means the book isn't covered by other books or objects, so you can easily reach it.
2. **The book must be on the table:** This indicates the book is physically located on the table, not somewhere else like a shelf.
3. **Your hands must be free:** You need to have empty hands to pick up the book, meaning you aren't already holding something else.

Once these preconditions are met, you can proceed with the ""take-from-table"" action. This action results in several changes, called ""effects,"" that update the status of the book and your hands:

1. **The book is no longer on the table:** This indicates you've picked up the book from the table.
2. **The book is no longer accessible:** Since you're holding the book, it's not available for someone else to pick up from the table.
3. **Your hands are no longer free:** Because you're now holding the book, your hands are occupied.
4. **You are holding the book:** This shows that the book is now in your hands.

To summarize, the preconditions ensure you can reach the book, it's on the table, and your hands are free to pick it up. The effects update the situation to reflect that the book is now in your hands and no longer on the table or accessible to others.
Parameters:
1. ?x - book

Preconditions:
```
(and
    (accessible ?x)
    (on-table ?x)
    (hands-free)
)
```

Effects:
```
(and
    (not (on-table ?x))
    (not (accessible ?x))
    (not (hands-free))
    (holding ?x)
)
```
","(:action remove-from-shelf
    :parameters (?x - book ?y - book ?cat - category)
    :precondition (and (on-shelf ?x ?y) (accessible ?x) (hands-free) (belongs-to-category ?x ?cat))
    :effect (and (holding ?x) (accessible ?y) (not (accessible ?x)) (not (hands-free)) (not (on-shelf ?x ?y)) (shelf-empty ?cat))
)",
libraryworld,remove-from-shelf,0.7562538981437683,Semi-Hard Negative (Intra-Domain Mismatch),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Imagine a librarian approaching a shelf where one book is placed on top of another. The 'remove-from-shelf' action allows the librarian to take the top book off the shelf, provided it is accessible and the librarian's hands are free. This action makes the book on the shelf accessible and the librarian holds the removed book.

Action name: remove-from-shelf


Your answer:
","**Explanation:** 

Imagine you are a librarian standing near a shelf, holding a book in your hands. You want to place this book on top of another book that is already on the shelf. This action, called ""place-on-shelf,"" needs to follow certain rules, called ""preconditions,"" to make sure everything goes smoothly.

For the action ""place-on-shelf,"" let's break down what needs to be true before you can place the book on the shelf:

1. **You must be holding the book:** This means you have the book in your hands, ready to place it on the shelf.
2. **The book on the shelf must be accessible:** The book already on the shelf should not be covered by other books or objects, so you can easily place your book on top of it.
3. **The book you are holding must belong to a certain category:** This helps in organizing the books properly according to their categories.
4. **The shelf should not be overflowing:** There should be enough space on the shelf to place another book.

Once these preconditions are met, you can proceed with the ""place-on-shelf"" action. This action results in several changes, called ""effects,"" that update the status of the books and your hands:

1. **You are no longer holding the book:** This shows that you have placed the book on the shelf.
2. **The book on the shelf is no longer accessible:** Because the new book is now on top of it, making it covered.
3. **The book you placed is now accessible:** This indicates the book you just placed is easy to reach.
4. **Your hands are now free:** Since you have placed the book on the shelf, your hands are empty again.
5. **The new book is on the shelf on top of the other book:** This shows the new book's position.
6. **The shelf is now considered empty for that category:** This helps in tracking the organization and availability of shelf space for that category.

To summarize, the preconditions ensure you are holding the book, the shelf has space, and the book on the shelf is accessible. The effects update the situation to show that you have placed the book on the shelf, the new book is accessible, and your hands are free again.
Parameters:
1. ?x - book
2. ?y - book
3. ?cat - category

Preconditions:
```
(and
    (holding ?x)
    (accessible ?y)
    (belongs-to-category ?x ?cat)
    (not (shelf-overflow ?cat))
)
```

Effects:
```
(and
    (not (holding ?x))
    (not (accessible ?y))
    (accessible ?x)
    (hands-free)
    (on-shelf ?x ?y)
    (shelf-empty ?cat)
)
```
","(:action remove-from-shelf
    :parameters (?x - book ?y - book ?cat - category)
    :precondition (and (on-shelf ?x ?y) (accessible ?x) (hands-free) (belongs-to-category ?x ?cat))
    :effect (and (holding ?x) (accessible ?y) (not (accessible ?x)) (not (hands-free)) (not (on-shelf ?x ?y)) (shelf-empty ?cat))
)",
libraryworld,remove-from-shelf,0.5110867023468018,Hard Negative (Manipulated Action),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Imagine a librarian approaching a shelf where one book is placed on top of another. The 'remove-from-shelf' action allows the librarian to take the top book off the shelf, provided it is accessible and the librarian's hands are free. This action makes the book on the shelf accessible and the librarian holds the removed book.

Action name: remove-from-shelf


Your answer:
","Parameters:
1. ?x - book
2. ?y - book
3. ?cat - category

Preconditions:
```
(and
    (on-shelf ?x ?y)
    (hands-free)
    (belongs-to-category ?x ?cat)
)
```

Effects:
```
(and
    (not (shelf-empty ?cat))
    (holding ?x)
    (accessible ?y)
    (not (accessible ?x))
    (not (hands-free))
    (not (on-shelf ?x ?y))
)
```
","(:action remove-from-shelf
    :parameters (?x - book ?y - book ?cat - category)
    :precondition (and (on-shelf ?x ?y) (accessible ?x) (hands-free) (belongs-to-category ?x ?cat))
    :effect (and (holding ?x) (accessible ?y) (not (accessible ?x)) (not (hands-free)) (not (on-shelf ?x ?y)) (shelf-empty ?cat))
)","remove (accessible ?x) from preconditions
negate (shelf-empty ?cat) in effects
"
libraryworld,remove-from-shelf,0.3873647153377533,Hard Negative (Manipulated Action),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Imagine a librarian approaching a shelf where one book is placed on top of another. The 'remove-from-shelf' action allows the librarian to take the top book off the shelf, provided it is accessible and the librarian's hands are free. This action makes the book on the shelf accessible and the librarian holds the removed book.

Action name: remove-from-shelf


Your answer:
","Parameters:
1. ?x - book
2. ?y - book
3. ?cat - category

Preconditions:
```
(and
    (not (on-shelf ?x ?y))
    (accessible ?y)
    (accessible ?x)
    (belongs-to-category ?x ?cat)
)
```

Effects:
```
(and
    (hands-free)
    (holding ?x)
    (not (accessible ?x))
    (not (hands-free))
    (not (on-shelf ?x ?y))
    (shelf-empty ?cat)
)
```
","(:action remove-from-shelf
    :parameters (?x - book ?y - book ?cat - category)
    :precondition (and (on-shelf ?x ?y) (accessible ?x) (hands-free) (belongs-to-category ?x ?cat))
    :effect (and (holding ?x) (accessible ?y) (not (accessible ?x)) (not (hands-free)) (not (on-shelf ?x ?y)) (shelf-empty ?cat))
)","negate (on-shelf ?x ?y) in preconditions
swap (hands-free) with (accessible ?y)
"
libraryworld,remove-from-shelf,0.7772763967514038,Hard Negative (Manipulated Action),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Imagine a librarian approaching a shelf where one book is placed on top of another. The 'remove-from-shelf' action allows the librarian to take the top book off the shelf, provided it is accessible and the librarian's hands are free. This action makes the book on the shelf accessible and the librarian holds the removed book.

Action name: remove-from-shelf


Your answer:
","Parameters:
1. ?x - book
2. ?y - book
3. ?cat - category

Preconditions:
```
(and
    (on-shelf ?x ?y)
    (accessible ?x)
    (hands-free)
    (belongs-to-category ?x ?cat)
)
```

Effects:
```
(and
    (on-shelf ?x ?y)
    (holding ?x)
    (accessible ?y)
    (not (accessible ?x))
    (not (hands-free))
    (shelf-empty ?cat)
)
```
","(:action remove-from-shelf
    :parameters (?x - book ?y - book ?cat - category)
    :precondition (and (on-shelf ?x ?y) (accessible ?x) (hands-free) (belongs-to-category ?x ?cat))
    :effect (and (holding ?x) (accessible ?y) (not (accessible ?x)) (not (hands-free)) (not (on-shelf ?x ?y)) (shelf-empty ?cat))
)","negate (not (on-shelf ?x ?y)) in effects
"
libraryworld,remove-from-shelf,0.41710740327835083,Hard Negative (Manipulated Action),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Imagine a librarian approaching a shelf where one book is placed on top of another. The 'remove-from-shelf' action allows the librarian to take the top book off the shelf, provided it is accessible and the librarian's hands are free. This action makes the book on the shelf accessible and the librarian holds the removed book.

Action name: remove-from-shelf


Your answer:
","Parameters:
1. ?x - book
2. ?y - book
3. ?cat - category

Preconditions:
```
(and
    (not (hands-free))
    (not (on-shelf ?x ?y))
    (on-shelf ?x ?y)
    (accessible ?x)
)
```

Effects:
```
(and
    (hands-free)
    (belongs-to-category ?x ?cat)
    (holding ?x)
    (accessible ?y)
    (not (accessible ?x))
    (shelf-empty ?cat)
)
```
","(:action remove-from-shelf
    :parameters (?x - book ?y - book ?cat - category)
    :precondition (and (on-shelf ?x ?y) (accessible ?x) (hands-free) (belongs-to-category ?x ?cat))
    :effect (and (holding ?x) (accessible ?y) (not (accessible ?x)) (not (hands-free)) (not (on-shelf ?x ?y)) (shelf-empty ?cat))
)","swap (hands-free) with (not (hands-free))
swap (belongs-to-category ?x ?cat) with (not (on-shelf ?x ?y))
"
libraryworld,remove-from-shelf,0.35475143790245056,Hard Negative (Manipulated Action),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Imagine a librarian approaching a shelf where one book is placed on top of another. The 'remove-from-shelf' action allows the librarian to take the top book off the shelf, provided it is accessible and the librarian's hands are free. This action makes the book on the shelf accessible and the librarian holds the removed book.

Action name: remove-from-shelf


Your answer:
","Parameters:
1. ?x - book
2. ?y - book
3. ?cat - category

Preconditions:
```
(and
    (not (belongs-to-category ?x ?cat))
    (on-shelf ?x ?y)
    (accessible ?x)
    (hands-free)
)
```

Effects:
```
(and
    (holding ?x)
    (accessible ?y)
    (not (accessible ?x))
    (not (hands-free))
    (shelf-empty ?cat)
)
```
","(:action remove-from-shelf
    :parameters (?x - book ?y - book ?cat - category)
    :precondition (and (on-shelf ?x ?y) (accessible ?x) (hands-free) (belongs-to-category ?x ?cat))
    :effect (and (holding ?x) (accessible ?y) (not (accessible ?x)) (not (hands-free)) (not (on-shelf ?x ?y)) (shelf-empty ?cat))
)","remove (not (on-shelf ?x ?y)) from effects
negate (belongs-to-category ?x ?cat) in preconditions
"
libraryworld,remove-from-shelf,0.7573877573013306,Hard Negative (Manipulated Action),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Imagine a librarian approaching a shelf where one book is placed on top of another. The 'remove-from-shelf' action allows the librarian to take the top book off the shelf, provided it is accessible and the librarian's hands are free. This action makes the book on the shelf accessible and the librarian holds the removed book.

Action name: remove-from-shelf


Your answer:
","Parameters:
1. ?x - book
2. ?y - book
3. ?cat - category

Preconditions:
```
(and
    (on-shelf ?x ?y)
    (accessible ?x)
    (hands-free)
    (belongs-to-category ?x ?cat)
)
```

Effects:
```
(and
    (holding ?x)
    (accessible ?y)
    (not (accessible ?x))
    (not (on-shelf ?x ?y))
    (shelf-empty ?cat)
)
```
","(:action remove-from-shelf
    :parameters (?x - book ?y - book ?cat - category)
    :precondition (and (on-shelf ?x ?y) (accessible ?x) (hands-free) (belongs-to-category ?x ?cat))
    :effect (and (holding ?x) (accessible ?y) (not (accessible ?x)) (not (hands-free)) (not (on-shelf ?x ?y)) (shelf-empty ?cat))
)","remove (not (hands-free)) from effects
"
libraryworld,remove-from-shelf,0.4463537633419037,Hard Negative (Manipulated Action),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Imagine a librarian approaching a shelf where one book is placed on top of another. The 'remove-from-shelf' action allows the librarian to take the top book off the shelf, provided it is accessible and the librarian's hands are free. This action makes the book on the shelf accessible and the librarian holds the removed book.

Action name: remove-from-shelf


Your answer:
","Parameters:
1. ?x - book
2. ?y - book
3. ?cat - category

Preconditions:
```
(and
    (not (hands-free))
    (on-shelf ?x ?y)
    (accessible ?x)
    (belongs-to-category ?x ?cat)
)
```

Effects:
```
(and
    (hands-free)
    (holding ?x)
    (accessible ?y)
    (not (accessible ?x))
    (not (on-shelf ?x ?y))
    (shelf-empty ?cat)
)
```
","(:action remove-from-shelf
    :parameters (?x - book ?y - book ?cat - category)
    :precondition (and (on-shelf ?x ?y) (accessible ?x) (hands-free) (belongs-to-category ?x ?cat))
    :effect (and (holding ?x) (accessible ?y) (not (accessible ?x)) (not (hands-free)) (not (on-shelf ?x ?y)) (shelf-empty ?cat))
)","swap (hands-free) with (not (hands-free))
"
libraryworld,remove-from-shelf,0.46769052743911743,Hard Negative (Manipulated Action),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Imagine a librarian approaching a shelf where one book is placed on top of another. The 'remove-from-shelf' action allows the librarian to take the top book off the shelf, provided it is accessible and the librarian's hands are free. This action makes the book on the shelf accessible and the librarian holds the removed book.

Action name: remove-from-shelf


Your answer:
","Parameters:
1. ?x - book
2. ?y - book
3. ?cat - category

Preconditions:
```
(and
    (not (on-shelf ?x ?y))
    (accessible ?x)
    (hands-free)
    (belongs-to-category ?x ?cat)
)
```

Effects:
```
(and
    (holding ?x)
    (accessible ?y)
    (not (accessible ?x))
    (not (hands-free))
    (not (on-shelf ?x ?y))
    (shelf-empty ?cat)
)
```
","(:action remove-from-shelf
    :parameters (?x - book ?y - book ?cat - category)
    :precondition (and (on-shelf ?x ?y) (accessible ?x) (hands-free) (belongs-to-category ?x ?cat))
    :effect (and (holding ?x) (accessible ?y) (not (accessible ?x)) (not (hands-free)) (not (on-shelf ?x ?y)) (shelf-empty ?cat))
)","negate (on-shelf ?x ?y) in preconditions
"
libraryworld,remove-from-shelf,0.41013139486312866,Hard Negative (Manipulated Action),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Imagine a librarian approaching a shelf where one book is placed on top of another. The 'remove-from-shelf' action allows the librarian to take the top book off the shelf, provided it is accessible and the librarian's hands are free. This action makes the book on the shelf accessible and the librarian holds the removed book.

Action name: remove-from-shelf


Your answer:
","Parameters:
1. ?x - book
2. ?y - book
3. ?cat - category

Preconditions:
```
(and
    (not (accessible ?x))
    (not (hands-free))
    (hands-free)
    (belongs-to-category ?x ?cat)
)
```

Effects:
```
(and
    (on-shelf ?x ?y)
    (holding ?x)
    (accessible ?y)
    (not (accessible ?x))
    (not (on-shelf ?x ?y))
    (shelf-empty ?cat)
)
```
","(:action remove-from-shelf
    :parameters (?x - book ?y - book ?cat - category)
    :precondition (and (on-shelf ?x ?y) (accessible ?x) (hands-free) (belongs-to-category ?x ?cat))
    :effect (and (holding ?x) (accessible ?y) (not (accessible ?x)) (not (hands-free)) (not (on-shelf ?x ?y)) (shelf-empty ?cat))
)","negate (accessible ?x) in preconditions
swap (on-shelf ?x ?y) with (not (hands-free))
"
libraryworld,remove-from-shelf,0.7731358408927917,Hard Negative (Manipulated Action),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Imagine a librarian approaching a shelf where one book is placed on top of another. The 'remove-from-shelf' action allows the librarian to take the top book off the shelf, provided it is accessible and the librarian's hands are free. This action makes the book on the shelf accessible and the librarian holds the removed book.

Action name: remove-from-shelf


Your answer:
","Parameters:
1. ?x - book
2. ?y - book
3. ?cat - category

Preconditions:
```
(and
    (on-shelf ?x ?y)
    (accessible ?x)
    (hands-free)
    (belongs-to-category ?x ?cat)
)
```

Effects:
```
(and
    (holding ?x)
    (accessible ?y)
    (not (hands-free))
    (not (on-shelf ?x ?y))
    (shelf-empty ?cat)
)
```
","(:action remove-from-shelf
    :parameters (?x - book ?y - book ?cat - category)
    :precondition (and (on-shelf ?x ?y) (accessible ?x) (hands-free) (belongs-to-category ?x ?cat))
    :effect (and (holding ?x) (accessible ?y) (not (accessible ?x)) (not (hands-free)) (not (on-shelf ?x ?y)) (shelf-empty ?cat))
)","remove (not (accessible ?x)) from effects
"
libraryworld,remove-from-shelf,0.3749643564224243,Hard Negative (Manipulated Action),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Imagine a librarian approaching a shelf where one book is placed on top of another. The 'remove-from-shelf' action allows the librarian to take the top book off the shelf, provided it is accessible and the librarian's hands are free. This action makes the book on the shelf accessible and the librarian holds the removed book.

Action name: remove-from-shelf


Your answer:

**Explanation:** 

Imagine you are a librarian in a library, and you need to take a book off the shelf. This book is placed on top of another book. The action ""remove-from-shelf"" lets you take the top book off the shelf. To do this, certain conditions, called ""preconditions,"" must be met to make sure you can successfully take the book.

For the action ""remove-from-shelf,"" let's break down what needs to be true before you can take the book off the shelf:

1. **The book must be on the shelf:** This means the book you want to take is on top of another book on the shelf.
2. **The book must be accessible:** This means the book isn't covered by other books or objects, so you can easily reach it.
3. **Your hands must be free:** You need to have empty hands to pick up the book, meaning you aren't already holding something else.
4. **The book must belong to a certain category:** This helps you know which book you are taking and ensures you are organizing the books properly.

Once these preconditions are met, you can proceed with the ""remove-from-shelf"" action. This action results in several changes, called ""effects,"" that update the status of the books and your hands:

1. **You are now holding the book:** This indicates you have picked up the book from the shelf.
2. **The book underneath becomes accessible:** Since you have removed the top book, the book underneath is now easy to reach.
3. **The book you removed is no longer accessible:** Because you are holding the book, it's not available on the shelf anymore.
4. **Your hands are no longer free:** Since you are now holding the book, your hands are occupied.
5. **The book is no longer on the shelf:** This shows that the book has been taken off the shelf.
6. **The shelf is now empty for that category:** This helps keep track of the shelf space and organization.

To summarize, the preconditions ensure the book is on the shelf, accessible, your hands are free, and you know which category the book belongs to. The effects update the situation to show you are holding the book, the book underneath is now accessible, and the shelf is empty for that category.","Parameters:
1. ?x - book
2. ?y - book
3. ?cat - category

Preconditions:
```
(and
    (not (accessible ?x))
    (on-shelf ?x ?y)
    (accessible ?x)
)
```

Effects:
```
(and
    (belongs-to-category ?x ?cat)
    (holding ?x)
    (accessible ?y)
    (not (hands-free))
    (not (on-shelf ?x ?y))
    (shelf-empty ?cat)
)
```
","(:action remove-from-shelf
    :parameters (?x - book ?y - book ?cat - category)
    :precondition (and (on-shelf ?x ?y) (accessible ?x) (hands-free) (belongs-to-category ?x ?cat))
    :effect (and (holding ?x) (accessible ?y) (not (accessible ?x)) (not (hands-free)) (not (on-shelf ?x ?y)) (shelf-empty ?cat))
)","swap (belongs-to-category ?x ?cat) with (not (accessible ?x))
remove (hands-free) from preconditions
"
libraryworld,remove-from-shelf,0.6804687976837158,Hard Negative (Manipulated Action),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Imagine a librarian approaching a shelf where one book is placed on top of another. The 'remove-from-shelf' action allows the librarian to take the top book off the shelf, provided it is accessible and the librarian's hands are free. This action makes the book on the shelf accessible and the librarian holds the removed book.

Action name: remove-from-shelf


Your answer:

**Explanation:** 

Imagine you are a librarian in a library, and you need to take a book off the shelf. This book is placed on top of another book. The action ""remove-from-shelf"" lets you take the top book off the shelf. To do this, certain conditions, called ""preconditions,"" must be met to make sure you can successfully take the book.

For the action ""remove-from-shelf,"" let's break down what needs to be true before you can take the book off the shelf:

1. **The book must be on the shelf:** This means the book you want to take is on top of another book on the shelf.
2. **The book must be accessible:** This means the book isn't covered by other books or objects, so you can easily reach it.
3. **Your hands must be free:** You need to have empty hands to pick up the book, meaning you aren't already holding something else.
4. **The book must belong to a certain category:** This helps you know which book you are taking and ensures you are organizing the books properly.

Once these preconditions are met, you can proceed with the ""remove-from-shelf"" action. This action results in several changes, called ""effects,"" that update the status of the books and your hands:

1. **You are now holding the book:** This indicates you have picked up the book from the shelf.
2. **The book underneath becomes accessible:** Since you have removed the top book, the book underneath is now easy to reach.
3. **The book you removed is no longer accessible:** Because you are holding the book, it's not available on the shelf anymore.
4. **Your hands are no longer free:** Since you are now holding the book, your hands are occupied.
5. **The book is no longer on the shelf:** This shows that the book has been taken off the shelf.
6. **The shelf is now empty for that category:** This helps keep track of the shelf space and organization.

To summarize, the preconditions ensure the book is on the shelf, accessible, your hands are free, and you know which category the book belongs to. The effects update the situation to show you are holding the book, the book underneath is now accessible, and the shelf is empty for that category.","Parameters:
1. ?x - book
2. ?y - book
3. ?cat - category

Preconditions:
```
(and
    (accessible ?x)
    (hands-free)
    (belongs-to-category ?x ?cat)
)
```

Effects:
```
(and
    (holding ?x)
    (accessible ?y)
    (not (accessible ?x))
    (not (hands-free))
    (not (on-shelf ?x ?y))
    (shelf-empty ?cat)
)
```
","(:action remove-from-shelf
    :parameters (?x - book ?y - book ?cat - category)
    :precondition (and (on-shelf ?x ?y) (accessible ?x) (hands-free) (belongs-to-category ?x ?cat))
    :effect (and (holding ?x) (accessible ?y) (not (accessible ?x)) (not (hands-free)) (not (on-shelf ?x ?y)) (shelf-empty ?cat))
)","remove (on-shelf ?x ?y) from preconditions
"
libraryworld,remove-from-shelf,0.47993993759155273,Hard Negative (Manipulated Action),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Imagine a librarian approaching a shelf where one book is placed on top of another. The 'remove-from-shelf' action allows the librarian to take the top book off the shelf, provided it is accessible and the librarian's hands are free. This action makes the book on the shelf accessible and the librarian holds the removed book.

Action name: remove-from-shelf


Your answer:

**Explanation:** 

Imagine you are a librarian in a library, and you need to take a book off the shelf. This book is placed on top of another book. The action ""remove-from-shelf"" lets you take the top book off the shelf. To do this, certain conditions, called ""preconditions,"" must be met to make sure you can successfully take the book.

For the action ""remove-from-shelf,"" let's break down what needs to be true before you can take the book off the shelf:

1. **The book must be on the shelf:** This means the book you want to take is on top of another book on the shelf.
2. **The book must be accessible:** This means the book isn't covered by other books or objects, so you can easily reach it.
3. **Your hands must be free:** You need to have empty hands to pick up the book, meaning you aren't already holding something else.
4. **The book must belong to a certain category:** This helps you know which book you are taking and ensures you are organizing the books properly.

Once these preconditions are met, you can proceed with the ""remove-from-shelf"" action. This action results in several changes, called ""effects,"" that update the status of the books and your hands:

1. **You are now holding the book:** This indicates you have picked up the book from the shelf.
2. **The book underneath becomes accessible:** Since you have removed the top book, the book underneath is now easy to reach.
3. **The book you removed is no longer accessible:** Because you are holding the book, it's not available on the shelf anymore.
4. **Your hands are no longer free:** Since you are now holding the book, your hands are occupied.
5. **The book is no longer on the shelf:** This shows that the book has been taken off the shelf.
6. **The shelf is now empty for that category:** This helps keep track of the shelf space and organization.

To summarize, the preconditions ensure the book is on the shelf, accessible, your hands are free, and you know which category the book belongs to. The effects update the situation to show you are holding the book, the book underneath is now accessible, and the shelf is empty for that category.","Parameters:
1. ?x - book
2. ?y - book
3. ?cat - category

Preconditions:
```
(and
    (not (hands-free))
    (shelf-empty ?cat)
    (accessible ?x)
    (belongs-to-category ?x ?cat)
)
```

Effects:
```
(and
    (on-shelf ?x ?y)
    (holding ?x)
    (accessible ?y)
    (not (accessible ?x))
    (not (hands-free))
    (not (on-shelf ?x ?y))
)
```
","(:action remove-from-shelf
    :parameters (?x - book ?y - book ?cat - category)
    :precondition (and (on-shelf ?x ?y) (accessible ?x) (hands-free) (belongs-to-category ?x ?cat))
    :effect (and (holding ?x) (accessible ?y) (not (accessible ?x)) (not (hands-free)) (not (on-shelf ?x ?y)) (shelf-empty ?cat))
)","negate (hands-free) in preconditions
swap (on-shelf ?x ?y) with (shelf-empty ?cat)
"
libraryworld,remove-from-shelf,0.407538503408432,Hard Negative (Manipulated Action),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Imagine a librarian approaching a shelf where one book is placed on top of another. The 'remove-from-shelf' action allows the librarian to take the top book off the shelf, provided it is accessible and the librarian's hands are free. This action makes the book on the shelf accessible and the librarian holds the removed book.

Action name: remove-from-shelf


Your answer:

**Explanation:** 

Imagine you are a librarian in a library, and you need to take a book off the shelf. This book is placed on top of another book. The action ""remove-from-shelf"" lets you take the top book off the shelf. To do this, certain conditions, called ""preconditions,"" must be met to make sure you can successfully take the book.

For the action ""remove-from-shelf,"" let's break down what needs to be true before you can take the book off the shelf:

1. **The book must be on the shelf:** This means the book you want to take is on top of another book on the shelf.
2. **The book must be accessible:** This means the book isn't covered by other books or objects, so you can easily reach it.
3. **Your hands must be free:** You need to have empty hands to pick up the book, meaning you aren't already holding something else.
4. **The book must belong to a certain category:** This helps you know which book you are taking and ensures you are organizing the books properly.

Once these preconditions are met, you can proceed with the ""remove-from-shelf"" action. This action results in several changes, called ""effects,"" that update the status of the books and your hands:

1. **You are now holding the book:** This indicates you have picked up the book from the shelf.
2. **The book underneath becomes accessible:** Since you have removed the top book, the book underneath is now easy to reach.
3. **The book you removed is no longer accessible:** Because you are holding the book, it's not available on the shelf anymore.
4. **Your hands are no longer free:** Since you are now holding the book, your hands are occupied.
5. **The book is no longer on the shelf:** This shows that the book has been taken off the shelf.
6. **The shelf is now empty for that category:** This helps keep track of the shelf space and organization.

To summarize, the preconditions ensure the book is on the shelf, accessible, your hands are free, and you know which category the book belongs to. The effects update the situation to show you are holding the book, the book underneath is now accessible, and the shelf is empty for that category.","Parameters:
1. ?x - book
2. ?y - book
3. ?cat - category

Preconditions:
```
(and
    (not (hands-free))
    (on-shelf ?x ?y)
    (accessible ?x)
    (hands-free)
)
```

Effects:
```
(and
    (belongs-to-category ?x ?cat)
    (accessible ?y)
    (not (accessible ?x))
    (not (on-shelf ?x ?y))
    (shelf-empty ?cat)
)
```
","(:action remove-from-shelf
    :parameters (?x - book ?y - book ?cat - category)
    :precondition (and (on-shelf ?x ?y) (accessible ?x) (hands-free) (belongs-to-category ?x ?cat))
    :effect (and (holding ?x) (accessible ?y) (not (accessible ?x)) (not (hands-free)) (not (on-shelf ?x ?y)) (shelf-empty ?cat))
)","swap (belongs-to-category ?x ?cat) with (not (hands-free))
remove (holding ?x) from effects
"
libraryworld,remove-from-shelf,0.7380256652832031,Hard Negative (Manipulated Action),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Imagine a librarian approaching a shelf where one book is placed on top of another. The 'remove-from-shelf' action allows the librarian to take the top book off the shelf, provided it is accessible and the librarian's hands are free. This action makes the book on the shelf accessible and the librarian holds the removed book.

Action name: remove-from-shelf


Your answer:

**Explanation:** 

Imagine you are a librarian in a library, and you need to take a book off the shelf. This book is placed on top of another book. The action ""remove-from-shelf"" lets you take the top book off the shelf. To do this, certain conditions, called ""preconditions,"" must be met to make sure you can successfully take the book.

For the action ""remove-from-shelf,"" let's break down what needs to be true before you can take the book off the shelf:

1. **The book must be on the shelf:** This means the book you want to take is on top of another book on the shelf.
2. **The book must be accessible:** This means the book isn't covered by other books or objects, so you can easily reach it.
3. **Your hands must be free:** You need to have empty hands to pick up the book, meaning you aren't already holding something else.
4. **The book must belong to a certain category:** This helps you know which book you are taking and ensures you are organizing the books properly.

Once these preconditions are met, you can proceed with the ""remove-from-shelf"" action. This action results in several changes, called ""effects,"" that update the status of the books and your hands:

1. **You are now holding the book:** This indicates you have picked up the book from the shelf.
2. **The book underneath becomes accessible:** Since you have removed the top book, the book underneath is now easy to reach.
3. **The book you removed is no longer accessible:** Because you are holding the book, it's not available on the shelf anymore.
4. **Your hands are no longer free:** Since you are now holding the book, your hands are occupied.
5. **The book is no longer on the shelf:** This shows that the book has been taken off the shelf.
6. **The shelf is now empty for that category:** This helps keep track of the shelf space and organization.

To summarize, the preconditions ensure the book is on the shelf, accessible, your hands are free, and you know which category the book belongs to. The effects update the situation to show you are holding the book, the book underneath is now accessible, and the shelf is empty for that category.","Parameters:
1. ?x - book
2. ?y - book
3. ?cat - category

Preconditions:
```
(and
    (on-shelf ?x ?y)
    (accessible ?x)
    (hands-free)
    (belongs-to-category ?x ?cat)
)
```

Effects:
```
(and
    (hands-free)
    (holding ?x)
    (accessible ?y)
    (not (accessible ?x))
    (not (on-shelf ?x ?y))
    (shelf-empty ?cat)
)
```
","(:action remove-from-shelf
    :parameters (?x - book ?y - book ?cat - category)
    :precondition (and (on-shelf ?x ?y) (accessible ?x) (hands-free) (belongs-to-category ?x ?cat))
    :effect (and (holding ?x) (accessible ?y) (not (accessible ?x)) (not (hands-free)) (not (on-shelf ?x ?y)) (shelf-empty ?cat))
)","negate (not (hands-free)) in effects
"
libraryworld,remove-from-shelf,0.737392783164978,Hard Negative (Manipulated Action),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Imagine a librarian approaching a shelf where one book is placed on top of another. The 'remove-from-shelf' action allows the librarian to take the top book off the shelf, provided it is accessible and the librarian's hands are free. This action makes the book on the shelf accessible and the librarian holds the removed book.

Action name: remove-from-shelf


Your answer:

**Explanation:** 

Imagine you are a librarian in a library, and you need to take a book off the shelf. This book is placed on top of another book. The action ""remove-from-shelf"" lets you take the top book off the shelf. To do this, certain conditions, called ""preconditions,"" must be met to make sure you can successfully take the book.

For the action ""remove-from-shelf,"" let's break down what needs to be true before you can take the book off the shelf:

1. **The book must be on the shelf:** This means the book you want to take is on top of another book on the shelf.
2. **The book must be accessible:** This means the book isn't covered by other books or objects, so you can easily reach it.
3. **Your hands must be free:** You need to have empty hands to pick up the book, meaning you aren't already holding something else.
4. **The book must belong to a certain category:** This helps you know which book you are taking and ensures you are organizing the books properly.

Once these preconditions are met, you can proceed with the ""remove-from-shelf"" action. This action results in several changes, called ""effects,"" that update the status of the books and your hands:

1. **You are now holding the book:** This indicates you have picked up the book from the shelf.
2. **The book underneath becomes accessible:** Since you have removed the top book, the book underneath is now easy to reach.
3. **The book you removed is no longer accessible:** Because you are holding the book, it's not available on the shelf anymore.
4. **Your hands are no longer free:** Since you are now holding the book, your hands are occupied.
5. **The book is no longer on the shelf:** This shows that the book has been taken off the shelf.
6. **The shelf is now empty for that category:** This helps keep track of the shelf space and organization.

To summarize, the preconditions ensure the book is on the shelf, accessible, your hands are free, and you know which category the book belongs to. The effects update the situation to show you are holding the book, the book underneath is now accessible, and the shelf is empty for that category.","Parameters:
1. ?x - book
2. ?y - book
3. ?cat - category

Preconditions:
```
(and
    (on-shelf ?x ?y)
    (accessible ?x)
    (hands-free)
    (belongs-to-category ?x ?cat)
)
```

Effects:
```
(and
    (holding ?x)
    (accessible ?y)
    (not (accessible ?x))
    (not (hands-free))
    (shelf-empty ?cat)
)
```
","(:action remove-from-shelf
    :parameters (?x - book ?y - book ?cat - category)
    :precondition (and (on-shelf ?x ?y) (accessible ?x) (hands-free) (belongs-to-category ?x ?cat))
    :effect (and (holding ?x) (accessible ?y) (not (accessible ?x)) (not (hands-free)) (not (on-shelf ?x ?y)) (shelf-empty ?cat))
)","remove (not (on-shelf ?x ?y)) from effects
"
libraryworld,remove-from-shelf,0.7481251358985901,Hard Negative (Manipulated Action),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Imagine a librarian approaching a shelf where one book is placed on top of another. The 'remove-from-shelf' action allows the librarian to take the top book off the shelf, provided it is accessible and the librarian's hands are free. This action makes the book on the shelf accessible and the librarian holds the removed book.

Action name: remove-from-shelf


Your answer:

**Explanation:** 

Imagine you are a librarian in a library, and you need to take a book off the shelf. This book is placed on top of another book. The action ""remove-from-shelf"" lets you take the top book off the shelf. To do this, certain conditions, called ""preconditions,"" must be met to make sure you can successfully take the book.

For the action ""remove-from-shelf,"" let's break down what needs to be true before you can take the book off the shelf:

1. **The book must be on the shelf:** This means the book you want to take is on top of another book on the shelf.
2. **The book must be accessible:** This means the book isn't covered by other books or objects, so you can easily reach it.
3. **Your hands must be free:** You need to have empty hands to pick up the book, meaning you aren't already holding something else.
4. **The book must belong to a certain category:** This helps you know which book you are taking and ensures you are organizing the books properly.

Once these preconditions are met, you can proceed with the ""remove-from-shelf"" action. This action results in several changes, called ""effects,"" that update the status of the books and your hands:

1. **You are now holding the book:** This indicates you have picked up the book from the shelf.
2. **The book underneath becomes accessible:** Since you have removed the top book, the book underneath is now easy to reach.
3. **The book you removed is no longer accessible:** Because you are holding the book, it's not available on the shelf anymore.
4. **Your hands are no longer free:** Since you are now holding the book, your hands are occupied.
5. **The book is no longer on the shelf:** This shows that the book has been taken off the shelf.
6. **The shelf is now empty for that category:** This helps keep track of the shelf space and organization.

To summarize, the preconditions ensure the book is on the shelf, accessible, your hands are free, and you know which category the book belongs to. The effects update the situation to show you are holding the book, the book underneath is now accessible, and the shelf is empty for that category.","Parameters:
1. ?x - book
2. ?y - book
3. ?cat - category

Preconditions:
```
(and
    (on-shelf ?x ?y)
    (accessible ?x)
    (hands-free)
    (belongs-to-category ?x ?cat)
)
```

Effects:
```
(and
    (accessible ?x)
    (holding ?x)
    (accessible ?y)
    (not (hands-free))
    (not (on-shelf ?x ?y))
    (shelf-empty ?cat)
)
```
","(:action remove-from-shelf
    :parameters (?x - book ?y - book ?cat - category)
    :precondition (and (on-shelf ?x ?y) (accessible ?x) (hands-free) (belongs-to-category ?x ?cat))
    :effect (and (holding ?x) (accessible ?y) (not (accessible ?x)) (not (hands-free)) (not (on-shelf ?x ?y)) (shelf-empty ?cat))
)","negate (not (accessible ?x)) in effects
"
libraryworld,remove-from-shelf,0.43166178464889526,Hard Negative (Manipulated Action),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Imagine a librarian approaching a shelf where one book is placed on top of another. The 'remove-from-shelf' action allows the librarian to take the top book off the shelf, provided it is accessible and the librarian's hands are free. This action makes the book on the shelf accessible and the librarian holds the removed book.

Action name: remove-from-shelf


Your answer:

**Explanation:** 

Imagine you are a librarian in a library, and you need to take a book off the shelf. This book is placed on top of another book. The action ""remove-from-shelf"" lets you take the top book off the shelf. To do this, certain conditions, called ""preconditions,"" must be met to make sure you can successfully take the book.

For the action ""remove-from-shelf,"" let's break down what needs to be true before you can take the book off the shelf:

1. **The book must be on the shelf:** This means the book you want to take is on top of another book on the shelf.
2. **The book must be accessible:** This means the book isn't covered by other books or objects, so you can easily reach it.
3. **Your hands must be free:** You need to have empty hands to pick up the book, meaning you aren't already holding something else.
4. **The book must belong to a certain category:** This helps you know which book you are taking and ensures you are organizing the books properly.

Once these preconditions are met, you can proceed with the ""remove-from-shelf"" action. This action results in several changes, called ""effects,"" that update the status of the books and your hands:

1. **You are now holding the book:** This indicates you have picked up the book from the shelf.
2. **The book underneath becomes accessible:** Since you have removed the top book, the book underneath is now easy to reach.
3. **The book you removed is no longer accessible:** Because you are holding the book, it's not available on the shelf anymore.
4. **Your hands are no longer free:** Since you are now holding the book, your hands are occupied.
5. **The book is no longer on the shelf:** This shows that the book has been taken off the shelf.
6. **The shelf is now empty for that category:** This helps keep track of the shelf space and organization.

To summarize, the preconditions ensure the book is on the shelf, accessible, your hands are free, and you know which category the book belongs to. The effects update the situation to show you are holding the book, the book underneath is now accessible, and the shelf is empty for that category.","Parameters:
1. ?x - book
2. ?y - book
3. ?cat - category

Preconditions:
```
(and
    (not (hands-free))
    (accessible ?x)
    (hands-free)
    (belongs-to-category ?x ?cat)
)
```

Effects:
```
(and
    (on-shelf ?x ?y)
    (holding ?x)
    (accessible ?y)
    (not (accessible ?x))
    (not (on-shelf ?x ?y))
    (shelf-empty ?cat)
)
```
","(:action remove-from-shelf
    :parameters (?x - book ?y - book ?cat - category)
    :precondition (and (on-shelf ?x ?y) (accessible ?x) (hands-free) (belongs-to-category ?x ?cat))
    :effect (and (holding ?x) (accessible ?y) (not (accessible ?x)) (not (hands-free)) (not (on-shelf ?x ?y)) (shelf-empty ?cat))
)","swap (on-shelf ?x ?y) with (not (hands-free))
"
libraryworld,remove-from-shelf,0.5243047475814819,Hard Negative (Manipulated Action),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Imagine a librarian approaching a shelf where one book is placed on top of another. The 'remove-from-shelf' action allows the librarian to take the top book off the shelf, provided it is accessible and the librarian's hands are free. This action makes the book on the shelf accessible and the librarian holds the removed book.

Action name: remove-from-shelf


Your answer:

**Explanation:** 

Imagine you are a librarian in a library, and you need to take a book off the shelf. This book is placed on top of another book. The action ""remove-from-shelf"" lets you take the top book off the shelf. To do this, certain conditions, called ""preconditions,"" must be met to make sure you can successfully take the book.

For the action ""remove-from-shelf,"" let's break down what needs to be true before you can take the book off the shelf:

1. **The book must be on the shelf:** This means the book you want to take is on top of another book on the shelf.
2. **The book must be accessible:** This means the book isn't covered by other books or objects, so you can easily reach it.
3. **Your hands must be free:** You need to have empty hands to pick up the book, meaning you aren't already holding something else.
4. **The book must belong to a certain category:** This helps you know which book you are taking and ensures you are organizing the books properly.

Once these preconditions are met, you can proceed with the ""remove-from-shelf"" action. This action results in several changes, called ""effects,"" that update the status of the books and your hands:

1. **You are now holding the book:** This indicates you have picked up the book from the shelf.
2. **The book underneath becomes accessible:** Since you have removed the top book, the book underneath is now easy to reach.
3. **The book you removed is no longer accessible:** Because you are holding the book, it's not available on the shelf anymore.
4. **Your hands are no longer free:** Since you are now holding the book, your hands are occupied.
5. **The book is no longer on the shelf:** This shows that the book has been taken off the shelf.
6. **The shelf is now empty for that category:** This helps keep track of the shelf space and organization.

To summarize, the preconditions ensure the book is on the shelf, accessible, your hands are free, and you know which category the book belongs to. The effects update the situation to show you are holding the book, the book underneath is now accessible, and the shelf is empty for that category.","Parameters:
1. ?x - book
2. ?y - book
3. ?cat - category

Preconditions:
```
(and
    (on-shelf ?x ?y)
    (hands-free)
    (belongs-to-category ?x ?cat)
)
```

Effects:
```
(and
    (holding ?x)
    (not (accessible ?x))
    (not (hands-free))
    (not (on-shelf ?x ?y))
    (shelf-empty ?cat)
)
```
","(:action remove-from-shelf
    :parameters (?x - book ?y - book ?cat - category)
    :precondition (and (on-shelf ?x ?y) (accessible ?x) (hands-free) (belongs-to-category ?x ?cat))
    :effect (and (holding ?x) (accessible ?y) (not (accessible ?x)) (not (hands-free)) (not (on-shelf ?x ?y)) (shelf-empty ?cat))
)","remove (accessible ?y) from effects
remove (accessible ?x) from preconditions
"
libraryworld,remove-from-shelf,0.396051824092865,Hard Negative (Manipulated Action),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Imagine a librarian approaching a shelf where one book is placed on top of another. The 'remove-from-shelf' action allows the librarian to take the top book off the shelf, provided it is accessible and the librarian's hands are free. This action makes the book on the shelf accessible and the librarian holds the removed book.

Action name: remove-from-shelf


Your answer:

**Explanation:** 

Imagine you are a librarian in a library, and you need to take a book off the shelf. This book is placed on top of another book. The action ""remove-from-shelf"" lets you take the top book off the shelf. To do this, certain conditions, called ""preconditions,"" must be met to make sure you can successfully take the book.

For the action ""remove-from-shelf,"" let's break down what needs to be true before you can take the book off the shelf:

1. **The book must be on the shelf:** This means the book you want to take is on top of another book on the shelf.
2. **The book must be accessible:** This means the book isn't covered by other books or objects, so you can easily reach it.
3. **Your hands must be free:** You need to have empty hands to pick up the book, meaning you aren't already holding something else.
4. **The book must belong to a certain category:** This helps you know which book you are taking and ensures you are organizing the books properly.

Once these preconditions are met, you can proceed with the ""remove-from-shelf"" action. This action results in several changes, called ""effects,"" that update the status of the books and your hands:

1. **You are now holding the book:** This indicates you have picked up the book from the shelf.
2. **The book underneath becomes accessible:** Since you have removed the top book, the book underneath is now easy to reach.
3. **The book you removed is no longer accessible:** Because you are holding the book, it's not available on the shelf anymore.
4. **Your hands are no longer free:** Since you are now holding the book, your hands are occupied.
5. **The book is no longer on the shelf:** This shows that the book has been taken off the shelf.
6. **The shelf is now empty for that category:** This helps keep track of the shelf space and organization.

To summarize, the preconditions ensure the book is on the shelf, accessible, your hands are free, and you know which category the book belongs to. The effects update the situation to show you are holding the book, the book underneath is now accessible, and the shelf is empty for that category.","Parameters:
1. ?x - book
2. ?y - book
3. ?cat - category

Preconditions:
```
(and
    (not (belongs-to-category ?x ?cat))
    (on-shelf ?x ?y)
    (accessible ?x)
    (hands-free)
)
```

Effects:
```
(and
    (holding ?x)
    (accessible ?y)
    (not (accessible ?x))
    (not (hands-free))
    (not (on-shelf ?x ?y))
    (shelf-empty ?cat)
)
```
","(:action remove-from-shelf
    :parameters (?x - book ?y - book ?cat - category)
    :precondition (and (on-shelf ?x ?y) (accessible ?x) (hands-free) (belongs-to-category ?x ?cat))
    :effect (and (holding ?x) (accessible ?y) (not (accessible ?x)) (not (hands-free)) (not (on-shelf ?x ?y)) (shelf-empty ?cat))
)","negate (belongs-to-category ?x ?cat) in preconditions
"
libraryworld,remove-from-shelf,0.7177783250808716,Hard Negative (Manipulated Action),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Imagine a librarian approaching a shelf where one book is placed on top of another. The 'remove-from-shelf' action allows the librarian to take the top book off the shelf, provided it is accessible and the librarian's hands are free. This action makes the book on the shelf accessible and the librarian holds the removed book.

Action name: remove-from-shelf


Your answer:
","**Explanation:** 

Imagine you are a librarian in a library, and you need to take a book off the shelf. This book is placed on top of another book. The action ""remove-from-shelf"" lets you take the top book off the shelf. To do this, certain conditions, called ""preconditions,"" must be met to make sure you can successfully take the book.

For the action ""remove-from-shelf,"" let's break down what needs to be true before you can take the book off the shelf:

1. **The book must be on the shelf:** This means the book you want to take is on top of another book on the shelf.
2. **The book must be accessible:** This means the book isn't covered by other books or objects, so you can easily reach it.
3. **Your hands must be free:** You need to have empty hands to pick up the book, meaning you aren't already holding something else.
4. **The book must belong to a certain category:** This helps you know which book you are taking and ensures you are organizing the books properly.

Once these preconditions are met, you can proceed with the ""remove-from-shelf"" action. This action results in several changes, called ""effects,"" that update the status of the books and your hands:

1. **You are now holding the book:** This indicates you have picked up the book from the shelf.
2. **The book underneath becomes accessible:** Since you have removed the top book, the book underneath is now easy to reach.
3. **The book you removed is no longer accessible:** Because you are holding the book, it's not available on the shelf anymore.
4. **Your hands are no longer free:** Since you are now holding the book, your hands are occupied.
5. **The book is no longer on the shelf:** This shows that the book has been taken off the shelf.
6. **The shelf is now empty for that category:** This helps keep track of the shelf space and organization.

To summarize, the preconditions ensure the book is on the shelf, accessible, your hands are free, and you know which category the book belongs to. The effects update the situation to show you are holding the book, the book underneath is now accessible, and the shelf is empty for that category.
Parameters:
1. ?x - book
2. ?y - book
3. ?cat - category

Preconditions:
```
(and
    (on-shelf ?x ?y)
    (accessible ?x)
)
```

Effects:
```
(and
    (holding ?x)
    (accessible ?y)
    (not (accessible ?x))
    (not (hands-free))
    (not (on-shelf ?x ?y))
    (shelf-empty ?cat)
)
```
","(:action remove-from-shelf
    :parameters (?x - book ?y - book ?cat - category)
    :precondition (and (on-shelf ?x ?y) (accessible ?x) (hands-free) (belongs-to-category ?x ?cat))
    :effect (and (holding ?x) (accessible ?y) (not (accessible ?x)) (not (hands-free)) (not (on-shelf ?x ?y)) (shelf-empty ?cat))
)","remove (hands-free) from preconditions
remove (belongs-to-category ?x ?cat) from preconditions
"
libraryworld,remove-from-shelf,0.7177783250808716,Hard Negative (Manipulated Action),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Imagine a librarian approaching a shelf where one book is placed on top of another. The 'remove-from-shelf' action allows the librarian to take the top book off the shelf, provided it is accessible and the librarian's hands are free. This action makes the book on the shelf accessible and the librarian holds the removed book.

Action name: remove-from-shelf


Your answer:
","**Explanation:** 

Imagine you are a librarian in a library, and you need to take a book off the shelf. This book is placed on top of another book. The action ""remove-from-shelf"" lets you take the top book off the shelf. To do this, certain conditions, called ""preconditions,"" must be met to make sure you can successfully take the book.

For the action ""remove-from-shelf,"" let's break down what needs to be true before you can take the book off the shelf:

1. **The book must be on the shelf:** This means the book you want to take is on top of another book on the shelf.
2. **The book must be accessible:** This means the book isn't covered by other books or objects, so you can easily reach it.
3. **Your hands must be free:** You need to have empty hands to pick up the book, meaning you aren't already holding something else.
4. **The book must belong to a certain category:** This helps you know which book you are taking and ensures you are organizing the books properly.

Once these preconditions are met, you can proceed with the ""remove-from-shelf"" action. This action results in several changes, called ""effects,"" that update the status of the books and your hands:

1. **You are now holding the book:** This indicates you have picked up the book from the shelf.
2. **The book underneath becomes accessible:** Since you have removed the top book, the book underneath is now easy to reach.
3. **The book you removed is no longer accessible:** Because you are holding the book, it's not available on the shelf anymore.
4. **Your hands are no longer free:** Since you are now holding the book, your hands are occupied.
5. **The book is no longer on the shelf:** This shows that the book has been taken off the shelf.
6. **The shelf is now empty for that category:** This helps keep track of the shelf space and organization.

To summarize, the preconditions ensure the book is on the shelf, accessible, your hands are free, and you know which category the book belongs to. The effects update the situation to show you are holding the book, the book underneath is now accessible, and the shelf is empty for that category.
Parameters:
1. ?x - book
2. ?y - book
3. ?cat - category

Preconditions:
```
(and
    (not (on-shelf ?x ?y))
    (accessible ?x)
    (hands-free)
    (belongs-to-category ?x ?cat)
)
```

Effects:
```
(and
    (holding ?x)
    (accessible ?y)
    (not (accessible ?x))
    (not (hands-free))
    (not (on-shelf ?x ?y))
    (shelf-empty ?cat)
)
```
","(:action remove-from-shelf
    :parameters (?x - book ?y - book ?cat - category)
    :precondition (and (on-shelf ?x ?y) (accessible ?x) (hands-free) (belongs-to-category ?x ?cat))
    :effect (and (holding ?x) (accessible ?y) (not (accessible ?x)) (not (hands-free)) (not (on-shelf ?x ?y)) (shelf-empty ?cat))
)","negate (on-shelf ?x ?y) in preconditions
"
libraryworld,remove-from-shelf,0.7177783250808716,Hard Negative (Manipulated Action),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Imagine a librarian approaching a shelf where one book is placed on top of another. The 'remove-from-shelf' action allows the librarian to take the top book off the shelf, provided it is accessible and the librarian's hands are free. This action makes the book on the shelf accessible and the librarian holds the removed book.

Action name: remove-from-shelf


Your answer:
","**Explanation:** 

Imagine you are a librarian in a library, and you need to take a book off the shelf. This book is placed on top of another book. The action ""remove-from-shelf"" lets you take the top book off the shelf. To do this, certain conditions, called ""preconditions,"" must be met to make sure you can successfully take the book.

For the action ""remove-from-shelf,"" let's break down what needs to be true before you can take the book off the shelf:

1. **The book must be on the shelf:** This means the book you want to take is on top of another book on the shelf.
2. **The book must be accessible:** This means the book isn't covered by other books or objects, so you can easily reach it.
3. **Your hands must be free:** You need to have empty hands to pick up the book, meaning you aren't already holding something else.
4. **The book must belong to a certain category:** This helps you know which book you are taking and ensures you are organizing the books properly.

Once these preconditions are met, you can proceed with the ""remove-from-shelf"" action. This action results in several changes, called ""effects,"" that update the status of the books and your hands:

1. **You are now holding the book:** This indicates you have picked up the book from the shelf.
2. **The book underneath becomes accessible:** Since you have removed the top book, the book underneath is now easy to reach.
3. **The book you removed is no longer accessible:** Because you are holding the book, it's not available on the shelf anymore.
4. **Your hands are no longer free:** Since you are now holding the book, your hands are occupied.
5. **The book is no longer on the shelf:** This shows that the book has been taken off the shelf.
6. **The shelf is now empty for that category:** This helps keep track of the shelf space and organization.

To summarize, the preconditions ensure the book is on the shelf, accessible, your hands are free, and you know which category the book belongs to. The effects update the situation to show you are holding the book, the book underneath is now accessible, and the shelf is empty for that category.
Parameters:
1. ?x - book
2. ?y - book
3. ?cat - category

Preconditions:
```
(and
    (not (belongs-to-category ?x ?cat))
    (on-shelf ?x ?y)
    (accessible ?x)
    (hands-free)
)
```

Effects:
```
(and
    (holding ?x)
    (accessible ?y)
    (not (accessible ?x))
    (not (hands-free))
    (not (on-shelf ?x ?y))
    (shelf-empty ?cat)
)
```
","(:action remove-from-shelf
    :parameters (?x - book ?y - book ?cat - category)
    :precondition (and (on-shelf ?x ?y) (accessible ?x) (hands-free) (belongs-to-category ?x ?cat))
    :effect (and (holding ?x) (accessible ?y) (not (accessible ?x)) (not (hands-free)) (not (on-shelf ?x ?y)) (shelf-empty ?cat))
)","negate (belongs-to-category ?x ?cat) in preconditions
"
libraryworld,remove-from-shelf,0.7177783250808716,Hard Negative (Manipulated Action),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Imagine a librarian approaching a shelf where one book is placed on top of another. The 'remove-from-shelf' action allows the librarian to take the top book off the shelf, provided it is accessible and the librarian's hands are free. This action makes the book on the shelf accessible and the librarian holds the removed book.

Action name: remove-from-shelf


Your answer:
","**Explanation:** 

Imagine you are a librarian in a library, and you need to take a book off the shelf. This book is placed on top of another book. The action ""remove-from-shelf"" lets you take the top book off the shelf. To do this, certain conditions, called ""preconditions,"" must be met to make sure you can successfully take the book.

For the action ""remove-from-shelf,"" let's break down what needs to be true before you can take the book off the shelf:

1. **The book must be on the shelf:** This means the book you want to take is on top of another book on the shelf.
2. **The book must be accessible:** This means the book isn't covered by other books or objects, so you can easily reach it.
3. **Your hands must be free:** You need to have empty hands to pick up the book, meaning you aren't already holding something else.
4. **The book must belong to a certain category:** This helps you know which book you are taking and ensures you are organizing the books properly.

Once these preconditions are met, you can proceed with the ""remove-from-shelf"" action. This action results in several changes, called ""effects,"" that update the status of the books and your hands:

1. **You are now holding the book:** This indicates you have picked up the book from the shelf.
2. **The book underneath becomes accessible:** Since you have removed the top book, the book underneath is now easy to reach.
3. **The book you removed is no longer accessible:** Because you are holding the book, it's not available on the shelf anymore.
4. **Your hands are no longer free:** Since you are now holding the book, your hands are occupied.
5. **The book is no longer on the shelf:** This shows that the book has been taken off the shelf.
6. **The shelf is now empty for that category:** This helps keep track of the shelf space and organization.

To summarize, the preconditions ensure the book is on the shelf, accessible, your hands are free, and you know which category the book belongs to. The effects update the situation to show you are holding the book, the book underneath is now accessible, and the shelf is empty for that category.
Parameters:
1. ?x - book
2. ?y - book
3. ?cat - category

Preconditions:
```
(and
    (not (accessible ?x))
    (holding ?x)
    (on-shelf ?x ?y)
    (hands-free)
)
```

Effects:
```
(and
    (belongs-to-category ?x ?cat)
    (accessible ?x)
    (accessible ?y)
    (not (hands-free))
    (not (on-shelf ?x ?y))
    (shelf-empty ?cat)
)
```
","(:action remove-from-shelf
    :parameters (?x - book ?y - book ?cat - category)
    :precondition (and (on-shelf ?x ?y) (accessible ?x) (hands-free) (belongs-to-category ?x ?cat))
    :effect (and (holding ?x) (accessible ?y) (not (accessible ?x)) (not (hands-free)) (not (on-shelf ?x ?y)) (shelf-empty ?cat))
)","swap (belongs-to-category ?x ?cat) with (not (accessible ?x))
swap (accessible ?x) with (holding ?x)
"
libraryworld,remove-from-shelf,0.7177783250808716,Hard Negative (Manipulated Action),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Imagine a librarian approaching a shelf where one book is placed on top of another. The 'remove-from-shelf' action allows the librarian to take the top book off the shelf, provided it is accessible and the librarian's hands are free. This action makes the book on the shelf accessible and the librarian holds the removed book.

Action name: remove-from-shelf


Your answer:
","**Explanation:** 

Imagine you are a librarian in a library, and you need to take a book off the shelf. This book is placed on top of another book. The action ""remove-from-shelf"" lets you take the top book off the shelf. To do this, certain conditions, called ""preconditions,"" must be met to make sure you can successfully take the book.

For the action ""remove-from-shelf,"" let's break down what needs to be true before you can take the book off the shelf:

1. **The book must be on the shelf:** This means the book you want to take is on top of another book on the shelf.
2. **The book must be accessible:** This means the book isn't covered by other books or objects, so you can easily reach it.
3. **Your hands must be free:** You need to have empty hands to pick up the book, meaning you aren't already holding something else.
4. **The book must belong to a certain category:** This helps you know which book you are taking and ensures you are organizing the books properly.

Once these preconditions are met, you can proceed with the ""remove-from-shelf"" action. This action results in several changes, called ""effects,"" that update the status of the books and your hands:

1. **You are now holding the book:** This indicates you have picked up the book from the shelf.
2. **The book underneath becomes accessible:** Since you have removed the top book, the book underneath is now easy to reach.
3. **The book you removed is no longer accessible:** Because you are holding the book, it's not available on the shelf anymore.
4. **Your hands are no longer free:** Since you are now holding the book, your hands are occupied.
5. **The book is no longer on the shelf:** This shows that the book has been taken off the shelf.
6. **The shelf is now empty for that category:** This helps keep track of the shelf space and organization.

To summarize, the preconditions ensure the book is on the shelf, accessible, your hands are free, and you know which category the book belongs to. The effects update the situation to show you are holding the book, the book underneath is now accessible, and the shelf is empty for that category.
Parameters:
1. ?x - book
2. ?y - book
3. ?cat - category

Preconditions:
```
(and
    (holding ?x)
    (on-shelf ?x ?y)
    (accessible ?x)
    (belongs-to-category ?x ?cat)
)
```

Effects:
```
(and
    (hands-free)
    (accessible ?y)
    (not (accessible ?x))
    (not (hands-free))
    (shelf-empty ?cat)
)
```
","(:action remove-from-shelf
    :parameters (?x - book ?y - book ?cat - category)
    :precondition (and (on-shelf ?x ?y) (accessible ?x) (hands-free) (belongs-to-category ?x ?cat))
    :effect (and (holding ?x) (accessible ?y) (not (accessible ?x)) (not (hands-free)) (not (on-shelf ?x ?y)) (shelf-empty ?cat))
)","remove (not (on-shelf ?x ?y)) from effects
swap (hands-free) with (holding ?x)
"
libraryworld,remove-from-shelf,0.7177783250808716,Hard Negative (Manipulated Action),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Imagine a librarian approaching a shelf where one book is placed on top of another. The 'remove-from-shelf' action allows the librarian to take the top book off the shelf, provided it is accessible and the librarian's hands are free. This action makes the book on the shelf accessible and the librarian holds the removed book.

Action name: remove-from-shelf


Your answer:
","**Explanation:** 

Imagine you are a librarian in a library, and you need to take a book off the shelf. This book is placed on top of another book. The action ""remove-from-shelf"" lets you take the top book off the shelf. To do this, certain conditions, called ""preconditions,"" must be met to make sure you can successfully take the book.

For the action ""remove-from-shelf,"" let's break down what needs to be true before you can take the book off the shelf:

1. **The book must be on the shelf:** This means the book you want to take is on top of another book on the shelf.
2. **The book must be accessible:** This means the book isn't covered by other books or objects, so you can easily reach it.
3. **Your hands must be free:** You need to have empty hands to pick up the book, meaning you aren't already holding something else.
4. **The book must belong to a certain category:** This helps you know which book you are taking and ensures you are organizing the books properly.

Once these preconditions are met, you can proceed with the ""remove-from-shelf"" action. This action results in several changes, called ""effects,"" that update the status of the books and your hands:

1. **You are now holding the book:** This indicates you have picked up the book from the shelf.
2. **The book underneath becomes accessible:** Since you have removed the top book, the book underneath is now easy to reach.
3. **The book you removed is no longer accessible:** Because you are holding the book, it's not available on the shelf anymore.
4. **Your hands are no longer free:** Since you are now holding the book, your hands are occupied.
5. **The book is no longer on the shelf:** This shows that the book has been taken off the shelf.
6. **The shelf is now empty for that category:** This helps keep track of the shelf space and organization.

To summarize, the preconditions ensure the book is on the shelf, accessible, your hands are free, and you know which category the book belongs to. The effects update the situation to show you are holding the book, the book underneath is now accessible, and the shelf is empty for that category.
Parameters:
1. ?x - book
2. ?y - book
3. ?cat - category

Preconditions:
```
(and
    (not (hands-free))
    (on-shelf ?x ?y)
    (accessible ?x)
    (hands-free)
)
```

Effects:
```
(and
    (belongs-to-category ?x ?cat)
    (holding ?x)
    (accessible ?y)
    (not (on-shelf ?x ?y))
    (shelf-empty ?cat)
)
```
","(:action remove-from-shelf
    :parameters (?x - book ?y - book ?cat - category)
    :precondition (and (on-shelf ?x ?y) (accessible ?x) (hands-free) (belongs-to-category ?x ?cat))
    :effect (and (holding ?x) (accessible ?y) (not (accessible ?x)) (not (hands-free)) (not (on-shelf ?x ?y)) (shelf-empty ?cat))
)","remove (not (accessible ?x)) from effects
swap (belongs-to-category ?x ?cat) with (not (hands-free))
"
libraryworld,remove-from-shelf,0.7177783250808716,Hard Negative (Manipulated Action),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Imagine a librarian approaching a shelf where one book is placed on top of another. The 'remove-from-shelf' action allows the librarian to take the top book off the shelf, provided it is accessible and the librarian's hands are free. This action makes the book on the shelf accessible and the librarian holds the removed book.

Action name: remove-from-shelf


Your answer:
","**Explanation:** 

Imagine you are a librarian in a library, and you need to take a book off the shelf. This book is placed on top of another book. The action ""remove-from-shelf"" lets you take the top book off the shelf. To do this, certain conditions, called ""preconditions,"" must be met to make sure you can successfully take the book.

For the action ""remove-from-shelf,"" let's break down what needs to be true before you can take the book off the shelf:

1. **The book must be on the shelf:** This means the book you want to take is on top of another book on the shelf.
2. **The book must be accessible:** This means the book isn't covered by other books or objects, so you can easily reach it.
3. **Your hands must be free:** You need to have empty hands to pick up the book, meaning you aren't already holding something else.
4. **The book must belong to a certain category:** This helps you know which book you are taking and ensures you are organizing the books properly.

Once these preconditions are met, you can proceed with the ""remove-from-shelf"" action. This action results in several changes, called ""effects,"" that update the status of the books and your hands:

1. **You are now holding the book:** This indicates you have picked up the book from the shelf.
2. **The book underneath becomes accessible:** Since you have removed the top book, the book underneath is now easy to reach.
3. **The book you removed is no longer accessible:** Because you are holding the book, it's not available on the shelf anymore.
4. **Your hands are no longer free:** Since you are now holding the book, your hands are occupied.
5. **The book is no longer on the shelf:** This shows that the book has been taken off the shelf.
6. **The shelf is now empty for that category:** This helps keep track of the shelf space and organization.

To summarize, the preconditions ensure the book is on the shelf, accessible, your hands are free, and you know which category the book belongs to. The effects update the situation to show you are holding the book, the book underneath is now accessible, and the shelf is empty for that category.
Parameters:
1. ?x - book
2. ?y - book
3. ?cat - category

Preconditions:
```
(and
    (accessible ?x)
    (hands-free)
    (belongs-to-category ?x ?cat)
)
```

Effects:
```
(and
    (not (holding ?x))
    (accessible ?y)
    (not (accessible ?x))
    (not (hands-free))
    (not (on-shelf ?x ?y))
    (shelf-empty ?cat)
)
```
","(:action remove-from-shelf
    :parameters (?x - book ?y - book ?cat - category)
    :precondition (and (on-shelf ?x ?y) (accessible ?x) (hands-free) (belongs-to-category ?x ?cat))
    :effect (and (holding ?x) (accessible ?y) (not (accessible ?x)) (not (hands-free)) (not (on-shelf ?x ?y)) (shelf-empty ?cat))
)","remove (on-shelf ?x ?y) from preconditions
negate (holding ?x) in effects
"
libraryworld,remove-from-shelf,0.7177783250808716,Hard Negative (Manipulated Action),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Imagine a librarian approaching a shelf where one book is placed on top of another. The 'remove-from-shelf' action allows the librarian to take the top book off the shelf, provided it is accessible and the librarian's hands are free. This action makes the book on the shelf accessible and the librarian holds the removed book.

Action name: remove-from-shelf


Your answer:
","**Explanation:** 

Imagine you are a librarian in a library, and you need to take a book off the shelf. This book is placed on top of another book. The action ""remove-from-shelf"" lets you take the top book off the shelf. To do this, certain conditions, called ""preconditions,"" must be met to make sure you can successfully take the book.

For the action ""remove-from-shelf,"" let's break down what needs to be true before you can take the book off the shelf:

1. **The book must be on the shelf:** This means the book you want to take is on top of another book on the shelf.
2. **The book must be accessible:** This means the book isn't covered by other books or objects, so you can easily reach it.
3. **Your hands must be free:** You need to have empty hands to pick up the book, meaning you aren't already holding something else.
4. **The book must belong to a certain category:** This helps you know which book you are taking and ensures you are organizing the books properly.

Once these preconditions are met, you can proceed with the ""remove-from-shelf"" action. This action results in several changes, called ""effects,"" that update the status of the books and your hands:

1. **You are now holding the book:** This indicates you have picked up the book from the shelf.
2. **The book underneath becomes accessible:** Since you have removed the top book, the book underneath is now easy to reach.
3. **The book you removed is no longer accessible:** Because you are holding the book, it's not available on the shelf anymore.
4. **Your hands are no longer free:** Since you are now holding the book, your hands are occupied.
5. **The book is no longer on the shelf:** This shows that the book has been taken off the shelf.
6. **The shelf is now empty for that category:** This helps keep track of the shelf space and organization.

To summarize, the preconditions ensure the book is on the shelf, accessible, your hands are free, and you know which category the book belongs to. The effects update the situation to show you are holding the book, the book underneath is now accessible, and the shelf is empty for that category.
Parameters:
1. ?x - book
2. ?y - book
3. ?cat - category

Preconditions:
```
(and
    (not (hands-free))
    (on-shelf ?x ?y)
    (accessible ?x)
    (hands-free)
)
```

Effects:
```
(and
    (belongs-to-category ?x ?cat)
    (holding ?x)
    (accessible ?y)
    (not (on-shelf ?x ?y))
    (shelf-empty ?cat)
)
```
","(:action remove-from-shelf
    :parameters (?x - book ?y - book ?cat - category)
    :precondition (and (on-shelf ?x ?y) (accessible ?x) (hands-free) (belongs-to-category ?x ?cat))
    :effect (and (holding ?x) (accessible ?y) (not (accessible ?x)) (not (hands-free)) (not (on-shelf ?x ?y)) (shelf-empty ?cat))
)","swap (belongs-to-category ?x ?cat) with (not (hands-free))
remove (not (accessible ?x)) from effects
"
libraryworld,remove-from-shelf,0.7177783250808716,Hard Negative (Manipulated Action),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Imagine a librarian approaching a shelf where one book is placed on top of another. The 'remove-from-shelf' action allows the librarian to take the top book off the shelf, provided it is accessible and the librarian's hands are free. This action makes the book on the shelf accessible and the librarian holds the removed book.

Action name: remove-from-shelf


Your answer:
","**Explanation:** 

Imagine you are a librarian in a library, and you need to take a book off the shelf. This book is placed on top of another book. The action ""remove-from-shelf"" lets you take the top book off the shelf. To do this, certain conditions, called ""preconditions,"" must be met to make sure you can successfully take the book.

For the action ""remove-from-shelf,"" let's break down what needs to be true before you can take the book off the shelf:

1. **The book must be on the shelf:** This means the book you want to take is on top of another book on the shelf.
2. **The book must be accessible:** This means the book isn't covered by other books or objects, so you can easily reach it.
3. **Your hands must be free:** You need to have empty hands to pick up the book, meaning you aren't already holding something else.
4. **The book must belong to a certain category:** This helps you know which book you are taking and ensures you are organizing the books properly.

Once these preconditions are met, you can proceed with the ""remove-from-shelf"" action. This action results in several changes, called ""effects,"" that update the status of the books and your hands:

1. **You are now holding the book:** This indicates you have picked up the book from the shelf.
2. **The book underneath becomes accessible:** Since you have removed the top book, the book underneath is now easy to reach.
3. **The book you removed is no longer accessible:** Because you are holding the book, it's not available on the shelf anymore.
4. **Your hands are no longer free:** Since you are now holding the book, your hands are occupied.
5. **The book is no longer on the shelf:** This shows that the book has been taken off the shelf.
6. **The shelf is now empty for that category:** This helps keep track of the shelf space and organization.

To summarize, the preconditions ensure the book is on the shelf, accessible, your hands are free, and you know which category the book belongs to. The effects update the situation to show you are holding the book, the book underneath is now accessible, and the shelf is empty for that category.
Parameters:
1. ?x - book
2. ?y - book
3. ?cat - category

Preconditions:
```
(and
    (not (on-shelf ?x ?y))
    (not (accessible ?x))
    (hands-free)
    (belongs-to-category ?x ?cat)
)
```

Effects:
```
(and
    (accessible ?x)
    (on-shelf ?x ?y)
    (holding ?x)
    (accessible ?y)
    (not (hands-free))
    (shelf-empty ?cat)
)
```
","(:action remove-from-shelf
    :parameters (?x - book ?y - book ?cat - category)
    :precondition (and (on-shelf ?x ?y) (accessible ?x) (hands-free) (belongs-to-category ?x ?cat))
    :effect (and (holding ?x) (accessible ?y) (not (accessible ?x)) (not (hands-free)) (not (on-shelf ?x ?y)) (shelf-empty ?cat))
)","swap (accessible ?x) with (not (on-shelf ?x ?y))
swap (on-shelf ?x ?y) with (not (accessible ?x))
"
libraryworld,remove-from-shelf,0.7177783250808716,Hard Negative (Manipulated Action),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Imagine a librarian approaching a shelf where one book is placed on top of another. The 'remove-from-shelf' action allows the librarian to take the top book off the shelf, provided it is accessible and the librarian's hands are free. This action makes the book on the shelf accessible and the librarian holds the removed book.

Action name: remove-from-shelf


Your answer:
","**Explanation:** 

Imagine you are a librarian in a library, and you need to take a book off the shelf. This book is placed on top of another book. The action ""remove-from-shelf"" lets you take the top book off the shelf. To do this, certain conditions, called ""preconditions,"" must be met to make sure you can successfully take the book.

For the action ""remove-from-shelf,"" let's break down what needs to be true before you can take the book off the shelf:

1. **The book must be on the shelf:** This means the book you want to take is on top of another book on the shelf.
2. **The book must be accessible:** This means the book isn't covered by other books or objects, so you can easily reach it.
3. **Your hands must be free:** You need to have empty hands to pick up the book, meaning you aren't already holding something else.
4. **The book must belong to a certain category:** This helps you know which book you are taking and ensures you are organizing the books properly.

Once these preconditions are met, you can proceed with the ""remove-from-shelf"" action. This action results in several changes, called ""effects,"" that update the status of the books and your hands:

1. **You are now holding the book:** This indicates you have picked up the book from the shelf.
2. **The book underneath becomes accessible:** Since you have removed the top book, the book underneath is now easy to reach.
3. **The book you removed is no longer accessible:** Because you are holding the book, it's not available on the shelf anymore.
4. **Your hands are no longer free:** Since you are now holding the book, your hands are occupied.
5. **The book is no longer on the shelf:** This shows that the book has been taken off the shelf.
6. **The shelf is now empty for that category:** This helps keep track of the shelf space and organization.

To summarize, the preconditions ensure the book is on the shelf, accessible, your hands are free, and you know which category the book belongs to. The effects update the situation to show you are holding the book, the book underneath is now accessible, and the shelf is empty for that category.
Parameters:
1. ?x - book
2. ?y - book
3. ?cat - category

Preconditions:
```
(and
    (on-shelf ?x ?y)
    (accessible ?x)
    (hands-free)
    (belongs-to-category ?x ?cat)
)
```

Effects:
```
(and
    (hands-free)
    (holding ?x)
    (accessible ?y)
    (not (on-shelf ?x ?y))
    (shelf-empty ?cat)
)
```
","(:action remove-from-shelf
    :parameters (?x - book ?y - book ?cat - category)
    :precondition (and (on-shelf ?x ?y) (accessible ?x) (hands-free) (belongs-to-category ?x ?cat))
    :effect (and (holding ?x) (accessible ?y) (not (accessible ?x)) (not (hands-free)) (not (on-shelf ?x ?y)) (shelf-empty ?cat))
)","remove (not (accessible ?x)) from effects
negate (not (hands-free)) in effects
"
libraryworld,place-on-table,0.5250561237335205,Positive (Correct Match),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Picture a librarian holding a book. The 'place-on-table' action involves placing the held book onto the table. This action is feasible if the librarian is currently holding the book. Once placed, the book becomes accessible again, and the librarian's hands are free.

Action name: place-on-table


Your answer:
","Parameters:
1. ?x - book

Preconditions:
```
(holding ?x)
```

Effects:
```
(and
    (not (holding ?x))
    (accessible ?x)
    (hands-free)
    (on-table ?x)
)
```
","(:action place-on-table
    :parameters (?x - book)
    :precondition (holding ?x)
    :effect (and (not (holding ?x)) (accessible ?x) (hands-free) (on-table ?x))
)",
libraryworld,place-on-table,0.5250561237335205,Positive (Correct Match),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Picture a librarian holding a book. The 'place-on-table' action involves placing the held book onto the table. This action is feasible if the librarian is currently holding the book. Once placed, the book becomes accessible again, and the librarian's hands are free.

Action name: place-on-table


Your answer:

**Explanation:** 

Imagine you are a librarian holding a book in your hands, and you want to place it on a nearby table. The action ""place-on-table"" lets you do this. To make sure everything goes smoothly, there is a condition, called a ""precondition,"" that must be met before you can place the book on the table.

For the action ""place-on-table,"" let's break down what needs to be true before you can place the book on the table:

1. **You must be holding the book:** This means you have the book in your hands, ready to place it on the table.

Once this precondition is met, you can proceed with the ""place-on-table"" action. This action results in several changes, called ""effects,"" that update the status of the book and your hands:

1. **You are no longer holding the book:** This shows that you have placed the book on the table.
2. **The book becomes accessible:** Now that the book is on the table, it is easy to reach and pick up again if needed.
3. **Your hands are now free:** Since you have placed the book on the table, your hands are empty again.
4. **The book is on the table:** This indicates the new location of the book.

To summarize, the precondition ensures you are holding the book, making sure you are ready to place it on the table. The effects update the situation to show that you have placed the book on the table, it is now accessible, and your hands are free again.","Parameters:
1. ?x - book

Preconditions:
```
(holding ?x)
```

Effects:
```
(and
    (not (holding ?x))
    (accessible ?x)
    (hands-free)
    (on-table ?x)
)
```
","(:action place-on-table
    :parameters (?x - book)
    :precondition (holding ?x)
    :effect (and (not (holding ?x)) (accessible ?x) (hands-free) (on-table ?x))
)",
libraryworld,place-on-table,0.6384034156799316,Positive (Correct Match),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Picture a librarian holding a book. The 'place-on-table' action involves placing the held book onto the table. This action is feasible if the librarian is currently holding the book. Once placed, the book becomes accessible again, and the librarian's hands are free.

Action name: place-on-table


Your answer:
","**Explanation:** 

Imagine you are a librarian holding a book in your hands, and you want to place it on a nearby table. The action ""place-on-table"" lets you do this. To make sure everything goes smoothly, there is a condition, called a ""precondition,"" that must be met before you can place the book on the table.

For the action ""place-on-table,"" let's break down what needs to be true before you can place the book on the table:

1. **You must be holding the book:** This means you have the book in your hands, ready to place it on the table.

Once this precondition is met, you can proceed with the ""place-on-table"" action. This action results in several changes, called ""effects,"" that update the status of the book and your hands:

1. **You are no longer holding the book:** This shows that you have placed the book on the table.
2. **The book becomes accessible:** Now that the book is on the table, it is easy to reach and pick up again if needed.
3. **Your hands are now free:** Since you have placed the book on the table, your hands are empty again.
4. **The book is on the table:** This indicates the new location of the book.

To summarize, the precondition ensures you are holding the book, making sure you are ready to place it on the table. The effects update the situation to show that you have placed the book on the table, it is now accessible, and your hands are free again.
Parameters:
1. ?x - book

Preconditions:
```
(holding ?x)
```

Effects:
```
(and
    (not (holding ?x))
    (accessible ?x)
    (hands-free)
    (on-table ?x)
)
```
","(:action place-on-table
    :parameters (?x - book)
    :precondition (holding ?x)
    :effect (and (not (holding ?x)) (accessible ?x) (hands-free) (on-table ?x))
)",
libraryworld,place-on-table,0.0675392746925354,Easy Negative (Inter-Domain Mismatch),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Picture a librarian holding a book. The 'place-on-table' action involves placing the held book onto the table. This action is feasible if the librarian is currently holding the book. Once placed, the book becomes accessible again, and the librarian's hands are free.

Action name: place-on-table


Your answer:
","Parameters:
1. ?from - cells
2. ?to - cells

Preconditions:
```
(and
    (connected ?from ?to)
    (at-hero ?from)
    (not (is-destroyed ?to))
    (not (has-trap ?from))
    (has-trap ?to)
    (arm-free)
)
```

Effects:
```
(and
    (at-hero ?to)
    (is-destroyed ?from)
    (not (at-hero ?from))
)
```
","(:action place-on-table
    :parameters (?x - book)
    :precondition (holding ?x)
    :effect (and (not (holding ?x)) (accessible ?x) (hands-free) (on-table ?x))
)",
libraryworld,place-on-table,0.0897703617811203,Easy Negative (Inter-Domain Mismatch),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Picture a librarian holding a book. The 'place-on-table' action involves placing the held book onto the table. This action is feasible if the librarian is currently holding the book. Once placed, the book becomes accessible again, and the librarian's hands are free.

Action name: place-on-table


Your answer:
","Parameters:
1. ?from - cells
2. ?to - cells

Preconditions:
```
(and
    (connected ?from ?to)
    (at-hero ?from)
    (not (has-trap ?from))
    (not (is-destroyed ?to))
    (not (has-trap ?to))
    (not (has-monster ?to))
)
```

Effects:
```
(and
    (at-hero ?to)
    (is-destroyed ?from)
    (not (at-hero ?from))
)
```
","(:action place-on-table
    :parameters (?x - book)
    :precondition (holding ?x)
    :effect (and (not (holding ?x)) (accessible ?x) (hands-free) (on-table ?x))
)",
libraryworld,place-on-table,0.10826129466295242,Easy Negative (Inter-Domain Mismatch),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Picture a librarian holding a book. The 'place-on-table' action involves placing the held book onto the table. This action is feasible if the librarian is currently holding the book. Once placed, the book becomes accessible again, and the librarian's hands are free.

Action name: place-on-table


Your answer:
","Parameters:
1. ?loc - cells
2. ?s - swords

Preconditions:
```
(and
    (at-hero ?loc)
    (at-sword ?s ?loc)
    (arm-free)
)
```

Effects:
```
(and
    (holding ?s)
    (not (at-sword ?s ?loc))
    (not (arm-free))
)
```
","(:action place-on-table
    :parameters (?x - book)
    :precondition (holding ?x)
    :effect (and (not (holding ?x)) (accessible ?x) (hands-free) (on-table ?x))
)",
libraryworld,place-on-table,0.13337838649749756,Easy Negative (Inter-Domain Mismatch),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Picture a librarian holding a book. The 'place-on-table' action involves placing the held book onto the table. This action is feasible if the librarian is currently holding the book. Once placed, the book becomes accessible again, and the librarian's hands are free.

Action name: place-on-table


Your answer:
","Parameters:
1. ?loc - cells

Preconditions:
```
(and
    (at-hero ?loc)
    (arm-free)
    (has-trap ?loc)
)
```

Effects:
```
(and
    (trap-disarmed ?loc)
    (not (has-trap ?loc))
)
```
","(:action place-on-table
    :parameters (?x - book)
    :precondition (holding ?x)
    :effect (and (not (holding ?x)) (accessible ?x) (hands-free) (on-table ?x))
)",
libraryworld,place-on-table,0.18069863319396973,Easy Negative (Inter-Domain Mismatch),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Picture a librarian holding a book. The 'place-on-table' action involves placing the held book onto the table. This action is feasible if the librarian is currently holding the book. Once placed, the book becomes accessible again, and the librarian's hands are free.

Action name: place-on-table


Your answer:
","Parameters:
1. ?from - cells
2. ?to - cells
3. ?s - swords

Preconditions:
```
(and
    (connected ?from ?to)
    (at-hero ?from)
    (has-monster ?to)
    (not (is-destroyed ?to))
    (not (has-trap ?from))
    (holding ?s)
)
```

Effects:
```
(and
    (at-hero ?to)
    (is-destroyed ?from)
    (not (at-hero ?from))
)
```
","(:action place-on-table
    :parameters (?x - book)
    :precondition (holding ?x)
    :effect (and (not (holding ?x)) (accessible ?x) (hands-free) (on-table ?x))
)",
libraryworld,place-on-table,0.09276842325925827,Easy Negative (Inter-Domain Mismatch),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Picture a librarian holding a book. The 'place-on-table' action involves placing the held book onto the table. This action is feasible if the librarian is currently holding the book. Once placed, the book becomes accessible again, and the librarian's hands are free.

Action name: place-on-table


Your answer:
","Parameters:
1. ?loc - cells
2. ?s - swords

Preconditions:
```
(and
    (at-hero ?loc)
    (holding ?s)
    (not (has-trap ?loc))
    (not (has-monster ?loc))
)
```

Effects:
```
(and
    (arm-free)
    (is-destroyed ?s)
    (not (holding ?s))
)
```
","(:action place-on-table
    :parameters (?x - book)
    :precondition (holding ?x)
    :effect (and (not (holding ?x)) (accessible ?x) (hands-free) (on-table ?x))
)",
libraryworld,place-on-table,0.0675392746925354,Easy Negative (Inter-Domain Mismatch),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Picture a librarian holding a book. The 'place-on-table' action involves placing the held book onto the table. This action is feasible if the librarian is currently holding the book. Once placed, the book becomes accessible again, and the librarian's hands are free.

Action name: place-on-table


Your answer:

**Explanation:** 

Imagine you are a librarian holding a book in your hands, and you want to place it on a nearby table. The action ""place-on-table"" lets you do this. To make sure everything goes smoothly, there is a condition, called a ""precondition,"" that must be met before you can place the book on the table.

For the action ""place-on-table,"" let's break down what needs to be true before you can place the book on the table:

1. **You must be holding the book:** This means you have the book in your hands, ready to place it on the table.

Once this precondition is met, you can proceed with the ""place-on-table"" action. This action results in several changes, called ""effects,"" that update the status of the book and your hands:

1. **You are no longer holding the book:** This shows that you have placed the book on the table.
2. **The book becomes accessible:** Now that the book is on the table, it is easy to reach and pick up again if needed.
3. **Your hands are now free:** Since you have placed the book on the table, your hands are empty again.
4. **The book is on the table:** This indicates the new location of the book.

To summarize, the precondition ensures you are holding the book, making sure you are ready to place it on the table. The effects update the situation to show that you have placed the book on the table, it is now accessible, and your hands are free again.","Parameters:
1. ?from - cells
2. ?to - cells

Preconditions:
```
(and
    (connected ?from ?to)
    (at-hero ?from)
    (not (is-destroyed ?to))
    (not (has-trap ?from))
    (has-trap ?to)
    (arm-free)
)
```

Effects:
```
(and
    (at-hero ?to)
    (is-destroyed ?from)
    (not (at-hero ?from))
)
```
","(:action place-on-table
    :parameters (?x - book)
    :precondition (holding ?x)
    :effect (and (not (holding ?x)) (accessible ?x) (hands-free) (on-table ?x))
)",
libraryworld,place-on-table,0.0897703617811203,Easy Negative (Inter-Domain Mismatch),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Picture a librarian holding a book. The 'place-on-table' action involves placing the held book onto the table. This action is feasible if the librarian is currently holding the book. Once placed, the book becomes accessible again, and the librarian's hands are free.

Action name: place-on-table


Your answer:

**Explanation:** 

Imagine you are a librarian holding a book in your hands, and you want to place it on a nearby table. The action ""place-on-table"" lets you do this. To make sure everything goes smoothly, there is a condition, called a ""precondition,"" that must be met before you can place the book on the table.

For the action ""place-on-table,"" let's break down what needs to be true before you can place the book on the table:

1. **You must be holding the book:** This means you have the book in your hands, ready to place it on the table.

Once this precondition is met, you can proceed with the ""place-on-table"" action. This action results in several changes, called ""effects,"" that update the status of the book and your hands:

1. **You are no longer holding the book:** This shows that you have placed the book on the table.
2. **The book becomes accessible:** Now that the book is on the table, it is easy to reach and pick up again if needed.
3. **Your hands are now free:** Since you have placed the book on the table, your hands are empty again.
4. **The book is on the table:** This indicates the new location of the book.

To summarize, the precondition ensures you are holding the book, making sure you are ready to place it on the table. The effects update the situation to show that you have placed the book on the table, it is now accessible, and your hands are free again.","Parameters:
1. ?from - cells
2. ?to - cells

Preconditions:
```
(and
    (connected ?from ?to)
    (at-hero ?from)
    (not (has-trap ?from))
    (not (is-destroyed ?to))
    (not (has-trap ?to))
    (not (has-monster ?to))
)
```

Effects:
```
(and
    (at-hero ?to)
    (is-destroyed ?from)
    (not (at-hero ?from))
)
```
","(:action place-on-table
    :parameters (?x - book)
    :precondition (holding ?x)
    :effect (and (not (holding ?x)) (accessible ?x) (hands-free) (on-table ?x))
)",
libraryworld,place-on-table,0.10826129466295242,Easy Negative (Inter-Domain Mismatch),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Picture a librarian holding a book. The 'place-on-table' action involves placing the held book onto the table. This action is feasible if the librarian is currently holding the book. Once placed, the book becomes accessible again, and the librarian's hands are free.

Action name: place-on-table


Your answer:

**Explanation:** 

Imagine you are a librarian holding a book in your hands, and you want to place it on a nearby table. The action ""place-on-table"" lets you do this. To make sure everything goes smoothly, there is a condition, called a ""precondition,"" that must be met before you can place the book on the table.

For the action ""place-on-table,"" let's break down what needs to be true before you can place the book on the table:

1. **You must be holding the book:** This means you have the book in your hands, ready to place it on the table.

Once this precondition is met, you can proceed with the ""place-on-table"" action. This action results in several changes, called ""effects,"" that update the status of the book and your hands:

1. **You are no longer holding the book:** This shows that you have placed the book on the table.
2. **The book becomes accessible:** Now that the book is on the table, it is easy to reach and pick up again if needed.
3. **Your hands are now free:** Since you have placed the book on the table, your hands are empty again.
4. **The book is on the table:** This indicates the new location of the book.

To summarize, the precondition ensures you are holding the book, making sure you are ready to place it on the table. The effects update the situation to show that you have placed the book on the table, it is now accessible, and your hands are free again.","Parameters:
1. ?loc - cells
2. ?s - swords

Preconditions:
```
(and
    (at-hero ?loc)
    (at-sword ?s ?loc)
    (arm-free)
)
```

Effects:
```
(and
    (holding ?s)
    (not (at-sword ?s ?loc))
    (not (arm-free))
)
```
","(:action place-on-table
    :parameters (?x - book)
    :precondition (holding ?x)
    :effect (and (not (holding ?x)) (accessible ?x) (hands-free) (on-table ?x))
)",
libraryworld,place-on-table,0.13337838649749756,Easy Negative (Inter-Domain Mismatch),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Picture a librarian holding a book. The 'place-on-table' action involves placing the held book onto the table. This action is feasible if the librarian is currently holding the book. Once placed, the book becomes accessible again, and the librarian's hands are free.

Action name: place-on-table


Your answer:

**Explanation:** 

Imagine you are a librarian holding a book in your hands, and you want to place it on a nearby table. The action ""place-on-table"" lets you do this. To make sure everything goes smoothly, there is a condition, called a ""precondition,"" that must be met before you can place the book on the table.

For the action ""place-on-table,"" let's break down what needs to be true before you can place the book on the table:

1. **You must be holding the book:** This means you have the book in your hands, ready to place it on the table.

Once this precondition is met, you can proceed with the ""place-on-table"" action. This action results in several changes, called ""effects,"" that update the status of the book and your hands:

1. **You are no longer holding the book:** This shows that you have placed the book on the table.
2. **The book becomes accessible:** Now that the book is on the table, it is easy to reach and pick up again if needed.
3. **Your hands are now free:** Since you have placed the book on the table, your hands are empty again.
4. **The book is on the table:** This indicates the new location of the book.

To summarize, the precondition ensures you are holding the book, making sure you are ready to place it on the table. The effects update the situation to show that you have placed the book on the table, it is now accessible, and your hands are free again.","Parameters:
1. ?loc - cells

Preconditions:
```
(and
    (at-hero ?loc)
    (arm-free)
    (has-trap ?loc)
)
```

Effects:
```
(and
    (trap-disarmed ?loc)
    (not (has-trap ?loc))
)
```
","(:action place-on-table
    :parameters (?x - book)
    :precondition (holding ?x)
    :effect (and (not (holding ?x)) (accessible ?x) (hands-free) (on-table ?x))
)",
libraryworld,place-on-table,0.18069863319396973,Easy Negative (Inter-Domain Mismatch),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Picture a librarian holding a book. The 'place-on-table' action involves placing the held book onto the table. This action is feasible if the librarian is currently holding the book. Once placed, the book becomes accessible again, and the librarian's hands are free.

Action name: place-on-table


Your answer:

**Explanation:** 

Imagine you are a librarian holding a book in your hands, and you want to place it on a nearby table. The action ""place-on-table"" lets you do this. To make sure everything goes smoothly, there is a condition, called a ""precondition,"" that must be met before you can place the book on the table.

For the action ""place-on-table,"" let's break down what needs to be true before you can place the book on the table:

1. **You must be holding the book:** This means you have the book in your hands, ready to place it on the table.

Once this precondition is met, you can proceed with the ""place-on-table"" action. This action results in several changes, called ""effects,"" that update the status of the book and your hands:

1. **You are no longer holding the book:** This shows that you have placed the book on the table.
2. **The book becomes accessible:** Now that the book is on the table, it is easy to reach and pick up again if needed.
3. **Your hands are now free:** Since you have placed the book on the table, your hands are empty again.
4. **The book is on the table:** This indicates the new location of the book.

To summarize, the precondition ensures you are holding the book, making sure you are ready to place it on the table. The effects update the situation to show that you have placed the book on the table, it is now accessible, and your hands are free again.","Parameters:
1. ?from - cells
2. ?to - cells
3. ?s - swords

Preconditions:
```
(and
    (connected ?from ?to)
    (at-hero ?from)
    (has-monster ?to)
    (not (is-destroyed ?to))
    (not (has-trap ?from))
    (holding ?s)
)
```

Effects:
```
(and
    (at-hero ?to)
    (is-destroyed ?from)
    (not (at-hero ?from))
)
```
","(:action place-on-table
    :parameters (?x - book)
    :precondition (holding ?x)
    :effect (and (not (holding ?x)) (accessible ?x) (hands-free) (on-table ?x))
)",
libraryworld,place-on-table,0.09276842325925827,Easy Negative (Inter-Domain Mismatch),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Picture a librarian holding a book. The 'place-on-table' action involves placing the held book onto the table. This action is feasible if the librarian is currently holding the book. Once placed, the book becomes accessible again, and the librarian's hands are free.

Action name: place-on-table


Your answer:

**Explanation:** 

Imagine you are a librarian holding a book in your hands, and you want to place it on a nearby table. The action ""place-on-table"" lets you do this. To make sure everything goes smoothly, there is a condition, called a ""precondition,"" that must be met before you can place the book on the table.

For the action ""place-on-table,"" let's break down what needs to be true before you can place the book on the table:

1. **You must be holding the book:** This means you have the book in your hands, ready to place it on the table.

Once this precondition is met, you can proceed with the ""place-on-table"" action. This action results in several changes, called ""effects,"" that update the status of the book and your hands:

1. **You are no longer holding the book:** This shows that you have placed the book on the table.
2. **The book becomes accessible:** Now that the book is on the table, it is easy to reach and pick up again if needed.
3. **Your hands are now free:** Since you have placed the book on the table, your hands are empty again.
4. **The book is on the table:** This indicates the new location of the book.

To summarize, the precondition ensures you are holding the book, making sure you are ready to place it on the table. The effects update the situation to show that you have placed the book on the table, it is now accessible, and your hands are free again.","Parameters:
1. ?loc - cells
2. ?s - swords

Preconditions:
```
(and
    (at-hero ?loc)
    (holding ?s)
    (not (has-trap ?loc))
    (not (has-monster ?loc))
)
```

Effects:
```
(and
    (arm-free)
    (is-destroyed ?s)
    (not (holding ?s))
)
```
","(:action place-on-table
    :parameters (?x - book)
    :precondition (holding ?x)
    :effect (and (not (holding ?x)) (accessible ?x) (hands-free) (on-table ?x))
)",
libraryworld,place-on-table,0.14298784732818604,Easy Negative (Inter-Domain Mismatch),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Picture a librarian holding a book. The 'place-on-table' action involves placing the held book onto the table. This action is feasible if the librarian is currently holding the book. Once placed, the book becomes accessible again, and the librarian's hands are free.

Action name: place-on-table


Your answer:
","**Explanation:**

Imagine you're guiding a hero who just woke up in a mysterious dungeon. Each room can have different things: some are empty, others have monsters, some have traps, and a few might have swords. There's also a special room with an exit—our hero's goal.

Now, let's talk about the action called **move-to-trap**. This action involves our hero moving from one room (we'll call it ""Room A"") to another room (""Room B""), where, unfortunately, there's a trap waiting. Here's why each part of the plan (or action schema) makes sense:

1. **Connected Rooms**: Our hero can only move to a room directly connected to the one they're currently in. This is like being in your house and only being able to walk into rooms that have doors leading from where you are now.

2. **Hero's Current Location**: The hero must start in Room A to move to Room B. You can't move from a place if you're not actually there, right?

3. **Room B Not Destroyed**: The room our hero is moving to mustn't be already destroyed (or in ruins). It's like making sure the bridge you want to cross hasn't collapsed.

4. **Room A Doesn't Have a Trap**: It’s safer if the room our hero is leaving doesn't have a trap. Imagine trying to leave a room with a trap; it could activate and cause trouble!

5. **Room B Has a Trap**: Since the action is called **move-to-trap**, it specifically involves moving to a room with a trap, almost like knowing there's a puddle ahead but stepping into it anyway because it's the only path forward.

6. **Hero's Arm is Free**: This indicates that the hero isn’t holding anything like a sword. It’s important because handling traps might require free hands—think about needing your hands free to disarm or avoid a trap carefully.

When our hero completes this action, several things happen:
- **Hero is now in Room B**: Just like when you walk into another room, you’re no longer in the first room.
- **Room A is destroyed**: This could mean the hero leaves it in a way that no one can follow—maybe they close a heavy door that locks automatically.
- **Hero is no longer in Room A**: It confirms that the hero has completely left Room A.

This action is designed for specific situations in the dungeon where the hero might need to move strategically, even into risky areas, to navigate through the dungeon and eventually find the exit.
Parameters:
1. ?from - cells
2. ?to - cells

Preconditions:
```
(and
    (connected ?from ?to)
    (at-hero ?from)
    (not (is-destroyed ?to))
    (not (has-trap ?from))
    (has-trap ?to)
    (arm-free)
)
```

Effects:
```
(and
    (at-hero ?to)
    (is-destroyed ?from)
    (not (at-hero ?from))
)
```
","(:action place-on-table
    :parameters (?x - book)
    :precondition (holding ?x)
    :effect (and (not (holding ?x)) (accessible ?x) (hands-free) (on-table ?x))
)",
libraryworld,place-on-table,0.16679519414901733,Easy Negative (Inter-Domain Mismatch),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Picture a librarian holding a book. The 'place-on-table' action involves placing the held book onto the table. This action is feasible if the librarian is currently holding the book. Once placed, the book becomes accessible again, and the librarian's hands are free.

Action name: place-on-table


Your answer:
","**Explanation:**

Imagine our hero in a big, scary dungeon, just like a character from a fairy tale or a video game. The dungeon has several rooms, and some rooms are safe while others have monsters or traps. The hero's goal is to escape from this dungeon, moving from one room to another until he finds the exit.

Now, let's talk about the action called ""move"" that our hero can take. The action ""move"" lets the hero go from one room (we'll call this the ""current room"") to a connected room (let's call this the ""next room""). Think of the dungeon like a big house with many doors connecting the rooms; the hero can only move through a door if it’s open and the room on the other side is safe.

In the PDDL (a kind of programming language for planning what actions to take), the action ""move"" needs some conditions to be met before the hero can move:
1. **The rooms must be connected:** Just like you can't walk through a wall at home, the hero can only move to a room if there's a direct connection (like a doorway or a corridor).
2. **The hero must be in the current room:** The hero can only leave a room if he's actually in it.
3. **The current room shouldn’t have a trap that could hurt him.**
4. **The next room shouldn’t be destroyed:** The hero can't go into a room if it’s already been collapsed or destroyed (maybe from a previous adventure!).
5. **The next room shouldn’t have a trap or a monster:** This makes sure our hero doesn’t walk into new danger.

When the hero moves:
- **He is now in the next room:** Just like if you walk to another room in your house, you're then in that new room.
- **The room he left gets destroyed:** This might sound strange, but imagine if every time he left a room, the door magically closed and locked forever, so he can’t go back the same way.
- **He is no longer in the current room:** This is just confirming that he has moved on from the previous room.

These rules help our hero make smart moves through the dungeon, avoiding danger and making progress towards escape. This way of setting up the hero's actions makes sure he can navigate through the dungeon safely and eventually find his way out.
Parameters:
1. ?from - cells
2. ?to - cells

Preconditions:
```
(and
    (connected ?from ?to)
    (at-hero ?from)
    (not (has-trap ?from))
    (not (is-destroyed ?to))
    (not (has-trap ?to))
    (not (has-monster ?to))
)
```

Effects:
```
(and
    (at-hero ?to)
    (is-destroyed ?from)
    (not (at-hero ?from))
)
```
","(:action place-on-table
    :parameters (?x - book)
    :precondition (holding ?x)
    :effect (and (not (holding ?x)) (accessible ?x) (hands-free) (on-table ?x))
)",
libraryworld,place-on-table,0.211978942155838,Easy Negative (Inter-Domain Mismatch),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Picture a librarian holding a book. The 'place-on-table' action involves placing the held book onto the table. This action is feasible if the librarian is currently holding the book. Once placed, the book becomes accessible again, and the librarian's hands are free.

Action name: place-on-table


Your answer:
","**Explanation:**

Imagine you're helping a hero navigate through a tricky dungeon filled with different challenges. The hero's objective is to escape, but along the way, they might find useful items like swords that can help protect against monsters.

In our scenario, the action of picking up a sword is crucial. Let's think of it like this: if you enter a room and see a sword on the floor while your hands are free, you can pick it up. The action schema in PDDL, which is a way to represent planning problems, explains this in a structured format.

The preconditions for our action ""pick-sword"" are:
1. **The hero must be in the same room as the sword** (represented as `(at-hero ?loc)` and `(at-sword ?s ?loc)`). This makes sense because you can't pick up something that's not in the same room as you.
2. **The hero's hand must be free** (`(arm-free)`). Just like you can't hold two grocery bags in one hand easily, our hero needs a free hand to pick up the sword.

The effects after the hero picks up the sword are:
1. **The hero is now holding the sword** (`(holding ?s)`). This indicates that the hero has successfully picked up the sword.
2. **The sword is no longer in its original place** (`(not (at-sword ?s ?loc))`). Just like if you take an apple from a basket, the apple isn't in the basket anymore.
3. **The hero's hand is no longer free** (`(not (arm-free))`). Holding the sword means the hand that was free is now occupied.

This action schema is a simple way to model the interaction between the hero and the sword in the dungeon. It helps ensure that all necessary conditions are met before the action takes place, making the hero's journey through the dungeon logical and structured. This way, the hero doesn't magically have a sword without picking it up or has two items in one hand, which keeps our dungeon adventure realistic and understandable.
Parameters:
1. ?loc - cells
2. ?s - swords

Preconditions:
```
(and
    (at-hero ?loc)
    (at-sword ?s ?loc)
    (arm-free)
)
```

Effects:
```
(and
    (holding ?s)
    (not (at-sword ?s ?loc))
    (not (arm-free))
)
```
","(:action place-on-table
    :parameters (?x - book)
    :precondition (holding ?x)
    :effect (and (not (holding ?x)) (accessible ?x) (hands-free) (on-table ?x))
)",
libraryworld,place-on-table,0.09859811514616013,Easy Negative (Inter-Domain Mismatch),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Picture a librarian holding a book. The 'place-on-table' action involves placing the held book onto the table. This action is feasible if the librarian is currently holding the book. Once placed, the book becomes accessible again, and the librarian's hands are free.

Action name: place-on-table


Your answer:
","**Explanation:**

Imagine our hero in a dungeon, a place with rooms connected like a spider web. Each room can be just an empty space, or it might have something like a monster, a trap, or even a sword. Somewhere in this maze, there's a special room that has an exit—the ultimate goal for our hero.

Now, let's focus on a specific action our hero might need to take: **disarming a trap**. In our scenario, the hero finds themselves in a room with a trap. The action to disarm this trap is what we need to understand.

The action is named `disarm-trap`. This action, like any other, has specific requirements (preconditions) that must be met before the hero can perform it. These preconditions are:
1. **The hero must be in the same room as the trap.** This makes sense because you can't disarm a trap from another room. It's like needing to be in the kitchen to turn off a stove.
2. **The hero's hand must be free.** This means the hero can’t be holding anything, like a sword. It's a bit like needing both hands free to tie your shoes properly.
3. **There must actually be a trap in the room.** Obviously, the hero can't disarm a trap if there isn't one there!

If all these conditions are met, then the hero can go ahead and disarm the trap. The results (effects) of this action are:
1. **The trap in the room is disarmed.** This means the room is now safe from that trap.
2. **The trap is no longer considered to be in the room.** It's like cleaning up a spill; once it's cleaned, it's not there anymore.

By breaking down the action like this, we see how each condition helps ensure the action can be carried out safely and effectively. It’s just like following a recipe—each ingredient needs to be added at the right time for the dish to come out right!
Parameters:
1. ?loc - cells

Preconditions:
```
(and
    (at-hero ?loc)
    (arm-free)
    (has-trap ?loc)
)
```

Effects:
```
(and
    (trap-disarmed ?loc)
    (not (has-trap ?loc))
)
```
","(:action place-on-table
    :parameters (?x - book)
    :precondition (holding ?x)
    :effect (and (not (holding ?x)) (accessible ?x) (hands-free) (on-table ?x))
)",
libraryworld,place-on-table,0.23667368292808533,Easy Negative (Inter-Domain Mismatch),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Picture a librarian holding a book. The 'place-on-table' action involves placing the held book onto the table. This action is feasible if the librarian is currently holding the book. Once placed, the book becomes accessible again, and the librarian's hands are free.

Action name: place-on-table


Your answer:
","**Explanation:**

Let's imagine our hero in the dungeon scenario. The hero wakes up and finds themselves in a room, wanting to move to an adjacent room where, unfortunately, there's a monster. Here's how we translate this scenario into a set of instructions, or a 'domain model,' in planning language.

The action we're talking about is called ""move-to-monster."" This means our hero is trying to move from one room (let’s call it Room A) to another room (Room B) where there is a monster. To ensure this action can happen, there are certain conditions that need to be met (these are called 'preconditions') and certain outcomes that will happen as a result of the action (these are called 'effects').

1. **Preconditions**:
   - **Connected Rooms**: Room A and Room B must be connected by a corridor. This makes sense because our hero can't magically jump from one room to another; there must be a path.
   - **Hero's Current Location**: The hero must currently be in Room A. If the hero isn't there, they can't start moving from it!
   - **Monster Presence**: Room B must have a monster. After all, the action is specifically about moving to a room with a monster.
   - **Room Integrity**: Room B should not be destroyed. A destroyed room might mean it’s collapsed or inaccessible, so it's logical our hero can’t move into it.
   - **Safety in Room A**: Room A should not have a trap. This makes sure our hero is safe and able to move without getting caught in a trap.
   - **Armed Hero**: The hero must be holding a sword. It’s a dangerous task to move into a room with a monster, so having a sword means the hero is prepared for a fight.

2. **Effects**:
   - **Hero's New Location**: After the action, the hero will be in Room B. They've successfully moved.
   - **Change in Room A's Status**: Room A becomes 'destroyed.' This might represent that the room is no longer safe or viable after the hero leaves, maybe because of the haste in escaping or some mechanism triggered by the departure.
   - **Update Hero's Old Location**: The fact that the hero was in Room A is no longer true, which is updated in our model to reflect the hero’s new position.

This planning helps organize our thoughts and actions logically, ensuring every step is clear and all necessary precautions are taken. Think of it like giving someone directions with a checklist: ""Before you go there, make sure this, this, and this are true, and once you do, this and this will happen."" This ensures everyone knows what to expect and how to prepare! 
Parameters:
1. ?from - cells
2. ?to - cells
3. ?s - swords

Preconditions:
```
(and
    (connected ?from ?to)
    (at-hero ?from)
    (has-monster ?to)
    (not (is-destroyed ?to))
    (not (has-trap ?from))
    (holding ?s)
)
```

Effects:
```
(and
    (at-hero ?to)
    (is-destroyed ?from)
    (not (at-hero ?from))
)
```
","(:action place-on-table
    :parameters (?x - book)
    :precondition (holding ?x)
    :effect (and (not (holding ?x)) (accessible ?x) (hands-free) (on-table ?x))
)",
libraryworld,place-on-table,0.1307467818260193,Easy Negative (Inter-Domain Mismatch),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Picture a librarian holding a book. The 'place-on-table' action involves placing the held book onto the table. This action is feasible if the librarian is currently holding the book. Once placed, the book becomes accessible again, and the librarian's hands are free.

Action name: place-on-table


Your answer:
","**Explanation:**

Imagine you're helping a hero navigate a dungeon full of monsters and traps, a bit like playing a video game. Now, the hero has a sword, but in this part of the game, the hero decides to destroy the sword. To understand why certain conditions are checked before the hero can destroy the sword safely, let's break it down using the action ""destroy-sword"" from the game's rules (or in technical terms, the PDDL action schema).

Firstly, the hero needs to be in the same location as the sword. This makes sense, right? You can't throw something away or break it if it's not with you. So, the condition `(at-hero ?loc)` ensures that the hero is at the right spot to perform the action.

Secondly, the hero must be holding the sword. It’s similar to needing both hands on a bat to swing it; here, the hero needs to have the sword in hand to destroy it, checked by `(holding ?s)`.

But why check for no traps or monsters in the room? Think of it like trying to do something delicate, like assembling a model airplane, in a room with a loose tiger. Not a great idea, right? If there’s a monster in the room, destroying the sword might make the hero vulnerable to attack. Similarly, a trap could be triggered by the noise or movement, putting the hero in danger. So, `(not (has-trap ?loc))` and `(not (has-monster ?loc))` ensure that the environment is safe for the hero to break the sword without turning the situation worse.

Now, what happens after the sword is destroyed? The effect is that the hero’s hand is now free (`arm-free`), the sword is confirmed as destroyed (`is-destroyed ?s`), and the hero is no longer holding it (`not (holding ?s)`). It’s like cleaning up after finishing a task: put away the tools, clean up the mess, and free up your hands for the next task.

In simple terms, this action schema is like a set of instructions to make sure the hero does something risky (like destroying a sword) safely and responsibly, without making the dangerous dungeon situation even worse.
Parameters:
1. ?loc - cells
2. ?s - swords

Preconditions:
```
(and
    (at-hero ?loc)
    (holding ?s)
    (not (has-trap ?loc))
    (not (has-monster ?loc))
)
```

Effects:
```
(and
    (arm-free)
    (is-destroyed ?s)
    (not (holding ?s))
)
```
","(:action place-on-table
    :parameters (?x - book)
    :precondition (holding ?x)
    :effect (and (not (holding ?x)) (accessible ?x) (hands-free) (on-table ?x))
)",
libraryworld,place-on-table,0.7851869463920593,Semi-Hard Negative (Intra-Domain Mismatch),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Picture a librarian holding a book. The 'place-on-table' action involves placing the held book onto the table. This action is feasible if the librarian is currently holding the book. Once placed, the book becomes accessible again, and the librarian's hands are free.

Action name: place-on-table


Your answer:
","Parameters:
1. ?x - book
2. ?y - book
3. ?cat - category

Preconditions:
```
(and
    (on-shelf ?x ?y)
    (accessible ?x)
    (hands-free)
    (belongs-to-category ?x ?cat)
)
```

Effects:
```
(and
    (holding ?x)
    (accessible ?y)
    (not (accessible ?x))
    (not (hands-free))
    (not (on-shelf ?x ?y))
    (shelf-empty ?cat)
)
```
","(:action place-on-table
    :parameters (?x - book)
    :precondition (holding ?x)
    :effect (and (not (holding ?x)) (accessible ?x) (hands-free) (on-table ?x))
)",
libraryworld,place-on-table,0.697905421257019,Semi-Hard Negative (Intra-Domain Mismatch),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Picture a librarian holding a book. The 'place-on-table' action involves placing the held book onto the table. This action is feasible if the librarian is currently holding the book. Once placed, the book becomes accessible again, and the librarian's hands are free.

Action name: place-on-table


Your answer:
","Parameters:
1. ?x - book

Preconditions:
```
(and
    (accessible ?x)
    (not (checked-out ?x))
)
```

Effects:
```
(and
    (checked-out ?x)
    (not (accessible ?x))
    (book-request ?x)
    (return-due ?x)
)
```
","(:action place-on-table
    :parameters (?x - book)
    :precondition (holding ?x)
    :effect (and (not (holding ?x)) (accessible ?x) (hands-free) (on-table ?x))
)",
libraryworld,place-on-table,0.4014960527420044,Semi-Hard Negative (Intra-Domain Mismatch),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Picture a librarian holding a book. The 'place-on-table' action involves placing the held book onto the table. This action is feasible if the librarian is currently holding the book. Once placed, the book becomes accessible again, and the librarian's hands are free.

Action name: place-on-table


Your answer:
","Parameters:
1. ?x - book

Preconditions:
```
(and
    (checked-out ?x)
    (holding ?x)
)
```

Effects:
```
(and
    (not (checked-out ?x))
    (not (holding ?x))
    (not (book-request ?x))
    (not (return-due ?x))
    (accessible ?x)
    (hands-free)
)
```
","(:action place-on-table
    :parameters (?x - book)
    :precondition (holding ?x)
    :effect (and (not (holding ?x)) (accessible ?x) (hands-free) (on-table ?x))
)",
libraryworld,place-on-table,0.6028046607971191,Semi-Hard Negative (Intra-Domain Mismatch),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Picture a librarian holding a book. The 'place-on-table' action involves placing the held book onto the table. This action is feasible if the librarian is currently holding the book. Once placed, the book becomes accessible again, and the librarian's hands are free.

Action name: place-on-table


Your answer:
","Parameters:
1. ?x - book

Preconditions:
```
(and
    (accessible ?x)
    (on-table ?x)
    (hands-free)
)
```

Effects:
```
(and
    (not (on-table ?x))
    (not (accessible ?x))
    (not (hands-free))
    (holding ?x)
)
```
","(:action place-on-table
    :parameters (?x - book)
    :precondition (holding ?x)
    :effect (and (not (holding ?x)) (accessible ?x) (hands-free) (on-table ?x))
)",
libraryworld,place-on-table,0.8817847967147827,Semi-Hard Negative (Intra-Domain Mismatch),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Picture a librarian holding a book. The 'place-on-table' action involves placing the held book onto the table. This action is feasible if the librarian is currently holding the book. Once placed, the book becomes accessible again, and the librarian's hands are free.

Action name: place-on-table


Your answer:
","Parameters:
1. ?x - book
2. ?y - book
3. ?cat - category

Preconditions:
```
(and
    (holding ?x)
    (accessible ?y)
    (belongs-to-category ?x ?cat)
    (not (shelf-overflow ?cat))
)
```

Effects:
```
(and
    (not (holding ?x))
    (not (accessible ?y))
    (accessible ?x)
    (hands-free)
    (on-shelf ?x ?y)
    (shelf-empty ?cat)
)
```
","(:action place-on-table
    :parameters (?x - book)
    :precondition (holding ?x)
    :effect (and (not (holding ?x)) (accessible ?x) (hands-free) (on-table ?x))
)",
libraryworld,place-on-table,0.7851869463920593,Semi-Hard Negative (Intra-Domain Mismatch),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Picture a librarian holding a book. The 'place-on-table' action involves placing the held book onto the table. This action is feasible if the librarian is currently holding the book. Once placed, the book becomes accessible again, and the librarian's hands are free.

Action name: place-on-table


Your answer:

**Explanation:** 

Imagine you are a librarian holding a book in your hands, and you want to place it on a nearby table. The action ""place-on-table"" lets you do this. To make sure everything goes smoothly, there is a condition, called a ""precondition,"" that must be met before you can place the book on the table.

For the action ""place-on-table,"" let's break down what needs to be true before you can place the book on the table:

1. **You must be holding the book:** This means you have the book in your hands, ready to place it on the table.

Once this precondition is met, you can proceed with the ""place-on-table"" action. This action results in several changes, called ""effects,"" that update the status of the book and your hands:

1. **You are no longer holding the book:** This shows that you have placed the book on the table.
2. **The book becomes accessible:** Now that the book is on the table, it is easy to reach and pick up again if needed.
3. **Your hands are now free:** Since you have placed the book on the table, your hands are empty again.
4. **The book is on the table:** This indicates the new location of the book.

To summarize, the precondition ensures you are holding the book, making sure you are ready to place it on the table. The effects update the situation to show that you have placed the book on the table, it is now accessible, and your hands are free again.","Parameters:
1. ?x - book
2. ?y - book
3. ?cat - category

Preconditions:
```
(and
    (on-shelf ?x ?y)
    (accessible ?x)
    (hands-free)
    (belongs-to-category ?x ?cat)
)
```

Effects:
```
(and
    (holding ?x)
    (accessible ?y)
    (not (accessible ?x))
    (not (hands-free))
    (not (on-shelf ?x ?y))
    (shelf-empty ?cat)
)
```
","(:action place-on-table
    :parameters (?x - book)
    :precondition (holding ?x)
    :effect (and (not (holding ?x)) (accessible ?x) (hands-free) (on-table ?x))
)",
libraryworld,place-on-table,0.697905421257019,Semi-Hard Negative (Intra-Domain Mismatch),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Picture a librarian holding a book. The 'place-on-table' action involves placing the held book onto the table. This action is feasible if the librarian is currently holding the book. Once placed, the book becomes accessible again, and the librarian's hands are free.

Action name: place-on-table


Your answer:

**Explanation:** 

Imagine you are a librarian holding a book in your hands, and you want to place it on a nearby table. The action ""place-on-table"" lets you do this. To make sure everything goes smoothly, there is a condition, called a ""precondition,"" that must be met before you can place the book on the table.

For the action ""place-on-table,"" let's break down what needs to be true before you can place the book on the table:

1. **You must be holding the book:** This means you have the book in your hands, ready to place it on the table.

Once this precondition is met, you can proceed with the ""place-on-table"" action. This action results in several changes, called ""effects,"" that update the status of the book and your hands:

1. **You are no longer holding the book:** This shows that you have placed the book on the table.
2. **The book becomes accessible:** Now that the book is on the table, it is easy to reach and pick up again if needed.
3. **Your hands are now free:** Since you have placed the book on the table, your hands are empty again.
4. **The book is on the table:** This indicates the new location of the book.

To summarize, the precondition ensures you are holding the book, making sure you are ready to place it on the table. The effects update the situation to show that you have placed the book on the table, it is now accessible, and your hands are free again.","Parameters:
1. ?x - book

Preconditions:
```
(and
    (accessible ?x)
    (not (checked-out ?x))
)
```

Effects:
```
(and
    (checked-out ?x)
    (not (accessible ?x))
    (book-request ?x)
    (return-due ?x)
)
```
","(:action place-on-table
    :parameters (?x - book)
    :precondition (holding ?x)
    :effect (and (not (holding ?x)) (accessible ?x) (hands-free) (on-table ?x))
)",
libraryworld,place-on-table,0.4014960527420044,Semi-Hard Negative (Intra-Domain Mismatch),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Picture a librarian holding a book. The 'place-on-table' action involves placing the held book onto the table. This action is feasible if the librarian is currently holding the book. Once placed, the book becomes accessible again, and the librarian's hands are free.

Action name: place-on-table


Your answer:

**Explanation:** 

Imagine you are a librarian holding a book in your hands, and you want to place it on a nearby table. The action ""place-on-table"" lets you do this. To make sure everything goes smoothly, there is a condition, called a ""precondition,"" that must be met before you can place the book on the table.

For the action ""place-on-table,"" let's break down what needs to be true before you can place the book on the table:

1. **You must be holding the book:** This means you have the book in your hands, ready to place it on the table.

Once this precondition is met, you can proceed with the ""place-on-table"" action. This action results in several changes, called ""effects,"" that update the status of the book and your hands:

1. **You are no longer holding the book:** This shows that you have placed the book on the table.
2. **The book becomes accessible:** Now that the book is on the table, it is easy to reach and pick up again if needed.
3. **Your hands are now free:** Since you have placed the book on the table, your hands are empty again.
4. **The book is on the table:** This indicates the new location of the book.

To summarize, the precondition ensures you are holding the book, making sure you are ready to place it on the table. The effects update the situation to show that you have placed the book on the table, it is now accessible, and your hands are free again.","Parameters:
1. ?x - book

Preconditions:
```
(and
    (checked-out ?x)
    (holding ?x)
)
```

Effects:
```
(and
    (not (checked-out ?x))
    (not (holding ?x))
    (not (book-request ?x))
    (not (return-due ?x))
    (accessible ?x)
    (hands-free)
)
```
","(:action place-on-table
    :parameters (?x - book)
    :precondition (holding ?x)
    :effect (and (not (holding ?x)) (accessible ?x) (hands-free) (on-table ?x))
)",
libraryworld,place-on-table,0.6028046607971191,Semi-Hard Negative (Intra-Domain Mismatch),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Picture a librarian holding a book. The 'place-on-table' action involves placing the held book onto the table. This action is feasible if the librarian is currently holding the book. Once placed, the book becomes accessible again, and the librarian's hands are free.

Action name: place-on-table


Your answer:

**Explanation:** 

Imagine you are a librarian holding a book in your hands, and you want to place it on a nearby table. The action ""place-on-table"" lets you do this. To make sure everything goes smoothly, there is a condition, called a ""precondition,"" that must be met before you can place the book on the table.

For the action ""place-on-table,"" let's break down what needs to be true before you can place the book on the table:

1. **You must be holding the book:** This means you have the book in your hands, ready to place it on the table.

Once this precondition is met, you can proceed with the ""place-on-table"" action. This action results in several changes, called ""effects,"" that update the status of the book and your hands:

1. **You are no longer holding the book:** This shows that you have placed the book on the table.
2. **The book becomes accessible:** Now that the book is on the table, it is easy to reach and pick up again if needed.
3. **Your hands are now free:** Since you have placed the book on the table, your hands are empty again.
4. **The book is on the table:** This indicates the new location of the book.

To summarize, the precondition ensures you are holding the book, making sure you are ready to place it on the table. The effects update the situation to show that you have placed the book on the table, it is now accessible, and your hands are free again.","Parameters:
1. ?x - book

Preconditions:
```
(and
    (accessible ?x)
    (on-table ?x)
    (hands-free)
)
```

Effects:
```
(and
    (not (on-table ?x))
    (not (accessible ?x))
    (not (hands-free))
    (holding ?x)
)
```
","(:action place-on-table
    :parameters (?x - book)
    :precondition (holding ?x)
    :effect (and (not (holding ?x)) (accessible ?x) (hands-free) (on-table ?x))
)",
libraryworld,place-on-table,0.8817847967147827,Semi-Hard Negative (Intra-Domain Mismatch),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Picture a librarian holding a book. The 'place-on-table' action involves placing the held book onto the table. This action is feasible if the librarian is currently holding the book. Once placed, the book becomes accessible again, and the librarian's hands are free.

Action name: place-on-table


Your answer:

**Explanation:** 

Imagine you are a librarian holding a book in your hands, and you want to place it on a nearby table. The action ""place-on-table"" lets you do this. To make sure everything goes smoothly, there is a condition, called a ""precondition,"" that must be met before you can place the book on the table.

For the action ""place-on-table,"" let's break down what needs to be true before you can place the book on the table:

1. **You must be holding the book:** This means you have the book in your hands, ready to place it on the table.

Once this precondition is met, you can proceed with the ""place-on-table"" action. This action results in several changes, called ""effects,"" that update the status of the book and your hands:

1. **You are no longer holding the book:** This shows that you have placed the book on the table.
2. **The book becomes accessible:** Now that the book is on the table, it is easy to reach and pick up again if needed.
3. **Your hands are now free:** Since you have placed the book on the table, your hands are empty again.
4. **The book is on the table:** This indicates the new location of the book.

To summarize, the precondition ensures you are holding the book, making sure you are ready to place it on the table. The effects update the situation to show that you have placed the book on the table, it is now accessible, and your hands are free again.","Parameters:
1. ?x - book
2. ?y - book
3. ?cat - category

Preconditions:
```
(and
    (holding ?x)
    (accessible ?y)
    (belongs-to-category ?x ?cat)
    (not (shelf-overflow ?cat))
)
```

Effects:
```
(and
    (not (holding ?x))
    (not (accessible ?y))
    (accessible ?x)
    (hands-free)
    (on-shelf ?x ?y)
    (shelf-empty ?cat)
)
```
","(:action place-on-table
    :parameters (?x - book)
    :precondition (holding ?x)
    :effect (and (not (holding ?x)) (accessible ?x) (hands-free) (on-table ?x))
)",
libraryworld,place-on-table,0.7177783846855164,Semi-Hard Negative (Intra-Domain Mismatch),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Picture a librarian holding a book. The 'place-on-table' action involves placing the held book onto the table. This action is feasible if the librarian is currently holding the book. Once placed, the book becomes accessible again, and the librarian's hands are free.

Action name: place-on-table


Your answer:
","**Explanation:** 

Imagine you are a librarian in a library, and you need to take a book off the shelf. This book is placed on top of another book. The action ""remove-from-shelf"" lets you take the top book off the shelf. To do this, certain conditions, called ""preconditions,"" must be met to make sure you can successfully take the book.

For the action ""remove-from-shelf,"" let's break down what needs to be true before you can take the book off the shelf:

1. **The book must be on the shelf:** This means the book you want to take is on top of another book on the shelf.
2. **The book must be accessible:** This means the book isn't covered by other books or objects, so you can easily reach it.
3. **Your hands must be free:** You need to have empty hands to pick up the book, meaning you aren't already holding something else.
4. **The book must belong to a certain category:** This helps you know which book you are taking and ensures you are organizing the books properly.

Once these preconditions are met, you can proceed with the ""remove-from-shelf"" action. This action results in several changes, called ""effects,"" that update the status of the books and your hands:

1. **You are now holding the book:** This indicates you have picked up the book from the shelf.
2. **The book underneath becomes accessible:** Since you have removed the top book, the book underneath is now easy to reach.
3. **The book you removed is no longer accessible:** Because you are holding the book, it's not available on the shelf anymore.
4. **Your hands are no longer free:** Since you are now holding the book, your hands are occupied.
5. **The book is no longer on the shelf:** This shows that the book has been taken off the shelf.
6. **The shelf is now empty for that category:** This helps keep track of the shelf space and organization.

To summarize, the preconditions ensure the book is on the shelf, accessible, your hands are free, and you know which category the book belongs to. The effects update the situation to show you are holding the book, the book underneath is now accessible, and the shelf is empty for that category.
Parameters:
1. ?x - book
2. ?y - book
3. ?cat - category

Preconditions:
```
(and
    (on-shelf ?x ?y)
    (accessible ?x)
    (hands-free)
    (belongs-to-category ?x ?cat)
)
```

Effects:
```
(and
    (holding ?x)
    (accessible ?y)
    (not (accessible ?x))
    (not (hands-free))
    (not (on-shelf ?x ?y))
    (shelf-empty ?cat)
)
```
","(:action place-on-table
    :parameters (?x - book)
    :precondition (holding ?x)
    :effect (and (not (holding ?x)) (accessible ?x) (hands-free) (on-table ?x))
)",
libraryworld,place-on-table,0.6450091600418091,Semi-Hard Negative (Intra-Domain Mismatch),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Picture a librarian holding a book. The 'place-on-table' action involves placing the held book onto the table. This action is feasible if the librarian is currently holding the book. Once placed, the book becomes accessible again, and the librarian's hands are free.

Action name: place-on-table


Your answer:
","**Explanation:** 

Imagine a librarian in a library who helps patrons borrow books. When a patron wants to borrow a book, the librarian needs to make sure certain conditions are met before they can check the book out. These conditions are called ""preconditions.""

For the action ""check-out,"" let's think about what needs to be true before the librarian can let the patron borrow the book:

1. **The book must be accessible:** This means the book is not covered by other books or objects, making it easy for the librarian to pick up. If the book isn't accessible, the librarian can't reach it to check it out.
2. **The book must not be already checked out:** If the book is already checked out to someone else, it can't be borrowed by another patron until it's returned.

Once these preconditions are met, the librarian can proceed with the check-out action. The action results in several changes, called ""effects,"" that update the status of the book:

1. **The book is marked as checked out:** This indicates that the book is now borrowed and can't be checked out by another patron until it's returned.
2. **The book is no longer accessible:** Since the book is borrowed, it's no longer available on the shelf for others to take.
3. **There is a request for the book:** This keeps track of the borrowing transaction.
4. **A return due date is set:** This helps the library know when to expect the book back.

To summarize, the preconditions ensure the librarian can access the book and that it isn't already borrowed. The effects update the system to show the book is now checked out, not accessible, and has a return due date.
Parameters:
1. ?x - book

Preconditions:
```
(and
    (accessible ?x)
    (not (checked-out ?x))
)
```

Effects:
```
(and
    (checked-out ?x)
    (not (accessible ?x))
    (book-request ?x)
    (return-due ?x)
)
```
","(:action place-on-table
    :parameters (?x - book)
    :precondition (holding ?x)
    :effect (and (not (holding ?x)) (accessible ?x) (hands-free) (on-table ?x))
)",
libraryworld,place-on-table,0.6513895988464355,Semi-Hard Negative (Intra-Domain Mismatch),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Picture a librarian holding a book. The 'place-on-table' action involves placing the held book onto the table. This action is feasible if the librarian is currently holding the book. Once placed, the book becomes accessible again, and the librarian's hands are free.

Action name: place-on-table


Your answer:
","**Explanation:** 

Imagine a patron is returning a borrowed book to the library. The librarian needs to process this return to update the book's status and remove any return due date. The action ""return-book"" describes how the librarian can do this. There are specific conditions, called ""preconditions,"" that must be met to ensure the return can be processed correctly.

For the action ""return-book,"" let's break down what needs to be true before the librarian can return the book:

1. **The book must be checked out:** This means the book is currently borrowed by someone and needs to be returned.
2. **The librarian must be holding the book:** This indicates the librarian has the book in their hands, ready to process the return.

Once these preconditions are met, the librarian can proceed with the ""return-book"" action. This action results in several changes, called ""effects,"" that update the status of the book and the librarian's hands:

1. **The book is no longer checked out:** This shows that the book has been returned and is available for borrowing again.
2. **The librarian is no longer holding the book:** This indicates the librarian has processed the return and placed the book back in its proper place.
3. **Any request for the book is removed:** If there was a request for this book, it is no longer needed since the book is now available.
4. **The return due date is removed:** This updates the system to show that the book is no longer due for return.
5. **The book becomes accessible:** Now that the book is back in the library, it is easy to find and borrow again.
6. **The librarian's hands are now free:** Since the librarian has finished processing the return, their hands are empty and ready for the next task.

To summarize, the preconditions ensure the book is currently borrowed and the librarian has it in their hands, ready to return. The effects update the situation to show that the book is no longer checked out, any requests and due dates are removed, the book is accessible again, and the librarian's hands are free.
Parameters:
1. ?x - book

Preconditions:
```
(and
    (checked-out ?x)
    (holding ?x)
)
```

Effects:
```
(and
    (not (checked-out ?x))
    (not (holding ?x))
    (not (book-request ?x))
    (not (return-due ?x))
    (accessible ?x)
    (hands-free)
)
```
","(:action place-on-table
    :parameters (?x - book)
    :precondition (holding ?x)
    :effect (and (not (holding ?x)) (accessible ?x) (hands-free) (on-table ?x))
)",
libraryworld,place-on-table,0.5846755504608154,Semi-Hard Negative (Intra-Domain Mismatch),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Picture a librarian holding a book. The 'place-on-table' action involves placing the held book onto the table. This action is feasible if the librarian is currently holding the book. Once placed, the book becomes accessible again, and the librarian's hands are free.

Action name: place-on-table


Your answer:
","**Explanation:** 

Imagine you're a librarian in a library, and there's a table full of books that need to be sorted. You want to pick up one of these books. To do this, certain conditions, called ""preconditions,"" must be met to ensure you can successfully pick up the book.

For the action ""take-from-table,"" let's break down what needs to be true before you can pick up a book:

1. **The book must be accessible:** This means the book isn't covered by other books or objects, so you can easily reach it.
2. **The book must be on the table:** This indicates the book is physically located on the table, not somewhere else like a shelf.
3. **Your hands must be free:** You need to have empty hands to pick up the book, meaning you aren't already holding something else.

Once these preconditions are met, you can proceed with the ""take-from-table"" action. This action results in several changes, called ""effects,"" that update the status of the book and your hands:

1. **The book is no longer on the table:** This indicates you've picked up the book from the table.
2. **The book is no longer accessible:** Since you're holding the book, it's not available for someone else to pick up from the table.
3. **Your hands are no longer free:** Because you're now holding the book, your hands are occupied.
4. **You are holding the book:** This shows that the book is now in your hands.

To summarize, the preconditions ensure you can reach the book, it's on the table, and your hands are free to pick it up. The effects update the situation to reflect that the book is now in your hands and no longer on the table or accessible to others.
Parameters:
1. ?x - book

Preconditions:
```
(and
    (accessible ?x)
    (on-table ?x)
    (hands-free)
)
```

Effects:
```
(and
    (not (on-table ?x))
    (not (accessible ?x))
    (not (hands-free))
    (holding ?x)
)
```
","(:action place-on-table
    :parameters (?x - book)
    :precondition (holding ?x)
    :effect (and (not (holding ?x)) (accessible ?x) (hands-free) (on-table ?x))
)",
libraryworld,place-on-table,0.7562538981437683,Semi-Hard Negative (Intra-Domain Mismatch),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Picture a librarian holding a book. The 'place-on-table' action involves placing the held book onto the table. This action is feasible if the librarian is currently holding the book. Once placed, the book becomes accessible again, and the librarian's hands are free.

Action name: place-on-table


Your answer:
","**Explanation:** 

Imagine you are a librarian standing near a shelf, holding a book in your hands. You want to place this book on top of another book that is already on the shelf. This action, called ""place-on-shelf,"" needs to follow certain rules, called ""preconditions,"" to make sure everything goes smoothly.

For the action ""place-on-shelf,"" let's break down what needs to be true before you can place the book on the shelf:

1. **You must be holding the book:** This means you have the book in your hands, ready to place it on the shelf.
2. **The book on the shelf must be accessible:** The book already on the shelf should not be covered by other books or objects, so you can easily place your book on top of it.
3. **The book you are holding must belong to a certain category:** This helps in organizing the books properly according to their categories.
4. **The shelf should not be overflowing:** There should be enough space on the shelf to place another book.

Once these preconditions are met, you can proceed with the ""place-on-shelf"" action. This action results in several changes, called ""effects,"" that update the status of the books and your hands:

1. **You are no longer holding the book:** This shows that you have placed the book on the shelf.
2. **The book on the shelf is no longer accessible:** Because the new book is now on top of it, making it covered.
3. **The book you placed is now accessible:** This indicates the book you just placed is easy to reach.
4. **Your hands are now free:** Since you have placed the book on the shelf, your hands are empty again.
5. **The new book is on the shelf on top of the other book:** This shows the new book's position.
6. **The shelf is now considered empty for that category:** This helps in tracking the organization and availability of shelf space for that category.

To summarize, the preconditions ensure you are holding the book, the shelf has space, and the book on the shelf is accessible. The effects update the situation to show that you have placed the book on the shelf, the new book is accessible, and your hands are free again.
Parameters:
1. ?x - book
2. ?y - book
3. ?cat - category

Preconditions:
```
(and
    (holding ?x)
    (accessible ?y)
    (belongs-to-category ?x ?cat)
    (not (shelf-overflow ?cat))
)
```

Effects:
```
(and
    (not (holding ?x))
    (not (accessible ?y))
    (accessible ?x)
    (hands-free)
    (on-shelf ?x ?y)
    (shelf-empty ?cat)
)
```
","(:action place-on-table
    :parameters (?x - book)
    :precondition (holding ?x)
    :effect (and (not (holding ?x)) (accessible ?x) (hands-free) (on-table ?x))
)",
libraryworld,place-on-table,0.253551185131073,Hard Negative (Manipulated Action),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Picture a librarian holding a book. The 'place-on-table' action involves placing the held book onto the table. This action is feasible if the librarian is currently holding the book. Once placed, the book becomes accessible again, and the librarian's hands are free.

Action name: place-on-table


Your answer:
","Parameters:
1. ?x - book

Preconditions:
```
(not (holding ?x))
```

Effects:
```
(and
    (not (holding ?x))
    (accessible ?x)
    (hands-free)
    (on-table ?x)
)
```
","(:action place-on-table
    :parameters (?x - book)
    :precondition (holding ?x)
    :effect (and (not (holding ?x)) (accessible ?x) (hands-free) (on-table ?x))
)","negate (holding ?x) in preconditions
"
libraryworld,place-on-table,0.15558494627475739,Hard Negative (Manipulated Action),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Picture a librarian holding a book. The 'place-on-table' action involves placing the held book onto the table. This action is feasible if the librarian is currently holding the book. Once placed, the book becomes accessible again, and the librarian's hands are free.

Action name: place-on-table


Your answer:
","Parameters:
1. ?x - book

Preconditions:
```
(not (holding ?x))
```

Effects:
```
(and
    (holding ?x)
    (hands-free)
    (on-table ?x)
)
```
","(:action place-on-table
    :parameters (?x - book)
    :precondition (holding ?x)
    :effect (and (not (holding ?x)) (accessible ?x) (hands-free) (on-table ?x))
)","swap (holding ?x) with (not (holding ?x))
remove (accessible ?x) from effects
"
libraryworld,place-on-table,0.2731609344482422,Hard Negative (Manipulated Action),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Picture a librarian holding a book. The 'place-on-table' action involves placing the held book onto the table. This action is feasible if the librarian is currently holding the book. Once placed, the book becomes accessible again, and the librarian's hands are free.

Action name: place-on-table


Your answer:
","Parameters:
1. ?x - book

Preconditions:
```
(accessible ?x)
```

Effects:
```
(and
    (holding ?x)
    (holding ?x)
    (hands-free)
    (on-table ?x)
)
```
","(:action place-on-table
    :parameters (?x - book)
    :precondition (holding ?x)
    :effect (and (not (holding ?x)) (accessible ?x) (hands-free) (on-table ?x))
)","swap (holding ?x) with (accessible ?x)
negate (not (holding ?x)) in effects
"
libraryworld,place-on-table,0.2580548822879791,Hard Negative (Manipulated Action),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Picture a librarian holding a book. The 'place-on-table' action involves placing the held book onto the table. This action is feasible if the librarian is currently holding the book. Once placed, the book becomes accessible again, and the librarian's hands are free.

Action name: place-on-table


Your answer:
","Parameters:
1. ?x - book

Preconditions:
```
(holding ?x)
```

Effects:
```
(and
    (not (holding ?x))
    (accessible ?x)
    (on-table ?x)
)
```
","(:action place-on-table
    :parameters (?x - book)
    :precondition (holding ?x)
    :effect (and (not (holding ?x)) (accessible ?x) (hands-free) (on-table ?x))
)","remove (hands-free) from effects
"
libraryworld,place-on-table,0.15558494627475739,Hard Negative (Manipulated Action),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Picture a librarian holding a book. The 'place-on-table' action involves placing the held book onto the table. This action is feasible if the librarian is currently holding the book. Once placed, the book becomes accessible again, and the librarian's hands are free.

Action name: place-on-table


Your answer:
","Parameters:
1. ?x - book

Preconditions:
```
(not (holding ?x))
```

Effects:
```
(and
    (holding ?x)
    (hands-free)
    (on-table ?x)
)
```
","(:action place-on-table
    :parameters (?x - book)
    :precondition (holding ?x)
    :effect (and (not (holding ?x)) (accessible ?x) (hands-free) (on-table ?x))
)","remove (accessible ?x) from effects
swap (holding ?x) with (not (holding ?x))
"
libraryworld,place-on-table,0.253551185131073,Hard Negative (Manipulated Action),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Picture a librarian holding a book. The 'place-on-table' action involves placing the held book onto the table. This action is feasible if the librarian is currently holding the book. Once placed, the book becomes accessible again, and the librarian's hands are free.

Action name: place-on-table


Your answer:
","Parameters:
1. ?x - book

Preconditions:
```
(not (holding ?x))
```

Effects:
```
(and
    (not (holding ?x))
    (accessible ?x)
    (hands-free)
    (on-table ?x)
)
```
","(:action place-on-table
    :parameters (?x - book)
    :precondition (holding ?x)
    :effect (and (not (holding ?x)) (accessible ?x) (hands-free) (on-table ?x))
)","negate (holding ?x) in preconditions
"
libraryworld,place-on-table,0.07965445518493652,Hard Negative (Manipulated Action),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Picture a librarian holding a book. The 'place-on-table' action involves placing the held book onto the table. This action is feasible if the librarian is currently holding the book. Once placed, the book becomes accessible again, and the librarian's hands are free.

Action name: place-on-table


Your answer:
","Parameters:
1. ?x - book

Preconditions:
```
(hands-free)
```

Effects:
```
(and
    (holding ?x)
    (not (holding ?x))
    (on-table ?x)
)
```
","(:action place-on-table
    :parameters (?x - book)
    :precondition (holding ?x)
    :effect (and (not (holding ?x)) (accessible ?x) (hands-free) (on-table ?x))
)","swap (holding ?x) with (hands-free)
remove (accessible ?x) from effects
"
libraryworld,place-on-table,0.06574904918670654,Hard Negative (Manipulated Action),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Picture a librarian holding a book. The 'place-on-table' action involves placing the held book onto the table. This action is feasible if the librarian is currently holding the book. Once placed, the book becomes accessible again, and the librarian's hands are free.

Action name: place-on-table


Your answer:
","Parameters:
1. ?x - book

Preconditions:
```
(not (holding ?x))
```

Effects:
```
(and
    (not (holding ?x))
    (accessible ?x)
    (on-table ?x)
)
```
","(:action place-on-table
    :parameters (?x - book)
    :precondition (holding ?x)
    :effect (and (not (holding ?x)) (accessible ?x) (hands-free) (on-table ?x))
)","remove (hands-free) from effects
negate (holding ?x) in preconditions
"
libraryworld,place-on-table,0.22442281246185303,Hard Negative (Manipulated Action),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Picture a librarian holding a book. The 'place-on-table' action involves placing the held book onto the table. This action is feasible if the librarian is currently holding the book. Once placed, the book becomes accessible again, and the librarian's hands are free.

Action name: place-on-table


Your answer:
","Parameters:
1. ?x - book

Preconditions:
```
(on-table ?x)
```

Effects:
```
(and
    (holding ?x)
    (accessible ?x)
    (hands-free)
)
```
","(:action place-on-table
    :parameters (?x - book)
    :precondition (holding ?x)
    :effect (and (not (holding ?x)) (accessible ?x) (hands-free) (on-table ?x))
)","swap (holding ?x) with (on-table ?x)
remove (not (holding ?x)) from effects
"
libraryworld,place-on-table,0.09804584085941315,Hard Negative (Manipulated Action),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Picture a librarian holding a book. The 'place-on-table' action involves placing the held book onto the table. This action is feasible if the librarian is currently holding the book. Once placed, the book becomes accessible again, and the librarian's hands are free.

Action name: place-on-table


Your answer:
","Parameters:
1. ?x - book

Preconditions:
```
(holding ?x)
```

Effects:
```
(and
    (not (on-table ?x))
    (not (holding ?x))
    (accessible ?x)
    (hands-free)
)
```
","(:action place-on-table
    :parameters (?x - book)
    :precondition (holding ?x)
    :effect (and (not (holding ?x)) (accessible ?x) (hands-free) (on-table ?x))
)","negate (on-table ?x) in effects
"
libraryworld,place-on-table,0.15922380983829498,Hard Negative (Manipulated Action),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Picture a librarian holding a book. The 'place-on-table' action involves placing the held book onto the table. This action is feasible if the librarian is currently holding the book. Once placed, the book becomes accessible again, and the librarian's hands are free.

Action name: place-on-table


Your answer:

**Explanation:** 

Imagine you are a librarian holding a book in your hands, and you want to place it on a nearby table. The action ""place-on-table"" lets you do this. To make sure everything goes smoothly, there is a condition, called a ""precondition,"" that must be met before you can place the book on the table.

For the action ""place-on-table,"" let's break down what needs to be true before you can place the book on the table:

1. **You must be holding the book:** This means you have the book in your hands, ready to place it on the table.

Once this precondition is met, you can proceed with the ""place-on-table"" action. This action results in several changes, called ""effects,"" that update the status of the book and your hands:

1. **You are no longer holding the book:** This shows that you have placed the book on the table.
2. **The book becomes accessible:** Now that the book is on the table, it is easy to reach and pick up again if needed.
3. **Your hands are now free:** Since you have placed the book on the table, your hands are empty again.
4. **The book is on the table:** This indicates the new location of the book.

To summarize, the precondition ensures you are holding the book, making sure you are ready to place it on the table. The effects update the situation to show that you have placed the book on the table, it is now accessible, and your hands are free again.","Parameters:
1. ?x - book

Preconditions:
```
(not (holding ?x))
```

Effects:
```
(and
    (accessible ?x)
    (hands-free)
    (on-table ?x)
)
```
","(:action place-on-table
    :parameters (?x - book)
    :precondition (holding ?x)
    :effect (and (not (holding ?x)) (accessible ?x) (hands-free) (on-table ?x))
)","remove (not (holding ?x)) from effects
negate (holding ?x) in preconditions
"
libraryworld,place-on-table,0.10923950374126434,Hard Negative (Manipulated Action),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Picture a librarian holding a book. The 'place-on-table' action involves placing the held book onto the table. This action is feasible if the librarian is currently holding the book. Once placed, the book becomes accessible again, and the librarian's hands are free.

Action name: place-on-table


Your answer:

**Explanation:** 

Imagine you are a librarian holding a book in your hands, and you want to place it on a nearby table. The action ""place-on-table"" lets you do this. To make sure everything goes smoothly, there is a condition, called a ""precondition,"" that must be met before you can place the book on the table.

For the action ""place-on-table,"" let's break down what needs to be true before you can place the book on the table:

1. **You must be holding the book:** This means you have the book in your hands, ready to place it on the table.

Once this precondition is met, you can proceed with the ""place-on-table"" action. This action results in several changes, called ""effects,"" that update the status of the book and your hands:

1. **You are no longer holding the book:** This shows that you have placed the book on the table.
2. **The book becomes accessible:** Now that the book is on the table, it is easy to reach and pick up again if needed.
3. **Your hands are now free:** Since you have placed the book on the table, your hands are empty again.
4. **The book is on the table:** This indicates the new location of the book.

To summarize, the precondition ensures you are holding the book, making sure you are ready to place it on the table. The effects update the situation to show that you have placed the book on the table, it is now accessible, and your hands are free again.","Parameters:
1. ?x - book

Preconditions:
```
(holding ?x)
```

Effects:
```
(and
    (not (hands-free))
    (accessible ?x)
    (on-table ?x)
)
```
","(:action place-on-table
    :parameters (?x - book)
    :precondition (holding ?x)
    :effect (and (not (holding ?x)) (accessible ?x) (hands-free) (on-table ?x))
)","negate (hands-free) in effects
remove (not (holding ?x)) from effects
"
libraryworld,place-on-table,0.20006215572357178,Hard Negative (Manipulated Action),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Picture a librarian holding a book. The 'place-on-table' action involves placing the held book onto the table. This action is feasible if the librarian is currently holding the book. Once placed, the book becomes accessible again, and the librarian's hands are free.

Action name: place-on-table


Your answer:

**Explanation:** 

Imagine you are a librarian holding a book in your hands, and you want to place it on a nearby table. The action ""place-on-table"" lets you do this. To make sure everything goes smoothly, there is a condition, called a ""precondition,"" that must be met before you can place the book on the table.

For the action ""place-on-table,"" let's break down what needs to be true before you can place the book on the table:

1. **You must be holding the book:** This means you have the book in your hands, ready to place it on the table.

Once this precondition is met, you can proceed with the ""place-on-table"" action. This action results in several changes, called ""effects,"" that update the status of the book and your hands:

1. **You are no longer holding the book:** This shows that you have placed the book on the table.
2. **The book becomes accessible:** Now that the book is on the table, it is easy to reach and pick up again if needed.
3. **Your hands are now free:** Since you have placed the book on the table, your hands are empty again.
4. **The book is on the table:** This indicates the new location of the book.

To summarize, the precondition ensures you are holding the book, making sure you are ready to place it on the table. The effects update the situation to show that you have placed the book on the table, it is now accessible, and your hands are free again.","Parameters:
1. ?x - book

Preconditions:
```
(hands-free)
```

Effects:
```
(and
    (holding ?x)
    (not (holding ?x))
    (accessible ?x)
    (on-table ?x)
)
```
","(:action place-on-table
    :parameters (?x - book)
    :precondition (holding ?x)
    :effect (and (not (holding ?x)) (accessible ?x) (hands-free) (on-table ?x))
)","swap (holding ?x) with (hands-free)
"
libraryworld,place-on-table,0.06162073090672493,Hard Negative (Manipulated Action),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Picture a librarian holding a book. The 'place-on-table' action involves placing the held book onto the table. This action is feasible if the librarian is currently holding the book. Once placed, the book becomes accessible again, and the librarian's hands are free.

Action name: place-on-table


Your answer:

**Explanation:** 

Imagine you are a librarian holding a book in your hands, and you want to place it on a nearby table. The action ""place-on-table"" lets you do this. To make sure everything goes smoothly, there is a condition, called a ""precondition,"" that must be met before you can place the book on the table.

For the action ""place-on-table,"" let's break down what needs to be true before you can place the book on the table:

1. **You must be holding the book:** This means you have the book in your hands, ready to place it on the table.

Once this precondition is met, you can proceed with the ""place-on-table"" action. This action results in several changes, called ""effects,"" that update the status of the book and your hands:

1. **You are no longer holding the book:** This shows that you have placed the book on the table.
2. **The book becomes accessible:** Now that the book is on the table, it is easy to reach and pick up again if needed.
3. **Your hands are now free:** Since you have placed the book on the table, your hands are empty again.
4. **The book is on the table:** This indicates the new location of the book.

To summarize, the precondition ensures you are holding the book, making sure you are ready to place it on the table. The effects update the situation to show that you have placed the book on the table, it is now accessible, and your hands are free again.","Parameters:
1. ?x - book

Preconditions:
```
(not (holding ?x))
```

Effects:
```
(and
    (not (on-table ?x))
    (not (holding ?x))
    (accessible ?x)
    (hands-free)
)
```
","(:action place-on-table
    :parameters (?x - book)
    :precondition (holding ?x)
    :effect (and (not (holding ?x)) (accessible ?x) (hands-free) (on-table ?x))
)","negate (holding ?x) in preconditions
negate (on-table ?x) in effects
"
libraryworld,place-on-table,0.07745900005102158,Hard Negative (Manipulated Action),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Picture a librarian holding a book. The 'place-on-table' action involves placing the held book onto the table. This action is feasible if the librarian is currently holding the book. Once placed, the book becomes accessible again, and the librarian's hands are free.

Action name: place-on-table


Your answer:

**Explanation:** 

Imagine you are a librarian holding a book in your hands, and you want to place it on a nearby table. The action ""place-on-table"" lets you do this. To make sure everything goes smoothly, there is a condition, called a ""precondition,"" that must be met before you can place the book on the table.

For the action ""place-on-table,"" let's break down what needs to be true before you can place the book on the table:

1. **You must be holding the book:** This means you have the book in your hands, ready to place it on the table.

Once this precondition is met, you can proceed with the ""place-on-table"" action. This action results in several changes, called ""effects,"" that update the status of the book and your hands:

1. **You are no longer holding the book:** This shows that you have placed the book on the table.
2. **The book becomes accessible:** Now that the book is on the table, it is easy to reach and pick up again if needed.
3. **Your hands are now free:** Since you have placed the book on the table, your hands are empty again.
4. **The book is on the table:** This indicates the new location of the book.

To summarize, the precondition ensures you are holding the book, making sure you are ready to place it on the table. The effects update the situation to show that you have placed the book on the table, it is now accessible, and your hands are free again.","Parameters:
1. ?x - book

Preconditions:
```
(not (holding ?x))
```

Effects:
```
(and
    (not (hands-free))
    (not (holding ?x))
    (accessible ?x)
    (on-table ?x)
)
```
","(:action place-on-table
    :parameters (?x - book)
    :precondition (holding ?x)
    :effect (and (not (holding ?x)) (accessible ?x) (hands-free) (on-table ?x))
)","negate (holding ?x) in preconditions
negate (hands-free) in effects
"
libraryworld,place-on-table,0.253551185131073,Hard Negative (Manipulated Action),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Picture a librarian holding a book. The 'place-on-table' action involves placing the held book onto the table. This action is feasible if the librarian is currently holding the book. Once placed, the book becomes accessible again, and the librarian's hands are free.

Action name: place-on-table


Your answer:

**Explanation:** 

Imagine you are a librarian holding a book in your hands, and you want to place it on a nearby table. The action ""place-on-table"" lets you do this. To make sure everything goes smoothly, there is a condition, called a ""precondition,"" that must be met before you can place the book on the table.

For the action ""place-on-table,"" let's break down what needs to be true before you can place the book on the table:

1. **You must be holding the book:** This means you have the book in your hands, ready to place it on the table.

Once this precondition is met, you can proceed with the ""place-on-table"" action. This action results in several changes, called ""effects,"" that update the status of the book and your hands:

1. **You are no longer holding the book:** This shows that you have placed the book on the table.
2. **The book becomes accessible:** Now that the book is on the table, it is easy to reach and pick up again if needed.
3. **Your hands are now free:** Since you have placed the book on the table, your hands are empty again.
4. **The book is on the table:** This indicates the new location of the book.

To summarize, the precondition ensures you are holding the book, making sure you are ready to place it on the table. The effects update the situation to show that you have placed the book on the table, it is now accessible, and your hands are free again.","Parameters:
1. ?x - book

Preconditions:
```
(not (holding ?x))
```

Effects:
```
(and
    (not (holding ?x))
    (accessible ?x)
    (hands-free)
    (on-table ?x)
)
```
","(:action place-on-table
    :parameters (?x - book)
    :precondition (holding ?x)
    :effect (and (not (holding ?x)) (accessible ?x) (hands-free) (on-table ?x))
)","negate (holding ?x) in preconditions
"
libraryworld,place-on-table,0.20006215572357178,Hard Negative (Manipulated Action),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Picture a librarian holding a book. The 'place-on-table' action involves placing the held book onto the table. This action is feasible if the librarian is currently holding the book. Once placed, the book becomes accessible again, and the librarian's hands are free.

Action name: place-on-table


Your answer:

**Explanation:** 

Imagine you are a librarian holding a book in your hands, and you want to place it on a nearby table. The action ""place-on-table"" lets you do this. To make sure everything goes smoothly, there is a condition, called a ""precondition,"" that must be met before you can place the book on the table.

For the action ""place-on-table,"" let's break down what needs to be true before you can place the book on the table:

1. **You must be holding the book:** This means you have the book in your hands, ready to place it on the table.

Once this precondition is met, you can proceed with the ""place-on-table"" action. This action results in several changes, called ""effects,"" that update the status of the book and your hands:

1. **You are no longer holding the book:** This shows that you have placed the book on the table.
2. **The book becomes accessible:** Now that the book is on the table, it is easy to reach and pick up again if needed.
3. **Your hands are now free:** Since you have placed the book on the table, your hands are empty again.
4. **The book is on the table:** This indicates the new location of the book.

To summarize, the precondition ensures you are holding the book, making sure you are ready to place it on the table. The effects update the situation to show that you have placed the book on the table, it is now accessible, and your hands are free again.","Parameters:
1. ?x - book

Preconditions:
```
(hands-free)
```

Effects:
```
(and
    (holding ?x)
    (not (holding ?x))
    (accessible ?x)
    (on-table ?x)
)
```
","(:action place-on-table
    :parameters (?x - book)
    :precondition (holding ?x)
    :effect (and (not (holding ?x)) (accessible ?x) (hands-free) (on-table ?x))
)","swap (holding ?x) with (hands-free)
"
libraryworld,place-on-table,0.3251233398914337,Hard Negative (Manipulated Action),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Picture a librarian holding a book. The 'place-on-table' action involves placing the held book onto the table. This action is feasible if the librarian is currently holding the book. Once placed, the book becomes accessible again, and the librarian's hands are free.

Action name: place-on-table


Your answer:

**Explanation:** 

Imagine you are a librarian holding a book in your hands, and you want to place it on a nearby table. The action ""place-on-table"" lets you do this. To make sure everything goes smoothly, there is a condition, called a ""precondition,"" that must be met before you can place the book on the table.

For the action ""place-on-table,"" let's break down what needs to be true before you can place the book on the table:

1. **You must be holding the book:** This means you have the book in your hands, ready to place it on the table.

Once this precondition is met, you can proceed with the ""place-on-table"" action. This action results in several changes, called ""effects,"" that update the status of the book and your hands:

1. **You are no longer holding the book:** This shows that you have placed the book on the table.
2. **The book becomes accessible:** Now that the book is on the table, it is easy to reach and pick up again if needed.
3. **Your hands are now free:** Since you have placed the book on the table, your hands are empty again.
4. **The book is on the table:** This indicates the new location of the book.

To summarize, the precondition ensures you are holding the book, making sure you are ready to place it on the table. The effects update the situation to show that you have placed the book on the table, it is now accessible, and your hands are free again.","Parameters:
1. ?x - book

Preconditions:
```
(holding ?x)
```

Effects:
```
(and
    (accessible ?x)
    (hands-free)
    (on-table ?x)
)
```
","(:action place-on-table
    :parameters (?x - book)
    :precondition (holding ?x)
    :effect (and (not (holding ?x)) (accessible ?x) (hands-free) (on-table ?x))
)","remove (not (holding ?x)) from effects
"
libraryworld,place-on-table,0.3846074938774109,Hard Negative (Manipulated Action),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Picture a librarian holding a book. The 'place-on-table' action involves placing the held book onto the table. This action is feasible if the librarian is currently holding the book. Once placed, the book becomes accessible again, and the librarian's hands are free.

Action name: place-on-table


Your answer:

**Explanation:** 

Imagine you are a librarian holding a book in your hands, and you want to place it on a nearby table. The action ""place-on-table"" lets you do this. To make sure everything goes smoothly, there is a condition, called a ""precondition,"" that must be met before you can place the book on the table.

For the action ""place-on-table,"" let's break down what needs to be true before you can place the book on the table:

1. **You must be holding the book:** This means you have the book in your hands, ready to place it on the table.

Once this precondition is met, you can proceed with the ""place-on-table"" action. This action results in several changes, called ""effects,"" that update the status of the book and your hands:

1. **You are no longer holding the book:** This shows that you have placed the book on the table.
2. **The book becomes accessible:** Now that the book is on the table, it is easy to reach and pick up again if needed.
3. **Your hands are now free:** Since you have placed the book on the table, your hands are empty again.
4. **The book is on the table:** This indicates the new location of the book.

To summarize, the precondition ensures you are holding the book, making sure you are ready to place it on the table. The effects update the situation to show that you have placed the book on the table, it is now accessible, and your hands are free again.","Parameters:
1. ?x - book

Preconditions:
```
(holding ?x)
```

Effects:
```
(and
    (not (holding ?x))
    (accessible ?x)
    (hands-free)
)
```
","(:action place-on-table
    :parameters (?x - book)
    :precondition (holding ?x)
    :effect (and (not (holding ?x)) (accessible ?x) (hands-free) (on-table ?x))
)","remove (on-table ?x) from effects
"
libraryworld,place-on-table,0.2580548822879791,Hard Negative (Manipulated Action),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Picture a librarian holding a book. The 'place-on-table' action involves placing the held book onto the table. This action is feasible if the librarian is currently holding the book. Once placed, the book becomes accessible again, and the librarian's hands are free.

Action name: place-on-table


Your answer:

**Explanation:** 

Imagine you are a librarian holding a book in your hands, and you want to place it on a nearby table. The action ""place-on-table"" lets you do this. To make sure everything goes smoothly, there is a condition, called a ""precondition,"" that must be met before you can place the book on the table.

For the action ""place-on-table,"" let's break down what needs to be true before you can place the book on the table:

1. **You must be holding the book:** This means you have the book in your hands, ready to place it on the table.

Once this precondition is met, you can proceed with the ""place-on-table"" action. This action results in several changes, called ""effects,"" that update the status of the book and your hands:

1. **You are no longer holding the book:** This shows that you have placed the book on the table.
2. **The book becomes accessible:** Now that the book is on the table, it is easy to reach and pick up again if needed.
3. **Your hands are now free:** Since you have placed the book on the table, your hands are empty again.
4. **The book is on the table:** This indicates the new location of the book.

To summarize, the precondition ensures you are holding the book, making sure you are ready to place it on the table. The effects update the situation to show that you have placed the book on the table, it is now accessible, and your hands are free again.","Parameters:
1. ?x - book

Preconditions:
```
(holding ?x)
```

Effects:
```
(and
    (not (holding ?x))
    (accessible ?x)
    (on-table ?x)
)
```
","(:action place-on-table
    :parameters (?x - book)
    :precondition (holding ?x)
    :effect (and (not (holding ?x)) (accessible ?x) (hands-free) (on-table ?x))
)","remove (hands-free) from effects
"
libraryworld,place-on-table,0.6384035348892212,Hard Negative (Manipulated Action),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Picture a librarian holding a book. The 'place-on-table' action involves placing the held book onto the table. This action is feasible if the librarian is currently holding the book. Once placed, the book becomes accessible again, and the librarian's hands are free.

Action name: place-on-table


Your answer:
","**Explanation:** 

Imagine you are a librarian holding a book in your hands, and you want to place it on a nearby table. The action ""place-on-table"" lets you do this. To make sure everything goes smoothly, there is a condition, called a ""precondition,"" that must be met before you can place the book on the table.

For the action ""place-on-table,"" let's break down what needs to be true before you can place the book on the table:

1. **You must be holding the book:** This means you have the book in your hands, ready to place it on the table.

Once this precondition is met, you can proceed with the ""place-on-table"" action. This action results in several changes, called ""effects,"" that update the status of the book and your hands:

1. **You are no longer holding the book:** This shows that you have placed the book on the table.
2. **The book becomes accessible:** Now that the book is on the table, it is easy to reach and pick up again if needed.
3. **Your hands are now free:** Since you have placed the book on the table, your hands are empty again.
4. **The book is on the table:** This indicates the new location of the book.

To summarize, the precondition ensures you are holding the book, making sure you are ready to place it on the table. The effects update the situation to show that you have placed the book on the table, it is now accessible, and your hands are free again.
Parameters:
1. ?x - book

Preconditions:
```
(holding ?x)
```

Effects:
```
(and
    (accessible ?x)
    (hands-free)
    (on-table ?x)
)
```
","(:action place-on-table
    :parameters (?x - book)
    :precondition (holding ?x)
    :effect (and (not (holding ?x)) (accessible ?x) (hands-free) (on-table ?x))
)","remove (not (holding ?x)) from effects
"
libraryworld,place-on-table,0.6384035348892212,Hard Negative (Manipulated Action),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Picture a librarian holding a book. The 'place-on-table' action involves placing the held book onto the table. This action is feasible if the librarian is currently holding the book. Once placed, the book becomes accessible again, and the librarian's hands are free.

Action name: place-on-table


Your answer:
","**Explanation:** 

Imagine you are a librarian holding a book in your hands, and you want to place it on a nearby table. The action ""place-on-table"" lets you do this. To make sure everything goes smoothly, there is a condition, called a ""precondition,"" that must be met before you can place the book on the table.

For the action ""place-on-table,"" let's break down what needs to be true before you can place the book on the table:

1. **You must be holding the book:** This means you have the book in your hands, ready to place it on the table.

Once this precondition is met, you can proceed with the ""place-on-table"" action. This action results in several changes, called ""effects,"" that update the status of the book and your hands:

1. **You are no longer holding the book:** This shows that you have placed the book on the table.
2. **The book becomes accessible:** Now that the book is on the table, it is easy to reach and pick up again if needed.
3. **Your hands are now free:** Since you have placed the book on the table, your hands are empty again.
4. **The book is on the table:** This indicates the new location of the book.

To summarize, the precondition ensures you are holding the book, making sure you are ready to place it on the table. The effects update the situation to show that you have placed the book on the table, it is now accessible, and your hands are free again.
Parameters:
1. ?x - book

Preconditions:
```
(holding ?x)
```

Effects:
```
(and
    (not (accessible ?x))
    (not (holding ?x))
    (on-table ?x)
)
```
","(:action place-on-table
    :parameters (?x - book)
    :precondition (holding ?x)
    :effect (and (not (holding ?x)) (accessible ?x) (hands-free) (on-table ?x))
)","remove (hands-free) from effects
negate (accessible ?x) in effects
"
libraryworld,place-on-table,0.6384035348892212,Hard Negative (Manipulated Action),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Picture a librarian holding a book. The 'place-on-table' action involves placing the held book onto the table. This action is feasible if the librarian is currently holding the book. Once placed, the book becomes accessible again, and the librarian's hands are free.

Action name: place-on-table


Your answer:
","**Explanation:** 

Imagine you are a librarian holding a book in your hands, and you want to place it on a nearby table. The action ""place-on-table"" lets you do this. To make sure everything goes smoothly, there is a condition, called a ""precondition,"" that must be met before you can place the book on the table.

For the action ""place-on-table,"" let's break down what needs to be true before you can place the book on the table:

1. **You must be holding the book:** This means you have the book in your hands, ready to place it on the table.

Once this precondition is met, you can proceed with the ""place-on-table"" action. This action results in several changes, called ""effects,"" that update the status of the book and your hands:

1. **You are no longer holding the book:** This shows that you have placed the book on the table.
2. **The book becomes accessible:** Now that the book is on the table, it is easy to reach and pick up again if needed.
3. **Your hands are now free:** Since you have placed the book on the table, your hands are empty again.
4. **The book is on the table:** This indicates the new location of the book.

To summarize, the precondition ensures you are holding the book, making sure you are ready to place it on the table. The effects update the situation to show that you have placed the book on the table, it is now accessible, and your hands are free again.
Parameters:
1. ?x - book

Preconditions:
```
(on-table ?x)
```

Effects:
```
(and
    (holding ?x)
    (holding ?x)
    (accessible ?x)
    (hands-free)
)
```
","(:action place-on-table
    :parameters (?x - book)
    :precondition (holding ?x)
    :effect (and (not (holding ?x)) (accessible ?x) (hands-free) (on-table ?x))
)","swap (holding ?x) with (on-table ?x)
negate (not (holding ?x)) in effects
"
libraryworld,place-on-table,0.6384035348892212,Hard Negative (Manipulated Action),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Picture a librarian holding a book. The 'place-on-table' action involves placing the held book onto the table. This action is feasible if the librarian is currently holding the book. Once placed, the book becomes accessible again, and the librarian's hands are free.

Action name: place-on-table


Your answer:
","**Explanation:** 

Imagine you are a librarian holding a book in your hands, and you want to place it on a nearby table. The action ""place-on-table"" lets you do this. To make sure everything goes smoothly, there is a condition, called a ""precondition,"" that must be met before you can place the book on the table.

For the action ""place-on-table,"" let's break down what needs to be true before you can place the book on the table:

1. **You must be holding the book:** This means you have the book in your hands, ready to place it on the table.

Once this precondition is met, you can proceed with the ""place-on-table"" action. This action results in several changes, called ""effects,"" that update the status of the book and your hands:

1. **You are no longer holding the book:** This shows that you have placed the book on the table.
2. **The book becomes accessible:** Now that the book is on the table, it is easy to reach and pick up again if needed.
3. **Your hands are now free:** Since you have placed the book on the table, your hands are empty again.
4. **The book is on the table:** This indicates the new location of the book.

To summarize, the precondition ensures you are holding the book, making sure you are ready to place it on the table. The effects update the situation to show that you have placed the book on the table, it is now accessible, and your hands are free again.
Parameters:
1. ?x - book

Preconditions:
```
(accessible ?x)
```

Effects:
```
(and
    (holding ?x)
    (not (holding ?x))
    (hands-free)
    (on-table ?x)
)
```
","(:action place-on-table
    :parameters (?x - book)
    :precondition (holding ?x)
    :effect (and (not (holding ?x)) (accessible ?x) (hands-free) (on-table ?x))
)","swap (holding ?x) with (accessible ?x)
"
libraryworld,place-on-table,0.6384035348892212,Hard Negative (Manipulated Action),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Picture a librarian holding a book. The 'place-on-table' action involves placing the held book onto the table. This action is feasible if the librarian is currently holding the book. Once placed, the book becomes accessible again, and the librarian's hands are free.

Action name: place-on-table


Your answer:
","**Explanation:** 

Imagine you are a librarian holding a book in your hands, and you want to place it on a nearby table. The action ""place-on-table"" lets you do this. To make sure everything goes smoothly, there is a condition, called a ""precondition,"" that must be met before you can place the book on the table.

For the action ""place-on-table,"" let's break down what needs to be true before you can place the book on the table:

1. **You must be holding the book:** This means you have the book in your hands, ready to place it on the table.

Once this precondition is met, you can proceed with the ""place-on-table"" action. This action results in several changes, called ""effects,"" that update the status of the book and your hands:

1. **You are no longer holding the book:** This shows that you have placed the book on the table.
2. **The book becomes accessible:** Now that the book is on the table, it is easy to reach and pick up again if needed.
3. **Your hands are now free:** Since you have placed the book on the table, your hands are empty again.
4. **The book is on the table:** This indicates the new location of the book.

To summarize, the precondition ensures you are holding the book, making sure you are ready to place it on the table. The effects update the situation to show that you have placed the book on the table, it is now accessible, and your hands are free again.
Parameters:
1. ?x - book

Preconditions:
```
(holding ?x)
```

Effects:
```
(and
    (not (accessible ?x))
    (not (holding ?x))
    (hands-free)
    (on-table ?x)
)
```
","(:action place-on-table
    :parameters (?x - book)
    :precondition (holding ?x)
    :effect (and (not (holding ?x)) (accessible ?x) (hands-free) (on-table ?x))
)","negate (accessible ?x) in effects
"
libraryworld,place-on-table,0.6384035348892212,Hard Negative (Manipulated Action),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Picture a librarian holding a book. The 'place-on-table' action involves placing the held book onto the table. This action is feasible if the librarian is currently holding the book. Once placed, the book becomes accessible again, and the librarian's hands are free.

Action name: place-on-table


Your answer:
","**Explanation:** 

Imagine you are a librarian holding a book in your hands, and you want to place it on a nearby table. The action ""place-on-table"" lets you do this. To make sure everything goes smoothly, there is a condition, called a ""precondition,"" that must be met before you can place the book on the table.

For the action ""place-on-table,"" let's break down what needs to be true before you can place the book on the table:

1. **You must be holding the book:** This means you have the book in your hands, ready to place it on the table.

Once this precondition is met, you can proceed with the ""place-on-table"" action. This action results in several changes, called ""effects,"" that update the status of the book and your hands:

1. **You are no longer holding the book:** This shows that you have placed the book on the table.
2. **The book becomes accessible:** Now that the book is on the table, it is easy to reach and pick up again if needed.
3. **Your hands are now free:** Since you have placed the book on the table, your hands are empty again.
4. **The book is on the table:** This indicates the new location of the book.

To summarize, the precondition ensures you are holding the book, making sure you are ready to place it on the table. The effects update the situation to show that you have placed the book on the table, it is now accessible, and your hands are free again.
Parameters:
1. ?x - book

Preconditions:
```
(holding ?x)
```

Effects:
```
(and
    (holding ?x)
    (accessible ?x)
    (hands-free)
    (on-table ?x)
)
```
","(:action place-on-table
    :parameters (?x - book)
    :precondition (holding ?x)
    :effect (and (not (holding ?x)) (accessible ?x) (hands-free) (on-table ?x))
)","negate (not (holding ?x)) in effects
"
libraryworld,place-on-table,0.6384035348892212,Hard Negative (Manipulated Action),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Picture a librarian holding a book. The 'place-on-table' action involves placing the held book onto the table. This action is feasible if the librarian is currently holding the book. Once placed, the book becomes accessible again, and the librarian's hands are free.

Action name: place-on-table


Your answer:
","**Explanation:** 

Imagine you are a librarian holding a book in your hands, and you want to place it on a nearby table. The action ""place-on-table"" lets you do this. To make sure everything goes smoothly, there is a condition, called a ""precondition,"" that must be met before you can place the book on the table.

For the action ""place-on-table,"" let's break down what needs to be true before you can place the book on the table:

1. **You must be holding the book:** This means you have the book in your hands, ready to place it on the table.

Once this precondition is met, you can proceed with the ""place-on-table"" action. This action results in several changes, called ""effects,"" that update the status of the book and your hands:

1. **You are no longer holding the book:** This shows that you have placed the book on the table.
2. **The book becomes accessible:** Now that the book is on the table, it is easy to reach and pick up again if needed.
3. **Your hands are now free:** Since you have placed the book on the table, your hands are empty again.
4. **The book is on the table:** This indicates the new location of the book.

To summarize, the precondition ensures you are holding the book, making sure you are ready to place it on the table. The effects update the situation to show that you have placed the book on the table, it is now accessible, and your hands are free again.
Parameters:
1. ?x - book

Preconditions:
```
(accessible ?x)
```

Effects:
```
(and
    (holding ?x)
    (not (holding ?x))
    (hands-free)
    (on-table ?x)
)
```
","(:action place-on-table
    :parameters (?x - book)
    :precondition (holding ?x)
    :effect (and (not (holding ?x)) (accessible ?x) (hands-free) (on-table ?x))
)","swap (holding ?x) with (accessible ?x)
"
libraryworld,place-on-table,0.6384035348892212,Hard Negative (Manipulated Action),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Picture a librarian holding a book. The 'place-on-table' action involves placing the held book onto the table. This action is feasible if the librarian is currently holding the book. Once placed, the book becomes accessible again, and the librarian's hands are free.

Action name: place-on-table


Your answer:
","**Explanation:** 

Imagine you are a librarian holding a book in your hands, and you want to place it on a nearby table. The action ""place-on-table"" lets you do this. To make sure everything goes smoothly, there is a condition, called a ""precondition,"" that must be met before you can place the book on the table.

For the action ""place-on-table,"" let's break down what needs to be true before you can place the book on the table:

1. **You must be holding the book:** This means you have the book in your hands, ready to place it on the table.

Once this precondition is met, you can proceed with the ""place-on-table"" action. This action results in several changes, called ""effects,"" that update the status of the book and your hands:

1. **You are no longer holding the book:** This shows that you have placed the book on the table.
2. **The book becomes accessible:** Now that the book is on the table, it is easy to reach and pick up again if needed.
3. **Your hands are now free:** Since you have placed the book on the table, your hands are empty again.
4. **The book is on the table:** This indicates the new location of the book.

To summarize, the precondition ensures you are holding the book, making sure you are ready to place it on the table. The effects update the situation to show that you have placed the book on the table, it is now accessible, and your hands are free again.
Parameters:
1. ?x - book

Preconditions:
```
(not (holding ?x))
```

Effects:
```
(and
    (holding ?x)
    (accessible ?x)
    (hands-free)
    (on-table ?x)
)
```
","(:action place-on-table
    :parameters (?x - book)
    :precondition (holding ?x)
    :effect (and (not (holding ?x)) (accessible ?x) (hands-free) (on-table ?x))
)","swap (holding ?x) with (not (holding ?x))
"
libraryworld,place-on-table,0.6384035348892212,Hard Negative (Manipulated Action),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Picture a librarian holding a book. The 'place-on-table' action involves placing the held book onto the table. This action is feasible if the librarian is currently holding the book. Once placed, the book becomes accessible again, and the librarian's hands are free.

Action name: place-on-table


Your answer:
","**Explanation:** 

Imagine you are a librarian holding a book in your hands, and you want to place it on a nearby table. The action ""place-on-table"" lets you do this. To make sure everything goes smoothly, there is a condition, called a ""precondition,"" that must be met before you can place the book on the table.

For the action ""place-on-table,"" let's break down what needs to be true before you can place the book on the table:

1. **You must be holding the book:** This means you have the book in your hands, ready to place it on the table.

Once this precondition is met, you can proceed with the ""place-on-table"" action. This action results in several changes, called ""effects,"" that update the status of the book and your hands:

1. **You are no longer holding the book:** This shows that you have placed the book on the table.
2. **The book becomes accessible:** Now that the book is on the table, it is easy to reach and pick up again if needed.
3. **Your hands are now free:** Since you have placed the book on the table, your hands are empty again.
4. **The book is on the table:** This indicates the new location of the book.

To summarize, the precondition ensures you are holding the book, making sure you are ready to place it on the table. The effects update the situation to show that you have placed the book on the table, it is now accessible, and your hands are free again.
Parameters:
1. ?x - book

Preconditions:
```
(holding ?x)
```

Effects:
```
(and
    (not (holding ?x))
    (hands-free)
)
```
","(:action place-on-table
    :parameters (?x - book)
    :precondition (holding ?x)
    :effect (and (not (holding ?x)) (accessible ?x) (hands-free) (on-table ?x))
)","remove (accessible ?x) from effects
remove (on-table ?x) from effects
"
libraryworld,place-on-table,0.6384035348892212,Hard Negative (Manipulated Action),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Picture a librarian holding a book. The 'place-on-table' action involves placing the held book onto the table. This action is feasible if the librarian is currently holding the book. Once placed, the book becomes accessible again, and the librarian's hands are free.

Action name: place-on-table


Your answer:
","**Explanation:** 

Imagine you are a librarian holding a book in your hands, and you want to place it on a nearby table. The action ""place-on-table"" lets you do this. To make sure everything goes smoothly, there is a condition, called a ""precondition,"" that must be met before you can place the book on the table.

For the action ""place-on-table,"" let's break down what needs to be true before you can place the book on the table:

1. **You must be holding the book:** This means you have the book in your hands, ready to place it on the table.

Once this precondition is met, you can proceed with the ""place-on-table"" action. This action results in several changes, called ""effects,"" that update the status of the book and your hands:

1. **You are no longer holding the book:** This shows that you have placed the book on the table.
2. **The book becomes accessible:** Now that the book is on the table, it is easy to reach and pick up again if needed.
3. **Your hands are now free:** Since you have placed the book on the table, your hands are empty again.
4. **The book is on the table:** This indicates the new location of the book.

To summarize, the precondition ensures you are holding the book, making sure you are ready to place it on the table. The effects update the situation to show that you have placed the book on the table, it is now accessible, and your hands are free again.
Parameters:
1. ?x - book

Preconditions:
```
(not (holding ?x))
```

Effects:
```
(and
    (not (holding ?x))
    (accessible ?x)
    (on-table ?x)
)
```
","(:action place-on-table
    :parameters (?x - book)
    :precondition (holding ?x)
    :effect (and (not (holding ?x)) (accessible ?x) (hands-free) (on-table ?x))
)","negate (holding ?x) in preconditions
remove (hands-free) from effects
"
libraryworld,check-out,0.697905421257019,Positive (Correct Match),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Envision a librarian assisting a patron who wishes to borrow a book. The 'check-out' action allows the librarian to mark a book as checked out, provided it is accessible and not already checked out. This action reflects the process of recording the book's status as borrowed and setting a return due date.

Action name: check-out


Your answer:
","Parameters:
1. ?x - book

Preconditions:
```
(and
    (accessible ?x)
    (not (checked-out ?x))
)
```

Effects:
```
(and
    (checked-out ?x)
    (not (accessible ?x))
    (book-request ?x)
    (return-due ?x)
)
```
","(:action check-out
    :parameters (?x - book)
    :precondition (and (accessible ?x) (not (checked-out ?x)))
    :effect (and (checked-out ?x) (not (accessible ?x)) (book-request ?x) (return-due ?x))
)",
libraryworld,check-out,0.697905421257019,Positive (Correct Match),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Envision a librarian assisting a patron who wishes to borrow a book. The 'check-out' action allows the librarian to mark a book as checked out, provided it is accessible and not already checked out. This action reflects the process of recording the book's status as borrowed and setting a return due date.

Action name: check-out


Your answer:

**Explanation:** 

Imagine a librarian in a library who helps patrons borrow books. When a patron wants to borrow a book, the librarian needs to make sure certain conditions are met before they can check the book out. These conditions are called ""preconditions.""

For the action ""check-out,"" let's think about what needs to be true before the librarian can let the patron borrow the book:

1. **The book must be accessible:** This means the book is not covered by other books or objects, making it easy for the librarian to pick up. If the book isn't accessible, the librarian can't reach it to check it out.
2. **The book must not be already checked out:** If the book is already checked out to someone else, it can't be borrowed by another patron until it's returned.

Once these preconditions are met, the librarian can proceed with the check-out action. The action results in several changes, called ""effects,"" that update the status of the book:

1. **The book is marked as checked out:** This indicates that the book is now borrowed and can't be checked out by another patron until it's returned.
2. **The book is no longer accessible:** Since the book is borrowed, it's no longer available on the shelf for others to take.
3. **There is a request for the book:** This keeps track of the borrowing transaction.
4. **A return due date is set:** This helps the library know when to expect the book back.

To summarize, the preconditions ensure the librarian can access the book and that it isn't already borrowed. The effects update the system to show the book is now checked out, not accessible, and has a return due date.","Parameters:
1. ?x - book

Preconditions:
```
(and
    (accessible ?x)
    (not (checked-out ?x))
)
```

Effects:
```
(and
    (checked-out ?x)
    (not (accessible ?x))
    (book-request ?x)
    (return-due ?x)
)
```
","(:action check-out
    :parameters (?x - book)
    :precondition (and (accessible ?x) (not (checked-out ?x)))
    :effect (and (checked-out ?x) (not (accessible ?x)) (book-request ?x) (return-due ?x))
)",
libraryworld,check-out,0.6450091600418091,Positive (Correct Match),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Envision a librarian assisting a patron who wishes to borrow a book. The 'check-out' action allows the librarian to mark a book as checked out, provided it is accessible and not already checked out. This action reflects the process of recording the book's status as borrowed and setting a return due date.

Action name: check-out


Your answer:
","**Explanation:** 

Imagine a librarian in a library who helps patrons borrow books. When a patron wants to borrow a book, the librarian needs to make sure certain conditions are met before they can check the book out. These conditions are called ""preconditions.""

For the action ""check-out,"" let's think about what needs to be true before the librarian can let the patron borrow the book:

1. **The book must be accessible:** This means the book is not covered by other books or objects, making it easy for the librarian to pick up. If the book isn't accessible, the librarian can't reach it to check it out.
2. **The book must not be already checked out:** If the book is already checked out to someone else, it can't be borrowed by another patron until it's returned.

Once these preconditions are met, the librarian can proceed with the check-out action. The action results in several changes, called ""effects,"" that update the status of the book:

1. **The book is marked as checked out:** This indicates that the book is now borrowed and can't be checked out by another patron until it's returned.
2. **The book is no longer accessible:** Since the book is borrowed, it's no longer available on the shelf for others to take.
3. **There is a request for the book:** This keeps track of the borrowing transaction.
4. **A return due date is set:** This helps the library know when to expect the book back.

To summarize, the preconditions ensure the librarian can access the book and that it isn't already borrowed. The effects update the system to show the book is now checked out, not accessible, and has a return due date.
Parameters:
1. ?x - book

Preconditions:
```
(and
    (accessible ?x)
    (not (checked-out ?x))
)
```

Effects:
```
(and
    (checked-out ?x)
    (not (accessible ?x))
    (book-request ?x)
    (return-due ?x)
)
```
","(:action check-out
    :parameters (?x - book)
    :precondition (and (accessible ?x) (not (checked-out ?x)))
    :effect (and (checked-out ?x) (not (accessible ?x)) (book-request ?x) (return-due ?x))
)",
libraryworld,check-out,-0.03427371382713318,Easy Negative (Inter-Domain Mismatch),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Envision a librarian assisting a patron who wishes to borrow a book. The 'check-out' action allows the librarian to mark a book as checked out, provided it is accessible and not already checked out. This action reflects the process of recording the book's status as borrowed and setting a return due date.

Action name: check-out


Your answer:
","Parameters:
1. ?var0 - moveable
2. ?var1 - agent

Preconditions:
```
(equipped ?var0 ?var1)
```

Effects:
```
(and
    (inventory ?var0)
    (not (equipped ?var0 ?var1))
    (handsfree ?var1)
)
```
","(:action check-out
    :parameters (?x - book)
    :precondition (and (accessible ?x) (not (checked-out ?x)))
    :effect (and (checked-out ?x) (not (accessible ?x)) (book-request ?x) (return-due ?x))
)",
libraryworld,check-out,0.1422760933637619,Easy Negative (Inter-Domain Mismatch),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Envision a librarian assisting a patron who wishes to borrow a book. The 'check-out' action allows the librarian to mark a book as checked out, provided it is accessible and not already checked out. This action reflects the process of recording the book's status as borrowed and setting a return due date.

Action name: check-out


Your answer:
","Parameters:
1. ?var0 - moveable
2. ?var1 - agent
3. ?var2 - moveable

Preconditions:
```
(and
    (hypothetical ?var0)
    (is_log ?var2)
    (equipped ?var2 ?var1)
)
```

Effects:
```
(and
    (inventory ?var0)
    (is_planks ?var0)
    (handsfree ?var1)
    (not (equipped ?var2 ?var1))
    (not (hypothetical ?var0))
    (not (is_log ?var2))
)
```
","(:action check-out
    :parameters (?x - book)
    :precondition (and (accessible ?x) (not (checked-out ?x)))
    :effect (and (checked-out ?x) (not (accessible ?x)) (book-request ?x) (return-due ?x))
)",
libraryworld,check-out,-0.11630810052156448,Easy Negative (Inter-Domain Mismatch),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Envision a librarian assisting a patron who wishes to borrow a book. The 'check-out' action allows the librarian to mark a book as checked out, provided it is accessible and not already checked out. This action reflects the process of recording the book's status as borrowed and setting a return due date.

Action name: check-out


Your answer:
","Parameters:
1. ?var0 - static
2. ?var1 - static

Preconditions:
```
(agent_at ?var1)
```

Effects:
```
(and
    (agent_at ?var0)
    (not (agent_at ?var1))
)
```
","(:action check-out
    :parameters (?x - book)
    :precondition (and (accessible ?x) (not (checked-out ?x)))
    :effect (and (checked-out ?x) (not (accessible ?x)) (book-request ?x) (return-due ?x))
)",
libraryworld,check-out,0.09808149188756943,Easy Negative (Inter-Domain Mismatch),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Envision a librarian assisting a patron who wishes to borrow a book. The 'check-out' action allows the librarian to mark a book as checked out, provided it is accessible and not already checked out. This action reflects the process of recording the book's status as borrowed and setting a return due date.

Action name: check-out


Your answer:
","Parameters:
1. ?var0 - moveable
2. ?var1 - agent

Preconditions:
```
(and
    (inventory ?var0)
    (handsfree ?var1)
)
```

Effects:
```
(and
    (equipped ?var0 ?var1)
    (not (handsfree ?var1))
    (not (inventory ?var0))
)
```
","(:action check-out
    :parameters (?x - book)
    :precondition (and (accessible ?x) (not (checked-out ?x)))
    :effect (and (checked-out ?x) (not (accessible ?x)) (book-request ?x) (return-due ?x))
)",
libraryworld,check-out,0.01631728932261467,Easy Negative (Inter-Domain Mismatch),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Envision a librarian assisting a patron who wishes to borrow a book. The 'check-out' action allows the librarian to mark a book as checked out, provided it is accessible and not already checked out. This action reflects the process of recording the book's status as borrowed and setting a return due date.

Action name: check-out


Your answer:
","Parameters:
1. ?var0 - moveable
2. ?var1 - static

Preconditions:
```
(and
    (at ?var0 ?var1)
    (agent_at ?var1)
)
```

Effects:
```
(and
    (inventory ?var0)
    (not (at ?var0 ?var1))
)
```
","(:action check-out
    :parameters (?x - book)
    :precondition (and (accessible ?x) (not (checked-out ?x)))
    :effect (and (checked-out ?x) (not (accessible ?x)) (book-request ?x) (return-due ?x))
)",
libraryworld,check-out,0.0675392746925354,Easy Negative (Inter-Domain Mismatch),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Envision a librarian assisting a patron who wishes to borrow a book. The 'check-out' action allows the librarian to mark a book as checked out, provided it is accessible and not already checked out. This action reflects the process of recording the book's status as borrowed and setting a return due date.

Action name: check-out


Your answer:

**Explanation:** 

Imagine a librarian in a library who helps patrons borrow books. When a patron wants to borrow a book, the librarian needs to make sure certain conditions are met before they can check the book out. These conditions are called ""preconditions.""

For the action ""check-out,"" let's think about what needs to be true before the librarian can let the patron borrow the book:

1. **The book must be accessible:** This means the book is not covered by other books or objects, making it easy for the librarian to pick up. If the book isn't accessible, the librarian can't reach it to check it out.
2. **The book must not be already checked out:** If the book is already checked out to someone else, it can't be borrowed by another patron until it's returned.

Once these preconditions are met, the librarian can proceed with the check-out action. The action results in several changes, called ""effects,"" that update the status of the book:

1. **The book is marked as checked out:** This indicates that the book is now borrowed and can't be checked out by another patron until it's returned.
2. **The book is no longer accessible:** Since the book is borrowed, it's no longer available on the shelf for others to take.
3. **There is a request for the book:** This keeps track of the borrowing transaction.
4. **A return due date is set:** This helps the library know when to expect the book back.

To summarize, the preconditions ensure the librarian can access the book and that it isn't already borrowed. The effects update the system to show the book is now checked out, not accessible, and has a return due date.","Parameters:
1. ?from - cells
2. ?to - cells

Preconditions:
```
(and
    (connected ?from ?to)
    (at-hero ?from)
    (not (is-destroyed ?to))
    (not (has-trap ?from))
    (has-trap ?to)
    (arm-free)
)
```

Effects:
```
(and
    (at-hero ?to)
    (is-destroyed ?from)
    (not (at-hero ?from))
)
```
","(:action check-out
    :parameters (?x - book)
    :precondition (and (accessible ?x) (not (checked-out ?x)))
    :effect (and (checked-out ?x) (not (accessible ?x)) (book-request ?x) (return-due ?x))
)",
libraryworld,check-out,0.0897703617811203,Easy Negative (Inter-Domain Mismatch),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Envision a librarian assisting a patron who wishes to borrow a book. The 'check-out' action allows the librarian to mark a book as checked out, provided it is accessible and not already checked out. This action reflects the process of recording the book's status as borrowed and setting a return due date.

Action name: check-out


Your answer:

**Explanation:** 

Imagine a librarian in a library who helps patrons borrow books. When a patron wants to borrow a book, the librarian needs to make sure certain conditions are met before they can check the book out. These conditions are called ""preconditions.""

For the action ""check-out,"" let's think about what needs to be true before the librarian can let the patron borrow the book:

1. **The book must be accessible:** This means the book is not covered by other books or objects, making it easy for the librarian to pick up. If the book isn't accessible, the librarian can't reach it to check it out.
2. **The book must not be already checked out:** If the book is already checked out to someone else, it can't be borrowed by another patron until it's returned.

Once these preconditions are met, the librarian can proceed with the check-out action. The action results in several changes, called ""effects,"" that update the status of the book:

1. **The book is marked as checked out:** This indicates that the book is now borrowed and can't be checked out by another patron until it's returned.
2. **The book is no longer accessible:** Since the book is borrowed, it's no longer available on the shelf for others to take.
3. **There is a request for the book:** This keeps track of the borrowing transaction.
4. **A return due date is set:** This helps the library know when to expect the book back.

To summarize, the preconditions ensure the librarian can access the book and that it isn't already borrowed. The effects update the system to show the book is now checked out, not accessible, and has a return due date.","Parameters:
1. ?from - cells
2. ?to - cells

Preconditions:
```
(and
    (connected ?from ?to)
    (at-hero ?from)
    (not (has-trap ?from))
    (not (is-destroyed ?to))
    (not (has-trap ?to))
    (not (has-monster ?to))
)
```

Effects:
```
(and
    (at-hero ?to)
    (is-destroyed ?from)
    (not (at-hero ?from))
)
```
","(:action check-out
    :parameters (?x - book)
    :precondition (and (accessible ?x) (not (checked-out ?x)))
    :effect (and (checked-out ?x) (not (accessible ?x)) (book-request ?x) (return-due ?x))
)",
libraryworld,check-out,0.10826129466295242,Easy Negative (Inter-Domain Mismatch),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Envision a librarian assisting a patron who wishes to borrow a book. The 'check-out' action allows the librarian to mark a book as checked out, provided it is accessible and not already checked out. This action reflects the process of recording the book's status as borrowed and setting a return due date.

Action name: check-out


Your answer:

**Explanation:** 

Imagine a librarian in a library who helps patrons borrow books. When a patron wants to borrow a book, the librarian needs to make sure certain conditions are met before they can check the book out. These conditions are called ""preconditions.""

For the action ""check-out,"" let's think about what needs to be true before the librarian can let the patron borrow the book:

1. **The book must be accessible:** This means the book is not covered by other books or objects, making it easy for the librarian to pick up. If the book isn't accessible, the librarian can't reach it to check it out.
2. **The book must not be already checked out:** If the book is already checked out to someone else, it can't be borrowed by another patron until it's returned.

Once these preconditions are met, the librarian can proceed with the check-out action. The action results in several changes, called ""effects,"" that update the status of the book:

1. **The book is marked as checked out:** This indicates that the book is now borrowed and can't be checked out by another patron until it's returned.
2. **The book is no longer accessible:** Since the book is borrowed, it's no longer available on the shelf for others to take.
3. **There is a request for the book:** This keeps track of the borrowing transaction.
4. **A return due date is set:** This helps the library know when to expect the book back.

To summarize, the preconditions ensure the librarian can access the book and that it isn't already borrowed. The effects update the system to show the book is now checked out, not accessible, and has a return due date.","Parameters:
1. ?loc - cells
2. ?s - swords

Preconditions:
```
(and
    (at-hero ?loc)
    (at-sword ?s ?loc)
    (arm-free)
)
```

Effects:
```
(and
    (holding ?s)
    (not (at-sword ?s ?loc))
    (not (arm-free))
)
```
","(:action check-out
    :parameters (?x - book)
    :precondition (and (accessible ?x) (not (checked-out ?x)))
    :effect (and (checked-out ?x) (not (accessible ?x)) (book-request ?x) (return-due ?x))
)",
libraryworld,check-out,0.13337838649749756,Easy Negative (Inter-Domain Mismatch),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Envision a librarian assisting a patron who wishes to borrow a book. The 'check-out' action allows the librarian to mark a book as checked out, provided it is accessible and not already checked out. This action reflects the process of recording the book's status as borrowed and setting a return due date.

Action name: check-out


Your answer:

**Explanation:** 

Imagine a librarian in a library who helps patrons borrow books. When a patron wants to borrow a book, the librarian needs to make sure certain conditions are met before they can check the book out. These conditions are called ""preconditions.""

For the action ""check-out,"" let's think about what needs to be true before the librarian can let the patron borrow the book:

1. **The book must be accessible:** This means the book is not covered by other books or objects, making it easy for the librarian to pick up. If the book isn't accessible, the librarian can't reach it to check it out.
2. **The book must not be already checked out:** If the book is already checked out to someone else, it can't be borrowed by another patron until it's returned.

Once these preconditions are met, the librarian can proceed with the check-out action. The action results in several changes, called ""effects,"" that update the status of the book:

1. **The book is marked as checked out:** This indicates that the book is now borrowed and can't be checked out by another patron until it's returned.
2. **The book is no longer accessible:** Since the book is borrowed, it's no longer available on the shelf for others to take.
3. **There is a request for the book:** This keeps track of the borrowing transaction.
4. **A return due date is set:** This helps the library know when to expect the book back.

To summarize, the preconditions ensure the librarian can access the book and that it isn't already borrowed. The effects update the system to show the book is now checked out, not accessible, and has a return due date.","Parameters:
1. ?loc - cells

Preconditions:
```
(and
    (at-hero ?loc)
    (arm-free)
    (has-trap ?loc)
)
```

Effects:
```
(and
    (trap-disarmed ?loc)
    (not (has-trap ?loc))
)
```
","(:action check-out
    :parameters (?x - book)
    :precondition (and (accessible ?x) (not (checked-out ?x)))
    :effect (and (checked-out ?x) (not (accessible ?x)) (book-request ?x) (return-due ?x))
)",
libraryworld,check-out,0.18069863319396973,Easy Negative (Inter-Domain Mismatch),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Envision a librarian assisting a patron who wishes to borrow a book. The 'check-out' action allows the librarian to mark a book as checked out, provided it is accessible and not already checked out. This action reflects the process of recording the book's status as borrowed and setting a return due date.

Action name: check-out


Your answer:

**Explanation:** 

Imagine a librarian in a library who helps patrons borrow books. When a patron wants to borrow a book, the librarian needs to make sure certain conditions are met before they can check the book out. These conditions are called ""preconditions.""

For the action ""check-out,"" let's think about what needs to be true before the librarian can let the patron borrow the book:

1. **The book must be accessible:** This means the book is not covered by other books or objects, making it easy for the librarian to pick up. If the book isn't accessible, the librarian can't reach it to check it out.
2. **The book must not be already checked out:** If the book is already checked out to someone else, it can't be borrowed by another patron until it's returned.

Once these preconditions are met, the librarian can proceed with the check-out action. The action results in several changes, called ""effects,"" that update the status of the book:

1. **The book is marked as checked out:** This indicates that the book is now borrowed and can't be checked out by another patron until it's returned.
2. **The book is no longer accessible:** Since the book is borrowed, it's no longer available on the shelf for others to take.
3. **There is a request for the book:** This keeps track of the borrowing transaction.
4. **A return due date is set:** This helps the library know when to expect the book back.

To summarize, the preconditions ensure the librarian can access the book and that it isn't already borrowed. The effects update the system to show the book is now checked out, not accessible, and has a return due date.","Parameters:
1. ?from - cells
2. ?to - cells
3. ?s - swords

Preconditions:
```
(and
    (connected ?from ?to)
    (at-hero ?from)
    (has-monster ?to)
    (not (is-destroyed ?to))
    (not (has-trap ?from))
    (holding ?s)
)
```

Effects:
```
(and
    (at-hero ?to)
    (is-destroyed ?from)
    (not (at-hero ?from))
)
```
","(:action check-out
    :parameters (?x - book)
    :precondition (and (accessible ?x) (not (checked-out ?x)))
    :effect (and (checked-out ?x) (not (accessible ?x)) (book-request ?x) (return-due ?x))
)",
libraryworld,check-out,0.09276842325925827,Easy Negative (Inter-Domain Mismatch),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Envision a librarian assisting a patron who wishes to borrow a book. The 'check-out' action allows the librarian to mark a book as checked out, provided it is accessible and not already checked out. This action reflects the process of recording the book's status as borrowed and setting a return due date.

Action name: check-out


Your answer:

**Explanation:** 

Imagine a librarian in a library who helps patrons borrow books. When a patron wants to borrow a book, the librarian needs to make sure certain conditions are met before they can check the book out. These conditions are called ""preconditions.""

For the action ""check-out,"" let's think about what needs to be true before the librarian can let the patron borrow the book:

1. **The book must be accessible:** This means the book is not covered by other books or objects, making it easy for the librarian to pick up. If the book isn't accessible, the librarian can't reach it to check it out.
2. **The book must not be already checked out:** If the book is already checked out to someone else, it can't be borrowed by another patron until it's returned.

Once these preconditions are met, the librarian can proceed with the check-out action. The action results in several changes, called ""effects,"" that update the status of the book:

1. **The book is marked as checked out:** This indicates that the book is now borrowed and can't be checked out by another patron until it's returned.
2. **The book is no longer accessible:** Since the book is borrowed, it's no longer available on the shelf for others to take.
3. **There is a request for the book:** This keeps track of the borrowing transaction.
4. **A return due date is set:** This helps the library know when to expect the book back.

To summarize, the preconditions ensure the librarian can access the book and that it isn't already borrowed. The effects update the system to show the book is now checked out, not accessible, and has a return due date.","Parameters:
1. ?loc - cells
2. ?s - swords

Preconditions:
```
(and
    (at-hero ?loc)
    (holding ?s)
    (not (has-trap ?loc))
    (not (has-monster ?loc))
)
```

Effects:
```
(and
    (arm-free)
    (is-destroyed ?s)
    (not (holding ?s))
)
```
","(:action check-out
    :parameters (?x - book)
    :precondition (and (accessible ?x) (not (checked-out ?x)))
    :effect (and (checked-out ?x) (not (accessible ?x)) (book-request ?x) (return-due ?x))
)",
libraryworld,check-out,0.14298784732818604,Easy Negative (Inter-Domain Mismatch),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Envision a librarian assisting a patron who wishes to borrow a book. The 'check-out' action allows the librarian to mark a book as checked out, provided it is accessible and not already checked out. This action reflects the process of recording the book's status as borrowed and setting a return due date.

Action name: check-out


Your answer:
","**Explanation:**

Imagine you're guiding a hero who just woke up in a mysterious dungeon. Each room can have different things: some are empty, others have monsters, some have traps, and a few might have swords. There's also a special room with an exit—our hero's goal.

Now, let's talk about the action called **move-to-trap**. This action involves our hero moving from one room (we'll call it ""Room A"") to another room (""Room B""), where, unfortunately, there's a trap waiting. Here's why each part of the plan (or action schema) makes sense:

1. **Connected Rooms**: Our hero can only move to a room directly connected to the one they're currently in. This is like being in your house and only being able to walk into rooms that have doors leading from where you are now.

2. **Hero's Current Location**: The hero must start in Room A to move to Room B. You can't move from a place if you're not actually there, right?

3. **Room B Not Destroyed**: The room our hero is moving to mustn't be already destroyed (or in ruins). It's like making sure the bridge you want to cross hasn't collapsed.

4. **Room A Doesn't Have a Trap**: It’s safer if the room our hero is leaving doesn't have a trap. Imagine trying to leave a room with a trap; it could activate and cause trouble!

5. **Room B Has a Trap**: Since the action is called **move-to-trap**, it specifically involves moving to a room with a trap, almost like knowing there's a puddle ahead but stepping into it anyway because it's the only path forward.

6. **Hero's Arm is Free**: This indicates that the hero isn’t holding anything like a sword. It’s important because handling traps might require free hands—think about needing your hands free to disarm or avoid a trap carefully.

When our hero completes this action, several things happen:
- **Hero is now in Room B**: Just like when you walk into another room, you’re no longer in the first room.
- **Room A is destroyed**: This could mean the hero leaves it in a way that no one can follow—maybe they close a heavy door that locks automatically.
- **Hero is no longer in Room A**: It confirms that the hero has completely left Room A.

This action is designed for specific situations in the dungeon where the hero might need to move strategically, even into risky areas, to navigate through the dungeon and eventually find the exit.
Parameters:
1. ?from - cells
2. ?to - cells

Preconditions:
```
(and
    (connected ?from ?to)
    (at-hero ?from)
    (not (is-destroyed ?to))
    (not (has-trap ?from))
    (has-trap ?to)
    (arm-free)
)
```

Effects:
```
(and
    (at-hero ?to)
    (is-destroyed ?from)
    (not (at-hero ?from))
)
```
","(:action check-out
    :parameters (?x - book)
    :precondition (and (accessible ?x) (not (checked-out ?x)))
    :effect (and (checked-out ?x) (not (accessible ?x)) (book-request ?x) (return-due ?x))
)",
libraryworld,check-out,0.16679519414901733,Easy Negative (Inter-Domain Mismatch),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Envision a librarian assisting a patron who wishes to borrow a book. The 'check-out' action allows the librarian to mark a book as checked out, provided it is accessible and not already checked out. This action reflects the process of recording the book's status as borrowed and setting a return due date.

Action name: check-out


Your answer:
","**Explanation:**

Imagine our hero in a big, scary dungeon, just like a character from a fairy tale or a video game. The dungeon has several rooms, and some rooms are safe while others have monsters or traps. The hero's goal is to escape from this dungeon, moving from one room to another until he finds the exit.

Now, let's talk about the action called ""move"" that our hero can take. The action ""move"" lets the hero go from one room (we'll call this the ""current room"") to a connected room (let's call this the ""next room""). Think of the dungeon like a big house with many doors connecting the rooms; the hero can only move through a door if it’s open and the room on the other side is safe.

In the PDDL (a kind of programming language for planning what actions to take), the action ""move"" needs some conditions to be met before the hero can move:
1. **The rooms must be connected:** Just like you can't walk through a wall at home, the hero can only move to a room if there's a direct connection (like a doorway or a corridor).
2. **The hero must be in the current room:** The hero can only leave a room if he's actually in it.
3. **The current room shouldn’t have a trap that could hurt him.**
4. **The next room shouldn’t be destroyed:** The hero can't go into a room if it’s already been collapsed or destroyed (maybe from a previous adventure!).
5. **The next room shouldn’t have a trap or a monster:** This makes sure our hero doesn’t walk into new danger.

When the hero moves:
- **He is now in the next room:** Just like if you walk to another room in your house, you're then in that new room.
- **The room he left gets destroyed:** This might sound strange, but imagine if every time he left a room, the door magically closed and locked forever, so he can’t go back the same way.
- **He is no longer in the current room:** This is just confirming that he has moved on from the previous room.

These rules help our hero make smart moves through the dungeon, avoiding danger and making progress towards escape. This way of setting up the hero's actions makes sure he can navigate through the dungeon safely and eventually find his way out.
Parameters:
1. ?from - cells
2. ?to - cells

Preconditions:
```
(and
    (connected ?from ?to)
    (at-hero ?from)
    (not (has-trap ?from))
    (not (is-destroyed ?to))
    (not (has-trap ?to))
    (not (has-monster ?to))
)
```

Effects:
```
(and
    (at-hero ?to)
    (is-destroyed ?from)
    (not (at-hero ?from))
)
```
","(:action check-out
    :parameters (?x - book)
    :precondition (and (accessible ?x) (not (checked-out ?x)))
    :effect (and (checked-out ?x) (not (accessible ?x)) (book-request ?x) (return-due ?x))
)",
libraryworld,check-out,0.211978942155838,Easy Negative (Inter-Domain Mismatch),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Envision a librarian assisting a patron who wishes to borrow a book. The 'check-out' action allows the librarian to mark a book as checked out, provided it is accessible and not already checked out. This action reflects the process of recording the book's status as borrowed and setting a return due date.

Action name: check-out


Your answer:
","**Explanation:**

Imagine you're helping a hero navigate through a tricky dungeon filled with different challenges. The hero's objective is to escape, but along the way, they might find useful items like swords that can help protect against monsters.

In our scenario, the action of picking up a sword is crucial. Let's think of it like this: if you enter a room and see a sword on the floor while your hands are free, you can pick it up. The action schema in PDDL, which is a way to represent planning problems, explains this in a structured format.

The preconditions for our action ""pick-sword"" are:
1. **The hero must be in the same room as the sword** (represented as `(at-hero ?loc)` and `(at-sword ?s ?loc)`). This makes sense because you can't pick up something that's not in the same room as you.
2. **The hero's hand must be free** (`(arm-free)`). Just like you can't hold two grocery bags in one hand easily, our hero needs a free hand to pick up the sword.

The effects after the hero picks up the sword are:
1. **The hero is now holding the sword** (`(holding ?s)`). This indicates that the hero has successfully picked up the sword.
2. **The sword is no longer in its original place** (`(not (at-sword ?s ?loc))`). Just like if you take an apple from a basket, the apple isn't in the basket anymore.
3. **The hero's hand is no longer free** (`(not (arm-free))`). Holding the sword means the hand that was free is now occupied.

This action schema is a simple way to model the interaction between the hero and the sword in the dungeon. It helps ensure that all necessary conditions are met before the action takes place, making the hero's journey through the dungeon logical and structured. This way, the hero doesn't magically have a sword without picking it up or has two items in one hand, which keeps our dungeon adventure realistic and understandable.
Parameters:
1. ?loc - cells
2. ?s - swords

Preconditions:
```
(and
    (at-hero ?loc)
    (at-sword ?s ?loc)
    (arm-free)
)
```

Effects:
```
(and
    (holding ?s)
    (not (at-sword ?s ?loc))
    (not (arm-free))
)
```
","(:action check-out
    :parameters (?x - book)
    :precondition (and (accessible ?x) (not (checked-out ?x)))
    :effect (and (checked-out ?x) (not (accessible ?x)) (book-request ?x) (return-due ?x))
)",
libraryworld,check-out,0.09859811514616013,Easy Negative (Inter-Domain Mismatch),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Envision a librarian assisting a patron who wishes to borrow a book. The 'check-out' action allows the librarian to mark a book as checked out, provided it is accessible and not already checked out. This action reflects the process of recording the book's status as borrowed and setting a return due date.

Action name: check-out


Your answer:
","**Explanation:**

Imagine our hero in a dungeon, a place with rooms connected like a spider web. Each room can be just an empty space, or it might have something like a monster, a trap, or even a sword. Somewhere in this maze, there's a special room that has an exit—the ultimate goal for our hero.

Now, let's focus on a specific action our hero might need to take: **disarming a trap**. In our scenario, the hero finds themselves in a room with a trap. The action to disarm this trap is what we need to understand.

The action is named `disarm-trap`. This action, like any other, has specific requirements (preconditions) that must be met before the hero can perform it. These preconditions are:
1. **The hero must be in the same room as the trap.** This makes sense because you can't disarm a trap from another room. It's like needing to be in the kitchen to turn off a stove.
2. **The hero's hand must be free.** This means the hero can’t be holding anything, like a sword. It's a bit like needing both hands free to tie your shoes properly.
3. **There must actually be a trap in the room.** Obviously, the hero can't disarm a trap if there isn't one there!

If all these conditions are met, then the hero can go ahead and disarm the trap. The results (effects) of this action are:
1. **The trap in the room is disarmed.** This means the room is now safe from that trap.
2. **The trap is no longer considered to be in the room.** It's like cleaning up a spill; once it's cleaned, it's not there anymore.

By breaking down the action like this, we see how each condition helps ensure the action can be carried out safely and effectively. It’s just like following a recipe—each ingredient needs to be added at the right time for the dish to come out right!
Parameters:
1. ?loc - cells

Preconditions:
```
(and
    (at-hero ?loc)
    (arm-free)
    (has-trap ?loc)
)
```

Effects:
```
(and
    (trap-disarmed ?loc)
    (not (has-trap ?loc))
)
```
","(:action check-out
    :parameters (?x - book)
    :precondition (and (accessible ?x) (not (checked-out ?x)))
    :effect (and (checked-out ?x) (not (accessible ?x)) (book-request ?x) (return-due ?x))
)",
libraryworld,check-out,0.23667368292808533,Easy Negative (Inter-Domain Mismatch),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Envision a librarian assisting a patron who wishes to borrow a book. The 'check-out' action allows the librarian to mark a book as checked out, provided it is accessible and not already checked out. This action reflects the process of recording the book's status as borrowed and setting a return due date.

Action name: check-out


Your answer:
","**Explanation:**

Let's imagine our hero in the dungeon scenario. The hero wakes up and finds themselves in a room, wanting to move to an adjacent room where, unfortunately, there's a monster. Here's how we translate this scenario into a set of instructions, or a 'domain model,' in planning language.

The action we're talking about is called ""move-to-monster."" This means our hero is trying to move from one room (let’s call it Room A) to another room (Room B) where there is a monster. To ensure this action can happen, there are certain conditions that need to be met (these are called 'preconditions') and certain outcomes that will happen as a result of the action (these are called 'effects').

1. **Preconditions**:
   - **Connected Rooms**: Room A and Room B must be connected by a corridor. This makes sense because our hero can't magically jump from one room to another; there must be a path.
   - **Hero's Current Location**: The hero must currently be in Room A. If the hero isn't there, they can't start moving from it!
   - **Monster Presence**: Room B must have a monster. After all, the action is specifically about moving to a room with a monster.
   - **Room Integrity**: Room B should not be destroyed. A destroyed room might mean it’s collapsed or inaccessible, so it's logical our hero can’t move into it.
   - **Safety in Room A**: Room A should not have a trap. This makes sure our hero is safe and able to move without getting caught in a trap.
   - **Armed Hero**: The hero must be holding a sword. It’s a dangerous task to move into a room with a monster, so having a sword means the hero is prepared for a fight.

2. **Effects**:
   - **Hero's New Location**: After the action, the hero will be in Room B. They've successfully moved.
   - **Change in Room A's Status**: Room A becomes 'destroyed.' This might represent that the room is no longer safe or viable after the hero leaves, maybe because of the haste in escaping or some mechanism triggered by the departure.
   - **Update Hero's Old Location**: The fact that the hero was in Room A is no longer true, which is updated in our model to reflect the hero’s new position.

This planning helps organize our thoughts and actions logically, ensuring every step is clear and all necessary precautions are taken. Think of it like giving someone directions with a checklist: ""Before you go there, make sure this, this, and this are true, and once you do, this and this will happen."" This ensures everyone knows what to expect and how to prepare! 
Parameters:
1. ?from - cells
2. ?to - cells
3. ?s - swords

Preconditions:
```
(and
    (connected ?from ?to)
    (at-hero ?from)
    (has-monster ?to)
    (not (is-destroyed ?to))
    (not (has-trap ?from))
    (holding ?s)
)
```

Effects:
```
(and
    (at-hero ?to)
    (is-destroyed ?from)
    (not (at-hero ?from))
)
```
","(:action check-out
    :parameters (?x - book)
    :precondition (and (accessible ?x) (not (checked-out ?x)))
    :effect (and (checked-out ?x) (not (accessible ?x)) (book-request ?x) (return-due ?x))
)",
libraryworld,check-out,0.1307467818260193,Easy Negative (Inter-Domain Mismatch),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Envision a librarian assisting a patron who wishes to borrow a book. The 'check-out' action allows the librarian to mark a book as checked out, provided it is accessible and not already checked out. This action reflects the process of recording the book's status as borrowed and setting a return due date.

Action name: check-out


Your answer:
","**Explanation:**

Imagine you're helping a hero navigate a dungeon full of monsters and traps, a bit like playing a video game. Now, the hero has a sword, but in this part of the game, the hero decides to destroy the sword. To understand why certain conditions are checked before the hero can destroy the sword safely, let's break it down using the action ""destroy-sword"" from the game's rules (or in technical terms, the PDDL action schema).

Firstly, the hero needs to be in the same location as the sword. This makes sense, right? You can't throw something away or break it if it's not with you. So, the condition `(at-hero ?loc)` ensures that the hero is at the right spot to perform the action.

Secondly, the hero must be holding the sword. It’s similar to needing both hands on a bat to swing it; here, the hero needs to have the sword in hand to destroy it, checked by `(holding ?s)`.

But why check for no traps or monsters in the room? Think of it like trying to do something delicate, like assembling a model airplane, in a room with a loose tiger. Not a great idea, right? If there’s a monster in the room, destroying the sword might make the hero vulnerable to attack. Similarly, a trap could be triggered by the noise or movement, putting the hero in danger. So, `(not (has-trap ?loc))` and `(not (has-monster ?loc))` ensure that the environment is safe for the hero to break the sword without turning the situation worse.

Now, what happens after the sword is destroyed? The effect is that the hero’s hand is now free (`arm-free`), the sword is confirmed as destroyed (`is-destroyed ?s`), and the hero is no longer holding it (`not (holding ?s)`). It’s like cleaning up after finishing a task: put away the tools, clean up the mess, and free up your hands for the next task.

In simple terms, this action schema is like a set of instructions to make sure the hero does something risky (like destroying a sword) safely and responsibly, without making the dangerous dungeon situation even worse.
Parameters:
1. ?loc - cells
2. ?s - swords

Preconditions:
```
(and
    (at-hero ?loc)
    (holding ?s)
    (not (has-trap ?loc))
    (not (has-monster ?loc))
)
```

Effects:
```
(and
    (arm-free)
    (is-destroyed ?s)
    (not (holding ?s))
)
```
","(:action check-out
    :parameters (?x - book)
    :precondition (and (accessible ?x) (not (checked-out ?x)))
    :effect (and (checked-out ?x) (not (accessible ?x)) (book-request ?x) (return-due ?x))
)",
libraryworld,check-out,0.7851869463920593,Semi-Hard Negative (Intra-Domain Mismatch),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Envision a librarian assisting a patron who wishes to borrow a book. The 'check-out' action allows the librarian to mark a book as checked out, provided it is accessible and not already checked out. This action reflects the process of recording the book's status as borrowed and setting a return due date.

Action name: check-out


Your answer:
","Parameters:
1. ?x - book
2. ?y - book
3. ?cat - category

Preconditions:
```
(and
    (on-shelf ?x ?y)
    (accessible ?x)
    (hands-free)
    (belongs-to-category ?x ?cat)
)
```

Effects:
```
(and
    (holding ?x)
    (accessible ?y)
    (not (accessible ?x))
    (not (hands-free))
    (not (on-shelf ?x ?y))
    (shelf-empty ?cat)
)
```
","(:action check-out
    :parameters (?x - book)
    :precondition (and (accessible ?x) (not (checked-out ?x)))
    :effect (and (checked-out ?x) (not (accessible ?x)) (book-request ?x) (return-due ?x))
)",
libraryworld,check-out,0.5250560641288757,Semi-Hard Negative (Intra-Domain Mismatch),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Envision a librarian assisting a patron who wishes to borrow a book. The 'check-out' action allows the librarian to mark a book as checked out, provided it is accessible and not already checked out. This action reflects the process of recording the book's status as borrowed and setting a return due date.

Action name: check-out


Your answer:
","Parameters:
1. ?x - book

Preconditions:
```
(holding ?x)
```

Effects:
```
(and
    (not (holding ?x))
    (accessible ?x)
    (hands-free)
    (on-table ?x)
)
```
","(:action check-out
    :parameters (?x - book)
    :precondition (and (accessible ?x) (not (checked-out ?x)))
    :effect (and (checked-out ?x) (not (accessible ?x)) (book-request ?x) (return-due ?x))
)",
libraryworld,check-out,0.4014960527420044,Semi-Hard Negative (Intra-Domain Mismatch),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Envision a librarian assisting a patron who wishes to borrow a book. The 'check-out' action allows the librarian to mark a book as checked out, provided it is accessible and not already checked out. This action reflects the process of recording the book's status as borrowed and setting a return due date.

Action name: check-out


Your answer:
","Parameters:
1. ?x - book

Preconditions:
```
(and
    (checked-out ?x)
    (holding ?x)
)
```

Effects:
```
(and
    (not (checked-out ?x))
    (not (holding ?x))
    (not (book-request ?x))
    (not (return-due ?x))
    (accessible ?x)
    (hands-free)
)
```
","(:action check-out
    :parameters (?x - book)
    :precondition (and (accessible ?x) (not (checked-out ?x)))
    :effect (and (checked-out ?x) (not (accessible ?x)) (book-request ?x) (return-due ?x))
)",
libraryworld,check-out,0.6028046607971191,Semi-Hard Negative (Intra-Domain Mismatch),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Envision a librarian assisting a patron who wishes to borrow a book. The 'check-out' action allows the librarian to mark a book as checked out, provided it is accessible and not already checked out. This action reflects the process of recording the book's status as borrowed and setting a return due date.

Action name: check-out


Your answer:
","Parameters:
1. ?x - book

Preconditions:
```
(and
    (accessible ?x)
    (on-table ?x)
    (hands-free)
)
```

Effects:
```
(and
    (not (on-table ?x))
    (not (accessible ?x))
    (not (hands-free))
    (holding ?x)
)
```
","(:action check-out
    :parameters (?x - book)
    :precondition (and (accessible ?x) (not (checked-out ?x)))
    :effect (and (checked-out ?x) (not (accessible ?x)) (book-request ?x) (return-due ?x))
)",
libraryworld,check-out,0.8817847967147827,Semi-Hard Negative (Intra-Domain Mismatch),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Envision a librarian assisting a patron who wishes to borrow a book. The 'check-out' action allows the librarian to mark a book as checked out, provided it is accessible and not already checked out. This action reflects the process of recording the book's status as borrowed and setting a return due date.

Action name: check-out


Your answer:
","Parameters:
1. ?x - book
2. ?y - book
3. ?cat - category

Preconditions:
```
(and
    (holding ?x)
    (accessible ?y)
    (belongs-to-category ?x ?cat)
    (not (shelf-overflow ?cat))
)
```

Effects:
```
(and
    (not (holding ?x))
    (not (accessible ?y))
    (accessible ?x)
    (hands-free)
    (on-shelf ?x ?y)
    (shelf-empty ?cat)
)
```
","(:action check-out
    :parameters (?x - book)
    :precondition (and (accessible ?x) (not (checked-out ?x)))
    :effect (and (checked-out ?x) (not (accessible ?x)) (book-request ?x) (return-due ?x))
)",
libraryworld,check-out,0.7851869463920593,Semi-Hard Negative (Intra-Domain Mismatch),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Envision a librarian assisting a patron who wishes to borrow a book. The 'check-out' action allows the librarian to mark a book as checked out, provided it is accessible and not already checked out. This action reflects the process of recording the book's status as borrowed and setting a return due date.

Action name: check-out


Your answer:

**Explanation:** 

Imagine a librarian in a library who helps patrons borrow books. When a patron wants to borrow a book, the librarian needs to make sure certain conditions are met before they can check the book out. These conditions are called ""preconditions.""

For the action ""check-out,"" let's think about what needs to be true before the librarian can let the patron borrow the book:

1. **The book must be accessible:** This means the book is not covered by other books or objects, making it easy for the librarian to pick up. If the book isn't accessible, the librarian can't reach it to check it out.
2. **The book must not be already checked out:** If the book is already checked out to someone else, it can't be borrowed by another patron until it's returned.

Once these preconditions are met, the librarian can proceed with the check-out action. The action results in several changes, called ""effects,"" that update the status of the book:

1. **The book is marked as checked out:** This indicates that the book is now borrowed and can't be checked out by another patron until it's returned.
2. **The book is no longer accessible:** Since the book is borrowed, it's no longer available on the shelf for others to take.
3. **There is a request for the book:** This keeps track of the borrowing transaction.
4. **A return due date is set:** This helps the library know when to expect the book back.

To summarize, the preconditions ensure the librarian can access the book and that it isn't already borrowed. The effects update the system to show the book is now checked out, not accessible, and has a return due date.","Parameters:
1. ?x - book
2. ?y - book
3. ?cat - category

Preconditions:
```
(and
    (on-shelf ?x ?y)
    (accessible ?x)
    (hands-free)
    (belongs-to-category ?x ?cat)
)
```

Effects:
```
(and
    (holding ?x)
    (accessible ?y)
    (not (accessible ?x))
    (not (hands-free))
    (not (on-shelf ?x ?y))
    (shelf-empty ?cat)
)
```
","(:action check-out
    :parameters (?x - book)
    :precondition (and (accessible ?x) (not (checked-out ?x)))
    :effect (and (checked-out ?x) (not (accessible ?x)) (book-request ?x) (return-due ?x))
)",
libraryworld,check-out,0.5250560641288757,Semi-Hard Negative (Intra-Domain Mismatch),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Envision a librarian assisting a patron who wishes to borrow a book. The 'check-out' action allows the librarian to mark a book as checked out, provided it is accessible and not already checked out. This action reflects the process of recording the book's status as borrowed and setting a return due date.

Action name: check-out


Your answer:

**Explanation:** 

Imagine a librarian in a library who helps patrons borrow books. When a patron wants to borrow a book, the librarian needs to make sure certain conditions are met before they can check the book out. These conditions are called ""preconditions.""

For the action ""check-out,"" let's think about what needs to be true before the librarian can let the patron borrow the book:

1. **The book must be accessible:** This means the book is not covered by other books or objects, making it easy for the librarian to pick up. If the book isn't accessible, the librarian can't reach it to check it out.
2. **The book must not be already checked out:** If the book is already checked out to someone else, it can't be borrowed by another patron until it's returned.

Once these preconditions are met, the librarian can proceed with the check-out action. The action results in several changes, called ""effects,"" that update the status of the book:

1. **The book is marked as checked out:** This indicates that the book is now borrowed and can't be checked out by another patron until it's returned.
2. **The book is no longer accessible:** Since the book is borrowed, it's no longer available on the shelf for others to take.
3. **There is a request for the book:** This keeps track of the borrowing transaction.
4. **A return due date is set:** This helps the library know when to expect the book back.

To summarize, the preconditions ensure the librarian can access the book and that it isn't already borrowed. The effects update the system to show the book is now checked out, not accessible, and has a return due date.","Parameters:
1. ?x - book

Preconditions:
```
(holding ?x)
```

Effects:
```
(and
    (not (holding ?x))
    (accessible ?x)
    (hands-free)
    (on-table ?x)
)
```
","(:action check-out
    :parameters (?x - book)
    :precondition (and (accessible ?x) (not (checked-out ?x)))
    :effect (and (checked-out ?x) (not (accessible ?x)) (book-request ?x) (return-due ?x))
)",
libraryworld,check-out,0.4014960527420044,Semi-Hard Negative (Intra-Domain Mismatch),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Envision a librarian assisting a patron who wishes to borrow a book. The 'check-out' action allows the librarian to mark a book as checked out, provided it is accessible and not already checked out. This action reflects the process of recording the book's status as borrowed and setting a return due date.

Action name: check-out


Your answer:

**Explanation:** 

Imagine a librarian in a library who helps patrons borrow books. When a patron wants to borrow a book, the librarian needs to make sure certain conditions are met before they can check the book out. These conditions are called ""preconditions.""

For the action ""check-out,"" let's think about what needs to be true before the librarian can let the patron borrow the book:

1. **The book must be accessible:** This means the book is not covered by other books or objects, making it easy for the librarian to pick up. If the book isn't accessible, the librarian can't reach it to check it out.
2. **The book must not be already checked out:** If the book is already checked out to someone else, it can't be borrowed by another patron until it's returned.

Once these preconditions are met, the librarian can proceed with the check-out action. The action results in several changes, called ""effects,"" that update the status of the book:

1. **The book is marked as checked out:** This indicates that the book is now borrowed and can't be checked out by another patron until it's returned.
2. **The book is no longer accessible:** Since the book is borrowed, it's no longer available on the shelf for others to take.
3. **There is a request for the book:** This keeps track of the borrowing transaction.
4. **A return due date is set:** This helps the library know when to expect the book back.

To summarize, the preconditions ensure the librarian can access the book and that it isn't already borrowed. The effects update the system to show the book is now checked out, not accessible, and has a return due date.","Parameters:
1. ?x - book

Preconditions:
```
(and
    (checked-out ?x)
    (holding ?x)
)
```

Effects:
```
(and
    (not (checked-out ?x))
    (not (holding ?x))
    (not (book-request ?x))
    (not (return-due ?x))
    (accessible ?x)
    (hands-free)
)
```
","(:action check-out
    :parameters (?x - book)
    :precondition (and (accessible ?x) (not (checked-out ?x)))
    :effect (and (checked-out ?x) (not (accessible ?x)) (book-request ?x) (return-due ?x))
)",
libraryworld,check-out,0.6028046607971191,Semi-Hard Negative (Intra-Domain Mismatch),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Envision a librarian assisting a patron who wishes to borrow a book. The 'check-out' action allows the librarian to mark a book as checked out, provided it is accessible and not already checked out. This action reflects the process of recording the book's status as borrowed and setting a return due date.

Action name: check-out


Your answer:

**Explanation:** 

Imagine a librarian in a library who helps patrons borrow books. When a patron wants to borrow a book, the librarian needs to make sure certain conditions are met before they can check the book out. These conditions are called ""preconditions.""

For the action ""check-out,"" let's think about what needs to be true before the librarian can let the patron borrow the book:

1. **The book must be accessible:** This means the book is not covered by other books or objects, making it easy for the librarian to pick up. If the book isn't accessible, the librarian can't reach it to check it out.
2. **The book must not be already checked out:** If the book is already checked out to someone else, it can't be borrowed by another patron until it's returned.

Once these preconditions are met, the librarian can proceed with the check-out action. The action results in several changes, called ""effects,"" that update the status of the book:

1. **The book is marked as checked out:** This indicates that the book is now borrowed and can't be checked out by another patron until it's returned.
2. **The book is no longer accessible:** Since the book is borrowed, it's no longer available on the shelf for others to take.
3. **There is a request for the book:** This keeps track of the borrowing transaction.
4. **A return due date is set:** This helps the library know when to expect the book back.

To summarize, the preconditions ensure the librarian can access the book and that it isn't already borrowed. The effects update the system to show the book is now checked out, not accessible, and has a return due date.","Parameters:
1. ?x - book

Preconditions:
```
(and
    (accessible ?x)
    (on-table ?x)
    (hands-free)
)
```

Effects:
```
(and
    (not (on-table ?x))
    (not (accessible ?x))
    (not (hands-free))
    (holding ?x)
)
```
","(:action check-out
    :parameters (?x - book)
    :precondition (and (accessible ?x) (not (checked-out ?x)))
    :effect (and (checked-out ?x) (not (accessible ?x)) (book-request ?x) (return-due ?x))
)",
libraryworld,check-out,0.8817847967147827,Semi-Hard Negative (Intra-Domain Mismatch),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Envision a librarian assisting a patron who wishes to borrow a book. The 'check-out' action allows the librarian to mark a book as checked out, provided it is accessible and not already checked out. This action reflects the process of recording the book's status as borrowed and setting a return due date.

Action name: check-out


Your answer:

**Explanation:** 

Imagine a librarian in a library who helps patrons borrow books. When a patron wants to borrow a book, the librarian needs to make sure certain conditions are met before they can check the book out. These conditions are called ""preconditions.""

For the action ""check-out,"" let's think about what needs to be true before the librarian can let the patron borrow the book:

1. **The book must be accessible:** This means the book is not covered by other books or objects, making it easy for the librarian to pick up. If the book isn't accessible, the librarian can't reach it to check it out.
2. **The book must not be already checked out:** If the book is already checked out to someone else, it can't be borrowed by another patron until it's returned.

Once these preconditions are met, the librarian can proceed with the check-out action. The action results in several changes, called ""effects,"" that update the status of the book:

1. **The book is marked as checked out:** This indicates that the book is now borrowed and can't be checked out by another patron until it's returned.
2. **The book is no longer accessible:** Since the book is borrowed, it's no longer available on the shelf for others to take.
3. **There is a request for the book:** This keeps track of the borrowing transaction.
4. **A return due date is set:** This helps the library know when to expect the book back.

To summarize, the preconditions ensure the librarian can access the book and that it isn't already borrowed. The effects update the system to show the book is now checked out, not accessible, and has a return due date.","Parameters:
1. ?x - book
2. ?y - book
3. ?cat - category

Preconditions:
```
(and
    (holding ?x)
    (accessible ?y)
    (belongs-to-category ?x ?cat)
    (not (shelf-overflow ?cat))
)
```

Effects:
```
(and
    (not (holding ?x))
    (not (accessible ?y))
    (accessible ?x)
    (hands-free)
    (on-shelf ?x ?y)
    (shelf-empty ?cat)
)
```
","(:action check-out
    :parameters (?x - book)
    :precondition (and (accessible ?x) (not (checked-out ?x)))
    :effect (and (checked-out ?x) (not (accessible ?x)) (book-request ?x) (return-due ?x))
)",
libraryworld,check-out,0.7177783846855164,Semi-Hard Negative (Intra-Domain Mismatch),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Envision a librarian assisting a patron who wishes to borrow a book. The 'check-out' action allows the librarian to mark a book as checked out, provided it is accessible and not already checked out. This action reflects the process of recording the book's status as borrowed and setting a return due date.

Action name: check-out


Your answer:
","**Explanation:** 

Imagine you are a librarian in a library, and you need to take a book off the shelf. This book is placed on top of another book. The action ""remove-from-shelf"" lets you take the top book off the shelf. To do this, certain conditions, called ""preconditions,"" must be met to make sure you can successfully take the book.

For the action ""remove-from-shelf,"" let's break down what needs to be true before you can take the book off the shelf:

1. **The book must be on the shelf:** This means the book you want to take is on top of another book on the shelf.
2. **The book must be accessible:** This means the book isn't covered by other books or objects, so you can easily reach it.
3. **Your hands must be free:** You need to have empty hands to pick up the book, meaning you aren't already holding something else.
4. **The book must belong to a certain category:** This helps you know which book you are taking and ensures you are organizing the books properly.

Once these preconditions are met, you can proceed with the ""remove-from-shelf"" action. This action results in several changes, called ""effects,"" that update the status of the books and your hands:

1. **You are now holding the book:** This indicates you have picked up the book from the shelf.
2. **The book underneath becomes accessible:** Since you have removed the top book, the book underneath is now easy to reach.
3. **The book you removed is no longer accessible:** Because you are holding the book, it's not available on the shelf anymore.
4. **Your hands are no longer free:** Since you are now holding the book, your hands are occupied.
5. **The book is no longer on the shelf:** This shows that the book has been taken off the shelf.
6. **The shelf is now empty for that category:** This helps keep track of the shelf space and organization.

To summarize, the preconditions ensure the book is on the shelf, accessible, your hands are free, and you know which category the book belongs to. The effects update the situation to show you are holding the book, the book underneath is now accessible, and the shelf is empty for that category.
Parameters:
1. ?x - book
2. ?y - book
3. ?cat - category

Preconditions:
```
(and
    (on-shelf ?x ?y)
    (accessible ?x)
    (hands-free)
    (belongs-to-category ?x ?cat)
)
```

Effects:
```
(and
    (holding ?x)
    (accessible ?y)
    (not (accessible ?x))
    (not (hands-free))
    (not (on-shelf ?x ?y))
    (shelf-empty ?cat)
)
```
","(:action check-out
    :parameters (?x - book)
    :precondition (and (accessible ?x) (not (checked-out ?x)))
    :effect (and (checked-out ?x) (not (accessible ?x)) (book-request ?x) (return-due ?x))
)",
libraryworld,check-out,0.6384035348892212,Semi-Hard Negative (Intra-Domain Mismatch),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Envision a librarian assisting a patron who wishes to borrow a book. The 'check-out' action allows the librarian to mark a book as checked out, provided it is accessible and not already checked out. This action reflects the process of recording the book's status as borrowed and setting a return due date.

Action name: check-out


Your answer:
","**Explanation:** 

Imagine you are a librarian holding a book in your hands, and you want to place it on a nearby table. The action ""place-on-table"" lets you do this. To make sure everything goes smoothly, there is a condition, called a ""precondition,"" that must be met before you can place the book on the table.

For the action ""place-on-table,"" let's break down what needs to be true before you can place the book on the table:

1. **You must be holding the book:** This means you have the book in your hands, ready to place it on the table.

Once this precondition is met, you can proceed with the ""place-on-table"" action. This action results in several changes, called ""effects,"" that update the status of the book and your hands:

1. **You are no longer holding the book:** This shows that you have placed the book on the table.
2. **The book becomes accessible:** Now that the book is on the table, it is easy to reach and pick up again if needed.
3. **Your hands are now free:** Since you have placed the book on the table, your hands are empty again.
4. **The book is on the table:** This indicates the new location of the book.

To summarize, the precondition ensures you are holding the book, making sure you are ready to place it on the table. The effects update the situation to show that you have placed the book on the table, it is now accessible, and your hands are free again.
Parameters:
1. ?x - book

Preconditions:
```
(holding ?x)
```

Effects:
```
(and
    (not (holding ?x))
    (accessible ?x)
    (hands-free)
    (on-table ?x)
)
```
","(:action check-out
    :parameters (?x - book)
    :precondition (and (accessible ?x) (not (checked-out ?x)))
    :effect (and (checked-out ?x) (not (accessible ?x)) (book-request ?x) (return-due ?x))
)",
libraryworld,check-out,0.6513895988464355,Semi-Hard Negative (Intra-Domain Mismatch),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Envision a librarian assisting a patron who wishes to borrow a book. The 'check-out' action allows the librarian to mark a book as checked out, provided it is accessible and not already checked out. This action reflects the process of recording the book's status as borrowed and setting a return due date.

Action name: check-out


Your answer:
","**Explanation:** 

Imagine a patron is returning a borrowed book to the library. The librarian needs to process this return to update the book's status and remove any return due date. The action ""return-book"" describes how the librarian can do this. There are specific conditions, called ""preconditions,"" that must be met to ensure the return can be processed correctly.

For the action ""return-book,"" let's break down what needs to be true before the librarian can return the book:

1. **The book must be checked out:** This means the book is currently borrowed by someone and needs to be returned.
2. **The librarian must be holding the book:** This indicates the librarian has the book in their hands, ready to process the return.

Once these preconditions are met, the librarian can proceed with the ""return-book"" action. This action results in several changes, called ""effects,"" that update the status of the book and the librarian's hands:

1. **The book is no longer checked out:** This shows that the book has been returned and is available for borrowing again.
2. **The librarian is no longer holding the book:** This indicates the librarian has processed the return and placed the book back in its proper place.
3. **Any request for the book is removed:** If there was a request for this book, it is no longer needed since the book is now available.
4. **The return due date is removed:** This updates the system to show that the book is no longer due for return.
5. **The book becomes accessible:** Now that the book is back in the library, it is easy to find and borrow again.
6. **The librarian's hands are now free:** Since the librarian has finished processing the return, their hands are empty and ready for the next task.

To summarize, the preconditions ensure the book is currently borrowed and the librarian has it in their hands, ready to return. The effects update the situation to show that the book is no longer checked out, any requests and due dates are removed, the book is accessible again, and the librarian's hands are free.
Parameters:
1. ?x - book

Preconditions:
```
(and
    (checked-out ?x)
    (holding ?x)
)
```

Effects:
```
(and
    (not (checked-out ?x))
    (not (holding ?x))
    (not (book-request ?x))
    (not (return-due ?x))
    (accessible ?x)
    (hands-free)
)
```
","(:action check-out
    :parameters (?x - book)
    :precondition (and (accessible ?x) (not (checked-out ?x)))
    :effect (and (checked-out ?x) (not (accessible ?x)) (book-request ?x) (return-due ?x))
)",
libraryworld,check-out,0.5846755504608154,Semi-Hard Negative (Intra-Domain Mismatch),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Envision a librarian assisting a patron who wishes to borrow a book. The 'check-out' action allows the librarian to mark a book as checked out, provided it is accessible and not already checked out. This action reflects the process of recording the book's status as borrowed and setting a return due date.

Action name: check-out


Your answer:
","**Explanation:** 

Imagine you're a librarian in a library, and there's a table full of books that need to be sorted. You want to pick up one of these books. To do this, certain conditions, called ""preconditions,"" must be met to ensure you can successfully pick up the book.

For the action ""take-from-table,"" let's break down what needs to be true before you can pick up a book:

1. **The book must be accessible:** This means the book isn't covered by other books or objects, so you can easily reach it.
2. **The book must be on the table:** This indicates the book is physically located on the table, not somewhere else like a shelf.
3. **Your hands must be free:** You need to have empty hands to pick up the book, meaning you aren't already holding something else.

Once these preconditions are met, you can proceed with the ""take-from-table"" action. This action results in several changes, called ""effects,"" that update the status of the book and your hands:

1. **The book is no longer on the table:** This indicates you've picked up the book from the table.
2. **The book is no longer accessible:** Since you're holding the book, it's not available for someone else to pick up from the table.
3. **Your hands are no longer free:** Because you're now holding the book, your hands are occupied.
4. **You are holding the book:** This shows that the book is now in your hands.

To summarize, the preconditions ensure you can reach the book, it's on the table, and your hands are free to pick it up. The effects update the situation to reflect that the book is now in your hands and no longer on the table or accessible to others.
Parameters:
1. ?x - book

Preconditions:
```
(and
    (accessible ?x)
    (on-table ?x)
    (hands-free)
)
```

Effects:
```
(and
    (not (on-table ?x))
    (not (accessible ?x))
    (not (hands-free))
    (holding ?x)
)
```
","(:action check-out
    :parameters (?x - book)
    :precondition (and (accessible ?x) (not (checked-out ?x)))
    :effect (and (checked-out ?x) (not (accessible ?x)) (book-request ?x) (return-due ?x))
)",
libraryworld,check-out,0.7562538981437683,Semi-Hard Negative (Intra-Domain Mismatch),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Envision a librarian assisting a patron who wishes to borrow a book. The 'check-out' action allows the librarian to mark a book as checked out, provided it is accessible and not already checked out. This action reflects the process of recording the book's status as borrowed and setting a return due date.

Action name: check-out


Your answer:
","**Explanation:** 

Imagine you are a librarian standing near a shelf, holding a book in your hands. You want to place this book on top of another book that is already on the shelf. This action, called ""place-on-shelf,"" needs to follow certain rules, called ""preconditions,"" to make sure everything goes smoothly.

For the action ""place-on-shelf,"" let's break down what needs to be true before you can place the book on the shelf:

1. **You must be holding the book:** This means you have the book in your hands, ready to place it on the shelf.
2. **The book on the shelf must be accessible:** The book already on the shelf should not be covered by other books or objects, so you can easily place your book on top of it.
3. **The book you are holding must belong to a certain category:** This helps in organizing the books properly according to their categories.
4. **The shelf should not be overflowing:** There should be enough space on the shelf to place another book.

Once these preconditions are met, you can proceed with the ""place-on-shelf"" action. This action results in several changes, called ""effects,"" that update the status of the books and your hands:

1. **You are no longer holding the book:** This shows that you have placed the book on the shelf.
2. **The book on the shelf is no longer accessible:** Because the new book is now on top of it, making it covered.
3. **The book you placed is now accessible:** This indicates the book you just placed is easy to reach.
4. **Your hands are now free:** Since you have placed the book on the shelf, your hands are empty again.
5. **The new book is on the shelf on top of the other book:** This shows the new book's position.
6. **The shelf is now considered empty for that category:** This helps in tracking the organization and availability of shelf space for that category.

To summarize, the preconditions ensure you are holding the book, the shelf has space, and the book on the shelf is accessible. The effects update the situation to show that you have placed the book on the shelf, the new book is accessible, and your hands are free again.
Parameters:
1. ?x - book
2. ?y - book
3. ?cat - category

Preconditions:
```
(and
    (holding ?x)
    (accessible ?y)
    (belongs-to-category ?x ?cat)
    (not (shelf-overflow ?cat))
)
```

Effects:
```
(and
    (not (holding ?x))
    (not (accessible ?y))
    (accessible ?x)
    (hands-free)
    (on-shelf ?x ?y)
    (shelf-empty ?cat)
)
```
","(:action check-out
    :parameters (?x - book)
    :precondition (and (accessible ?x) (not (checked-out ?x)))
    :effect (and (checked-out ?x) (not (accessible ?x)) (book-request ?x) (return-due ?x))
)",
libraryworld,check-out,0.25918108224868774,Hard Negative (Manipulated Action),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Envision a librarian assisting a patron who wishes to borrow a book. The 'check-out' action allows the librarian to mark a book as checked out, provided it is accessible and not already checked out. This action reflects the process of recording the book's status as borrowed and setting a return due date.

Action name: check-out


Your answer:
","Parameters:
1. ?x - book

Preconditions:
```
(and
    (checked-out ?x)
    (accessible ?x)
)
```

Effects:
```
(and
    (checked-out ?x)
    (not (accessible ?x))
    (book-request ?x)
)
```
","(:action check-out
    :parameters (?x - book)
    :precondition (and (accessible ?x) (not (checked-out ?x)))
    :effect (and (checked-out ?x) (not (accessible ?x)) (book-request ?x) (return-due ?x))
)","remove (return-due ?x) from effects
negate (not (checked-out ?x)) in preconditions
"
libraryworld,check-out,0.18319934606552124,Hard Negative (Manipulated Action),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Envision a librarian assisting a patron who wishes to borrow a book. The 'check-out' action allows the librarian to mark a book as checked out, provided it is accessible and not already checked out. This action reflects the process of recording the book's status as borrowed and setting a return due date.

Action name: check-out


Your answer:
","Parameters:
1. ?x - book

Preconditions:
```
(and
    (return-due ?x)
    (accessible ?x)
)
```

Effects:
```
(and
    (not (checked-out ?x))
    (checked-out ?x)
    (not (accessible ?x))
    (book-request ?x)
)
```
","(:action check-out
    :parameters (?x - book)
    :precondition (and (accessible ?x) (not (checked-out ?x)))
    :effect (and (checked-out ?x) (not (accessible ?x)) (book-request ?x) (return-due ?x))
)","swap (not (checked-out ?x)) with (return-due ?x)
"
libraryworld,check-out,0.09429039806127548,Hard Negative (Manipulated Action),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Envision a librarian assisting a patron who wishes to borrow a book. The 'check-out' action allows the librarian to mark a book as checked out, provided it is accessible and not already checked out. This action reflects the process of recording the book's status as borrowed and setting a return due date.

Action name: check-out


Your answer:
","Parameters:
1. ?x - book

Preconditions:
```
(not (accessible ?x))
```

Effects:
```
(and
    (not (checked-out ?x))
    (checked-out ?x)
    (book-request ?x)
    (return-due ?x)
)
```
","(:action check-out
    :parameters (?x - book)
    :precondition (and (accessible ?x) (not (checked-out ?x)))
    :effect (and (checked-out ?x) (not (accessible ?x)) (book-request ?x) (return-due ?x))
)","remove (accessible ?x) from preconditions
swap (not (checked-out ?x)) with (not (accessible ?x))
"
libraryworld,check-out,0.31904035806655884,Hard Negative (Manipulated Action),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Envision a librarian assisting a patron who wishes to borrow a book. The 'check-out' action allows the librarian to mark a book as checked out, provided it is accessible and not already checked out. This action reflects the process of recording the book's status as borrowed and setting a return due date.

Action name: check-out


Your answer:
","Parameters:
1. ?x - book

Preconditions:
```
(and
    (checked-out ?x)
    (return-due ?x)
)
```

Effects:
```
(and
    (accessible ?x)
    (not (checked-out ?x))
    (not (accessible ?x))
    (book-request ?x)
)
```
","(:action check-out
    :parameters (?x - book)
    :precondition (and (accessible ?x) (not (checked-out ?x)))
    :effect (and (checked-out ?x) (not (accessible ?x)) (book-request ?x) (return-due ?x))
)","swap (accessible ?x) with (checked-out ?x)
swap (not (checked-out ?x)) with (return-due ?x)
"
libraryworld,check-out,0.21413461863994598,Hard Negative (Manipulated Action),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Envision a librarian assisting a patron who wishes to borrow a book. The 'check-out' action allows the librarian to mark a book as checked out, provided it is accessible and not already checked out. This action reflects the process of recording the book's status as borrowed and setting a return due date.

Action name: check-out


Your answer:
","Parameters:
1. ?x - book

Preconditions:
```
(and
    (not (accessible ?x))
    (not (checked-out ?x))
)
```

Effects:
```
(and
    (not (book-request ?x))
    (checked-out ?x)
    (not (accessible ?x))
    (return-due ?x)
)
```
","(:action check-out
    :parameters (?x - book)
    :precondition (and (accessible ?x) (not (checked-out ?x)))
    :effect (and (checked-out ?x) (not (accessible ?x)) (book-request ?x) (return-due ?x))
)","negate (accessible ?x) in preconditions
negate (book-request ?x) in effects
"
libraryworld,check-out,0.3216255009174347,Hard Negative (Manipulated Action),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Envision a librarian assisting a patron who wishes to borrow a book. The 'check-out' action allows the librarian to mark a book as checked out, provided it is accessible and not already checked out. This action reflects the process of recording the book's status as borrowed and setting a return due date.

Action name: check-out


Your answer:
","Parameters:
1. ?x - book

Preconditions:
```
(and
    (accessible ?x)
    (not (checked-out ?x))
)
```

Effects:
```
(and
    (not (book-request ?x))
    (checked-out ?x)
    (not (accessible ?x))
    (return-due ?x)
)
```
","(:action check-out
    :parameters (?x - book)
    :precondition (and (accessible ?x) (not (checked-out ?x)))
    :effect (and (checked-out ?x) (not (accessible ?x)) (book-request ?x) (return-due ?x))
)","negate (book-request ?x) in effects
"
libraryworld,check-out,0.35020679235458374,Hard Negative (Manipulated Action),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Envision a librarian assisting a patron who wishes to borrow a book. The 'check-out' action allows the librarian to mark a book as checked out, provided it is accessible and not already checked out. This action reflects the process of recording the book's status as borrowed and setting a return due date.

Action name: check-out


Your answer:
","Parameters:
1. ?x - book

Preconditions:
```
(and
    (checked-out ?x)
    (book-request ?x)
)
```

Effects:
```
(and
    (accessible ?x)
    (not (checked-out ?x))
    (not (accessible ?x))
    (return-due ?x)
)
```
","(:action check-out
    :parameters (?x - book)
    :precondition (and (accessible ?x) (not (checked-out ?x)))
    :effect (and (checked-out ?x) (not (accessible ?x)) (book-request ?x) (return-due ?x))
)","swap (accessible ?x) with (checked-out ?x)
swap (not (checked-out ?x)) with (book-request ?x)
"
libraryworld,check-out,0.23812513053417206,Hard Negative (Manipulated Action),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Envision a librarian assisting a patron who wishes to borrow a book. The 'check-out' action allows the librarian to mark a book as checked out, provided it is accessible and not already checked out. This action reflects the process of recording the book's status as borrowed and setting a return due date.

Action name: check-out


Your answer:
","Parameters:
1. ?x - book

Preconditions:
```
(and
    (accessible ?x)
    (not (checked-out ?x))
)
```

Effects:
```
(and
    (not (return-due ?x))
    (not (checked-out ?x))
    (not (accessible ?x))
    (book-request ?x)
)
```
","(:action check-out
    :parameters (?x - book)
    :precondition (and (accessible ?x) (not (checked-out ?x)))
    :effect (and (checked-out ?x) (not (accessible ?x)) (book-request ?x) (return-due ?x))
)","negate (return-due ?x) in effects
negate (checked-out ?x) in effects
"
libraryworld,check-out,0.1904209703207016,Hard Negative (Manipulated Action),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Envision a librarian assisting a patron who wishes to borrow a book. The 'check-out' action allows the librarian to mark a book as checked out, provided it is accessible and not already checked out. This action reflects the process of recording the book's status as borrowed and setting a return due date.

Action name: check-out


Your answer:
","Parameters:
1. ?x - book

Preconditions:
```
(and
    (not (accessible ?x))
    (not (checked-out ?x))
)
```

Effects:
```
(and
    (accessible ?x)
    (checked-out ?x)
    (return-due ?x)
)
```
","(:action check-out
    :parameters (?x - book)
    :precondition (and (accessible ?x) (not (checked-out ?x)))
    :effect (and (checked-out ?x) (not (accessible ?x)) (book-request ?x) (return-due ?x))
)","swap (accessible ?x) with (not (accessible ?x))
remove (book-request ?x) from effects
"
libraryworld,check-out,0.1789066642522812,Hard Negative (Manipulated Action),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Envision a librarian assisting a patron who wishes to borrow a book. The 'check-out' action allows the librarian to mark a book as checked out, provided it is accessible and not already checked out. This action reflects the process of recording the book's status as borrowed and setting a return due date.

Action name: check-out


Your answer:
","Parameters:
1. ?x - book

Preconditions:
```
(and
    (not (accessible ?x))
    (not (checked-out ?x))
)
```

Effects:
```
(and
    (not (return-due ?x))
    (checked-out ?x)
    (not (accessible ?x))
    (book-request ?x)
)
```
","(:action check-out
    :parameters (?x - book)
    :precondition (and (accessible ?x) (not (checked-out ?x)))
    :effect (and (checked-out ?x) (not (accessible ?x)) (book-request ?x) (return-due ?x))
)","negate (accessible ?x) in preconditions
negate (return-due ?x) in effects
"
libraryworld,check-out,0.21367838978767395,Hard Negative (Manipulated Action),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Envision a librarian assisting a patron who wishes to borrow a book. The 'check-out' action allows the librarian to mark a book as checked out, provided it is accessible and not already checked out. This action reflects the process of recording the book's status as borrowed and setting a return due date.

Action name: check-out


Your answer:

**Explanation:** 

Imagine a librarian in a library who helps patrons borrow books. When a patron wants to borrow a book, the librarian needs to make sure certain conditions are met before they can check the book out. These conditions are called ""preconditions.""

For the action ""check-out,"" let's think about what needs to be true before the librarian can let the patron borrow the book:

1. **The book must be accessible:** This means the book is not covered by other books or objects, making it easy for the librarian to pick up. If the book isn't accessible, the librarian can't reach it to check it out.
2. **The book must not be already checked out:** If the book is already checked out to someone else, it can't be borrowed by another patron until it's returned.

Once these preconditions are met, the librarian can proceed with the check-out action. The action results in several changes, called ""effects,"" that update the status of the book:

1. **The book is marked as checked out:** This indicates that the book is now borrowed and can't be checked out by another patron until it's returned.
2. **The book is no longer accessible:** Since the book is borrowed, it's no longer available on the shelf for others to take.
3. **There is a request for the book:** This keeps track of the borrowing transaction.
4. **A return due date is set:** This helps the library know when to expect the book back.

To summarize, the preconditions ensure the librarian can access the book and that it isn't already borrowed. The effects update the system to show the book is now checked out, not accessible, and has a return due date.","Parameters:
1. ?x - book

Preconditions:
```
(and
    (accessible ?x)
    (not (checked-out ?x))
)
```

Effects:
```
(and
    (not (return-due ?x))
    (checked-out ?x)
    (not (accessible ?x))
    (book-request ?x)
)
```
","(:action check-out
    :parameters (?x - book)
    :precondition (and (accessible ?x) (not (checked-out ?x)))
    :effect (and (checked-out ?x) (not (accessible ?x)) (book-request ?x) (return-due ?x))
)","negate (return-due ?x) in effects
"
libraryworld,check-out,0.2324846088886261,Hard Negative (Manipulated Action),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Envision a librarian assisting a patron who wishes to borrow a book. The 'check-out' action allows the librarian to mark a book as checked out, provided it is accessible and not already checked out. This action reflects the process of recording the book's status as borrowed and setting a return due date.

Action name: check-out


Your answer:

**Explanation:** 

Imagine a librarian in a library who helps patrons borrow books. When a patron wants to borrow a book, the librarian needs to make sure certain conditions are met before they can check the book out. These conditions are called ""preconditions.""

For the action ""check-out,"" let's think about what needs to be true before the librarian can let the patron borrow the book:

1. **The book must be accessible:** This means the book is not covered by other books or objects, making it easy for the librarian to pick up. If the book isn't accessible, the librarian can't reach it to check it out.
2. **The book must not be already checked out:** If the book is already checked out to someone else, it can't be borrowed by another patron until it's returned.

Once these preconditions are met, the librarian can proceed with the check-out action. The action results in several changes, called ""effects,"" that update the status of the book:

1. **The book is marked as checked out:** This indicates that the book is now borrowed and can't be checked out by another patron until it's returned.
2. **The book is no longer accessible:** Since the book is borrowed, it's no longer available on the shelf for others to take.
3. **There is a request for the book:** This keeps track of the borrowing transaction.
4. **A return due date is set:** This helps the library know when to expect the book back.

To summarize, the preconditions ensure the librarian can access the book and that it isn't already borrowed. The effects update the system to show the book is now checked out, not accessible, and has a return due date.","Parameters:
1. ?x - book

Preconditions:
```
(and
    (not (accessible ?x))
    (book-request ?x)
)
```

Effects:
```
(and
    (not (checked-out ?x))
    (accessible ?x)
    (checked-out ?x)
    (return-due ?x)
)
```
","(:action check-out
    :parameters (?x - book)
    :precondition (and (accessible ?x) (not (checked-out ?x)))
    :effect (and (checked-out ?x) (not (accessible ?x)) (book-request ?x) (return-due ?x))
)","swap (not (checked-out ?x)) with (not (accessible ?x))
swap (accessible ?x) with (book-request ?x)
"
libraryworld,check-out,0.2600487470626831,Hard Negative (Manipulated Action),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Envision a librarian assisting a patron who wishes to borrow a book. The 'check-out' action allows the librarian to mark a book as checked out, provided it is accessible and not already checked out. This action reflects the process of recording the book's status as borrowed and setting a return due date.

Action name: check-out


Your answer:

**Explanation:** 

Imagine a librarian in a library who helps patrons borrow books. When a patron wants to borrow a book, the librarian needs to make sure certain conditions are met before they can check the book out. These conditions are called ""preconditions.""

For the action ""check-out,"" let's think about what needs to be true before the librarian can let the patron borrow the book:

1. **The book must be accessible:** This means the book is not covered by other books or objects, making it easy for the librarian to pick up. If the book isn't accessible, the librarian can't reach it to check it out.
2. **The book must not be already checked out:** If the book is already checked out to someone else, it can't be borrowed by another patron until it's returned.

Once these preconditions are met, the librarian can proceed with the check-out action. The action results in several changes, called ""effects,"" that update the status of the book:

1. **The book is marked as checked out:** This indicates that the book is now borrowed and can't be checked out by another patron until it's returned.
2. **The book is no longer accessible:** Since the book is borrowed, it's no longer available on the shelf for others to take.
3. **There is a request for the book:** This keeps track of the borrowing transaction.
4. **A return due date is set:** This helps the library know when to expect the book back.

To summarize, the preconditions ensure the librarian can access the book and that it isn't already borrowed. The effects update the system to show the book is now checked out, not accessible, and has a return due date.","Parameters:
1. ?x - book

Preconditions:
```
(and
    (checked-out ?x)
    (accessible ?x)
)
```

Effects:
```
(and
    (not (checked-out ?x))
    (not (accessible ?x))
    (return-due ?x)
)
```
","(:action check-out
    :parameters (?x - book)
    :precondition (and (accessible ?x) (not (checked-out ?x)))
    :effect (and (checked-out ?x) (not (accessible ?x)) (book-request ?x) (return-due ?x))
)","remove (book-request ?x) from effects
swap (not (checked-out ?x)) with (checked-out ?x)
"
libraryworld,check-out,0.5326496362686157,Hard Negative (Manipulated Action),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Envision a librarian assisting a patron who wishes to borrow a book. The 'check-out' action allows the librarian to mark a book as checked out, provided it is accessible and not already checked out. This action reflects the process of recording the book's status as borrowed and setting a return due date.

Action name: check-out


Your answer:

**Explanation:** 

Imagine a librarian in a library who helps patrons borrow books. When a patron wants to borrow a book, the librarian needs to make sure certain conditions are met before they can check the book out. These conditions are called ""preconditions.""

For the action ""check-out,"" let's think about what needs to be true before the librarian can let the patron borrow the book:

1. **The book must be accessible:** This means the book is not covered by other books or objects, making it easy for the librarian to pick up. If the book isn't accessible, the librarian can't reach it to check it out.
2. **The book must not be already checked out:** If the book is already checked out to someone else, it can't be borrowed by another patron until it's returned.

Once these preconditions are met, the librarian can proceed with the check-out action. The action results in several changes, called ""effects,"" that update the status of the book:

1. **The book is marked as checked out:** This indicates that the book is now borrowed and can't be checked out by another patron until it's returned.
2. **The book is no longer accessible:** Since the book is borrowed, it's no longer available on the shelf for others to take.
3. **There is a request for the book:** This keeps track of the borrowing transaction.
4. **A return due date is set:** This helps the library know when to expect the book back.

To summarize, the preconditions ensure the librarian can access the book and that it isn't already borrowed. The effects update the system to show the book is now checked out, not accessible, and has a return due date.","Parameters:
1. ?x - book

Preconditions:
```
(and
    (accessible ?x)
    (not (checked-out ?x))
)
```

Effects:
```
(and
    (checked-out ?x)
    (book-request ?x)
    (return-due ?x)
)
```
","(:action check-out
    :parameters (?x - book)
    :precondition (and (accessible ?x) (not (checked-out ?x)))
    :effect (and (checked-out ?x) (not (accessible ?x)) (book-request ?x) (return-due ?x))
)","remove (not (accessible ?x)) from effects
"
libraryworld,check-out,0.5201720595359802,Hard Negative (Manipulated Action),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Envision a librarian assisting a patron who wishes to borrow a book. The 'check-out' action allows the librarian to mark a book as checked out, provided it is accessible and not already checked out. This action reflects the process of recording the book's status as borrowed and setting a return due date.

Action name: check-out


Your answer:

**Explanation:** 

Imagine a librarian in a library who helps patrons borrow books. When a patron wants to borrow a book, the librarian needs to make sure certain conditions are met before they can check the book out. These conditions are called ""preconditions.""

For the action ""check-out,"" let's think about what needs to be true before the librarian can let the patron borrow the book:

1. **The book must be accessible:** This means the book is not covered by other books or objects, making it easy for the librarian to pick up. If the book isn't accessible, the librarian can't reach it to check it out.
2. **The book must not be already checked out:** If the book is already checked out to someone else, it can't be borrowed by another patron until it's returned.

Once these preconditions are met, the librarian can proceed with the check-out action. The action results in several changes, called ""effects,"" that update the status of the book:

1. **The book is marked as checked out:** This indicates that the book is now borrowed and can't be checked out by another patron until it's returned.
2. **The book is no longer accessible:** Since the book is borrowed, it's no longer available on the shelf for others to take.
3. **There is a request for the book:** This keeps track of the borrowing transaction.
4. **A return due date is set:** This helps the library know when to expect the book back.

To summarize, the preconditions ensure the librarian can access the book and that it isn't already borrowed. The effects update the system to show the book is now checked out, not accessible, and has a return due date.","Parameters:
1. ?x - book

Preconditions:
```
(and
    (accessible ?x)
    (not (checked-out ?x))
)
```

Effects:
```
(and
    (checked-out ?x)
    (not (accessible ?x))
    (return-due ?x)
)
```
","(:action check-out
    :parameters (?x - book)
    :precondition (and (accessible ?x) (not (checked-out ?x)))
    :effect (and (checked-out ?x) (not (accessible ?x)) (book-request ?x) (return-due ?x))
)","remove (book-request ?x) from effects
"
libraryworld,check-out,0.6758006811141968,Hard Negative (Manipulated Action),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Envision a librarian assisting a patron who wishes to borrow a book. The 'check-out' action allows the librarian to mark a book as checked out, provided it is accessible and not already checked out. This action reflects the process of recording the book's status as borrowed and setting a return due date.

Action name: check-out


Your answer:

**Explanation:** 

Imagine a librarian in a library who helps patrons borrow books. When a patron wants to borrow a book, the librarian needs to make sure certain conditions are met before they can check the book out. These conditions are called ""preconditions.""

For the action ""check-out,"" let's think about what needs to be true before the librarian can let the patron borrow the book:

1. **The book must be accessible:** This means the book is not covered by other books or objects, making it easy for the librarian to pick up. If the book isn't accessible, the librarian can't reach it to check it out.
2. **The book must not be already checked out:** If the book is already checked out to someone else, it can't be borrowed by another patron until it's returned.

Once these preconditions are met, the librarian can proceed with the check-out action. The action results in several changes, called ""effects,"" that update the status of the book:

1. **The book is marked as checked out:** This indicates that the book is now borrowed and can't be checked out by another patron until it's returned.
2. **The book is no longer accessible:** Since the book is borrowed, it's no longer available on the shelf for others to take.
3. **There is a request for the book:** This keeps track of the borrowing transaction.
4. **A return due date is set:** This helps the library know when to expect the book back.

To summarize, the preconditions ensure the librarian can access the book and that it isn't already borrowed. The effects update the system to show the book is now checked out, not accessible, and has a return due date.","Parameters:
1. ?x - book

Preconditions:
```
(and
    (accessible ?x)
    (not (checked-out ?x))
)
```

Effects:
```
(and
    (accessible ?x)
    (not (checked-out ?x))
    (book-request ?x)
    (return-due ?x)
)
```
","(:action check-out
    :parameters (?x - book)
    :precondition (and (accessible ?x) (not (checked-out ?x)))
    :effect (and (checked-out ?x) (not (accessible ?x)) (book-request ?x) (return-due ?x))
)","negate (not (accessible ?x)) in effects
negate (checked-out ?x) in effects
"
libraryworld,check-out,0.28209054470062256,Hard Negative (Manipulated Action),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Envision a librarian assisting a patron who wishes to borrow a book. The 'check-out' action allows the librarian to mark a book as checked out, provided it is accessible and not already checked out. This action reflects the process of recording the book's status as borrowed and setting a return due date.

Action name: check-out


Your answer:

**Explanation:** 

Imagine a librarian in a library who helps patrons borrow books. When a patron wants to borrow a book, the librarian needs to make sure certain conditions are met before they can check the book out. These conditions are called ""preconditions.""

For the action ""check-out,"" let's think about what needs to be true before the librarian can let the patron borrow the book:

1. **The book must be accessible:** This means the book is not covered by other books or objects, making it easy for the librarian to pick up. If the book isn't accessible, the librarian can't reach it to check it out.
2. **The book must not be already checked out:** If the book is already checked out to someone else, it can't be borrowed by another patron until it's returned.

Once these preconditions are met, the librarian can proceed with the check-out action. The action results in several changes, called ""effects,"" that update the status of the book:

1. **The book is marked as checked out:** This indicates that the book is now borrowed and can't be checked out by another patron until it's returned.
2. **The book is no longer accessible:** Since the book is borrowed, it's no longer available on the shelf for others to take.
3. **There is a request for the book:** This keeps track of the borrowing transaction.
4. **A return due date is set:** This helps the library know when to expect the book back.

To summarize, the preconditions ensure the librarian can access the book and that it isn't already borrowed. The effects update the system to show the book is now checked out, not accessible, and has a return due date.","Parameters:
1. ?x - book

Preconditions:
```
(and
    (book-request ?x)
    (not (checked-out ?x))
)
```

Effects:
```
(and
    (accessible ?x)
    (not (accessible ?x))
    (return-due ?x)
)
```
","(:action check-out
    :parameters (?x - book)
    :precondition (and (accessible ?x) (not (checked-out ?x)))
    :effect (and (checked-out ?x) (not (accessible ?x)) (book-request ?x) (return-due ?x))
)","swap (accessible ?x) with (book-request ?x)
remove (checked-out ?x) from effects
"
libraryworld,check-out,0.2871277630329132,Hard Negative (Manipulated Action),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Envision a librarian assisting a patron who wishes to borrow a book. The 'check-out' action allows the librarian to mark a book as checked out, provided it is accessible and not already checked out. This action reflects the process of recording the book's status as borrowed and setting a return due date.

Action name: check-out


Your answer:

**Explanation:** 

Imagine a librarian in a library who helps patrons borrow books. When a patron wants to borrow a book, the librarian needs to make sure certain conditions are met before they can check the book out. These conditions are called ""preconditions.""

For the action ""check-out,"" let's think about what needs to be true before the librarian can let the patron borrow the book:

1. **The book must be accessible:** This means the book is not covered by other books or objects, making it easy for the librarian to pick up. If the book isn't accessible, the librarian can't reach it to check it out.
2. **The book must not be already checked out:** If the book is already checked out to someone else, it can't be borrowed by another patron until it's returned.

Once these preconditions are met, the librarian can proceed with the check-out action. The action results in several changes, called ""effects,"" that update the status of the book:

1. **The book is marked as checked out:** This indicates that the book is now borrowed and can't be checked out by another patron until it's returned.
2. **The book is no longer accessible:** Since the book is borrowed, it's no longer available on the shelf for others to take.
3. **There is a request for the book:** This keeps track of the borrowing transaction.
4. **A return due date is set:** This helps the library know when to expect the book back.

To summarize, the preconditions ensure the librarian can access the book and that it isn't already borrowed. The effects update the system to show the book is now checked out, not accessible, and has a return due date.","Parameters:
1. ?x - book

Preconditions:
```
(and
    (checked-out ?x)
    (accessible ?x)
)
```

Effects:
```
(and
    (not (checked-out ?x))
    (book-request ?x)
    (return-due ?x)
)
```
","(:action check-out
    :parameters (?x - book)
    :precondition (and (accessible ?x) (not (checked-out ?x)))
    :effect (and (checked-out ?x) (not (accessible ?x)) (book-request ?x) (return-due ?x))
)","swap (not (checked-out ?x)) with (checked-out ?x)
remove (not (accessible ?x)) from effects
"
libraryworld,check-out,0.12778323888778687,Hard Negative (Manipulated Action),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Envision a librarian assisting a patron who wishes to borrow a book. The 'check-out' action allows the librarian to mark a book as checked out, provided it is accessible and not already checked out. This action reflects the process of recording the book's status as borrowed and setting a return due date.

Action name: check-out


Your answer:

**Explanation:** 

Imagine a librarian in a library who helps patrons borrow books. When a patron wants to borrow a book, the librarian needs to make sure certain conditions are met before they can check the book out. These conditions are called ""preconditions.""

For the action ""check-out,"" let's think about what needs to be true before the librarian can let the patron borrow the book:

1. **The book must be accessible:** This means the book is not covered by other books or objects, making it easy for the librarian to pick up. If the book isn't accessible, the librarian can't reach it to check it out.
2. **The book must not be already checked out:** If the book is already checked out to someone else, it can't be borrowed by another patron until it's returned.

Once these preconditions are met, the librarian can proceed with the check-out action. The action results in several changes, called ""effects,"" that update the status of the book:

1. **The book is marked as checked out:** This indicates that the book is now borrowed and can't be checked out by another patron until it's returned.
2. **The book is no longer accessible:** Since the book is borrowed, it's no longer available on the shelf for others to take.
3. **There is a request for the book:** This keeps track of the borrowing transaction.
4. **A return due date is set:** This helps the library know when to expect the book back.

To summarize, the preconditions ensure the librarian can access the book and that it isn't already borrowed. The effects update the system to show the book is now checked out, not accessible, and has a return due date.","Parameters:
1. ?x - book

Preconditions:
```
(and
    (not (accessible ?x))
    (accessible ?x)
)
```

Effects:
```
(and
    (not (checked-out ?x))
    (checked-out ?x)
    (return-due ?x)
)
```
","(:action check-out
    :parameters (?x - book)
    :precondition (and (accessible ?x) (not (checked-out ?x)))
    :effect (and (checked-out ?x) (not (accessible ?x)) (book-request ?x) (return-due ?x))
)","swap (not (checked-out ?x)) with (not (accessible ?x))
remove (book-request ?x) from effects
"
libraryworld,check-out,0.1198272779583931,Hard Negative (Manipulated Action),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Envision a librarian assisting a patron who wishes to borrow a book. The 'check-out' action allows the librarian to mark a book as checked out, provided it is accessible and not already checked out. This action reflects the process of recording the book's status as borrowed and setting a return due date.

Action name: check-out


Your answer:

**Explanation:** 

Imagine a librarian in a library who helps patrons borrow books. When a patron wants to borrow a book, the librarian needs to make sure certain conditions are met before they can check the book out. These conditions are called ""preconditions.""

For the action ""check-out,"" let's think about what needs to be true before the librarian can let the patron borrow the book:

1. **The book must be accessible:** This means the book is not covered by other books or objects, making it easy for the librarian to pick up. If the book isn't accessible, the librarian can't reach it to check it out.
2. **The book must not be already checked out:** If the book is already checked out to someone else, it can't be borrowed by another patron until it's returned.

Once these preconditions are met, the librarian can proceed with the check-out action. The action results in several changes, called ""effects,"" that update the status of the book:

1. **The book is marked as checked out:** This indicates that the book is now borrowed and can't be checked out by another patron until it's returned.
2. **The book is no longer accessible:** Since the book is borrowed, it's no longer available on the shelf for others to take.
3. **There is a request for the book:** This keeps track of the borrowing transaction.
4. **A return due date is set:** This helps the library know when to expect the book back.

To summarize, the preconditions ensure the librarian can access the book and that it isn't already borrowed. The effects update the system to show the book is now checked out, not accessible, and has a return due date.","Parameters:
1. ?x - book

Preconditions:
```
(not (checked-out ?x))
```

Effects:
```
(and
    (checked-out ?x)
    (not (accessible ?x))
    (book-request ?x)
    (return-due ?x)
)
```
","(:action check-out
    :parameters (?x - book)
    :precondition (and (accessible ?x) (not (checked-out ?x)))
    :effect (and (checked-out ?x) (not (accessible ?x)) (book-request ?x) (return-due ?x))
)","remove (accessible ?x) from preconditions
"
libraryworld,check-out,0.6450090408325195,Hard Negative (Manipulated Action),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Envision a librarian assisting a patron who wishes to borrow a book. The 'check-out' action allows the librarian to mark a book as checked out, provided it is accessible and not already checked out. This action reflects the process of recording the book's status as borrowed and setting a return due date.

Action name: check-out


Your answer:
","**Explanation:** 

Imagine a librarian in a library who helps patrons borrow books. When a patron wants to borrow a book, the librarian needs to make sure certain conditions are met before they can check the book out. These conditions are called ""preconditions.""

For the action ""check-out,"" let's think about what needs to be true before the librarian can let the patron borrow the book:

1. **The book must be accessible:** This means the book is not covered by other books or objects, making it easy for the librarian to pick up. If the book isn't accessible, the librarian can't reach it to check it out.
2. **The book must not be already checked out:** If the book is already checked out to someone else, it can't be borrowed by another patron until it's returned.

Once these preconditions are met, the librarian can proceed with the check-out action. The action results in several changes, called ""effects,"" that update the status of the book:

1. **The book is marked as checked out:** This indicates that the book is now borrowed and can't be checked out by another patron until it's returned.
2. **The book is no longer accessible:** Since the book is borrowed, it's no longer available on the shelf for others to take.
3. **There is a request for the book:** This keeps track of the borrowing transaction.
4. **A return due date is set:** This helps the library know when to expect the book back.

To summarize, the preconditions ensure the librarian can access the book and that it isn't already borrowed. The effects update the system to show the book is now checked out, not accessible, and has a return due date.
Parameters:
1. ?x - book

Preconditions:
```
(and
    (not (accessible ?x))
    (not (checked-out ?x))
)
```

Effects:
```
(and
    (checked-out ?x)
    (not (accessible ?x))
    (book-request ?x)
    (return-due ?x)
)
```
","(:action check-out
    :parameters (?x - book)
    :precondition (and (accessible ?x) (not (checked-out ?x)))
    :effect (and (checked-out ?x) (not (accessible ?x)) (book-request ?x) (return-due ?x))
)","negate (accessible ?x) in preconditions
"
libraryworld,check-out,0.6450090408325195,Hard Negative (Manipulated Action),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Envision a librarian assisting a patron who wishes to borrow a book. The 'check-out' action allows the librarian to mark a book as checked out, provided it is accessible and not already checked out. This action reflects the process of recording the book's status as borrowed and setting a return due date.

Action name: check-out


Your answer:
","**Explanation:** 

Imagine a librarian in a library who helps patrons borrow books. When a patron wants to borrow a book, the librarian needs to make sure certain conditions are met before they can check the book out. These conditions are called ""preconditions.""

For the action ""check-out,"" let's think about what needs to be true before the librarian can let the patron borrow the book:

1. **The book must be accessible:** This means the book is not covered by other books or objects, making it easy for the librarian to pick up. If the book isn't accessible, the librarian can't reach it to check it out.
2. **The book must not be already checked out:** If the book is already checked out to someone else, it can't be borrowed by another patron until it's returned.

Once these preconditions are met, the librarian can proceed with the check-out action. The action results in several changes, called ""effects,"" that update the status of the book:

1. **The book is marked as checked out:** This indicates that the book is now borrowed and can't be checked out by another patron until it's returned.
2. **The book is no longer accessible:** Since the book is borrowed, it's no longer available on the shelf for others to take.
3. **There is a request for the book:** This keeps track of the borrowing transaction.
4. **A return due date is set:** This helps the library know when to expect the book back.

To summarize, the preconditions ensure the librarian can access the book and that it isn't already borrowed. The effects update the system to show the book is now checked out, not accessible, and has a return due date.
Parameters:
1. ?x - book

Preconditions:
```
(not (checked-out ?x))
```

Effects:
```
(and
    (checked-out ?x)
    (not (accessible ?x))
    (book-request ?x)
    (return-due ?x)
)
```
","(:action check-out
    :parameters (?x - book)
    :precondition (and (accessible ?x) (not (checked-out ?x)))
    :effect (and (checked-out ?x) (not (accessible ?x)) (book-request ?x) (return-due ?x))
)","remove (accessible ?x) from preconditions
"
libraryworld,check-out,0.6450090408325195,Hard Negative (Manipulated Action),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Envision a librarian assisting a patron who wishes to borrow a book. The 'check-out' action allows the librarian to mark a book as checked out, provided it is accessible and not already checked out. This action reflects the process of recording the book's status as borrowed and setting a return due date.

Action name: check-out


Your answer:
","**Explanation:** 

Imagine a librarian in a library who helps patrons borrow books. When a patron wants to borrow a book, the librarian needs to make sure certain conditions are met before they can check the book out. These conditions are called ""preconditions.""

For the action ""check-out,"" let's think about what needs to be true before the librarian can let the patron borrow the book:

1. **The book must be accessible:** This means the book is not covered by other books or objects, making it easy for the librarian to pick up. If the book isn't accessible, the librarian can't reach it to check it out.
2. **The book must not be already checked out:** If the book is already checked out to someone else, it can't be borrowed by another patron until it's returned.

Once these preconditions are met, the librarian can proceed with the check-out action. The action results in several changes, called ""effects,"" that update the status of the book:

1. **The book is marked as checked out:** This indicates that the book is now borrowed and can't be checked out by another patron until it's returned.
2. **The book is no longer accessible:** Since the book is borrowed, it's no longer available on the shelf for others to take.
3. **There is a request for the book:** This keeps track of the borrowing transaction.
4. **A return due date is set:** This helps the library know when to expect the book back.

To summarize, the preconditions ensure the librarian can access the book and that it isn't already borrowed. The effects update the system to show the book is now checked out, not accessible, and has a return due date.
Parameters:
1. ?x - book

Preconditions:
```
(not (checked-out ?x))
```

Effects:
```
(and
    (checked-out ?x)
    (book-request ?x)
    (return-due ?x)
)
```
","(:action check-out
    :parameters (?x - book)
    :precondition (and (accessible ?x) (not (checked-out ?x)))
    :effect (and (checked-out ?x) (not (accessible ?x)) (book-request ?x) (return-due ?x))
)","remove (accessible ?x) from preconditions
remove (not (accessible ?x)) from effects
"
libraryworld,check-out,0.6450090408325195,Hard Negative (Manipulated Action),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Envision a librarian assisting a patron who wishes to borrow a book. The 'check-out' action allows the librarian to mark a book as checked out, provided it is accessible and not already checked out. This action reflects the process of recording the book's status as borrowed and setting a return due date.

Action name: check-out


Your answer:
","**Explanation:** 

Imagine a librarian in a library who helps patrons borrow books. When a patron wants to borrow a book, the librarian needs to make sure certain conditions are met before they can check the book out. These conditions are called ""preconditions.""

For the action ""check-out,"" let's think about what needs to be true before the librarian can let the patron borrow the book:

1. **The book must be accessible:** This means the book is not covered by other books or objects, making it easy for the librarian to pick up. If the book isn't accessible, the librarian can't reach it to check it out.
2. **The book must not be already checked out:** If the book is already checked out to someone else, it can't be borrowed by another patron until it's returned.

Once these preconditions are met, the librarian can proceed with the check-out action. The action results in several changes, called ""effects,"" that update the status of the book:

1. **The book is marked as checked out:** This indicates that the book is now borrowed and can't be checked out by another patron until it's returned.
2. **The book is no longer accessible:** Since the book is borrowed, it's no longer available on the shelf for others to take.
3. **There is a request for the book:** This keeps track of the borrowing transaction.
4. **A return due date is set:** This helps the library know when to expect the book back.

To summarize, the preconditions ensure the librarian can access the book and that it isn't already borrowed. The effects update the system to show the book is now checked out, not accessible, and has a return due date.
Parameters:
1. ?x - book

Preconditions:
```
(and
    (not (accessible ?x))
    (not (checked-out ?x))
)
```

Effects:
```
(and
    (accessible ?x)
    (checked-out ?x)
    (book-request ?x)
)
```
","(:action check-out
    :parameters (?x - book)
    :precondition (and (accessible ?x) (not (checked-out ?x)))
    :effect (and (checked-out ?x) (not (accessible ?x)) (book-request ?x) (return-due ?x))
)","swap (accessible ?x) with (not (accessible ?x))
remove (return-due ?x) from effects
"
libraryworld,check-out,0.6450090408325195,Hard Negative (Manipulated Action),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Envision a librarian assisting a patron who wishes to borrow a book. The 'check-out' action allows the librarian to mark a book as checked out, provided it is accessible and not already checked out. This action reflects the process of recording the book's status as borrowed and setting a return due date.

Action name: check-out


Your answer:
","**Explanation:** 

Imagine a librarian in a library who helps patrons borrow books. When a patron wants to borrow a book, the librarian needs to make sure certain conditions are met before they can check the book out. These conditions are called ""preconditions.""

For the action ""check-out,"" let's think about what needs to be true before the librarian can let the patron borrow the book:

1. **The book must be accessible:** This means the book is not covered by other books or objects, making it easy for the librarian to pick up. If the book isn't accessible, the librarian can't reach it to check it out.
2. **The book must not be already checked out:** If the book is already checked out to someone else, it can't be borrowed by another patron until it's returned.

Once these preconditions are met, the librarian can proceed with the check-out action. The action results in several changes, called ""effects,"" that update the status of the book:

1. **The book is marked as checked out:** This indicates that the book is now borrowed and can't be checked out by another patron until it's returned.
2. **The book is no longer accessible:** Since the book is borrowed, it's no longer available on the shelf for others to take.
3. **There is a request for the book:** This keeps track of the borrowing transaction.
4. **A return due date is set:** This helps the library know when to expect the book back.

To summarize, the preconditions ensure the librarian can access the book and that it isn't already borrowed. The effects update the system to show the book is now checked out, not accessible, and has a return due date.
Parameters:
1. ?x - book

Preconditions:
```
(and
    (return-due ?x)
    (not (checked-out ?x))
)
```

Effects:
```
(and
    (accessible ?x)
    (checked-out ?x)
    (not (accessible ?x))
    (book-request ?x)
)
```
","(:action check-out
    :parameters (?x - book)
    :precondition (and (accessible ?x) (not (checked-out ?x)))
    :effect (and (checked-out ?x) (not (accessible ?x)) (book-request ?x) (return-due ?x))
)","swap (accessible ?x) with (return-due ?x)
"
libraryworld,check-out,0.6450090408325195,Hard Negative (Manipulated Action),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Envision a librarian assisting a patron who wishes to borrow a book. The 'check-out' action allows the librarian to mark a book as checked out, provided it is accessible and not already checked out. This action reflects the process of recording the book's status as borrowed and setting a return due date.

Action name: check-out


Your answer:
","**Explanation:** 

Imagine a librarian in a library who helps patrons borrow books. When a patron wants to borrow a book, the librarian needs to make sure certain conditions are met before they can check the book out. These conditions are called ""preconditions.""

For the action ""check-out,"" let's think about what needs to be true before the librarian can let the patron borrow the book:

1. **The book must be accessible:** This means the book is not covered by other books or objects, making it easy for the librarian to pick up. If the book isn't accessible, the librarian can't reach it to check it out.
2. **The book must not be already checked out:** If the book is already checked out to someone else, it can't be borrowed by another patron until it's returned.

Once these preconditions are met, the librarian can proceed with the check-out action. The action results in several changes, called ""effects,"" that update the status of the book:

1. **The book is marked as checked out:** This indicates that the book is now borrowed and can't be checked out by another patron until it's returned.
2. **The book is no longer accessible:** Since the book is borrowed, it's no longer available on the shelf for others to take.
3. **There is a request for the book:** This keeps track of the borrowing transaction.
4. **A return due date is set:** This helps the library know when to expect the book back.

To summarize, the preconditions ensure the librarian can access the book and that it isn't already borrowed. The effects update the system to show the book is now checked out, not accessible, and has a return due date.
Parameters:
1. ?x - book

Preconditions:
```
(not (checked-out ?x))
```

Effects:
```
(and
    (checked-out ?x)
    (not (accessible ?x))
    (book-request ?x)
    (return-due ?x)
)
```
","(:action check-out
    :parameters (?x - book)
    :precondition (and (accessible ?x) (not (checked-out ?x)))
    :effect (and (checked-out ?x) (not (accessible ?x)) (book-request ?x) (return-due ?x))
)","remove (accessible ?x) from preconditions
"
libraryworld,check-out,0.6450090408325195,Hard Negative (Manipulated Action),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Envision a librarian assisting a patron who wishes to borrow a book. The 'check-out' action allows the librarian to mark a book as checked out, provided it is accessible and not already checked out. This action reflects the process of recording the book's status as borrowed and setting a return due date.

Action name: check-out


Your answer:
","**Explanation:** 

Imagine a librarian in a library who helps patrons borrow books. When a patron wants to borrow a book, the librarian needs to make sure certain conditions are met before they can check the book out. These conditions are called ""preconditions.""

For the action ""check-out,"" let's think about what needs to be true before the librarian can let the patron borrow the book:

1. **The book must be accessible:** This means the book is not covered by other books or objects, making it easy for the librarian to pick up. If the book isn't accessible, the librarian can't reach it to check it out.
2. **The book must not be already checked out:** If the book is already checked out to someone else, it can't be borrowed by another patron until it's returned.

Once these preconditions are met, the librarian can proceed with the check-out action. The action results in several changes, called ""effects,"" that update the status of the book:

1. **The book is marked as checked out:** This indicates that the book is now borrowed and can't be checked out by another patron until it's returned.
2. **The book is no longer accessible:** Since the book is borrowed, it's no longer available on the shelf for others to take.
3. **There is a request for the book:** This keeps track of the borrowing transaction.
4. **A return due date is set:** This helps the library know when to expect the book back.

To summarize, the preconditions ensure the librarian can access the book and that it isn't already borrowed. The effects update the system to show the book is now checked out, not accessible, and has a return due date.
Parameters:
1. ?x - book

Preconditions:
```
(accessible ?x)
```

Effects:
```
(and
    (checked-out ?x)
    (not (accessible ?x))
    (book-request ?x)
    (return-due ?x)
)
```
","(:action check-out
    :parameters (?x - book)
    :precondition (and (accessible ?x) (not (checked-out ?x)))
    :effect (and (checked-out ?x) (not (accessible ?x)) (book-request ?x) (return-due ?x))
)","remove (not (checked-out ?x)) from preconditions
"
libraryworld,check-out,0.6450090408325195,Hard Negative (Manipulated Action),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Envision a librarian assisting a patron who wishes to borrow a book. The 'check-out' action allows the librarian to mark a book as checked out, provided it is accessible and not already checked out. This action reflects the process of recording the book's status as borrowed and setting a return due date.

Action name: check-out


Your answer:
","**Explanation:** 

Imagine a librarian in a library who helps patrons borrow books. When a patron wants to borrow a book, the librarian needs to make sure certain conditions are met before they can check the book out. These conditions are called ""preconditions.""

For the action ""check-out,"" let's think about what needs to be true before the librarian can let the patron borrow the book:

1. **The book must be accessible:** This means the book is not covered by other books or objects, making it easy for the librarian to pick up. If the book isn't accessible, the librarian can't reach it to check it out.
2. **The book must not be already checked out:** If the book is already checked out to someone else, it can't be borrowed by another patron until it's returned.

Once these preconditions are met, the librarian can proceed with the check-out action. The action results in several changes, called ""effects,"" that update the status of the book:

1. **The book is marked as checked out:** This indicates that the book is now borrowed and can't be checked out by another patron until it's returned.
2. **The book is no longer accessible:** Since the book is borrowed, it's no longer available on the shelf for others to take.
3. **There is a request for the book:** This keeps track of the borrowing transaction.
4. **A return due date is set:** This helps the library know when to expect the book back.

To summarize, the preconditions ensure the librarian can access the book and that it isn't already borrowed. The effects update the system to show the book is now checked out, not accessible, and has a return due date.
Parameters:
1. ?x - book

Preconditions:
```
(not (checked-out ?x))
```

Effects:
```
(and
    (not (return-due ?x))
    (checked-out ?x)
    (not (accessible ?x))
    (book-request ?x)
)
```
","(:action check-out
    :parameters (?x - book)
    :precondition (and (accessible ?x) (not (checked-out ?x)))
    :effect (and (checked-out ?x) (not (accessible ?x)) (book-request ?x) (return-due ?x))
)","remove (accessible ?x) from preconditions
negate (return-due ?x) in effects
"
libraryworld,check-out,0.6450090408325195,Hard Negative (Manipulated Action),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Envision a librarian assisting a patron who wishes to borrow a book. The 'check-out' action allows the librarian to mark a book as checked out, provided it is accessible and not already checked out. This action reflects the process of recording the book's status as borrowed and setting a return due date.

Action name: check-out


Your answer:
","**Explanation:** 

Imagine a librarian in a library who helps patrons borrow books. When a patron wants to borrow a book, the librarian needs to make sure certain conditions are met before they can check the book out. These conditions are called ""preconditions.""

For the action ""check-out,"" let's think about what needs to be true before the librarian can let the patron borrow the book:

1. **The book must be accessible:** This means the book is not covered by other books or objects, making it easy for the librarian to pick up. If the book isn't accessible, the librarian can't reach it to check it out.
2. **The book must not be already checked out:** If the book is already checked out to someone else, it can't be borrowed by another patron until it's returned.

Once these preconditions are met, the librarian can proceed with the check-out action. The action results in several changes, called ""effects,"" that update the status of the book:

1. **The book is marked as checked out:** This indicates that the book is now borrowed and can't be checked out by another patron until it's returned.
2. **The book is no longer accessible:** Since the book is borrowed, it's no longer available on the shelf for others to take.
3. **There is a request for the book:** This keeps track of the borrowing transaction.
4. **A return due date is set:** This helps the library know when to expect the book back.

To summarize, the preconditions ensure the librarian can access the book and that it isn't already borrowed. The effects update the system to show the book is now checked out, not accessible, and has a return due date.
Parameters:
1. ?x - book

Preconditions:
```
(and
    (accessible ?x)
    (not (checked-out ?x))
)
```

Effects:
```
(and
    (not (book-request ?x))
    (checked-out ?x)
    (not (accessible ?x))
    (return-due ?x)
)
```
","(:action check-out
    :parameters (?x - book)
    :precondition (and (accessible ?x) (not (checked-out ?x)))
    :effect (and (checked-out ?x) (not (accessible ?x)) (book-request ?x) (return-due ?x))
)","negate (book-request ?x) in effects
"
libraryworld,check-out,0.6450090408325195,Hard Negative (Manipulated Action),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Envision a librarian assisting a patron who wishes to borrow a book. The 'check-out' action allows the librarian to mark a book as checked out, provided it is accessible and not already checked out. This action reflects the process of recording the book's status as borrowed and setting a return due date.

Action name: check-out


Your answer:
","**Explanation:** 

Imagine a librarian in a library who helps patrons borrow books. When a patron wants to borrow a book, the librarian needs to make sure certain conditions are met before they can check the book out. These conditions are called ""preconditions.""

For the action ""check-out,"" let's think about what needs to be true before the librarian can let the patron borrow the book:

1. **The book must be accessible:** This means the book is not covered by other books or objects, making it easy for the librarian to pick up. If the book isn't accessible, the librarian can't reach it to check it out.
2. **The book must not be already checked out:** If the book is already checked out to someone else, it can't be borrowed by another patron until it's returned.

Once these preconditions are met, the librarian can proceed with the check-out action. The action results in several changes, called ""effects,"" that update the status of the book:

1. **The book is marked as checked out:** This indicates that the book is now borrowed and can't be checked out by another patron until it's returned.
2. **The book is no longer accessible:** Since the book is borrowed, it's no longer available on the shelf for others to take.
3. **There is a request for the book:** This keeps track of the borrowing transaction.
4. **A return due date is set:** This helps the library know when to expect the book back.

To summarize, the preconditions ensure the librarian can access the book and that it isn't already borrowed. The effects update the system to show the book is now checked out, not accessible, and has a return due date.
Parameters:
1. ?x - book

Preconditions:
```
(and
    (checked-out ?x)
    (accessible ?x)
)
```

Effects:
```
(and
    (not (checked-out ?x))
    (not (accessible ?x))
    (book-request ?x)
    (return-due ?x)
)
```
","(:action check-out
    :parameters (?x - book)
    :precondition (and (accessible ?x) (not (checked-out ?x)))
    :effect (and (checked-out ?x) (not (accessible ?x)) (book-request ?x) (return-due ?x))
)","negate (checked-out ?x) in effects
negate (not (checked-out ?x)) in preconditions
"
libraryworld,return-book,0.40149611234664917,Positive (Correct Match),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Imagine a patron returning a borrowed book to the library. The 'return-book' action enables the librarian to process the return, updating the book's status and removing any return due date. This action is applicable when the librarian is holding the book that needs to be returned.

Action name: return-book


Your answer:
","Parameters:
1. ?x - book

Preconditions:
```
(and
    (checked-out ?x)
    (holding ?x)
)
```

Effects:
```
(and
    (not (checked-out ?x))
    (not (holding ?x))
    (not (book-request ?x))
    (not (return-due ?x))
    (accessible ?x)
    (hands-free)
)
```
","(:action return-book
    :parameters (?x - book)
    :precondition (and (checked-out ?x) (holding ?x))
    :effect (and (not (checked-out ?x)) (not (holding ?x)) (not (book-request ?x)) (not (return-due ?x)) (accessible ?x) (hands-free))
)",
libraryworld,return-book,0.40149611234664917,Positive (Correct Match),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Imagine a patron returning a borrowed book to the library. The 'return-book' action enables the librarian to process the return, updating the book's status and removing any return due date. This action is applicable when the librarian is holding the book that needs to be returned.

Action name: return-book


Your answer:

**Explanation:** 

Imagine a patron is returning a borrowed book to the library. The librarian needs to process this return to update the book's status and remove any return due date. The action ""return-book"" describes how the librarian can do this. There are specific conditions, called ""preconditions,"" that must be met to ensure the return can be processed correctly.

For the action ""return-book,"" let's break down what needs to be true before the librarian can return the book:

1. **The book must be checked out:** This means the book is currently borrowed by someone and needs to be returned.
2. **The librarian must be holding the book:** This indicates the librarian has the book in their hands, ready to process the return.

Once these preconditions are met, the librarian can proceed with the ""return-book"" action. This action results in several changes, called ""effects,"" that update the status of the book and the librarian's hands:

1. **The book is no longer checked out:** This shows that the book has been returned and is available for borrowing again.
2. **The librarian is no longer holding the book:** This indicates the librarian has processed the return and placed the book back in its proper place.
3. **Any request for the book is removed:** If there was a request for this book, it is no longer needed since the book is now available.
4. **The return due date is removed:** This updates the system to show that the book is no longer due for return.
5. **The book becomes accessible:** Now that the book is back in the library, it is easy to find and borrow again.
6. **The librarian's hands are now free:** Since the librarian has finished processing the return, their hands are empty and ready for the next task.

To summarize, the preconditions ensure the book is currently borrowed and the librarian has it in their hands, ready to return. The effects update the situation to show that the book is no longer checked out, any requests and due dates are removed, the book is accessible again, and the librarian's hands are free.","Parameters:
1. ?x - book

Preconditions:
```
(and
    (checked-out ?x)
    (holding ?x)
)
```

Effects:
```
(and
    (not (checked-out ?x))
    (not (holding ?x))
    (not (book-request ?x))
    (not (return-due ?x))
    (accessible ?x)
    (hands-free)
)
```
","(:action return-book
    :parameters (?x - book)
    :precondition (and (checked-out ?x) (holding ?x))
    :effect (and (not (checked-out ?x)) (not (holding ?x)) (not (book-request ?x)) (not (return-due ?x)) (accessible ?x) (hands-free))
)",
libraryworld,return-book,0.6513895988464355,Positive (Correct Match),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Imagine a patron returning a borrowed book to the library. The 'return-book' action enables the librarian to process the return, updating the book's status and removing any return due date. This action is applicable when the librarian is holding the book that needs to be returned.

Action name: return-book


Your answer:
","**Explanation:** 

Imagine a patron is returning a borrowed book to the library. The librarian needs to process this return to update the book's status and remove any return due date. The action ""return-book"" describes how the librarian can do this. There are specific conditions, called ""preconditions,"" that must be met to ensure the return can be processed correctly.

For the action ""return-book,"" let's break down what needs to be true before the librarian can return the book:

1. **The book must be checked out:** This means the book is currently borrowed by someone and needs to be returned.
2. **The librarian must be holding the book:** This indicates the librarian has the book in their hands, ready to process the return.

Once these preconditions are met, the librarian can proceed with the ""return-book"" action. This action results in several changes, called ""effects,"" that update the status of the book and the librarian's hands:

1. **The book is no longer checked out:** This shows that the book has been returned and is available for borrowing again.
2. **The librarian is no longer holding the book:** This indicates the librarian has processed the return and placed the book back in its proper place.
3. **Any request for the book is removed:** If there was a request for this book, it is no longer needed since the book is now available.
4. **The return due date is removed:** This updates the system to show that the book is no longer due for return.
5. **The book becomes accessible:** Now that the book is back in the library, it is easy to find and borrow again.
6. **The librarian's hands are now free:** Since the librarian has finished processing the return, their hands are empty and ready for the next task.

To summarize, the preconditions ensure the book is currently borrowed and the librarian has it in their hands, ready to return. The effects update the situation to show that the book is no longer checked out, any requests and due dates are removed, the book is accessible again, and the librarian's hands are free.
Parameters:
1. ?x - book

Preconditions:
```
(and
    (checked-out ?x)
    (holding ?x)
)
```

Effects:
```
(and
    (not (checked-out ?x))
    (not (holding ?x))
    (not (book-request ?x))
    (not (return-due ?x))
    (accessible ?x)
    (hands-free)
)
```
","(:action return-book
    :parameters (?x - book)
    :precondition (and (checked-out ?x) (holding ?x))
    :effect (and (not (checked-out ?x)) (not (holding ?x)) (not (book-request ?x)) (not (return-due ?x)) (accessible ?x) (hands-free))
)",
libraryworld,return-book,0.0675392746925354,Easy Negative (Inter-Domain Mismatch),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Imagine a patron returning a borrowed book to the library. The 'return-book' action enables the librarian to process the return, updating the book's status and removing any return due date. This action is applicable when the librarian is holding the book that needs to be returned.

Action name: return-book


Your answer:
","Parameters:
1. ?from - cells
2. ?to - cells

Preconditions:
```
(and
    (connected ?from ?to)
    (at-hero ?from)
    (not (is-destroyed ?to))
    (not (has-trap ?from))
    (has-trap ?to)
    (arm-free)
)
```

Effects:
```
(and
    (at-hero ?to)
    (is-destroyed ?from)
    (not (at-hero ?from))
)
```
","(:action return-book
    :parameters (?x - book)
    :precondition (and (checked-out ?x) (holding ?x))
    :effect (and (not (checked-out ?x)) (not (holding ?x)) (not (book-request ?x)) (not (return-due ?x)) (accessible ?x) (hands-free))
)",
libraryworld,return-book,0.0897703617811203,Easy Negative (Inter-Domain Mismatch),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Imagine a patron returning a borrowed book to the library. The 'return-book' action enables the librarian to process the return, updating the book's status and removing any return due date. This action is applicable when the librarian is holding the book that needs to be returned.

Action name: return-book


Your answer:
","Parameters:
1. ?from - cells
2. ?to - cells

Preconditions:
```
(and
    (connected ?from ?to)
    (at-hero ?from)
    (not (has-trap ?from))
    (not (is-destroyed ?to))
    (not (has-trap ?to))
    (not (has-monster ?to))
)
```

Effects:
```
(and
    (at-hero ?to)
    (is-destroyed ?from)
    (not (at-hero ?from))
)
```
","(:action return-book
    :parameters (?x - book)
    :precondition (and (checked-out ?x) (holding ?x))
    :effect (and (not (checked-out ?x)) (not (holding ?x)) (not (book-request ?x)) (not (return-due ?x)) (accessible ?x) (hands-free))
)",
libraryworld,return-book,0.10826129466295242,Easy Negative (Inter-Domain Mismatch),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Imagine a patron returning a borrowed book to the library. The 'return-book' action enables the librarian to process the return, updating the book's status and removing any return due date. This action is applicable when the librarian is holding the book that needs to be returned.

Action name: return-book


Your answer:
","Parameters:
1. ?loc - cells
2. ?s - swords

Preconditions:
```
(and
    (at-hero ?loc)
    (at-sword ?s ?loc)
    (arm-free)
)
```

Effects:
```
(and
    (holding ?s)
    (not (at-sword ?s ?loc))
    (not (arm-free))
)
```
","(:action return-book
    :parameters (?x - book)
    :precondition (and (checked-out ?x) (holding ?x))
    :effect (and (not (checked-out ?x)) (not (holding ?x)) (not (book-request ?x)) (not (return-due ?x)) (accessible ?x) (hands-free))
)",
libraryworld,return-book,0.13337838649749756,Easy Negative (Inter-Domain Mismatch),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Imagine a patron returning a borrowed book to the library. The 'return-book' action enables the librarian to process the return, updating the book's status and removing any return due date. This action is applicable when the librarian is holding the book that needs to be returned.

Action name: return-book


Your answer:
","Parameters:
1. ?loc - cells

Preconditions:
```
(and
    (at-hero ?loc)
    (arm-free)
    (has-trap ?loc)
)
```

Effects:
```
(and
    (trap-disarmed ?loc)
    (not (has-trap ?loc))
)
```
","(:action return-book
    :parameters (?x - book)
    :precondition (and (checked-out ?x) (holding ?x))
    :effect (and (not (checked-out ?x)) (not (holding ?x)) (not (book-request ?x)) (not (return-due ?x)) (accessible ?x) (hands-free))
)",
libraryworld,return-book,0.18069863319396973,Easy Negative (Inter-Domain Mismatch),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Imagine a patron returning a borrowed book to the library. The 'return-book' action enables the librarian to process the return, updating the book's status and removing any return due date. This action is applicable when the librarian is holding the book that needs to be returned.

Action name: return-book


Your answer:
","Parameters:
1. ?from - cells
2. ?to - cells
3. ?s - swords

Preconditions:
```
(and
    (connected ?from ?to)
    (at-hero ?from)
    (has-monster ?to)
    (not (is-destroyed ?to))
    (not (has-trap ?from))
    (holding ?s)
)
```

Effects:
```
(and
    (at-hero ?to)
    (is-destroyed ?from)
    (not (at-hero ?from))
)
```
","(:action return-book
    :parameters (?x - book)
    :precondition (and (checked-out ?x) (holding ?x))
    :effect (and (not (checked-out ?x)) (not (holding ?x)) (not (book-request ?x)) (not (return-due ?x)) (accessible ?x) (hands-free))
)",
libraryworld,return-book,0.09276842325925827,Easy Negative (Inter-Domain Mismatch),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Imagine a patron returning a borrowed book to the library. The 'return-book' action enables the librarian to process the return, updating the book's status and removing any return due date. This action is applicable when the librarian is holding the book that needs to be returned.

Action name: return-book


Your answer:
","Parameters:
1. ?loc - cells
2. ?s - swords

Preconditions:
```
(and
    (at-hero ?loc)
    (holding ?s)
    (not (has-trap ?loc))
    (not (has-monster ?loc))
)
```

Effects:
```
(and
    (arm-free)
    (is-destroyed ?s)
    (not (holding ?s))
)
```
","(:action return-book
    :parameters (?x - book)
    :precondition (and (checked-out ?x) (holding ?x))
    :effect (and (not (checked-out ?x)) (not (holding ?x)) (not (book-request ?x)) (not (return-due ?x)) (accessible ?x) (hands-free))
)",
libraryworld,return-book,0.0675392746925354,Easy Negative (Inter-Domain Mismatch),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Imagine a patron returning a borrowed book to the library. The 'return-book' action enables the librarian to process the return, updating the book's status and removing any return due date. This action is applicable when the librarian is holding the book that needs to be returned.

Action name: return-book


Your answer:

**Explanation:** 

Imagine a patron is returning a borrowed book to the library. The librarian needs to process this return to update the book's status and remove any return due date. The action ""return-book"" describes how the librarian can do this. There are specific conditions, called ""preconditions,"" that must be met to ensure the return can be processed correctly.

For the action ""return-book,"" let's break down what needs to be true before the librarian can return the book:

1. **The book must be checked out:** This means the book is currently borrowed by someone and needs to be returned.
2. **The librarian must be holding the book:** This indicates the librarian has the book in their hands, ready to process the return.

Once these preconditions are met, the librarian can proceed with the ""return-book"" action. This action results in several changes, called ""effects,"" that update the status of the book and the librarian's hands:

1. **The book is no longer checked out:** This shows that the book has been returned and is available for borrowing again.
2. **The librarian is no longer holding the book:** This indicates the librarian has processed the return and placed the book back in its proper place.
3. **Any request for the book is removed:** If there was a request for this book, it is no longer needed since the book is now available.
4. **The return due date is removed:** This updates the system to show that the book is no longer due for return.
5. **The book becomes accessible:** Now that the book is back in the library, it is easy to find and borrow again.
6. **The librarian's hands are now free:** Since the librarian has finished processing the return, their hands are empty and ready for the next task.

To summarize, the preconditions ensure the book is currently borrowed and the librarian has it in their hands, ready to return. The effects update the situation to show that the book is no longer checked out, any requests and due dates are removed, the book is accessible again, and the librarian's hands are free.","Parameters:
1. ?from - cells
2. ?to - cells

Preconditions:
```
(and
    (connected ?from ?to)
    (at-hero ?from)
    (not (is-destroyed ?to))
    (not (has-trap ?from))
    (has-trap ?to)
    (arm-free)
)
```

Effects:
```
(and
    (at-hero ?to)
    (is-destroyed ?from)
    (not (at-hero ?from))
)
```
","(:action return-book
    :parameters (?x - book)
    :precondition (and (checked-out ?x) (holding ?x))
    :effect (and (not (checked-out ?x)) (not (holding ?x)) (not (book-request ?x)) (not (return-due ?x)) (accessible ?x) (hands-free))
)",
libraryworld,return-book,0.0897703617811203,Easy Negative (Inter-Domain Mismatch),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Imagine a patron returning a borrowed book to the library. The 'return-book' action enables the librarian to process the return, updating the book's status and removing any return due date. This action is applicable when the librarian is holding the book that needs to be returned.

Action name: return-book


Your answer:

**Explanation:** 

Imagine a patron is returning a borrowed book to the library. The librarian needs to process this return to update the book's status and remove any return due date. The action ""return-book"" describes how the librarian can do this. There are specific conditions, called ""preconditions,"" that must be met to ensure the return can be processed correctly.

For the action ""return-book,"" let's break down what needs to be true before the librarian can return the book:

1. **The book must be checked out:** This means the book is currently borrowed by someone and needs to be returned.
2. **The librarian must be holding the book:** This indicates the librarian has the book in their hands, ready to process the return.

Once these preconditions are met, the librarian can proceed with the ""return-book"" action. This action results in several changes, called ""effects,"" that update the status of the book and the librarian's hands:

1. **The book is no longer checked out:** This shows that the book has been returned and is available for borrowing again.
2. **The librarian is no longer holding the book:** This indicates the librarian has processed the return and placed the book back in its proper place.
3. **Any request for the book is removed:** If there was a request for this book, it is no longer needed since the book is now available.
4. **The return due date is removed:** This updates the system to show that the book is no longer due for return.
5. **The book becomes accessible:** Now that the book is back in the library, it is easy to find and borrow again.
6. **The librarian's hands are now free:** Since the librarian has finished processing the return, their hands are empty and ready for the next task.

To summarize, the preconditions ensure the book is currently borrowed and the librarian has it in their hands, ready to return. The effects update the situation to show that the book is no longer checked out, any requests and due dates are removed, the book is accessible again, and the librarian's hands are free.","Parameters:
1. ?from - cells
2. ?to - cells

Preconditions:
```
(and
    (connected ?from ?to)
    (at-hero ?from)
    (not (has-trap ?from))
    (not (is-destroyed ?to))
    (not (has-trap ?to))
    (not (has-monster ?to))
)
```

Effects:
```
(and
    (at-hero ?to)
    (is-destroyed ?from)
    (not (at-hero ?from))
)
```
","(:action return-book
    :parameters (?x - book)
    :precondition (and (checked-out ?x) (holding ?x))
    :effect (and (not (checked-out ?x)) (not (holding ?x)) (not (book-request ?x)) (not (return-due ?x)) (accessible ?x) (hands-free))
)",
libraryworld,return-book,0.10826129466295242,Easy Negative (Inter-Domain Mismatch),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Imagine a patron returning a borrowed book to the library. The 'return-book' action enables the librarian to process the return, updating the book's status and removing any return due date. This action is applicable when the librarian is holding the book that needs to be returned.

Action name: return-book


Your answer:

**Explanation:** 

Imagine a patron is returning a borrowed book to the library. The librarian needs to process this return to update the book's status and remove any return due date. The action ""return-book"" describes how the librarian can do this. There are specific conditions, called ""preconditions,"" that must be met to ensure the return can be processed correctly.

For the action ""return-book,"" let's break down what needs to be true before the librarian can return the book:

1. **The book must be checked out:** This means the book is currently borrowed by someone and needs to be returned.
2. **The librarian must be holding the book:** This indicates the librarian has the book in their hands, ready to process the return.

Once these preconditions are met, the librarian can proceed with the ""return-book"" action. This action results in several changes, called ""effects,"" that update the status of the book and the librarian's hands:

1. **The book is no longer checked out:** This shows that the book has been returned and is available for borrowing again.
2. **The librarian is no longer holding the book:** This indicates the librarian has processed the return and placed the book back in its proper place.
3. **Any request for the book is removed:** If there was a request for this book, it is no longer needed since the book is now available.
4. **The return due date is removed:** This updates the system to show that the book is no longer due for return.
5. **The book becomes accessible:** Now that the book is back in the library, it is easy to find and borrow again.
6. **The librarian's hands are now free:** Since the librarian has finished processing the return, their hands are empty and ready for the next task.

To summarize, the preconditions ensure the book is currently borrowed and the librarian has it in their hands, ready to return. The effects update the situation to show that the book is no longer checked out, any requests and due dates are removed, the book is accessible again, and the librarian's hands are free.","Parameters:
1. ?loc - cells
2. ?s - swords

Preconditions:
```
(and
    (at-hero ?loc)
    (at-sword ?s ?loc)
    (arm-free)
)
```

Effects:
```
(and
    (holding ?s)
    (not (at-sword ?s ?loc))
    (not (arm-free))
)
```
","(:action return-book
    :parameters (?x - book)
    :precondition (and (checked-out ?x) (holding ?x))
    :effect (and (not (checked-out ?x)) (not (holding ?x)) (not (book-request ?x)) (not (return-due ?x)) (accessible ?x) (hands-free))
)",
libraryworld,return-book,0.13337838649749756,Easy Negative (Inter-Domain Mismatch),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Imagine a patron returning a borrowed book to the library. The 'return-book' action enables the librarian to process the return, updating the book's status and removing any return due date. This action is applicable when the librarian is holding the book that needs to be returned.

Action name: return-book


Your answer:

**Explanation:** 

Imagine a patron is returning a borrowed book to the library. The librarian needs to process this return to update the book's status and remove any return due date. The action ""return-book"" describes how the librarian can do this. There are specific conditions, called ""preconditions,"" that must be met to ensure the return can be processed correctly.

For the action ""return-book,"" let's break down what needs to be true before the librarian can return the book:

1. **The book must be checked out:** This means the book is currently borrowed by someone and needs to be returned.
2. **The librarian must be holding the book:** This indicates the librarian has the book in their hands, ready to process the return.

Once these preconditions are met, the librarian can proceed with the ""return-book"" action. This action results in several changes, called ""effects,"" that update the status of the book and the librarian's hands:

1. **The book is no longer checked out:** This shows that the book has been returned and is available for borrowing again.
2. **The librarian is no longer holding the book:** This indicates the librarian has processed the return and placed the book back in its proper place.
3. **Any request for the book is removed:** If there was a request for this book, it is no longer needed since the book is now available.
4. **The return due date is removed:** This updates the system to show that the book is no longer due for return.
5. **The book becomes accessible:** Now that the book is back in the library, it is easy to find and borrow again.
6. **The librarian's hands are now free:** Since the librarian has finished processing the return, their hands are empty and ready for the next task.

To summarize, the preconditions ensure the book is currently borrowed and the librarian has it in their hands, ready to return. The effects update the situation to show that the book is no longer checked out, any requests and due dates are removed, the book is accessible again, and the librarian's hands are free.","Parameters:
1. ?loc - cells

Preconditions:
```
(and
    (at-hero ?loc)
    (arm-free)
    (has-trap ?loc)
)
```

Effects:
```
(and
    (trap-disarmed ?loc)
    (not (has-trap ?loc))
)
```
","(:action return-book
    :parameters (?x - book)
    :precondition (and (checked-out ?x) (holding ?x))
    :effect (and (not (checked-out ?x)) (not (holding ?x)) (not (book-request ?x)) (not (return-due ?x)) (accessible ?x) (hands-free))
)",
libraryworld,return-book,0.18069863319396973,Easy Negative (Inter-Domain Mismatch),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Imagine a patron returning a borrowed book to the library. The 'return-book' action enables the librarian to process the return, updating the book's status and removing any return due date. This action is applicable when the librarian is holding the book that needs to be returned.

Action name: return-book


Your answer:

**Explanation:** 

Imagine a patron is returning a borrowed book to the library. The librarian needs to process this return to update the book's status and remove any return due date. The action ""return-book"" describes how the librarian can do this. There are specific conditions, called ""preconditions,"" that must be met to ensure the return can be processed correctly.

For the action ""return-book,"" let's break down what needs to be true before the librarian can return the book:

1. **The book must be checked out:** This means the book is currently borrowed by someone and needs to be returned.
2. **The librarian must be holding the book:** This indicates the librarian has the book in their hands, ready to process the return.

Once these preconditions are met, the librarian can proceed with the ""return-book"" action. This action results in several changes, called ""effects,"" that update the status of the book and the librarian's hands:

1. **The book is no longer checked out:** This shows that the book has been returned and is available for borrowing again.
2. **The librarian is no longer holding the book:** This indicates the librarian has processed the return and placed the book back in its proper place.
3. **Any request for the book is removed:** If there was a request for this book, it is no longer needed since the book is now available.
4. **The return due date is removed:** This updates the system to show that the book is no longer due for return.
5. **The book becomes accessible:** Now that the book is back in the library, it is easy to find and borrow again.
6. **The librarian's hands are now free:** Since the librarian has finished processing the return, their hands are empty and ready for the next task.

To summarize, the preconditions ensure the book is currently borrowed and the librarian has it in their hands, ready to return. The effects update the situation to show that the book is no longer checked out, any requests and due dates are removed, the book is accessible again, and the librarian's hands are free.","Parameters:
1. ?from - cells
2. ?to - cells
3. ?s - swords

Preconditions:
```
(and
    (connected ?from ?to)
    (at-hero ?from)
    (has-monster ?to)
    (not (is-destroyed ?to))
    (not (has-trap ?from))
    (holding ?s)
)
```

Effects:
```
(and
    (at-hero ?to)
    (is-destroyed ?from)
    (not (at-hero ?from))
)
```
","(:action return-book
    :parameters (?x - book)
    :precondition (and (checked-out ?x) (holding ?x))
    :effect (and (not (checked-out ?x)) (not (holding ?x)) (not (book-request ?x)) (not (return-due ?x)) (accessible ?x) (hands-free))
)",
libraryworld,return-book,0.09276842325925827,Easy Negative (Inter-Domain Mismatch),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Imagine a patron returning a borrowed book to the library. The 'return-book' action enables the librarian to process the return, updating the book's status and removing any return due date. This action is applicable when the librarian is holding the book that needs to be returned.

Action name: return-book


Your answer:

**Explanation:** 

Imagine a patron is returning a borrowed book to the library. The librarian needs to process this return to update the book's status and remove any return due date. The action ""return-book"" describes how the librarian can do this. There are specific conditions, called ""preconditions,"" that must be met to ensure the return can be processed correctly.

For the action ""return-book,"" let's break down what needs to be true before the librarian can return the book:

1. **The book must be checked out:** This means the book is currently borrowed by someone and needs to be returned.
2. **The librarian must be holding the book:** This indicates the librarian has the book in their hands, ready to process the return.

Once these preconditions are met, the librarian can proceed with the ""return-book"" action. This action results in several changes, called ""effects,"" that update the status of the book and the librarian's hands:

1. **The book is no longer checked out:** This shows that the book has been returned and is available for borrowing again.
2. **The librarian is no longer holding the book:** This indicates the librarian has processed the return and placed the book back in its proper place.
3. **Any request for the book is removed:** If there was a request for this book, it is no longer needed since the book is now available.
4. **The return due date is removed:** This updates the system to show that the book is no longer due for return.
5. **The book becomes accessible:** Now that the book is back in the library, it is easy to find and borrow again.
6. **The librarian's hands are now free:** Since the librarian has finished processing the return, their hands are empty and ready for the next task.

To summarize, the preconditions ensure the book is currently borrowed and the librarian has it in their hands, ready to return. The effects update the situation to show that the book is no longer checked out, any requests and due dates are removed, the book is accessible again, and the librarian's hands are free.","Parameters:
1. ?loc - cells
2. ?s - swords

Preconditions:
```
(and
    (at-hero ?loc)
    (holding ?s)
    (not (has-trap ?loc))
    (not (has-monster ?loc))
)
```

Effects:
```
(and
    (arm-free)
    (is-destroyed ?s)
    (not (holding ?s))
)
```
","(:action return-book
    :parameters (?x - book)
    :precondition (and (checked-out ?x) (holding ?x))
    :effect (and (not (checked-out ?x)) (not (holding ?x)) (not (book-request ?x)) (not (return-due ?x)) (accessible ?x) (hands-free))
)",
libraryworld,return-book,0.18004997074604034,Easy Negative (Inter-Domain Mismatch),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Imagine a patron returning a borrowed book to the library. The 'return-book' action enables the librarian to process the return, updating the book's status and removing any return due date. This action is applicable when the librarian is holding the book that needs to be returned.

Action name: return-book


Your answer:
","**Explanation:** Let's imagine you're playing a game similar to Minecraft. In this game, you have an action called ""recall,"" which lets you move an item you are holding directly into your backpack, making your hands empty again. To understand how this action works in the game's programming language (PDDL), let's break down the requirements and results of this action step-by-step.

1. **Precondition (What needs to be true before the action?):** 
   The precondition for the ""recall"" action is `(equipped ?var0 ?var1)`. This simply means that the item (`?var0`) must be currently held (equipped) by the player (`?var1`). Think of it as checking if you really have the axe in your hand before you can put it away.

2. **Effect (What happens after the action is done?):** 
   The effects of this action are several:
   - `(inventory ?var0)`: The item you were holding is now in your inventory. This is like saying, ""Okay, the axe is now in my backpack.""
   - `(not (equipped ?var0 ?var1))`: You are no longer holding the item. This ensures that the game knows the axe is no longer in your hand.
   - `(handsfree ?var1)`: Your hands are now empty. This part is like confirming that your hands are free, ready to grab or use something else.

By setting these preconditions and effects, the game ensures that the action of recalling an item (like teleporting your axe to your backpack) is logical and consistent with the game's rules. You need to be holding the item first to store it away, and after storing it, your hands should indeed be empty, ready for the next task. This keeps the game from getting confused, like trying to put away an axe you aren’t holding or ending up with an axe still in your hand after you've tried to store it.

In summary, the ""recall"" action in the game ensures everything happens in an orderly and expected manner, making your gameplay experience smooth and realistic within the game's world.
Parameters:
1. ?var0 - moveable
2. ?var1 - agent

Preconditions:
```
(equipped ?var0 ?var1)
```

Effects:
```
(and
    (inventory ?var0)
    (not (equipped ?var0 ?var1))
    (handsfree ?var1)
)
```
","(:action return-book
    :parameters (?x - book)
    :precondition (and (checked-out ?x) (holding ?x))
    :effect (and (not (checked-out ?x)) (not (holding ?x)) (not (book-request ?x)) (not (return-due ?x)) (accessible ?x) (hands-free))
)",
libraryworld,return-book,0.10055991262197495,Easy Negative (Inter-Domain Mismatch),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Imagine a patron returning a borrowed book to the library. The 'return-book' action enables the librarian to process the return, updating the book's status and removing any return due date. This action is applicable when the librarian is holding the book that needs to be returned.

Action name: return-book


Your answer:
","**Explanation:**
Let's imagine that in the world of Minecraft, the agent (like a player) wants to craft planks from a log. Think of it like a cook needing specific ingredients and tools to make a meal.

In our PDDL model, the action named ""craft_plank"" follows a similar thought process. Here's how the description of the world leads to the rules in our model:

1. **Preconditions**: Before crafting, certain conditions must be met:
   - The agent must have a log that they are actually holding. This is represented by `(equipped ?var2 ?var1)` meaning the log (`?var2`) is equipped by the agent (`?var1`).
   - The log must be a real log, confirmed by `(is_log ?var2)`.
   - We also see `(hypothetical ?var0)`. Here, the planks that will be created are initially just an idea (hypothetical) before they become real.

2. **Effects**: After the action is performed, we expect changes:
   - The hypothetical planks become real, shown by `(inventory ?var0)` which means the planks (`?var0`) are now in the agent's inventory.
   - They are identified as planks with `(is_planks ?var0)`.
   - The agent's hands become free `(handsfree ?var1)` because the log they were holding is now transformed into planks.
   - The log is no longer equipped or identified as a log, shown by `(not (equipped ?var2 ?var1))` and `(not (is_log ?var2))`. This indicates the log has been used up.

This schema carefully makes sure that the agent can only craft planks if they have a log to start with, and it accounts for what happens to the log and the newly created planks. It's much like ensuring you have flour before you bake a cake, and then, once the cake is baked, you no longer have just flour but a delicious cake instead!
Parameters:
1. ?var0 - moveable
2. ?var1 - agent
3. ?var2 - moveable

Preconditions:
```
(and
    (hypothetical ?var0)
    (is_log ?var2)
    (equipped ?var2 ?var1)
)
```

Effects:
```
(and
    (inventory ?var0)
    (is_planks ?var0)
    (handsfree ?var1)
    (not (equipped ?var2 ?var1))
    (not (hypothetical ?var0))
    (not (is_log ?var2))
)
```
","(:action return-book
    :parameters (?x - book)
    :precondition (and (checked-out ?x) (holding ?x))
    :effect (and (not (checked-out ?x)) (not (holding ?x)) (not (book-request ?x)) (not (return-due ?x)) (accessible ?x) (hands-free))
)",
libraryworld,return-book,0.11574045568704605,Easy Negative (Inter-Domain Mismatch),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Imagine a patron returning a borrowed book to the library. The 'return-book' action enables the librarian to process the return, updating the book's status and removing any return due date. This action is applicable when the librarian is holding the book that needs to be returned.

Action name: return-book


Your answer:
","**Explanation:**
Let's think about the action called ""move"" in a Minecraft-like game, where the goal is to get an agent (like a player) from one place to another. The PDDL action schema you're asking about is designed to handle this simple yet crucial task.

In the action schema, we have two parameters: `?var0` and `?var1`, which are both locations. You can think of `?var0` as the new location where the agent wants to go, and `?var1` as the current location where the agent is starting from.

**Preconditions:** The precondition for the ""move"" action is `(agent_at ?var1)`. This just means that before the agent can move, it must be verified that the agent is actually at the starting location (`?var1`). It’s similar to checking if you are really at home before you walk to the park.

**Effects:** After the agent moves, we need to update the agent's location in the game. This is what the effects in the action schema do:
- `(agent_at ?var0)` says that the agent is now at the new location (`?var0`), like saying, ""Now, I’m at the park.""
- `(not (agent_at ?var1))` means that the agent is no longer at the starting location (`?var1`), similar to saying, ""I'm no longer at home.""

This change in the agent's location is crucial for the game to keep track of where the agent is at any moment, which affects what the agent can interact with or what actions they can perform next. The effect ensures the game world is accurately updated following the agent's movement, and no confusion arises about where the agent is located. 

So, in simple terms, the action ""move"" in this game ensures that when the agent moves from one spot to another, the game correctly recognizes this change and updates the world accordingly.
Parameters:
1. ?var0 - static
2. ?var1 - static

Preconditions:
```
(agent_at ?var1)
```

Effects:
```
(and
    (agent_at ?var0)
    (not (agent_at ?var1))
)
```
","(:action return-book
    :parameters (?x - book)
    :precondition (and (checked-out ?x) (holding ?x))
    :effect (and (not (checked-out ?x)) (not (holding ?x)) (not (book-request ?x)) (not (return-due ?x)) (accessible ?x) (hands-free))
)",
libraryworld,return-book,0.04751778021454811,Easy Negative (Inter-Domain Mismatch),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Imagine a patron returning a borrowed book to the library. The 'return-book' action enables the librarian to process the return, updating the book's status and removing any return due date. This action is applicable when the librarian is holding the book that needs to be returned.

Action name: return-book


Your answer:
","**Explanation:**
Let's think of the action called ""equip"" like someone getting ready to use something from their backpack. Imagine you're planning to paint a picture. First, you need to make sure you have a paintbrush in your backpack (this is similar to the ""inventory"" in our scenario). You also need to make sure your hand is free to hold the paintbrush (like the ""handsfree"" condition).

In the ""equip"" action in this Minecraft-like environment, two main things need to happen before the action can take place:
1. **The item is in the inventory** - This is just like making sure the paintbrush is in your backpack. The precondition `(inventory ?var0)` confirms that the item you want to use is actually with you, stored safely in your inventory.
2. **The agent's hands are free** - This means you aren't holding anything else. The precondition `(handsfree ?var1)` checks that your hands (or the agent's hands, in this case) are empty and ready to hold something new.

When you decide to ""equip"" or start using the item, several things change:
- **The item is now equipped** - This means the item is in your hand and ready to use, similar to how you would hold a paintbrush when you're ready to paint. This is shown by the effect `(equipped ?var0 ?var1)`.
- **Your hand is no longer free** - Just like when you pick up the paintbrush, your hand isn't empty anymore. This is why the effect includes `(not (handsfree ?var1))`.
- **The item is no longer just in the inventory** - Since you're now holding the item, it's not just sitting in your backpack. This change is represented by `(not (inventory ?var0))`.

These changes ensure that the action of equipping something is logical and makes sense in the environment, just like how you'd logically take a paintbrush out of your backpack to use it.
Parameters:
1. ?var0 - moveable
2. ?var1 - agent

Preconditions:
```
(and
    (inventory ?var0)
    (handsfree ?var1)
)
```

Effects:
```
(and
    (equipped ?var0 ?var1)
    (not (handsfree ?var1))
    (not (inventory ?var0))
)
```
","(:action return-book
    :parameters (?x - book)
    :precondition (and (checked-out ?x) (holding ?x))
    :effect (and (not (checked-out ?x)) (not (holding ?x)) (not (book-request ?x)) (not (return-due ?x)) (accessible ?x) (hands-free))
)",
libraryworld,return-book,0.09768539667129517,Easy Negative (Inter-Domain Mismatch),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Imagine a patron returning a borrowed book to the library. The 'return-book' action enables the librarian to process the return, updating the book's status and removing any return due date. This action is applicable when the librarian is holding the book that needs to be returned.

Action name: return-book


Your answer:
","**Explanation:**

Let's imagine you're in a simplified game environment similar to Minecraft, where your goal is to gather resources like fruits or tools. In this game, to collect an item, you'd first need to be at the same location as the item. This ensures you can actually reach it to pick it up.

So, in the PDDL (which is a planning language used to describe tasks and environments in a structured way), the `pick` action is defined to help you collect these items. Here's why the action is set up this way:

1. **Preconditions (the must-haves before acting)**:
   - `(at ?var0 ?var1)`: This means the item (`?var0`) must be at your current location (`?var1`). Think of it as seeing a piece of fruit right at your feet. You need to be where the fruit is to pick it up.
   - `(agent_at ?var1)`: This specifies that you (the agent) must also be at that specific location (`?var1`). Just like in real life, you can't pick up something if you're not right there with it.

2. **Effects (what happens after the action)**:
   - `(inventory ?var0)`: Once you pick up the item, it moves into your inventory. This is like putting the fruit into your backpack.
   - `(not (at ?var0 ?var1))`: This indicates that the item is no longer lying on the ground at that location. It’s like saying, now that the fruit is in your backpack, it's not on the ground anymore.

This setup ensures that you can only pick up items that are within your immediate reach and that collecting an item changes its status from being 'on the ground' to being 'in your inventory'. It's a simple but effective way to manage resources in the game, making sure everything happens in a logical and realistic manner.
Parameters:
1. ?var0 - moveable
2. ?var1 - static

Preconditions:
```
(and
    (at ?var0 ?var1)
    (agent_at ?var1)
)
```

Effects:
```
(and
    (inventory ?var0)
    (not (at ?var0 ?var1))
)
```
","(:action return-book
    :parameters (?x - book)
    :precondition (and (checked-out ?x) (holding ?x))
    :effect (and (not (checked-out ?x)) (not (holding ?x)) (not (book-request ?x)) (not (return-due ?x)) (accessible ?x) (hands-free))
)",
libraryworld,return-book,0.7851869463920593,Semi-Hard Negative (Intra-Domain Mismatch),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Imagine a patron returning a borrowed book to the library. The 'return-book' action enables the librarian to process the return, updating the book's status and removing any return due date. This action is applicable when the librarian is holding the book that needs to be returned.

Action name: return-book


Your answer:
","Parameters:
1. ?x - book
2. ?y - book
3. ?cat - category

Preconditions:
```
(and
    (on-shelf ?x ?y)
    (accessible ?x)
    (hands-free)
    (belongs-to-category ?x ?cat)
)
```

Effects:
```
(and
    (holding ?x)
    (accessible ?y)
    (not (accessible ?x))
    (not (hands-free))
    (not (on-shelf ?x ?y))
    (shelf-empty ?cat)
)
```
","(:action return-book
    :parameters (?x - book)
    :precondition (and (checked-out ?x) (holding ?x))
    :effect (and (not (checked-out ?x)) (not (holding ?x)) (not (book-request ?x)) (not (return-due ?x)) (accessible ?x) (hands-free))
)",
libraryworld,return-book,0.5250560641288757,Semi-Hard Negative (Intra-Domain Mismatch),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Imagine a patron returning a borrowed book to the library. The 'return-book' action enables the librarian to process the return, updating the book's status and removing any return due date. This action is applicable when the librarian is holding the book that needs to be returned.

Action name: return-book


Your answer:
","Parameters:
1. ?x - book

Preconditions:
```
(holding ?x)
```

Effects:
```
(and
    (not (holding ?x))
    (accessible ?x)
    (hands-free)
    (on-table ?x)
)
```
","(:action return-book
    :parameters (?x - book)
    :precondition (and (checked-out ?x) (holding ?x))
    :effect (and (not (checked-out ?x)) (not (holding ?x)) (not (book-request ?x)) (not (return-due ?x)) (accessible ?x) (hands-free))
)",
libraryworld,return-book,0.697905421257019,Semi-Hard Negative (Intra-Domain Mismatch),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Imagine a patron returning a borrowed book to the library. The 'return-book' action enables the librarian to process the return, updating the book's status and removing any return due date. This action is applicable when the librarian is holding the book that needs to be returned.

Action name: return-book


Your answer:
","Parameters:
1. ?x - book

Preconditions:
```
(and
    (accessible ?x)
    (not (checked-out ?x))
)
```

Effects:
```
(and
    (checked-out ?x)
    (not (accessible ?x))
    (book-request ?x)
    (return-due ?x)
)
```
","(:action return-book
    :parameters (?x - book)
    :precondition (and (checked-out ?x) (holding ?x))
    :effect (and (not (checked-out ?x)) (not (holding ?x)) (not (book-request ?x)) (not (return-due ?x)) (accessible ?x) (hands-free))
)",
libraryworld,return-book,0.6028046607971191,Semi-Hard Negative (Intra-Domain Mismatch),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Imagine a patron returning a borrowed book to the library. The 'return-book' action enables the librarian to process the return, updating the book's status and removing any return due date. This action is applicable when the librarian is holding the book that needs to be returned.

Action name: return-book


Your answer:
","Parameters:
1. ?x - book

Preconditions:
```
(and
    (accessible ?x)
    (on-table ?x)
    (hands-free)
)
```

Effects:
```
(and
    (not (on-table ?x))
    (not (accessible ?x))
    (not (hands-free))
    (holding ?x)
)
```
","(:action return-book
    :parameters (?x - book)
    :precondition (and (checked-out ?x) (holding ?x))
    :effect (and (not (checked-out ?x)) (not (holding ?x)) (not (book-request ?x)) (not (return-due ?x)) (accessible ?x) (hands-free))
)",
libraryworld,return-book,0.8817847967147827,Semi-Hard Negative (Intra-Domain Mismatch),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Imagine a patron returning a borrowed book to the library. The 'return-book' action enables the librarian to process the return, updating the book's status and removing any return due date. This action is applicable when the librarian is holding the book that needs to be returned.

Action name: return-book


Your answer:
","Parameters:
1. ?x - book
2. ?y - book
3. ?cat - category

Preconditions:
```
(and
    (holding ?x)
    (accessible ?y)
    (belongs-to-category ?x ?cat)
    (not (shelf-overflow ?cat))
)
```

Effects:
```
(and
    (not (holding ?x))
    (not (accessible ?y))
    (accessible ?x)
    (hands-free)
    (on-shelf ?x ?y)
    (shelf-empty ?cat)
)
```
","(:action return-book
    :parameters (?x - book)
    :precondition (and (checked-out ?x) (holding ?x))
    :effect (and (not (checked-out ?x)) (not (holding ?x)) (not (book-request ?x)) (not (return-due ?x)) (accessible ?x) (hands-free))
)",
libraryworld,return-book,0.7851869463920593,Semi-Hard Negative (Intra-Domain Mismatch),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Imagine a patron returning a borrowed book to the library. The 'return-book' action enables the librarian to process the return, updating the book's status and removing any return due date. This action is applicable when the librarian is holding the book that needs to be returned.

Action name: return-book


Your answer:

**Explanation:** 

Imagine a patron is returning a borrowed book to the library. The librarian needs to process this return to update the book's status and remove any return due date. The action ""return-book"" describes how the librarian can do this. There are specific conditions, called ""preconditions,"" that must be met to ensure the return can be processed correctly.

For the action ""return-book,"" let's break down what needs to be true before the librarian can return the book:

1. **The book must be checked out:** This means the book is currently borrowed by someone and needs to be returned.
2. **The librarian must be holding the book:** This indicates the librarian has the book in their hands, ready to process the return.

Once these preconditions are met, the librarian can proceed with the ""return-book"" action. This action results in several changes, called ""effects,"" that update the status of the book and the librarian's hands:

1. **The book is no longer checked out:** This shows that the book has been returned and is available for borrowing again.
2. **The librarian is no longer holding the book:** This indicates the librarian has processed the return and placed the book back in its proper place.
3. **Any request for the book is removed:** If there was a request for this book, it is no longer needed since the book is now available.
4. **The return due date is removed:** This updates the system to show that the book is no longer due for return.
5. **The book becomes accessible:** Now that the book is back in the library, it is easy to find and borrow again.
6. **The librarian's hands are now free:** Since the librarian has finished processing the return, their hands are empty and ready for the next task.

To summarize, the preconditions ensure the book is currently borrowed and the librarian has it in their hands, ready to return. The effects update the situation to show that the book is no longer checked out, any requests and due dates are removed, the book is accessible again, and the librarian's hands are free.","Parameters:
1. ?x - book
2. ?y - book
3. ?cat - category

Preconditions:
```
(and
    (on-shelf ?x ?y)
    (accessible ?x)
    (hands-free)
    (belongs-to-category ?x ?cat)
)
```

Effects:
```
(and
    (holding ?x)
    (accessible ?y)
    (not (accessible ?x))
    (not (hands-free))
    (not (on-shelf ?x ?y))
    (shelf-empty ?cat)
)
```
","(:action return-book
    :parameters (?x - book)
    :precondition (and (checked-out ?x) (holding ?x))
    :effect (and (not (checked-out ?x)) (not (holding ?x)) (not (book-request ?x)) (not (return-due ?x)) (accessible ?x) (hands-free))
)",
libraryworld,return-book,0.5250560641288757,Semi-Hard Negative (Intra-Domain Mismatch),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Imagine a patron returning a borrowed book to the library. The 'return-book' action enables the librarian to process the return, updating the book's status and removing any return due date. This action is applicable when the librarian is holding the book that needs to be returned.

Action name: return-book


Your answer:

**Explanation:** 

Imagine a patron is returning a borrowed book to the library. The librarian needs to process this return to update the book's status and remove any return due date. The action ""return-book"" describes how the librarian can do this. There are specific conditions, called ""preconditions,"" that must be met to ensure the return can be processed correctly.

For the action ""return-book,"" let's break down what needs to be true before the librarian can return the book:

1. **The book must be checked out:** This means the book is currently borrowed by someone and needs to be returned.
2. **The librarian must be holding the book:** This indicates the librarian has the book in their hands, ready to process the return.

Once these preconditions are met, the librarian can proceed with the ""return-book"" action. This action results in several changes, called ""effects,"" that update the status of the book and the librarian's hands:

1. **The book is no longer checked out:** This shows that the book has been returned and is available for borrowing again.
2. **The librarian is no longer holding the book:** This indicates the librarian has processed the return and placed the book back in its proper place.
3. **Any request for the book is removed:** If there was a request for this book, it is no longer needed since the book is now available.
4. **The return due date is removed:** This updates the system to show that the book is no longer due for return.
5. **The book becomes accessible:** Now that the book is back in the library, it is easy to find and borrow again.
6. **The librarian's hands are now free:** Since the librarian has finished processing the return, their hands are empty and ready for the next task.

To summarize, the preconditions ensure the book is currently borrowed and the librarian has it in their hands, ready to return. The effects update the situation to show that the book is no longer checked out, any requests and due dates are removed, the book is accessible again, and the librarian's hands are free.","Parameters:
1. ?x - book

Preconditions:
```
(holding ?x)
```

Effects:
```
(and
    (not (holding ?x))
    (accessible ?x)
    (hands-free)
    (on-table ?x)
)
```
","(:action return-book
    :parameters (?x - book)
    :precondition (and (checked-out ?x) (holding ?x))
    :effect (and (not (checked-out ?x)) (not (holding ?x)) (not (book-request ?x)) (not (return-due ?x)) (accessible ?x) (hands-free))
)",
libraryworld,return-book,0.697905421257019,Semi-Hard Negative (Intra-Domain Mismatch),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Imagine a patron returning a borrowed book to the library. The 'return-book' action enables the librarian to process the return, updating the book's status and removing any return due date. This action is applicable when the librarian is holding the book that needs to be returned.

Action name: return-book


Your answer:

**Explanation:** 

Imagine a patron is returning a borrowed book to the library. The librarian needs to process this return to update the book's status and remove any return due date. The action ""return-book"" describes how the librarian can do this. There are specific conditions, called ""preconditions,"" that must be met to ensure the return can be processed correctly.

For the action ""return-book,"" let's break down what needs to be true before the librarian can return the book:

1. **The book must be checked out:** This means the book is currently borrowed by someone and needs to be returned.
2. **The librarian must be holding the book:** This indicates the librarian has the book in their hands, ready to process the return.

Once these preconditions are met, the librarian can proceed with the ""return-book"" action. This action results in several changes, called ""effects,"" that update the status of the book and the librarian's hands:

1. **The book is no longer checked out:** This shows that the book has been returned and is available for borrowing again.
2. **The librarian is no longer holding the book:** This indicates the librarian has processed the return and placed the book back in its proper place.
3. **Any request for the book is removed:** If there was a request for this book, it is no longer needed since the book is now available.
4. **The return due date is removed:** This updates the system to show that the book is no longer due for return.
5. **The book becomes accessible:** Now that the book is back in the library, it is easy to find and borrow again.
6. **The librarian's hands are now free:** Since the librarian has finished processing the return, their hands are empty and ready for the next task.

To summarize, the preconditions ensure the book is currently borrowed and the librarian has it in their hands, ready to return. The effects update the situation to show that the book is no longer checked out, any requests and due dates are removed, the book is accessible again, and the librarian's hands are free.","Parameters:
1. ?x - book

Preconditions:
```
(and
    (accessible ?x)
    (not (checked-out ?x))
)
```

Effects:
```
(and
    (checked-out ?x)
    (not (accessible ?x))
    (book-request ?x)
    (return-due ?x)
)
```
","(:action return-book
    :parameters (?x - book)
    :precondition (and (checked-out ?x) (holding ?x))
    :effect (and (not (checked-out ?x)) (not (holding ?x)) (not (book-request ?x)) (not (return-due ?x)) (accessible ?x) (hands-free))
)",
libraryworld,return-book,0.6028046607971191,Semi-Hard Negative (Intra-Domain Mismatch),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Imagine a patron returning a borrowed book to the library. The 'return-book' action enables the librarian to process the return, updating the book's status and removing any return due date. This action is applicable when the librarian is holding the book that needs to be returned.

Action name: return-book


Your answer:

**Explanation:** 

Imagine a patron is returning a borrowed book to the library. The librarian needs to process this return to update the book's status and remove any return due date. The action ""return-book"" describes how the librarian can do this. There are specific conditions, called ""preconditions,"" that must be met to ensure the return can be processed correctly.

For the action ""return-book,"" let's break down what needs to be true before the librarian can return the book:

1. **The book must be checked out:** This means the book is currently borrowed by someone and needs to be returned.
2. **The librarian must be holding the book:** This indicates the librarian has the book in their hands, ready to process the return.

Once these preconditions are met, the librarian can proceed with the ""return-book"" action. This action results in several changes, called ""effects,"" that update the status of the book and the librarian's hands:

1. **The book is no longer checked out:** This shows that the book has been returned and is available for borrowing again.
2. **The librarian is no longer holding the book:** This indicates the librarian has processed the return and placed the book back in its proper place.
3. **Any request for the book is removed:** If there was a request for this book, it is no longer needed since the book is now available.
4. **The return due date is removed:** This updates the system to show that the book is no longer due for return.
5. **The book becomes accessible:** Now that the book is back in the library, it is easy to find and borrow again.
6. **The librarian's hands are now free:** Since the librarian has finished processing the return, their hands are empty and ready for the next task.

To summarize, the preconditions ensure the book is currently borrowed and the librarian has it in their hands, ready to return. The effects update the situation to show that the book is no longer checked out, any requests and due dates are removed, the book is accessible again, and the librarian's hands are free.","Parameters:
1. ?x - book

Preconditions:
```
(and
    (accessible ?x)
    (on-table ?x)
    (hands-free)
)
```

Effects:
```
(and
    (not (on-table ?x))
    (not (accessible ?x))
    (not (hands-free))
    (holding ?x)
)
```
","(:action return-book
    :parameters (?x - book)
    :precondition (and (checked-out ?x) (holding ?x))
    :effect (and (not (checked-out ?x)) (not (holding ?x)) (not (book-request ?x)) (not (return-due ?x)) (accessible ?x) (hands-free))
)",
libraryworld,return-book,0.8817847967147827,Semi-Hard Negative (Intra-Domain Mismatch),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Imagine a patron returning a borrowed book to the library. The 'return-book' action enables the librarian to process the return, updating the book's status and removing any return due date. This action is applicable when the librarian is holding the book that needs to be returned.

Action name: return-book


Your answer:

**Explanation:** 

Imagine a patron is returning a borrowed book to the library. The librarian needs to process this return to update the book's status and remove any return due date. The action ""return-book"" describes how the librarian can do this. There are specific conditions, called ""preconditions,"" that must be met to ensure the return can be processed correctly.

For the action ""return-book,"" let's break down what needs to be true before the librarian can return the book:

1. **The book must be checked out:** This means the book is currently borrowed by someone and needs to be returned.
2. **The librarian must be holding the book:** This indicates the librarian has the book in their hands, ready to process the return.

Once these preconditions are met, the librarian can proceed with the ""return-book"" action. This action results in several changes, called ""effects,"" that update the status of the book and the librarian's hands:

1. **The book is no longer checked out:** This shows that the book has been returned and is available for borrowing again.
2. **The librarian is no longer holding the book:** This indicates the librarian has processed the return and placed the book back in its proper place.
3. **Any request for the book is removed:** If there was a request for this book, it is no longer needed since the book is now available.
4. **The return due date is removed:** This updates the system to show that the book is no longer due for return.
5. **The book becomes accessible:** Now that the book is back in the library, it is easy to find and borrow again.
6. **The librarian's hands are now free:** Since the librarian has finished processing the return, their hands are empty and ready for the next task.

To summarize, the preconditions ensure the book is currently borrowed and the librarian has it in their hands, ready to return. The effects update the situation to show that the book is no longer checked out, any requests and due dates are removed, the book is accessible again, and the librarian's hands are free.","Parameters:
1. ?x - book
2. ?y - book
3. ?cat - category

Preconditions:
```
(and
    (holding ?x)
    (accessible ?y)
    (belongs-to-category ?x ?cat)
    (not (shelf-overflow ?cat))
)
```

Effects:
```
(and
    (not (holding ?x))
    (not (accessible ?y))
    (accessible ?x)
    (hands-free)
    (on-shelf ?x ?y)
    (shelf-empty ?cat)
)
```
","(:action return-book
    :parameters (?x - book)
    :precondition (and (checked-out ?x) (holding ?x))
    :effect (and (not (checked-out ?x)) (not (holding ?x)) (not (book-request ?x)) (not (return-due ?x)) (accessible ?x) (hands-free))
)",
libraryworld,return-book,0.7177783846855164,Semi-Hard Negative (Intra-Domain Mismatch),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Imagine a patron returning a borrowed book to the library. The 'return-book' action enables the librarian to process the return, updating the book's status and removing any return due date. This action is applicable when the librarian is holding the book that needs to be returned.

Action name: return-book


Your answer:
","**Explanation:** 

Imagine you are a librarian in a library, and you need to take a book off the shelf. This book is placed on top of another book. The action ""remove-from-shelf"" lets you take the top book off the shelf. To do this, certain conditions, called ""preconditions,"" must be met to make sure you can successfully take the book.

For the action ""remove-from-shelf,"" let's break down what needs to be true before you can take the book off the shelf:

1. **The book must be on the shelf:** This means the book you want to take is on top of another book on the shelf.
2. **The book must be accessible:** This means the book isn't covered by other books or objects, so you can easily reach it.
3. **Your hands must be free:** You need to have empty hands to pick up the book, meaning you aren't already holding something else.
4. **The book must belong to a certain category:** This helps you know which book you are taking and ensures you are organizing the books properly.

Once these preconditions are met, you can proceed with the ""remove-from-shelf"" action. This action results in several changes, called ""effects,"" that update the status of the books and your hands:

1. **You are now holding the book:** This indicates you have picked up the book from the shelf.
2. **The book underneath becomes accessible:** Since you have removed the top book, the book underneath is now easy to reach.
3. **The book you removed is no longer accessible:** Because you are holding the book, it's not available on the shelf anymore.
4. **Your hands are no longer free:** Since you are now holding the book, your hands are occupied.
5. **The book is no longer on the shelf:** This shows that the book has been taken off the shelf.
6. **The shelf is now empty for that category:** This helps keep track of the shelf space and organization.

To summarize, the preconditions ensure the book is on the shelf, accessible, your hands are free, and you know which category the book belongs to. The effects update the situation to show you are holding the book, the book underneath is now accessible, and the shelf is empty for that category.
Parameters:
1. ?x - book
2. ?y - book
3. ?cat - category

Preconditions:
```
(and
    (on-shelf ?x ?y)
    (accessible ?x)
    (hands-free)
    (belongs-to-category ?x ?cat)
)
```

Effects:
```
(and
    (holding ?x)
    (accessible ?y)
    (not (accessible ?x))
    (not (hands-free))
    (not (on-shelf ?x ?y))
    (shelf-empty ?cat)
)
```
","(:action return-book
    :parameters (?x - book)
    :precondition (and (checked-out ?x) (holding ?x))
    :effect (and (not (checked-out ?x)) (not (holding ?x)) (not (book-request ?x)) (not (return-due ?x)) (accessible ?x) (hands-free))
)",
libraryworld,return-book,0.6384035348892212,Semi-Hard Negative (Intra-Domain Mismatch),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Imagine a patron returning a borrowed book to the library. The 'return-book' action enables the librarian to process the return, updating the book's status and removing any return due date. This action is applicable when the librarian is holding the book that needs to be returned.

Action name: return-book


Your answer:
","**Explanation:** 

Imagine you are a librarian holding a book in your hands, and you want to place it on a nearby table. The action ""place-on-table"" lets you do this. To make sure everything goes smoothly, there is a condition, called a ""precondition,"" that must be met before you can place the book on the table.

For the action ""place-on-table,"" let's break down what needs to be true before you can place the book on the table:

1. **You must be holding the book:** This means you have the book in your hands, ready to place it on the table.

Once this precondition is met, you can proceed with the ""place-on-table"" action. This action results in several changes, called ""effects,"" that update the status of the book and your hands:

1. **You are no longer holding the book:** This shows that you have placed the book on the table.
2. **The book becomes accessible:** Now that the book is on the table, it is easy to reach and pick up again if needed.
3. **Your hands are now free:** Since you have placed the book on the table, your hands are empty again.
4. **The book is on the table:** This indicates the new location of the book.

To summarize, the precondition ensures you are holding the book, making sure you are ready to place it on the table. The effects update the situation to show that you have placed the book on the table, it is now accessible, and your hands are free again.
Parameters:
1. ?x - book

Preconditions:
```
(holding ?x)
```

Effects:
```
(and
    (not (holding ?x))
    (accessible ?x)
    (hands-free)
    (on-table ?x)
)
```
","(:action return-book
    :parameters (?x - book)
    :precondition (and (checked-out ?x) (holding ?x))
    :effect (and (not (checked-out ?x)) (not (holding ?x)) (not (book-request ?x)) (not (return-due ?x)) (accessible ?x) (hands-free))
)",
libraryworld,return-book,0.6450091600418091,Semi-Hard Negative (Intra-Domain Mismatch),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Imagine a patron returning a borrowed book to the library. The 'return-book' action enables the librarian to process the return, updating the book's status and removing any return due date. This action is applicable when the librarian is holding the book that needs to be returned.

Action name: return-book


Your answer:
","**Explanation:** 

Imagine a librarian in a library who helps patrons borrow books. When a patron wants to borrow a book, the librarian needs to make sure certain conditions are met before they can check the book out. These conditions are called ""preconditions.""

For the action ""check-out,"" let's think about what needs to be true before the librarian can let the patron borrow the book:

1. **The book must be accessible:** This means the book is not covered by other books or objects, making it easy for the librarian to pick up. If the book isn't accessible, the librarian can't reach it to check it out.
2. **The book must not be already checked out:** If the book is already checked out to someone else, it can't be borrowed by another patron until it's returned.

Once these preconditions are met, the librarian can proceed with the check-out action. The action results in several changes, called ""effects,"" that update the status of the book:

1. **The book is marked as checked out:** This indicates that the book is now borrowed and can't be checked out by another patron until it's returned.
2. **The book is no longer accessible:** Since the book is borrowed, it's no longer available on the shelf for others to take.
3. **There is a request for the book:** This keeps track of the borrowing transaction.
4. **A return due date is set:** This helps the library know when to expect the book back.

To summarize, the preconditions ensure the librarian can access the book and that it isn't already borrowed. The effects update the system to show the book is now checked out, not accessible, and has a return due date.
Parameters:
1. ?x - book

Preconditions:
```
(and
    (accessible ?x)
    (not (checked-out ?x))
)
```

Effects:
```
(and
    (checked-out ?x)
    (not (accessible ?x))
    (book-request ?x)
    (return-due ?x)
)
```
","(:action return-book
    :parameters (?x - book)
    :precondition (and (checked-out ?x) (holding ?x))
    :effect (and (not (checked-out ?x)) (not (holding ?x)) (not (book-request ?x)) (not (return-due ?x)) (accessible ?x) (hands-free))
)",
libraryworld,return-book,0.5846755504608154,Semi-Hard Negative (Intra-Domain Mismatch),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Imagine a patron returning a borrowed book to the library. The 'return-book' action enables the librarian to process the return, updating the book's status and removing any return due date. This action is applicable when the librarian is holding the book that needs to be returned.

Action name: return-book


Your answer:
","**Explanation:** 

Imagine you're a librarian in a library, and there's a table full of books that need to be sorted. You want to pick up one of these books. To do this, certain conditions, called ""preconditions,"" must be met to ensure you can successfully pick up the book.

For the action ""take-from-table,"" let's break down what needs to be true before you can pick up a book:

1. **The book must be accessible:** This means the book isn't covered by other books or objects, so you can easily reach it.
2. **The book must be on the table:** This indicates the book is physically located on the table, not somewhere else like a shelf.
3. **Your hands must be free:** You need to have empty hands to pick up the book, meaning you aren't already holding something else.

Once these preconditions are met, you can proceed with the ""take-from-table"" action. This action results in several changes, called ""effects,"" that update the status of the book and your hands:

1. **The book is no longer on the table:** This indicates you've picked up the book from the table.
2. **The book is no longer accessible:** Since you're holding the book, it's not available for someone else to pick up from the table.
3. **Your hands are no longer free:** Because you're now holding the book, your hands are occupied.
4. **You are holding the book:** This shows that the book is now in your hands.

To summarize, the preconditions ensure you can reach the book, it's on the table, and your hands are free to pick it up. The effects update the situation to reflect that the book is now in your hands and no longer on the table or accessible to others.
Parameters:
1. ?x - book

Preconditions:
```
(and
    (accessible ?x)
    (on-table ?x)
    (hands-free)
)
```

Effects:
```
(and
    (not (on-table ?x))
    (not (accessible ?x))
    (not (hands-free))
    (holding ?x)
)
```
","(:action return-book
    :parameters (?x - book)
    :precondition (and (checked-out ?x) (holding ?x))
    :effect (and (not (checked-out ?x)) (not (holding ?x)) (not (book-request ?x)) (not (return-due ?x)) (accessible ?x) (hands-free))
)",
libraryworld,return-book,0.7562538981437683,Semi-Hard Negative (Intra-Domain Mismatch),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Imagine a patron returning a borrowed book to the library. The 'return-book' action enables the librarian to process the return, updating the book's status and removing any return due date. This action is applicable when the librarian is holding the book that needs to be returned.

Action name: return-book


Your answer:
","**Explanation:** 

Imagine you are a librarian standing near a shelf, holding a book in your hands. You want to place this book on top of another book that is already on the shelf. This action, called ""place-on-shelf,"" needs to follow certain rules, called ""preconditions,"" to make sure everything goes smoothly.

For the action ""place-on-shelf,"" let's break down what needs to be true before you can place the book on the shelf:

1. **You must be holding the book:** This means you have the book in your hands, ready to place it on the shelf.
2. **The book on the shelf must be accessible:** The book already on the shelf should not be covered by other books or objects, so you can easily place your book on top of it.
3. **The book you are holding must belong to a certain category:** This helps in organizing the books properly according to their categories.
4. **The shelf should not be overflowing:** There should be enough space on the shelf to place another book.

Once these preconditions are met, you can proceed with the ""place-on-shelf"" action. This action results in several changes, called ""effects,"" that update the status of the books and your hands:

1. **You are no longer holding the book:** This shows that you have placed the book on the shelf.
2. **The book on the shelf is no longer accessible:** Because the new book is now on top of it, making it covered.
3. **The book you placed is now accessible:** This indicates the book you just placed is easy to reach.
4. **Your hands are now free:** Since you have placed the book on the shelf, your hands are empty again.
5. **The new book is on the shelf on top of the other book:** This shows the new book's position.
6. **The shelf is now considered empty for that category:** This helps in tracking the organization and availability of shelf space for that category.

To summarize, the preconditions ensure you are holding the book, the shelf has space, and the book on the shelf is accessible. The effects update the situation to show that you have placed the book on the shelf, the new book is accessible, and your hands are free again.
Parameters:
1. ?x - book
2. ?y - book
3. ?cat - category

Preconditions:
```
(and
    (holding ?x)
    (accessible ?y)
    (belongs-to-category ?x ?cat)
    (not (shelf-overflow ?cat))
)
```

Effects:
```
(and
    (not (holding ?x))
    (not (accessible ?y))
    (accessible ?x)
    (hands-free)
    (on-shelf ?x ?y)
    (shelf-empty ?cat)
)
```
","(:action return-book
    :parameters (?x - book)
    :precondition (and (checked-out ?x) (holding ?x))
    :effect (and (not (checked-out ?x)) (not (holding ?x)) (not (book-request ?x)) (not (return-due ?x)) (accessible ?x) (hands-free))
)",
libraryworld,return-book,0.3507041335105896,Hard Negative (Manipulated Action),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Imagine a patron returning a borrowed book to the library. The 'return-book' action enables the librarian to process the return, updating the book's status and removing any return due date. This action is applicable when the librarian is holding the book that needs to be returned.

Action name: return-book


Your answer:
","Parameters:
1. ?x - book

Preconditions:
```
(and
    (hands-free)
    (accessible ?x)
)
```

Effects:
```
(and
    (holding ?x)
    (checked-out ?x)
    (not (checked-out ?x))
    (not (holding ?x))
    (not (book-request ?x))
    (not (return-due ?x))
)
```
","(:action return-book
    :parameters (?x - book)
    :precondition (and (checked-out ?x) (holding ?x))
    :effect (and (not (checked-out ?x)) (not (holding ?x)) (not (book-request ?x)) (not (return-due ?x)) (accessible ?x) (hands-free))
)","swap (holding ?x) with (hands-free)
swap (checked-out ?x) with (accessible ?x)
"
libraryworld,return-book,0.350650429725647,Hard Negative (Manipulated Action),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Imagine a patron returning a borrowed book to the library. The 'return-book' action enables the librarian to process the return, updating the book's status and removing any return due date. This action is applicable when the librarian is holding the book that needs to be returned.

Action name: return-book


Your answer:
","Parameters:
1. ?x - book

Preconditions:
```
(and
    (not (holding ?x))
    (checked-out ?x)
)
```

Effects:
```
(and
    (holding ?x)
    (not (checked-out ?x))
    (not (book-request ?x))
    (not (return-due ?x))
    (accessible ?x)
    (hands-free)
)
```
","(:action return-book
    :parameters (?x - book)
    :precondition (and (checked-out ?x) (holding ?x))
    :effect (and (not (checked-out ?x)) (not (holding ?x)) (not (book-request ?x)) (not (return-due ?x)) (accessible ?x) (hands-free))
)","swap (holding ?x) with (not (holding ?x))
"
libraryworld,return-book,0.3397815525531769,Hard Negative (Manipulated Action),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Imagine a patron returning a borrowed book to the library. The 'return-book' action enables the librarian to process the return, updating the book's status and removing any return due date. This action is applicable when the librarian is holding the book that needs to be returned.

Action name: return-book


Your answer:
","Parameters:
1. ?x - book

Preconditions:
```
(and
    (checked-out ?x)
    (holding ?x)
)
```

Effects:
```
(and
    (not (checked-out ?x))
    (not (holding ?x))
    (not (book-request ?x))
    (not (return-due ?x))
    (hands-free)
)
```
","(:action return-book
    :parameters (?x - book)
    :precondition (and (checked-out ?x) (holding ?x))
    :effect (and (not (checked-out ?x)) (not (holding ?x)) (not (book-request ?x)) (not (return-due ?x)) (accessible ?x) (hands-free))
)","remove (accessible ?x) from effects
"
libraryworld,return-book,0.3456547260284424,Hard Negative (Manipulated Action),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Imagine a patron returning a borrowed book to the library. The 'return-book' action enables the librarian to process the return, updating the book's status and removing any return due date. This action is applicable when the librarian is holding the book that needs to be returned.

Action name: return-book


Your answer:
","Parameters:
1. ?x - book

Preconditions:
```
(and
    (checked-out ?x)
    (holding ?x)
)
```

Effects:
```
(and
    (not (checked-out ?x))
    (not (book-request ?x))
    (not (return-due ?x))
    (accessible ?x)
    (hands-free)
)
```
","(:action return-book
    :parameters (?x - book)
    :precondition (and (checked-out ?x) (holding ?x))
    :effect (and (not (checked-out ?x)) (not (holding ?x)) (not (book-request ?x)) (not (return-due ?x)) (accessible ?x) (hands-free))
)","remove (not (holding ?x)) from effects
"
libraryworld,return-book,0.3559386730194092,Hard Negative (Manipulated Action),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Imagine a patron returning a borrowed book to the library. The 'return-book' action enables the librarian to process the return, updating the book's status and removing any return due date. This action is applicable when the librarian is holding the book that needs to be returned.

Action name: return-book


Your answer:
","Parameters:
1. ?x - book

Preconditions:
```
(and
    (not (holding ?x))
    (checked-out ?x)
)
```

Effects:
```
(and
    (checked-out ?x)
    (holding ?x)
    (not (book-request ?x))
    (not (return-due ?x))
    (accessible ?x)
    (hands-free)
)
```
","(:action return-book
    :parameters (?x - book)
    :precondition (and (checked-out ?x) (holding ?x))
    :effect (and (not (checked-out ?x)) (not (holding ?x)) (not (book-request ?x)) (not (return-due ?x)) (accessible ?x) (hands-free))
)","negate (not (checked-out ?x)) in effects
swap (holding ?x) with (not (holding ?x))
"
libraryworld,return-book,0.2579456567764282,Hard Negative (Manipulated Action),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Imagine a patron returning a borrowed book to the library. The 'return-book' action enables the librarian to process the return, updating the book's status and removing any return due date. This action is applicable when the librarian is holding the book that needs to be returned.

Action name: return-book


Your answer:
","Parameters:
1. ?x - book

Preconditions:
```
(and
    (not (checked-out ?x))
    (checked-out ?x)
)
```

Effects:
```
(and
    (holding ?x)
    (not (holding ?x))
    (not (book-request ?x))
    (not (return-due ?x))
    (accessible ?x)
    (hands-free)
)
```
","(:action return-book
    :parameters (?x - book)
    :precondition (and (checked-out ?x) (holding ?x))
    :effect (and (not (checked-out ?x)) (not (holding ?x)) (not (book-request ?x)) (not (return-due ?x)) (accessible ?x) (hands-free))
)","swap (holding ?x) with (not (checked-out ?x))
"
libraryworld,return-book,0.3397815525531769,Hard Negative (Manipulated Action),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Imagine a patron returning a borrowed book to the library. The 'return-book' action enables the librarian to process the return, updating the book's status and removing any return due date. This action is applicable when the librarian is holding the book that needs to be returned.

Action name: return-book


Your answer:
","Parameters:
1. ?x - book

Preconditions:
```
(and
    (checked-out ?x)
    (holding ?x)
)
```

Effects:
```
(and
    (not (checked-out ?x))
    (not (holding ?x))
    (not (book-request ?x))
    (not (return-due ?x))
    (hands-free)
)
```
","(:action return-book
    :parameters (?x - book)
    :precondition (and (checked-out ?x) (holding ?x))
    :effect (and (not (checked-out ?x)) (not (holding ?x)) (not (book-request ?x)) (not (return-due ?x)) (accessible ?x) (hands-free))
)","remove (accessible ?x) from effects
"
libraryworld,return-book,0.33181238174438477,Hard Negative (Manipulated Action),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Imagine a patron returning a borrowed book to the library. The 'return-book' action enables the librarian to process the return, updating the book's status and removing any return due date. This action is applicable when the librarian is holding the book that needs to be returned.

Action name: return-book


Your answer:
","Parameters:
1. ?x - book

Preconditions:
```
(and
    (not (checked-out ?x))
    (holding ?x)
)
```

Effects:
```
(and
    (not (checked-out ?x))
    (not (holding ?x))
    (not (book-request ?x))
    (not (return-due ?x))
    (accessible ?x)
    (hands-free)
)
```
","(:action return-book
    :parameters (?x - book)
    :precondition (and (checked-out ?x) (holding ?x))
    :effect (and (not (checked-out ?x)) (not (holding ?x)) (not (book-request ?x)) (not (return-due ?x)) (accessible ?x) (hands-free))
)","negate (checked-out ?x) in preconditions
"
libraryworld,return-book,0.3301061987876892,Hard Negative (Manipulated Action),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Imagine a patron returning a borrowed book to the library. The 'return-book' action enables the librarian to process the return, updating the book's status and removing any return due date. This action is applicable when the librarian is holding the book that needs to be returned.

Action name: return-book


Your answer:
","Parameters:
1. ?x - book

Preconditions:
```
(and
    (not (checked-out ?x))
    (holding ?x)
)
```

Effects:
```
(and
    (checked-out ?x)
    (not (holding ?x))
    (not (book-request ?x))
    (accessible ?x)
    (hands-free)
)
```
","(:action return-book
    :parameters (?x - book)
    :precondition (and (checked-out ?x) (holding ?x))
    :effect (and (not (checked-out ?x)) (not (holding ?x)) (not (book-request ?x)) (not (return-due ?x)) (accessible ?x) (hands-free))
)","remove (not (return-due ?x)) from effects
swap (checked-out ?x) with (not (checked-out ?x))
"
libraryworld,return-book,0.33294281363487244,Hard Negative (Manipulated Action),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Imagine a patron returning a borrowed book to the library. The 'return-book' action enables the librarian to process the return, updating the book's status and removing any return due date. This action is applicable when the librarian is holding the book that needs to be returned.

Action name: return-book


Your answer:
","Parameters:
1. ?x - book

Preconditions:
```
(and
    (not (holding ?x))
    (not (checked-out ?x))
)
```

Effects:
```
(and
    (not (checked-out ?x))
    (not (holding ?x))
    (not (book-request ?x))
    (not (return-due ?x))
    (accessible ?x)
    (hands-free)
)
```
","(:action return-book
    :parameters (?x - book)
    :precondition (and (checked-out ?x) (holding ?x))
    :effect (and (not (checked-out ?x)) (not (holding ?x)) (not (book-request ?x)) (not (return-due ?x)) (accessible ?x) (hands-free))
)","negate (holding ?x) in preconditions
negate (checked-out ?x) in preconditions
"
libraryworld,return-book,0.220219686627388,Hard Negative (Manipulated Action),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Imagine a patron returning a borrowed book to the library. The 'return-book' action enables the librarian to process the return, updating the book's status and removing any return due date. This action is applicable when the librarian is holding the book that needs to be returned.

Action name: return-book


Your answer:

**Explanation:** 

Imagine a patron is returning a borrowed book to the library. The librarian needs to process this return to update the book's status and remove any return due date. The action ""return-book"" describes how the librarian can do this. There are specific conditions, called ""preconditions,"" that must be met to ensure the return can be processed correctly.

For the action ""return-book,"" let's break down what needs to be true before the librarian can return the book:

1. **The book must be checked out:** This means the book is currently borrowed by someone and needs to be returned.
2. **The librarian must be holding the book:** This indicates the librarian has the book in their hands, ready to process the return.

Once these preconditions are met, the librarian can proceed with the ""return-book"" action. This action results in several changes, called ""effects,"" that update the status of the book and the librarian's hands:

1. **The book is no longer checked out:** This shows that the book has been returned and is available for borrowing again.
2. **The librarian is no longer holding the book:** This indicates the librarian has processed the return and placed the book back in its proper place.
3. **Any request for the book is removed:** If there was a request for this book, it is no longer needed since the book is now available.
4. **The return due date is removed:** This updates the system to show that the book is no longer due for return.
5. **The book becomes accessible:** Now that the book is back in the library, it is easy to find and borrow again.
6. **The librarian's hands are now free:** Since the librarian has finished processing the return, their hands are empty and ready for the next task.

To summarize, the preconditions ensure the book is currently borrowed and the librarian has it in their hands, ready to return. The effects update the situation to show that the book is no longer checked out, any requests and due dates are removed, the book is accessible again, and the librarian's hands are free.","Parameters:
1. ?x - book

Preconditions:
```
(and
    (not (holding ?x))
    (checked-out ?x)
)
```

Effects:
```
(and
    (not (holding ?x))
    (not (book-request ?x))
    (not (return-due ?x))
    (accessible ?x)
    (hands-free)
)
```
","(:action return-book
    :parameters (?x - book)
    :precondition (and (checked-out ?x) (holding ?x))
    :effect (and (not (checked-out ?x)) (not (holding ?x)) (not (book-request ?x)) (not (return-due ?x)) (accessible ?x) (hands-free))
)","negate (holding ?x) in preconditions
remove (not (checked-out ?x)) from effects
"
libraryworld,return-book,0.191816508769989,Hard Negative (Manipulated Action),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Imagine a patron returning a borrowed book to the library. The 'return-book' action enables the librarian to process the return, updating the book's status and removing any return due date. This action is applicable when the librarian is holding the book that needs to be returned.

Action name: return-book


Your answer:

**Explanation:** 

Imagine a patron is returning a borrowed book to the library. The librarian needs to process this return to update the book's status and remove any return due date. The action ""return-book"" describes how the librarian can do this. There are specific conditions, called ""preconditions,"" that must be met to ensure the return can be processed correctly.

For the action ""return-book,"" let's break down what needs to be true before the librarian can return the book:

1. **The book must be checked out:** This means the book is currently borrowed by someone and needs to be returned.
2. **The librarian must be holding the book:** This indicates the librarian has the book in their hands, ready to process the return.

Once these preconditions are met, the librarian can proceed with the ""return-book"" action. This action results in several changes, called ""effects,"" that update the status of the book and the librarian's hands:

1. **The book is no longer checked out:** This shows that the book has been returned and is available for borrowing again.
2. **The librarian is no longer holding the book:** This indicates the librarian has processed the return and placed the book back in its proper place.
3. **Any request for the book is removed:** If there was a request for this book, it is no longer needed since the book is now available.
4. **The return due date is removed:** This updates the system to show that the book is no longer due for return.
5. **The book becomes accessible:** Now that the book is back in the library, it is easy to find and borrow again.
6. **The librarian's hands are now free:** Since the librarian has finished processing the return, their hands are empty and ready for the next task.

To summarize, the preconditions ensure the book is currently borrowed and the librarian has it in their hands, ready to return. The effects update the situation to show that the book is no longer checked out, any requests and due dates are removed, the book is accessible again, and the librarian's hands are free.","Parameters:
1. ?x - book

Preconditions:
```
(checked-out ?x)
```

Effects:
```
(and
    (checked-out ?x)
    (not (holding ?x))
    (not (book-request ?x))
    (not (return-due ?x))
    (accessible ?x)
    (hands-free)
)
```
","(:action return-book
    :parameters (?x - book)
    :precondition (and (checked-out ?x) (holding ?x))
    :effect (and (not (checked-out ?x)) (not (holding ?x)) (not (book-request ?x)) (not (return-due ?x)) (accessible ?x) (hands-free))
)","remove (holding ?x) from preconditions
negate (not (checked-out ?x)) in effects
"
libraryworld,return-book,0.213828444480896,Hard Negative (Manipulated Action),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Imagine a patron returning a borrowed book to the library. The 'return-book' action enables the librarian to process the return, updating the book's status and removing any return due date. This action is applicable when the librarian is holding the book that needs to be returned.

Action name: return-book


Your answer:

**Explanation:** 

Imagine a patron is returning a borrowed book to the library. The librarian needs to process this return to update the book's status and remove any return due date. The action ""return-book"" describes how the librarian can do this. There are specific conditions, called ""preconditions,"" that must be met to ensure the return can be processed correctly.

For the action ""return-book,"" let's break down what needs to be true before the librarian can return the book:

1. **The book must be checked out:** This means the book is currently borrowed by someone and needs to be returned.
2. **The librarian must be holding the book:** This indicates the librarian has the book in their hands, ready to process the return.

Once these preconditions are met, the librarian can proceed with the ""return-book"" action. This action results in several changes, called ""effects,"" that update the status of the book and the librarian's hands:

1. **The book is no longer checked out:** This shows that the book has been returned and is available for borrowing again.
2. **The librarian is no longer holding the book:** This indicates the librarian has processed the return and placed the book back in its proper place.
3. **Any request for the book is removed:** If there was a request for this book, it is no longer needed since the book is now available.
4. **The return due date is removed:** This updates the system to show that the book is no longer due for return.
5. **The book becomes accessible:** Now that the book is back in the library, it is easy to find and borrow again.
6. **The librarian's hands are now free:** Since the librarian has finished processing the return, their hands are empty and ready for the next task.

To summarize, the preconditions ensure the book is currently borrowed and the librarian has it in their hands, ready to return. The effects update the situation to show that the book is no longer checked out, any requests and due dates are removed, the book is accessible again, and the librarian's hands are free.","Parameters:
1. ?x - book

Preconditions:
```
(and
    (not (book-request ?x))
    (accessible ?x)
)
```

Effects:
```
(and
    (checked-out ?x)
    (holding ?x)
    (not (checked-out ?x))
    (not (holding ?x))
    (not (return-due ?x))
    (hands-free)
)
```
","(:action return-book
    :parameters (?x - book)
    :precondition (and (checked-out ?x) (holding ?x))
    :effect (and (not (checked-out ?x)) (not (holding ?x)) (not (book-request ?x)) (not (return-due ?x)) (accessible ?x) (hands-free))
)","swap (checked-out ?x) with (not (book-request ?x))
swap (holding ?x) with (accessible ?x)
"
libraryworld,return-book,0.13311870396137238,Hard Negative (Manipulated Action),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Imagine a patron returning a borrowed book to the library. The 'return-book' action enables the librarian to process the return, updating the book's status and removing any return due date. This action is applicable when the librarian is holding the book that needs to be returned.

Action name: return-book


Your answer:

**Explanation:** 

Imagine a patron is returning a borrowed book to the library. The librarian needs to process this return to update the book's status and remove any return due date. The action ""return-book"" describes how the librarian can do this. There are specific conditions, called ""preconditions,"" that must be met to ensure the return can be processed correctly.

For the action ""return-book,"" let's break down what needs to be true before the librarian can return the book:

1. **The book must be checked out:** This means the book is currently borrowed by someone and needs to be returned.
2. **The librarian must be holding the book:** This indicates the librarian has the book in their hands, ready to process the return.

Once these preconditions are met, the librarian can proceed with the ""return-book"" action. This action results in several changes, called ""effects,"" that update the status of the book and the librarian's hands:

1. **The book is no longer checked out:** This shows that the book has been returned and is available for borrowing again.
2. **The librarian is no longer holding the book:** This indicates the librarian has processed the return and placed the book back in its proper place.
3. **Any request for the book is removed:** If there was a request for this book, it is no longer needed since the book is now available.
4. **The return due date is removed:** This updates the system to show that the book is no longer due for return.
5. **The book becomes accessible:** Now that the book is back in the library, it is easy to find and borrow again.
6. **The librarian's hands are now free:** Since the librarian has finished processing the return, their hands are empty and ready for the next task.

To summarize, the preconditions ensure the book is currently borrowed and the librarian has it in their hands, ready to return. The effects update the situation to show that the book is no longer checked out, any requests and due dates are removed, the book is accessible again, and the librarian's hands are free.","Parameters:
1. ?x - book

Preconditions:
```
(and
    (not (return-due ?x))
    (holding ?x)
)
```

Effects:
```
(and
    (checked-out ?x)
    (not (checked-out ?x))
    (not (holding ?x))
    (accessible ?x)
    (hands-free)
)
```
","(:action return-book
    :parameters (?x - book)
    :precondition (and (checked-out ?x) (holding ?x))
    :effect (and (not (checked-out ?x)) (not (holding ?x)) (not (book-request ?x)) (not (return-due ?x)) (accessible ?x) (hands-free))
)","swap (checked-out ?x) with (not (return-due ?x))
remove (not (book-request ?x)) from effects
"
libraryworld,return-book,0.225986510515213,Hard Negative (Manipulated Action),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Imagine a patron returning a borrowed book to the library. The 'return-book' action enables the librarian to process the return, updating the book's status and removing any return due date. This action is applicable when the librarian is holding the book that needs to be returned.

Action name: return-book


Your answer:

**Explanation:** 

Imagine a patron is returning a borrowed book to the library. The librarian needs to process this return to update the book's status and remove any return due date. The action ""return-book"" describes how the librarian can do this. There are specific conditions, called ""preconditions,"" that must be met to ensure the return can be processed correctly.

For the action ""return-book,"" let's break down what needs to be true before the librarian can return the book:

1. **The book must be checked out:** This means the book is currently borrowed by someone and needs to be returned.
2. **The librarian must be holding the book:** This indicates the librarian has the book in their hands, ready to process the return.

Once these preconditions are met, the librarian can proceed with the ""return-book"" action. This action results in several changes, called ""effects,"" that update the status of the book and the librarian's hands:

1. **The book is no longer checked out:** This shows that the book has been returned and is available for borrowing again.
2. **The librarian is no longer holding the book:** This indicates the librarian has processed the return and placed the book back in its proper place.
3. **Any request for the book is removed:** If there was a request for this book, it is no longer needed since the book is now available.
4. **The return due date is removed:** This updates the system to show that the book is no longer due for return.
5. **The book becomes accessible:** Now that the book is back in the library, it is easy to find and borrow again.
6. **The librarian's hands are now free:** Since the librarian has finished processing the return, their hands are empty and ready for the next task.

To summarize, the preconditions ensure the book is currently borrowed and the librarian has it in their hands, ready to return. The effects update the situation to show that the book is no longer checked out, any requests and due dates are removed, the book is accessible again, and the librarian's hands are free.","Parameters:
1. ?x - book

Preconditions:
```
(and
    (checked-out ?x)
    (holding ?x)
)
```

Effects:
```
(and
    (not (hands-free))
    (not (checked-out ?x))
    (not (holding ?x))
    (not (book-request ?x))
    (not (return-due ?x))
    (accessible ?x)
)
```
","(:action return-book
    :parameters (?x - book)
    :precondition (and (checked-out ?x) (holding ?x))
    :effect (and (not (checked-out ?x)) (not (holding ?x)) (not (book-request ?x)) (not (return-due ?x)) (accessible ?x) (hands-free))
)","negate (hands-free) in effects
"
libraryworld,return-book,0.3824104964733124,Hard Negative (Manipulated Action),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Imagine a patron returning a borrowed book to the library. The 'return-book' action enables the librarian to process the return, updating the book's status and removing any return due date. This action is applicable when the librarian is holding the book that needs to be returned.

Action name: return-book


Your answer:

**Explanation:** 

Imagine a patron is returning a borrowed book to the library. The librarian needs to process this return to update the book's status and remove any return due date. The action ""return-book"" describes how the librarian can do this. There are specific conditions, called ""preconditions,"" that must be met to ensure the return can be processed correctly.

For the action ""return-book,"" let's break down what needs to be true before the librarian can return the book:

1. **The book must be checked out:** This means the book is currently borrowed by someone and needs to be returned.
2. **The librarian must be holding the book:** This indicates the librarian has the book in their hands, ready to process the return.

Once these preconditions are met, the librarian can proceed with the ""return-book"" action. This action results in several changes, called ""effects,"" that update the status of the book and the librarian's hands:

1. **The book is no longer checked out:** This shows that the book has been returned and is available for borrowing again.
2. **The librarian is no longer holding the book:** This indicates the librarian has processed the return and placed the book back in its proper place.
3. **Any request for the book is removed:** If there was a request for this book, it is no longer needed since the book is now available.
4. **The return due date is removed:** This updates the system to show that the book is no longer due for return.
5. **The book becomes accessible:** Now that the book is back in the library, it is easy to find and borrow again.
6. **The librarian's hands are now free:** Since the librarian has finished processing the return, their hands are empty and ready for the next task.

To summarize, the preconditions ensure the book is currently borrowed and the librarian has it in their hands, ready to return. The effects update the situation to show that the book is no longer checked out, any requests and due dates are removed, the book is accessible again, and the librarian's hands are free.","Parameters:
1. ?x - book

Preconditions:
```
(and
    (checked-out ?x)
    (holding ?x)
)
```

Effects:
```
(and
    (book-request ?x)
    (not (checked-out ?x))
    (not (holding ?x))
    (not (return-due ?x))
    (accessible ?x)
    (hands-free)
)
```
","(:action return-book
    :parameters (?x - book)
    :precondition (and (checked-out ?x) (holding ?x))
    :effect (and (not (checked-out ?x)) (not (holding ?x)) (not (book-request ?x)) (not (return-due ?x)) (accessible ?x) (hands-free))
)","negate (not (book-request ?x)) in effects
"
libraryworld,return-book,0.2579456567764282,Hard Negative (Manipulated Action),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Imagine a patron returning a borrowed book to the library. The 'return-book' action enables the librarian to process the return, updating the book's status and removing any return due date. This action is applicable when the librarian is holding the book that needs to be returned.

Action name: return-book


Your answer:

**Explanation:** 

Imagine a patron is returning a borrowed book to the library. The librarian needs to process this return to update the book's status and remove any return due date. The action ""return-book"" describes how the librarian can do this. There are specific conditions, called ""preconditions,"" that must be met to ensure the return can be processed correctly.

For the action ""return-book,"" let's break down what needs to be true before the librarian can return the book:

1. **The book must be checked out:** This means the book is currently borrowed by someone and needs to be returned.
2. **The librarian must be holding the book:** This indicates the librarian has the book in their hands, ready to process the return.

Once these preconditions are met, the librarian can proceed with the ""return-book"" action. This action results in several changes, called ""effects,"" that update the status of the book and the librarian's hands:

1. **The book is no longer checked out:** This shows that the book has been returned and is available for borrowing again.
2. **The librarian is no longer holding the book:** This indicates the librarian has processed the return and placed the book back in its proper place.
3. **Any request for the book is removed:** If there was a request for this book, it is no longer needed since the book is now available.
4. **The return due date is removed:** This updates the system to show that the book is no longer due for return.
5. **The book becomes accessible:** Now that the book is back in the library, it is easy to find and borrow again.
6. **The librarian's hands are now free:** Since the librarian has finished processing the return, their hands are empty and ready for the next task.

To summarize, the preconditions ensure the book is currently borrowed and the librarian has it in their hands, ready to return. The effects update the situation to show that the book is no longer checked out, any requests and due dates are removed, the book is accessible again, and the librarian's hands are free.","Parameters:
1. ?x - book

Preconditions:
```
(and
    (not (checked-out ?x))
    (checked-out ?x)
)
```

Effects:
```
(and
    (holding ?x)
    (not (holding ?x))
    (not (book-request ?x))
    (not (return-due ?x))
    (accessible ?x)
    (hands-free)
)
```
","(:action return-book
    :parameters (?x - book)
    :precondition (and (checked-out ?x) (holding ?x))
    :effect (and (not (checked-out ?x)) (not (holding ?x)) (not (book-request ?x)) (not (return-due ?x)) (accessible ?x) (hands-free))
)","swap (holding ?x) with (not (checked-out ?x))
"
libraryworld,return-book,0.2579456567764282,Hard Negative (Manipulated Action),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Imagine a patron returning a borrowed book to the library. The 'return-book' action enables the librarian to process the return, updating the book's status and removing any return due date. This action is applicable when the librarian is holding the book that needs to be returned.

Action name: return-book


Your answer:

**Explanation:** 

Imagine a patron is returning a borrowed book to the library. The librarian needs to process this return to update the book's status and remove any return due date. The action ""return-book"" describes how the librarian can do this. There are specific conditions, called ""preconditions,"" that must be met to ensure the return can be processed correctly.

For the action ""return-book,"" let's break down what needs to be true before the librarian can return the book:

1. **The book must be checked out:** This means the book is currently borrowed by someone and needs to be returned.
2. **The librarian must be holding the book:** This indicates the librarian has the book in their hands, ready to process the return.

Once these preconditions are met, the librarian can proceed with the ""return-book"" action. This action results in several changes, called ""effects,"" that update the status of the book and the librarian's hands:

1. **The book is no longer checked out:** This shows that the book has been returned and is available for borrowing again.
2. **The librarian is no longer holding the book:** This indicates the librarian has processed the return and placed the book back in its proper place.
3. **Any request for the book is removed:** If there was a request for this book, it is no longer needed since the book is now available.
4. **The return due date is removed:** This updates the system to show that the book is no longer due for return.
5. **The book becomes accessible:** Now that the book is back in the library, it is easy to find and borrow again.
6. **The librarian's hands are now free:** Since the librarian has finished processing the return, their hands are empty and ready for the next task.

To summarize, the preconditions ensure the book is currently borrowed and the librarian has it in their hands, ready to return. The effects update the situation to show that the book is no longer checked out, any requests and due dates are removed, the book is accessible again, and the librarian's hands are free.","Parameters:
1. ?x - book

Preconditions:
```
(and
    (not (checked-out ?x))
    (checked-out ?x)
)
```

Effects:
```
(and
    (holding ?x)
    (not (holding ?x))
    (not (book-request ?x))
    (not (return-due ?x))
    (accessible ?x)
    (hands-free)
)
```
","(:action return-book
    :parameters (?x - book)
    :precondition (and (checked-out ?x) (holding ?x))
    :effect (and (not (checked-out ?x)) (not (holding ?x)) (not (book-request ?x)) (not (return-due ?x)) (accessible ?x) (hands-free))
)","swap (holding ?x) with (not (checked-out ?x))
"
libraryworld,return-book,0.3331737816333771,Hard Negative (Manipulated Action),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Imagine a patron returning a borrowed book to the library. The 'return-book' action enables the librarian to process the return, updating the book's status and removing any return due date. This action is applicable when the librarian is holding the book that needs to be returned.

Action name: return-book


Your answer:

**Explanation:** 

Imagine a patron is returning a borrowed book to the library. The librarian needs to process this return to update the book's status and remove any return due date. The action ""return-book"" describes how the librarian can do this. There are specific conditions, called ""preconditions,"" that must be met to ensure the return can be processed correctly.

For the action ""return-book,"" let's break down what needs to be true before the librarian can return the book:

1. **The book must be checked out:** This means the book is currently borrowed by someone and needs to be returned.
2. **The librarian must be holding the book:** This indicates the librarian has the book in their hands, ready to process the return.

Once these preconditions are met, the librarian can proceed with the ""return-book"" action. This action results in several changes, called ""effects,"" that update the status of the book and the librarian's hands:

1. **The book is no longer checked out:** This shows that the book has been returned and is available for borrowing again.
2. **The librarian is no longer holding the book:** This indicates the librarian has processed the return and placed the book back in its proper place.
3. **Any request for the book is removed:** If there was a request for this book, it is no longer needed since the book is now available.
4. **The return due date is removed:** This updates the system to show that the book is no longer due for return.
5. **The book becomes accessible:** Now that the book is back in the library, it is easy to find and borrow again.
6. **The librarian's hands are now free:** Since the librarian has finished processing the return, their hands are empty and ready for the next task.

To summarize, the preconditions ensure the book is currently borrowed and the librarian has it in their hands, ready to return. The effects update the situation to show that the book is no longer checked out, any requests and due dates are removed, the book is accessible again, and the librarian's hands are free.","Parameters:
1. ?x - book

Preconditions:
```
(and
    (not (holding ?x))
    (checked-out ?x)
)
```

Effects:
```
(and
    (not (checked-out ?x))
    (not (holding ?x))
    (not (book-request ?x))
    (not (return-due ?x))
    (accessible ?x)
    (hands-free)
)
```
","(:action return-book
    :parameters (?x - book)
    :precondition (and (checked-out ?x) (holding ?x))
    :effect (and (not (checked-out ?x)) (not (holding ?x)) (not (book-request ?x)) (not (return-due ?x)) (accessible ?x) (hands-free))
)","negate (holding ?x) in preconditions
"
libraryworld,return-book,0.18193382024765015,Hard Negative (Manipulated Action),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Imagine a patron returning a borrowed book to the library. The 'return-book' action enables the librarian to process the return, updating the book's status and removing any return due date. This action is applicable when the librarian is holding the book that needs to be returned.

Action name: return-book


Your answer:

**Explanation:** 

Imagine a patron is returning a borrowed book to the library. The librarian needs to process this return to update the book's status and remove any return due date. The action ""return-book"" describes how the librarian can do this. There are specific conditions, called ""preconditions,"" that must be met to ensure the return can be processed correctly.

For the action ""return-book,"" let's break down what needs to be true before the librarian can return the book:

1. **The book must be checked out:** This means the book is currently borrowed by someone and needs to be returned.
2. **The librarian must be holding the book:** This indicates the librarian has the book in their hands, ready to process the return.

Once these preconditions are met, the librarian can proceed with the ""return-book"" action. This action results in several changes, called ""effects,"" that update the status of the book and the librarian's hands:

1. **The book is no longer checked out:** This shows that the book has been returned and is available for borrowing again.
2. **The librarian is no longer holding the book:** This indicates the librarian has processed the return and placed the book back in its proper place.
3. **Any request for the book is removed:** If there was a request for this book, it is no longer needed since the book is now available.
4. **The return due date is removed:** This updates the system to show that the book is no longer due for return.
5. **The book becomes accessible:** Now that the book is back in the library, it is easy to find and borrow again.
6. **The librarian's hands are now free:** Since the librarian has finished processing the return, their hands are empty and ready for the next task.

To summarize, the preconditions ensure the book is currently borrowed and the librarian has it in their hands, ready to return. The effects update the situation to show that the book is no longer checked out, any requests and due dates are removed, the book is accessible again, and the librarian's hands are free.","Parameters:
1. ?x - book

Preconditions:
```
(and
    (not (return-due ?x))
    (not (book-request ?x))
)
```

Effects:
```
(and
    (holding ?x)
    (checked-out ?x)
    (not (checked-out ?x))
    (not (holding ?x))
    (accessible ?x)
    (hands-free)
)
```
","(:action return-book
    :parameters (?x - book)
    :precondition (and (checked-out ?x) (holding ?x))
    :effect (and (not (checked-out ?x)) (not (holding ?x)) (not (book-request ?x)) (not (return-due ?x)) (accessible ?x) (hands-free))
)","swap (holding ?x) with (not (return-due ?x))
swap (checked-out ?x) with (not (book-request ?x))
"
libraryworld,return-book,0.6513896584510803,Hard Negative (Manipulated Action),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Imagine a patron returning a borrowed book to the library. The 'return-book' action enables the librarian to process the return, updating the book's status and removing any return due date. This action is applicable when the librarian is holding the book that needs to be returned.

Action name: return-book


Your answer:
","**Explanation:** 

Imagine a patron is returning a borrowed book to the library. The librarian needs to process this return to update the book's status and remove any return due date. The action ""return-book"" describes how the librarian can do this. There are specific conditions, called ""preconditions,"" that must be met to ensure the return can be processed correctly.

For the action ""return-book,"" let's break down what needs to be true before the librarian can return the book:

1. **The book must be checked out:** This means the book is currently borrowed by someone and needs to be returned.
2. **The librarian must be holding the book:** This indicates the librarian has the book in their hands, ready to process the return.

Once these preconditions are met, the librarian can proceed with the ""return-book"" action. This action results in several changes, called ""effects,"" that update the status of the book and the librarian's hands:

1. **The book is no longer checked out:** This shows that the book has been returned and is available for borrowing again.
2. **The librarian is no longer holding the book:** This indicates the librarian has processed the return and placed the book back in its proper place.
3. **Any request for the book is removed:** If there was a request for this book, it is no longer needed since the book is now available.
4. **The return due date is removed:** This updates the system to show that the book is no longer due for return.
5. **The book becomes accessible:** Now that the book is back in the library, it is easy to find and borrow again.
6. **The librarian's hands are now free:** Since the librarian has finished processing the return, their hands are empty and ready for the next task.

To summarize, the preconditions ensure the book is currently borrowed and the librarian has it in their hands, ready to return. The effects update the situation to show that the book is no longer checked out, any requests and due dates are removed, the book is accessible again, and the librarian's hands are free.
Parameters:
1. ?x - book

Preconditions:
```
(holding ?x)
```

Effects:
```
(and
    (checked-out ?x)
    (not (holding ?x))
    (not (book-request ?x))
    (not (return-due ?x))
    (accessible ?x)
    (hands-free)
)
```
","(:action return-book
    :parameters (?x - book)
    :precondition (and (checked-out ?x) (holding ?x))
    :effect (and (not (checked-out ?x)) (not (holding ?x)) (not (book-request ?x)) (not (return-due ?x)) (accessible ?x) (hands-free))
)","negate (not (checked-out ?x)) in effects
remove (checked-out ?x) from preconditions
"
libraryworld,return-book,0.6513896584510803,Hard Negative (Manipulated Action),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Imagine a patron returning a borrowed book to the library. The 'return-book' action enables the librarian to process the return, updating the book's status and removing any return due date. This action is applicable when the librarian is holding the book that needs to be returned.

Action name: return-book


Your answer:
","**Explanation:** 

Imagine a patron is returning a borrowed book to the library. The librarian needs to process this return to update the book's status and remove any return due date. The action ""return-book"" describes how the librarian can do this. There are specific conditions, called ""preconditions,"" that must be met to ensure the return can be processed correctly.

For the action ""return-book,"" let's break down what needs to be true before the librarian can return the book:

1. **The book must be checked out:** This means the book is currently borrowed by someone and needs to be returned.
2. **The librarian must be holding the book:** This indicates the librarian has the book in their hands, ready to process the return.

Once these preconditions are met, the librarian can proceed with the ""return-book"" action. This action results in several changes, called ""effects,"" that update the status of the book and the librarian's hands:

1. **The book is no longer checked out:** This shows that the book has been returned and is available for borrowing again.
2. **The librarian is no longer holding the book:** This indicates the librarian has processed the return and placed the book back in its proper place.
3. **Any request for the book is removed:** If there was a request for this book, it is no longer needed since the book is now available.
4. **The return due date is removed:** This updates the system to show that the book is no longer due for return.
5. **The book becomes accessible:** Now that the book is back in the library, it is easy to find and borrow again.
6. **The librarian's hands are now free:** Since the librarian has finished processing the return, their hands are empty and ready for the next task.

To summarize, the preconditions ensure the book is currently borrowed and the librarian has it in their hands, ready to return. The effects update the situation to show that the book is no longer checked out, any requests and due dates are removed, the book is accessible again, and the librarian's hands are free.
Parameters:
1. ?x - book

Preconditions:
```
(and
    (hands-free)
    (holding ?x)
)
```

Effects:
```
(and
    (checked-out ?x)
    (not (checked-out ?x))
    (not (holding ?x))
    (not (book-request ?x))
    (not (return-due ?x))
    (accessible ?x)
)
```
","(:action return-book
    :parameters (?x - book)
    :precondition (and (checked-out ?x) (holding ?x))
    :effect (and (not (checked-out ?x)) (not (holding ?x)) (not (book-request ?x)) (not (return-due ?x)) (accessible ?x) (hands-free))
)","swap (checked-out ?x) with (hands-free)
"
libraryworld,return-book,0.6513896584510803,Hard Negative (Manipulated Action),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Imagine a patron returning a borrowed book to the library. The 'return-book' action enables the librarian to process the return, updating the book's status and removing any return due date. This action is applicable when the librarian is holding the book that needs to be returned.

Action name: return-book


Your answer:
","**Explanation:** 

Imagine a patron is returning a borrowed book to the library. The librarian needs to process this return to update the book's status and remove any return due date. The action ""return-book"" describes how the librarian can do this. There are specific conditions, called ""preconditions,"" that must be met to ensure the return can be processed correctly.

For the action ""return-book,"" let's break down what needs to be true before the librarian can return the book:

1. **The book must be checked out:** This means the book is currently borrowed by someone and needs to be returned.
2. **The librarian must be holding the book:** This indicates the librarian has the book in their hands, ready to process the return.

Once these preconditions are met, the librarian can proceed with the ""return-book"" action. This action results in several changes, called ""effects,"" that update the status of the book and the librarian's hands:

1. **The book is no longer checked out:** This shows that the book has been returned and is available for borrowing again.
2. **The librarian is no longer holding the book:** This indicates the librarian has processed the return and placed the book back in its proper place.
3. **Any request for the book is removed:** If there was a request for this book, it is no longer needed since the book is now available.
4. **The return due date is removed:** This updates the system to show that the book is no longer due for return.
5. **The book becomes accessible:** Now that the book is back in the library, it is easy to find and borrow again.
6. **The librarian's hands are now free:** Since the librarian has finished processing the return, their hands are empty and ready for the next task.

To summarize, the preconditions ensure the book is currently borrowed and the librarian has it in their hands, ready to return. The effects update the situation to show that the book is no longer checked out, any requests and due dates are removed, the book is accessible again, and the librarian's hands are free.
Parameters:
1. ?x - book

Preconditions:
```
(and
    (not (holding ?x))
    (not (checked-out ?x))
)
```

Effects:
```
(and
    (holding ?x)
    (not (checked-out ?x))
    (not (book-request ?x))
    (not (return-due ?x))
    (accessible ?x)
    (hands-free)
)
```
","(:action return-book
    :parameters (?x - book)
    :precondition (and (checked-out ?x) (holding ?x))
    :effect (and (not (checked-out ?x)) (not (holding ?x)) (not (book-request ?x)) (not (return-due ?x)) (accessible ?x) (hands-free))
)","swap (holding ?x) with (not (holding ?x))
negate (checked-out ?x) in preconditions
"
libraryworld,return-book,0.6513896584510803,Hard Negative (Manipulated Action),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Imagine a patron returning a borrowed book to the library. The 'return-book' action enables the librarian to process the return, updating the book's status and removing any return due date. This action is applicable when the librarian is holding the book that needs to be returned.

Action name: return-book


Your answer:
","**Explanation:** 

Imagine a patron is returning a borrowed book to the library. The librarian needs to process this return to update the book's status and remove any return due date. The action ""return-book"" describes how the librarian can do this. There are specific conditions, called ""preconditions,"" that must be met to ensure the return can be processed correctly.

For the action ""return-book,"" let's break down what needs to be true before the librarian can return the book:

1. **The book must be checked out:** This means the book is currently borrowed by someone and needs to be returned.
2. **The librarian must be holding the book:** This indicates the librarian has the book in their hands, ready to process the return.

Once these preconditions are met, the librarian can proceed with the ""return-book"" action. This action results in several changes, called ""effects,"" that update the status of the book and the librarian's hands:

1. **The book is no longer checked out:** This shows that the book has been returned and is available for borrowing again.
2. **The librarian is no longer holding the book:** This indicates the librarian has processed the return and placed the book back in its proper place.
3. **Any request for the book is removed:** If there was a request for this book, it is no longer needed since the book is now available.
4. **The return due date is removed:** This updates the system to show that the book is no longer due for return.
5. **The book becomes accessible:** Now that the book is back in the library, it is easy to find and borrow again.
6. **The librarian's hands are now free:** Since the librarian has finished processing the return, their hands are empty and ready for the next task.

To summarize, the preconditions ensure the book is currently borrowed and the librarian has it in their hands, ready to return. The effects update the situation to show that the book is no longer checked out, any requests and due dates are removed, the book is accessible again, and the librarian's hands are free.
Parameters:
1. ?x - book

Preconditions:
```
(and
    (hands-free)
    (not (return-due ?x))
)
```

Effects:
```
(and
    (checked-out ?x)
    (holding ?x)
    (not (checked-out ?x))
    (not (holding ?x))
    (not (book-request ?x))
    (accessible ?x)
)
```
","(:action return-book
    :parameters (?x - book)
    :precondition (and (checked-out ?x) (holding ?x))
    :effect (and (not (checked-out ?x)) (not (holding ?x)) (not (book-request ?x)) (not (return-due ?x)) (accessible ?x) (hands-free))
)","swap (checked-out ?x) with (hands-free)
swap (holding ?x) with (not (return-due ?x))
"
libraryworld,return-book,0.6513896584510803,Hard Negative (Manipulated Action),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Imagine a patron returning a borrowed book to the library. The 'return-book' action enables the librarian to process the return, updating the book's status and removing any return due date. This action is applicable when the librarian is holding the book that needs to be returned.

Action name: return-book


Your answer:
","**Explanation:** 

Imagine a patron is returning a borrowed book to the library. The librarian needs to process this return to update the book's status and remove any return due date. The action ""return-book"" describes how the librarian can do this. There are specific conditions, called ""preconditions,"" that must be met to ensure the return can be processed correctly.

For the action ""return-book,"" let's break down what needs to be true before the librarian can return the book:

1. **The book must be checked out:** This means the book is currently borrowed by someone and needs to be returned.
2. **The librarian must be holding the book:** This indicates the librarian has the book in their hands, ready to process the return.

Once these preconditions are met, the librarian can proceed with the ""return-book"" action. This action results in several changes, called ""effects,"" that update the status of the book and the librarian's hands:

1. **The book is no longer checked out:** This shows that the book has been returned and is available for borrowing again.
2. **The librarian is no longer holding the book:** This indicates the librarian has processed the return and placed the book back in its proper place.
3. **Any request for the book is removed:** If there was a request for this book, it is no longer needed since the book is now available.
4. **The return due date is removed:** This updates the system to show that the book is no longer due for return.
5. **The book becomes accessible:** Now that the book is back in the library, it is easy to find and borrow again.
6. **The librarian's hands are now free:** Since the librarian has finished processing the return, their hands are empty and ready for the next task.

To summarize, the preconditions ensure the book is currently borrowed and the librarian has it in their hands, ready to return. The effects update the situation to show that the book is no longer checked out, any requests and due dates are removed, the book is accessible again, and the librarian's hands are free.
Parameters:
1. ?x - book

Preconditions:
```
(and
    (checked-out ?x)
    (holding ?x)
)
```

Effects:
```
(and
    (checked-out ?x)
    (not (book-request ?x))
    (not (return-due ?x))
    (accessible ?x)
    (hands-free)
)
```
","(:action return-book
    :parameters (?x - book)
    :precondition (and (checked-out ?x) (holding ?x))
    :effect (and (not (checked-out ?x)) (not (holding ?x)) (not (book-request ?x)) (not (return-due ?x)) (accessible ?x) (hands-free))
)","remove (not (holding ?x)) from effects
negate (not (checked-out ?x)) in effects
"
libraryworld,return-book,0.6513896584510803,Hard Negative (Manipulated Action),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Imagine a patron returning a borrowed book to the library. The 'return-book' action enables the librarian to process the return, updating the book's status and removing any return due date. This action is applicable when the librarian is holding the book that needs to be returned.

Action name: return-book


Your answer:
","**Explanation:** 

Imagine a patron is returning a borrowed book to the library. The librarian needs to process this return to update the book's status and remove any return due date. The action ""return-book"" describes how the librarian can do this. There are specific conditions, called ""preconditions,"" that must be met to ensure the return can be processed correctly.

For the action ""return-book,"" let's break down what needs to be true before the librarian can return the book:

1. **The book must be checked out:** This means the book is currently borrowed by someone and needs to be returned.
2. **The librarian must be holding the book:** This indicates the librarian has the book in their hands, ready to process the return.

Once these preconditions are met, the librarian can proceed with the ""return-book"" action. This action results in several changes, called ""effects,"" that update the status of the book and the librarian's hands:

1. **The book is no longer checked out:** This shows that the book has been returned and is available for borrowing again.
2. **The librarian is no longer holding the book:** This indicates the librarian has processed the return and placed the book back in its proper place.
3. **Any request for the book is removed:** If there was a request for this book, it is no longer needed since the book is now available.
4. **The return due date is removed:** This updates the system to show that the book is no longer due for return.
5. **The book becomes accessible:** Now that the book is back in the library, it is easy to find and borrow again.
6. **The librarian's hands are now free:** Since the librarian has finished processing the return, their hands are empty and ready for the next task.

To summarize, the preconditions ensure the book is currently borrowed and the librarian has it in their hands, ready to return. The effects update the situation to show that the book is no longer checked out, any requests and due dates are removed, the book is accessible again, and the librarian's hands are free.
Parameters:
1. ?x - book

Preconditions:
```
(and
    (not (holding ?x))
    (checked-out ?x)
)
```

Effects:
```
(and
    (not (checked-out ?x))
    (not (holding ?x))
    (not (book-request ?x))
    (not (return-due ?x))
    (accessible ?x)
    (hands-free)
)
```
","(:action return-book
    :parameters (?x - book)
    :precondition (and (checked-out ?x) (holding ?x))
    :effect (and (not (checked-out ?x)) (not (holding ?x)) (not (book-request ?x)) (not (return-due ?x)) (accessible ?x) (hands-free))
)","negate (holding ?x) in preconditions
"
libraryworld,return-book,0.6513896584510803,Hard Negative (Manipulated Action),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Imagine a patron returning a borrowed book to the library. The 'return-book' action enables the librarian to process the return, updating the book's status and removing any return due date. This action is applicable when the librarian is holding the book that needs to be returned.

Action name: return-book


Your answer:
","**Explanation:** 

Imagine a patron is returning a borrowed book to the library. The librarian needs to process this return to update the book's status and remove any return due date. The action ""return-book"" describes how the librarian can do this. There are specific conditions, called ""preconditions,"" that must be met to ensure the return can be processed correctly.

For the action ""return-book,"" let's break down what needs to be true before the librarian can return the book:

1. **The book must be checked out:** This means the book is currently borrowed by someone and needs to be returned.
2. **The librarian must be holding the book:** This indicates the librarian has the book in their hands, ready to process the return.

Once these preconditions are met, the librarian can proceed with the ""return-book"" action. This action results in several changes, called ""effects,"" that update the status of the book and the librarian's hands:

1. **The book is no longer checked out:** This shows that the book has been returned and is available for borrowing again.
2. **The librarian is no longer holding the book:** This indicates the librarian has processed the return and placed the book back in its proper place.
3. **Any request for the book is removed:** If there was a request for this book, it is no longer needed since the book is now available.
4. **The return due date is removed:** This updates the system to show that the book is no longer due for return.
5. **The book becomes accessible:** Now that the book is back in the library, it is easy to find and borrow again.
6. **The librarian's hands are now free:** Since the librarian has finished processing the return, their hands are empty and ready for the next task.

To summarize, the preconditions ensure the book is currently borrowed and the librarian has it in their hands, ready to return. The effects update the situation to show that the book is no longer checked out, any requests and due dates are removed, the book is accessible again, and the librarian's hands are free.
Parameters:
1. ?x - book

Preconditions:
```
(and
    (not (holding ?x))
    (checked-out ?x)
)
```

Effects:
```
(and
    (holding ?x)
    (not (checked-out ?x))
    (not (book-request ?x))
    (not (return-due ?x))
    (accessible ?x)
    (hands-free)
)
```
","(:action return-book
    :parameters (?x - book)
    :precondition (and (checked-out ?x) (holding ?x))
    :effect (and (not (checked-out ?x)) (not (holding ?x)) (not (book-request ?x)) (not (return-due ?x)) (accessible ?x) (hands-free))
)","swap (holding ?x) with (not (holding ?x))
"
libraryworld,return-book,0.6513896584510803,Hard Negative (Manipulated Action),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Imagine a patron returning a borrowed book to the library. The 'return-book' action enables the librarian to process the return, updating the book's status and removing any return due date. This action is applicable when the librarian is holding the book that needs to be returned.

Action name: return-book


Your answer:
","**Explanation:** 

Imagine a patron is returning a borrowed book to the library. The librarian needs to process this return to update the book's status and remove any return due date. The action ""return-book"" describes how the librarian can do this. There are specific conditions, called ""preconditions,"" that must be met to ensure the return can be processed correctly.

For the action ""return-book,"" let's break down what needs to be true before the librarian can return the book:

1. **The book must be checked out:** This means the book is currently borrowed by someone and needs to be returned.
2. **The librarian must be holding the book:** This indicates the librarian has the book in their hands, ready to process the return.

Once these preconditions are met, the librarian can proceed with the ""return-book"" action. This action results in several changes, called ""effects,"" that update the status of the book and the librarian's hands:

1. **The book is no longer checked out:** This shows that the book has been returned and is available for borrowing again.
2. **The librarian is no longer holding the book:** This indicates the librarian has processed the return and placed the book back in its proper place.
3. **Any request for the book is removed:** If there was a request for this book, it is no longer needed since the book is now available.
4. **The return due date is removed:** This updates the system to show that the book is no longer due for return.
5. **The book becomes accessible:** Now that the book is back in the library, it is easy to find and borrow again.
6. **The librarian's hands are now free:** Since the librarian has finished processing the return, their hands are empty and ready for the next task.

To summarize, the preconditions ensure the book is currently borrowed and the librarian has it in their hands, ready to return. The effects update the situation to show that the book is no longer checked out, any requests and due dates are removed, the book is accessible again, and the librarian's hands are free.
Parameters:
1. ?x - book

Preconditions:
```
(and
    (checked-out ?x)
    (holding ?x)
)
```

Effects:
```
(and
    (not (checked-out ?x))
    (not (book-request ?x))
    (not (return-due ?x))
    (accessible ?x)
    (hands-free)
)
```
","(:action return-book
    :parameters (?x - book)
    :precondition (and (checked-out ?x) (holding ?x))
    :effect (and (not (checked-out ?x)) (not (holding ?x)) (not (book-request ?x)) (not (return-due ?x)) (accessible ?x) (hands-free))
)","remove (not (holding ?x)) from effects
"
libraryworld,return-book,0.6513896584510803,Hard Negative (Manipulated Action),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Imagine a patron returning a borrowed book to the library. The 'return-book' action enables the librarian to process the return, updating the book's status and removing any return due date. This action is applicable when the librarian is holding the book that needs to be returned.

Action name: return-book


Your answer:
","**Explanation:** 

Imagine a patron is returning a borrowed book to the library. The librarian needs to process this return to update the book's status and remove any return due date. The action ""return-book"" describes how the librarian can do this. There are specific conditions, called ""preconditions,"" that must be met to ensure the return can be processed correctly.

For the action ""return-book,"" let's break down what needs to be true before the librarian can return the book:

1. **The book must be checked out:** This means the book is currently borrowed by someone and needs to be returned.
2. **The librarian must be holding the book:** This indicates the librarian has the book in their hands, ready to process the return.

Once these preconditions are met, the librarian can proceed with the ""return-book"" action. This action results in several changes, called ""effects,"" that update the status of the book and the librarian's hands:

1. **The book is no longer checked out:** This shows that the book has been returned and is available for borrowing again.
2. **The librarian is no longer holding the book:** This indicates the librarian has processed the return and placed the book back in its proper place.
3. **Any request for the book is removed:** If there was a request for this book, it is no longer needed since the book is now available.
4. **The return due date is removed:** This updates the system to show that the book is no longer due for return.
5. **The book becomes accessible:** Now that the book is back in the library, it is easy to find and borrow again.
6. **The librarian's hands are now free:** Since the librarian has finished processing the return, their hands are empty and ready for the next task.

To summarize, the preconditions ensure the book is currently borrowed and the librarian has it in their hands, ready to return. The effects update the situation to show that the book is no longer checked out, any requests and due dates are removed, the book is accessible again, and the librarian's hands are free.
Parameters:
1. ?x - book

Preconditions:
```
(and
    (checked-out ?x)
    (holding ?x)
)
```

Effects:
```
(and
    (not (checked-out ?x))
    (not (holding ?x))
    (not (return-due ?x))
    (accessible ?x)
)
```
","(:action return-book
    :parameters (?x - book)
    :precondition (and (checked-out ?x) (holding ?x))
    :effect (and (not (checked-out ?x)) (not (holding ?x)) (not (book-request ?x)) (not (return-due ?x)) (accessible ?x) (hands-free))
)","remove (hands-free) from effects
remove (not (book-request ?x)) from effects
"
libraryworld,return-book,0.6513896584510803,Hard Negative (Manipulated Action),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Imagine a patron returning a borrowed book to the library. The 'return-book' action enables the librarian to process the return, updating the book's status and removing any return due date. This action is applicable when the librarian is holding the book that needs to be returned.

Action name: return-book


Your answer:
","**Explanation:** 

Imagine a patron is returning a borrowed book to the library. The librarian needs to process this return to update the book's status and remove any return due date. The action ""return-book"" describes how the librarian can do this. There are specific conditions, called ""preconditions,"" that must be met to ensure the return can be processed correctly.

For the action ""return-book,"" let's break down what needs to be true before the librarian can return the book:

1. **The book must be checked out:** This means the book is currently borrowed by someone and needs to be returned.
2. **The librarian must be holding the book:** This indicates the librarian has the book in their hands, ready to process the return.

Once these preconditions are met, the librarian can proceed with the ""return-book"" action. This action results in several changes, called ""effects,"" that update the status of the book and the librarian's hands:

1. **The book is no longer checked out:** This shows that the book has been returned and is available for borrowing again.
2. **The librarian is no longer holding the book:** This indicates the librarian has processed the return and placed the book back in its proper place.
3. **Any request for the book is removed:** If there was a request for this book, it is no longer needed since the book is now available.
4. **The return due date is removed:** This updates the system to show that the book is no longer due for return.
5. **The book becomes accessible:** Now that the book is back in the library, it is easy to find and borrow again.
6. **The librarian's hands are now free:** Since the librarian has finished processing the return, their hands are empty and ready for the next task.

To summarize, the preconditions ensure the book is currently borrowed and the librarian has it in their hands, ready to return. The effects update the situation to show that the book is no longer checked out, any requests and due dates are removed, the book is accessible again, and the librarian's hands are free.
Parameters:
1. ?x - book

Preconditions:
```
(and
    (checked-out ?x)
    (holding ?x)
)
```

Effects:
```
(and
    (not (checked-out ?x))
    (not (holding ?x))
    (not (book-request ?x))
    (not (return-due ?x))
    (hands-free)
)
```
","(:action return-book
    :parameters (?x - book)
    :precondition (and (checked-out ?x) (holding ?x))
    :effect (and (not (checked-out ?x)) (not (holding ?x)) (not (book-request ?x)) (not (return-due ?x)) (accessible ?x) (hands-free))
)","remove (accessible ?x) from effects
"
libraryworld,take-from-table,0.6028047204017639,Positive (Correct Match),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Imagine you're a librarian managing a table full of books. The 'take-from-table' action allows you to pick up a book that is on the table, provided it is accessible and your hands are free. This action simulates the scenario where you find a book on the table, ensure it's not covered by any other book, and then pick it up, thus holding it in your hands.

Action name: take-from-table


Your answer:
","Parameters:
1. ?x - book

Preconditions:
```
(and
    (accessible ?x)
    (on-table ?x)
    (hands-free)
)
```

Effects:
```
(and
    (not (on-table ?x))
    (not (accessible ?x))
    (not (hands-free))
    (holding ?x)
)
```
","(:action take-from-table
    :parameters (?x - book)
    :precondition (and (accessible ?x) (on-table ?x) (hands-free))
    :effect (and (not (on-table ?x)) (not (accessible ?x)) (not (hands-free)) (holding ?x))
)",
libraryworld,take-from-table,0.6028047204017639,Positive (Correct Match),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Imagine you're a librarian managing a table full of books. The 'take-from-table' action allows you to pick up a book that is on the table, provided it is accessible and your hands are free. This action simulates the scenario where you find a book on the table, ensure it's not covered by any other book, and then pick it up, thus holding it in your hands.

Action name: take-from-table


Your answer:

**Explanation:** 

Imagine you're a librarian in a library, and there's a table full of books that need to be sorted. You want to pick up one of these books. To do this, certain conditions, called ""preconditions,"" must be met to ensure you can successfully pick up the book.

For the action ""take-from-table,"" let's break down what needs to be true before you can pick up a book:

1. **The book must be accessible:** This means the book isn't covered by other books or objects, so you can easily reach it.
2. **The book must be on the table:** This indicates the book is physically located on the table, not somewhere else like a shelf.
3. **Your hands must be free:** You need to have empty hands to pick up the book, meaning you aren't already holding something else.

Once these preconditions are met, you can proceed with the ""take-from-table"" action. This action results in several changes, called ""effects,"" that update the status of the book and your hands:

1. **The book is no longer on the table:** This indicates you've picked up the book from the table.
2. **The book is no longer accessible:** Since you're holding the book, it's not available for someone else to pick up from the table.
3. **Your hands are no longer free:** Because you're now holding the book, your hands are occupied.
4. **You are holding the book:** This shows that the book is now in your hands.

To summarize, the preconditions ensure you can reach the book, it's on the table, and your hands are free to pick it up. The effects update the situation to reflect that the book is now in your hands and no longer on the table or accessible to others.","Parameters:
1. ?x - book

Preconditions:
```
(and
    (accessible ?x)
    (on-table ?x)
    (hands-free)
)
```

Effects:
```
(and
    (not (on-table ?x))
    (not (accessible ?x))
    (not (hands-free))
    (holding ?x)
)
```
","(:action take-from-table
    :parameters (?x - book)
    :precondition (and (accessible ?x) (on-table ?x) (hands-free))
    :effect (and (not (on-table ?x)) (not (accessible ?x)) (not (hands-free)) (holding ?x))
)",
libraryworld,take-from-table,0.5846754908561707,Positive (Correct Match),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Imagine you're a librarian managing a table full of books. The 'take-from-table' action allows you to pick up a book that is on the table, provided it is accessible and your hands are free. This action simulates the scenario where you find a book on the table, ensure it's not covered by any other book, and then pick it up, thus holding it in your hands.

Action name: take-from-table


Your answer:
","**Explanation:** 

Imagine you're a librarian in a library, and there's a table full of books that need to be sorted. You want to pick up one of these books. To do this, certain conditions, called ""preconditions,"" must be met to ensure you can successfully pick up the book.

For the action ""take-from-table,"" let's break down what needs to be true before you can pick up a book:

1. **The book must be accessible:** This means the book isn't covered by other books or objects, so you can easily reach it.
2. **The book must be on the table:** This indicates the book is physically located on the table, not somewhere else like a shelf.
3. **Your hands must be free:** You need to have empty hands to pick up the book, meaning you aren't already holding something else.

Once these preconditions are met, you can proceed with the ""take-from-table"" action. This action results in several changes, called ""effects,"" that update the status of the book and your hands:

1. **The book is no longer on the table:** This indicates you've picked up the book from the table.
2. **The book is no longer accessible:** Since you're holding the book, it's not available for someone else to pick up from the table.
3. **Your hands are no longer free:** Because you're now holding the book, your hands are occupied.
4. **You are holding the book:** This shows that the book is now in your hands.

To summarize, the preconditions ensure you can reach the book, it's on the table, and your hands are free to pick it up. The effects update the situation to reflect that the book is now in your hands and no longer on the table or accessible to others.
Parameters:
1. ?x - book

Preconditions:
```
(and
    (accessible ?x)
    (on-table ?x)
    (hands-free)
)
```

Effects:
```
(and
    (not (on-table ?x))
    (not (accessible ?x))
    (not (hands-free))
    (holding ?x)
)
```
","(:action take-from-table
    :parameters (?x - book)
    :precondition (and (accessible ?x) (on-table ?x) (hands-free))
    :effect (and (not (on-table ?x)) (not (accessible ?x)) (not (hands-free)) (holding ?x))
)",
libraryworld,take-from-table,-0.03427371382713318,Easy Negative (Inter-Domain Mismatch),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Imagine you're a librarian managing a table full of books. The 'take-from-table' action allows you to pick up a book that is on the table, provided it is accessible and your hands are free. This action simulates the scenario where you find a book on the table, ensure it's not covered by any other book, and then pick it up, thus holding it in your hands.

Action name: take-from-table


Your answer:
","Parameters:
1. ?var0 - moveable
2. ?var1 - agent

Preconditions:
```
(equipped ?var0 ?var1)
```

Effects:
```
(and
    (inventory ?var0)
    (not (equipped ?var0 ?var1))
    (handsfree ?var1)
)
```
","(:action take-from-table
    :parameters (?x - book)
    :precondition (and (accessible ?x) (on-table ?x) (hands-free))
    :effect (and (not (on-table ?x)) (not (accessible ?x)) (not (hands-free)) (holding ?x))
)",
libraryworld,take-from-table,0.1422760933637619,Easy Negative (Inter-Domain Mismatch),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Imagine you're a librarian managing a table full of books. The 'take-from-table' action allows you to pick up a book that is on the table, provided it is accessible and your hands are free. This action simulates the scenario where you find a book on the table, ensure it's not covered by any other book, and then pick it up, thus holding it in your hands.

Action name: take-from-table


Your answer:
","Parameters:
1. ?var0 - moveable
2. ?var1 - agent
3. ?var2 - moveable

Preconditions:
```
(and
    (hypothetical ?var0)
    (is_log ?var2)
    (equipped ?var2 ?var1)
)
```

Effects:
```
(and
    (inventory ?var0)
    (is_planks ?var0)
    (handsfree ?var1)
    (not (equipped ?var2 ?var1))
    (not (hypothetical ?var0))
    (not (is_log ?var2))
)
```
","(:action take-from-table
    :parameters (?x - book)
    :precondition (and (accessible ?x) (on-table ?x) (hands-free))
    :effect (and (not (on-table ?x)) (not (accessible ?x)) (not (hands-free)) (holding ?x))
)",
libraryworld,take-from-table,-0.11630810052156448,Easy Negative (Inter-Domain Mismatch),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Imagine you're a librarian managing a table full of books. The 'take-from-table' action allows you to pick up a book that is on the table, provided it is accessible and your hands are free. This action simulates the scenario where you find a book on the table, ensure it's not covered by any other book, and then pick it up, thus holding it in your hands.

Action name: take-from-table


Your answer:
","Parameters:
1. ?var0 - static
2. ?var1 - static

Preconditions:
```
(agent_at ?var1)
```

Effects:
```
(and
    (agent_at ?var0)
    (not (agent_at ?var1))
)
```
","(:action take-from-table
    :parameters (?x - book)
    :precondition (and (accessible ?x) (on-table ?x) (hands-free))
    :effect (and (not (on-table ?x)) (not (accessible ?x)) (not (hands-free)) (holding ?x))
)",
libraryworld,take-from-table,0.09808149188756943,Easy Negative (Inter-Domain Mismatch),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Imagine you're a librarian managing a table full of books. The 'take-from-table' action allows you to pick up a book that is on the table, provided it is accessible and your hands are free. This action simulates the scenario where you find a book on the table, ensure it's not covered by any other book, and then pick it up, thus holding it in your hands.

Action name: take-from-table


Your answer:
","Parameters:
1. ?var0 - moveable
2. ?var1 - agent

Preconditions:
```
(and
    (inventory ?var0)
    (handsfree ?var1)
)
```

Effects:
```
(and
    (equipped ?var0 ?var1)
    (not (handsfree ?var1))
    (not (inventory ?var0))
)
```
","(:action take-from-table
    :parameters (?x - book)
    :precondition (and (accessible ?x) (on-table ?x) (hands-free))
    :effect (and (not (on-table ?x)) (not (accessible ?x)) (not (hands-free)) (holding ?x))
)",
libraryworld,take-from-table,0.01631728932261467,Easy Negative (Inter-Domain Mismatch),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Imagine you're a librarian managing a table full of books. The 'take-from-table' action allows you to pick up a book that is on the table, provided it is accessible and your hands are free. This action simulates the scenario where you find a book on the table, ensure it's not covered by any other book, and then pick it up, thus holding it in your hands.

Action name: take-from-table


Your answer:
","Parameters:
1. ?var0 - moveable
2. ?var1 - static

Preconditions:
```
(and
    (at ?var0 ?var1)
    (agent_at ?var1)
)
```

Effects:
```
(and
    (inventory ?var0)
    (not (at ?var0 ?var1))
)
```
","(:action take-from-table
    :parameters (?x - book)
    :precondition (and (accessible ?x) (on-table ?x) (hands-free))
    :effect (and (not (on-table ?x)) (not (accessible ?x)) (not (hands-free)) (holding ?x))
)",
libraryworld,take-from-table,0.0675392746925354,Easy Negative (Inter-Domain Mismatch),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Imagine you're a librarian managing a table full of books. The 'take-from-table' action allows you to pick up a book that is on the table, provided it is accessible and your hands are free. This action simulates the scenario where you find a book on the table, ensure it's not covered by any other book, and then pick it up, thus holding it in your hands.

Action name: take-from-table


Your answer:

**Explanation:** 

Imagine you're a librarian in a library, and there's a table full of books that need to be sorted. You want to pick up one of these books. To do this, certain conditions, called ""preconditions,"" must be met to ensure you can successfully pick up the book.

For the action ""take-from-table,"" let's break down what needs to be true before you can pick up a book:

1. **The book must be accessible:** This means the book isn't covered by other books or objects, so you can easily reach it.
2. **The book must be on the table:** This indicates the book is physically located on the table, not somewhere else like a shelf.
3. **Your hands must be free:** You need to have empty hands to pick up the book, meaning you aren't already holding something else.

Once these preconditions are met, you can proceed with the ""take-from-table"" action. This action results in several changes, called ""effects,"" that update the status of the book and your hands:

1. **The book is no longer on the table:** This indicates you've picked up the book from the table.
2. **The book is no longer accessible:** Since you're holding the book, it's not available for someone else to pick up from the table.
3. **Your hands are no longer free:** Because you're now holding the book, your hands are occupied.
4. **You are holding the book:** This shows that the book is now in your hands.

To summarize, the preconditions ensure you can reach the book, it's on the table, and your hands are free to pick it up. The effects update the situation to reflect that the book is now in your hands and no longer on the table or accessible to others.","Parameters:
1. ?from - cells
2. ?to - cells

Preconditions:
```
(and
    (connected ?from ?to)
    (at-hero ?from)
    (not (is-destroyed ?to))
    (not (has-trap ?from))
    (has-trap ?to)
    (arm-free)
)
```

Effects:
```
(and
    (at-hero ?to)
    (is-destroyed ?from)
    (not (at-hero ?from))
)
```
","(:action take-from-table
    :parameters (?x - book)
    :precondition (and (accessible ?x) (on-table ?x) (hands-free))
    :effect (and (not (on-table ?x)) (not (accessible ?x)) (not (hands-free)) (holding ?x))
)",
libraryworld,take-from-table,0.0897703617811203,Easy Negative (Inter-Domain Mismatch),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Imagine you're a librarian managing a table full of books. The 'take-from-table' action allows you to pick up a book that is on the table, provided it is accessible and your hands are free. This action simulates the scenario where you find a book on the table, ensure it's not covered by any other book, and then pick it up, thus holding it in your hands.

Action name: take-from-table


Your answer:

**Explanation:** 

Imagine you're a librarian in a library, and there's a table full of books that need to be sorted. You want to pick up one of these books. To do this, certain conditions, called ""preconditions,"" must be met to ensure you can successfully pick up the book.

For the action ""take-from-table,"" let's break down what needs to be true before you can pick up a book:

1. **The book must be accessible:** This means the book isn't covered by other books or objects, so you can easily reach it.
2. **The book must be on the table:** This indicates the book is physically located on the table, not somewhere else like a shelf.
3. **Your hands must be free:** You need to have empty hands to pick up the book, meaning you aren't already holding something else.

Once these preconditions are met, you can proceed with the ""take-from-table"" action. This action results in several changes, called ""effects,"" that update the status of the book and your hands:

1. **The book is no longer on the table:** This indicates you've picked up the book from the table.
2. **The book is no longer accessible:** Since you're holding the book, it's not available for someone else to pick up from the table.
3. **Your hands are no longer free:** Because you're now holding the book, your hands are occupied.
4. **You are holding the book:** This shows that the book is now in your hands.

To summarize, the preconditions ensure you can reach the book, it's on the table, and your hands are free to pick it up. The effects update the situation to reflect that the book is now in your hands and no longer on the table or accessible to others.","Parameters:
1. ?from - cells
2. ?to - cells

Preconditions:
```
(and
    (connected ?from ?to)
    (at-hero ?from)
    (not (has-trap ?from))
    (not (is-destroyed ?to))
    (not (has-trap ?to))
    (not (has-monster ?to))
)
```

Effects:
```
(and
    (at-hero ?to)
    (is-destroyed ?from)
    (not (at-hero ?from))
)
```
","(:action take-from-table
    :parameters (?x - book)
    :precondition (and (accessible ?x) (on-table ?x) (hands-free))
    :effect (and (not (on-table ?x)) (not (accessible ?x)) (not (hands-free)) (holding ?x))
)",
libraryworld,take-from-table,0.10826129466295242,Easy Negative (Inter-Domain Mismatch),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Imagine you're a librarian managing a table full of books. The 'take-from-table' action allows you to pick up a book that is on the table, provided it is accessible and your hands are free. This action simulates the scenario where you find a book on the table, ensure it's not covered by any other book, and then pick it up, thus holding it in your hands.

Action name: take-from-table


Your answer:

**Explanation:** 

Imagine you're a librarian in a library, and there's a table full of books that need to be sorted. You want to pick up one of these books. To do this, certain conditions, called ""preconditions,"" must be met to ensure you can successfully pick up the book.

For the action ""take-from-table,"" let's break down what needs to be true before you can pick up a book:

1. **The book must be accessible:** This means the book isn't covered by other books or objects, so you can easily reach it.
2. **The book must be on the table:** This indicates the book is physically located on the table, not somewhere else like a shelf.
3. **Your hands must be free:** You need to have empty hands to pick up the book, meaning you aren't already holding something else.

Once these preconditions are met, you can proceed with the ""take-from-table"" action. This action results in several changes, called ""effects,"" that update the status of the book and your hands:

1. **The book is no longer on the table:** This indicates you've picked up the book from the table.
2. **The book is no longer accessible:** Since you're holding the book, it's not available for someone else to pick up from the table.
3. **Your hands are no longer free:** Because you're now holding the book, your hands are occupied.
4. **You are holding the book:** This shows that the book is now in your hands.

To summarize, the preconditions ensure you can reach the book, it's on the table, and your hands are free to pick it up. The effects update the situation to reflect that the book is now in your hands and no longer on the table or accessible to others.","Parameters:
1. ?loc - cells
2. ?s - swords

Preconditions:
```
(and
    (at-hero ?loc)
    (at-sword ?s ?loc)
    (arm-free)
)
```

Effects:
```
(and
    (holding ?s)
    (not (at-sword ?s ?loc))
    (not (arm-free))
)
```
","(:action take-from-table
    :parameters (?x - book)
    :precondition (and (accessible ?x) (on-table ?x) (hands-free))
    :effect (and (not (on-table ?x)) (not (accessible ?x)) (not (hands-free)) (holding ?x))
)",
libraryworld,take-from-table,0.13337838649749756,Easy Negative (Inter-Domain Mismatch),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Imagine you're a librarian managing a table full of books. The 'take-from-table' action allows you to pick up a book that is on the table, provided it is accessible and your hands are free. This action simulates the scenario where you find a book on the table, ensure it's not covered by any other book, and then pick it up, thus holding it in your hands.

Action name: take-from-table


Your answer:

**Explanation:** 

Imagine you're a librarian in a library, and there's a table full of books that need to be sorted. You want to pick up one of these books. To do this, certain conditions, called ""preconditions,"" must be met to ensure you can successfully pick up the book.

For the action ""take-from-table,"" let's break down what needs to be true before you can pick up a book:

1. **The book must be accessible:** This means the book isn't covered by other books or objects, so you can easily reach it.
2. **The book must be on the table:** This indicates the book is physically located on the table, not somewhere else like a shelf.
3. **Your hands must be free:** You need to have empty hands to pick up the book, meaning you aren't already holding something else.

Once these preconditions are met, you can proceed with the ""take-from-table"" action. This action results in several changes, called ""effects,"" that update the status of the book and your hands:

1. **The book is no longer on the table:** This indicates you've picked up the book from the table.
2. **The book is no longer accessible:** Since you're holding the book, it's not available for someone else to pick up from the table.
3. **Your hands are no longer free:** Because you're now holding the book, your hands are occupied.
4. **You are holding the book:** This shows that the book is now in your hands.

To summarize, the preconditions ensure you can reach the book, it's on the table, and your hands are free to pick it up. The effects update the situation to reflect that the book is now in your hands and no longer on the table or accessible to others.","Parameters:
1. ?loc - cells

Preconditions:
```
(and
    (at-hero ?loc)
    (arm-free)
    (has-trap ?loc)
)
```

Effects:
```
(and
    (trap-disarmed ?loc)
    (not (has-trap ?loc))
)
```
","(:action take-from-table
    :parameters (?x - book)
    :precondition (and (accessible ?x) (on-table ?x) (hands-free))
    :effect (and (not (on-table ?x)) (not (accessible ?x)) (not (hands-free)) (holding ?x))
)",
libraryworld,take-from-table,0.18069863319396973,Easy Negative (Inter-Domain Mismatch),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Imagine you're a librarian managing a table full of books. The 'take-from-table' action allows you to pick up a book that is on the table, provided it is accessible and your hands are free. This action simulates the scenario where you find a book on the table, ensure it's not covered by any other book, and then pick it up, thus holding it in your hands.

Action name: take-from-table


Your answer:

**Explanation:** 

Imagine you're a librarian in a library, and there's a table full of books that need to be sorted. You want to pick up one of these books. To do this, certain conditions, called ""preconditions,"" must be met to ensure you can successfully pick up the book.

For the action ""take-from-table,"" let's break down what needs to be true before you can pick up a book:

1. **The book must be accessible:** This means the book isn't covered by other books or objects, so you can easily reach it.
2. **The book must be on the table:** This indicates the book is physically located on the table, not somewhere else like a shelf.
3. **Your hands must be free:** You need to have empty hands to pick up the book, meaning you aren't already holding something else.

Once these preconditions are met, you can proceed with the ""take-from-table"" action. This action results in several changes, called ""effects,"" that update the status of the book and your hands:

1. **The book is no longer on the table:** This indicates you've picked up the book from the table.
2. **The book is no longer accessible:** Since you're holding the book, it's not available for someone else to pick up from the table.
3. **Your hands are no longer free:** Because you're now holding the book, your hands are occupied.
4. **You are holding the book:** This shows that the book is now in your hands.

To summarize, the preconditions ensure you can reach the book, it's on the table, and your hands are free to pick it up. The effects update the situation to reflect that the book is now in your hands and no longer on the table or accessible to others.","Parameters:
1. ?from - cells
2. ?to - cells
3. ?s - swords

Preconditions:
```
(and
    (connected ?from ?to)
    (at-hero ?from)
    (has-monster ?to)
    (not (is-destroyed ?to))
    (not (has-trap ?from))
    (holding ?s)
)
```

Effects:
```
(and
    (at-hero ?to)
    (is-destroyed ?from)
    (not (at-hero ?from))
)
```
","(:action take-from-table
    :parameters (?x - book)
    :precondition (and (accessible ?x) (on-table ?x) (hands-free))
    :effect (and (not (on-table ?x)) (not (accessible ?x)) (not (hands-free)) (holding ?x))
)",
libraryworld,take-from-table,0.09276842325925827,Easy Negative (Inter-Domain Mismatch),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Imagine you're a librarian managing a table full of books. The 'take-from-table' action allows you to pick up a book that is on the table, provided it is accessible and your hands are free. This action simulates the scenario where you find a book on the table, ensure it's not covered by any other book, and then pick it up, thus holding it in your hands.

Action name: take-from-table


Your answer:

**Explanation:** 

Imagine you're a librarian in a library, and there's a table full of books that need to be sorted. You want to pick up one of these books. To do this, certain conditions, called ""preconditions,"" must be met to ensure you can successfully pick up the book.

For the action ""take-from-table,"" let's break down what needs to be true before you can pick up a book:

1. **The book must be accessible:** This means the book isn't covered by other books or objects, so you can easily reach it.
2. **The book must be on the table:** This indicates the book is physically located on the table, not somewhere else like a shelf.
3. **Your hands must be free:** You need to have empty hands to pick up the book, meaning you aren't already holding something else.

Once these preconditions are met, you can proceed with the ""take-from-table"" action. This action results in several changes, called ""effects,"" that update the status of the book and your hands:

1. **The book is no longer on the table:** This indicates you've picked up the book from the table.
2. **The book is no longer accessible:** Since you're holding the book, it's not available for someone else to pick up from the table.
3. **Your hands are no longer free:** Because you're now holding the book, your hands are occupied.
4. **You are holding the book:** This shows that the book is now in your hands.

To summarize, the preconditions ensure you can reach the book, it's on the table, and your hands are free to pick it up. The effects update the situation to reflect that the book is now in your hands and no longer on the table or accessible to others.","Parameters:
1. ?loc - cells
2. ?s - swords

Preconditions:
```
(and
    (at-hero ?loc)
    (holding ?s)
    (not (has-trap ?loc))
    (not (has-monster ?loc))
)
```

Effects:
```
(and
    (arm-free)
    (is-destroyed ?s)
    (not (holding ?s))
)
```
","(:action take-from-table
    :parameters (?x - book)
    :precondition (and (accessible ?x) (on-table ?x) (hands-free))
    :effect (and (not (on-table ?x)) (not (accessible ?x)) (not (hands-free)) (holding ?x))
)",
libraryworld,take-from-table,0.14298784732818604,Easy Negative (Inter-Domain Mismatch),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Imagine you're a librarian managing a table full of books. The 'take-from-table' action allows you to pick up a book that is on the table, provided it is accessible and your hands are free. This action simulates the scenario where you find a book on the table, ensure it's not covered by any other book, and then pick it up, thus holding it in your hands.

Action name: take-from-table


Your answer:
","**Explanation:**

Imagine you're guiding a hero who just woke up in a mysterious dungeon. Each room can have different things: some are empty, others have monsters, some have traps, and a few might have swords. There's also a special room with an exit—our hero's goal.

Now, let's talk about the action called **move-to-trap**. This action involves our hero moving from one room (we'll call it ""Room A"") to another room (""Room B""), where, unfortunately, there's a trap waiting. Here's why each part of the plan (or action schema) makes sense:

1. **Connected Rooms**: Our hero can only move to a room directly connected to the one they're currently in. This is like being in your house and only being able to walk into rooms that have doors leading from where you are now.

2. **Hero's Current Location**: The hero must start in Room A to move to Room B. You can't move from a place if you're not actually there, right?

3. **Room B Not Destroyed**: The room our hero is moving to mustn't be already destroyed (or in ruins). It's like making sure the bridge you want to cross hasn't collapsed.

4. **Room A Doesn't Have a Trap**: It’s safer if the room our hero is leaving doesn't have a trap. Imagine trying to leave a room with a trap; it could activate and cause trouble!

5. **Room B Has a Trap**: Since the action is called **move-to-trap**, it specifically involves moving to a room with a trap, almost like knowing there's a puddle ahead but stepping into it anyway because it's the only path forward.

6. **Hero's Arm is Free**: This indicates that the hero isn’t holding anything like a sword. It’s important because handling traps might require free hands—think about needing your hands free to disarm or avoid a trap carefully.

When our hero completes this action, several things happen:
- **Hero is now in Room B**: Just like when you walk into another room, you’re no longer in the first room.
- **Room A is destroyed**: This could mean the hero leaves it in a way that no one can follow—maybe they close a heavy door that locks automatically.
- **Hero is no longer in Room A**: It confirms that the hero has completely left Room A.

This action is designed for specific situations in the dungeon where the hero might need to move strategically, even into risky areas, to navigate through the dungeon and eventually find the exit.
Parameters:
1. ?from - cells
2. ?to - cells

Preconditions:
```
(and
    (connected ?from ?to)
    (at-hero ?from)
    (not (is-destroyed ?to))
    (not (has-trap ?from))
    (has-trap ?to)
    (arm-free)
)
```

Effects:
```
(and
    (at-hero ?to)
    (is-destroyed ?from)
    (not (at-hero ?from))
)
```
","(:action take-from-table
    :parameters (?x - book)
    :precondition (and (accessible ?x) (on-table ?x) (hands-free))
    :effect (and (not (on-table ?x)) (not (accessible ?x)) (not (hands-free)) (holding ?x))
)",
libraryworld,take-from-table,0.16679519414901733,Easy Negative (Inter-Domain Mismatch),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Imagine you're a librarian managing a table full of books. The 'take-from-table' action allows you to pick up a book that is on the table, provided it is accessible and your hands are free. This action simulates the scenario where you find a book on the table, ensure it's not covered by any other book, and then pick it up, thus holding it in your hands.

Action name: take-from-table


Your answer:
","**Explanation:**

Imagine our hero in a big, scary dungeon, just like a character from a fairy tale or a video game. The dungeon has several rooms, and some rooms are safe while others have monsters or traps. The hero's goal is to escape from this dungeon, moving from one room to another until he finds the exit.

Now, let's talk about the action called ""move"" that our hero can take. The action ""move"" lets the hero go from one room (we'll call this the ""current room"") to a connected room (let's call this the ""next room""). Think of the dungeon like a big house with many doors connecting the rooms; the hero can only move through a door if it’s open and the room on the other side is safe.

In the PDDL (a kind of programming language for planning what actions to take), the action ""move"" needs some conditions to be met before the hero can move:
1. **The rooms must be connected:** Just like you can't walk through a wall at home, the hero can only move to a room if there's a direct connection (like a doorway or a corridor).
2. **The hero must be in the current room:** The hero can only leave a room if he's actually in it.
3. **The current room shouldn’t have a trap that could hurt him.**
4. **The next room shouldn’t be destroyed:** The hero can't go into a room if it’s already been collapsed or destroyed (maybe from a previous adventure!).
5. **The next room shouldn’t have a trap or a monster:** This makes sure our hero doesn’t walk into new danger.

When the hero moves:
- **He is now in the next room:** Just like if you walk to another room in your house, you're then in that new room.
- **The room he left gets destroyed:** This might sound strange, but imagine if every time he left a room, the door magically closed and locked forever, so he can’t go back the same way.
- **He is no longer in the current room:** This is just confirming that he has moved on from the previous room.

These rules help our hero make smart moves through the dungeon, avoiding danger and making progress towards escape. This way of setting up the hero's actions makes sure he can navigate through the dungeon safely and eventually find his way out.
Parameters:
1. ?from - cells
2. ?to - cells

Preconditions:
```
(and
    (connected ?from ?to)
    (at-hero ?from)
    (not (has-trap ?from))
    (not (is-destroyed ?to))
    (not (has-trap ?to))
    (not (has-monster ?to))
)
```

Effects:
```
(and
    (at-hero ?to)
    (is-destroyed ?from)
    (not (at-hero ?from))
)
```
","(:action take-from-table
    :parameters (?x - book)
    :precondition (and (accessible ?x) (on-table ?x) (hands-free))
    :effect (and (not (on-table ?x)) (not (accessible ?x)) (not (hands-free)) (holding ?x))
)",
libraryworld,take-from-table,0.211978942155838,Easy Negative (Inter-Domain Mismatch),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Imagine you're a librarian managing a table full of books. The 'take-from-table' action allows you to pick up a book that is on the table, provided it is accessible and your hands are free. This action simulates the scenario where you find a book on the table, ensure it's not covered by any other book, and then pick it up, thus holding it in your hands.

Action name: take-from-table


Your answer:
","**Explanation:**

Imagine you're helping a hero navigate through a tricky dungeon filled with different challenges. The hero's objective is to escape, but along the way, they might find useful items like swords that can help protect against monsters.

In our scenario, the action of picking up a sword is crucial. Let's think of it like this: if you enter a room and see a sword on the floor while your hands are free, you can pick it up. The action schema in PDDL, which is a way to represent planning problems, explains this in a structured format.

The preconditions for our action ""pick-sword"" are:
1. **The hero must be in the same room as the sword** (represented as `(at-hero ?loc)` and `(at-sword ?s ?loc)`). This makes sense because you can't pick up something that's not in the same room as you.
2. **The hero's hand must be free** (`(arm-free)`). Just like you can't hold two grocery bags in one hand easily, our hero needs a free hand to pick up the sword.

The effects after the hero picks up the sword are:
1. **The hero is now holding the sword** (`(holding ?s)`). This indicates that the hero has successfully picked up the sword.
2. **The sword is no longer in its original place** (`(not (at-sword ?s ?loc))`). Just like if you take an apple from a basket, the apple isn't in the basket anymore.
3. **The hero's hand is no longer free** (`(not (arm-free))`). Holding the sword means the hand that was free is now occupied.

This action schema is a simple way to model the interaction between the hero and the sword in the dungeon. It helps ensure that all necessary conditions are met before the action takes place, making the hero's journey through the dungeon logical and structured. This way, the hero doesn't magically have a sword without picking it up or has two items in one hand, which keeps our dungeon adventure realistic and understandable.
Parameters:
1. ?loc - cells
2. ?s - swords

Preconditions:
```
(and
    (at-hero ?loc)
    (at-sword ?s ?loc)
    (arm-free)
)
```

Effects:
```
(and
    (holding ?s)
    (not (at-sword ?s ?loc))
    (not (arm-free))
)
```
","(:action take-from-table
    :parameters (?x - book)
    :precondition (and (accessible ?x) (on-table ?x) (hands-free))
    :effect (and (not (on-table ?x)) (not (accessible ?x)) (not (hands-free)) (holding ?x))
)",
libraryworld,take-from-table,0.09859811514616013,Easy Negative (Inter-Domain Mismatch),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Imagine you're a librarian managing a table full of books. The 'take-from-table' action allows you to pick up a book that is on the table, provided it is accessible and your hands are free. This action simulates the scenario where you find a book on the table, ensure it's not covered by any other book, and then pick it up, thus holding it in your hands.

Action name: take-from-table


Your answer:
","**Explanation:**

Imagine our hero in a dungeon, a place with rooms connected like a spider web. Each room can be just an empty space, or it might have something like a monster, a trap, or even a sword. Somewhere in this maze, there's a special room that has an exit—the ultimate goal for our hero.

Now, let's focus on a specific action our hero might need to take: **disarming a trap**. In our scenario, the hero finds themselves in a room with a trap. The action to disarm this trap is what we need to understand.

The action is named `disarm-trap`. This action, like any other, has specific requirements (preconditions) that must be met before the hero can perform it. These preconditions are:
1. **The hero must be in the same room as the trap.** This makes sense because you can't disarm a trap from another room. It's like needing to be in the kitchen to turn off a stove.
2. **The hero's hand must be free.** This means the hero can’t be holding anything, like a sword. It's a bit like needing both hands free to tie your shoes properly.
3. **There must actually be a trap in the room.** Obviously, the hero can't disarm a trap if there isn't one there!

If all these conditions are met, then the hero can go ahead and disarm the trap. The results (effects) of this action are:
1. **The trap in the room is disarmed.** This means the room is now safe from that trap.
2. **The trap is no longer considered to be in the room.** It's like cleaning up a spill; once it's cleaned, it's not there anymore.

By breaking down the action like this, we see how each condition helps ensure the action can be carried out safely and effectively. It’s just like following a recipe—each ingredient needs to be added at the right time for the dish to come out right!
Parameters:
1. ?loc - cells

Preconditions:
```
(and
    (at-hero ?loc)
    (arm-free)
    (has-trap ?loc)
)
```

Effects:
```
(and
    (trap-disarmed ?loc)
    (not (has-trap ?loc))
)
```
","(:action take-from-table
    :parameters (?x - book)
    :precondition (and (accessible ?x) (on-table ?x) (hands-free))
    :effect (and (not (on-table ?x)) (not (accessible ?x)) (not (hands-free)) (holding ?x))
)",
libraryworld,take-from-table,0.23667368292808533,Easy Negative (Inter-Domain Mismatch),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Imagine you're a librarian managing a table full of books. The 'take-from-table' action allows you to pick up a book that is on the table, provided it is accessible and your hands are free. This action simulates the scenario where you find a book on the table, ensure it's not covered by any other book, and then pick it up, thus holding it in your hands.

Action name: take-from-table


Your answer:
","**Explanation:**

Let's imagine our hero in the dungeon scenario. The hero wakes up and finds themselves in a room, wanting to move to an adjacent room where, unfortunately, there's a monster. Here's how we translate this scenario into a set of instructions, or a 'domain model,' in planning language.

The action we're talking about is called ""move-to-monster."" This means our hero is trying to move from one room (let’s call it Room A) to another room (Room B) where there is a monster. To ensure this action can happen, there are certain conditions that need to be met (these are called 'preconditions') and certain outcomes that will happen as a result of the action (these are called 'effects').

1. **Preconditions**:
   - **Connected Rooms**: Room A and Room B must be connected by a corridor. This makes sense because our hero can't magically jump from one room to another; there must be a path.
   - **Hero's Current Location**: The hero must currently be in Room A. If the hero isn't there, they can't start moving from it!
   - **Monster Presence**: Room B must have a monster. After all, the action is specifically about moving to a room with a monster.
   - **Room Integrity**: Room B should not be destroyed. A destroyed room might mean it’s collapsed or inaccessible, so it's logical our hero can’t move into it.
   - **Safety in Room A**: Room A should not have a trap. This makes sure our hero is safe and able to move without getting caught in a trap.
   - **Armed Hero**: The hero must be holding a sword. It’s a dangerous task to move into a room with a monster, so having a sword means the hero is prepared for a fight.

2. **Effects**:
   - **Hero's New Location**: After the action, the hero will be in Room B. They've successfully moved.
   - **Change in Room A's Status**: Room A becomes 'destroyed.' This might represent that the room is no longer safe or viable after the hero leaves, maybe because of the haste in escaping or some mechanism triggered by the departure.
   - **Update Hero's Old Location**: The fact that the hero was in Room A is no longer true, which is updated in our model to reflect the hero’s new position.

This planning helps organize our thoughts and actions logically, ensuring every step is clear and all necessary precautions are taken. Think of it like giving someone directions with a checklist: ""Before you go there, make sure this, this, and this are true, and once you do, this and this will happen."" This ensures everyone knows what to expect and how to prepare! 
Parameters:
1. ?from - cells
2. ?to - cells
3. ?s - swords

Preconditions:
```
(and
    (connected ?from ?to)
    (at-hero ?from)
    (has-monster ?to)
    (not (is-destroyed ?to))
    (not (has-trap ?from))
    (holding ?s)
)
```

Effects:
```
(and
    (at-hero ?to)
    (is-destroyed ?from)
    (not (at-hero ?from))
)
```
","(:action take-from-table
    :parameters (?x - book)
    :precondition (and (accessible ?x) (on-table ?x) (hands-free))
    :effect (and (not (on-table ?x)) (not (accessible ?x)) (not (hands-free)) (holding ?x))
)",
libraryworld,take-from-table,0.1307467818260193,Easy Negative (Inter-Domain Mismatch),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Imagine you're a librarian managing a table full of books. The 'take-from-table' action allows you to pick up a book that is on the table, provided it is accessible and your hands are free. This action simulates the scenario where you find a book on the table, ensure it's not covered by any other book, and then pick it up, thus holding it in your hands.

Action name: take-from-table


Your answer:
","**Explanation:**

Imagine you're helping a hero navigate a dungeon full of monsters and traps, a bit like playing a video game. Now, the hero has a sword, but in this part of the game, the hero decides to destroy the sword. To understand why certain conditions are checked before the hero can destroy the sword safely, let's break it down using the action ""destroy-sword"" from the game's rules (or in technical terms, the PDDL action schema).

Firstly, the hero needs to be in the same location as the sword. This makes sense, right? You can't throw something away or break it if it's not with you. So, the condition `(at-hero ?loc)` ensures that the hero is at the right spot to perform the action.

Secondly, the hero must be holding the sword. It’s similar to needing both hands on a bat to swing it; here, the hero needs to have the sword in hand to destroy it, checked by `(holding ?s)`.

But why check for no traps or monsters in the room? Think of it like trying to do something delicate, like assembling a model airplane, in a room with a loose tiger. Not a great idea, right? If there’s a monster in the room, destroying the sword might make the hero vulnerable to attack. Similarly, a trap could be triggered by the noise or movement, putting the hero in danger. So, `(not (has-trap ?loc))` and `(not (has-monster ?loc))` ensure that the environment is safe for the hero to break the sword without turning the situation worse.

Now, what happens after the sword is destroyed? The effect is that the hero’s hand is now free (`arm-free`), the sword is confirmed as destroyed (`is-destroyed ?s`), and the hero is no longer holding it (`not (holding ?s)`). It’s like cleaning up after finishing a task: put away the tools, clean up the mess, and free up your hands for the next task.

In simple terms, this action schema is like a set of instructions to make sure the hero does something risky (like destroying a sword) safely and responsibly, without making the dangerous dungeon situation even worse.
Parameters:
1. ?loc - cells
2. ?s - swords

Preconditions:
```
(and
    (at-hero ?loc)
    (holding ?s)
    (not (has-trap ?loc))
    (not (has-monster ?loc))
)
```

Effects:
```
(and
    (arm-free)
    (is-destroyed ?s)
    (not (holding ?s))
)
```
","(:action take-from-table
    :parameters (?x - book)
    :precondition (and (accessible ?x) (on-table ?x) (hands-free))
    :effect (and (not (on-table ?x)) (not (accessible ?x)) (not (hands-free)) (holding ?x))
)",
libraryworld,take-from-table,0.7851869463920593,Semi-Hard Negative (Intra-Domain Mismatch),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Imagine you're a librarian managing a table full of books. The 'take-from-table' action allows you to pick up a book that is on the table, provided it is accessible and your hands are free. This action simulates the scenario where you find a book on the table, ensure it's not covered by any other book, and then pick it up, thus holding it in your hands.

Action name: take-from-table


Your answer:
","Parameters:
1. ?x - book
2. ?y - book
3. ?cat - category

Preconditions:
```
(and
    (on-shelf ?x ?y)
    (accessible ?x)
    (hands-free)
    (belongs-to-category ?x ?cat)
)
```

Effects:
```
(and
    (holding ?x)
    (accessible ?y)
    (not (accessible ?x))
    (not (hands-free))
    (not (on-shelf ?x ?y))
    (shelf-empty ?cat)
)
```
","(:action take-from-table
    :parameters (?x - book)
    :precondition (and (accessible ?x) (on-table ?x) (hands-free))
    :effect (and (not (on-table ?x)) (not (accessible ?x)) (not (hands-free)) (holding ?x))
)",
libraryworld,take-from-table,0.5250560641288757,Semi-Hard Negative (Intra-Domain Mismatch),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Imagine you're a librarian managing a table full of books. The 'take-from-table' action allows you to pick up a book that is on the table, provided it is accessible and your hands are free. This action simulates the scenario where you find a book on the table, ensure it's not covered by any other book, and then pick it up, thus holding it in your hands.

Action name: take-from-table


Your answer:
","Parameters:
1. ?x - book

Preconditions:
```
(holding ?x)
```

Effects:
```
(and
    (not (holding ?x))
    (accessible ?x)
    (hands-free)
    (on-table ?x)
)
```
","(:action take-from-table
    :parameters (?x - book)
    :precondition (and (accessible ?x) (on-table ?x) (hands-free))
    :effect (and (not (on-table ?x)) (not (accessible ?x)) (not (hands-free)) (holding ?x))
)",
libraryworld,take-from-table,0.697905421257019,Semi-Hard Negative (Intra-Domain Mismatch),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Imagine you're a librarian managing a table full of books. The 'take-from-table' action allows you to pick up a book that is on the table, provided it is accessible and your hands are free. This action simulates the scenario where you find a book on the table, ensure it's not covered by any other book, and then pick it up, thus holding it in your hands.

Action name: take-from-table


Your answer:
","Parameters:
1. ?x - book

Preconditions:
```
(and
    (accessible ?x)
    (not (checked-out ?x))
)
```

Effects:
```
(and
    (checked-out ?x)
    (not (accessible ?x))
    (book-request ?x)
    (return-due ?x)
)
```
","(:action take-from-table
    :parameters (?x - book)
    :precondition (and (accessible ?x) (on-table ?x) (hands-free))
    :effect (and (not (on-table ?x)) (not (accessible ?x)) (not (hands-free)) (holding ?x))
)",
libraryworld,take-from-table,0.4014960527420044,Semi-Hard Negative (Intra-Domain Mismatch),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Imagine you're a librarian managing a table full of books. The 'take-from-table' action allows you to pick up a book that is on the table, provided it is accessible and your hands are free. This action simulates the scenario where you find a book on the table, ensure it's not covered by any other book, and then pick it up, thus holding it in your hands.

Action name: take-from-table


Your answer:
","Parameters:
1. ?x - book

Preconditions:
```
(and
    (checked-out ?x)
    (holding ?x)
)
```

Effects:
```
(and
    (not (checked-out ?x))
    (not (holding ?x))
    (not (book-request ?x))
    (not (return-due ?x))
    (accessible ?x)
    (hands-free)
)
```
","(:action take-from-table
    :parameters (?x - book)
    :precondition (and (accessible ?x) (on-table ?x) (hands-free))
    :effect (and (not (on-table ?x)) (not (accessible ?x)) (not (hands-free)) (holding ?x))
)",
libraryworld,take-from-table,0.8817847967147827,Semi-Hard Negative (Intra-Domain Mismatch),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Imagine you're a librarian managing a table full of books. The 'take-from-table' action allows you to pick up a book that is on the table, provided it is accessible and your hands are free. This action simulates the scenario where you find a book on the table, ensure it's not covered by any other book, and then pick it up, thus holding it in your hands.

Action name: take-from-table


Your answer:
","Parameters:
1. ?x - book
2. ?y - book
3. ?cat - category

Preconditions:
```
(and
    (holding ?x)
    (accessible ?y)
    (belongs-to-category ?x ?cat)
    (not (shelf-overflow ?cat))
)
```

Effects:
```
(and
    (not (holding ?x))
    (not (accessible ?y))
    (accessible ?x)
    (hands-free)
    (on-shelf ?x ?y)
    (shelf-empty ?cat)
)
```
","(:action take-from-table
    :parameters (?x - book)
    :precondition (and (accessible ?x) (on-table ?x) (hands-free))
    :effect (and (not (on-table ?x)) (not (accessible ?x)) (not (hands-free)) (holding ?x))
)",
libraryworld,take-from-table,0.7851869463920593,Semi-Hard Negative (Intra-Domain Mismatch),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Imagine you're a librarian managing a table full of books. The 'take-from-table' action allows you to pick up a book that is on the table, provided it is accessible and your hands are free. This action simulates the scenario where you find a book on the table, ensure it's not covered by any other book, and then pick it up, thus holding it in your hands.

Action name: take-from-table


Your answer:

**Explanation:** 

Imagine you're a librarian in a library, and there's a table full of books that need to be sorted. You want to pick up one of these books. To do this, certain conditions, called ""preconditions,"" must be met to ensure you can successfully pick up the book.

For the action ""take-from-table,"" let's break down what needs to be true before you can pick up a book:

1. **The book must be accessible:** This means the book isn't covered by other books or objects, so you can easily reach it.
2. **The book must be on the table:** This indicates the book is physically located on the table, not somewhere else like a shelf.
3. **Your hands must be free:** You need to have empty hands to pick up the book, meaning you aren't already holding something else.

Once these preconditions are met, you can proceed with the ""take-from-table"" action. This action results in several changes, called ""effects,"" that update the status of the book and your hands:

1. **The book is no longer on the table:** This indicates you've picked up the book from the table.
2. **The book is no longer accessible:** Since you're holding the book, it's not available for someone else to pick up from the table.
3. **Your hands are no longer free:** Because you're now holding the book, your hands are occupied.
4. **You are holding the book:** This shows that the book is now in your hands.

To summarize, the preconditions ensure you can reach the book, it's on the table, and your hands are free to pick it up. The effects update the situation to reflect that the book is now in your hands and no longer on the table or accessible to others.","Parameters:
1. ?x - book
2. ?y - book
3. ?cat - category

Preconditions:
```
(and
    (on-shelf ?x ?y)
    (accessible ?x)
    (hands-free)
    (belongs-to-category ?x ?cat)
)
```

Effects:
```
(and
    (holding ?x)
    (accessible ?y)
    (not (accessible ?x))
    (not (hands-free))
    (not (on-shelf ?x ?y))
    (shelf-empty ?cat)
)
```
","(:action take-from-table
    :parameters (?x - book)
    :precondition (and (accessible ?x) (on-table ?x) (hands-free))
    :effect (and (not (on-table ?x)) (not (accessible ?x)) (not (hands-free)) (holding ?x))
)",
libraryworld,take-from-table,0.5250560641288757,Semi-Hard Negative (Intra-Domain Mismatch),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Imagine you're a librarian managing a table full of books. The 'take-from-table' action allows you to pick up a book that is on the table, provided it is accessible and your hands are free. This action simulates the scenario where you find a book on the table, ensure it's not covered by any other book, and then pick it up, thus holding it in your hands.

Action name: take-from-table


Your answer:

**Explanation:** 

Imagine you're a librarian in a library, and there's a table full of books that need to be sorted. You want to pick up one of these books. To do this, certain conditions, called ""preconditions,"" must be met to ensure you can successfully pick up the book.

For the action ""take-from-table,"" let's break down what needs to be true before you can pick up a book:

1. **The book must be accessible:** This means the book isn't covered by other books or objects, so you can easily reach it.
2. **The book must be on the table:** This indicates the book is physically located on the table, not somewhere else like a shelf.
3. **Your hands must be free:** You need to have empty hands to pick up the book, meaning you aren't already holding something else.

Once these preconditions are met, you can proceed with the ""take-from-table"" action. This action results in several changes, called ""effects,"" that update the status of the book and your hands:

1. **The book is no longer on the table:** This indicates you've picked up the book from the table.
2. **The book is no longer accessible:** Since you're holding the book, it's not available for someone else to pick up from the table.
3. **Your hands are no longer free:** Because you're now holding the book, your hands are occupied.
4. **You are holding the book:** This shows that the book is now in your hands.

To summarize, the preconditions ensure you can reach the book, it's on the table, and your hands are free to pick it up. The effects update the situation to reflect that the book is now in your hands and no longer on the table or accessible to others.","Parameters:
1. ?x - book

Preconditions:
```
(holding ?x)
```

Effects:
```
(and
    (not (holding ?x))
    (accessible ?x)
    (hands-free)
    (on-table ?x)
)
```
","(:action take-from-table
    :parameters (?x - book)
    :precondition (and (accessible ?x) (on-table ?x) (hands-free))
    :effect (and (not (on-table ?x)) (not (accessible ?x)) (not (hands-free)) (holding ?x))
)",
libraryworld,take-from-table,0.697905421257019,Semi-Hard Negative (Intra-Domain Mismatch),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Imagine you're a librarian managing a table full of books. The 'take-from-table' action allows you to pick up a book that is on the table, provided it is accessible and your hands are free. This action simulates the scenario where you find a book on the table, ensure it's not covered by any other book, and then pick it up, thus holding it in your hands.

Action name: take-from-table


Your answer:

**Explanation:** 

Imagine you're a librarian in a library, and there's a table full of books that need to be sorted. You want to pick up one of these books. To do this, certain conditions, called ""preconditions,"" must be met to ensure you can successfully pick up the book.

For the action ""take-from-table,"" let's break down what needs to be true before you can pick up a book:

1. **The book must be accessible:** This means the book isn't covered by other books or objects, so you can easily reach it.
2. **The book must be on the table:** This indicates the book is physically located on the table, not somewhere else like a shelf.
3. **Your hands must be free:** You need to have empty hands to pick up the book, meaning you aren't already holding something else.

Once these preconditions are met, you can proceed with the ""take-from-table"" action. This action results in several changes, called ""effects,"" that update the status of the book and your hands:

1. **The book is no longer on the table:** This indicates you've picked up the book from the table.
2. **The book is no longer accessible:** Since you're holding the book, it's not available for someone else to pick up from the table.
3. **Your hands are no longer free:** Because you're now holding the book, your hands are occupied.
4. **You are holding the book:** This shows that the book is now in your hands.

To summarize, the preconditions ensure you can reach the book, it's on the table, and your hands are free to pick it up. The effects update the situation to reflect that the book is now in your hands and no longer on the table or accessible to others.","Parameters:
1. ?x - book

Preconditions:
```
(and
    (accessible ?x)
    (not (checked-out ?x))
)
```

Effects:
```
(and
    (checked-out ?x)
    (not (accessible ?x))
    (book-request ?x)
    (return-due ?x)
)
```
","(:action take-from-table
    :parameters (?x - book)
    :precondition (and (accessible ?x) (on-table ?x) (hands-free))
    :effect (and (not (on-table ?x)) (not (accessible ?x)) (not (hands-free)) (holding ?x))
)",
libraryworld,take-from-table,0.4014960527420044,Semi-Hard Negative (Intra-Domain Mismatch),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Imagine you're a librarian managing a table full of books. The 'take-from-table' action allows you to pick up a book that is on the table, provided it is accessible and your hands are free. This action simulates the scenario where you find a book on the table, ensure it's not covered by any other book, and then pick it up, thus holding it in your hands.

Action name: take-from-table


Your answer:

**Explanation:** 

Imagine you're a librarian in a library, and there's a table full of books that need to be sorted. You want to pick up one of these books. To do this, certain conditions, called ""preconditions,"" must be met to ensure you can successfully pick up the book.

For the action ""take-from-table,"" let's break down what needs to be true before you can pick up a book:

1. **The book must be accessible:** This means the book isn't covered by other books or objects, so you can easily reach it.
2. **The book must be on the table:** This indicates the book is physically located on the table, not somewhere else like a shelf.
3. **Your hands must be free:** You need to have empty hands to pick up the book, meaning you aren't already holding something else.

Once these preconditions are met, you can proceed with the ""take-from-table"" action. This action results in several changes, called ""effects,"" that update the status of the book and your hands:

1. **The book is no longer on the table:** This indicates you've picked up the book from the table.
2. **The book is no longer accessible:** Since you're holding the book, it's not available for someone else to pick up from the table.
3. **Your hands are no longer free:** Because you're now holding the book, your hands are occupied.
4. **You are holding the book:** This shows that the book is now in your hands.

To summarize, the preconditions ensure you can reach the book, it's on the table, and your hands are free to pick it up. The effects update the situation to reflect that the book is now in your hands and no longer on the table or accessible to others.","Parameters:
1. ?x - book

Preconditions:
```
(and
    (checked-out ?x)
    (holding ?x)
)
```

Effects:
```
(and
    (not (checked-out ?x))
    (not (holding ?x))
    (not (book-request ?x))
    (not (return-due ?x))
    (accessible ?x)
    (hands-free)
)
```
","(:action take-from-table
    :parameters (?x - book)
    :precondition (and (accessible ?x) (on-table ?x) (hands-free))
    :effect (and (not (on-table ?x)) (not (accessible ?x)) (not (hands-free)) (holding ?x))
)",
libraryworld,take-from-table,0.8817847967147827,Semi-Hard Negative (Intra-Domain Mismatch),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Imagine you're a librarian managing a table full of books. The 'take-from-table' action allows you to pick up a book that is on the table, provided it is accessible and your hands are free. This action simulates the scenario where you find a book on the table, ensure it's not covered by any other book, and then pick it up, thus holding it in your hands.

Action name: take-from-table


Your answer:

**Explanation:** 

Imagine you're a librarian in a library, and there's a table full of books that need to be sorted. You want to pick up one of these books. To do this, certain conditions, called ""preconditions,"" must be met to ensure you can successfully pick up the book.

For the action ""take-from-table,"" let's break down what needs to be true before you can pick up a book:

1. **The book must be accessible:** This means the book isn't covered by other books or objects, so you can easily reach it.
2. **The book must be on the table:** This indicates the book is physically located on the table, not somewhere else like a shelf.
3. **Your hands must be free:** You need to have empty hands to pick up the book, meaning you aren't already holding something else.

Once these preconditions are met, you can proceed with the ""take-from-table"" action. This action results in several changes, called ""effects,"" that update the status of the book and your hands:

1. **The book is no longer on the table:** This indicates you've picked up the book from the table.
2. **The book is no longer accessible:** Since you're holding the book, it's not available for someone else to pick up from the table.
3. **Your hands are no longer free:** Because you're now holding the book, your hands are occupied.
4. **You are holding the book:** This shows that the book is now in your hands.

To summarize, the preconditions ensure you can reach the book, it's on the table, and your hands are free to pick it up. The effects update the situation to reflect that the book is now in your hands and no longer on the table or accessible to others.","Parameters:
1. ?x - book
2. ?y - book
3. ?cat - category

Preconditions:
```
(and
    (holding ?x)
    (accessible ?y)
    (belongs-to-category ?x ?cat)
    (not (shelf-overflow ?cat))
)
```

Effects:
```
(and
    (not (holding ?x))
    (not (accessible ?y))
    (accessible ?x)
    (hands-free)
    (on-shelf ?x ?y)
    (shelf-empty ?cat)
)
```
","(:action take-from-table
    :parameters (?x - book)
    :precondition (and (accessible ?x) (on-table ?x) (hands-free))
    :effect (and (not (on-table ?x)) (not (accessible ?x)) (not (hands-free)) (holding ?x))
)",
libraryworld,take-from-table,0.7177783846855164,Semi-Hard Negative (Intra-Domain Mismatch),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Imagine you're a librarian managing a table full of books. The 'take-from-table' action allows you to pick up a book that is on the table, provided it is accessible and your hands are free. This action simulates the scenario where you find a book on the table, ensure it's not covered by any other book, and then pick it up, thus holding it in your hands.

Action name: take-from-table


Your answer:
","**Explanation:** 

Imagine you are a librarian in a library, and you need to take a book off the shelf. This book is placed on top of another book. The action ""remove-from-shelf"" lets you take the top book off the shelf. To do this, certain conditions, called ""preconditions,"" must be met to make sure you can successfully take the book.

For the action ""remove-from-shelf,"" let's break down what needs to be true before you can take the book off the shelf:

1. **The book must be on the shelf:** This means the book you want to take is on top of another book on the shelf.
2. **The book must be accessible:** This means the book isn't covered by other books or objects, so you can easily reach it.
3. **Your hands must be free:** You need to have empty hands to pick up the book, meaning you aren't already holding something else.
4. **The book must belong to a certain category:** This helps you know which book you are taking and ensures you are organizing the books properly.

Once these preconditions are met, you can proceed with the ""remove-from-shelf"" action. This action results in several changes, called ""effects,"" that update the status of the books and your hands:

1. **You are now holding the book:** This indicates you have picked up the book from the shelf.
2. **The book underneath becomes accessible:** Since you have removed the top book, the book underneath is now easy to reach.
3. **The book you removed is no longer accessible:** Because you are holding the book, it's not available on the shelf anymore.
4. **Your hands are no longer free:** Since you are now holding the book, your hands are occupied.
5. **The book is no longer on the shelf:** This shows that the book has been taken off the shelf.
6. **The shelf is now empty for that category:** This helps keep track of the shelf space and organization.

To summarize, the preconditions ensure the book is on the shelf, accessible, your hands are free, and you know which category the book belongs to. The effects update the situation to show you are holding the book, the book underneath is now accessible, and the shelf is empty for that category.
Parameters:
1. ?x - book
2. ?y - book
3. ?cat - category

Preconditions:
```
(and
    (on-shelf ?x ?y)
    (accessible ?x)
    (hands-free)
    (belongs-to-category ?x ?cat)
)
```

Effects:
```
(and
    (holding ?x)
    (accessible ?y)
    (not (accessible ?x))
    (not (hands-free))
    (not (on-shelf ?x ?y))
    (shelf-empty ?cat)
)
```
","(:action take-from-table
    :parameters (?x - book)
    :precondition (and (accessible ?x) (on-table ?x) (hands-free))
    :effect (and (not (on-table ?x)) (not (accessible ?x)) (not (hands-free)) (holding ?x))
)",
libraryworld,take-from-table,0.6384035348892212,Semi-Hard Negative (Intra-Domain Mismatch),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Imagine you're a librarian managing a table full of books. The 'take-from-table' action allows you to pick up a book that is on the table, provided it is accessible and your hands are free. This action simulates the scenario where you find a book on the table, ensure it's not covered by any other book, and then pick it up, thus holding it in your hands.

Action name: take-from-table


Your answer:
","**Explanation:** 

Imagine you are a librarian holding a book in your hands, and you want to place it on a nearby table. The action ""place-on-table"" lets you do this. To make sure everything goes smoothly, there is a condition, called a ""precondition,"" that must be met before you can place the book on the table.

For the action ""place-on-table,"" let's break down what needs to be true before you can place the book on the table:

1. **You must be holding the book:** This means you have the book in your hands, ready to place it on the table.

Once this precondition is met, you can proceed with the ""place-on-table"" action. This action results in several changes, called ""effects,"" that update the status of the book and your hands:

1. **You are no longer holding the book:** This shows that you have placed the book on the table.
2. **The book becomes accessible:** Now that the book is on the table, it is easy to reach and pick up again if needed.
3. **Your hands are now free:** Since you have placed the book on the table, your hands are empty again.
4. **The book is on the table:** This indicates the new location of the book.

To summarize, the precondition ensures you are holding the book, making sure you are ready to place it on the table. The effects update the situation to show that you have placed the book on the table, it is now accessible, and your hands are free again.
Parameters:
1. ?x - book

Preconditions:
```
(holding ?x)
```

Effects:
```
(and
    (not (holding ?x))
    (accessible ?x)
    (hands-free)
    (on-table ?x)
)
```
","(:action take-from-table
    :parameters (?x - book)
    :precondition (and (accessible ?x) (on-table ?x) (hands-free))
    :effect (and (not (on-table ?x)) (not (accessible ?x)) (not (hands-free)) (holding ?x))
)",
libraryworld,take-from-table,0.6450091600418091,Semi-Hard Negative (Intra-Domain Mismatch),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Imagine you're a librarian managing a table full of books. The 'take-from-table' action allows you to pick up a book that is on the table, provided it is accessible and your hands are free. This action simulates the scenario where you find a book on the table, ensure it's not covered by any other book, and then pick it up, thus holding it in your hands.

Action name: take-from-table


Your answer:
","**Explanation:** 

Imagine a librarian in a library who helps patrons borrow books. When a patron wants to borrow a book, the librarian needs to make sure certain conditions are met before they can check the book out. These conditions are called ""preconditions.""

For the action ""check-out,"" let's think about what needs to be true before the librarian can let the patron borrow the book:

1. **The book must be accessible:** This means the book is not covered by other books or objects, making it easy for the librarian to pick up. If the book isn't accessible, the librarian can't reach it to check it out.
2. **The book must not be already checked out:** If the book is already checked out to someone else, it can't be borrowed by another patron until it's returned.

Once these preconditions are met, the librarian can proceed with the check-out action. The action results in several changes, called ""effects,"" that update the status of the book:

1. **The book is marked as checked out:** This indicates that the book is now borrowed and can't be checked out by another patron until it's returned.
2. **The book is no longer accessible:** Since the book is borrowed, it's no longer available on the shelf for others to take.
3. **There is a request for the book:** This keeps track of the borrowing transaction.
4. **A return due date is set:** This helps the library know when to expect the book back.

To summarize, the preconditions ensure the librarian can access the book and that it isn't already borrowed. The effects update the system to show the book is now checked out, not accessible, and has a return due date.
Parameters:
1. ?x - book

Preconditions:
```
(and
    (accessible ?x)
    (not (checked-out ?x))
)
```

Effects:
```
(and
    (checked-out ?x)
    (not (accessible ?x))
    (book-request ?x)
    (return-due ?x)
)
```
","(:action take-from-table
    :parameters (?x - book)
    :precondition (and (accessible ?x) (on-table ?x) (hands-free))
    :effect (and (not (on-table ?x)) (not (accessible ?x)) (not (hands-free)) (holding ?x))
)",
libraryworld,take-from-table,0.6513895988464355,Semi-Hard Negative (Intra-Domain Mismatch),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Imagine you're a librarian managing a table full of books. The 'take-from-table' action allows you to pick up a book that is on the table, provided it is accessible and your hands are free. This action simulates the scenario where you find a book on the table, ensure it's not covered by any other book, and then pick it up, thus holding it in your hands.

Action name: take-from-table


Your answer:
","**Explanation:** 

Imagine a patron is returning a borrowed book to the library. The librarian needs to process this return to update the book's status and remove any return due date. The action ""return-book"" describes how the librarian can do this. There are specific conditions, called ""preconditions,"" that must be met to ensure the return can be processed correctly.

For the action ""return-book,"" let's break down what needs to be true before the librarian can return the book:

1. **The book must be checked out:** This means the book is currently borrowed by someone and needs to be returned.
2. **The librarian must be holding the book:** This indicates the librarian has the book in their hands, ready to process the return.

Once these preconditions are met, the librarian can proceed with the ""return-book"" action. This action results in several changes, called ""effects,"" that update the status of the book and the librarian's hands:

1. **The book is no longer checked out:** This shows that the book has been returned and is available for borrowing again.
2. **The librarian is no longer holding the book:** This indicates the librarian has processed the return and placed the book back in its proper place.
3. **Any request for the book is removed:** If there was a request for this book, it is no longer needed since the book is now available.
4. **The return due date is removed:** This updates the system to show that the book is no longer due for return.
5. **The book becomes accessible:** Now that the book is back in the library, it is easy to find and borrow again.
6. **The librarian's hands are now free:** Since the librarian has finished processing the return, their hands are empty and ready for the next task.

To summarize, the preconditions ensure the book is currently borrowed and the librarian has it in their hands, ready to return. The effects update the situation to show that the book is no longer checked out, any requests and due dates are removed, the book is accessible again, and the librarian's hands are free.
Parameters:
1. ?x - book

Preconditions:
```
(and
    (checked-out ?x)
    (holding ?x)
)
```

Effects:
```
(and
    (not (checked-out ?x))
    (not (holding ?x))
    (not (book-request ?x))
    (not (return-due ?x))
    (accessible ?x)
    (hands-free)
)
```
","(:action take-from-table
    :parameters (?x - book)
    :precondition (and (accessible ?x) (on-table ?x) (hands-free))
    :effect (and (not (on-table ?x)) (not (accessible ?x)) (not (hands-free)) (holding ?x))
)",
libraryworld,take-from-table,0.7562538981437683,Semi-Hard Negative (Intra-Domain Mismatch),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Imagine you're a librarian managing a table full of books. The 'take-from-table' action allows you to pick up a book that is on the table, provided it is accessible and your hands are free. This action simulates the scenario where you find a book on the table, ensure it's not covered by any other book, and then pick it up, thus holding it in your hands.

Action name: take-from-table


Your answer:
","**Explanation:** 

Imagine you are a librarian standing near a shelf, holding a book in your hands. You want to place this book on top of another book that is already on the shelf. This action, called ""place-on-shelf,"" needs to follow certain rules, called ""preconditions,"" to make sure everything goes smoothly.

For the action ""place-on-shelf,"" let's break down what needs to be true before you can place the book on the shelf:

1. **You must be holding the book:** This means you have the book in your hands, ready to place it on the shelf.
2. **The book on the shelf must be accessible:** The book already on the shelf should not be covered by other books or objects, so you can easily place your book on top of it.
3. **The book you are holding must belong to a certain category:** This helps in organizing the books properly according to their categories.
4. **The shelf should not be overflowing:** There should be enough space on the shelf to place another book.

Once these preconditions are met, you can proceed with the ""place-on-shelf"" action. This action results in several changes, called ""effects,"" that update the status of the books and your hands:

1. **You are no longer holding the book:** This shows that you have placed the book on the shelf.
2. **The book on the shelf is no longer accessible:** Because the new book is now on top of it, making it covered.
3. **The book you placed is now accessible:** This indicates the book you just placed is easy to reach.
4. **Your hands are now free:** Since you have placed the book on the shelf, your hands are empty again.
5. **The new book is on the shelf on top of the other book:** This shows the new book's position.
6. **The shelf is now considered empty for that category:** This helps in tracking the organization and availability of shelf space for that category.

To summarize, the preconditions ensure you are holding the book, the shelf has space, and the book on the shelf is accessible. The effects update the situation to show that you have placed the book on the shelf, the new book is accessible, and your hands are free again.
Parameters:
1. ?x - book
2. ?y - book
3. ?cat - category

Preconditions:
```
(and
    (holding ?x)
    (accessible ?y)
    (belongs-to-category ?x ?cat)
    (not (shelf-overflow ?cat))
)
```

Effects:
```
(and
    (not (holding ?x))
    (not (accessible ?y))
    (accessible ?x)
    (hands-free)
    (on-shelf ?x ?y)
    (shelf-empty ?cat)
)
```
","(:action take-from-table
    :parameters (?x - book)
    :precondition (and (accessible ?x) (on-table ?x) (hands-free))
    :effect (and (not (on-table ?x)) (not (accessible ?x)) (not (hands-free)) (holding ?x))
)",
libraryworld,take-from-table,0.41204535961151123,Hard Negative (Manipulated Action),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Imagine you're a librarian managing a table full of books. The 'take-from-table' action allows you to pick up a book that is on the table, provided it is accessible and your hands are free. This action simulates the scenario where you find a book on the table, ensure it's not covered by any other book, and then pick it up, thus holding it in your hands.

Action name: take-from-table


Your answer:
","Parameters:
1. ?x - book

Preconditions:
```
(and
    (accessible ?x)
    (on-table ?x)
    (hands-free)
)
```

Effects:
```
(and
    (hands-free)
    (not (accessible ?x))
    (holding ?x)
)
```
","(:action take-from-table
    :parameters (?x - book)
    :precondition (and (accessible ?x) (on-table ?x) (hands-free))
    :effect (and (not (on-table ?x)) (not (accessible ?x)) (not (hands-free)) (holding ?x))
)","negate (not (hands-free)) in effects
remove (not (on-table ?x)) from effects
"
libraryworld,take-from-table,0.3678094148635864,Hard Negative (Manipulated Action),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Imagine you're a librarian managing a table full of books. The 'take-from-table' action allows you to pick up a book that is on the table, provided it is accessible and your hands are free. This action simulates the scenario where you find a book on the table, ensure it's not covered by any other book, and then pick it up, thus holding it in your hands.

Action name: take-from-table


Your answer:
","Parameters:
1. ?x - book

Preconditions:
```
(and
    (holding ?x)
    (on-table ?x)
    (hands-free)
)
```

Effects:
```
(and
    (accessible ?x)
    (not (on-table ?x))
    (not (accessible ?x))
)
```
","(:action take-from-table
    :parameters (?x - book)
    :precondition (and (accessible ?x) (on-table ?x) (hands-free))
    :effect (and (not (on-table ?x)) (not (accessible ?x)) (not (hands-free)) (holding ?x))
)","remove (not (hands-free)) from effects
swap (accessible ?x) with (holding ?x)
"
libraryworld,take-from-table,0.27357202768325806,Hard Negative (Manipulated Action),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Imagine you're a librarian managing a table full of books. The 'take-from-table' action allows you to pick up a book that is on the table, provided it is accessible and your hands are free. This action simulates the scenario where you find a book on the table, ensure it's not covered by any other book, and then pick it up, thus holding it in your hands.

Action name: take-from-table


Your answer:
","Parameters:
1. ?x - book

Preconditions:
```
(and
    (on-table ?x)
    (hands-free)
)
```

Effects:
```
(and
    (not (on-table ?x))
    (not (accessible ?x))
    (not (hands-free))
    (holding ?x)
)
```
","(:action take-from-table
    :parameters (?x - book)
    :precondition (and (accessible ?x) (on-table ?x) (hands-free))
    :effect (and (not (on-table ?x)) (not (accessible ?x)) (not (hands-free)) (holding ?x))
)","remove (accessible ?x) from preconditions
"
libraryworld,take-from-table,0.41204535961151123,Hard Negative (Manipulated Action),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Imagine you're a librarian managing a table full of books. The 'take-from-table' action allows you to pick up a book that is on the table, provided it is accessible and your hands are free. This action simulates the scenario where you find a book on the table, ensure it's not covered by any other book, and then pick it up, thus holding it in your hands.

Action name: take-from-table


Your answer:
","Parameters:
1. ?x - book

Preconditions:
```
(and
    (accessible ?x)
    (on-table ?x)
    (hands-free)
)
```

Effects:
```
(and
    (hands-free)
    (not (accessible ?x))
    (holding ?x)
)
```
","(:action take-from-table
    :parameters (?x - book)
    :precondition (and (accessible ?x) (on-table ?x) (hands-free))
    :effect (and (not (on-table ?x)) (not (accessible ?x)) (not (hands-free)) (holding ?x))
)","remove (not (on-table ?x)) from effects
negate (not (hands-free)) in effects
"
libraryworld,take-from-table,0.4357331097126007,Hard Negative (Manipulated Action),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Imagine you're a librarian managing a table full of books. The 'take-from-table' action allows you to pick up a book that is on the table, provided it is accessible and your hands are free. This action simulates the scenario where you find a book on the table, ensure it's not covered by any other book, and then pick it up, thus holding it in your hands.

Action name: take-from-table


Your answer:
","Parameters:
1. ?x - book

Preconditions:
```
(and
    (holding ?x)
    (accessible ?x)
    (on-table ?x)
)
```

Effects:
```
(and
    (hands-free)
    (not (on-table ?x))
    (not (accessible ?x))
    (not (hands-free))
)
```
","(:action take-from-table
    :parameters (?x - book)
    :precondition (and (accessible ?x) (on-table ?x) (hands-free))
    :effect (and (not (on-table ?x)) (not (accessible ?x)) (not (hands-free)) (holding ?x))
)","swap (hands-free) with (holding ?x)
"
libraryworld,take-from-table,0.13463722169399261,Hard Negative (Manipulated Action),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Imagine you're a librarian managing a table full of books. The 'take-from-table' action allows you to pick up a book that is on the table, provided it is accessible and your hands are free. This action simulates the scenario where you find a book on the table, ensure it's not covered by any other book, and then pick it up, thus holding it in your hands.

Action name: take-from-table


Your answer:
","Parameters:
1. ?x - book

Preconditions:
```
(and
    (not (accessible ?x))
    (hands-free)
)
```

Effects:
```
(and
    (not (on-table ?x))
    (not (accessible ?x))
    (not (hands-free))
    (holding ?x)
)
```
","(:action take-from-table
    :parameters (?x - book)
    :precondition (and (accessible ?x) (on-table ?x) (hands-free))
    :effect (and (not (on-table ?x)) (not (accessible ?x)) (not (hands-free)) (holding ?x))
)","negate (accessible ?x) in preconditions
remove (on-table ?x) from preconditions
"
libraryworld,take-from-table,0.23397070169448853,Hard Negative (Manipulated Action),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Imagine you're a librarian managing a table full of books. The 'take-from-table' action allows you to pick up a book that is on the table, provided it is accessible and your hands are free. This action simulates the scenario where you find a book on the table, ensure it's not covered by any other book, and then pick it up, thus holding it in your hands.

Action name: take-from-table


Your answer:
","Parameters:
1. ?x - book

Preconditions:
```
(and
    (not (accessible ?x))
    (on-table ?x)
    (hands-free)
)
```

Effects:
```
(and
    (not (on-table ?x))
    (not (accessible ?x))
    (not (hands-free))
    (holding ?x)
)
```
","(:action take-from-table
    :parameters (?x - book)
    :precondition (and (accessible ?x) (on-table ?x) (hands-free))
    :effect (and (not (on-table ?x)) (not (accessible ?x)) (not (hands-free)) (holding ?x))
)","negate (accessible ?x) in preconditions
"
libraryworld,take-from-table,0.22128334641456604,Hard Negative (Manipulated Action),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Imagine you're a librarian managing a table full of books. The 'take-from-table' action allows you to pick up a book that is on the table, provided it is accessible and your hands are free. This action simulates the scenario where you find a book on the table, ensure it's not covered by any other book, and then pick it up, thus holding it in your hands.

Action name: take-from-table


Your answer:
","Parameters:
1. ?x - book

Preconditions:
```
(and
    (on-table ?x)
    (hands-free)
)
```

Effects:
```
(and
    (not (on-table ?x))
    (not (accessible ?x))
    (not (hands-free))
)
```
","(:action take-from-table
    :parameters (?x - book)
    :precondition (and (accessible ?x) (on-table ?x) (hands-free))
    :effect (and (not (on-table ?x)) (not (accessible ?x)) (not (hands-free)) (holding ?x))
)","remove (holding ?x) from effects
remove (accessible ?x) from preconditions
"
libraryworld,take-from-table,0.21914923191070557,Hard Negative (Manipulated Action),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Imagine you're a librarian managing a table full of books. The 'take-from-table' action allows you to pick up a book that is on the table, provided it is accessible and your hands are free. This action simulates the scenario where you find a book on the table, ensure it's not covered by any other book, and then pick it up, thus holding it in your hands.

Action name: take-from-table


Your answer:
","Parameters:
1. ?x - book

Preconditions:
```
(and
    (not (on-table ?x))
    (accessible ?x)
    (hands-free)
)
```

Effects:
```
(and
    (not (on-table ?x))
    (not (accessible ?x))
    (not (hands-free))
    (holding ?x)
)
```
","(:action take-from-table
    :parameters (?x - book)
    :precondition (and (accessible ?x) (on-table ?x) (hands-free))
    :effect (and (not (on-table ?x)) (not (accessible ?x)) (not (hands-free)) (holding ?x))
)","negate (on-table ?x) in preconditions
"
libraryworld,take-from-table,0.2421179711818695,Hard Negative (Manipulated Action),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Imagine you're a librarian managing a table full of books. The 'take-from-table' action allows you to pick up a book that is on the table, provided it is accessible and your hands are free. This action simulates the scenario where you find a book on the table, ensure it's not covered by any other book, and then pick it up, thus holding it in your hands.

Action name: take-from-table


Your answer:
","Parameters:
1. ?x - book

Preconditions:
```
(and
    (not (hands-free))
    (accessible ?x)
    (on-table ?x)
)
```

Effects:
```
(and
    (hands-free)
    (not (on-table ?x))
    (not (accessible ?x))
    (holding ?x)
)
```
","(:action take-from-table
    :parameters (?x - book)
    :precondition (and (accessible ?x) (on-table ?x) (hands-free))
    :effect (and (not (on-table ?x)) (not (accessible ?x)) (not (hands-free)) (holding ?x))
)","swap (hands-free) with (not (hands-free))
"
libraryworld,take-from-table,0.19846954941749573,Hard Negative (Manipulated Action),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Imagine you're a librarian managing a table full of books. The 'take-from-table' action allows you to pick up a book that is on the table, provided it is accessible and your hands are free. This action simulates the scenario where you find a book on the table, ensure it's not covered by any other book, and then pick it up, thus holding it in your hands.

Action name: take-from-table


Your answer:

**Explanation:** 

Imagine you're a librarian in a library, and there's a table full of books that need to be sorted. You want to pick up one of these books. To do this, certain conditions, called ""preconditions,"" must be met to ensure you can successfully pick up the book.

For the action ""take-from-table,"" let's break down what needs to be true before you can pick up a book:

1. **The book must be accessible:** This means the book isn't covered by other books or objects, so you can easily reach it.
2. **The book must be on the table:** This indicates the book is physically located on the table, not somewhere else like a shelf.
3. **Your hands must be free:** You need to have empty hands to pick up the book, meaning you aren't already holding something else.

Once these preconditions are met, you can proceed with the ""take-from-table"" action. This action results in several changes, called ""effects,"" that update the status of the book and your hands:

1. **The book is no longer on the table:** This indicates you've picked up the book from the table.
2. **The book is no longer accessible:** Since you're holding the book, it's not available for someone else to pick up from the table.
3. **Your hands are no longer free:** Because you're now holding the book, your hands are occupied.
4. **You are holding the book:** This shows that the book is now in your hands.

To summarize, the preconditions ensure you can reach the book, it's on the table, and your hands are free to pick it up. The effects update the situation to reflect that the book is now in your hands and no longer on the table or accessible to others.","Parameters:
1. ?x - book

Preconditions:
```
(and
    (not (accessible ?x))
    (not (hands-free))
    (hands-free)
)
```

Effects:
```
(and
    (on-table ?x)
    (not (on-table ?x))
    (not (accessible ?x))
    (holding ?x)
)
```
","(:action take-from-table
    :parameters (?x - book)
    :precondition (and (accessible ?x) (on-table ?x) (hands-free))
    :effect (and (not (on-table ?x)) (not (accessible ?x)) (not (hands-free)) (holding ?x))
)","negate (accessible ?x) in preconditions
swap (on-table ?x) with (not (hands-free))
"
libraryworld,take-from-table,0.3678094148635864,Hard Negative (Manipulated Action),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Imagine you're a librarian managing a table full of books. The 'take-from-table' action allows you to pick up a book that is on the table, provided it is accessible and your hands are free. This action simulates the scenario where you find a book on the table, ensure it's not covered by any other book, and then pick it up, thus holding it in your hands.

Action name: take-from-table


Your answer:

**Explanation:** 

Imagine you're a librarian in a library, and there's a table full of books that need to be sorted. You want to pick up one of these books. To do this, certain conditions, called ""preconditions,"" must be met to ensure you can successfully pick up the book.

For the action ""take-from-table,"" let's break down what needs to be true before you can pick up a book:

1. **The book must be accessible:** This means the book isn't covered by other books or objects, so you can easily reach it.
2. **The book must be on the table:** This indicates the book is physically located on the table, not somewhere else like a shelf.
3. **Your hands must be free:** You need to have empty hands to pick up the book, meaning you aren't already holding something else.

Once these preconditions are met, you can proceed with the ""take-from-table"" action. This action results in several changes, called ""effects,"" that update the status of the book and your hands:

1. **The book is no longer on the table:** This indicates you've picked up the book from the table.
2. **The book is no longer accessible:** Since you're holding the book, it's not available for someone else to pick up from the table.
3. **Your hands are no longer free:** Because you're now holding the book, your hands are occupied.
4. **You are holding the book:** This shows that the book is now in your hands.

To summarize, the preconditions ensure you can reach the book, it's on the table, and your hands are free to pick it up. The effects update the situation to reflect that the book is now in your hands and no longer on the table or accessible to others.","Parameters:
1. ?x - book

Preconditions:
```
(and
    (holding ?x)
    (on-table ?x)
    (hands-free)
)
```

Effects:
```
(and
    (accessible ?x)
    (not (on-table ?x))
    (not (accessible ?x))
)
```
","(:action take-from-table
    :parameters (?x - book)
    :precondition (and (accessible ?x) (on-table ?x) (hands-free))
    :effect (and (not (on-table ?x)) (not (accessible ?x)) (not (hands-free)) (holding ?x))
)","remove (not (hands-free)) from effects
swap (accessible ?x) with (holding ?x)
"
libraryworld,take-from-table,0.1485675722360611,Hard Negative (Manipulated Action),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Imagine you're a librarian managing a table full of books. The 'take-from-table' action allows you to pick up a book that is on the table, provided it is accessible and your hands are free. This action simulates the scenario where you find a book on the table, ensure it's not covered by any other book, and then pick it up, thus holding it in your hands.

Action name: take-from-table


Your answer:

**Explanation:** 

Imagine you're a librarian in a library, and there's a table full of books that need to be sorted. You want to pick up one of these books. To do this, certain conditions, called ""preconditions,"" must be met to ensure you can successfully pick up the book.

For the action ""take-from-table,"" let's break down what needs to be true before you can pick up a book:

1. **The book must be accessible:** This means the book isn't covered by other books or objects, so you can easily reach it.
2. **The book must be on the table:** This indicates the book is physically located on the table, not somewhere else like a shelf.
3. **Your hands must be free:** You need to have empty hands to pick up the book, meaning you aren't already holding something else.

Once these preconditions are met, you can proceed with the ""take-from-table"" action. This action results in several changes, called ""effects,"" that update the status of the book and your hands:

1. **The book is no longer on the table:** This indicates you've picked up the book from the table.
2. **The book is no longer accessible:** Since you're holding the book, it's not available for someone else to pick up from the table.
3. **Your hands are no longer free:** Because you're now holding the book, your hands are occupied.
4. **You are holding the book:** This shows that the book is now in your hands.

To summarize, the preconditions ensure you can reach the book, it's on the table, and your hands are free to pick it up. The effects update the situation to reflect that the book is now in your hands and no longer on the table or accessible to others.","Parameters:
1. ?x - book

Preconditions:
```
(and
    (not (hands-free))
    (accessible ?x)
    (hands-free)
)
```

Effects:
```
(and
    (on-table ?x)
    (not (accessible ?x))
    (holding ?x)
)
```
","(:action take-from-table
    :parameters (?x - book)
    :precondition (and (accessible ?x) (on-table ?x) (hands-free))
    :effect (and (not (on-table ?x)) (not (accessible ?x)) (not (hands-free)) (holding ?x))
)","swap (on-table ?x) with (not (hands-free))
remove (not (on-table ?x)) from effects
"
libraryworld,take-from-table,0.1645037829875946,Hard Negative (Manipulated Action),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Imagine you're a librarian managing a table full of books. The 'take-from-table' action allows you to pick up a book that is on the table, provided it is accessible and your hands are free. This action simulates the scenario where you find a book on the table, ensure it's not covered by any other book, and then pick it up, thus holding it in your hands.

Action name: take-from-table


Your answer:

**Explanation:** 

Imagine you're a librarian in a library, and there's a table full of books that need to be sorted. You want to pick up one of these books. To do this, certain conditions, called ""preconditions,"" must be met to ensure you can successfully pick up the book.

For the action ""take-from-table,"" let's break down what needs to be true before you can pick up a book:

1. **The book must be accessible:** This means the book isn't covered by other books or objects, so you can easily reach it.
2. **The book must be on the table:** This indicates the book is physically located on the table, not somewhere else like a shelf.
3. **Your hands must be free:** You need to have empty hands to pick up the book, meaning you aren't already holding something else.

Once these preconditions are met, you can proceed with the ""take-from-table"" action. This action results in several changes, called ""effects,"" that update the status of the book and your hands:

1. **The book is no longer on the table:** This indicates you've picked up the book from the table.
2. **The book is no longer accessible:** Since you're holding the book, it's not available for someone else to pick up from the table.
3. **Your hands are no longer free:** Because you're now holding the book, your hands are occupied.
4. **You are holding the book:** This shows that the book is now in your hands.

To summarize, the preconditions ensure you can reach the book, it's on the table, and your hands are free to pick it up. The effects update the situation to reflect that the book is now in your hands and no longer on the table or accessible to others.","Parameters:
1. ?x - book

Preconditions:
```
(and
    (not (on-table ?x))
    (on-table ?x)
    (hands-free)
)
```

Effects:
```
(and
    (accessible ?x)
    (accessible ?x)
    (not (hands-free))
    (holding ?x)
)
```
","(:action take-from-table
    :parameters (?x - book)
    :precondition (and (accessible ?x) (on-table ?x) (hands-free))
    :effect (and (not (on-table ?x)) (not (accessible ?x)) (not (hands-free)) (holding ?x))
)","swap (accessible ?x) with (not (on-table ?x))
negate (not (accessible ?x)) in effects
"
libraryworld,take-from-table,0.1767769157886505,Hard Negative (Manipulated Action),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Imagine you're a librarian managing a table full of books. The 'take-from-table' action allows you to pick up a book that is on the table, provided it is accessible and your hands are free. This action simulates the scenario where you find a book on the table, ensure it's not covered by any other book, and then pick it up, thus holding it in your hands.

Action name: take-from-table


Your answer:

**Explanation:** 

Imagine you're a librarian in a library, and there's a table full of books that need to be sorted. You want to pick up one of these books. To do this, certain conditions, called ""preconditions,"" must be met to ensure you can successfully pick up the book.

For the action ""take-from-table,"" let's break down what needs to be true before you can pick up a book:

1. **The book must be accessible:** This means the book isn't covered by other books or objects, so you can easily reach it.
2. **The book must be on the table:** This indicates the book is physically located on the table, not somewhere else like a shelf.
3. **Your hands must be free:** You need to have empty hands to pick up the book, meaning you aren't already holding something else.

Once these preconditions are met, you can proceed with the ""take-from-table"" action. This action results in several changes, called ""effects,"" that update the status of the book and your hands:

1. **The book is no longer on the table:** This indicates you've picked up the book from the table.
2. **The book is no longer accessible:** Since you're holding the book, it's not available for someone else to pick up from the table.
3. **Your hands are no longer free:** Because you're now holding the book, your hands are occupied.
4. **You are holding the book:** This shows that the book is now in your hands.

To summarize, the preconditions ensure you can reach the book, it's on the table, and your hands are free to pick it up. The effects update the situation to reflect that the book is now in your hands and no longer on the table or accessible to others.","Parameters:
1. ?x - book

Preconditions:
```
(and
    (not (on-table ?x))
    (on-table ?x)
    (hands-free)
)
```

Effects:
```
(and
    (accessible ?x)
    (not (accessible ?x))
    (not (hands-free))
    (holding ?x)
)
```
","(:action take-from-table
    :parameters (?x - book)
    :precondition (and (accessible ?x) (on-table ?x) (hands-free))
    :effect (and (not (on-table ?x)) (not (accessible ?x)) (not (hands-free)) (holding ?x))
)","swap (accessible ?x) with (not (on-table ?x))
"
libraryworld,take-from-table,0.11528785526752472,Hard Negative (Manipulated Action),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Imagine you're a librarian managing a table full of books. The 'take-from-table' action allows you to pick up a book that is on the table, provided it is accessible and your hands are free. This action simulates the scenario where you find a book on the table, ensure it's not covered by any other book, and then pick it up, thus holding it in your hands.

Action name: take-from-table


Your answer:

**Explanation:** 

Imagine you're a librarian in a library, and there's a table full of books that need to be sorted. You want to pick up one of these books. To do this, certain conditions, called ""preconditions,"" must be met to ensure you can successfully pick up the book.

For the action ""take-from-table,"" let's break down what needs to be true before you can pick up a book:

1. **The book must be accessible:** This means the book isn't covered by other books or objects, so you can easily reach it.
2. **The book must be on the table:** This indicates the book is physically located on the table, not somewhere else like a shelf.
3. **Your hands must be free:** You need to have empty hands to pick up the book, meaning you aren't already holding something else.

Once these preconditions are met, you can proceed with the ""take-from-table"" action. This action results in several changes, called ""effects,"" that update the status of the book and your hands:

1. **The book is no longer on the table:** This indicates you've picked up the book from the table.
2. **The book is no longer accessible:** Since you're holding the book, it's not available for someone else to pick up from the table.
3. **Your hands are no longer free:** Because you're now holding the book, your hands are occupied.
4. **You are holding the book:** This shows that the book is now in your hands.

To summarize, the preconditions ensure you can reach the book, it's on the table, and your hands are free to pick it up. The effects update the situation to reflect that the book is now in your hands and no longer on the table or accessible to others.","Parameters:
1. ?x - book

Preconditions:
```
(and
    (accessible ?x)
    (hands-free)
)
```

Effects:
```
(and
    (not (on-table ?x))
    (not (accessible ?x))
    (not (hands-free))
    (holding ?x)
)
```
","(:action take-from-table
    :parameters (?x - book)
    :precondition (and (accessible ?x) (on-table ?x) (hands-free))
    :effect (and (not (on-table ?x)) (not (accessible ?x)) (not (hands-free)) (holding ?x))
)","remove (on-table ?x) from preconditions
"
libraryworld,take-from-table,0.23397070169448853,Hard Negative (Manipulated Action),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Imagine you're a librarian managing a table full of books. The 'take-from-table' action allows you to pick up a book that is on the table, provided it is accessible and your hands are free. This action simulates the scenario where you find a book on the table, ensure it's not covered by any other book, and then pick it up, thus holding it in your hands.

Action name: take-from-table


Your answer:

**Explanation:** 

Imagine you're a librarian in a library, and there's a table full of books that need to be sorted. You want to pick up one of these books. To do this, certain conditions, called ""preconditions,"" must be met to ensure you can successfully pick up the book.

For the action ""take-from-table,"" let's break down what needs to be true before you can pick up a book:

1. **The book must be accessible:** This means the book isn't covered by other books or objects, so you can easily reach it.
2. **The book must be on the table:** This indicates the book is physically located on the table, not somewhere else like a shelf.
3. **Your hands must be free:** You need to have empty hands to pick up the book, meaning you aren't already holding something else.

Once these preconditions are met, you can proceed with the ""take-from-table"" action. This action results in several changes, called ""effects,"" that update the status of the book and your hands:

1. **The book is no longer on the table:** This indicates you've picked up the book from the table.
2. **The book is no longer accessible:** Since you're holding the book, it's not available for someone else to pick up from the table.
3. **Your hands are no longer free:** Because you're now holding the book, your hands are occupied.
4. **You are holding the book:** This shows that the book is now in your hands.

To summarize, the preconditions ensure you can reach the book, it's on the table, and your hands are free to pick it up. The effects update the situation to reflect that the book is now in your hands and no longer on the table or accessible to others.","Parameters:
1. ?x - book

Preconditions:
```
(and
    (not (accessible ?x))
    (on-table ?x)
    (hands-free)
)
```

Effects:
```
(and
    (not (on-table ?x))
    (not (accessible ?x))
    (not (hands-free))
    (holding ?x)
)
```
","(:action take-from-table
    :parameters (?x - book)
    :precondition (and (accessible ?x) (on-table ?x) (hands-free))
    :effect (and (not (on-table ?x)) (not (accessible ?x)) (not (hands-free)) (holding ?x))
)","negate (accessible ?x) in preconditions
"
libraryworld,take-from-table,0.11528785526752472,Hard Negative (Manipulated Action),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Imagine you're a librarian managing a table full of books. The 'take-from-table' action allows you to pick up a book that is on the table, provided it is accessible and your hands are free. This action simulates the scenario where you find a book on the table, ensure it's not covered by any other book, and then pick it up, thus holding it in your hands.

Action name: take-from-table


Your answer:

**Explanation:** 

Imagine you're a librarian in a library, and there's a table full of books that need to be sorted. You want to pick up one of these books. To do this, certain conditions, called ""preconditions,"" must be met to ensure you can successfully pick up the book.

For the action ""take-from-table,"" let's break down what needs to be true before you can pick up a book:

1. **The book must be accessible:** This means the book isn't covered by other books or objects, so you can easily reach it.
2. **The book must be on the table:** This indicates the book is physically located on the table, not somewhere else like a shelf.
3. **Your hands must be free:** You need to have empty hands to pick up the book, meaning you aren't already holding something else.

Once these preconditions are met, you can proceed with the ""take-from-table"" action. This action results in several changes, called ""effects,"" that update the status of the book and your hands:

1. **The book is no longer on the table:** This indicates you've picked up the book from the table.
2. **The book is no longer accessible:** Since you're holding the book, it's not available for someone else to pick up from the table.
3. **Your hands are no longer free:** Because you're now holding the book, your hands are occupied.
4. **You are holding the book:** This shows that the book is now in your hands.

To summarize, the preconditions ensure you can reach the book, it's on the table, and your hands are free to pick it up. The effects update the situation to reflect that the book is now in your hands and no longer on the table or accessible to others.","Parameters:
1. ?x - book

Preconditions:
```
(and
    (accessible ?x)
    (hands-free)
)
```

Effects:
```
(and
    (not (on-table ?x))
    (not (accessible ?x))
    (not (hands-free))
    (holding ?x)
)
```
","(:action take-from-table
    :parameters (?x - book)
    :precondition (and (accessible ?x) (on-table ?x) (hands-free))
    :effect (and (not (on-table ?x)) (not (accessible ?x)) (not (hands-free)) (holding ?x))
)","remove (on-table ?x) from preconditions
"
libraryworld,take-from-table,0.15460334718227386,Hard Negative (Manipulated Action),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Imagine you're a librarian managing a table full of books. The 'take-from-table' action allows you to pick up a book that is on the table, provided it is accessible and your hands are free. This action simulates the scenario where you find a book on the table, ensure it's not covered by any other book, and then pick it up, thus holding it in your hands.

Action name: take-from-table


Your answer:

**Explanation:** 

Imagine you're a librarian in a library, and there's a table full of books that need to be sorted. You want to pick up one of these books. To do this, certain conditions, called ""preconditions,"" must be met to ensure you can successfully pick up the book.

For the action ""take-from-table,"" let's break down what needs to be true before you can pick up a book:

1. **The book must be accessible:** This means the book isn't covered by other books or objects, so you can easily reach it.
2. **The book must be on the table:** This indicates the book is physically located on the table, not somewhere else like a shelf.
3. **Your hands must be free:** You need to have empty hands to pick up the book, meaning you aren't already holding something else.

Once these preconditions are met, you can proceed with the ""take-from-table"" action. This action results in several changes, called ""effects,"" that update the status of the book and your hands:

1. **The book is no longer on the table:** This indicates you've picked up the book from the table.
2. **The book is no longer accessible:** Since you're holding the book, it's not available for someone else to pick up from the table.
3. **Your hands are no longer free:** Because you're now holding the book, your hands are occupied.
4. **You are holding the book:** This shows that the book is now in your hands.

To summarize, the preconditions ensure you can reach the book, it's on the table, and your hands are free to pick it up. The effects update the situation to reflect that the book is now in your hands and no longer on the table or accessible to others.","Parameters:
1. ?x - book

Preconditions:
```
(and
    (not (accessible ?x))
    (accessible ?x)
    (hands-free)
)
```

Effects:
```
(and
    (on-table ?x)
    (not (hands-free))
    (holding ?x)
)
```
","(:action take-from-table
    :parameters (?x - book)
    :precondition (and (accessible ?x) (on-table ?x) (hands-free))
    :effect (and (not (on-table ?x)) (not (accessible ?x)) (not (hands-free)) (holding ?x))
)","remove (not (on-table ?x)) from effects
swap (on-table ?x) with (not (accessible ?x))
"
libraryworld,take-from-table,0.21914923191070557,Hard Negative (Manipulated Action),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Imagine you're a librarian managing a table full of books. The 'take-from-table' action allows you to pick up a book that is on the table, provided it is accessible and your hands are free. This action simulates the scenario where you find a book on the table, ensure it's not covered by any other book, and then pick it up, thus holding it in your hands.

Action name: take-from-table


Your answer:

**Explanation:** 

Imagine you're a librarian in a library, and there's a table full of books that need to be sorted. You want to pick up one of these books. To do this, certain conditions, called ""preconditions,"" must be met to ensure you can successfully pick up the book.

For the action ""take-from-table,"" let's break down what needs to be true before you can pick up a book:

1. **The book must be accessible:** This means the book isn't covered by other books or objects, so you can easily reach it.
2. **The book must be on the table:** This indicates the book is physically located on the table, not somewhere else like a shelf.
3. **Your hands must be free:** You need to have empty hands to pick up the book, meaning you aren't already holding something else.

Once these preconditions are met, you can proceed with the ""take-from-table"" action. This action results in several changes, called ""effects,"" that update the status of the book and your hands:

1. **The book is no longer on the table:** This indicates you've picked up the book from the table.
2. **The book is no longer accessible:** Since you're holding the book, it's not available for someone else to pick up from the table.
3. **Your hands are no longer free:** Because you're now holding the book, your hands are occupied.
4. **You are holding the book:** This shows that the book is now in your hands.

To summarize, the preconditions ensure you can reach the book, it's on the table, and your hands are free to pick it up. The effects update the situation to reflect that the book is now in your hands and no longer on the table or accessible to others.","Parameters:
1. ?x - book

Preconditions:
```
(and
    (not (on-table ?x))
    (accessible ?x)
    (hands-free)
)
```

Effects:
```
(and
    (not (on-table ?x))
    (not (accessible ?x))
    (not (hands-free))
    (holding ?x)
)
```
","(:action take-from-table
    :parameters (?x - book)
    :precondition (and (accessible ?x) (on-table ?x) (hands-free))
    :effect (and (not (on-table ?x)) (not (accessible ?x)) (not (hands-free)) (holding ?x))
)","negate (on-table ?x) in preconditions
"
libraryworld,take-from-table,0.5846754312515259,Hard Negative (Manipulated Action),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Imagine you're a librarian managing a table full of books. The 'take-from-table' action allows you to pick up a book that is on the table, provided it is accessible and your hands are free. This action simulates the scenario where you find a book on the table, ensure it's not covered by any other book, and then pick it up, thus holding it in your hands.

Action name: take-from-table


Your answer:
","**Explanation:** 

Imagine you're a librarian in a library, and there's a table full of books that need to be sorted. You want to pick up one of these books. To do this, certain conditions, called ""preconditions,"" must be met to ensure you can successfully pick up the book.

For the action ""take-from-table,"" let's break down what needs to be true before you can pick up a book:

1. **The book must be accessible:** This means the book isn't covered by other books or objects, so you can easily reach it.
2. **The book must be on the table:** This indicates the book is physically located on the table, not somewhere else like a shelf.
3. **Your hands must be free:** You need to have empty hands to pick up the book, meaning you aren't already holding something else.

Once these preconditions are met, you can proceed with the ""take-from-table"" action. This action results in several changes, called ""effects,"" that update the status of the book and your hands:

1. **The book is no longer on the table:** This indicates you've picked up the book from the table.
2. **The book is no longer accessible:** Since you're holding the book, it's not available for someone else to pick up from the table.
3. **Your hands are no longer free:** Because you're now holding the book, your hands are occupied.
4. **You are holding the book:** This shows that the book is now in your hands.

To summarize, the preconditions ensure you can reach the book, it's on the table, and your hands are free to pick it up. The effects update the situation to reflect that the book is now in your hands and no longer on the table or accessible to others.
Parameters:
1. ?x - book

Preconditions:
```
(and
    (holding ?x)
    (not (accessible ?x))
    (hands-free)
)
```

Effects:
```
(and
    (on-table ?x)
    (accessible ?x)
    (not (on-table ?x))
    (not (hands-free))
)
```
","(:action take-from-table
    :parameters (?x - book)
    :precondition (and (accessible ?x) (on-table ?x) (hands-free))
    :effect (and (not (on-table ?x)) (not (accessible ?x)) (not (hands-free)) (holding ?x))
)","swap (on-table ?x) with (holding ?x)
swap (accessible ?x) with (not (accessible ?x))
"
libraryworld,take-from-table,0.5846754312515259,Hard Negative (Manipulated Action),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Imagine you're a librarian managing a table full of books. The 'take-from-table' action allows you to pick up a book that is on the table, provided it is accessible and your hands are free. This action simulates the scenario where you find a book on the table, ensure it's not covered by any other book, and then pick it up, thus holding it in your hands.

Action name: take-from-table


Your answer:
","**Explanation:** 

Imagine you're a librarian in a library, and there's a table full of books that need to be sorted. You want to pick up one of these books. To do this, certain conditions, called ""preconditions,"" must be met to ensure you can successfully pick up the book.

For the action ""take-from-table,"" let's break down what needs to be true before you can pick up a book:

1. **The book must be accessible:** This means the book isn't covered by other books or objects, so you can easily reach it.
2. **The book must be on the table:** This indicates the book is physically located on the table, not somewhere else like a shelf.
3. **Your hands must be free:** You need to have empty hands to pick up the book, meaning you aren't already holding something else.

Once these preconditions are met, you can proceed with the ""take-from-table"" action. This action results in several changes, called ""effects,"" that update the status of the book and your hands:

1. **The book is no longer on the table:** This indicates you've picked up the book from the table.
2. **The book is no longer accessible:** Since you're holding the book, it's not available for someone else to pick up from the table.
3. **Your hands are no longer free:** Because you're now holding the book, your hands are occupied.
4. **You are holding the book:** This shows that the book is now in your hands.

To summarize, the preconditions ensure you can reach the book, it's on the table, and your hands are free to pick it up. The effects update the situation to reflect that the book is now in your hands and no longer on the table or accessible to others.
Parameters:
1. ?x - book

Preconditions:
```
(and
    (not (on-table ?x))
    (hands-free)
)
```

Effects:
```
(and
    (not (on-table ?x))
    (not (accessible ?x))
    (not (hands-free))
    (holding ?x)
)
```
","(:action take-from-table
    :parameters (?x - book)
    :precondition (and (accessible ?x) (on-table ?x) (hands-free))
    :effect (and (not (on-table ?x)) (not (accessible ?x)) (not (hands-free)) (holding ?x))
)","remove (accessible ?x) from preconditions
negate (on-table ?x) in preconditions
"
libraryworld,take-from-table,0.5846754312515259,Hard Negative (Manipulated Action),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Imagine you're a librarian managing a table full of books. The 'take-from-table' action allows you to pick up a book that is on the table, provided it is accessible and your hands are free. This action simulates the scenario where you find a book on the table, ensure it's not covered by any other book, and then pick it up, thus holding it in your hands.

Action name: take-from-table


Your answer:
","**Explanation:** 

Imagine you're a librarian in a library, and there's a table full of books that need to be sorted. You want to pick up one of these books. To do this, certain conditions, called ""preconditions,"" must be met to ensure you can successfully pick up the book.

For the action ""take-from-table,"" let's break down what needs to be true before you can pick up a book:

1. **The book must be accessible:** This means the book isn't covered by other books or objects, so you can easily reach it.
2. **The book must be on the table:** This indicates the book is physically located on the table, not somewhere else like a shelf.
3. **Your hands must be free:** You need to have empty hands to pick up the book, meaning you aren't already holding something else.

Once these preconditions are met, you can proceed with the ""take-from-table"" action. This action results in several changes, called ""effects,"" that update the status of the book and your hands:

1. **The book is no longer on the table:** This indicates you've picked up the book from the table.
2. **The book is no longer accessible:** Since you're holding the book, it's not available for someone else to pick up from the table.
3. **Your hands are no longer free:** Because you're now holding the book, your hands are occupied.
4. **You are holding the book:** This shows that the book is now in your hands.

To summarize, the preconditions ensure you can reach the book, it's on the table, and your hands are free to pick it up. The effects update the situation to reflect that the book is now in your hands and no longer on the table or accessible to others.
Parameters:
1. ?x - book

Preconditions:
```
(and
    (not (hands-free))
    (accessible ?x)
    (on-table ?x)
)
```

Effects:
```
(and
    (not (on-table ?x))
    (not (accessible ?x))
    (not (hands-free))
    (holding ?x)
)
```
","(:action take-from-table
    :parameters (?x - book)
    :precondition (and (accessible ?x) (on-table ?x) (hands-free))
    :effect (and (not (on-table ?x)) (not (accessible ?x)) (not (hands-free)) (holding ?x))
)","negate (hands-free) in preconditions
"
libraryworld,take-from-table,0.5846754312515259,Hard Negative (Manipulated Action),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Imagine you're a librarian managing a table full of books. The 'take-from-table' action allows you to pick up a book that is on the table, provided it is accessible and your hands are free. This action simulates the scenario where you find a book on the table, ensure it's not covered by any other book, and then pick it up, thus holding it in your hands.

Action name: take-from-table


Your answer:
","**Explanation:** 

Imagine you're a librarian in a library, and there's a table full of books that need to be sorted. You want to pick up one of these books. To do this, certain conditions, called ""preconditions,"" must be met to ensure you can successfully pick up the book.

For the action ""take-from-table,"" let's break down what needs to be true before you can pick up a book:

1. **The book must be accessible:** This means the book isn't covered by other books or objects, so you can easily reach it.
2. **The book must be on the table:** This indicates the book is physically located on the table, not somewhere else like a shelf.
3. **Your hands must be free:** You need to have empty hands to pick up the book, meaning you aren't already holding something else.

Once these preconditions are met, you can proceed with the ""take-from-table"" action. This action results in several changes, called ""effects,"" that update the status of the book and your hands:

1. **The book is no longer on the table:** This indicates you've picked up the book from the table.
2. **The book is no longer accessible:** Since you're holding the book, it's not available for someone else to pick up from the table.
3. **Your hands are no longer free:** Because you're now holding the book, your hands are occupied.
4. **You are holding the book:** This shows that the book is now in your hands.

To summarize, the preconditions ensure you can reach the book, it's on the table, and your hands are free to pick it up. The effects update the situation to reflect that the book is now in your hands and no longer on the table or accessible to others.
Parameters:
1. ?x - book

Preconditions:
```
(and
    (on-table ?x)
    (hands-free)
)
```

Effects:
```
(and
    (not (on-table ?x))
    (not (accessible ?x))
    (holding ?x)
)
```
","(:action take-from-table
    :parameters (?x - book)
    :precondition (and (accessible ?x) (on-table ?x) (hands-free))
    :effect (and (not (on-table ?x)) (not (accessible ?x)) (not (hands-free)) (holding ?x))
)","remove (not (hands-free)) from effects
remove (accessible ?x) from preconditions
"
libraryworld,take-from-table,0.5846754312515259,Hard Negative (Manipulated Action),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Imagine you're a librarian managing a table full of books. The 'take-from-table' action allows you to pick up a book that is on the table, provided it is accessible and your hands are free. This action simulates the scenario where you find a book on the table, ensure it's not covered by any other book, and then pick it up, thus holding it in your hands.

Action name: take-from-table


Your answer:
","**Explanation:** 

Imagine you're a librarian in a library, and there's a table full of books that need to be sorted. You want to pick up one of these books. To do this, certain conditions, called ""preconditions,"" must be met to ensure you can successfully pick up the book.

For the action ""take-from-table,"" let's break down what needs to be true before you can pick up a book:

1. **The book must be accessible:** This means the book isn't covered by other books or objects, so you can easily reach it.
2. **The book must be on the table:** This indicates the book is physically located on the table, not somewhere else like a shelf.
3. **Your hands must be free:** You need to have empty hands to pick up the book, meaning you aren't already holding something else.

Once these preconditions are met, you can proceed with the ""take-from-table"" action. This action results in several changes, called ""effects,"" that update the status of the book and your hands:

1. **The book is no longer on the table:** This indicates you've picked up the book from the table.
2. **The book is no longer accessible:** Since you're holding the book, it's not available for someone else to pick up from the table.
3. **Your hands are no longer free:** Because you're now holding the book, your hands are occupied.
4. **You are holding the book:** This shows that the book is now in your hands.

To summarize, the preconditions ensure you can reach the book, it's on the table, and your hands are free to pick it up. The effects update the situation to reflect that the book is now in your hands and no longer on the table or accessible to others.
Parameters:
1. ?x - book

Preconditions:
```
(and
    (accessible ?x)
    (on-table ?x)
    (hands-free)
)
```

Effects:
```
(and
    (not (holding ?x))
    (on-table ?x)
    (not (accessible ?x))
    (not (hands-free))
)
```
","(:action take-from-table
    :parameters (?x - book)
    :precondition (and (accessible ?x) (on-table ?x) (hands-free))
    :effect (and (not (on-table ?x)) (not (accessible ?x)) (not (hands-free)) (holding ?x))
)","negate (holding ?x) in effects
negate (not (on-table ?x)) in effects
"
libraryworld,take-from-table,0.5846754312515259,Hard Negative (Manipulated Action),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Imagine you're a librarian managing a table full of books. The 'take-from-table' action allows you to pick up a book that is on the table, provided it is accessible and your hands are free. This action simulates the scenario where you find a book on the table, ensure it's not covered by any other book, and then pick it up, thus holding it in your hands.

Action name: take-from-table


Your answer:
","**Explanation:** 

Imagine you're a librarian in a library, and there's a table full of books that need to be sorted. You want to pick up one of these books. To do this, certain conditions, called ""preconditions,"" must be met to ensure you can successfully pick up the book.

For the action ""take-from-table,"" let's break down what needs to be true before you can pick up a book:

1. **The book must be accessible:** This means the book isn't covered by other books or objects, so you can easily reach it.
2. **The book must be on the table:** This indicates the book is physically located on the table, not somewhere else like a shelf.
3. **Your hands must be free:** You need to have empty hands to pick up the book, meaning you aren't already holding something else.

Once these preconditions are met, you can proceed with the ""take-from-table"" action. This action results in several changes, called ""effects,"" that update the status of the book and your hands:

1. **The book is no longer on the table:** This indicates you've picked up the book from the table.
2. **The book is no longer accessible:** Since you're holding the book, it's not available for someone else to pick up from the table.
3. **Your hands are no longer free:** Because you're now holding the book, your hands are occupied.
4. **You are holding the book:** This shows that the book is now in your hands.

To summarize, the preconditions ensure you can reach the book, it's on the table, and your hands are free to pick it up. The effects update the situation to reflect that the book is now in your hands and no longer on the table or accessible to others.
Parameters:
1. ?x - book

Preconditions:
```
(and
    (not (accessible ?x))
    (on-table ?x)
    (hands-free)
)
```

Effects:
```
(and
    (not (on-table ?x))
    (not (accessible ?x))
    (not (hands-free))
    (holding ?x)
)
```
","(:action take-from-table
    :parameters (?x - book)
    :precondition (and (accessible ?x) (on-table ?x) (hands-free))
    :effect (and (not (on-table ?x)) (not (accessible ?x)) (not (hands-free)) (holding ?x))
)","negate (accessible ?x) in preconditions
"
libraryworld,take-from-table,0.5846754312515259,Hard Negative (Manipulated Action),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Imagine you're a librarian managing a table full of books. The 'take-from-table' action allows you to pick up a book that is on the table, provided it is accessible and your hands are free. This action simulates the scenario where you find a book on the table, ensure it's not covered by any other book, and then pick it up, thus holding it in your hands.

Action name: take-from-table


Your answer:
","**Explanation:** 

Imagine you're a librarian in a library, and there's a table full of books that need to be sorted. You want to pick up one of these books. To do this, certain conditions, called ""preconditions,"" must be met to ensure you can successfully pick up the book.

For the action ""take-from-table,"" let's break down what needs to be true before you can pick up a book:

1. **The book must be accessible:** This means the book isn't covered by other books or objects, so you can easily reach it.
2. **The book must be on the table:** This indicates the book is physically located on the table, not somewhere else like a shelf.
3. **Your hands must be free:** You need to have empty hands to pick up the book, meaning you aren't already holding something else.

Once these preconditions are met, you can proceed with the ""take-from-table"" action. This action results in several changes, called ""effects,"" that update the status of the book and your hands:

1. **The book is no longer on the table:** This indicates you've picked up the book from the table.
2. **The book is no longer accessible:** Since you're holding the book, it's not available for someone else to pick up from the table.
3. **Your hands are no longer free:** Because you're now holding the book, your hands are occupied.
4. **You are holding the book:** This shows that the book is now in your hands.

To summarize, the preconditions ensure you can reach the book, it's on the table, and your hands are free to pick it up. The effects update the situation to reflect that the book is now in your hands and no longer on the table or accessible to others.
Parameters:
1. ?x - book

Preconditions:
```
(and
    (holding ?x)
    (accessible ?x)
    (hands-free)
)
```

Effects:
```
(and
    (on-table ?x)
    (not (on-table ?x))
    (not (accessible ?x))
    (not (hands-free))
)
```
","(:action take-from-table
    :parameters (?x - book)
    :precondition (and (accessible ?x) (on-table ?x) (hands-free))
    :effect (and (not (on-table ?x)) (not (accessible ?x)) (not (hands-free)) (holding ?x))
)","swap (on-table ?x) with (holding ?x)
"
libraryworld,take-from-table,0.5846754312515259,Hard Negative (Manipulated Action),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Imagine you're a librarian managing a table full of books. The 'take-from-table' action allows you to pick up a book that is on the table, provided it is accessible and your hands are free. This action simulates the scenario where you find a book on the table, ensure it's not covered by any other book, and then pick it up, thus holding it in your hands.

Action name: take-from-table


Your answer:
","**Explanation:** 

Imagine you're a librarian in a library, and there's a table full of books that need to be sorted. You want to pick up one of these books. To do this, certain conditions, called ""preconditions,"" must be met to ensure you can successfully pick up the book.

For the action ""take-from-table,"" let's break down what needs to be true before you can pick up a book:

1. **The book must be accessible:** This means the book isn't covered by other books or objects, so you can easily reach it.
2. **The book must be on the table:** This indicates the book is physically located on the table, not somewhere else like a shelf.
3. **Your hands must be free:** You need to have empty hands to pick up the book, meaning you aren't already holding something else.

Once these preconditions are met, you can proceed with the ""take-from-table"" action. This action results in several changes, called ""effects,"" that update the status of the book and your hands:

1. **The book is no longer on the table:** This indicates you've picked up the book from the table.
2. **The book is no longer accessible:** Since you're holding the book, it's not available for someone else to pick up from the table.
3. **Your hands are no longer free:** Because you're now holding the book, your hands are occupied.
4. **You are holding the book:** This shows that the book is now in your hands.

To summarize, the preconditions ensure you can reach the book, it's on the table, and your hands are free to pick it up. The effects update the situation to reflect that the book is now in your hands and no longer on the table or accessible to others.
Parameters:
1. ?x - book

Preconditions:
```
(and
    (not (hands-free))
    (accessible ?x)
    (on-table ?x)
)
```

Effects:
```
(and
    (not (on-table ?x))
    (not (accessible ?x))
    (not (hands-free))
    (holding ?x)
)
```
","(:action take-from-table
    :parameters (?x - book)
    :precondition (and (accessible ?x) (on-table ?x) (hands-free))
    :effect (and (not (on-table ?x)) (not (accessible ?x)) (not (hands-free)) (holding ?x))
)","negate (hands-free) in preconditions
"
libraryworld,take-from-table,0.5846754312515259,Hard Negative (Manipulated Action),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Imagine you're a librarian managing a table full of books. The 'take-from-table' action allows you to pick up a book that is on the table, provided it is accessible and your hands are free. This action simulates the scenario where you find a book on the table, ensure it's not covered by any other book, and then pick it up, thus holding it in your hands.

Action name: take-from-table


Your answer:
","**Explanation:** 

Imagine you're a librarian in a library, and there's a table full of books that need to be sorted. You want to pick up one of these books. To do this, certain conditions, called ""preconditions,"" must be met to ensure you can successfully pick up the book.

For the action ""take-from-table,"" let's break down what needs to be true before you can pick up a book:

1. **The book must be accessible:** This means the book isn't covered by other books or objects, so you can easily reach it.
2. **The book must be on the table:** This indicates the book is physically located on the table, not somewhere else like a shelf.
3. **Your hands must be free:** You need to have empty hands to pick up the book, meaning you aren't already holding something else.

Once these preconditions are met, you can proceed with the ""take-from-table"" action. This action results in several changes, called ""effects,"" that update the status of the book and your hands:

1. **The book is no longer on the table:** This indicates you've picked up the book from the table.
2. **The book is no longer accessible:** Since you're holding the book, it's not available for someone else to pick up from the table.
3. **Your hands are no longer free:** Because you're now holding the book, your hands are occupied.
4. **You are holding the book:** This shows that the book is now in your hands.

To summarize, the preconditions ensure you can reach the book, it's on the table, and your hands are free to pick it up. The effects update the situation to reflect that the book is now in your hands and no longer on the table or accessible to others.
Parameters:
1. ?x - book

Preconditions:
```
(and
    (holding ?x)
    (accessible ?x)
    (hands-free)
)
```

Effects:
```
(and
    (on-table ?x)
    (not (on-table ?x))
    (not (accessible ?x))
    (not (hands-free))
)
```
","(:action take-from-table
    :parameters (?x - book)
    :precondition (and (accessible ?x) (on-table ?x) (hands-free))
    :effect (and (not (on-table ?x)) (not (accessible ?x)) (not (hands-free)) (holding ?x))
)","swap (on-table ?x) with (holding ?x)
"
libraryworld,take-from-table,0.5846754312515259,Hard Negative (Manipulated Action),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Imagine you're a librarian managing a table full of books. The 'take-from-table' action allows you to pick up a book that is on the table, provided it is accessible and your hands are free. This action simulates the scenario where you find a book on the table, ensure it's not covered by any other book, and then pick it up, thus holding it in your hands.

Action name: take-from-table


Your answer:
","**Explanation:** 

Imagine you're a librarian in a library, and there's a table full of books that need to be sorted. You want to pick up one of these books. To do this, certain conditions, called ""preconditions,"" must be met to ensure you can successfully pick up the book.

For the action ""take-from-table,"" let's break down what needs to be true before you can pick up a book:

1. **The book must be accessible:** This means the book isn't covered by other books or objects, so you can easily reach it.
2. **The book must be on the table:** This indicates the book is physically located on the table, not somewhere else like a shelf.
3. **Your hands must be free:** You need to have empty hands to pick up the book, meaning you aren't already holding something else.

Once these preconditions are met, you can proceed with the ""take-from-table"" action. This action results in several changes, called ""effects,"" that update the status of the book and your hands:

1. **The book is no longer on the table:** This indicates you've picked up the book from the table.
2. **The book is no longer accessible:** Since you're holding the book, it's not available for someone else to pick up from the table.
3. **Your hands are no longer free:** Because you're now holding the book, your hands are occupied.
4. **You are holding the book:** This shows that the book is now in your hands.

To summarize, the preconditions ensure you can reach the book, it's on the table, and your hands are free to pick it up. The effects update the situation to reflect that the book is now in your hands and no longer on the table or accessible to others.
Parameters:
1. ?x - book

Preconditions:
```
(and
    (not (on-table ?x))
    (accessible ?x)
    (hands-free)
)
```

Effects:
```
(and
    (on-table ?x)
    (not (accessible ?x))
    (not (hands-free))
    (holding ?x)
)
```
","(:action take-from-table
    :parameters (?x - book)
    :precondition (and (accessible ?x) (on-table ?x) (hands-free))
    :effect (and (not (on-table ?x)) (not (accessible ?x)) (not (hands-free)) (holding ?x))
)","swap (on-table ?x) with (not (on-table ?x))
"
libraryworld,place-on-shelf,0.8817847967147827,Positive (Correct Match),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Consider a librarian holding a book and standing near a shelf. The 'place-on-shelf' action involves placing the held book on top of another book on the shelf, given that the book on the shelf is accessible. This action results in the held book becoming accessible, the book on the shelf becoming inaccessible, and the librarian's hands becoming free.

Action name: place-on-shelf


Your answer:
","Parameters:
1. ?x - book
2. ?y - book
3. ?cat - category

Preconditions:
```
(and
    (holding ?x)
    (accessible ?y)
    (belongs-to-category ?x ?cat)
    (not (shelf-overflow ?cat))
)
```

Effects:
```
(and
    (not (holding ?x))
    (not (accessible ?y))
    (accessible ?x)
    (hands-free)
    (on-shelf ?x ?y)
    (shelf-empty ?cat)
)
```
","(:action place-on-shelf
    :parameters (?x - book ?y - book ?cat - category)
    :precondition (and (holding ?x) (accessible ?y) (belongs-to-category ?x ?cat) (not (shelf-overflow ?cat)))
    :effect (and (not (holding ?x)) (not (accessible ?y)) (accessible ?x) (hands-free) (on-shelf ?x ?y) (shelf-empty ?cat))
)",
libraryworld,place-on-shelf,0.8817847967147827,Positive (Correct Match),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Consider a librarian holding a book and standing near a shelf. The 'place-on-shelf' action involves placing the held book on top of another book on the shelf, given that the book on the shelf is accessible. This action results in the held book becoming accessible, the book on the shelf becoming inaccessible, and the librarian's hands becoming free.

Action name: place-on-shelf


Your answer:

**Explanation:** 

Imagine you are a librarian standing near a shelf, holding a book in your hands. You want to place this book on top of another book that is already on the shelf. This action, called ""place-on-shelf,"" needs to follow certain rules, called ""preconditions,"" to make sure everything goes smoothly.

For the action ""place-on-shelf,"" let's break down what needs to be true before you can place the book on the shelf:

1. **You must be holding the book:** This means you have the book in your hands, ready to place it on the shelf.
2. **The book on the shelf must be accessible:** The book already on the shelf should not be covered by other books or objects, so you can easily place your book on top of it.
3. **The book you are holding must belong to a certain category:** This helps in organizing the books properly according to their categories.
4. **The shelf should not be overflowing:** There should be enough space on the shelf to place another book.

Once these preconditions are met, you can proceed with the ""place-on-shelf"" action. This action results in several changes, called ""effects,"" that update the status of the books and your hands:

1. **You are no longer holding the book:** This shows that you have placed the book on the shelf.
2. **The book on the shelf is no longer accessible:** Because the new book is now on top of it, making it covered.
3. **The book you placed is now accessible:** This indicates the book you just placed is easy to reach.
4. **Your hands are now free:** Since you have placed the book on the shelf, your hands are empty again.
5. **The new book is on the shelf on top of the other book:** This shows the new book's position.
6. **The shelf is now considered empty for that category:** This helps in tracking the organization and availability of shelf space for that category.

To summarize, the preconditions ensure you are holding the book, the shelf has space, and the book on the shelf is accessible. The effects update the situation to show that you have placed the book on the shelf, the new book is accessible, and your hands are free again.","Parameters:
1. ?x - book
2. ?y - book
3. ?cat - category

Preconditions:
```
(and
    (holding ?x)
    (accessible ?y)
    (belongs-to-category ?x ?cat)
    (not (shelf-overflow ?cat))
)
```

Effects:
```
(and
    (not (holding ?x))
    (not (accessible ?y))
    (accessible ?x)
    (hands-free)
    (on-shelf ?x ?y)
    (shelf-empty ?cat)
)
```
","(:action place-on-shelf
    :parameters (?x - book ?y - book ?cat - category)
    :precondition (and (holding ?x) (accessible ?y) (belongs-to-category ?x ?cat) (not (shelf-overflow ?cat)))
    :effect (and (not (holding ?x)) (not (accessible ?y)) (accessible ?x) (hands-free) (on-shelf ?x ?y) (shelf-empty ?cat))
)",
libraryworld,place-on-shelf,0.7562539577484131,Positive (Correct Match),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Consider a librarian holding a book and standing near a shelf. The 'place-on-shelf' action involves placing the held book on top of another book on the shelf, given that the book on the shelf is accessible. This action results in the held book becoming accessible, the book on the shelf becoming inaccessible, and the librarian's hands becoming free.

Action name: place-on-shelf


Your answer:
","**Explanation:** 

Imagine you are a librarian standing near a shelf, holding a book in your hands. You want to place this book on top of another book that is already on the shelf. This action, called ""place-on-shelf,"" needs to follow certain rules, called ""preconditions,"" to make sure everything goes smoothly.

For the action ""place-on-shelf,"" let's break down what needs to be true before you can place the book on the shelf:

1. **You must be holding the book:** This means you have the book in your hands, ready to place it on the shelf.
2. **The book on the shelf must be accessible:** The book already on the shelf should not be covered by other books or objects, so you can easily place your book on top of it.
3. **The book you are holding must belong to a certain category:** This helps in organizing the books properly according to their categories.
4. **The shelf should not be overflowing:** There should be enough space on the shelf to place another book.

Once these preconditions are met, you can proceed with the ""place-on-shelf"" action. This action results in several changes, called ""effects,"" that update the status of the books and your hands:

1. **You are no longer holding the book:** This shows that you have placed the book on the shelf.
2. **The book on the shelf is no longer accessible:** Because the new book is now on top of it, making it covered.
3. **The book you placed is now accessible:** This indicates the book you just placed is easy to reach.
4. **Your hands are now free:** Since you have placed the book on the shelf, your hands are empty again.
5. **The new book is on the shelf on top of the other book:** This shows the new book's position.
6. **The shelf is now considered empty for that category:** This helps in tracking the organization and availability of shelf space for that category.

To summarize, the preconditions ensure you are holding the book, the shelf has space, and the book on the shelf is accessible. The effects update the situation to show that you have placed the book on the shelf, the new book is accessible, and your hands are free again.
Parameters:
1. ?x - book
2. ?y - book
3. ?cat - category

Preconditions:
```
(and
    (holding ?x)
    (accessible ?y)
    (belongs-to-category ?x ?cat)
    (not (shelf-overflow ?cat))
)
```

Effects:
```
(and
    (not (holding ?x))
    (not (accessible ?y))
    (accessible ?x)
    (hands-free)
    (on-shelf ?x ?y)
    (shelf-empty ?cat)
)
```
","(:action place-on-shelf
    :parameters (?x - book ?y - book ?cat - category)
    :precondition (and (holding ?x) (accessible ?y) (belongs-to-category ?x ?cat) (not (shelf-overflow ?cat)))
    :effect (and (not (holding ?x)) (not (accessible ?y)) (accessible ?x) (hands-free) (on-shelf ?x ?y) (shelf-empty ?cat))
)",
libraryworld,place-on-shelf,-0.03427371382713318,Easy Negative (Inter-Domain Mismatch),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Consider a librarian holding a book and standing near a shelf. The 'place-on-shelf' action involves placing the held book on top of another book on the shelf, given that the book on the shelf is accessible. This action results in the held book becoming accessible, the book on the shelf becoming inaccessible, and the librarian's hands becoming free.

Action name: place-on-shelf


Your answer:
","Parameters:
1. ?var0 - moveable
2. ?var1 - agent

Preconditions:
```
(equipped ?var0 ?var1)
```

Effects:
```
(and
    (inventory ?var0)
    (not (equipped ?var0 ?var1))
    (handsfree ?var1)
)
```
","(:action place-on-shelf
    :parameters (?x - book ?y - book ?cat - category)
    :precondition (and (holding ?x) (accessible ?y) (belongs-to-category ?x ?cat) (not (shelf-overflow ?cat)))
    :effect (and (not (holding ?x)) (not (accessible ?y)) (accessible ?x) (hands-free) (on-shelf ?x ?y) (shelf-empty ?cat))
)",
libraryworld,place-on-shelf,0.1422760933637619,Easy Negative (Inter-Domain Mismatch),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Consider a librarian holding a book and standing near a shelf. The 'place-on-shelf' action involves placing the held book on top of another book on the shelf, given that the book on the shelf is accessible. This action results in the held book becoming accessible, the book on the shelf becoming inaccessible, and the librarian's hands becoming free.

Action name: place-on-shelf


Your answer:
","Parameters:
1. ?var0 - moveable
2. ?var1 - agent
3. ?var2 - moveable

Preconditions:
```
(and
    (hypothetical ?var0)
    (is_log ?var2)
    (equipped ?var2 ?var1)
)
```

Effects:
```
(and
    (inventory ?var0)
    (is_planks ?var0)
    (handsfree ?var1)
    (not (equipped ?var2 ?var1))
    (not (hypothetical ?var0))
    (not (is_log ?var2))
)
```
","(:action place-on-shelf
    :parameters (?x - book ?y - book ?cat - category)
    :precondition (and (holding ?x) (accessible ?y) (belongs-to-category ?x ?cat) (not (shelf-overflow ?cat)))
    :effect (and (not (holding ?x)) (not (accessible ?y)) (accessible ?x) (hands-free) (on-shelf ?x ?y) (shelf-empty ?cat))
)",
libraryworld,place-on-shelf,-0.11630810052156448,Easy Negative (Inter-Domain Mismatch),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Consider a librarian holding a book and standing near a shelf. The 'place-on-shelf' action involves placing the held book on top of another book on the shelf, given that the book on the shelf is accessible. This action results in the held book becoming accessible, the book on the shelf becoming inaccessible, and the librarian's hands becoming free.

Action name: place-on-shelf


Your answer:
","Parameters:
1. ?var0 - static
2. ?var1 - static

Preconditions:
```
(agent_at ?var1)
```

Effects:
```
(and
    (agent_at ?var0)
    (not (agent_at ?var1))
)
```
","(:action place-on-shelf
    :parameters (?x - book ?y - book ?cat - category)
    :precondition (and (holding ?x) (accessible ?y) (belongs-to-category ?x ?cat) (not (shelf-overflow ?cat)))
    :effect (and (not (holding ?x)) (not (accessible ?y)) (accessible ?x) (hands-free) (on-shelf ?x ?y) (shelf-empty ?cat))
)",
libraryworld,place-on-shelf,0.09808149188756943,Easy Negative (Inter-Domain Mismatch),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Consider a librarian holding a book and standing near a shelf. The 'place-on-shelf' action involves placing the held book on top of another book on the shelf, given that the book on the shelf is accessible. This action results in the held book becoming accessible, the book on the shelf becoming inaccessible, and the librarian's hands becoming free.

Action name: place-on-shelf


Your answer:
","Parameters:
1. ?var0 - moveable
2. ?var1 - agent

Preconditions:
```
(and
    (inventory ?var0)
    (handsfree ?var1)
)
```

Effects:
```
(and
    (equipped ?var0 ?var1)
    (not (handsfree ?var1))
    (not (inventory ?var0))
)
```
","(:action place-on-shelf
    :parameters (?x - book ?y - book ?cat - category)
    :precondition (and (holding ?x) (accessible ?y) (belongs-to-category ?x ?cat) (not (shelf-overflow ?cat)))
    :effect (and (not (holding ?x)) (not (accessible ?y)) (accessible ?x) (hands-free) (on-shelf ?x ?y) (shelf-empty ?cat))
)",
libraryworld,place-on-shelf,0.01631728932261467,Easy Negative (Inter-Domain Mismatch),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Consider a librarian holding a book and standing near a shelf. The 'place-on-shelf' action involves placing the held book on top of another book on the shelf, given that the book on the shelf is accessible. This action results in the held book becoming accessible, the book on the shelf becoming inaccessible, and the librarian's hands becoming free.

Action name: place-on-shelf


Your answer:
","Parameters:
1. ?var0 - moveable
2. ?var1 - static

Preconditions:
```
(and
    (at ?var0 ?var1)
    (agent_at ?var1)
)
```

Effects:
```
(and
    (inventory ?var0)
    (not (at ?var0 ?var1))
)
```
","(:action place-on-shelf
    :parameters (?x - book ?y - book ?cat - category)
    :precondition (and (holding ?x) (accessible ?y) (belongs-to-category ?x ?cat) (not (shelf-overflow ?cat)))
    :effect (and (not (holding ?x)) (not (accessible ?y)) (accessible ?x) (hands-free) (on-shelf ?x ?y) (shelf-empty ?cat))
)",
libraryworld,place-on-shelf,0.0675392746925354,Easy Negative (Inter-Domain Mismatch),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Consider a librarian holding a book and standing near a shelf. The 'place-on-shelf' action involves placing the held book on top of another book on the shelf, given that the book on the shelf is accessible. This action results in the held book becoming accessible, the book on the shelf becoming inaccessible, and the librarian's hands becoming free.

Action name: place-on-shelf


Your answer:

**Explanation:** 

Imagine you are a librarian standing near a shelf, holding a book in your hands. You want to place this book on top of another book that is already on the shelf. This action, called ""place-on-shelf,"" needs to follow certain rules, called ""preconditions,"" to make sure everything goes smoothly.

For the action ""place-on-shelf,"" let's break down what needs to be true before you can place the book on the shelf:

1. **You must be holding the book:** This means you have the book in your hands, ready to place it on the shelf.
2. **The book on the shelf must be accessible:** The book already on the shelf should not be covered by other books or objects, so you can easily place your book on top of it.
3. **The book you are holding must belong to a certain category:** This helps in organizing the books properly according to their categories.
4. **The shelf should not be overflowing:** There should be enough space on the shelf to place another book.

Once these preconditions are met, you can proceed with the ""place-on-shelf"" action. This action results in several changes, called ""effects,"" that update the status of the books and your hands:

1. **You are no longer holding the book:** This shows that you have placed the book on the shelf.
2. **The book on the shelf is no longer accessible:** Because the new book is now on top of it, making it covered.
3. **The book you placed is now accessible:** This indicates the book you just placed is easy to reach.
4. **Your hands are now free:** Since you have placed the book on the shelf, your hands are empty again.
5. **The new book is on the shelf on top of the other book:** This shows the new book's position.
6. **The shelf is now considered empty for that category:** This helps in tracking the organization and availability of shelf space for that category.

To summarize, the preconditions ensure you are holding the book, the shelf has space, and the book on the shelf is accessible. The effects update the situation to show that you have placed the book on the shelf, the new book is accessible, and your hands are free again.","Parameters:
1. ?from - cells
2. ?to - cells

Preconditions:
```
(and
    (connected ?from ?to)
    (at-hero ?from)
    (not (is-destroyed ?to))
    (not (has-trap ?from))
    (has-trap ?to)
    (arm-free)
)
```

Effects:
```
(and
    (at-hero ?to)
    (is-destroyed ?from)
    (not (at-hero ?from))
)
```
","(:action place-on-shelf
    :parameters (?x - book ?y - book ?cat - category)
    :precondition (and (holding ?x) (accessible ?y) (belongs-to-category ?x ?cat) (not (shelf-overflow ?cat)))
    :effect (and (not (holding ?x)) (not (accessible ?y)) (accessible ?x) (hands-free) (on-shelf ?x ?y) (shelf-empty ?cat))
)",
libraryworld,place-on-shelf,0.0897703617811203,Easy Negative (Inter-Domain Mismatch),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Consider a librarian holding a book and standing near a shelf. The 'place-on-shelf' action involves placing the held book on top of another book on the shelf, given that the book on the shelf is accessible. This action results in the held book becoming accessible, the book on the shelf becoming inaccessible, and the librarian's hands becoming free.

Action name: place-on-shelf


Your answer:

**Explanation:** 

Imagine you are a librarian standing near a shelf, holding a book in your hands. You want to place this book on top of another book that is already on the shelf. This action, called ""place-on-shelf,"" needs to follow certain rules, called ""preconditions,"" to make sure everything goes smoothly.

For the action ""place-on-shelf,"" let's break down what needs to be true before you can place the book on the shelf:

1. **You must be holding the book:** This means you have the book in your hands, ready to place it on the shelf.
2. **The book on the shelf must be accessible:** The book already on the shelf should not be covered by other books or objects, so you can easily place your book on top of it.
3. **The book you are holding must belong to a certain category:** This helps in organizing the books properly according to their categories.
4. **The shelf should not be overflowing:** There should be enough space on the shelf to place another book.

Once these preconditions are met, you can proceed with the ""place-on-shelf"" action. This action results in several changes, called ""effects,"" that update the status of the books and your hands:

1. **You are no longer holding the book:** This shows that you have placed the book on the shelf.
2. **The book on the shelf is no longer accessible:** Because the new book is now on top of it, making it covered.
3. **The book you placed is now accessible:** This indicates the book you just placed is easy to reach.
4. **Your hands are now free:** Since you have placed the book on the shelf, your hands are empty again.
5. **The new book is on the shelf on top of the other book:** This shows the new book's position.
6. **The shelf is now considered empty for that category:** This helps in tracking the organization and availability of shelf space for that category.

To summarize, the preconditions ensure you are holding the book, the shelf has space, and the book on the shelf is accessible. The effects update the situation to show that you have placed the book on the shelf, the new book is accessible, and your hands are free again.","Parameters:
1. ?from - cells
2. ?to - cells

Preconditions:
```
(and
    (connected ?from ?to)
    (at-hero ?from)
    (not (has-trap ?from))
    (not (is-destroyed ?to))
    (not (has-trap ?to))
    (not (has-monster ?to))
)
```

Effects:
```
(and
    (at-hero ?to)
    (is-destroyed ?from)
    (not (at-hero ?from))
)
```
","(:action place-on-shelf
    :parameters (?x - book ?y - book ?cat - category)
    :precondition (and (holding ?x) (accessible ?y) (belongs-to-category ?x ?cat) (not (shelf-overflow ?cat)))
    :effect (and (not (holding ?x)) (not (accessible ?y)) (accessible ?x) (hands-free) (on-shelf ?x ?y) (shelf-empty ?cat))
)",
libraryworld,place-on-shelf,0.10826129466295242,Easy Negative (Inter-Domain Mismatch),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Consider a librarian holding a book and standing near a shelf. The 'place-on-shelf' action involves placing the held book on top of another book on the shelf, given that the book on the shelf is accessible. This action results in the held book becoming accessible, the book on the shelf becoming inaccessible, and the librarian's hands becoming free.

Action name: place-on-shelf


Your answer:

**Explanation:** 

Imagine you are a librarian standing near a shelf, holding a book in your hands. You want to place this book on top of another book that is already on the shelf. This action, called ""place-on-shelf,"" needs to follow certain rules, called ""preconditions,"" to make sure everything goes smoothly.

For the action ""place-on-shelf,"" let's break down what needs to be true before you can place the book on the shelf:

1. **You must be holding the book:** This means you have the book in your hands, ready to place it on the shelf.
2. **The book on the shelf must be accessible:** The book already on the shelf should not be covered by other books or objects, so you can easily place your book on top of it.
3. **The book you are holding must belong to a certain category:** This helps in organizing the books properly according to their categories.
4. **The shelf should not be overflowing:** There should be enough space on the shelf to place another book.

Once these preconditions are met, you can proceed with the ""place-on-shelf"" action. This action results in several changes, called ""effects,"" that update the status of the books and your hands:

1. **You are no longer holding the book:** This shows that you have placed the book on the shelf.
2. **The book on the shelf is no longer accessible:** Because the new book is now on top of it, making it covered.
3. **The book you placed is now accessible:** This indicates the book you just placed is easy to reach.
4. **Your hands are now free:** Since you have placed the book on the shelf, your hands are empty again.
5. **The new book is on the shelf on top of the other book:** This shows the new book's position.
6. **The shelf is now considered empty for that category:** This helps in tracking the organization and availability of shelf space for that category.

To summarize, the preconditions ensure you are holding the book, the shelf has space, and the book on the shelf is accessible. The effects update the situation to show that you have placed the book on the shelf, the new book is accessible, and your hands are free again.","Parameters:
1. ?loc - cells
2. ?s - swords

Preconditions:
```
(and
    (at-hero ?loc)
    (at-sword ?s ?loc)
    (arm-free)
)
```

Effects:
```
(and
    (holding ?s)
    (not (at-sword ?s ?loc))
    (not (arm-free))
)
```
","(:action place-on-shelf
    :parameters (?x - book ?y - book ?cat - category)
    :precondition (and (holding ?x) (accessible ?y) (belongs-to-category ?x ?cat) (not (shelf-overflow ?cat)))
    :effect (and (not (holding ?x)) (not (accessible ?y)) (accessible ?x) (hands-free) (on-shelf ?x ?y) (shelf-empty ?cat))
)",
libraryworld,place-on-shelf,0.13337838649749756,Easy Negative (Inter-Domain Mismatch),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Consider a librarian holding a book and standing near a shelf. The 'place-on-shelf' action involves placing the held book on top of another book on the shelf, given that the book on the shelf is accessible. This action results in the held book becoming accessible, the book on the shelf becoming inaccessible, and the librarian's hands becoming free.

Action name: place-on-shelf


Your answer:

**Explanation:** 

Imagine you are a librarian standing near a shelf, holding a book in your hands. You want to place this book on top of another book that is already on the shelf. This action, called ""place-on-shelf,"" needs to follow certain rules, called ""preconditions,"" to make sure everything goes smoothly.

For the action ""place-on-shelf,"" let's break down what needs to be true before you can place the book on the shelf:

1. **You must be holding the book:** This means you have the book in your hands, ready to place it on the shelf.
2. **The book on the shelf must be accessible:** The book already on the shelf should not be covered by other books or objects, so you can easily place your book on top of it.
3. **The book you are holding must belong to a certain category:** This helps in organizing the books properly according to their categories.
4. **The shelf should not be overflowing:** There should be enough space on the shelf to place another book.

Once these preconditions are met, you can proceed with the ""place-on-shelf"" action. This action results in several changes, called ""effects,"" that update the status of the books and your hands:

1. **You are no longer holding the book:** This shows that you have placed the book on the shelf.
2. **The book on the shelf is no longer accessible:** Because the new book is now on top of it, making it covered.
3. **The book you placed is now accessible:** This indicates the book you just placed is easy to reach.
4. **Your hands are now free:** Since you have placed the book on the shelf, your hands are empty again.
5. **The new book is on the shelf on top of the other book:** This shows the new book's position.
6. **The shelf is now considered empty for that category:** This helps in tracking the organization and availability of shelf space for that category.

To summarize, the preconditions ensure you are holding the book, the shelf has space, and the book on the shelf is accessible. The effects update the situation to show that you have placed the book on the shelf, the new book is accessible, and your hands are free again.","Parameters:
1. ?loc - cells

Preconditions:
```
(and
    (at-hero ?loc)
    (arm-free)
    (has-trap ?loc)
)
```

Effects:
```
(and
    (trap-disarmed ?loc)
    (not (has-trap ?loc))
)
```
","(:action place-on-shelf
    :parameters (?x - book ?y - book ?cat - category)
    :precondition (and (holding ?x) (accessible ?y) (belongs-to-category ?x ?cat) (not (shelf-overflow ?cat)))
    :effect (and (not (holding ?x)) (not (accessible ?y)) (accessible ?x) (hands-free) (on-shelf ?x ?y) (shelf-empty ?cat))
)",
libraryworld,place-on-shelf,0.18069863319396973,Easy Negative (Inter-Domain Mismatch),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Consider a librarian holding a book and standing near a shelf. The 'place-on-shelf' action involves placing the held book on top of another book on the shelf, given that the book on the shelf is accessible. This action results in the held book becoming accessible, the book on the shelf becoming inaccessible, and the librarian's hands becoming free.

Action name: place-on-shelf


Your answer:

**Explanation:** 

Imagine you are a librarian standing near a shelf, holding a book in your hands. You want to place this book on top of another book that is already on the shelf. This action, called ""place-on-shelf,"" needs to follow certain rules, called ""preconditions,"" to make sure everything goes smoothly.

For the action ""place-on-shelf,"" let's break down what needs to be true before you can place the book on the shelf:

1. **You must be holding the book:** This means you have the book in your hands, ready to place it on the shelf.
2. **The book on the shelf must be accessible:** The book already on the shelf should not be covered by other books or objects, so you can easily place your book on top of it.
3. **The book you are holding must belong to a certain category:** This helps in organizing the books properly according to their categories.
4. **The shelf should not be overflowing:** There should be enough space on the shelf to place another book.

Once these preconditions are met, you can proceed with the ""place-on-shelf"" action. This action results in several changes, called ""effects,"" that update the status of the books and your hands:

1. **You are no longer holding the book:** This shows that you have placed the book on the shelf.
2. **The book on the shelf is no longer accessible:** Because the new book is now on top of it, making it covered.
3. **The book you placed is now accessible:** This indicates the book you just placed is easy to reach.
4. **Your hands are now free:** Since you have placed the book on the shelf, your hands are empty again.
5. **The new book is on the shelf on top of the other book:** This shows the new book's position.
6. **The shelf is now considered empty for that category:** This helps in tracking the organization and availability of shelf space for that category.

To summarize, the preconditions ensure you are holding the book, the shelf has space, and the book on the shelf is accessible. The effects update the situation to show that you have placed the book on the shelf, the new book is accessible, and your hands are free again.","Parameters:
1. ?from - cells
2. ?to - cells
3. ?s - swords

Preconditions:
```
(and
    (connected ?from ?to)
    (at-hero ?from)
    (has-monster ?to)
    (not (is-destroyed ?to))
    (not (has-trap ?from))
    (holding ?s)
)
```

Effects:
```
(and
    (at-hero ?to)
    (is-destroyed ?from)
    (not (at-hero ?from))
)
```
","(:action place-on-shelf
    :parameters (?x - book ?y - book ?cat - category)
    :precondition (and (holding ?x) (accessible ?y) (belongs-to-category ?x ?cat) (not (shelf-overflow ?cat)))
    :effect (and (not (holding ?x)) (not (accessible ?y)) (accessible ?x) (hands-free) (on-shelf ?x ?y) (shelf-empty ?cat))
)",
libraryworld,place-on-shelf,0.09276842325925827,Easy Negative (Inter-Domain Mismatch),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Consider a librarian holding a book and standing near a shelf. The 'place-on-shelf' action involves placing the held book on top of another book on the shelf, given that the book on the shelf is accessible. This action results in the held book becoming accessible, the book on the shelf becoming inaccessible, and the librarian's hands becoming free.

Action name: place-on-shelf


Your answer:

**Explanation:** 

Imagine you are a librarian standing near a shelf, holding a book in your hands. You want to place this book on top of another book that is already on the shelf. This action, called ""place-on-shelf,"" needs to follow certain rules, called ""preconditions,"" to make sure everything goes smoothly.

For the action ""place-on-shelf,"" let's break down what needs to be true before you can place the book on the shelf:

1. **You must be holding the book:** This means you have the book in your hands, ready to place it on the shelf.
2. **The book on the shelf must be accessible:** The book already on the shelf should not be covered by other books or objects, so you can easily place your book on top of it.
3. **The book you are holding must belong to a certain category:** This helps in organizing the books properly according to their categories.
4. **The shelf should not be overflowing:** There should be enough space on the shelf to place another book.

Once these preconditions are met, you can proceed with the ""place-on-shelf"" action. This action results in several changes, called ""effects,"" that update the status of the books and your hands:

1. **You are no longer holding the book:** This shows that you have placed the book on the shelf.
2. **The book on the shelf is no longer accessible:** Because the new book is now on top of it, making it covered.
3. **The book you placed is now accessible:** This indicates the book you just placed is easy to reach.
4. **Your hands are now free:** Since you have placed the book on the shelf, your hands are empty again.
5. **The new book is on the shelf on top of the other book:** This shows the new book's position.
6. **The shelf is now considered empty for that category:** This helps in tracking the organization and availability of shelf space for that category.

To summarize, the preconditions ensure you are holding the book, the shelf has space, and the book on the shelf is accessible. The effects update the situation to show that you have placed the book on the shelf, the new book is accessible, and your hands are free again.","Parameters:
1. ?loc - cells
2. ?s - swords

Preconditions:
```
(and
    (at-hero ?loc)
    (holding ?s)
    (not (has-trap ?loc))
    (not (has-monster ?loc))
)
```

Effects:
```
(and
    (arm-free)
    (is-destroyed ?s)
    (not (holding ?s))
)
```
","(:action place-on-shelf
    :parameters (?x - book ?y - book ?cat - category)
    :precondition (and (holding ?x) (accessible ?y) (belongs-to-category ?x ?cat) (not (shelf-overflow ?cat)))
    :effect (and (not (holding ?x)) (not (accessible ?y)) (accessible ?x) (hands-free) (on-shelf ?x ?y) (shelf-empty ?cat))
)",
libraryworld,place-on-shelf,0.18004997074604034,Easy Negative (Inter-Domain Mismatch),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Consider a librarian holding a book and standing near a shelf. The 'place-on-shelf' action involves placing the held book on top of another book on the shelf, given that the book on the shelf is accessible. This action results in the held book becoming accessible, the book on the shelf becoming inaccessible, and the librarian's hands becoming free.

Action name: place-on-shelf


Your answer:
","**Explanation:** Let's imagine you're playing a game similar to Minecraft. In this game, you have an action called ""recall,"" which lets you move an item you are holding directly into your backpack, making your hands empty again. To understand how this action works in the game's programming language (PDDL), let's break down the requirements and results of this action step-by-step.

1. **Precondition (What needs to be true before the action?):** 
   The precondition for the ""recall"" action is `(equipped ?var0 ?var1)`. This simply means that the item (`?var0`) must be currently held (equipped) by the player (`?var1`). Think of it as checking if you really have the axe in your hand before you can put it away.

2. **Effect (What happens after the action is done?):** 
   The effects of this action are several:
   - `(inventory ?var0)`: The item you were holding is now in your inventory. This is like saying, ""Okay, the axe is now in my backpack.""
   - `(not (equipped ?var0 ?var1))`: You are no longer holding the item. This ensures that the game knows the axe is no longer in your hand.
   - `(handsfree ?var1)`: Your hands are now empty. This part is like confirming that your hands are free, ready to grab or use something else.

By setting these preconditions and effects, the game ensures that the action of recalling an item (like teleporting your axe to your backpack) is logical and consistent with the game's rules. You need to be holding the item first to store it away, and after storing it, your hands should indeed be empty, ready for the next task. This keeps the game from getting confused, like trying to put away an axe you aren’t holding or ending up with an axe still in your hand after you've tried to store it.

In summary, the ""recall"" action in the game ensures everything happens in an orderly and expected manner, making your gameplay experience smooth and realistic within the game's world.
Parameters:
1. ?var0 - moveable
2. ?var1 - agent

Preconditions:
```
(equipped ?var0 ?var1)
```

Effects:
```
(and
    (inventory ?var0)
    (not (equipped ?var0 ?var1))
    (handsfree ?var1)
)
```
","(:action place-on-shelf
    :parameters (?x - book ?y - book ?cat - category)
    :precondition (and (holding ?x) (accessible ?y) (belongs-to-category ?x ?cat) (not (shelf-overflow ?cat)))
    :effect (and (not (holding ?x)) (not (accessible ?y)) (accessible ?x) (hands-free) (on-shelf ?x ?y) (shelf-empty ?cat))
)",
libraryworld,place-on-shelf,0.10055991262197495,Easy Negative (Inter-Domain Mismatch),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Consider a librarian holding a book and standing near a shelf. The 'place-on-shelf' action involves placing the held book on top of another book on the shelf, given that the book on the shelf is accessible. This action results in the held book becoming accessible, the book on the shelf becoming inaccessible, and the librarian's hands becoming free.

Action name: place-on-shelf


Your answer:
","**Explanation:**
Let's imagine that in the world of Minecraft, the agent (like a player) wants to craft planks from a log. Think of it like a cook needing specific ingredients and tools to make a meal.

In our PDDL model, the action named ""craft_plank"" follows a similar thought process. Here's how the description of the world leads to the rules in our model:

1. **Preconditions**: Before crafting, certain conditions must be met:
   - The agent must have a log that they are actually holding. This is represented by `(equipped ?var2 ?var1)` meaning the log (`?var2`) is equipped by the agent (`?var1`).
   - The log must be a real log, confirmed by `(is_log ?var2)`.
   - We also see `(hypothetical ?var0)`. Here, the planks that will be created are initially just an idea (hypothetical) before they become real.

2. **Effects**: After the action is performed, we expect changes:
   - The hypothetical planks become real, shown by `(inventory ?var0)` which means the planks (`?var0`) are now in the agent's inventory.
   - They are identified as planks with `(is_planks ?var0)`.
   - The agent's hands become free `(handsfree ?var1)` because the log they were holding is now transformed into planks.
   - The log is no longer equipped or identified as a log, shown by `(not (equipped ?var2 ?var1))` and `(not (is_log ?var2))`. This indicates the log has been used up.

This schema carefully makes sure that the agent can only craft planks if they have a log to start with, and it accounts for what happens to the log and the newly created planks. It's much like ensuring you have flour before you bake a cake, and then, once the cake is baked, you no longer have just flour but a delicious cake instead!
Parameters:
1. ?var0 - moveable
2. ?var1 - agent
3. ?var2 - moveable

Preconditions:
```
(and
    (hypothetical ?var0)
    (is_log ?var2)
    (equipped ?var2 ?var1)
)
```

Effects:
```
(and
    (inventory ?var0)
    (is_planks ?var0)
    (handsfree ?var1)
    (not (equipped ?var2 ?var1))
    (not (hypothetical ?var0))
    (not (is_log ?var2))
)
```
","(:action place-on-shelf
    :parameters (?x - book ?y - book ?cat - category)
    :precondition (and (holding ?x) (accessible ?y) (belongs-to-category ?x ?cat) (not (shelf-overflow ?cat)))
    :effect (and (not (holding ?x)) (not (accessible ?y)) (accessible ?x) (hands-free) (on-shelf ?x ?y) (shelf-empty ?cat))
)",
libraryworld,place-on-shelf,0.11574045568704605,Easy Negative (Inter-Domain Mismatch),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Consider a librarian holding a book and standing near a shelf. The 'place-on-shelf' action involves placing the held book on top of another book on the shelf, given that the book on the shelf is accessible. This action results in the held book becoming accessible, the book on the shelf becoming inaccessible, and the librarian's hands becoming free.

Action name: place-on-shelf


Your answer:
","**Explanation:**
Let's think about the action called ""move"" in a Minecraft-like game, where the goal is to get an agent (like a player) from one place to another. The PDDL action schema you're asking about is designed to handle this simple yet crucial task.

In the action schema, we have two parameters: `?var0` and `?var1`, which are both locations. You can think of `?var0` as the new location where the agent wants to go, and `?var1` as the current location where the agent is starting from.

**Preconditions:** The precondition for the ""move"" action is `(agent_at ?var1)`. This just means that before the agent can move, it must be verified that the agent is actually at the starting location (`?var1`). It’s similar to checking if you are really at home before you walk to the park.

**Effects:** After the agent moves, we need to update the agent's location in the game. This is what the effects in the action schema do:
- `(agent_at ?var0)` says that the agent is now at the new location (`?var0`), like saying, ""Now, I’m at the park.""
- `(not (agent_at ?var1))` means that the agent is no longer at the starting location (`?var1`), similar to saying, ""I'm no longer at home.""

This change in the agent's location is crucial for the game to keep track of where the agent is at any moment, which affects what the agent can interact with or what actions they can perform next. The effect ensures the game world is accurately updated following the agent's movement, and no confusion arises about where the agent is located. 

So, in simple terms, the action ""move"" in this game ensures that when the agent moves from one spot to another, the game correctly recognizes this change and updates the world accordingly.
Parameters:
1. ?var0 - static
2. ?var1 - static

Preconditions:
```
(agent_at ?var1)
```

Effects:
```
(and
    (agent_at ?var0)
    (not (agent_at ?var1))
)
```
","(:action place-on-shelf
    :parameters (?x - book ?y - book ?cat - category)
    :precondition (and (holding ?x) (accessible ?y) (belongs-to-category ?x ?cat) (not (shelf-overflow ?cat)))
    :effect (and (not (holding ?x)) (not (accessible ?y)) (accessible ?x) (hands-free) (on-shelf ?x ?y) (shelf-empty ?cat))
)",
libraryworld,place-on-shelf,0.04751778021454811,Easy Negative (Inter-Domain Mismatch),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Consider a librarian holding a book and standing near a shelf. The 'place-on-shelf' action involves placing the held book on top of another book on the shelf, given that the book on the shelf is accessible. This action results in the held book becoming accessible, the book on the shelf becoming inaccessible, and the librarian's hands becoming free.

Action name: place-on-shelf


Your answer:
","**Explanation:**
Let's think of the action called ""equip"" like someone getting ready to use something from their backpack. Imagine you're planning to paint a picture. First, you need to make sure you have a paintbrush in your backpack (this is similar to the ""inventory"" in our scenario). You also need to make sure your hand is free to hold the paintbrush (like the ""handsfree"" condition).

In the ""equip"" action in this Minecraft-like environment, two main things need to happen before the action can take place:
1. **The item is in the inventory** - This is just like making sure the paintbrush is in your backpack. The precondition `(inventory ?var0)` confirms that the item you want to use is actually with you, stored safely in your inventory.
2. **The agent's hands are free** - This means you aren't holding anything else. The precondition `(handsfree ?var1)` checks that your hands (or the agent's hands, in this case) are empty and ready to hold something new.

When you decide to ""equip"" or start using the item, several things change:
- **The item is now equipped** - This means the item is in your hand and ready to use, similar to how you would hold a paintbrush when you're ready to paint. This is shown by the effect `(equipped ?var0 ?var1)`.
- **Your hand is no longer free** - Just like when you pick up the paintbrush, your hand isn't empty anymore. This is why the effect includes `(not (handsfree ?var1))`.
- **The item is no longer just in the inventory** - Since you're now holding the item, it's not just sitting in your backpack. This change is represented by `(not (inventory ?var0))`.

These changes ensure that the action of equipping something is logical and makes sense in the environment, just like how you'd logically take a paintbrush out of your backpack to use it.
Parameters:
1. ?var0 - moveable
2. ?var1 - agent

Preconditions:
```
(and
    (inventory ?var0)
    (handsfree ?var1)
)
```

Effects:
```
(and
    (equipped ?var0 ?var1)
    (not (handsfree ?var1))
    (not (inventory ?var0))
)
```
","(:action place-on-shelf
    :parameters (?x - book ?y - book ?cat - category)
    :precondition (and (holding ?x) (accessible ?y) (belongs-to-category ?x ?cat) (not (shelf-overflow ?cat)))
    :effect (and (not (holding ?x)) (not (accessible ?y)) (accessible ?x) (hands-free) (on-shelf ?x ?y) (shelf-empty ?cat))
)",
libraryworld,place-on-shelf,0.09768539667129517,Easy Negative (Inter-Domain Mismatch),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Consider a librarian holding a book and standing near a shelf. The 'place-on-shelf' action involves placing the held book on top of another book on the shelf, given that the book on the shelf is accessible. This action results in the held book becoming accessible, the book on the shelf becoming inaccessible, and the librarian's hands becoming free.

Action name: place-on-shelf


Your answer:
","**Explanation:**

Let's imagine you're in a simplified game environment similar to Minecraft, where your goal is to gather resources like fruits or tools. In this game, to collect an item, you'd first need to be at the same location as the item. This ensures you can actually reach it to pick it up.

So, in the PDDL (which is a planning language used to describe tasks and environments in a structured way), the `pick` action is defined to help you collect these items. Here's why the action is set up this way:

1. **Preconditions (the must-haves before acting)**:
   - `(at ?var0 ?var1)`: This means the item (`?var0`) must be at your current location (`?var1`). Think of it as seeing a piece of fruit right at your feet. You need to be where the fruit is to pick it up.
   - `(agent_at ?var1)`: This specifies that you (the agent) must also be at that specific location (`?var1`). Just like in real life, you can't pick up something if you're not right there with it.

2. **Effects (what happens after the action)**:
   - `(inventory ?var0)`: Once you pick up the item, it moves into your inventory. This is like putting the fruit into your backpack.
   - `(not (at ?var0 ?var1))`: This indicates that the item is no longer lying on the ground at that location. It’s like saying, now that the fruit is in your backpack, it's not on the ground anymore.

This setup ensures that you can only pick up items that are within your immediate reach and that collecting an item changes its status from being 'on the ground' to being 'in your inventory'. It's a simple but effective way to manage resources in the game, making sure everything happens in a logical and realistic manner.
Parameters:
1. ?var0 - moveable
2. ?var1 - static

Preconditions:
```
(and
    (at ?var0 ?var1)
    (agent_at ?var1)
)
```

Effects:
```
(and
    (inventory ?var0)
    (not (at ?var0 ?var1))
)
```
","(:action place-on-shelf
    :parameters (?x - book ?y - book ?cat - category)
    :precondition (and (holding ?x) (accessible ?y) (belongs-to-category ?x ?cat) (not (shelf-overflow ?cat)))
    :effect (and (not (holding ?x)) (not (accessible ?y)) (accessible ?x) (hands-free) (on-shelf ?x ?y) (shelf-empty ?cat))
)",
libraryworld,place-on-shelf,0.7851869463920593,Semi-Hard Negative (Intra-Domain Mismatch),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Consider a librarian holding a book and standing near a shelf. The 'place-on-shelf' action involves placing the held book on top of another book on the shelf, given that the book on the shelf is accessible. This action results in the held book becoming accessible, the book on the shelf becoming inaccessible, and the librarian's hands becoming free.

Action name: place-on-shelf


Your answer:
","Parameters:
1. ?x - book
2. ?y - book
3. ?cat - category

Preconditions:
```
(and
    (on-shelf ?x ?y)
    (accessible ?x)
    (hands-free)
    (belongs-to-category ?x ?cat)
)
```

Effects:
```
(and
    (holding ?x)
    (accessible ?y)
    (not (accessible ?x))
    (not (hands-free))
    (not (on-shelf ?x ?y))
    (shelf-empty ?cat)
)
```
","(:action place-on-shelf
    :parameters (?x - book ?y - book ?cat - category)
    :precondition (and (holding ?x) (accessible ?y) (belongs-to-category ?x ?cat) (not (shelf-overflow ?cat)))
    :effect (and (not (holding ?x)) (not (accessible ?y)) (accessible ?x) (hands-free) (on-shelf ?x ?y) (shelf-empty ?cat))
)",
libraryworld,place-on-shelf,0.5250560641288757,Semi-Hard Negative (Intra-Domain Mismatch),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Consider a librarian holding a book and standing near a shelf. The 'place-on-shelf' action involves placing the held book on top of another book on the shelf, given that the book on the shelf is accessible. This action results in the held book becoming accessible, the book on the shelf becoming inaccessible, and the librarian's hands becoming free.

Action name: place-on-shelf


Your answer:
","Parameters:
1. ?x - book

Preconditions:
```
(holding ?x)
```

Effects:
```
(and
    (not (holding ?x))
    (accessible ?x)
    (hands-free)
    (on-table ?x)
)
```
","(:action place-on-shelf
    :parameters (?x - book ?y - book ?cat - category)
    :precondition (and (holding ?x) (accessible ?y) (belongs-to-category ?x ?cat) (not (shelf-overflow ?cat)))
    :effect (and (not (holding ?x)) (not (accessible ?y)) (accessible ?x) (hands-free) (on-shelf ?x ?y) (shelf-empty ?cat))
)",
libraryworld,place-on-shelf,0.697905421257019,Semi-Hard Negative (Intra-Domain Mismatch),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Consider a librarian holding a book and standing near a shelf. The 'place-on-shelf' action involves placing the held book on top of another book on the shelf, given that the book on the shelf is accessible. This action results in the held book becoming accessible, the book on the shelf becoming inaccessible, and the librarian's hands becoming free.

Action name: place-on-shelf


Your answer:
","Parameters:
1. ?x - book

Preconditions:
```
(and
    (accessible ?x)
    (not (checked-out ?x))
)
```

Effects:
```
(and
    (checked-out ?x)
    (not (accessible ?x))
    (book-request ?x)
    (return-due ?x)
)
```
","(:action place-on-shelf
    :parameters (?x - book ?y - book ?cat - category)
    :precondition (and (holding ?x) (accessible ?y) (belongs-to-category ?x ?cat) (not (shelf-overflow ?cat)))
    :effect (and (not (holding ?x)) (not (accessible ?y)) (accessible ?x) (hands-free) (on-shelf ?x ?y) (shelf-empty ?cat))
)",
libraryworld,place-on-shelf,0.4014960527420044,Semi-Hard Negative (Intra-Domain Mismatch),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Consider a librarian holding a book and standing near a shelf. The 'place-on-shelf' action involves placing the held book on top of another book on the shelf, given that the book on the shelf is accessible. This action results in the held book becoming accessible, the book on the shelf becoming inaccessible, and the librarian's hands becoming free.

Action name: place-on-shelf


Your answer:
","Parameters:
1. ?x - book

Preconditions:
```
(and
    (checked-out ?x)
    (holding ?x)
)
```

Effects:
```
(and
    (not (checked-out ?x))
    (not (holding ?x))
    (not (book-request ?x))
    (not (return-due ?x))
    (accessible ?x)
    (hands-free)
)
```
","(:action place-on-shelf
    :parameters (?x - book ?y - book ?cat - category)
    :precondition (and (holding ?x) (accessible ?y) (belongs-to-category ?x ?cat) (not (shelf-overflow ?cat)))
    :effect (and (not (holding ?x)) (not (accessible ?y)) (accessible ?x) (hands-free) (on-shelf ?x ?y) (shelf-empty ?cat))
)",
libraryworld,place-on-shelf,0.6028046607971191,Semi-Hard Negative (Intra-Domain Mismatch),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Consider a librarian holding a book and standing near a shelf. The 'place-on-shelf' action involves placing the held book on top of another book on the shelf, given that the book on the shelf is accessible. This action results in the held book becoming accessible, the book on the shelf becoming inaccessible, and the librarian's hands becoming free.

Action name: place-on-shelf


Your answer:
","Parameters:
1. ?x - book

Preconditions:
```
(and
    (accessible ?x)
    (on-table ?x)
    (hands-free)
)
```

Effects:
```
(and
    (not (on-table ?x))
    (not (accessible ?x))
    (not (hands-free))
    (holding ?x)
)
```
","(:action place-on-shelf
    :parameters (?x - book ?y - book ?cat - category)
    :precondition (and (holding ?x) (accessible ?y) (belongs-to-category ?x ?cat) (not (shelf-overflow ?cat)))
    :effect (and (not (holding ?x)) (not (accessible ?y)) (accessible ?x) (hands-free) (on-shelf ?x ?y) (shelf-empty ?cat))
)",
libraryworld,place-on-shelf,0.7851869463920593,Semi-Hard Negative (Intra-Domain Mismatch),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Consider a librarian holding a book and standing near a shelf. The 'place-on-shelf' action involves placing the held book on top of another book on the shelf, given that the book on the shelf is accessible. This action results in the held book becoming accessible, the book on the shelf becoming inaccessible, and the librarian's hands becoming free.

Action name: place-on-shelf


Your answer:

**Explanation:** 

Imagine you are a librarian standing near a shelf, holding a book in your hands. You want to place this book on top of another book that is already on the shelf. This action, called ""place-on-shelf,"" needs to follow certain rules, called ""preconditions,"" to make sure everything goes smoothly.

For the action ""place-on-shelf,"" let's break down what needs to be true before you can place the book on the shelf:

1. **You must be holding the book:** This means you have the book in your hands, ready to place it on the shelf.
2. **The book on the shelf must be accessible:** The book already on the shelf should not be covered by other books or objects, so you can easily place your book on top of it.
3. **The book you are holding must belong to a certain category:** This helps in organizing the books properly according to their categories.
4. **The shelf should not be overflowing:** There should be enough space on the shelf to place another book.

Once these preconditions are met, you can proceed with the ""place-on-shelf"" action. This action results in several changes, called ""effects,"" that update the status of the books and your hands:

1. **You are no longer holding the book:** This shows that you have placed the book on the shelf.
2. **The book on the shelf is no longer accessible:** Because the new book is now on top of it, making it covered.
3. **The book you placed is now accessible:** This indicates the book you just placed is easy to reach.
4. **Your hands are now free:** Since you have placed the book on the shelf, your hands are empty again.
5. **The new book is on the shelf on top of the other book:** This shows the new book's position.
6. **The shelf is now considered empty for that category:** This helps in tracking the organization and availability of shelf space for that category.

To summarize, the preconditions ensure you are holding the book, the shelf has space, and the book on the shelf is accessible. The effects update the situation to show that you have placed the book on the shelf, the new book is accessible, and your hands are free again.","Parameters:
1. ?x - book
2. ?y - book
3. ?cat - category

Preconditions:
```
(and
    (on-shelf ?x ?y)
    (accessible ?x)
    (hands-free)
    (belongs-to-category ?x ?cat)
)
```

Effects:
```
(and
    (holding ?x)
    (accessible ?y)
    (not (accessible ?x))
    (not (hands-free))
    (not (on-shelf ?x ?y))
    (shelf-empty ?cat)
)
```
","(:action place-on-shelf
    :parameters (?x - book ?y - book ?cat - category)
    :precondition (and (holding ?x) (accessible ?y) (belongs-to-category ?x ?cat) (not (shelf-overflow ?cat)))
    :effect (and (not (holding ?x)) (not (accessible ?y)) (accessible ?x) (hands-free) (on-shelf ?x ?y) (shelf-empty ?cat))
)",
libraryworld,place-on-shelf,0.5250560641288757,Semi-Hard Negative (Intra-Domain Mismatch),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Consider a librarian holding a book and standing near a shelf. The 'place-on-shelf' action involves placing the held book on top of another book on the shelf, given that the book on the shelf is accessible. This action results in the held book becoming accessible, the book on the shelf becoming inaccessible, and the librarian's hands becoming free.

Action name: place-on-shelf


Your answer:

**Explanation:** 

Imagine you are a librarian standing near a shelf, holding a book in your hands. You want to place this book on top of another book that is already on the shelf. This action, called ""place-on-shelf,"" needs to follow certain rules, called ""preconditions,"" to make sure everything goes smoothly.

For the action ""place-on-shelf,"" let's break down what needs to be true before you can place the book on the shelf:

1. **You must be holding the book:** This means you have the book in your hands, ready to place it on the shelf.
2. **The book on the shelf must be accessible:** The book already on the shelf should not be covered by other books or objects, so you can easily place your book on top of it.
3. **The book you are holding must belong to a certain category:** This helps in organizing the books properly according to their categories.
4. **The shelf should not be overflowing:** There should be enough space on the shelf to place another book.

Once these preconditions are met, you can proceed with the ""place-on-shelf"" action. This action results in several changes, called ""effects,"" that update the status of the books and your hands:

1. **You are no longer holding the book:** This shows that you have placed the book on the shelf.
2. **The book on the shelf is no longer accessible:** Because the new book is now on top of it, making it covered.
3. **The book you placed is now accessible:** This indicates the book you just placed is easy to reach.
4. **Your hands are now free:** Since you have placed the book on the shelf, your hands are empty again.
5. **The new book is on the shelf on top of the other book:** This shows the new book's position.
6. **The shelf is now considered empty for that category:** This helps in tracking the organization and availability of shelf space for that category.

To summarize, the preconditions ensure you are holding the book, the shelf has space, and the book on the shelf is accessible. The effects update the situation to show that you have placed the book on the shelf, the new book is accessible, and your hands are free again.","Parameters:
1. ?x - book

Preconditions:
```
(holding ?x)
```

Effects:
```
(and
    (not (holding ?x))
    (accessible ?x)
    (hands-free)
    (on-table ?x)
)
```
","(:action place-on-shelf
    :parameters (?x - book ?y - book ?cat - category)
    :precondition (and (holding ?x) (accessible ?y) (belongs-to-category ?x ?cat) (not (shelf-overflow ?cat)))
    :effect (and (not (holding ?x)) (not (accessible ?y)) (accessible ?x) (hands-free) (on-shelf ?x ?y) (shelf-empty ?cat))
)",
libraryworld,place-on-shelf,0.697905421257019,Semi-Hard Negative (Intra-Domain Mismatch),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Consider a librarian holding a book and standing near a shelf. The 'place-on-shelf' action involves placing the held book on top of another book on the shelf, given that the book on the shelf is accessible. This action results in the held book becoming accessible, the book on the shelf becoming inaccessible, and the librarian's hands becoming free.

Action name: place-on-shelf


Your answer:

**Explanation:** 

Imagine you are a librarian standing near a shelf, holding a book in your hands. You want to place this book on top of another book that is already on the shelf. This action, called ""place-on-shelf,"" needs to follow certain rules, called ""preconditions,"" to make sure everything goes smoothly.

For the action ""place-on-shelf,"" let's break down what needs to be true before you can place the book on the shelf:

1. **You must be holding the book:** This means you have the book in your hands, ready to place it on the shelf.
2. **The book on the shelf must be accessible:** The book already on the shelf should not be covered by other books or objects, so you can easily place your book on top of it.
3. **The book you are holding must belong to a certain category:** This helps in organizing the books properly according to their categories.
4. **The shelf should not be overflowing:** There should be enough space on the shelf to place another book.

Once these preconditions are met, you can proceed with the ""place-on-shelf"" action. This action results in several changes, called ""effects,"" that update the status of the books and your hands:

1. **You are no longer holding the book:** This shows that you have placed the book on the shelf.
2. **The book on the shelf is no longer accessible:** Because the new book is now on top of it, making it covered.
3. **The book you placed is now accessible:** This indicates the book you just placed is easy to reach.
4. **Your hands are now free:** Since you have placed the book on the shelf, your hands are empty again.
5. **The new book is on the shelf on top of the other book:** This shows the new book's position.
6. **The shelf is now considered empty for that category:** This helps in tracking the organization and availability of shelf space for that category.

To summarize, the preconditions ensure you are holding the book, the shelf has space, and the book on the shelf is accessible. The effects update the situation to show that you have placed the book on the shelf, the new book is accessible, and your hands are free again.","Parameters:
1. ?x - book

Preconditions:
```
(and
    (accessible ?x)
    (not (checked-out ?x))
)
```

Effects:
```
(and
    (checked-out ?x)
    (not (accessible ?x))
    (book-request ?x)
    (return-due ?x)
)
```
","(:action place-on-shelf
    :parameters (?x - book ?y - book ?cat - category)
    :precondition (and (holding ?x) (accessible ?y) (belongs-to-category ?x ?cat) (not (shelf-overflow ?cat)))
    :effect (and (not (holding ?x)) (not (accessible ?y)) (accessible ?x) (hands-free) (on-shelf ?x ?y) (shelf-empty ?cat))
)",
libraryworld,place-on-shelf,0.4014960527420044,Semi-Hard Negative (Intra-Domain Mismatch),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Consider a librarian holding a book and standing near a shelf. The 'place-on-shelf' action involves placing the held book on top of another book on the shelf, given that the book on the shelf is accessible. This action results in the held book becoming accessible, the book on the shelf becoming inaccessible, and the librarian's hands becoming free.

Action name: place-on-shelf


Your answer:

**Explanation:** 

Imagine you are a librarian standing near a shelf, holding a book in your hands. You want to place this book on top of another book that is already on the shelf. This action, called ""place-on-shelf,"" needs to follow certain rules, called ""preconditions,"" to make sure everything goes smoothly.

For the action ""place-on-shelf,"" let's break down what needs to be true before you can place the book on the shelf:

1. **You must be holding the book:** This means you have the book in your hands, ready to place it on the shelf.
2. **The book on the shelf must be accessible:** The book already on the shelf should not be covered by other books or objects, so you can easily place your book on top of it.
3. **The book you are holding must belong to a certain category:** This helps in organizing the books properly according to their categories.
4. **The shelf should not be overflowing:** There should be enough space on the shelf to place another book.

Once these preconditions are met, you can proceed with the ""place-on-shelf"" action. This action results in several changes, called ""effects,"" that update the status of the books and your hands:

1. **You are no longer holding the book:** This shows that you have placed the book on the shelf.
2. **The book on the shelf is no longer accessible:** Because the new book is now on top of it, making it covered.
3. **The book you placed is now accessible:** This indicates the book you just placed is easy to reach.
4. **Your hands are now free:** Since you have placed the book on the shelf, your hands are empty again.
5. **The new book is on the shelf on top of the other book:** This shows the new book's position.
6. **The shelf is now considered empty for that category:** This helps in tracking the organization and availability of shelf space for that category.

To summarize, the preconditions ensure you are holding the book, the shelf has space, and the book on the shelf is accessible. The effects update the situation to show that you have placed the book on the shelf, the new book is accessible, and your hands are free again.","Parameters:
1. ?x - book

Preconditions:
```
(and
    (checked-out ?x)
    (holding ?x)
)
```

Effects:
```
(and
    (not (checked-out ?x))
    (not (holding ?x))
    (not (book-request ?x))
    (not (return-due ?x))
    (accessible ?x)
    (hands-free)
)
```
","(:action place-on-shelf
    :parameters (?x - book ?y - book ?cat - category)
    :precondition (and (holding ?x) (accessible ?y) (belongs-to-category ?x ?cat) (not (shelf-overflow ?cat)))
    :effect (and (not (holding ?x)) (not (accessible ?y)) (accessible ?x) (hands-free) (on-shelf ?x ?y) (shelf-empty ?cat))
)",
libraryworld,place-on-shelf,0.6028046607971191,Semi-Hard Negative (Intra-Domain Mismatch),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Consider a librarian holding a book and standing near a shelf. The 'place-on-shelf' action involves placing the held book on top of another book on the shelf, given that the book on the shelf is accessible. This action results in the held book becoming accessible, the book on the shelf becoming inaccessible, and the librarian's hands becoming free.

Action name: place-on-shelf


Your answer:

**Explanation:** 

Imagine you are a librarian standing near a shelf, holding a book in your hands. You want to place this book on top of another book that is already on the shelf. This action, called ""place-on-shelf,"" needs to follow certain rules, called ""preconditions,"" to make sure everything goes smoothly.

For the action ""place-on-shelf,"" let's break down what needs to be true before you can place the book on the shelf:

1. **You must be holding the book:** This means you have the book in your hands, ready to place it on the shelf.
2. **The book on the shelf must be accessible:** The book already on the shelf should not be covered by other books or objects, so you can easily place your book on top of it.
3. **The book you are holding must belong to a certain category:** This helps in organizing the books properly according to their categories.
4. **The shelf should not be overflowing:** There should be enough space on the shelf to place another book.

Once these preconditions are met, you can proceed with the ""place-on-shelf"" action. This action results in several changes, called ""effects,"" that update the status of the books and your hands:

1. **You are no longer holding the book:** This shows that you have placed the book on the shelf.
2. **The book on the shelf is no longer accessible:** Because the new book is now on top of it, making it covered.
3. **The book you placed is now accessible:** This indicates the book you just placed is easy to reach.
4. **Your hands are now free:** Since you have placed the book on the shelf, your hands are empty again.
5. **The new book is on the shelf on top of the other book:** This shows the new book's position.
6. **The shelf is now considered empty for that category:** This helps in tracking the organization and availability of shelf space for that category.

To summarize, the preconditions ensure you are holding the book, the shelf has space, and the book on the shelf is accessible. The effects update the situation to show that you have placed the book on the shelf, the new book is accessible, and your hands are free again.","Parameters:
1. ?x - book

Preconditions:
```
(and
    (accessible ?x)
    (on-table ?x)
    (hands-free)
)
```

Effects:
```
(and
    (not (on-table ?x))
    (not (accessible ?x))
    (not (hands-free))
    (holding ?x)
)
```
","(:action place-on-shelf
    :parameters (?x - book ?y - book ?cat - category)
    :precondition (and (holding ?x) (accessible ?y) (belongs-to-category ?x ?cat) (not (shelf-overflow ?cat)))
    :effect (and (not (holding ?x)) (not (accessible ?y)) (accessible ?x) (hands-free) (on-shelf ?x ?y) (shelf-empty ?cat))
)",
libraryworld,place-on-shelf,0.7177783846855164,Semi-Hard Negative (Intra-Domain Mismatch),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Consider a librarian holding a book and standing near a shelf. The 'place-on-shelf' action involves placing the held book on top of another book on the shelf, given that the book on the shelf is accessible. This action results in the held book becoming accessible, the book on the shelf becoming inaccessible, and the librarian's hands becoming free.

Action name: place-on-shelf


Your answer:
","**Explanation:** 

Imagine you are a librarian in a library, and you need to take a book off the shelf. This book is placed on top of another book. The action ""remove-from-shelf"" lets you take the top book off the shelf. To do this, certain conditions, called ""preconditions,"" must be met to make sure you can successfully take the book.

For the action ""remove-from-shelf,"" let's break down what needs to be true before you can take the book off the shelf:

1. **The book must be on the shelf:** This means the book you want to take is on top of another book on the shelf.
2. **The book must be accessible:** This means the book isn't covered by other books or objects, so you can easily reach it.
3. **Your hands must be free:** You need to have empty hands to pick up the book, meaning you aren't already holding something else.
4. **The book must belong to a certain category:** This helps you know which book you are taking and ensures you are organizing the books properly.

Once these preconditions are met, you can proceed with the ""remove-from-shelf"" action. This action results in several changes, called ""effects,"" that update the status of the books and your hands:

1. **You are now holding the book:** This indicates you have picked up the book from the shelf.
2. **The book underneath becomes accessible:** Since you have removed the top book, the book underneath is now easy to reach.
3. **The book you removed is no longer accessible:** Because you are holding the book, it's not available on the shelf anymore.
4. **Your hands are no longer free:** Since you are now holding the book, your hands are occupied.
5. **The book is no longer on the shelf:** This shows that the book has been taken off the shelf.
6. **The shelf is now empty for that category:** This helps keep track of the shelf space and organization.

To summarize, the preconditions ensure the book is on the shelf, accessible, your hands are free, and you know which category the book belongs to. The effects update the situation to show you are holding the book, the book underneath is now accessible, and the shelf is empty for that category.
Parameters:
1. ?x - book
2. ?y - book
3. ?cat - category

Preconditions:
```
(and
    (on-shelf ?x ?y)
    (accessible ?x)
    (hands-free)
    (belongs-to-category ?x ?cat)
)
```

Effects:
```
(and
    (holding ?x)
    (accessible ?y)
    (not (accessible ?x))
    (not (hands-free))
    (not (on-shelf ?x ?y))
    (shelf-empty ?cat)
)
```
","(:action place-on-shelf
    :parameters (?x - book ?y - book ?cat - category)
    :precondition (and (holding ?x) (accessible ?y) (belongs-to-category ?x ?cat) (not (shelf-overflow ?cat)))
    :effect (and (not (holding ?x)) (not (accessible ?y)) (accessible ?x) (hands-free) (on-shelf ?x ?y) (shelf-empty ?cat))
)",
libraryworld,place-on-shelf,0.6384035348892212,Semi-Hard Negative (Intra-Domain Mismatch),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Consider a librarian holding a book and standing near a shelf. The 'place-on-shelf' action involves placing the held book on top of another book on the shelf, given that the book on the shelf is accessible. This action results in the held book becoming accessible, the book on the shelf becoming inaccessible, and the librarian's hands becoming free.

Action name: place-on-shelf


Your answer:
","**Explanation:** 

Imagine you are a librarian holding a book in your hands, and you want to place it on a nearby table. The action ""place-on-table"" lets you do this. To make sure everything goes smoothly, there is a condition, called a ""precondition,"" that must be met before you can place the book on the table.

For the action ""place-on-table,"" let's break down what needs to be true before you can place the book on the table:

1. **You must be holding the book:** This means you have the book in your hands, ready to place it on the table.

Once this precondition is met, you can proceed with the ""place-on-table"" action. This action results in several changes, called ""effects,"" that update the status of the book and your hands:

1. **You are no longer holding the book:** This shows that you have placed the book on the table.
2. **The book becomes accessible:** Now that the book is on the table, it is easy to reach and pick up again if needed.
3. **Your hands are now free:** Since you have placed the book on the table, your hands are empty again.
4. **The book is on the table:** This indicates the new location of the book.

To summarize, the precondition ensures you are holding the book, making sure you are ready to place it on the table. The effects update the situation to show that you have placed the book on the table, it is now accessible, and your hands are free again.
Parameters:
1. ?x - book

Preconditions:
```
(holding ?x)
```

Effects:
```
(and
    (not (holding ?x))
    (accessible ?x)
    (hands-free)
    (on-table ?x)
)
```
","(:action place-on-shelf
    :parameters (?x - book ?y - book ?cat - category)
    :precondition (and (holding ?x) (accessible ?y) (belongs-to-category ?x ?cat) (not (shelf-overflow ?cat)))
    :effect (and (not (holding ?x)) (not (accessible ?y)) (accessible ?x) (hands-free) (on-shelf ?x ?y) (shelf-empty ?cat))
)",
libraryworld,place-on-shelf,0.6450091600418091,Semi-Hard Negative (Intra-Domain Mismatch),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Consider a librarian holding a book and standing near a shelf. The 'place-on-shelf' action involves placing the held book on top of another book on the shelf, given that the book on the shelf is accessible. This action results in the held book becoming accessible, the book on the shelf becoming inaccessible, and the librarian's hands becoming free.

Action name: place-on-shelf


Your answer:
","**Explanation:** 

Imagine a librarian in a library who helps patrons borrow books. When a patron wants to borrow a book, the librarian needs to make sure certain conditions are met before they can check the book out. These conditions are called ""preconditions.""

For the action ""check-out,"" let's think about what needs to be true before the librarian can let the patron borrow the book:

1. **The book must be accessible:** This means the book is not covered by other books or objects, making it easy for the librarian to pick up. If the book isn't accessible, the librarian can't reach it to check it out.
2. **The book must not be already checked out:** If the book is already checked out to someone else, it can't be borrowed by another patron until it's returned.

Once these preconditions are met, the librarian can proceed with the check-out action. The action results in several changes, called ""effects,"" that update the status of the book:

1. **The book is marked as checked out:** This indicates that the book is now borrowed and can't be checked out by another patron until it's returned.
2. **The book is no longer accessible:** Since the book is borrowed, it's no longer available on the shelf for others to take.
3. **There is a request for the book:** This keeps track of the borrowing transaction.
4. **A return due date is set:** This helps the library know when to expect the book back.

To summarize, the preconditions ensure the librarian can access the book and that it isn't already borrowed. The effects update the system to show the book is now checked out, not accessible, and has a return due date.
Parameters:
1. ?x - book

Preconditions:
```
(and
    (accessible ?x)
    (not (checked-out ?x))
)
```

Effects:
```
(and
    (checked-out ?x)
    (not (accessible ?x))
    (book-request ?x)
    (return-due ?x)
)
```
","(:action place-on-shelf
    :parameters (?x - book ?y - book ?cat - category)
    :precondition (and (holding ?x) (accessible ?y) (belongs-to-category ?x ?cat) (not (shelf-overflow ?cat)))
    :effect (and (not (holding ?x)) (not (accessible ?y)) (accessible ?x) (hands-free) (on-shelf ?x ?y) (shelf-empty ?cat))
)",
libraryworld,place-on-shelf,0.6513895988464355,Semi-Hard Negative (Intra-Domain Mismatch),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Consider a librarian holding a book and standing near a shelf. The 'place-on-shelf' action involves placing the held book on top of another book on the shelf, given that the book on the shelf is accessible. This action results in the held book becoming accessible, the book on the shelf becoming inaccessible, and the librarian's hands becoming free.

Action name: place-on-shelf


Your answer:
","**Explanation:** 

Imagine a patron is returning a borrowed book to the library. The librarian needs to process this return to update the book's status and remove any return due date. The action ""return-book"" describes how the librarian can do this. There are specific conditions, called ""preconditions,"" that must be met to ensure the return can be processed correctly.

For the action ""return-book,"" let's break down what needs to be true before the librarian can return the book:

1. **The book must be checked out:** This means the book is currently borrowed by someone and needs to be returned.
2. **The librarian must be holding the book:** This indicates the librarian has the book in their hands, ready to process the return.

Once these preconditions are met, the librarian can proceed with the ""return-book"" action. This action results in several changes, called ""effects,"" that update the status of the book and the librarian's hands:

1. **The book is no longer checked out:** This shows that the book has been returned and is available for borrowing again.
2. **The librarian is no longer holding the book:** This indicates the librarian has processed the return and placed the book back in its proper place.
3. **Any request for the book is removed:** If there was a request for this book, it is no longer needed since the book is now available.
4. **The return due date is removed:** This updates the system to show that the book is no longer due for return.
5. **The book becomes accessible:** Now that the book is back in the library, it is easy to find and borrow again.
6. **The librarian's hands are now free:** Since the librarian has finished processing the return, their hands are empty and ready for the next task.

To summarize, the preconditions ensure the book is currently borrowed and the librarian has it in their hands, ready to return. The effects update the situation to show that the book is no longer checked out, any requests and due dates are removed, the book is accessible again, and the librarian's hands are free.
Parameters:
1. ?x - book

Preconditions:
```
(and
    (checked-out ?x)
    (holding ?x)
)
```

Effects:
```
(and
    (not (checked-out ?x))
    (not (holding ?x))
    (not (book-request ?x))
    (not (return-due ?x))
    (accessible ?x)
    (hands-free)
)
```
","(:action place-on-shelf
    :parameters (?x - book ?y - book ?cat - category)
    :precondition (and (holding ?x) (accessible ?y) (belongs-to-category ?x ?cat) (not (shelf-overflow ?cat)))
    :effect (and (not (holding ?x)) (not (accessible ?y)) (accessible ?x) (hands-free) (on-shelf ?x ?y) (shelf-empty ?cat))
)",
libraryworld,place-on-shelf,0.5846755504608154,Semi-Hard Negative (Intra-Domain Mismatch),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Consider a librarian holding a book and standing near a shelf. The 'place-on-shelf' action involves placing the held book on top of another book on the shelf, given that the book on the shelf is accessible. This action results in the held book becoming accessible, the book on the shelf becoming inaccessible, and the librarian's hands becoming free.

Action name: place-on-shelf


Your answer:
","**Explanation:** 

Imagine you're a librarian in a library, and there's a table full of books that need to be sorted. You want to pick up one of these books. To do this, certain conditions, called ""preconditions,"" must be met to ensure you can successfully pick up the book.

For the action ""take-from-table,"" let's break down what needs to be true before you can pick up a book:

1. **The book must be accessible:** This means the book isn't covered by other books or objects, so you can easily reach it.
2. **The book must be on the table:** This indicates the book is physically located on the table, not somewhere else like a shelf.
3. **Your hands must be free:** You need to have empty hands to pick up the book, meaning you aren't already holding something else.

Once these preconditions are met, you can proceed with the ""take-from-table"" action. This action results in several changes, called ""effects,"" that update the status of the book and your hands:

1. **The book is no longer on the table:** This indicates you've picked up the book from the table.
2. **The book is no longer accessible:** Since you're holding the book, it's not available for someone else to pick up from the table.
3. **Your hands are no longer free:** Because you're now holding the book, your hands are occupied.
4. **You are holding the book:** This shows that the book is now in your hands.

To summarize, the preconditions ensure you can reach the book, it's on the table, and your hands are free to pick it up. The effects update the situation to reflect that the book is now in your hands and no longer on the table or accessible to others.
Parameters:
1. ?x - book

Preconditions:
```
(and
    (accessible ?x)
    (on-table ?x)
    (hands-free)
)
```

Effects:
```
(and
    (not (on-table ?x))
    (not (accessible ?x))
    (not (hands-free))
    (holding ?x)
)
```
","(:action place-on-shelf
    :parameters (?x - book ?y - book ?cat - category)
    :precondition (and (holding ?x) (accessible ?y) (belongs-to-category ?x ?cat) (not (shelf-overflow ?cat)))
    :effect (and (not (holding ?x)) (not (accessible ?y)) (accessible ?x) (hands-free) (on-shelf ?x ?y) (shelf-empty ?cat))
)",
libraryworld,place-on-shelf,0.6243354678153992,Hard Negative (Manipulated Action),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Consider a librarian holding a book and standing near a shelf. The 'place-on-shelf' action involves placing the held book on top of another book on the shelf, given that the book on the shelf is accessible. This action results in the held book becoming accessible, the book on the shelf becoming inaccessible, and the librarian's hands becoming free.

Action name: place-on-shelf


Your answer:
","Parameters:
1. ?x - book
2. ?y - book
3. ?cat - category

Preconditions:
```
(and
    (accessible ?x)
    (holding ?x)
    (accessible ?y)
    (belongs-to-category ?x ?cat)
)
```

Effects:
```
(and
    (not (shelf-overflow ?cat))
    (not (holding ?x))
    (not (accessible ?y))
    (hands-free)
    (on-shelf ?x ?y)
    (shelf-empty ?cat)
)
```
","(:action place-on-shelf
    :parameters (?x - book ?y - book ?cat - category)
    :precondition (and (holding ?x) (accessible ?y) (belongs-to-category ?x ?cat) (not (shelf-overflow ?cat)))
    :effect (and (not (holding ?x)) (not (accessible ?y)) (accessible ?x) (hands-free) (on-shelf ?x ?y) (shelf-empty ?cat))
)","swap (not (shelf-overflow ?cat)) with (accessible ?x)
"
libraryworld,place-on-shelf,0.5239658951759338,Hard Negative (Manipulated Action),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Consider a librarian holding a book and standing near a shelf. The 'place-on-shelf' action involves placing the held book on top of another book on the shelf, given that the book on the shelf is accessible. This action results in the held book becoming accessible, the book on the shelf becoming inaccessible, and the librarian's hands becoming free.

Action name: place-on-shelf


Your answer:
","Parameters:
1. ?x - book
2. ?y - book
3. ?cat - category

Preconditions:
```
(and
    (not (holding ?x))
    (accessible ?y)
    (belongs-to-category ?x ?cat)
)
```

Effects:
```
(and
    (not (holding ?x))
    (not (accessible ?y))
    (accessible ?x)
    (hands-free)
    (on-shelf ?x ?y)
    (shelf-empty ?cat)
)
```
","(:action place-on-shelf
    :parameters (?x - book ?y - book ?cat - category)
    :precondition (and (holding ?x) (accessible ?y) (belongs-to-category ?x ?cat) (not (shelf-overflow ?cat)))
    :effect (and (not (holding ?x)) (not (accessible ?y)) (accessible ?x) (hands-free) (on-shelf ?x ?y) (shelf-empty ?cat))
)","remove (not (shelf-overflow ?cat)) from preconditions
negate (holding ?x) in preconditions
"
libraryworld,place-on-shelf,0.4988251328468323,Hard Negative (Manipulated Action),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Consider a librarian holding a book and standing near a shelf. The 'place-on-shelf' action involves placing the held book on top of another book on the shelf, given that the book on the shelf is accessible. This action results in the held book becoming accessible, the book on the shelf becoming inaccessible, and the librarian's hands becoming free.

Action name: place-on-shelf


Your answer:
","Parameters:
1. ?x - book
2. ?y - book
3. ?cat - category

Preconditions:
```
(and
    (not (holding ?x))
    (holding ?x)
    (accessible ?y)
    (not (shelf-overflow ?cat))
)
```

Effects:
```
(and
    (belongs-to-category ?x ?cat)
    (not (accessible ?y))
    (accessible ?x)
    (hands-free)
    (on-shelf ?x ?y)
)
```
","(:action place-on-shelf
    :parameters (?x - book ?y - book ?cat - category)
    :precondition (and (holding ?x) (accessible ?y) (belongs-to-category ?x ?cat) (not (shelf-overflow ?cat)))
    :effect (and (not (holding ?x)) (not (accessible ?y)) (accessible ?x) (hands-free) (on-shelf ?x ?y) (shelf-empty ?cat))
)","swap (belongs-to-category ?x ?cat) with (not (holding ?x))
remove (shelf-empty ?cat) from effects
"
libraryworld,place-on-shelf,0.7829827070236206,Hard Negative (Manipulated Action),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Consider a librarian holding a book and standing near a shelf. The 'place-on-shelf' action involves placing the held book on top of another book on the shelf, given that the book on the shelf is accessible. This action results in the held book becoming accessible, the book on the shelf becoming inaccessible, and the librarian's hands becoming free.

Action name: place-on-shelf


Your answer:
","Parameters:
1. ?x - book
2. ?y - book
3. ?cat - category

Preconditions:
```
(and
    (holding ?x)
    (accessible ?y)
    (belongs-to-category ?x ?cat)
)
```

Effects:
```
(and
    (not (holding ?x))
    (not (accessible ?y))
    (accessible ?x)
    (hands-free)
    (on-shelf ?x ?y)
    (shelf-empty ?cat)
)
```
","(:action place-on-shelf
    :parameters (?x - book ?y - book ?cat - category)
    :precondition (and (holding ?x) (accessible ?y) (belongs-to-category ?x ?cat) (not (shelf-overflow ?cat)))
    :effect (and (not (holding ?x)) (not (accessible ?y)) (accessible ?x) (hands-free) (on-shelf ?x ?y) (shelf-empty ?cat))
)","remove (not (shelf-overflow ?cat)) from preconditions
"
libraryworld,place-on-shelf,0.7166059017181396,Hard Negative (Manipulated Action),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Consider a librarian holding a book and standing near a shelf. The 'place-on-shelf' action involves placing the held book on top of another book on the shelf, given that the book on the shelf is accessible. This action results in the held book becoming accessible, the book on the shelf becoming inaccessible, and the librarian's hands becoming free.

Action name: place-on-shelf


Your answer:
","Parameters:
1. ?x - book
2. ?y - book
3. ?cat - category

Preconditions:
```
(and
    (hands-free)
    (holding ?x)
    (accessible ?y)
    (not (shelf-overflow ?cat))
)
```

Effects:
```
(and
    (belongs-to-category ?x ?cat)
    (accessible ?y)
    (not (holding ?x))
    (accessible ?x)
    (on-shelf ?x ?y)
    (shelf-empty ?cat)
)
```
","(:action place-on-shelf
    :parameters (?x - book ?y - book ?cat - category)
    :precondition (and (holding ?x) (accessible ?y) (belongs-to-category ?x ?cat) (not (shelf-overflow ?cat)))
    :effect (and (not (holding ?x)) (not (accessible ?y)) (accessible ?x) (hands-free) (on-shelf ?x ?y) (shelf-empty ?cat))
)","swap (belongs-to-category ?x ?cat) with (hands-free)
negate (not (accessible ?y)) in effects
"
libraryworld,place-on-shelf,0.5239658951759338,Hard Negative (Manipulated Action),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Consider a librarian holding a book and standing near a shelf. The 'place-on-shelf' action involves placing the held book on top of another book on the shelf, given that the book on the shelf is accessible. This action results in the held book becoming accessible, the book on the shelf becoming inaccessible, and the librarian's hands becoming free.

Action name: place-on-shelf


Your answer:
","Parameters:
1. ?x - book
2. ?y - book
3. ?cat - category

Preconditions:
```
(and
    (not (holding ?x))
    (accessible ?y)
    (belongs-to-category ?x ?cat)
)
```

Effects:
```
(and
    (not (holding ?x))
    (not (accessible ?y))
    (accessible ?x)
    (hands-free)
    (on-shelf ?x ?y)
    (shelf-empty ?cat)
)
```
","(:action place-on-shelf
    :parameters (?x - book ?y - book ?cat - category)
    :precondition (and (holding ?x) (accessible ?y) (belongs-to-category ?x ?cat) (not (shelf-overflow ?cat)))
    :effect (and (not (holding ?x)) (not (accessible ?y)) (accessible ?x) (hands-free) (on-shelf ?x ?y) (shelf-empty ?cat))
)","negate (holding ?x) in preconditions
remove (not (shelf-overflow ?cat)) from preconditions
"
libraryworld,place-on-shelf,0.8451909422874451,Hard Negative (Manipulated Action),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Consider a librarian holding a book and standing near a shelf. The 'place-on-shelf' action involves placing the held book on top of another book on the shelf, given that the book on the shelf is accessible. This action results in the held book becoming accessible, the book on the shelf becoming inaccessible, and the librarian's hands becoming free.

Action name: place-on-shelf


Your answer:
","Parameters:
1. ?x - book
2. ?y - book
3. ?cat - category

Preconditions:
```
(and
    (holding ?x)
    (accessible ?y)
    (belongs-to-category ?x ?cat)
    (not (shelf-overflow ?cat))
)
```

Effects:
```
(and
    (not (holding ?x))
    (accessible ?x)
    (hands-free)
    (on-shelf ?x ?y)
    (shelf-empty ?cat)
)
```
","(:action place-on-shelf
    :parameters (?x - book ?y - book ?cat - category)
    :precondition (and (holding ?x) (accessible ?y) (belongs-to-category ?x ?cat) (not (shelf-overflow ?cat)))
    :effect (and (not (holding ?x)) (not (accessible ?y)) (accessible ?x) (hands-free) (on-shelf ?x ?y) (shelf-empty ?cat))
)","remove (not (accessible ?y)) from effects
"
libraryworld,place-on-shelf,0.5102673768997192,Hard Negative (Manipulated Action),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Consider a librarian holding a book and standing near a shelf. The 'place-on-shelf' action involves placing the held book on top of another book on the shelf, given that the book on the shelf is accessible. This action results in the held book becoming accessible, the book on the shelf becoming inaccessible, and the librarian's hands becoming free.

Action name: place-on-shelf


Your answer:
","Parameters:
1. ?x - book
2. ?y - book
3. ?cat - category

Preconditions:
```
(and
    (not (holding ?x))
    (accessible ?y)
    (belongs-to-category ?x ?cat)
    (not (shelf-overflow ?cat))
)
```

Effects:
```
(and
    (not (accessible ?y))
    (accessible ?x)
    (hands-free)
    (on-shelf ?x ?y)
    (shelf-empty ?cat)
)
```
","(:action place-on-shelf
    :parameters (?x - book ?y - book ?cat - category)
    :precondition (and (holding ?x) (accessible ?y) (belongs-to-category ?x ?cat) (not (shelf-overflow ?cat)))
    :effect (and (not (holding ?x)) (not (accessible ?y)) (accessible ?x) (hands-free) (on-shelf ?x ?y) (shelf-empty ?cat))
)","remove (not (holding ?x)) from effects
negate (holding ?x) in preconditions
"
libraryworld,place-on-shelf,0.8451909422874451,Hard Negative (Manipulated Action),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Consider a librarian holding a book and standing near a shelf. The 'place-on-shelf' action involves placing the held book on top of another book on the shelf, given that the book on the shelf is accessible. This action results in the held book becoming accessible, the book on the shelf becoming inaccessible, and the librarian's hands becoming free.

Action name: place-on-shelf


Your answer:
","Parameters:
1. ?x - book
2. ?y - book
3. ?cat - category

Preconditions:
```
(and
    (holding ?x)
    (accessible ?y)
    (belongs-to-category ?x ?cat)
    (not (shelf-overflow ?cat))
)
```

Effects:
```
(and
    (not (holding ?x))
    (accessible ?x)
    (hands-free)
    (on-shelf ?x ?y)
    (shelf-empty ?cat)
)
```
","(:action place-on-shelf
    :parameters (?x - book ?y - book ?cat - category)
    :precondition (and (holding ?x) (accessible ?y) (belongs-to-category ?x ?cat) (not (shelf-overflow ?cat)))
    :effect (and (not (holding ?x)) (not (accessible ?y)) (accessible ?x) (hands-free) (on-shelf ?x ?y) (shelf-empty ?cat))
)","remove (not (accessible ?y)) from effects
"
libraryworld,place-on-shelf,0.47732773423194885,Hard Negative (Manipulated Action),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Consider a librarian holding a book and standing near a shelf. The 'place-on-shelf' action involves placing the held book on top of another book on the shelf, given that the book on the shelf is accessible. This action results in the held book becoming accessible, the book on the shelf becoming inaccessible, and the librarian's hands becoming free.

Action name: place-on-shelf


Your answer:
","Parameters:
1. ?x - book
2. ?y - book
3. ?cat - category

Preconditions:
```
(and
    (shelf-empty ?cat)
    (not (holding ?x))
    (holding ?x)
    (belongs-to-category ?x ?cat)
)
```

Effects:
```
(and
    (not (shelf-overflow ?cat))
    (accessible ?y)
    (not (accessible ?y))
    (accessible ?x)
    (hands-free)
    (on-shelf ?x ?y)
)
```
","(:action place-on-shelf
    :parameters (?x - book ?y - book ?cat - category)
    :precondition (and (holding ?x) (accessible ?y) (belongs-to-category ?x ?cat) (not (shelf-overflow ?cat)))
    :effect (and (not (holding ?x)) (not (accessible ?y)) (accessible ?x) (hands-free) (on-shelf ?x ?y) (shelf-empty ?cat))
)","swap (not (shelf-overflow ?cat)) with (shelf-empty ?cat)
swap (accessible ?y) with (not (holding ?x))
"
libraryworld,place-on-shelf,0.789417028427124,Hard Negative (Manipulated Action),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Consider a librarian holding a book and standing near a shelf. The 'place-on-shelf' action involves placing the held book on top of another book on the shelf, given that the book on the shelf is accessible. This action results in the held book becoming accessible, the book on the shelf becoming inaccessible, and the librarian's hands becoming free.

Action name: place-on-shelf


Your answer:

**Explanation:** 

Imagine you are a librarian standing near a shelf, holding a book in your hands. You want to place this book on top of another book that is already on the shelf. This action, called ""place-on-shelf,"" needs to follow certain rules, called ""preconditions,"" to make sure everything goes smoothly.

For the action ""place-on-shelf,"" let's break down what needs to be true before you can place the book on the shelf:

1. **You must be holding the book:** This means you have the book in your hands, ready to place it on the shelf.
2. **The book on the shelf must be accessible:** The book already on the shelf should not be covered by other books or objects, so you can easily place your book on top of it.
3. **The book you are holding must belong to a certain category:** This helps in organizing the books properly according to their categories.
4. **The shelf should not be overflowing:** There should be enough space on the shelf to place another book.

Once these preconditions are met, you can proceed with the ""place-on-shelf"" action. This action results in several changes, called ""effects,"" that update the status of the books and your hands:

1. **You are no longer holding the book:** This shows that you have placed the book on the shelf.
2. **The book on the shelf is no longer accessible:** Because the new book is now on top of it, making it covered.
3. **The book you placed is now accessible:** This indicates the book you just placed is easy to reach.
4. **Your hands are now free:** Since you have placed the book on the shelf, your hands are empty again.
5. **The new book is on the shelf on top of the other book:** This shows the new book's position.
6. **The shelf is now considered empty for that category:** This helps in tracking the organization and availability of shelf space for that category.

To summarize, the preconditions ensure you are holding the book, the shelf has space, and the book on the shelf is accessible. The effects update the situation to show that you have placed the book on the shelf, the new book is accessible, and your hands are free again.","Parameters:
1. ?x - book
2. ?y - book
3. ?cat - category

Preconditions:
```
(and
    (holding ?x)
    (accessible ?y)
    (belongs-to-category ?x ?cat)
    (not (shelf-overflow ?cat))
)
```

Effects:
```
(and
    (not (holding ?x))
    (not (accessible ?y))
    (hands-free)
    (shelf-empty ?cat)
)
```
","(:action place-on-shelf
    :parameters (?x - book ?y - book ?cat - category)
    :precondition (and (holding ?x) (accessible ?y) (belongs-to-category ?x ?cat) (not (shelf-overflow ?cat)))
    :effect (and (not (holding ?x)) (not (accessible ?y)) (accessible ?x) (hands-free) (on-shelf ?x ?y) (shelf-empty ?cat))
)","remove (accessible ?x) from effects
remove (on-shelf ?x ?y) from effects
"
libraryworld,place-on-shelf,0.4069586992263794,Hard Negative (Manipulated Action),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Consider a librarian holding a book and standing near a shelf. The 'place-on-shelf' action involves placing the held book on top of another book on the shelf, given that the book on the shelf is accessible. This action results in the held book becoming accessible, the book on the shelf becoming inaccessible, and the librarian's hands becoming free.

Action name: place-on-shelf


Your answer:

**Explanation:** 

Imagine you are a librarian standing near a shelf, holding a book in your hands. You want to place this book on top of another book that is already on the shelf. This action, called ""place-on-shelf,"" needs to follow certain rules, called ""preconditions,"" to make sure everything goes smoothly.

For the action ""place-on-shelf,"" let's break down what needs to be true before you can place the book on the shelf:

1. **You must be holding the book:** This means you have the book in your hands, ready to place it on the shelf.
2. **The book on the shelf must be accessible:** The book already on the shelf should not be covered by other books or objects, so you can easily place your book on top of it.
3. **The book you are holding must belong to a certain category:** This helps in organizing the books properly according to their categories.
4. **The shelf should not be overflowing:** There should be enough space on the shelf to place another book.

Once these preconditions are met, you can proceed with the ""place-on-shelf"" action. This action results in several changes, called ""effects,"" that update the status of the books and your hands:

1. **You are no longer holding the book:** This shows that you have placed the book on the shelf.
2. **The book on the shelf is no longer accessible:** Because the new book is now on top of it, making it covered.
3. **The book you placed is now accessible:** This indicates the book you just placed is easy to reach.
4. **Your hands are now free:** Since you have placed the book on the shelf, your hands are empty again.
5. **The new book is on the shelf on top of the other book:** This shows the new book's position.
6. **The shelf is now considered empty for that category:** This helps in tracking the organization and availability of shelf space for that category.

To summarize, the preconditions ensure you are holding the book, the shelf has space, and the book on the shelf is accessible. The effects update the situation to show that you have placed the book on the shelf, the new book is accessible, and your hands are free again.","Parameters:
1. ?x - book
2. ?y - book
3. ?cat - category

Preconditions:
```
(and
    (accessible ?y)
    (not (shelf-overflow ?cat))
)
```

Effects:
```
(and
    (not (holding ?x))
    (not (accessible ?y))
    (accessible ?x)
    (hands-free)
    (on-shelf ?x ?y)
    (shelf-empty ?cat)
)
```
","(:action place-on-shelf
    :parameters (?x - book ?y - book ?cat - category)
    :precondition (and (holding ?x) (accessible ?y) (belongs-to-category ?x ?cat) (not (shelf-overflow ?cat)))
    :effect (and (not (holding ?x)) (not (accessible ?y)) (accessible ?x) (hands-free) (on-shelf ?x ?y) (shelf-empty ?cat))
)","remove (holding ?x) from preconditions
remove (belongs-to-category ?x ?cat) from preconditions
"
libraryworld,place-on-shelf,0.8043724298477173,Hard Negative (Manipulated Action),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Consider a librarian holding a book and standing near a shelf. The 'place-on-shelf' action involves placing the held book on top of another book on the shelf, given that the book on the shelf is accessible. This action results in the held book becoming accessible, the book on the shelf becoming inaccessible, and the librarian's hands becoming free.

Action name: place-on-shelf


Your answer:

**Explanation:** 

Imagine you are a librarian standing near a shelf, holding a book in your hands. You want to place this book on top of another book that is already on the shelf. This action, called ""place-on-shelf,"" needs to follow certain rules, called ""preconditions,"" to make sure everything goes smoothly.

For the action ""place-on-shelf,"" let's break down what needs to be true before you can place the book on the shelf:

1. **You must be holding the book:** This means you have the book in your hands, ready to place it on the shelf.
2. **The book on the shelf must be accessible:** The book already on the shelf should not be covered by other books or objects, so you can easily place your book on top of it.
3. **The book you are holding must belong to a certain category:** This helps in organizing the books properly according to their categories.
4. **The shelf should not be overflowing:** There should be enough space on the shelf to place another book.

Once these preconditions are met, you can proceed with the ""place-on-shelf"" action. This action results in several changes, called ""effects,"" that update the status of the books and your hands:

1. **You are no longer holding the book:** This shows that you have placed the book on the shelf.
2. **The book on the shelf is no longer accessible:** Because the new book is now on top of it, making it covered.
3. **The book you placed is now accessible:** This indicates the book you just placed is easy to reach.
4. **Your hands are now free:** Since you have placed the book on the shelf, your hands are empty again.
5. **The new book is on the shelf on top of the other book:** This shows the new book's position.
6. **The shelf is now considered empty for that category:** This helps in tracking the organization and availability of shelf space for that category.

To summarize, the preconditions ensure you are holding the book, the shelf has space, and the book on the shelf is accessible. The effects update the situation to show that you have placed the book on the shelf, the new book is accessible, and your hands are free again.","Parameters:
1. ?x - book
2. ?y - book
3. ?cat - category

Preconditions:
```
(and
    (holding ?x)
    (accessible ?y)
    (belongs-to-category ?x ?cat)
    (not (shelf-overflow ?cat))
)
```

Effects:
```
(and
    (not (accessible ?x))
    (not (accessible ?y))
    (hands-free)
    (on-shelf ?x ?y)
    (shelf-empty ?cat)
)
```
","(:action place-on-shelf
    :parameters (?x - book ?y - book ?cat - category)
    :precondition (and (holding ?x) (accessible ?y) (belongs-to-category ?x ?cat) (not (shelf-overflow ?cat)))
    :effect (and (not (holding ?x)) (not (accessible ?y)) (accessible ?x) (hands-free) (on-shelf ?x ?y) (shelf-empty ?cat))
)","negate (accessible ?x) in effects
remove (not (holding ?x)) from effects
"
libraryworld,place-on-shelf,0.7758932113647461,Hard Negative (Manipulated Action),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Consider a librarian holding a book and standing near a shelf. The 'place-on-shelf' action involves placing the held book on top of another book on the shelf, given that the book on the shelf is accessible. This action results in the held book becoming accessible, the book on the shelf becoming inaccessible, and the librarian's hands becoming free.

Action name: place-on-shelf


Your answer:

**Explanation:** 

Imagine you are a librarian standing near a shelf, holding a book in your hands. You want to place this book on top of another book that is already on the shelf. This action, called ""place-on-shelf,"" needs to follow certain rules, called ""preconditions,"" to make sure everything goes smoothly.

For the action ""place-on-shelf,"" let's break down what needs to be true before you can place the book on the shelf:

1. **You must be holding the book:** This means you have the book in your hands, ready to place it on the shelf.
2. **The book on the shelf must be accessible:** The book already on the shelf should not be covered by other books or objects, so you can easily place your book on top of it.
3. **The book you are holding must belong to a certain category:** This helps in organizing the books properly according to their categories.
4. **The shelf should not be overflowing:** There should be enough space on the shelf to place another book.

Once these preconditions are met, you can proceed with the ""place-on-shelf"" action. This action results in several changes, called ""effects,"" that update the status of the books and your hands:

1. **You are no longer holding the book:** This shows that you have placed the book on the shelf.
2. **The book on the shelf is no longer accessible:** Because the new book is now on top of it, making it covered.
3. **The book you placed is now accessible:** This indicates the book you just placed is easy to reach.
4. **Your hands are now free:** Since you have placed the book on the shelf, your hands are empty again.
5. **The new book is on the shelf on top of the other book:** This shows the new book's position.
6. **The shelf is now considered empty for that category:** This helps in tracking the organization and availability of shelf space for that category.

To summarize, the preconditions ensure you are holding the book, the shelf has space, and the book on the shelf is accessible. The effects update the situation to show that you have placed the book on the shelf, the new book is accessible, and your hands are free again.","Parameters:
1. ?x - book
2. ?y - book
3. ?cat - category

Preconditions:
```
(and
    (shelf-overflow ?cat)
    (holding ?x)
    (accessible ?y)
    (belongs-to-category ?x ?cat)
)
```

Effects:
```
(and
    (not (holding ?x))
    (not (accessible ?y))
    (accessible ?x)
    (hands-free)
    (on-shelf ?x ?y)
    (shelf-empty ?cat)
)
```
","(:action place-on-shelf
    :parameters (?x - book ?y - book ?cat - category)
    :precondition (and (holding ?x) (accessible ?y) (belongs-to-category ?x ?cat) (not (shelf-overflow ?cat)))
    :effect (and (not (holding ?x)) (not (accessible ?y)) (accessible ?x) (hands-free) (on-shelf ?x ?y) (shelf-empty ?cat))
)","negate (not (shelf-overflow ?cat)) in preconditions
"
libraryworld,place-on-shelf,0.8115384578704834,Hard Negative (Manipulated Action),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Consider a librarian holding a book and standing near a shelf. The 'place-on-shelf' action involves placing the held book on top of another book on the shelf, given that the book on the shelf is accessible. This action results in the held book becoming accessible, the book on the shelf becoming inaccessible, and the librarian's hands becoming free.

Action name: place-on-shelf


Your answer:

**Explanation:** 

Imagine you are a librarian standing near a shelf, holding a book in your hands. You want to place this book on top of another book that is already on the shelf. This action, called ""place-on-shelf,"" needs to follow certain rules, called ""preconditions,"" to make sure everything goes smoothly.

For the action ""place-on-shelf,"" let's break down what needs to be true before you can place the book on the shelf:

1. **You must be holding the book:** This means you have the book in your hands, ready to place it on the shelf.
2. **The book on the shelf must be accessible:** The book already on the shelf should not be covered by other books or objects, so you can easily place your book on top of it.
3. **The book you are holding must belong to a certain category:** This helps in organizing the books properly according to their categories.
4. **The shelf should not be overflowing:** There should be enough space on the shelf to place another book.

Once these preconditions are met, you can proceed with the ""place-on-shelf"" action. This action results in several changes, called ""effects,"" that update the status of the books and your hands:

1. **You are no longer holding the book:** This shows that you have placed the book on the shelf.
2. **The book on the shelf is no longer accessible:** Because the new book is now on top of it, making it covered.
3. **The book you placed is now accessible:** This indicates the book you just placed is easy to reach.
4. **Your hands are now free:** Since you have placed the book on the shelf, your hands are empty again.
5. **The new book is on the shelf on top of the other book:** This shows the new book's position.
6. **The shelf is now considered empty for that category:** This helps in tracking the organization and availability of shelf space for that category.

To summarize, the preconditions ensure you are holding the book, the shelf has space, and the book on the shelf is accessible. The effects update the situation to show that you have placed the book on the shelf, the new book is accessible, and your hands are free again.","Parameters:
1. ?x - book
2. ?y - book
3. ?cat - category

Preconditions:
```
(and
    (holding ?x)
    (accessible ?y)
    (belongs-to-category ?x ?cat)
    (not (shelf-overflow ?cat))
)
```

Effects:
```
(and
    (accessible ?y)
    (holding ?x)
    (accessible ?x)
    (hands-free)
    (on-shelf ?x ?y)
    (shelf-empty ?cat)
)
```
","(:action place-on-shelf
    :parameters (?x - book ?y - book ?cat - category)
    :precondition (and (holding ?x) (accessible ?y) (belongs-to-category ?x ?cat) (not (shelf-overflow ?cat)))
    :effect (and (not (holding ?x)) (not (accessible ?y)) (accessible ?x) (hands-free) (on-shelf ?x ?y) (shelf-empty ?cat))
)","negate (not (accessible ?y)) in effects
negate (not (holding ?x)) in effects
"
libraryworld,place-on-shelf,0.5154003500938416,Hard Negative (Manipulated Action),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Consider a librarian holding a book and standing near a shelf. The 'place-on-shelf' action involves placing the held book on top of another book on the shelf, given that the book on the shelf is accessible. This action results in the held book becoming accessible, the book on the shelf becoming inaccessible, and the librarian's hands becoming free.

Action name: place-on-shelf


Your answer:

**Explanation:** 

Imagine you are a librarian standing near a shelf, holding a book in your hands. You want to place this book on top of another book that is already on the shelf. This action, called ""place-on-shelf,"" needs to follow certain rules, called ""preconditions,"" to make sure everything goes smoothly.

For the action ""place-on-shelf,"" let's break down what needs to be true before you can place the book on the shelf:

1. **You must be holding the book:** This means you have the book in your hands, ready to place it on the shelf.
2. **The book on the shelf must be accessible:** The book already on the shelf should not be covered by other books or objects, so you can easily place your book on top of it.
3. **The book you are holding must belong to a certain category:** This helps in organizing the books properly according to their categories.
4. **The shelf should not be overflowing:** There should be enough space on the shelf to place another book.

Once these preconditions are met, you can proceed with the ""place-on-shelf"" action. This action results in several changes, called ""effects,"" that update the status of the books and your hands:

1. **You are no longer holding the book:** This shows that you have placed the book on the shelf.
2. **The book on the shelf is no longer accessible:** Because the new book is now on top of it, making it covered.
3. **The book you placed is now accessible:** This indicates the book you just placed is easy to reach.
4. **Your hands are now free:** Since you have placed the book on the shelf, your hands are empty again.
5. **The new book is on the shelf on top of the other book:** This shows the new book's position.
6. **The shelf is now considered empty for that category:** This helps in tracking the organization and availability of shelf space for that category.

To summarize, the preconditions ensure you are holding the book, the shelf has space, and the book on the shelf is accessible. The effects update the situation to show that you have placed the book on the shelf, the new book is accessible, and your hands are free again.","Parameters:
1. ?x - book
2. ?y - book
3. ?cat - category

Preconditions:
```
(and
    (holding ?x)
    (accessible ?y)
    (belongs-to-category ?x ?cat)
    (not (shelf-overflow ?cat))
)
```

Effects:
```
(and
    (not (shelf-empty ?cat))
    (not (holding ?x))
    (not (accessible ?y))
    (accessible ?x)
    (on-shelf ?x ?y)
)
```
","(:action place-on-shelf
    :parameters (?x - book ?y - book ?cat - category)
    :precondition (and (holding ?x) (accessible ?y) (belongs-to-category ?x ?cat) (not (shelf-overflow ?cat)))
    :effect (and (not (holding ?x)) (not (accessible ?y)) (accessible ?x) (hands-free) (on-shelf ?x ?y) (shelf-empty ?cat))
)","negate (shelf-empty ?cat) in effects
remove (hands-free) from effects
"
libraryworld,place-on-shelf,0.8138750791549683,Hard Negative (Manipulated Action),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Consider a librarian holding a book and standing near a shelf. The 'place-on-shelf' action involves placing the held book on top of another book on the shelf, given that the book on the shelf is accessible. This action results in the held book becoming accessible, the book on the shelf becoming inaccessible, and the librarian's hands becoming free.

Action name: place-on-shelf


Your answer:

**Explanation:** 

Imagine you are a librarian standing near a shelf, holding a book in your hands. You want to place this book on top of another book that is already on the shelf. This action, called ""place-on-shelf,"" needs to follow certain rules, called ""preconditions,"" to make sure everything goes smoothly.

For the action ""place-on-shelf,"" let's break down what needs to be true before you can place the book on the shelf:

1. **You must be holding the book:** This means you have the book in your hands, ready to place it on the shelf.
2. **The book on the shelf must be accessible:** The book already on the shelf should not be covered by other books or objects, so you can easily place your book on top of it.
3. **The book you are holding must belong to a certain category:** This helps in organizing the books properly according to their categories.
4. **The shelf should not be overflowing:** There should be enough space on the shelf to place another book.

Once these preconditions are met, you can proceed with the ""place-on-shelf"" action. This action results in several changes, called ""effects,"" that update the status of the books and your hands:

1. **You are no longer holding the book:** This shows that you have placed the book on the shelf.
2. **The book on the shelf is no longer accessible:** Because the new book is now on top of it, making it covered.
3. **The book you placed is now accessible:** This indicates the book you just placed is easy to reach.
4. **Your hands are now free:** Since you have placed the book on the shelf, your hands are empty again.
5. **The new book is on the shelf on top of the other book:** This shows the new book's position.
6. **The shelf is now considered empty for that category:** This helps in tracking the organization and availability of shelf space for that category.

To summarize, the preconditions ensure you are holding the book, the shelf has space, and the book on the shelf is accessible. The effects update the situation to show that you have placed the book on the shelf, the new book is accessible, and your hands are free again.","Parameters:
1. ?x - book
2. ?y - book
3. ?cat - category

Preconditions:
```
(and
    (accessible ?y)
    (belongs-to-category ?x ?cat)
    (not (shelf-overflow ?cat))
)
```

Effects:
```
(and
    (holding ?x)
    (not (accessible ?y))
    (accessible ?x)
    (hands-free)
    (on-shelf ?x ?y)
    (shelf-empty ?cat)
)
```
","(:action place-on-shelf
    :parameters (?x - book ?y - book ?cat - category)
    :precondition (and (holding ?x) (accessible ?y) (belongs-to-category ?x ?cat) (not (shelf-overflow ?cat)))
    :effect (and (not (holding ?x)) (not (accessible ?y)) (accessible ?x) (hands-free) (on-shelf ?x ?y) (shelf-empty ?cat))
)","negate (not (holding ?x)) in effects
remove (holding ?x) from preconditions
"
libraryworld,place-on-shelf,0.7923879623413086,Hard Negative (Manipulated Action),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Consider a librarian holding a book and standing near a shelf. The 'place-on-shelf' action involves placing the held book on top of another book on the shelf, given that the book on the shelf is accessible. This action results in the held book becoming accessible, the book on the shelf becoming inaccessible, and the librarian's hands becoming free.

Action name: place-on-shelf


Your answer:

**Explanation:** 

Imagine you are a librarian standing near a shelf, holding a book in your hands. You want to place this book on top of another book that is already on the shelf. This action, called ""place-on-shelf,"" needs to follow certain rules, called ""preconditions,"" to make sure everything goes smoothly.

For the action ""place-on-shelf,"" let's break down what needs to be true before you can place the book on the shelf:

1. **You must be holding the book:** This means you have the book in your hands, ready to place it on the shelf.
2. **The book on the shelf must be accessible:** The book already on the shelf should not be covered by other books or objects, so you can easily place your book on top of it.
3. **The book you are holding must belong to a certain category:** This helps in organizing the books properly according to their categories.
4. **The shelf should not be overflowing:** There should be enough space on the shelf to place another book.

Once these preconditions are met, you can proceed with the ""place-on-shelf"" action. This action results in several changes, called ""effects,"" that update the status of the books and your hands:

1. **You are no longer holding the book:** This shows that you have placed the book on the shelf.
2. **The book on the shelf is no longer accessible:** Because the new book is now on top of it, making it covered.
3. **The book you placed is now accessible:** This indicates the book you just placed is easy to reach.
4. **Your hands are now free:** Since you have placed the book on the shelf, your hands are empty again.
5. **The new book is on the shelf on top of the other book:** This shows the new book's position.
6. **The shelf is now considered empty for that category:** This helps in tracking the organization and availability of shelf space for that category.

To summarize, the preconditions ensure you are holding the book, the shelf has space, and the book on the shelf is accessible. The effects update the situation to show that you have placed the book on the shelf, the new book is accessible, and your hands are free again.","Parameters:
1. ?x - book
2. ?y - book
3. ?cat - category

Preconditions:
```
(and
    (holding ?x)
    (accessible ?y)
    (not (shelf-overflow ?cat))
)
```

Effects:
```
(and
    (not (holding ?x))
    (not (accessible ?y))
    (accessible ?x)
    (hands-free)
    (on-shelf ?x ?y)
    (shelf-empty ?cat)
)
```
","(:action place-on-shelf
    :parameters (?x - book ?y - book ?cat - category)
    :precondition (and (holding ?x) (accessible ?y) (belongs-to-category ?x ?cat) (not (shelf-overflow ?cat)))
    :effect (and (not (holding ?x)) (not (accessible ?y)) (accessible ?x) (hands-free) (on-shelf ?x ?y) (shelf-empty ?cat))
)","remove (belongs-to-category ?x ?cat) from preconditions
"
libraryworld,place-on-shelf,0.5939176082611084,Hard Negative (Manipulated Action),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Consider a librarian holding a book and standing near a shelf. The 'place-on-shelf' action involves placing the held book on top of another book on the shelf, given that the book on the shelf is accessible. This action results in the held book becoming accessible, the book on the shelf becoming inaccessible, and the librarian's hands becoming free.

Action name: place-on-shelf


Your answer:

**Explanation:** 

Imagine you are a librarian standing near a shelf, holding a book in your hands. You want to place this book on top of another book that is already on the shelf. This action, called ""place-on-shelf,"" needs to follow certain rules, called ""preconditions,"" to make sure everything goes smoothly.

For the action ""place-on-shelf,"" let's break down what needs to be true before you can place the book on the shelf:

1. **You must be holding the book:** This means you have the book in your hands, ready to place it on the shelf.
2. **The book on the shelf must be accessible:** The book already on the shelf should not be covered by other books or objects, so you can easily place your book on top of it.
3. **The book you are holding must belong to a certain category:** This helps in organizing the books properly according to their categories.
4. **The shelf should not be overflowing:** There should be enough space on the shelf to place another book.

Once these preconditions are met, you can proceed with the ""place-on-shelf"" action. This action results in several changes, called ""effects,"" that update the status of the books and your hands:

1. **You are no longer holding the book:** This shows that you have placed the book on the shelf.
2. **The book on the shelf is no longer accessible:** Because the new book is now on top of it, making it covered.
3. **The book you placed is now accessible:** This indicates the book you just placed is easy to reach.
4. **Your hands are now free:** Since you have placed the book on the shelf, your hands are empty again.
5. **The new book is on the shelf on top of the other book:** This shows the new book's position.
6. **The shelf is now considered empty for that category:** This helps in tracking the organization and availability of shelf space for that category.

To summarize, the preconditions ensure you are holding the book, the shelf has space, and the book on the shelf is accessible. The effects update the situation to show that you have placed the book on the shelf, the new book is accessible, and your hands are free again.","Parameters:
1. ?x - book
2. ?y - book
3. ?cat - category

Preconditions:
```
(and
    (accessible ?x)
    (holding ?x)
    (accessible ?y)
    (not (shelf-overflow ?cat))
)
```

Effects:
```
(and
    (not (shelf-empty ?cat))
    (belongs-to-category ?x ?cat)
    (not (holding ?x))
    (not (accessible ?y))
    (hands-free)
    (on-shelf ?x ?y)
)
```
","(:action place-on-shelf
    :parameters (?x - book ?y - book ?cat - category)
    :precondition (and (holding ?x) (accessible ?y) (belongs-to-category ?x ?cat) (not (shelf-overflow ?cat)))
    :effect (and (not (holding ?x)) (not (accessible ?y)) (accessible ?x) (hands-free) (on-shelf ?x ?y) (shelf-empty ?cat))
)","negate (shelf-empty ?cat) in effects
swap (belongs-to-category ?x ?cat) with (accessible ?x)
"
libraryworld,place-on-shelf,0.7829827070236206,Hard Negative (Manipulated Action),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Consider a librarian holding a book and standing near a shelf. The 'place-on-shelf' action involves placing the held book on top of another book on the shelf, given that the book on the shelf is accessible. This action results in the held book becoming accessible, the book on the shelf becoming inaccessible, and the librarian's hands becoming free.

Action name: place-on-shelf


Your answer:

**Explanation:** 

Imagine you are a librarian standing near a shelf, holding a book in your hands. You want to place this book on top of another book that is already on the shelf. This action, called ""place-on-shelf,"" needs to follow certain rules, called ""preconditions,"" to make sure everything goes smoothly.

For the action ""place-on-shelf,"" let's break down what needs to be true before you can place the book on the shelf:

1. **You must be holding the book:** This means you have the book in your hands, ready to place it on the shelf.
2. **The book on the shelf must be accessible:** The book already on the shelf should not be covered by other books or objects, so you can easily place your book on top of it.
3. **The book you are holding must belong to a certain category:** This helps in organizing the books properly according to their categories.
4. **The shelf should not be overflowing:** There should be enough space on the shelf to place another book.

Once these preconditions are met, you can proceed with the ""place-on-shelf"" action. This action results in several changes, called ""effects,"" that update the status of the books and your hands:

1. **You are no longer holding the book:** This shows that you have placed the book on the shelf.
2. **The book on the shelf is no longer accessible:** Because the new book is now on top of it, making it covered.
3. **The book you placed is now accessible:** This indicates the book you just placed is easy to reach.
4. **Your hands are now free:** Since you have placed the book on the shelf, your hands are empty again.
5. **The new book is on the shelf on top of the other book:** This shows the new book's position.
6. **The shelf is now considered empty for that category:** This helps in tracking the organization and availability of shelf space for that category.

To summarize, the preconditions ensure you are holding the book, the shelf has space, and the book on the shelf is accessible. The effects update the situation to show that you have placed the book on the shelf, the new book is accessible, and your hands are free again.","Parameters:
1. ?x - book
2. ?y - book
3. ?cat - category

Preconditions:
```
(and
    (holding ?x)
    (accessible ?y)
    (belongs-to-category ?x ?cat)
)
```

Effects:
```
(and
    (not (holding ?x))
    (not (accessible ?y))
    (accessible ?x)
    (hands-free)
    (on-shelf ?x ?y)
    (shelf-empty ?cat)
)
```
","(:action place-on-shelf
    :parameters (?x - book ?y - book ?cat - category)
    :precondition (and (holding ?x) (accessible ?y) (belongs-to-category ?x ?cat) (not (shelf-overflow ?cat)))
    :effect (and (not (holding ?x)) (not (accessible ?y)) (accessible ?x) (hands-free) (on-shelf ?x ?y) (shelf-empty ?cat))
)","remove (not (shelf-overflow ?cat)) from preconditions
"
libraryworld,place-on-shelf,0.7562539577484131,Hard Negative (Manipulated Action),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Consider a librarian holding a book and standing near a shelf. The 'place-on-shelf' action involves placing the held book on top of another book on the shelf, given that the book on the shelf is accessible. This action results in the held book becoming accessible, the book on the shelf becoming inaccessible, and the librarian's hands becoming free.

Action name: place-on-shelf


Your answer:
","**Explanation:** 

Imagine you are a librarian standing near a shelf, holding a book in your hands. You want to place this book on top of another book that is already on the shelf. This action, called ""place-on-shelf,"" needs to follow certain rules, called ""preconditions,"" to make sure everything goes smoothly.

For the action ""place-on-shelf,"" let's break down what needs to be true before you can place the book on the shelf:

1. **You must be holding the book:** This means you have the book in your hands, ready to place it on the shelf.
2. **The book on the shelf must be accessible:** The book already on the shelf should not be covered by other books or objects, so you can easily place your book on top of it.
3. **The book you are holding must belong to a certain category:** This helps in organizing the books properly according to their categories.
4. **The shelf should not be overflowing:** There should be enough space on the shelf to place another book.

Once these preconditions are met, you can proceed with the ""place-on-shelf"" action. This action results in several changes, called ""effects,"" that update the status of the books and your hands:

1. **You are no longer holding the book:** This shows that you have placed the book on the shelf.
2. **The book on the shelf is no longer accessible:** Because the new book is now on top of it, making it covered.
3. **The book you placed is now accessible:** This indicates the book you just placed is easy to reach.
4. **Your hands are now free:** Since you have placed the book on the shelf, your hands are empty again.
5. **The new book is on the shelf on top of the other book:** This shows the new book's position.
6. **The shelf is now considered empty for that category:** This helps in tracking the organization and availability of shelf space for that category.

To summarize, the preconditions ensure you are holding the book, the shelf has space, and the book on the shelf is accessible. The effects update the situation to show that you have placed the book on the shelf, the new book is accessible, and your hands are free again.
Parameters:
1. ?x - book
2. ?y - book
3. ?cat - category

Preconditions:
```
(and
    (accessible ?x)
    (holding ?x)
    (accessible ?y)
    (belongs-to-category ?x ?cat)
)
```

Effects:
```
(and
    (accessible ?y)
    (not (shelf-overflow ?cat))
    (not (holding ?x))
    (hands-free)
    (on-shelf ?x ?y)
    (shelf-empty ?cat)
)
```
","(:action place-on-shelf
    :parameters (?x - book ?y - book ?cat - category)
    :precondition (and (holding ?x) (accessible ?y) (belongs-to-category ?x ?cat) (not (shelf-overflow ?cat)))
    :effect (and (not (holding ?x)) (not (accessible ?y)) (accessible ?x) (hands-free) (on-shelf ?x ?y) (shelf-empty ?cat))
)","negate (not (accessible ?y)) in effects
swap (not (shelf-overflow ?cat)) with (accessible ?x)
"
libraryworld,place-on-shelf,0.7562539577484131,Hard Negative (Manipulated Action),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Consider a librarian holding a book and standing near a shelf. The 'place-on-shelf' action involves placing the held book on top of another book on the shelf, given that the book on the shelf is accessible. This action results in the held book becoming accessible, the book on the shelf becoming inaccessible, and the librarian's hands becoming free.

Action name: place-on-shelf


Your answer:
","**Explanation:** 

Imagine you are a librarian standing near a shelf, holding a book in your hands. You want to place this book on top of another book that is already on the shelf. This action, called ""place-on-shelf,"" needs to follow certain rules, called ""preconditions,"" to make sure everything goes smoothly.

For the action ""place-on-shelf,"" let's break down what needs to be true before you can place the book on the shelf:

1. **You must be holding the book:** This means you have the book in your hands, ready to place it on the shelf.
2. **The book on the shelf must be accessible:** The book already on the shelf should not be covered by other books or objects, so you can easily place your book on top of it.
3. **The book you are holding must belong to a certain category:** This helps in organizing the books properly according to their categories.
4. **The shelf should not be overflowing:** There should be enough space on the shelf to place another book.

Once these preconditions are met, you can proceed with the ""place-on-shelf"" action. This action results in several changes, called ""effects,"" that update the status of the books and your hands:

1. **You are no longer holding the book:** This shows that you have placed the book on the shelf.
2. **The book on the shelf is no longer accessible:** Because the new book is now on top of it, making it covered.
3. **The book you placed is now accessible:** This indicates the book you just placed is easy to reach.
4. **Your hands are now free:** Since you have placed the book on the shelf, your hands are empty again.
5. **The new book is on the shelf on top of the other book:** This shows the new book's position.
6. **The shelf is now considered empty for that category:** This helps in tracking the organization and availability of shelf space for that category.

To summarize, the preconditions ensure you are holding the book, the shelf has space, and the book on the shelf is accessible. The effects update the situation to show that you have placed the book on the shelf, the new book is accessible, and your hands are free again.
Parameters:
1. ?x - book
2. ?y - book
3. ?cat - category

Preconditions:
```
(and
    (shelf-empty ?cat)
    (not (holding ?x))
    (belongs-to-category ?x ?cat)
    (not (shelf-overflow ?cat))
)
```

Effects:
```
(and
    (accessible ?y)
    (not (holding ?x))
    (not (accessible ?y))
    (accessible ?x)
    (hands-free)
    (on-shelf ?x ?y)
)
```
","(:action place-on-shelf
    :parameters (?x - book ?y - book ?cat - category)
    :precondition (and (holding ?x) (accessible ?y) (belongs-to-category ?x ?cat) (not (shelf-overflow ?cat)))
    :effect (and (not (holding ?x)) (not (accessible ?y)) (accessible ?x) (hands-free) (on-shelf ?x ?y) (shelf-empty ?cat))
)","swap (accessible ?y) with (shelf-empty ?cat)
negate (holding ?x) in preconditions
"
libraryworld,place-on-shelf,0.7562539577484131,Hard Negative (Manipulated Action),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Consider a librarian holding a book and standing near a shelf. The 'place-on-shelf' action involves placing the held book on top of another book on the shelf, given that the book on the shelf is accessible. This action results in the held book becoming accessible, the book on the shelf becoming inaccessible, and the librarian's hands becoming free.

Action name: place-on-shelf


Your answer:
","**Explanation:** 

Imagine you are a librarian standing near a shelf, holding a book in your hands. You want to place this book on top of another book that is already on the shelf. This action, called ""place-on-shelf,"" needs to follow certain rules, called ""preconditions,"" to make sure everything goes smoothly.

For the action ""place-on-shelf,"" let's break down what needs to be true before you can place the book on the shelf:

1. **You must be holding the book:** This means you have the book in your hands, ready to place it on the shelf.
2. **The book on the shelf must be accessible:** The book already on the shelf should not be covered by other books or objects, so you can easily place your book on top of it.
3. **The book you are holding must belong to a certain category:** This helps in organizing the books properly according to their categories.
4. **The shelf should not be overflowing:** There should be enough space on the shelf to place another book.

Once these preconditions are met, you can proceed with the ""place-on-shelf"" action. This action results in several changes, called ""effects,"" that update the status of the books and your hands:

1. **You are no longer holding the book:** This shows that you have placed the book on the shelf.
2. **The book on the shelf is no longer accessible:** Because the new book is now on top of it, making it covered.
3. **The book you placed is now accessible:** This indicates the book you just placed is easy to reach.
4. **Your hands are now free:** Since you have placed the book on the shelf, your hands are empty again.
5. **The new book is on the shelf on top of the other book:** This shows the new book's position.
6. **The shelf is now considered empty for that category:** This helps in tracking the organization and availability of shelf space for that category.

To summarize, the preconditions ensure you are holding the book, the shelf has space, and the book on the shelf is accessible. The effects update the situation to show that you have placed the book on the shelf, the new book is accessible, and your hands are free again.
Parameters:
1. ?x - book
2. ?y - book
3. ?cat - category

Preconditions:
```
(and
    (hands-free)
    (holding ?x)
    (accessible ?y)
    (not (shelf-overflow ?cat))
)
```

Effects:
```
(and
    (accessible ?y)
    (belongs-to-category ?x ?cat)
    (not (holding ?x))
    (accessible ?x)
    (on-shelf ?x ?y)
    (shelf-empty ?cat)
)
```
","(:action place-on-shelf
    :parameters (?x - book ?y - book ?cat - category)
    :precondition (and (holding ?x) (accessible ?y) (belongs-to-category ?x ?cat) (not (shelf-overflow ?cat)))
    :effect (and (not (holding ?x)) (not (accessible ?y)) (accessible ?x) (hands-free) (on-shelf ?x ?y) (shelf-empty ?cat))
)","negate (not (accessible ?y)) in effects
swap (belongs-to-category ?x ?cat) with (hands-free)
"
libraryworld,place-on-shelf,0.7562539577484131,Hard Negative (Manipulated Action),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Consider a librarian holding a book and standing near a shelf. The 'place-on-shelf' action involves placing the held book on top of another book on the shelf, given that the book on the shelf is accessible. This action results in the held book becoming accessible, the book on the shelf becoming inaccessible, and the librarian's hands becoming free.

Action name: place-on-shelf


Your answer:
","**Explanation:** 

Imagine you are a librarian standing near a shelf, holding a book in your hands. You want to place this book on top of another book that is already on the shelf. This action, called ""place-on-shelf,"" needs to follow certain rules, called ""preconditions,"" to make sure everything goes smoothly.

For the action ""place-on-shelf,"" let's break down what needs to be true before you can place the book on the shelf:

1. **You must be holding the book:** This means you have the book in your hands, ready to place it on the shelf.
2. **The book on the shelf must be accessible:** The book already on the shelf should not be covered by other books or objects, so you can easily place your book on top of it.
3. **The book you are holding must belong to a certain category:** This helps in organizing the books properly according to their categories.
4. **The shelf should not be overflowing:** There should be enough space on the shelf to place another book.

Once these preconditions are met, you can proceed with the ""place-on-shelf"" action. This action results in several changes, called ""effects,"" that update the status of the books and your hands:

1. **You are no longer holding the book:** This shows that you have placed the book on the shelf.
2. **The book on the shelf is no longer accessible:** Because the new book is now on top of it, making it covered.
3. **The book you placed is now accessible:** This indicates the book you just placed is easy to reach.
4. **Your hands are now free:** Since you have placed the book on the shelf, your hands are empty again.
5. **The new book is on the shelf on top of the other book:** This shows the new book's position.
6. **The shelf is now considered empty for that category:** This helps in tracking the organization and availability of shelf space for that category.

To summarize, the preconditions ensure you are holding the book, the shelf has space, and the book on the shelf is accessible. The effects update the situation to show that you have placed the book on the shelf, the new book is accessible, and your hands are free again.
Parameters:
1. ?x - book
2. ?y - book
3. ?cat - category

Preconditions:
```
(and
    (holding ?x)
    (belongs-to-category ?x ?cat)
    (not (shelf-overflow ?cat))
)
```

Effects:
```
(and
    (not (holding ?x))
    (not (accessible ?y))
    (accessible ?x)
    (hands-free)
    (on-shelf ?x ?y)
    (shelf-empty ?cat)
)
```
","(:action place-on-shelf
    :parameters (?x - book ?y - book ?cat - category)
    :precondition (and (holding ?x) (accessible ?y) (belongs-to-category ?x ?cat) (not (shelf-overflow ?cat)))
    :effect (and (not (holding ?x)) (not (accessible ?y)) (accessible ?x) (hands-free) (on-shelf ?x ?y) (shelf-empty ?cat))
)","remove (accessible ?y) from preconditions
"
libraryworld,place-on-shelf,0.7562539577484131,Hard Negative (Manipulated Action),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Consider a librarian holding a book and standing near a shelf. The 'place-on-shelf' action involves placing the held book on top of another book on the shelf, given that the book on the shelf is accessible. This action results in the held book becoming accessible, the book on the shelf becoming inaccessible, and the librarian's hands becoming free.

Action name: place-on-shelf


Your answer:
","**Explanation:** 

Imagine you are a librarian standing near a shelf, holding a book in your hands. You want to place this book on top of another book that is already on the shelf. This action, called ""place-on-shelf,"" needs to follow certain rules, called ""preconditions,"" to make sure everything goes smoothly.

For the action ""place-on-shelf,"" let's break down what needs to be true before you can place the book on the shelf:

1. **You must be holding the book:** This means you have the book in your hands, ready to place it on the shelf.
2. **The book on the shelf must be accessible:** The book already on the shelf should not be covered by other books or objects, so you can easily place your book on top of it.
3. **The book you are holding must belong to a certain category:** This helps in organizing the books properly according to their categories.
4. **The shelf should not be overflowing:** There should be enough space on the shelf to place another book.

Once these preconditions are met, you can proceed with the ""place-on-shelf"" action. This action results in several changes, called ""effects,"" that update the status of the books and your hands:

1. **You are no longer holding the book:** This shows that you have placed the book on the shelf.
2. **The book on the shelf is no longer accessible:** Because the new book is now on top of it, making it covered.
3. **The book you placed is now accessible:** This indicates the book you just placed is easy to reach.
4. **Your hands are now free:** Since you have placed the book on the shelf, your hands are empty again.
5. **The new book is on the shelf on top of the other book:** This shows the new book's position.
6. **The shelf is now considered empty for that category:** This helps in tracking the organization and availability of shelf space for that category.

To summarize, the preconditions ensure you are holding the book, the shelf has space, and the book on the shelf is accessible. The effects update the situation to show that you have placed the book on the shelf, the new book is accessible, and your hands are free again.
Parameters:
1. ?x - book
2. ?y - book
3. ?cat - category

Preconditions:
```
(and
    (not (belongs-to-category ?x ?cat))
    (holding ?x)
    (accessible ?y)
    (not (shelf-overflow ?cat))
)
```

Effects:
```
(and
    (not (holding ?x))
    (accessible ?x)
    (hands-free)
    (on-shelf ?x ?y)
    (shelf-empty ?cat)
)
```
","(:action place-on-shelf
    :parameters (?x - book ?y - book ?cat - category)
    :precondition (and (holding ?x) (accessible ?y) (belongs-to-category ?x ?cat) (not (shelf-overflow ?cat)))
    :effect (and (not (holding ?x)) (not (accessible ?y)) (accessible ?x) (hands-free) (on-shelf ?x ?y) (shelf-empty ?cat))
)","remove (not (accessible ?y)) from effects
negate (belongs-to-category ?x ?cat) in preconditions
"
libraryworld,place-on-shelf,0.7562539577484131,Hard Negative (Manipulated Action),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Consider a librarian holding a book and standing near a shelf. The 'place-on-shelf' action involves placing the held book on top of another book on the shelf, given that the book on the shelf is accessible. This action results in the held book becoming accessible, the book on the shelf becoming inaccessible, and the librarian's hands becoming free.

Action name: place-on-shelf


Your answer:
","**Explanation:** 

Imagine you are a librarian standing near a shelf, holding a book in your hands. You want to place this book on top of another book that is already on the shelf. This action, called ""place-on-shelf,"" needs to follow certain rules, called ""preconditions,"" to make sure everything goes smoothly.

For the action ""place-on-shelf,"" let's break down what needs to be true before you can place the book on the shelf:

1. **You must be holding the book:** This means you have the book in your hands, ready to place it on the shelf.
2. **The book on the shelf must be accessible:** The book already on the shelf should not be covered by other books or objects, so you can easily place your book on top of it.
3. **The book you are holding must belong to a certain category:** This helps in organizing the books properly according to their categories.
4. **The shelf should not be overflowing:** There should be enough space on the shelf to place another book.

Once these preconditions are met, you can proceed with the ""place-on-shelf"" action. This action results in several changes, called ""effects,"" that update the status of the books and your hands:

1. **You are no longer holding the book:** This shows that you have placed the book on the shelf.
2. **The book on the shelf is no longer accessible:** Because the new book is now on top of it, making it covered.
3. **The book you placed is now accessible:** This indicates the book you just placed is easy to reach.
4. **Your hands are now free:** Since you have placed the book on the shelf, your hands are empty again.
5. **The new book is on the shelf on top of the other book:** This shows the new book's position.
6. **The shelf is now considered empty for that category:** This helps in tracking the organization and availability of shelf space for that category.

To summarize, the preconditions ensure you are holding the book, the shelf has space, and the book on the shelf is accessible. The effects update the situation to show that you have placed the book on the shelf, the new book is accessible, and your hands are free again.
Parameters:
1. ?x - book
2. ?y - book
3. ?cat - category

Preconditions:
```
(and
    (holding ?x)
    (belongs-to-category ?x ?cat)
    (not (shelf-overflow ?cat))
)
```

Effects:
```
(and
    (not (holding ?x))
    (not (accessible ?y))
    (accessible ?x)
    (hands-free)
    (on-shelf ?x ?y)
    (shelf-empty ?cat)
)
```
","(:action place-on-shelf
    :parameters (?x - book ?y - book ?cat - category)
    :precondition (and (holding ?x) (accessible ?y) (belongs-to-category ?x ?cat) (not (shelf-overflow ?cat)))
    :effect (and (not (holding ?x)) (not (accessible ?y)) (accessible ?x) (hands-free) (on-shelf ?x ?y) (shelf-empty ?cat))
)","remove (accessible ?y) from preconditions
"
libraryworld,place-on-shelf,0.7562539577484131,Hard Negative (Manipulated Action),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Consider a librarian holding a book and standing near a shelf. The 'place-on-shelf' action involves placing the held book on top of another book on the shelf, given that the book on the shelf is accessible. This action results in the held book becoming accessible, the book on the shelf becoming inaccessible, and the librarian's hands becoming free.

Action name: place-on-shelf


Your answer:
","**Explanation:** 

Imagine you are a librarian standing near a shelf, holding a book in your hands. You want to place this book on top of another book that is already on the shelf. This action, called ""place-on-shelf,"" needs to follow certain rules, called ""preconditions,"" to make sure everything goes smoothly.

For the action ""place-on-shelf,"" let's break down what needs to be true before you can place the book on the shelf:

1. **You must be holding the book:** This means you have the book in your hands, ready to place it on the shelf.
2. **The book on the shelf must be accessible:** The book already on the shelf should not be covered by other books or objects, so you can easily place your book on top of it.
3. **The book you are holding must belong to a certain category:** This helps in organizing the books properly according to their categories.
4. **The shelf should not be overflowing:** There should be enough space on the shelf to place another book.

Once these preconditions are met, you can proceed with the ""place-on-shelf"" action. This action results in several changes, called ""effects,"" that update the status of the books and your hands:

1. **You are no longer holding the book:** This shows that you have placed the book on the shelf.
2. **The book on the shelf is no longer accessible:** Because the new book is now on top of it, making it covered.
3. **The book you placed is now accessible:** This indicates the book you just placed is easy to reach.
4. **Your hands are now free:** Since you have placed the book on the shelf, your hands are empty again.
5. **The new book is on the shelf on top of the other book:** This shows the new book's position.
6. **The shelf is now considered empty for that category:** This helps in tracking the organization and availability of shelf space for that category.

To summarize, the preconditions ensure you are holding the book, the shelf has space, and the book on the shelf is accessible. The effects update the situation to show that you have placed the book on the shelf, the new book is accessible, and your hands are free again.
Parameters:
1. ?x - book
2. ?y - book
3. ?cat - category

Preconditions:
```
(and
    (shelf-overflow ?cat)
    (holding ?x)
    (accessible ?y)
    (belongs-to-category ?x ?cat)
)
```

Effects:
```
(and
    (not (holding ?x))
    (not (accessible ?y))
    (accessible ?x)
    (hands-free)
    (on-shelf ?x ?y)
    (shelf-empty ?cat)
)
```
","(:action place-on-shelf
    :parameters (?x - book ?y - book ?cat - category)
    :precondition (and (holding ?x) (accessible ?y) (belongs-to-category ?x ?cat) (not (shelf-overflow ?cat)))
    :effect (and (not (holding ?x)) (not (accessible ?y)) (accessible ?x) (hands-free) (on-shelf ?x ?y) (shelf-empty ?cat))
)","negate (not (shelf-overflow ?cat)) in preconditions
"
libraryworld,place-on-shelf,0.7562539577484131,Hard Negative (Manipulated Action),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Consider a librarian holding a book and standing near a shelf. The 'place-on-shelf' action involves placing the held book on top of another book on the shelf, given that the book on the shelf is accessible. This action results in the held book becoming accessible, the book on the shelf becoming inaccessible, and the librarian's hands becoming free.

Action name: place-on-shelf


Your answer:
","**Explanation:** 

Imagine you are a librarian standing near a shelf, holding a book in your hands. You want to place this book on top of another book that is already on the shelf. This action, called ""place-on-shelf,"" needs to follow certain rules, called ""preconditions,"" to make sure everything goes smoothly.

For the action ""place-on-shelf,"" let's break down what needs to be true before you can place the book on the shelf:

1. **You must be holding the book:** This means you have the book in your hands, ready to place it on the shelf.
2. **The book on the shelf must be accessible:** The book already on the shelf should not be covered by other books or objects, so you can easily place your book on top of it.
3. **The book you are holding must belong to a certain category:** This helps in organizing the books properly according to their categories.
4. **The shelf should not be overflowing:** There should be enough space on the shelf to place another book.

Once these preconditions are met, you can proceed with the ""place-on-shelf"" action. This action results in several changes, called ""effects,"" that update the status of the books and your hands:

1. **You are no longer holding the book:** This shows that you have placed the book on the shelf.
2. **The book on the shelf is no longer accessible:** Because the new book is now on top of it, making it covered.
3. **The book you placed is now accessible:** This indicates the book you just placed is easy to reach.
4. **Your hands are now free:** Since you have placed the book on the shelf, your hands are empty again.
5. **The new book is on the shelf on top of the other book:** This shows the new book's position.
6. **The shelf is now considered empty for that category:** This helps in tracking the organization and availability of shelf space for that category.

To summarize, the preconditions ensure you are holding the book, the shelf has space, and the book on the shelf is accessible. The effects update the situation to show that you have placed the book on the shelf, the new book is accessible, and your hands are free again.
Parameters:
1. ?x - book
2. ?y - book
3. ?cat - category

Preconditions:
```
(and
    (not (holding ?x))
    (holding ?x)
    (accessible ?y)
    (not (shelf-overflow ?cat))
)
```

Effects:
```
(and
    (belongs-to-category ?x ?cat)
    (not (accessible ?y))
    (accessible ?x)
    (hands-free)
    (on-shelf ?x ?y)
)
```
","(:action place-on-shelf
    :parameters (?x - book ?y - book ?cat - category)
    :precondition (and (holding ?x) (accessible ?y) (belongs-to-category ?x ?cat) (not (shelf-overflow ?cat)))
    :effect (and (not (holding ?x)) (not (accessible ?y)) (accessible ?x) (hands-free) (on-shelf ?x ?y) (shelf-empty ?cat))
)","swap (belongs-to-category ?x ?cat) with (not (holding ?x))
remove (shelf-empty ?cat) from effects
"
libraryworld,place-on-shelf,0.7562539577484131,Hard Negative (Manipulated Action),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Consider a librarian holding a book and standing near a shelf. The 'place-on-shelf' action involves placing the held book on top of another book on the shelf, given that the book on the shelf is accessible. This action results in the held book becoming accessible, the book on the shelf becoming inaccessible, and the librarian's hands becoming free.

Action name: place-on-shelf


Your answer:
","**Explanation:** 

Imagine you are a librarian standing near a shelf, holding a book in your hands. You want to place this book on top of another book that is already on the shelf. This action, called ""place-on-shelf,"" needs to follow certain rules, called ""preconditions,"" to make sure everything goes smoothly.

For the action ""place-on-shelf,"" let's break down what needs to be true before you can place the book on the shelf:

1. **You must be holding the book:** This means you have the book in your hands, ready to place it on the shelf.
2. **The book on the shelf must be accessible:** The book already on the shelf should not be covered by other books or objects, so you can easily place your book on top of it.
3. **The book you are holding must belong to a certain category:** This helps in organizing the books properly according to their categories.
4. **The shelf should not be overflowing:** There should be enough space on the shelf to place another book.

Once these preconditions are met, you can proceed with the ""place-on-shelf"" action. This action results in several changes, called ""effects,"" that update the status of the books and your hands:

1. **You are no longer holding the book:** This shows that you have placed the book on the shelf.
2. **The book on the shelf is no longer accessible:** Because the new book is now on top of it, making it covered.
3. **The book you placed is now accessible:** This indicates the book you just placed is easy to reach.
4. **Your hands are now free:** Since you have placed the book on the shelf, your hands are empty again.
5. **The new book is on the shelf on top of the other book:** This shows the new book's position.
6. **The shelf is now considered empty for that category:** This helps in tracking the organization and availability of shelf space for that category.

To summarize, the preconditions ensure you are holding the book, the shelf has space, and the book on the shelf is accessible. The effects update the situation to show that you have placed the book on the shelf, the new book is accessible, and your hands are free again.
Parameters:
1. ?x - book
2. ?y - book
3. ?cat - category

Preconditions:
```
(and
    (accessible ?y)
    (belongs-to-category ?x ?cat)
    (not (shelf-overflow ?cat))
)
```

Effects:
```
(and
    (not (holding ?x))
    (not (accessible ?y))
    (accessible ?x)
    (hands-free)
    (on-shelf ?x ?y)
    (shelf-empty ?cat)
)
```
","(:action place-on-shelf
    :parameters (?x - book ?y - book ?cat - category)
    :precondition (and (holding ?x) (accessible ?y) (belongs-to-category ?x ?cat) (not (shelf-overflow ?cat)))
    :effect (and (not (holding ?x)) (not (accessible ?y)) (accessible ?x) (hands-free) (on-shelf ?x ?y) (shelf-empty ?cat))
)","remove (holding ?x) from preconditions
"
libraryworld,place-on-shelf,0.7562539577484131,Hard Negative (Manipulated Action),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.

A list of available predicates
1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf
2. (on-table ?x - book) ;; ?x is on the table
3. (accessible ?x - book) ;; ?x is accessible (not covered)
4. (hands-free) ;; The hands of the librarian are free
5. (holding ?x - book) ;; The librarian is holding ?x
6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat
7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty
8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full
9. (book-request ?book - book) ;; There is a request for book ?book
10. (return-due ?book - book) ;; Book ?book is due for return
11. (checked-out ?book - book) ;; Book ?book is checked out

Action Description: Consider a librarian holding a book and standing near a shelf. The 'place-on-shelf' action involves placing the held book on top of another book on the shelf, given that the book on the shelf is accessible. This action results in the held book becoming accessible, the book on the shelf becoming inaccessible, and the librarian's hands becoming free.

Action name: place-on-shelf


Your answer:
","**Explanation:** 

Imagine you are a librarian standing near a shelf, holding a book in your hands. You want to place this book on top of another book that is already on the shelf. This action, called ""place-on-shelf,"" needs to follow certain rules, called ""preconditions,"" to make sure everything goes smoothly.

For the action ""place-on-shelf,"" let's break down what needs to be true before you can place the book on the shelf:

1. **You must be holding the book:** This means you have the book in your hands, ready to place it on the shelf.
2. **The book on the shelf must be accessible:** The book already on the shelf should not be covered by other books or objects, so you can easily place your book on top of it.
3. **The book you are holding must belong to a certain category:** This helps in organizing the books properly according to their categories.
4. **The shelf should not be overflowing:** There should be enough space on the shelf to place another book.

Once these preconditions are met, you can proceed with the ""place-on-shelf"" action. This action results in several changes, called ""effects,"" that update the status of the books and your hands:

1. **You are no longer holding the book:** This shows that you have placed the book on the shelf.
2. **The book on the shelf is no longer accessible:** Because the new book is now on top of it, making it covered.
3. **The book you placed is now accessible:** This indicates the book you just placed is easy to reach.
4. **Your hands are now free:** Since you have placed the book on the shelf, your hands are empty again.
5. **The new book is on the shelf on top of the other book:** This shows the new book's position.
6. **The shelf is now considered empty for that category:** This helps in tracking the organization and availability of shelf space for that category.

To summarize, the preconditions ensure you are holding the book, the shelf has space, and the book on the shelf is accessible. The effects update the situation to show that you have placed the book on the shelf, the new book is accessible, and your hands are free again.
Parameters:
1. ?x - book
2. ?y - book
3. ?cat - category

Preconditions:
```
(and
    (not (accessible ?y))
    (not (holding ?x))
    (accessible ?y)
    (belongs-to-category ?x ?cat)
)
```

Effects:
```
(and
    (not (shelf-overflow ?cat))
    (not (holding ?x))
    (accessible ?x)
    (hands-free)
    (on-shelf ?x ?y)
    (shelf-empty ?cat)
)
```
","(:action place-on-shelf
    :parameters (?x - book ?y - book ?cat - category)
    :precondition (and (holding ?x) (accessible ?y) (belongs-to-category ?x ?cat) (not (shelf-overflow ?cat)))
    :effect (and (not (holding ?x)) (not (accessible ?y)) (accessible ?x) (hands-free) (on-shelf ?x ?y) (shelf-empty ?cat))
)","swap (not (shelf-overflow ?cat)) with (not (accessible ?y))
negate (holding ?x) in preconditions
"
rpggame,move-to-trap,0.5180956125259399,Positive (Correct Match),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: The hero can **move** to an adjacent room (connected by a corridor) that has not been destroyed (i.e., the hero has not already visited the room). When this action is executed, the hero gets into a location with a trap

Action name: move-to-trap


Your answer:
","Parameters:
1. ?from - cells
2. ?to - cells

Preconditions:
```
(and
    (connected ?from ?to)
    (at-hero ?from)
    (not (is-destroyed ?to))
    (not (has-trap ?from))
    (has-trap ?to)
    (arm-free)
)
```

Effects:
```
(and
    (at-hero ?to)
    (is-destroyed ?from)
    (not (at-hero ?from))
)
```
","(:action move-to-trap
    :parameters (?from - cells ?to - cells)
    :precondition (and (connected ?from ?to) (at-hero ?from) (not (is-destroyed ?to)) (not (has-trap ?from)) (has-trap ?to) (arm-free))
    :effect (and (at-hero ?to) (is-destroyed ?from) (not (at-hero ?from)))
)",
rpggame,move-to-trap,0.5180956125259399,Positive (Correct Match),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: The hero can **move** to an adjacent room (connected by a corridor) that has not been destroyed (i.e., the hero has not already visited the room). When this action is executed, the hero gets into a location with a trap

Action name: move-to-trap


Your answer:

**Explanation:**

Imagine you're guiding a hero who just woke up in a mysterious dungeon. Each room can have different things: some are empty, others have monsters, some have traps, and a few might have swords. There's also a special room with an exit—our hero's goal.

Now, let's talk about the action called **move-to-trap**. This action involves our hero moving from one room (we'll call it ""Room A"") to another room (""Room B""), where, unfortunately, there's a trap waiting. Here's why each part of the plan (or action schema) makes sense:

1. **Connected Rooms**: Our hero can only move to a room directly connected to the one they're currently in. This is like being in your house and only being able to walk into rooms that have doors leading from where you are now.

2. **Hero's Current Location**: The hero must start in Room A to move to Room B. You can't move from a place if you're not actually there, right?

3. **Room B Not Destroyed**: The room our hero is moving to mustn't be already destroyed (or in ruins). It's like making sure the bridge you want to cross hasn't collapsed.

4. **Room A Doesn't Have a Trap**: It’s safer if the room our hero is leaving doesn't have a trap. Imagine trying to leave a room with a trap; it could activate and cause trouble!

5. **Room B Has a Trap**: Since the action is called **move-to-trap**, it specifically involves moving to a room with a trap, almost like knowing there's a puddle ahead but stepping into it anyway because it's the only path forward.

6. **Hero's Arm is Free**: This indicates that the hero isn’t holding anything like a sword. It’s important because handling traps might require free hands—think about needing your hands free to disarm or avoid a trap carefully.

When our hero completes this action, several things happen:
- **Hero is now in Room B**: Just like when you walk into another room, you’re no longer in the first room.
- **Room A is destroyed**: This could mean the hero leaves it in a way that no one can follow—maybe they close a heavy door that locks automatically.
- **Hero is no longer in Room A**: It confirms that the hero has completely left Room A.

This action is designed for specific situations in the dungeon where the hero might need to move strategically, even into risky areas, to navigate through the dungeon and eventually find the exit.","Parameters:
1. ?from - cells
2. ?to - cells

Preconditions:
```
(and
    (connected ?from ?to)
    (at-hero ?from)
    (not (is-destroyed ?to))
    (not (has-trap ?from))
    (has-trap ?to)
    (arm-free)
)
```

Effects:
```
(and
    (at-hero ?to)
    (is-destroyed ?from)
    (not (at-hero ?from))
)
```
","(:action move-to-trap
    :parameters (?from - cells ?to - cells)
    :precondition (and (connected ?from ?to) (at-hero ?from) (not (is-destroyed ?to)) (not (has-trap ?from)) (has-trap ?to) (arm-free))
    :effect (and (at-hero ?to) (is-destroyed ?from) (not (at-hero ?from)))
)",
rpggame,move-to-trap,0.7892916798591614,Positive (Correct Match),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: The hero can **move** to an adjacent room (connected by a corridor) that has not been destroyed (i.e., the hero has not already visited the room). When this action is executed, the hero gets into a location with a trap

Action name: move-to-trap


Your answer:
","**Explanation:**

Imagine you're guiding a hero who just woke up in a mysterious dungeon. Each room can have different things: some are empty, others have monsters, some have traps, and a few might have swords. There's also a special room with an exit—our hero's goal.

Now, let's talk about the action called **move-to-trap**. This action involves our hero moving from one room (we'll call it ""Room A"") to another room (""Room B""), where, unfortunately, there's a trap waiting. Here's why each part of the plan (or action schema) makes sense:

1. **Connected Rooms**: Our hero can only move to a room directly connected to the one they're currently in. This is like being in your house and only being able to walk into rooms that have doors leading from where you are now.

2. **Hero's Current Location**: The hero must start in Room A to move to Room B. You can't move from a place if you're not actually there, right?

3. **Room B Not Destroyed**: The room our hero is moving to mustn't be already destroyed (or in ruins). It's like making sure the bridge you want to cross hasn't collapsed.

4. **Room A Doesn't Have a Trap**: It’s safer if the room our hero is leaving doesn't have a trap. Imagine trying to leave a room with a trap; it could activate and cause trouble!

5. **Room B Has a Trap**: Since the action is called **move-to-trap**, it specifically involves moving to a room with a trap, almost like knowing there's a puddle ahead but stepping into it anyway because it's the only path forward.

6. **Hero's Arm is Free**: This indicates that the hero isn’t holding anything like a sword. It’s important because handling traps might require free hands—think about needing your hands free to disarm or avoid a trap carefully.

When our hero completes this action, several things happen:
- **Hero is now in Room B**: Just like when you walk into another room, you’re no longer in the first room.
- **Room A is destroyed**: This could mean the hero leaves it in a way that no one can follow—maybe they close a heavy door that locks automatically.
- **Hero is no longer in Room A**: It confirms that the hero has completely left Room A.

This action is designed for specific situations in the dungeon where the hero might need to move strategically, even into risky areas, to navigate through the dungeon and eventually find the exit.
Parameters:
1. ?from - cells
2. ?to - cells

Preconditions:
```
(and
    (connected ?from ?to)
    (at-hero ?from)
    (not (is-destroyed ?to))
    (not (has-trap ?from))
    (has-trap ?to)
    (arm-free)
)
```

Effects:
```
(and
    (at-hero ?to)
    (is-destroyed ?from)
    (not (at-hero ?from))
)
```
","(:action move-to-trap
    :parameters (?from - cells ?to - cells)
    :precondition (and (connected ?from ?to) (at-hero ?from) (not (is-destroyed ?to)) (not (has-trap ?from)) (has-trap ?to) (arm-free))
    :effect (and (at-hero ?to) (is-destroyed ?from) (not (at-hero ?from)))
)",
rpggame,move-to-trap,0.055100973695516586,Easy Negative (Inter-Domain Mismatch),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: The hero can **move** to an adjacent room (connected by a corridor) that has not been destroyed (i.e., the hero has not already visited the room). When this action is executed, the hero gets into a location with a trap

Action name: move-to-trap


Your answer:
","Parameters:
1. ?var0 - moveable
2. ?var1 - agent

Preconditions:
```
(equipped ?var0 ?var1)
```

Effects:
```
(and
    (inventory ?var0)
    (not (equipped ?var0 ?var1))
    (handsfree ?var1)
)
```
","(:action move-to-trap
    :parameters (?from - cells ?to - cells)
    :precondition (and (connected ?from ?to) (at-hero ?from) (not (is-destroyed ?to)) (not (has-trap ?from)) (has-trap ?to) (arm-free))
    :effect (and (at-hero ?to) (is-destroyed ?from) (not (at-hero ?from)))
)",
rpggame,move-to-trap,0.25146690011024475,Easy Negative (Inter-Domain Mismatch),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: The hero can **move** to an adjacent room (connected by a corridor) that has not been destroyed (i.e., the hero has not already visited the room). When this action is executed, the hero gets into a location with a trap

Action name: move-to-trap


Your answer:
","Parameters:
1. ?var0 - moveable
2. ?var1 - agent
3. ?var2 - moveable

Preconditions:
```
(and
    (hypothetical ?var0)
    (is_log ?var2)
    (equipped ?var2 ?var1)
)
```

Effects:
```
(and
    (inventory ?var0)
    (is_planks ?var0)
    (handsfree ?var1)
    (not (equipped ?var2 ?var1))
    (not (hypothetical ?var0))
    (not (is_log ?var2))
)
```
","(:action move-to-trap
    :parameters (?from - cells ?to - cells)
    :precondition (and (connected ?from ?to) (at-hero ?from) (not (is-destroyed ?to)) (not (has-trap ?from)) (has-trap ?to) (arm-free))
    :effect (and (at-hero ?to) (is-destroyed ?from) (not (at-hero ?from)))
)",
rpggame,move-to-trap,0.08231978118419647,Easy Negative (Inter-Domain Mismatch),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: The hero can **move** to an adjacent room (connected by a corridor) that has not been destroyed (i.e., the hero has not already visited the room). When this action is executed, the hero gets into a location with a trap

Action name: move-to-trap


Your answer:
","Parameters:
1. ?var0 - static
2. ?var1 - static

Preconditions:
```
(agent_at ?var1)
```

Effects:
```
(and
    (agent_at ?var0)
    (not (agent_at ?var1))
)
```
","(:action move-to-trap
    :parameters (?from - cells ?to - cells)
    :precondition (and (connected ?from ?to) (at-hero ?from) (not (is-destroyed ?to)) (not (has-trap ?from)) (has-trap ?to) (arm-free))
    :effect (and (at-hero ?to) (is-destroyed ?from) (not (at-hero ?from)))
)",
rpggame,move-to-trap,0.16986292600631714,Easy Negative (Inter-Domain Mismatch),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: The hero can **move** to an adjacent room (connected by a corridor) that has not been destroyed (i.e., the hero has not already visited the room). When this action is executed, the hero gets into a location with a trap

Action name: move-to-trap


Your answer:
","Parameters:
1. ?var0 - moveable
2. ?var1 - agent

Preconditions:
```
(and
    (inventory ?var0)
    (handsfree ?var1)
)
```

Effects:
```
(and
    (equipped ?var0 ?var1)
    (not (handsfree ?var1))
    (not (inventory ?var0))
)
```
","(:action move-to-trap
    :parameters (?from - cells ?to - cells)
    :precondition (and (connected ?from ?to) (at-hero ?from) (not (is-destroyed ?to)) (not (has-trap ?from)) (has-trap ?to) (arm-free))
    :effect (and (at-hero ?to) (is-destroyed ?from) (not (at-hero ?from)))
)",
rpggame,move-to-trap,0.10609016567468643,Easy Negative (Inter-Domain Mismatch),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: The hero can **move** to an adjacent room (connected by a corridor) that has not been destroyed (i.e., the hero has not already visited the room). When this action is executed, the hero gets into a location with a trap

Action name: move-to-trap


Your answer:
","Parameters:
1. ?var0 - moveable
2. ?var1 - static

Preconditions:
```
(and
    (at ?var0 ?var1)
    (agent_at ?var1)
)
```

Effects:
```
(and
    (inventory ?var0)
    (not (at ?var0 ?var1))
)
```
","(:action move-to-trap
    :parameters (?from - cells ?to - cells)
    :precondition (and (connected ?from ?to) (at-hero ?from) (not (is-destroyed ?to)) (not (has-trap ?from)) (has-trap ?to) (arm-free))
    :effect (and (at-hero ?to) (is-destroyed ?from) (not (at-hero ?from)))
)",
rpggame,move-to-trap,0.055100973695516586,Easy Negative (Inter-Domain Mismatch),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: The hero can **move** to an adjacent room (connected by a corridor) that has not been destroyed (i.e., the hero has not already visited the room). When this action is executed, the hero gets into a location with a trap

Action name: move-to-trap


Your answer:

**Explanation:**

Imagine you're guiding a hero who just woke up in a mysterious dungeon. Each room can have different things: some are empty, others have monsters, some have traps, and a few might have swords. There's also a special room with an exit—our hero's goal.

Now, let's talk about the action called **move-to-trap**. This action involves our hero moving from one room (we'll call it ""Room A"") to another room (""Room B""), where, unfortunately, there's a trap waiting. Here's why each part of the plan (or action schema) makes sense:

1. **Connected Rooms**: Our hero can only move to a room directly connected to the one they're currently in. This is like being in your house and only being able to walk into rooms that have doors leading from where you are now.

2. **Hero's Current Location**: The hero must start in Room A to move to Room B. You can't move from a place if you're not actually there, right?

3. **Room B Not Destroyed**: The room our hero is moving to mustn't be already destroyed (or in ruins). It's like making sure the bridge you want to cross hasn't collapsed.

4. **Room A Doesn't Have a Trap**: It’s safer if the room our hero is leaving doesn't have a trap. Imagine trying to leave a room with a trap; it could activate and cause trouble!

5. **Room B Has a Trap**: Since the action is called **move-to-trap**, it specifically involves moving to a room with a trap, almost like knowing there's a puddle ahead but stepping into it anyway because it's the only path forward.

6. **Hero's Arm is Free**: This indicates that the hero isn’t holding anything like a sword. It’s important because handling traps might require free hands—think about needing your hands free to disarm or avoid a trap carefully.

When our hero completes this action, several things happen:
- **Hero is now in Room B**: Just like when you walk into another room, you’re no longer in the first room.
- **Room A is destroyed**: This could mean the hero leaves it in a way that no one can follow—maybe they close a heavy door that locks automatically.
- **Hero is no longer in Room A**: It confirms that the hero has completely left Room A.

This action is designed for specific situations in the dungeon where the hero might need to move strategically, even into risky areas, to navigate through the dungeon and eventually find the exit.","Parameters:
1. ?var0 - moveable
2. ?var1 - agent

Preconditions:
```
(equipped ?var0 ?var1)
```

Effects:
```
(and
    (inventory ?var0)
    (not (equipped ?var0 ?var1))
    (handsfree ?var1)
)
```
","(:action move-to-trap
    :parameters (?from - cells ?to - cells)
    :precondition (and (connected ?from ?to) (at-hero ?from) (not (is-destroyed ?to)) (not (has-trap ?from)) (has-trap ?to) (arm-free))
    :effect (and (at-hero ?to) (is-destroyed ?from) (not (at-hero ?from)))
)",
rpggame,move-to-trap,0.25146690011024475,Easy Negative (Inter-Domain Mismatch),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: The hero can **move** to an adjacent room (connected by a corridor) that has not been destroyed (i.e., the hero has not already visited the room). When this action is executed, the hero gets into a location with a trap

Action name: move-to-trap


Your answer:

**Explanation:**

Imagine you're guiding a hero who just woke up in a mysterious dungeon. Each room can have different things: some are empty, others have monsters, some have traps, and a few might have swords. There's also a special room with an exit—our hero's goal.

Now, let's talk about the action called **move-to-trap**. This action involves our hero moving from one room (we'll call it ""Room A"") to another room (""Room B""), where, unfortunately, there's a trap waiting. Here's why each part of the plan (or action schema) makes sense:

1. **Connected Rooms**: Our hero can only move to a room directly connected to the one they're currently in. This is like being in your house and only being able to walk into rooms that have doors leading from where you are now.

2. **Hero's Current Location**: The hero must start in Room A to move to Room B. You can't move from a place if you're not actually there, right?

3. **Room B Not Destroyed**: The room our hero is moving to mustn't be already destroyed (or in ruins). It's like making sure the bridge you want to cross hasn't collapsed.

4. **Room A Doesn't Have a Trap**: It’s safer if the room our hero is leaving doesn't have a trap. Imagine trying to leave a room with a trap; it could activate and cause trouble!

5. **Room B Has a Trap**: Since the action is called **move-to-trap**, it specifically involves moving to a room with a trap, almost like knowing there's a puddle ahead but stepping into it anyway because it's the only path forward.

6. **Hero's Arm is Free**: This indicates that the hero isn’t holding anything like a sword. It’s important because handling traps might require free hands—think about needing your hands free to disarm or avoid a trap carefully.

When our hero completes this action, several things happen:
- **Hero is now in Room B**: Just like when you walk into another room, you’re no longer in the first room.
- **Room A is destroyed**: This could mean the hero leaves it in a way that no one can follow—maybe they close a heavy door that locks automatically.
- **Hero is no longer in Room A**: It confirms that the hero has completely left Room A.

This action is designed for specific situations in the dungeon where the hero might need to move strategically, even into risky areas, to navigate through the dungeon and eventually find the exit.","Parameters:
1. ?var0 - moveable
2. ?var1 - agent
3. ?var2 - moveable

Preconditions:
```
(and
    (hypothetical ?var0)
    (is_log ?var2)
    (equipped ?var2 ?var1)
)
```

Effects:
```
(and
    (inventory ?var0)
    (is_planks ?var0)
    (handsfree ?var1)
    (not (equipped ?var2 ?var1))
    (not (hypothetical ?var0))
    (not (is_log ?var2))
)
```
","(:action move-to-trap
    :parameters (?from - cells ?to - cells)
    :precondition (and (connected ?from ?to) (at-hero ?from) (not (is-destroyed ?to)) (not (has-trap ?from)) (has-trap ?to) (arm-free))
    :effect (and (at-hero ?to) (is-destroyed ?from) (not (at-hero ?from)))
)",
rpggame,move-to-trap,0.08231978118419647,Easy Negative (Inter-Domain Mismatch),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: The hero can **move** to an adjacent room (connected by a corridor) that has not been destroyed (i.e., the hero has not already visited the room). When this action is executed, the hero gets into a location with a trap

Action name: move-to-trap


Your answer:

**Explanation:**

Imagine you're guiding a hero who just woke up in a mysterious dungeon. Each room can have different things: some are empty, others have monsters, some have traps, and a few might have swords. There's also a special room with an exit—our hero's goal.

Now, let's talk about the action called **move-to-trap**. This action involves our hero moving from one room (we'll call it ""Room A"") to another room (""Room B""), where, unfortunately, there's a trap waiting. Here's why each part of the plan (or action schema) makes sense:

1. **Connected Rooms**: Our hero can only move to a room directly connected to the one they're currently in. This is like being in your house and only being able to walk into rooms that have doors leading from where you are now.

2. **Hero's Current Location**: The hero must start in Room A to move to Room B. You can't move from a place if you're not actually there, right?

3. **Room B Not Destroyed**: The room our hero is moving to mustn't be already destroyed (or in ruins). It's like making sure the bridge you want to cross hasn't collapsed.

4. **Room A Doesn't Have a Trap**: It’s safer if the room our hero is leaving doesn't have a trap. Imagine trying to leave a room with a trap; it could activate and cause trouble!

5. **Room B Has a Trap**: Since the action is called **move-to-trap**, it specifically involves moving to a room with a trap, almost like knowing there's a puddle ahead but stepping into it anyway because it's the only path forward.

6. **Hero's Arm is Free**: This indicates that the hero isn’t holding anything like a sword. It’s important because handling traps might require free hands—think about needing your hands free to disarm or avoid a trap carefully.

When our hero completes this action, several things happen:
- **Hero is now in Room B**: Just like when you walk into another room, you’re no longer in the first room.
- **Room A is destroyed**: This could mean the hero leaves it in a way that no one can follow—maybe they close a heavy door that locks automatically.
- **Hero is no longer in Room A**: It confirms that the hero has completely left Room A.

This action is designed for specific situations in the dungeon where the hero might need to move strategically, even into risky areas, to navigate through the dungeon and eventually find the exit.","Parameters:
1. ?var0 - static
2. ?var1 - static

Preconditions:
```
(agent_at ?var1)
```

Effects:
```
(and
    (agent_at ?var0)
    (not (agent_at ?var1))
)
```
","(:action move-to-trap
    :parameters (?from - cells ?to - cells)
    :precondition (and (connected ?from ?to) (at-hero ?from) (not (is-destroyed ?to)) (not (has-trap ?from)) (has-trap ?to) (arm-free))
    :effect (and (at-hero ?to) (is-destroyed ?from) (not (at-hero ?from)))
)",
rpggame,move-to-trap,0.16986292600631714,Easy Negative (Inter-Domain Mismatch),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: The hero can **move** to an adjacent room (connected by a corridor) that has not been destroyed (i.e., the hero has not already visited the room). When this action is executed, the hero gets into a location with a trap

Action name: move-to-trap


Your answer:

**Explanation:**

Imagine you're guiding a hero who just woke up in a mysterious dungeon. Each room can have different things: some are empty, others have monsters, some have traps, and a few might have swords. There's also a special room with an exit—our hero's goal.

Now, let's talk about the action called **move-to-trap**. This action involves our hero moving from one room (we'll call it ""Room A"") to another room (""Room B""), where, unfortunately, there's a trap waiting. Here's why each part of the plan (or action schema) makes sense:

1. **Connected Rooms**: Our hero can only move to a room directly connected to the one they're currently in. This is like being in your house and only being able to walk into rooms that have doors leading from where you are now.

2. **Hero's Current Location**: The hero must start in Room A to move to Room B. You can't move from a place if you're not actually there, right?

3. **Room B Not Destroyed**: The room our hero is moving to mustn't be already destroyed (or in ruins). It's like making sure the bridge you want to cross hasn't collapsed.

4. **Room A Doesn't Have a Trap**: It’s safer if the room our hero is leaving doesn't have a trap. Imagine trying to leave a room with a trap; it could activate and cause trouble!

5. **Room B Has a Trap**: Since the action is called **move-to-trap**, it specifically involves moving to a room with a trap, almost like knowing there's a puddle ahead but stepping into it anyway because it's the only path forward.

6. **Hero's Arm is Free**: This indicates that the hero isn’t holding anything like a sword. It’s important because handling traps might require free hands—think about needing your hands free to disarm or avoid a trap carefully.

When our hero completes this action, several things happen:
- **Hero is now in Room B**: Just like when you walk into another room, you’re no longer in the first room.
- **Room A is destroyed**: This could mean the hero leaves it in a way that no one can follow—maybe they close a heavy door that locks automatically.
- **Hero is no longer in Room A**: It confirms that the hero has completely left Room A.

This action is designed for specific situations in the dungeon where the hero might need to move strategically, even into risky areas, to navigate through the dungeon and eventually find the exit.","Parameters:
1. ?var0 - moveable
2. ?var1 - agent

Preconditions:
```
(and
    (inventory ?var0)
    (handsfree ?var1)
)
```

Effects:
```
(and
    (equipped ?var0 ?var1)
    (not (handsfree ?var1))
    (not (inventory ?var0))
)
```
","(:action move-to-trap
    :parameters (?from - cells ?to - cells)
    :precondition (and (connected ?from ?to) (at-hero ?from) (not (is-destroyed ?to)) (not (has-trap ?from)) (has-trap ?to) (arm-free))
    :effect (and (at-hero ?to) (is-destroyed ?from) (not (at-hero ?from)))
)",
rpggame,move-to-trap,0.10609016567468643,Easy Negative (Inter-Domain Mismatch),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: The hero can **move** to an adjacent room (connected by a corridor) that has not been destroyed (i.e., the hero has not already visited the room). When this action is executed, the hero gets into a location with a trap

Action name: move-to-trap


Your answer:

**Explanation:**

Imagine you're guiding a hero who just woke up in a mysterious dungeon. Each room can have different things: some are empty, others have monsters, some have traps, and a few might have swords. There's also a special room with an exit—our hero's goal.

Now, let's talk about the action called **move-to-trap**. This action involves our hero moving from one room (we'll call it ""Room A"") to another room (""Room B""), where, unfortunately, there's a trap waiting. Here's why each part of the plan (or action schema) makes sense:

1. **Connected Rooms**: Our hero can only move to a room directly connected to the one they're currently in. This is like being in your house and only being able to walk into rooms that have doors leading from where you are now.

2. **Hero's Current Location**: The hero must start in Room A to move to Room B. You can't move from a place if you're not actually there, right?

3. **Room B Not Destroyed**: The room our hero is moving to mustn't be already destroyed (or in ruins). It's like making sure the bridge you want to cross hasn't collapsed.

4. **Room A Doesn't Have a Trap**: It’s safer if the room our hero is leaving doesn't have a trap. Imagine trying to leave a room with a trap; it could activate and cause trouble!

5. **Room B Has a Trap**: Since the action is called **move-to-trap**, it specifically involves moving to a room with a trap, almost like knowing there's a puddle ahead but stepping into it anyway because it's the only path forward.

6. **Hero's Arm is Free**: This indicates that the hero isn’t holding anything like a sword. It’s important because handling traps might require free hands—think about needing your hands free to disarm or avoid a trap carefully.

When our hero completes this action, several things happen:
- **Hero is now in Room B**: Just like when you walk into another room, you’re no longer in the first room.
- **Room A is destroyed**: This could mean the hero leaves it in a way that no one can follow—maybe they close a heavy door that locks automatically.
- **Hero is no longer in Room A**: It confirms that the hero has completely left Room A.

This action is designed for specific situations in the dungeon where the hero might need to move strategically, even into risky areas, to navigate through the dungeon and eventually find the exit.","Parameters:
1. ?var0 - moveable
2. ?var1 - static

Preconditions:
```
(and
    (at ?var0 ?var1)
    (agent_at ?var1)
)
```

Effects:
```
(and
    (inventory ?var0)
    (not (at ?var0 ?var1))
)
```
","(:action move-to-trap
    :parameters (?from - cells ?to - cells)
    :precondition (and (connected ?from ?to) (at-hero ?from) (not (is-destroyed ?to)) (not (has-trap ?from)) (has-trap ?to) (arm-free))
    :effect (and (at-hero ?to) (is-destroyed ?from) (not (at-hero ?from)))
)",
rpggame,move-to-trap,0.11406250298023224,Easy Negative (Inter-Domain Mismatch),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: The hero can **move** to an adjacent room (connected by a corridor) that has not been destroyed (i.e., the hero has not already visited the room). When this action is executed, the hero gets into a location with a trap

Action name: move-to-trap


Your answer:
","**Explanation:** 

Imagine you are a librarian in a library, and you need to take a book off the shelf. This book is placed on top of another book. The action ""remove-from-shelf"" lets you take the top book off the shelf. To do this, certain conditions, called ""preconditions,"" must be met to make sure you can successfully take the book.

For the action ""remove-from-shelf,"" let's break down what needs to be true before you can take the book off the shelf:

1. **The book must be on the shelf:** This means the book you want to take is on top of another book on the shelf.
2. **The book must be accessible:** This means the book isn't covered by other books or objects, so you can easily reach it.
3. **Your hands must be free:** You need to have empty hands to pick up the book, meaning you aren't already holding something else.
4. **The book must belong to a certain category:** This helps you know which book you are taking and ensures you are organizing the books properly.

Once these preconditions are met, you can proceed with the ""remove-from-shelf"" action. This action results in several changes, called ""effects,"" that update the status of the books and your hands:

1. **You are now holding the book:** This indicates you have picked up the book from the shelf.
2. **The book underneath becomes accessible:** Since you have removed the top book, the book underneath is now easy to reach.
3. **The book you removed is no longer accessible:** Because you are holding the book, it's not available on the shelf anymore.
4. **Your hands are no longer free:** Since you are now holding the book, your hands are occupied.
5. **The book is no longer on the shelf:** This shows that the book has been taken off the shelf.
6. **The shelf is now empty for that category:** This helps keep track of the shelf space and organization.

To summarize, the preconditions ensure the book is on the shelf, accessible, your hands are free, and you know which category the book belongs to. The effects update the situation to show you are holding the book, the book underneath is now accessible, and the shelf is empty for that category.
Parameters:
1. ?x - book
2. ?y - book
3. ?cat - category

Preconditions:
```
(and
    (on-shelf ?x ?y)
    (accessible ?x)
    (hands-free)
    (belongs-to-category ?x ?cat)
)
```

Effects:
```
(and
    (holding ?x)
    (accessible ?y)
    (not (accessible ?x))
    (not (hands-free))
    (not (on-shelf ?x ?y))
    (shelf-empty ?cat)
)
```
","(:action move-to-trap
    :parameters (?from - cells ?to - cells)
    :precondition (and (connected ?from ?to) (at-hero ?from) (not (is-destroyed ?to)) (not (has-trap ?from)) (has-trap ?to) (arm-free))
    :effect (and (at-hero ?to) (is-destroyed ?from) (not (at-hero ?from)))
)",
rpggame,move-to-trap,0.10156753659248352,Easy Negative (Inter-Domain Mismatch),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: The hero can **move** to an adjacent room (connected by a corridor) that has not been destroyed (i.e., the hero has not already visited the room). When this action is executed, the hero gets into a location with a trap

Action name: move-to-trap


Your answer:
","**Explanation:** 

Imagine you are a librarian holding a book in your hands, and you want to place it on a nearby table. The action ""place-on-table"" lets you do this. To make sure everything goes smoothly, there is a condition, called a ""precondition,"" that must be met before you can place the book on the table.

For the action ""place-on-table,"" let's break down what needs to be true before you can place the book on the table:

1. **You must be holding the book:** This means you have the book in your hands, ready to place it on the table.

Once this precondition is met, you can proceed with the ""place-on-table"" action. This action results in several changes, called ""effects,"" that update the status of the book and your hands:

1. **You are no longer holding the book:** This shows that you have placed the book on the table.
2. **The book becomes accessible:** Now that the book is on the table, it is easy to reach and pick up again if needed.
3. **Your hands are now free:** Since you have placed the book on the table, your hands are empty again.
4. **The book is on the table:** This indicates the new location of the book.

To summarize, the precondition ensures you are holding the book, making sure you are ready to place it on the table. The effects update the situation to show that you have placed the book on the table, it is now accessible, and your hands are free again.
Parameters:
1. ?x - book

Preconditions:
```
(holding ?x)
```

Effects:
```
(and
    (not (holding ?x))
    (accessible ?x)
    (hands-free)
    (on-table ?x)
)
```
","(:action move-to-trap
    :parameters (?from - cells ?to - cells)
    :precondition (and (connected ?from ?to) (at-hero ?from) (not (is-destroyed ?to)) (not (has-trap ?from)) (has-trap ?to) (arm-free))
    :effect (and (at-hero ?to) (is-destroyed ?from) (not (at-hero ?from)))
)",
rpggame,move-to-trap,0.19100171327590942,Easy Negative (Inter-Domain Mismatch),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: The hero can **move** to an adjacent room (connected by a corridor) that has not been destroyed (i.e., the hero has not already visited the room). When this action is executed, the hero gets into a location with a trap

Action name: move-to-trap


Your answer:
","**Explanation:** 

Imagine a librarian in a library who helps patrons borrow books. When a patron wants to borrow a book, the librarian needs to make sure certain conditions are met before they can check the book out. These conditions are called ""preconditions.""

For the action ""check-out,"" let's think about what needs to be true before the librarian can let the patron borrow the book:

1. **The book must be accessible:** This means the book is not covered by other books or objects, making it easy for the librarian to pick up. If the book isn't accessible, the librarian can't reach it to check it out.
2. **The book must not be already checked out:** If the book is already checked out to someone else, it can't be borrowed by another patron until it's returned.

Once these preconditions are met, the librarian can proceed with the check-out action. The action results in several changes, called ""effects,"" that update the status of the book:

1. **The book is marked as checked out:** This indicates that the book is now borrowed and can't be checked out by another patron until it's returned.
2. **The book is no longer accessible:** Since the book is borrowed, it's no longer available on the shelf for others to take.
3. **There is a request for the book:** This keeps track of the borrowing transaction.
4. **A return due date is set:** This helps the library know when to expect the book back.

To summarize, the preconditions ensure the librarian can access the book and that it isn't already borrowed. The effects update the system to show the book is now checked out, not accessible, and has a return due date.
Parameters:
1. ?x - book

Preconditions:
```
(and
    (accessible ?x)
    (not (checked-out ?x))
)
```

Effects:
```
(and
    (checked-out ?x)
    (not (accessible ?x))
    (book-request ?x)
    (return-due ?x)
)
```
","(:action move-to-trap
    :parameters (?from - cells ?to - cells)
    :precondition (and (connected ?from ?to) (at-hero ?from) (not (is-destroyed ?to)) (not (has-trap ?from)) (has-trap ?to) (arm-free))
    :effect (and (at-hero ?to) (is-destroyed ?from) (not (at-hero ?from)))
)",
rpggame,move-to-trap,0.1797766089439392,Easy Negative (Inter-Domain Mismatch),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: The hero can **move** to an adjacent room (connected by a corridor) that has not been destroyed (i.e., the hero has not already visited the room). When this action is executed, the hero gets into a location with a trap

Action name: move-to-trap


Your answer:
","**Explanation:** 

Imagine a patron is returning a borrowed book to the library. The librarian needs to process this return to update the book's status and remove any return due date. The action ""return-book"" describes how the librarian can do this. There are specific conditions, called ""preconditions,"" that must be met to ensure the return can be processed correctly.

For the action ""return-book,"" let's break down what needs to be true before the librarian can return the book:

1. **The book must be checked out:** This means the book is currently borrowed by someone and needs to be returned.
2. **The librarian must be holding the book:** This indicates the librarian has the book in their hands, ready to process the return.

Once these preconditions are met, the librarian can proceed with the ""return-book"" action. This action results in several changes, called ""effects,"" that update the status of the book and the librarian's hands:

1. **The book is no longer checked out:** This shows that the book has been returned and is available for borrowing again.
2. **The librarian is no longer holding the book:** This indicates the librarian has processed the return and placed the book back in its proper place.
3. **Any request for the book is removed:** If there was a request for this book, it is no longer needed since the book is now available.
4. **The return due date is removed:** This updates the system to show that the book is no longer due for return.
5. **The book becomes accessible:** Now that the book is back in the library, it is easy to find and borrow again.
6. **The librarian's hands are now free:** Since the librarian has finished processing the return, their hands are empty and ready for the next task.

To summarize, the preconditions ensure the book is currently borrowed and the librarian has it in their hands, ready to return. The effects update the situation to show that the book is no longer checked out, any requests and due dates are removed, the book is accessible again, and the librarian's hands are free.
Parameters:
1. ?x - book

Preconditions:
```
(and
    (checked-out ?x)
    (holding ?x)
)
```

Effects:
```
(and
    (not (checked-out ?x))
    (not (holding ?x))
    (not (book-request ?x))
    (not (return-due ?x))
    (accessible ?x)
    (hands-free)
)
```
","(:action move-to-trap
    :parameters (?from - cells ?to - cells)
    :precondition (and (connected ?from ?to) (at-hero ?from) (not (is-destroyed ?to)) (not (has-trap ?from)) (has-trap ?to) (arm-free))
    :effect (and (at-hero ?to) (is-destroyed ?from) (not (at-hero ?from)))
)",
rpggame,move-to-trap,0.07760506123304367,Easy Negative (Inter-Domain Mismatch),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: The hero can **move** to an adjacent room (connected by a corridor) that has not been destroyed (i.e., the hero has not already visited the room). When this action is executed, the hero gets into a location with a trap

Action name: move-to-trap


Your answer:
","**Explanation:** 

Imagine you're a librarian in a library, and there's a table full of books that need to be sorted. You want to pick up one of these books. To do this, certain conditions, called ""preconditions,"" must be met to ensure you can successfully pick up the book.

For the action ""take-from-table,"" let's break down what needs to be true before you can pick up a book:

1. **The book must be accessible:** This means the book isn't covered by other books or objects, so you can easily reach it.
2. **The book must be on the table:** This indicates the book is physically located on the table, not somewhere else like a shelf.
3. **Your hands must be free:** You need to have empty hands to pick up the book, meaning you aren't already holding something else.

Once these preconditions are met, you can proceed with the ""take-from-table"" action. This action results in several changes, called ""effects,"" that update the status of the book and your hands:

1. **The book is no longer on the table:** This indicates you've picked up the book from the table.
2. **The book is no longer accessible:** Since you're holding the book, it's not available for someone else to pick up from the table.
3. **Your hands are no longer free:** Because you're now holding the book, your hands are occupied.
4. **You are holding the book:** This shows that the book is now in your hands.

To summarize, the preconditions ensure you can reach the book, it's on the table, and your hands are free to pick it up. The effects update the situation to reflect that the book is now in your hands and no longer on the table or accessible to others.
Parameters:
1. ?x - book

Preconditions:
```
(and
    (accessible ?x)
    (on-table ?x)
    (hands-free)
)
```

Effects:
```
(and
    (not (on-table ?x))
    (not (accessible ?x))
    (not (hands-free))
    (holding ?x)
)
```
","(:action move-to-trap
    :parameters (?from - cells ?to - cells)
    :precondition (and (connected ?from ?to) (at-hero ?from) (not (is-destroyed ?to)) (not (has-trap ?from)) (has-trap ?to) (arm-free))
    :effect (and (at-hero ?to) (is-destroyed ?from) (not (at-hero ?from)))
)",
rpggame,move-to-trap,0.07736551761627197,Easy Negative (Inter-Domain Mismatch),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: The hero can **move** to an adjacent room (connected by a corridor) that has not been destroyed (i.e., the hero has not already visited the room). When this action is executed, the hero gets into a location with a trap

Action name: move-to-trap


Your answer:
","**Explanation:** 

Imagine you are a librarian standing near a shelf, holding a book in your hands. You want to place this book on top of another book that is already on the shelf. This action, called ""place-on-shelf,"" needs to follow certain rules, called ""preconditions,"" to make sure everything goes smoothly.

For the action ""place-on-shelf,"" let's break down what needs to be true before you can place the book on the shelf:

1. **You must be holding the book:** This means you have the book in your hands, ready to place it on the shelf.
2. **The book on the shelf must be accessible:** The book already on the shelf should not be covered by other books or objects, so you can easily place your book on top of it.
3. **The book you are holding must belong to a certain category:** This helps in organizing the books properly according to their categories.
4. **The shelf should not be overflowing:** There should be enough space on the shelf to place another book.

Once these preconditions are met, you can proceed with the ""place-on-shelf"" action. This action results in several changes, called ""effects,"" that update the status of the books and your hands:

1. **You are no longer holding the book:** This shows that you have placed the book on the shelf.
2. **The book on the shelf is no longer accessible:** Because the new book is now on top of it, making it covered.
3. **The book you placed is now accessible:** This indicates the book you just placed is easy to reach.
4. **Your hands are now free:** Since you have placed the book on the shelf, your hands are empty again.
5. **The new book is on the shelf on top of the other book:** This shows the new book's position.
6. **The shelf is now considered empty for that category:** This helps in tracking the organization and availability of shelf space for that category.

To summarize, the preconditions ensure you are holding the book, the shelf has space, and the book on the shelf is accessible. The effects update the situation to show that you have placed the book on the shelf, the new book is accessible, and your hands are free again.
Parameters:
1. ?x - book
2. ?y - book
3. ?cat - category

Preconditions:
```
(and
    (holding ?x)
    (accessible ?y)
    (belongs-to-category ?x ?cat)
    (not (shelf-overflow ?cat))
)
```

Effects:
```
(and
    (not (holding ?x))
    (not (accessible ?y))
    (accessible ?x)
    (hands-free)
    (on-shelf ?x ?y)
    (shelf-empty ?cat)
)
```
","(:action move-to-trap
    :parameters (?from - cells ?to - cells)
    :precondition (and (connected ?from ?to) (at-hero ?from) (not (is-destroyed ?to)) (not (has-trap ?from)) (has-trap ?to) (arm-free))
    :effect (and (at-hero ?to) (is-destroyed ?from) (not (at-hero ?from)))
)",
rpggame,move-to-trap,0.6636556386947632,Semi-Hard Negative (Intra-Domain Mismatch),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: The hero can **move** to an adjacent room (connected by a corridor) that has not been destroyed (i.e., the hero has not already visited the room). When this action is executed, the hero gets into a location with a trap

Action name: move-to-trap


Your answer:
","Parameters:
1. ?from - cells
2. ?to - cells

Preconditions:
```
(and
    (connected ?from ?to)
    (at-hero ?from)
    (not (has-trap ?from))
    (not (is-destroyed ?to))
    (not (has-trap ?to))
    (not (has-monster ?to))
)
```

Effects:
```
(and
    (at-hero ?to)
    (is-destroyed ?from)
    (not (at-hero ?from))
)
```
","(:action move-to-trap
    :parameters (?from - cells ?to - cells)
    :precondition (and (connected ?from ?to) (at-hero ?from) (not (is-destroyed ?to)) (not (has-trap ?from)) (has-trap ?to) (arm-free))
    :effect (and (at-hero ?to) (is-destroyed ?from) (not (at-hero ?from)))
)",
rpggame,move-to-trap,0.3123786151409149,Semi-Hard Negative (Intra-Domain Mismatch),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: The hero can **move** to an adjacent room (connected by a corridor) that has not been destroyed (i.e., the hero has not already visited the room). When this action is executed, the hero gets into a location with a trap

Action name: move-to-trap


Your answer:
","Parameters:
1. ?loc - cells
2. ?s - swords

Preconditions:
```
(and
    (at-hero ?loc)
    (at-sword ?s ?loc)
    (arm-free)
)
```

Effects:
```
(and
    (holding ?s)
    (not (at-sword ?s ?loc))
    (not (arm-free))
)
```
","(:action move-to-trap
    :parameters (?from - cells ?to - cells)
    :precondition (and (connected ?from ?to) (at-hero ?from) (not (is-destroyed ?to)) (not (has-trap ?from)) (has-trap ?to) (arm-free))
    :effect (and (at-hero ?to) (is-destroyed ?from) (not (at-hero ?from)))
)",
rpggame,move-to-trap,0.7996939420700073,Semi-Hard Negative (Intra-Domain Mismatch),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: The hero can **move** to an adjacent room (connected by a corridor) that has not been destroyed (i.e., the hero has not already visited the room). When this action is executed, the hero gets into a location with a trap

Action name: move-to-trap


Your answer:
","Parameters:
1. ?loc - cells

Preconditions:
```
(and
    (at-hero ?loc)
    (arm-free)
    (has-trap ?loc)
)
```

Effects:
```
(and
    (trap-disarmed ?loc)
    (not (has-trap ?loc))
)
```
","(:action move-to-trap
    :parameters (?from - cells ?to - cells)
    :precondition (and (connected ?from ?to) (at-hero ?from) (not (is-destroyed ?to)) (not (has-trap ?from)) (has-trap ?to) (arm-free))
    :effect (and (at-hero ?to) (is-destroyed ?from) (not (at-hero ?from)))
)",
rpggame,move-to-trap,0.8527721166610718,Semi-Hard Negative (Intra-Domain Mismatch),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: The hero can **move** to an adjacent room (connected by a corridor) that has not been destroyed (i.e., the hero has not already visited the room). When this action is executed, the hero gets into a location with a trap

Action name: move-to-trap


Your answer:
","Parameters:
1. ?from - cells
2. ?to - cells
3. ?s - swords

Preconditions:
```
(and
    (connected ?from ?to)
    (at-hero ?from)
    (has-monster ?to)
    (not (is-destroyed ?to))
    (not (has-trap ?from))
    (holding ?s)
)
```

Effects:
```
(and
    (at-hero ?to)
    (is-destroyed ?from)
    (not (at-hero ?from))
)
```
","(:action move-to-trap
    :parameters (?from - cells ?to - cells)
    :precondition (and (connected ?from ?to) (at-hero ?from) (not (is-destroyed ?to)) (not (has-trap ?from)) (has-trap ?to) (arm-free))
    :effect (and (at-hero ?to) (is-destroyed ?from) (not (at-hero ?from)))
)",
rpggame,move-to-trap,0.6134718060493469,Semi-Hard Negative (Intra-Domain Mismatch),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: The hero can **move** to an adjacent room (connected by a corridor) that has not been destroyed (i.e., the hero has not already visited the room). When this action is executed, the hero gets into a location with a trap

Action name: move-to-trap


Your answer:
","Parameters:
1. ?loc - cells
2. ?s - swords

Preconditions:
```
(and
    (at-hero ?loc)
    (holding ?s)
    (not (has-trap ?loc))
    (not (has-monster ?loc))
)
```

Effects:
```
(and
    (arm-free)
    (is-destroyed ?s)
    (not (holding ?s))
)
```
","(:action move-to-trap
    :parameters (?from - cells ?to - cells)
    :precondition (and (connected ?from ?to) (at-hero ?from) (not (is-destroyed ?to)) (not (has-trap ?from)) (has-trap ?to) (arm-free))
    :effect (and (at-hero ?to) (is-destroyed ?from) (not (at-hero ?from)))
)",
rpggame,move-to-trap,0.6636556386947632,Semi-Hard Negative (Intra-Domain Mismatch),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: The hero can **move** to an adjacent room (connected by a corridor) that has not been destroyed (i.e., the hero has not already visited the room). When this action is executed, the hero gets into a location with a trap

Action name: move-to-trap


Your answer:

**Explanation:**

Imagine you're guiding a hero who just woke up in a mysterious dungeon. Each room can have different things: some are empty, others have monsters, some have traps, and a few might have swords. There's also a special room with an exit—our hero's goal.

Now, let's talk about the action called **move-to-trap**. This action involves our hero moving from one room (we'll call it ""Room A"") to another room (""Room B""), where, unfortunately, there's a trap waiting. Here's why each part of the plan (or action schema) makes sense:

1. **Connected Rooms**: Our hero can only move to a room directly connected to the one they're currently in. This is like being in your house and only being able to walk into rooms that have doors leading from where you are now.

2. **Hero's Current Location**: The hero must start in Room A to move to Room B. You can't move from a place if you're not actually there, right?

3. **Room B Not Destroyed**: The room our hero is moving to mustn't be already destroyed (or in ruins). It's like making sure the bridge you want to cross hasn't collapsed.

4. **Room A Doesn't Have a Trap**: It’s safer if the room our hero is leaving doesn't have a trap. Imagine trying to leave a room with a trap; it could activate and cause trouble!

5. **Room B Has a Trap**: Since the action is called **move-to-trap**, it specifically involves moving to a room with a trap, almost like knowing there's a puddle ahead but stepping into it anyway because it's the only path forward.

6. **Hero's Arm is Free**: This indicates that the hero isn’t holding anything like a sword. It’s important because handling traps might require free hands—think about needing your hands free to disarm or avoid a trap carefully.

When our hero completes this action, several things happen:
- **Hero is now in Room B**: Just like when you walk into another room, you’re no longer in the first room.
- **Room A is destroyed**: This could mean the hero leaves it in a way that no one can follow—maybe they close a heavy door that locks automatically.
- **Hero is no longer in Room A**: It confirms that the hero has completely left Room A.

This action is designed for specific situations in the dungeon where the hero might need to move strategically, even into risky areas, to navigate through the dungeon and eventually find the exit.","Parameters:
1. ?from - cells
2. ?to - cells

Preconditions:
```
(and
    (connected ?from ?to)
    (at-hero ?from)
    (not (has-trap ?from))
    (not (is-destroyed ?to))
    (not (has-trap ?to))
    (not (has-monster ?to))
)
```

Effects:
```
(and
    (at-hero ?to)
    (is-destroyed ?from)
    (not (at-hero ?from))
)
```
","(:action move-to-trap
    :parameters (?from - cells ?to - cells)
    :precondition (and (connected ?from ?to) (at-hero ?from) (not (is-destroyed ?to)) (not (has-trap ?from)) (has-trap ?to) (arm-free))
    :effect (and (at-hero ?to) (is-destroyed ?from) (not (at-hero ?from)))
)",
rpggame,move-to-trap,0.3123786151409149,Semi-Hard Negative (Intra-Domain Mismatch),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: The hero can **move** to an adjacent room (connected by a corridor) that has not been destroyed (i.e., the hero has not already visited the room). When this action is executed, the hero gets into a location with a trap

Action name: move-to-trap


Your answer:

**Explanation:**

Imagine you're guiding a hero who just woke up in a mysterious dungeon. Each room can have different things: some are empty, others have monsters, some have traps, and a few might have swords. There's also a special room with an exit—our hero's goal.

Now, let's talk about the action called **move-to-trap**. This action involves our hero moving from one room (we'll call it ""Room A"") to another room (""Room B""), where, unfortunately, there's a trap waiting. Here's why each part of the plan (or action schema) makes sense:

1. **Connected Rooms**: Our hero can only move to a room directly connected to the one they're currently in. This is like being in your house and only being able to walk into rooms that have doors leading from where you are now.

2. **Hero's Current Location**: The hero must start in Room A to move to Room B. You can't move from a place if you're not actually there, right?

3. **Room B Not Destroyed**: The room our hero is moving to mustn't be already destroyed (or in ruins). It's like making sure the bridge you want to cross hasn't collapsed.

4. **Room A Doesn't Have a Trap**: It’s safer if the room our hero is leaving doesn't have a trap. Imagine trying to leave a room with a trap; it could activate and cause trouble!

5. **Room B Has a Trap**: Since the action is called **move-to-trap**, it specifically involves moving to a room with a trap, almost like knowing there's a puddle ahead but stepping into it anyway because it's the only path forward.

6. **Hero's Arm is Free**: This indicates that the hero isn’t holding anything like a sword. It’s important because handling traps might require free hands—think about needing your hands free to disarm or avoid a trap carefully.

When our hero completes this action, several things happen:
- **Hero is now in Room B**: Just like when you walk into another room, you’re no longer in the first room.
- **Room A is destroyed**: This could mean the hero leaves it in a way that no one can follow—maybe they close a heavy door that locks automatically.
- **Hero is no longer in Room A**: It confirms that the hero has completely left Room A.

This action is designed for specific situations in the dungeon where the hero might need to move strategically, even into risky areas, to navigate through the dungeon and eventually find the exit.","Parameters:
1. ?loc - cells
2. ?s - swords

Preconditions:
```
(and
    (at-hero ?loc)
    (at-sword ?s ?loc)
    (arm-free)
)
```

Effects:
```
(and
    (holding ?s)
    (not (at-sword ?s ?loc))
    (not (arm-free))
)
```
","(:action move-to-trap
    :parameters (?from - cells ?to - cells)
    :precondition (and (connected ?from ?to) (at-hero ?from) (not (is-destroyed ?to)) (not (has-trap ?from)) (has-trap ?to) (arm-free))
    :effect (and (at-hero ?to) (is-destroyed ?from) (not (at-hero ?from)))
)",
rpggame,move-to-trap,0.7996939420700073,Semi-Hard Negative (Intra-Domain Mismatch),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: The hero can **move** to an adjacent room (connected by a corridor) that has not been destroyed (i.e., the hero has not already visited the room). When this action is executed, the hero gets into a location with a trap

Action name: move-to-trap


Your answer:

**Explanation:**

Imagine you're guiding a hero who just woke up in a mysterious dungeon. Each room can have different things: some are empty, others have monsters, some have traps, and a few might have swords. There's also a special room with an exit—our hero's goal.

Now, let's talk about the action called **move-to-trap**. This action involves our hero moving from one room (we'll call it ""Room A"") to another room (""Room B""), where, unfortunately, there's a trap waiting. Here's why each part of the plan (or action schema) makes sense:

1. **Connected Rooms**: Our hero can only move to a room directly connected to the one they're currently in. This is like being in your house and only being able to walk into rooms that have doors leading from where you are now.

2. **Hero's Current Location**: The hero must start in Room A to move to Room B. You can't move from a place if you're not actually there, right?

3. **Room B Not Destroyed**: The room our hero is moving to mustn't be already destroyed (or in ruins). It's like making sure the bridge you want to cross hasn't collapsed.

4. **Room A Doesn't Have a Trap**: It’s safer if the room our hero is leaving doesn't have a trap. Imagine trying to leave a room with a trap; it could activate and cause trouble!

5. **Room B Has a Trap**: Since the action is called **move-to-trap**, it specifically involves moving to a room with a trap, almost like knowing there's a puddle ahead but stepping into it anyway because it's the only path forward.

6. **Hero's Arm is Free**: This indicates that the hero isn’t holding anything like a sword. It’s important because handling traps might require free hands—think about needing your hands free to disarm or avoid a trap carefully.

When our hero completes this action, several things happen:
- **Hero is now in Room B**: Just like when you walk into another room, you’re no longer in the first room.
- **Room A is destroyed**: This could mean the hero leaves it in a way that no one can follow—maybe they close a heavy door that locks automatically.
- **Hero is no longer in Room A**: It confirms that the hero has completely left Room A.

This action is designed for specific situations in the dungeon where the hero might need to move strategically, even into risky areas, to navigate through the dungeon and eventually find the exit.","Parameters:
1. ?loc - cells

Preconditions:
```
(and
    (at-hero ?loc)
    (arm-free)
    (has-trap ?loc)
)
```

Effects:
```
(and
    (trap-disarmed ?loc)
    (not (has-trap ?loc))
)
```
","(:action move-to-trap
    :parameters (?from - cells ?to - cells)
    :precondition (and (connected ?from ?to) (at-hero ?from) (not (is-destroyed ?to)) (not (has-trap ?from)) (has-trap ?to) (arm-free))
    :effect (and (at-hero ?to) (is-destroyed ?from) (not (at-hero ?from)))
)",
rpggame,move-to-trap,0.8527721166610718,Semi-Hard Negative (Intra-Domain Mismatch),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: The hero can **move** to an adjacent room (connected by a corridor) that has not been destroyed (i.e., the hero has not already visited the room). When this action is executed, the hero gets into a location with a trap

Action name: move-to-trap


Your answer:

**Explanation:**

Imagine you're guiding a hero who just woke up in a mysterious dungeon. Each room can have different things: some are empty, others have monsters, some have traps, and a few might have swords. There's also a special room with an exit—our hero's goal.

Now, let's talk about the action called **move-to-trap**. This action involves our hero moving from one room (we'll call it ""Room A"") to another room (""Room B""), where, unfortunately, there's a trap waiting. Here's why each part of the plan (or action schema) makes sense:

1. **Connected Rooms**: Our hero can only move to a room directly connected to the one they're currently in. This is like being in your house and only being able to walk into rooms that have doors leading from where you are now.

2. **Hero's Current Location**: The hero must start in Room A to move to Room B. You can't move from a place if you're not actually there, right?

3. **Room B Not Destroyed**: The room our hero is moving to mustn't be already destroyed (or in ruins). It's like making sure the bridge you want to cross hasn't collapsed.

4. **Room A Doesn't Have a Trap**: It’s safer if the room our hero is leaving doesn't have a trap. Imagine trying to leave a room with a trap; it could activate and cause trouble!

5. **Room B Has a Trap**: Since the action is called **move-to-trap**, it specifically involves moving to a room with a trap, almost like knowing there's a puddle ahead but stepping into it anyway because it's the only path forward.

6. **Hero's Arm is Free**: This indicates that the hero isn’t holding anything like a sword. It’s important because handling traps might require free hands—think about needing your hands free to disarm or avoid a trap carefully.

When our hero completes this action, several things happen:
- **Hero is now in Room B**: Just like when you walk into another room, you’re no longer in the first room.
- **Room A is destroyed**: This could mean the hero leaves it in a way that no one can follow—maybe they close a heavy door that locks automatically.
- **Hero is no longer in Room A**: It confirms that the hero has completely left Room A.

This action is designed for specific situations in the dungeon where the hero might need to move strategically, even into risky areas, to navigate through the dungeon and eventually find the exit.","Parameters:
1. ?from - cells
2. ?to - cells
3. ?s - swords

Preconditions:
```
(and
    (connected ?from ?to)
    (at-hero ?from)
    (has-monster ?to)
    (not (is-destroyed ?to))
    (not (has-trap ?from))
    (holding ?s)
)
```

Effects:
```
(and
    (at-hero ?to)
    (is-destroyed ?from)
    (not (at-hero ?from))
)
```
","(:action move-to-trap
    :parameters (?from - cells ?to - cells)
    :precondition (and (connected ?from ?to) (at-hero ?from) (not (is-destroyed ?to)) (not (has-trap ?from)) (has-trap ?to) (arm-free))
    :effect (and (at-hero ?to) (is-destroyed ?from) (not (at-hero ?from)))
)",
rpggame,move-to-trap,0.6134718060493469,Semi-Hard Negative (Intra-Domain Mismatch),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: The hero can **move** to an adjacent room (connected by a corridor) that has not been destroyed (i.e., the hero has not already visited the room). When this action is executed, the hero gets into a location with a trap

Action name: move-to-trap


Your answer:

**Explanation:**

Imagine you're guiding a hero who just woke up in a mysterious dungeon. Each room can have different things: some are empty, others have monsters, some have traps, and a few might have swords. There's also a special room with an exit—our hero's goal.

Now, let's talk about the action called **move-to-trap**. This action involves our hero moving from one room (we'll call it ""Room A"") to another room (""Room B""), where, unfortunately, there's a trap waiting. Here's why each part of the plan (or action schema) makes sense:

1. **Connected Rooms**: Our hero can only move to a room directly connected to the one they're currently in. This is like being in your house and only being able to walk into rooms that have doors leading from where you are now.

2. **Hero's Current Location**: The hero must start in Room A to move to Room B. You can't move from a place if you're not actually there, right?

3. **Room B Not Destroyed**: The room our hero is moving to mustn't be already destroyed (or in ruins). It's like making sure the bridge you want to cross hasn't collapsed.

4. **Room A Doesn't Have a Trap**: It’s safer if the room our hero is leaving doesn't have a trap. Imagine trying to leave a room with a trap; it could activate and cause trouble!

5. **Room B Has a Trap**: Since the action is called **move-to-trap**, it specifically involves moving to a room with a trap, almost like knowing there's a puddle ahead but stepping into it anyway because it's the only path forward.

6. **Hero's Arm is Free**: This indicates that the hero isn’t holding anything like a sword. It’s important because handling traps might require free hands—think about needing your hands free to disarm or avoid a trap carefully.

When our hero completes this action, several things happen:
- **Hero is now in Room B**: Just like when you walk into another room, you’re no longer in the first room.
- **Room A is destroyed**: This could mean the hero leaves it in a way that no one can follow—maybe they close a heavy door that locks automatically.
- **Hero is no longer in Room A**: It confirms that the hero has completely left Room A.

This action is designed for specific situations in the dungeon where the hero might need to move strategically, even into risky areas, to navigate through the dungeon and eventually find the exit.","Parameters:
1. ?loc - cells
2. ?s - swords

Preconditions:
```
(and
    (at-hero ?loc)
    (holding ?s)
    (not (has-trap ?loc))
    (not (has-monster ?loc))
)
```

Effects:
```
(and
    (arm-free)
    (is-destroyed ?s)
    (not (holding ?s))
)
```
","(:action move-to-trap
    :parameters (?from - cells ?to - cells)
    :precondition (and (connected ?from ?to) (at-hero ?from) (not (is-destroyed ?to)) (not (has-trap ?from)) (has-trap ?to) (arm-free))
    :effect (and (at-hero ?to) (is-destroyed ?from) (not (at-hero ?from)))
)",
rpggame,move-to-trap,0.7861344814300537,Semi-Hard Negative (Intra-Domain Mismatch),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: The hero can **move** to an adjacent room (connected by a corridor) that has not been destroyed (i.e., the hero has not already visited the room). When this action is executed, the hero gets into a location with a trap

Action name: move-to-trap


Your answer:
","**Explanation:**

Imagine our hero in a big, scary dungeon, just like a character from a fairy tale or a video game. The dungeon has several rooms, and some rooms are safe while others have monsters or traps. The hero's goal is to escape from this dungeon, moving from one room to another until he finds the exit.

Now, let's talk about the action called ""move"" that our hero can take. The action ""move"" lets the hero go from one room (we'll call this the ""current room"") to a connected room (let's call this the ""next room""). Think of the dungeon like a big house with many doors connecting the rooms; the hero can only move through a door if it’s open and the room on the other side is safe.

In the PDDL (a kind of programming language for planning what actions to take), the action ""move"" needs some conditions to be met before the hero can move:
1. **The rooms must be connected:** Just like you can't walk through a wall at home, the hero can only move to a room if there's a direct connection (like a doorway or a corridor).
2. **The hero must be in the current room:** The hero can only leave a room if he's actually in it.
3. **The current room shouldn’t have a trap that could hurt him.**
4. **The next room shouldn’t be destroyed:** The hero can't go into a room if it’s already been collapsed or destroyed (maybe from a previous adventure!).
5. **The next room shouldn’t have a trap or a monster:** This makes sure our hero doesn’t walk into new danger.

When the hero moves:
- **He is now in the next room:** Just like if you walk to another room in your house, you're then in that new room.
- **The room he left gets destroyed:** This might sound strange, but imagine if every time he left a room, the door magically closed and locked forever, so he can’t go back the same way.
- **He is no longer in the current room:** This is just confirming that he has moved on from the previous room.

These rules help our hero make smart moves through the dungeon, avoiding danger and making progress towards escape. This way of setting up the hero's actions makes sure he can navigate through the dungeon safely and eventually find his way out.
Parameters:
1. ?from - cells
2. ?to - cells

Preconditions:
```
(and
    (connected ?from ?to)
    (at-hero ?from)
    (not (has-trap ?from))
    (not (is-destroyed ?to))
    (not (has-trap ?to))
    (not (has-monster ?to))
)
```

Effects:
```
(and
    (at-hero ?to)
    (is-destroyed ?from)
    (not (at-hero ?from))
)
```
","(:action move-to-trap
    :parameters (?from - cells ?to - cells)
    :precondition (and (connected ?from ?to) (at-hero ?from) (not (is-destroyed ?to)) (not (has-trap ?from)) (has-trap ?to) (arm-free))
    :effect (and (at-hero ?to) (is-destroyed ?from) (not (at-hero ?from)))
)",
rpggame,move-to-trap,0.4962548613548279,Semi-Hard Negative (Intra-Domain Mismatch),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: The hero can **move** to an adjacent room (connected by a corridor) that has not been destroyed (i.e., the hero has not already visited the room). When this action is executed, the hero gets into a location with a trap

Action name: move-to-trap


Your answer:
","**Explanation:**

Imagine you're helping a hero navigate through a tricky dungeon filled with different challenges. The hero's objective is to escape, but along the way, they might find useful items like swords that can help protect against monsters.

In our scenario, the action of picking up a sword is crucial. Let's think of it like this: if you enter a room and see a sword on the floor while your hands are free, you can pick it up. The action schema in PDDL, which is a way to represent planning problems, explains this in a structured format.

The preconditions for our action ""pick-sword"" are:
1. **The hero must be in the same room as the sword** (represented as `(at-hero ?loc)` and `(at-sword ?s ?loc)`). This makes sense because you can't pick up something that's not in the same room as you.
2. **The hero's hand must be free** (`(arm-free)`). Just like you can't hold two grocery bags in one hand easily, our hero needs a free hand to pick up the sword.

The effects after the hero picks up the sword are:
1. **The hero is now holding the sword** (`(holding ?s)`). This indicates that the hero has successfully picked up the sword.
2. **The sword is no longer in its original place** (`(not (at-sword ?s ?loc))`). Just like if you take an apple from a basket, the apple isn't in the basket anymore.
3. **The hero's hand is no longer free** (`(not (arm-free))`). Holding the sword means the hand that was free is now occupied.

This action schema is a simple way to model the interaction between the hero and the sword in the dungeon. It helps ensure that all necessary conditions are met before the action takes place, making the hero's journey through the dungeon logical and structured. This way, the hero doesn't magically have a sword without picking it up or has two items in one hand, which keeps our dungeon adventure realistic and understandable.
Parameters:
1. ?loc - cells
2. ?s - swords

Preconditions:
```
(and
    (at-hero ?loc)
    (at-sword ?s ?loc)
    (arm-free)
)
```

Effects:
```
(and
    (holding ?s)
    (not (at-sword ?s ?loc))
    (not (arm-free))
)
```
","(:action move-to-trap
    :parameters (?from - cells ?to - cells)
    :precondition (and (connected ?from ?to) (at-hero ?from) (not (is-destroyed ?to)) (not (has-trap ?from)) (has-trap ?to) (arm-free))
    :effect (and (at-hero ?to) (is-destroyed ?from) (not (at-hero ?from)))
)",
rpggame,move-to-trap,0.6990560293197632,Semi-Hard Negative (Intra-Domain Mismatch),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: The hero can **move** to an adjacent room (connected by a corridor) that has not been destroyed (i.e., the hero has not already visited the room). When this action is executed, the hero gets into a location with a trap

Action name: move-to-trap


Your answer:
","**Explanation:**

Imagine our hero in a dungeon, a place with rooms connected like a spider web. Each room can be just an empty space, or it might have something like a monster, a trap, or even a sword. Somewhere in this maze, there's a special room that has an exit—the ultimate goal for our hero.

Now, let's focus on a specific action our hero might need to take: **disarming a trap**. In our scenario, the hero finds themselves in a room with a trap. The action to disarm this trap is what we need to understand.

The action is named `disarm-trap`. This action, like any other, has specific requirements (preconditions) that must be met before the hero can perform it. These preconditions are:
1. **The hero must be in the same room as the trap.** This makes sense because you can't disarm a trap from another room. It's like needing to be in the kitchen to turn off a stove.
2. **The hero's hand must be free.** This means the hero can’t be holding anything, like a sword. It's a bit like needing both hands free to tie your shoes properly.
3. **There must actually be a trap in the room.** Obviously, the hero can't disarm a trap if there isn't one there!

If all these conditions are met, then the hero can go ahead and disarm the trap. The results (effects) of this action are:
1. **The trap in the room is disarmed.** This means the room is now safe from that trap.
2. **The trap is no longer considered to be in the room.** It's like cleaning up a spill; once it's cleaned, it's not there anymore.

By breaking down the action like this, we see how each condition helps ensure the action can be carried out safely and effectively. It’s just like following a recipe—each ingredient needs to be added at the right time for the dish to come out right!
Parameters:
1. ?loc - cells

Preconditions:
```
(and
    (at-hero ?loc)
    (arm-free)
    (has-trap ?loc)
)
```

Effects:
```
(and
    (trap-disarmed ?loc)
    (not (has-trap ?loc))
)
```
","(:action move-to-trap
    :parameters (?from - cells ?to - cells)
    :precondition (and (connected ?from ?to) (at-hero ?from) (not (is-destroyed ?to)) (not (has-trap ?from)) (has-trap ?to) (arm-free))
    :effect (and (at-hero ?to) (is-destroyed ?from) (not (at-hero ?from)))
)",
rpggame,move-to-trap,0.7913336753845215,Semi-Hard Negative (Intra-Domain Mismatch),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: The hero can **move** to an adjacent room (connected by a corridor) that has not been destroyed (i.e., the hero has not already visited the room). When this action is executed, the hero gets into a location with a trap

Action name: move-to-trap


Your answer:
","**Explanation:**

Let's imagine our hero in the dungeon scenario. The hero wakes up and finds themselves in a room, wanting to move to an adjacent room where, unfortunately, there's a monster. Here's how we translate this scenario into a set of instructions, or a 'domain model,' in planning language.

The action we're talking about is called ""move-to-monster."" This means our hero is trying to move from one room (let’s call it Room A) to another room (Room B) where there is a monster. To ensure this action can happen, there are certain conditions that need to be met (these are called 'preconditions') and certain outcomes that will happen as a result of the action (these are called 'effects').

1. **Preconditions**:
   - **Connected Rooms**: Room A and Room B must be connected by a corridor. This makes sense because our hero can't magically jump from one room to another; there must be a path.
   - **Hero's Current Location**: The hero must currently be in Room A. If the hero isn't there, they can't start moving from it!
   - **Monster Presence**: Room B must have a monster. After all, the action is specifically about moving to a room with a monster.
   - **Room Integrity**: Room B should not be destroyed. A destroyed room might mean it’s collapsed or inaccessible, so it's logical our hero can’t move into it.
   - **Safety in Room A**: Room A should not have a trap. This makes sure our hero is safe and able to move without getting caught in a trap.
   - **Armed Hero**: The hero must be holding a sword. It’s a dangerous task to move into a room with a monster, so having a sword means the hero is prepared for a fight.

2. **Effects**:
   - **Hero's New Location**: After the action, the hero will be in Room B. They've successfully moved.
   - **Change in Room A's Status**: Room A becomes 'destroyed.' This might represent that the room is no longer safe or viable after the hero leaves, maybe because of the haste in escaping or some mechanism triggered by the departure.
   - **Update Hero's Old Location**: The fact that the hero was in Room A is no longer true, which is updated in our model to reflect the hero’s new position.

This planning helps organize our thoughts and actions logically, ensuring every step is clear and all necessary precautions are taken. Think of it like giving someone directions with a checklist: ""Before you go there, make sure this, this, and this are true, and once you do, this and this will happen."" This ensures everyone knows what to expect and how to prepare! 
Parameters:
1. ?from - cells
2. ?to - cells
3. ?s - swords

Preconditions:
```
(and
    (connected ?from ?to)
    (at-hero ?from)
    (has-monster ?to)
    (not (is-destroyed ?to))
    (not (has-trap ?from))
    (holding ?s)
)
```

Effects:
```
(and
    (at-hero ?to)
    (is-destroyed ?from)
    (not (at-hero ?from))
)
```
","(:action move-to-trap
    :parameters (?from - cells ?to - cells)
    :precondition (and (connected ?from ?to) (at-hero ?from) (not (is-destroyed ?to)) (not (has-trap ?from)) (has-trap ?to) (arm-free))
    :effect (and (at-hero ?to) (is-destroyed ?from) (not (at-hero ?from)))
)",
rpggame,move-to-trap,0.6022753715515137,Semi-Hard Negative (Intra-Domain Mismatch),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: The hero can **move** to an adjacent room (connected by a corridor) that has not been destroyed (i.e., the hero has not already visited the room). When this action is executed, the hero gets into a location with a trap

Action name: move-to-trap


Your answer:
","**Explanation:**

Imagine you're helping a hero navigate a dungeon full of monsters and traps, a bit like playing a video game. Now, the hero has a sword, but in this part of the game, the hero decides to destroy the sword. To understand why certain conditions are checked before the hero can destroy the sword safely, let's break it down using the action ""destroy-sword"" from the game's rules (or in technical terms, the PDDL action schema).

Firstly, the hero needs to be in the same location as the sword. This makes sense, right? You can't throw something away or break it if it's not with you. So, the condition `(at-hero ?loc)` ensures that the hero is at the right spot to perform the action.

Secondly, the hero must be holding the sword. It’s similar to needing both hands on a bat to swing it; here, the hero needs to have the sword in hand to destroy it, checked by `(holding ?s)`.

But why check for no traps or monsters in the room? Think of it like trying to do something delicate, like assembling a model airplane, in a room with a loose tiger. Not a great idea, right? If there’s a monster in the room, destroying the sword might make the hero vulnerable to attack. Similarly, a trap could be triggered by the noise or movement, putting the hero in danger. So, `(not (has-trap ?loc))` and `(not (has-monster ?loc))` ensure that the environment is safe for the hero to break the sword without turning the situation worse.

Now, what happens after the sword is destroyed? The effect is that the hero’s hand is now free (`arm-free`), the sword is confirmed as destroyed (`is-destroyed ?s`), and the hero is no longer holding it (`not (holding ?s)`). It’s like cleaning up after finishing a task: put away the tools, clean up the mess, and free up your hands for the next task.

In simple terms, this action schema is like a set of instructions to make sure the hero does something risky (like destroying a sword) safely and responsibly, without making the dangerous dungeon situation even worse.
Parameters:
1. ?loc - cells
2. ?s - swords

Preconditions:
```
(and
    (at-hero ?loc)
    (holding ?s)
    (not (has-trap ?loc))
    (not (has-monster ?loc))
)
```

Effects:
```
(and
    (arm-free)
    (is-destroyed ?s)
    (not (holding ?s))
)
```
","(:action move-to-trap
    :parameters (?from - cells ?to - cells)
    :precondition (and (connected ?from ?to) (at-hero ?from) (not (is-destroyed ?to)) (not (has-trap ?from)) (has-trap ?to) (arm-free))
    :effect (and (at-hero ?to) (is-destroyed ?from) (not (at-hero ?from)))
)",
rpggame,move-to-trap,0.4554710388183594,Hard Negative (Manipulated Action),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: The hero can **move** to an adjacent room (connected by a corridor) that has not been destroyed (i.e., the hero has not already visited the room). When this action is executed, the hero gets into a location with a trap

Action name: move-to-trap


Your answer:
","Parameters:
1. ?from - cells
2. ?to - cells

Preconditions:
```
(and
    (connected ?from ?to)
    (at-hero ?from)
    (not (is-destroyed ?to))
    (has-trap ?to)
    (arm-free)
)
```

Effects:
```
(and
    (not (at-hero ?to))
    (is-destroyed ?from)
    (not (at-hero ?from))
)
```
","(:action move-to-trap
    :parameters (?from - cells ?to - cells)
    :precondition (and (connected ?from ?to) (at-hero ?from) (not (is-destroyed ?to)) (not (has-trap ?from)) (has-trap ?to) (arm-free))
    :effect (and (at-hero ?to) (is-destroyed ?from) (not (at-hero ?from)))
)","remove (not (has-trap ?from)) from preconditions
negate (at-hero ?to) in effects
"
rpggame,move-to-trap,0.38822805881500244,Hard Negative (Manipulated Action),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: The hero can **move** to an adjacent room (connected by a corridor) that has not been destroyed (i.e., the hero has not already visited the room). When this action is executed, the hero gets into a location with a trap

Action name: move-to-trap


Your answer:
","Parameters:
1. ?from - cells
2. ?to - cells

Preconditions:
```
(and
    (at-hero ?to)
    (connected ?from ?to)
    (at-hero ?from)
    (not (has-trap ?from))
    (has-trap ?to)
    (arm-free)
)
```

Effects:
```
(and
    (not (is-destroyed ?to))
    (is-destroyed ?from)
    (not (at-hero ?from))
)
```
","(:action move-to-trap
    :parameters (?from - cells ?to - cells)
    :precondition (and (connected ?from ?to) (at-hero ?from) (not (is-destroyed ?to)) (not (has-trap ?from)) (has-trap ?to) (arm-free))
    :effect (and (at-hero ?to) (is-destroyed ?from) (not (at-hero ?from)))
)","swap (not (is-destroyed ?to)) with (at-hero ?to)
"
rpggame,move-to-trap,0.39916810393333435,Hard Negative (Manipulated Action),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: The hero can **move** to an adjacent room (connected by a corridor) that has not been destroyed (i.e., the hero has not already visited the room). When this action is executed, the hero gets into a location with a trap

Action name: move-to-trap


Your answer:
","Parameters:
1. ?from - cells
2. ?to - cells

Preconditions:
```
(and
    (at-hero ?to)
    (connected ?from ?to)
    (at-hero ?from)
    (not (is-destroyed ?to))
    (not (has-trap ?from))
    (has-trap ?to)
)
```

Effects:
```
(and
    (arm-free)
    (not (at-hero ?from))
)
```
","(:action move-to-trap
    :parameters (?from - cells ?to - cells)
    :precondition (and (connected ?from ?to) (at-hero ?from) (not (is-destroyed ?to)) (not (has-trap ?from)) (has-trap ?to) (arm-free))
    :effect (and (at-hero ?to) (is-destroyed ?from) (not (at-hero ?from)))
)","remove (is-destroyed ?from) from effects
swap (arm-free) with (at-hero ?to)
"
rpggame,move-to-trap,0.294913113117218,Hard Negative (Manipulated Action),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: The hero can **move** to an adjacent room (connected by a corridor) that has not been destroyed (i.e., the hero has not already visited the room). When this action is executed, the hero gets into a location with a trap

Action name: move-to-trap


Your answer:
","Parameters:
1. ?from - cells
2. ?to - cells

Preconditions:
```
(and
    (not (arm-free))
    (connected ?from ?to)
    (at-hero ?from)
    (not (is-destroyed ?to))
    (not (has-trap ?from))
    (has-trap ?to)
)
```

Effects:
```
(and
    (at-hero ?to)
    (is-destroyed ?from)
    (not (at-hero ?from))
)
```
","(:action move-to-trap
    :parameters (?from - cells ?to - cells)
    :precondition (and (connected ?from ?to) (at-hero ?from) (not (is-destroyed ?to)) (not (has-trap ?from)) (has-trap ?to) (arm-free))
    :effect (and (at-hero ?to) (is-destroyed ?from) (not (at-hero ?from)))
)","negate (arm-free) in preconditions
"
rpggame,move-to-trap,0.4041909873485565,Hard Negative (Manipulated Action),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: The hero can **move** to an adjacent room (connected by a corridor) that has not been destroyed (i.e., the hero has not already visited the room). When this action is executed, the hero gets into a location with a trap

Action name: move-to-trap


Your answer:
","Parameters:
1. ?from - cells
2. ?to - cells

Preconditions:
```
(and
    (connected ?from ?to)
    (at-hero ?from)
    (not (is-destroyed ?to))
    (not (has-trap ?from))
    (has-trap ?to)
    (arm-free)
)
```

Effects:
```
(and
    (not (at-hero ?to))
    (is-destroyed ?from)
)
```
","(:action move-to-trap
    :parameters (?from - cells ?to - cells)
    :precondition (and (connected ?from ?to) (at-hero ?from) (not (is-destroyed ?to)) (not (has-trap ?from)) (has-trap ?to) (arm-free))
    :effect (and (at-hero ?to) (is-destroyed ?from) (not (at-hero ?from)))
)","negate (at-hero ?to) in effects
remove (not (at-hero ?from)) from effects
"
rpggame,move-to-trap,0.47034910321235657,Hard Negative (Manipulated Action),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: The hero can **move** to an adjacent room (connected by a corridor) that has not been destroyed (i.e., the hero has not already visited the room). When this action is executed, the hero gets into a location with a trap

Action name: move-to-trap


Your answer:
","Parameters:
1. ?from - cells
2. ?to - cells

Preconditions:
```
(and
    (connected ?from ?to)
    (at-hero ?from)
    (not (is-destroyed ?to))
    (not (has-trap ?from))
    (has-trap ?to)
    (arm-free)
)
```

Effects:
```
(and
    (not (is-destroyed ?from))
    (at-hero ?to)
    (not (at-hero ?from))
)
```
","(:action move-to-trap
    :parameters (?from - cells ?to - cells)
    :precondition (and (connected ?from ?to) (at-hero ?from) (not (is-destroyed ?to)) (not (has-trap ?from)) (has-trap ?to) (arm-free))
    :effect (and (at-hero ?to) (is-destroyed ?from) (not (at-hero ?from)))
)","negate (is-destroyed ?from) in effects
"
rpggame,move-to-trap,0.45313647389411926,Hard Negative (Manipulated Action),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: The hero can **move** to an adjacent room (connected by a corridor) that has not been destroyed (i.e., the hero has not already visited the room). When this action is executed, the hero gets into a location with a trap

Action name: move-to-trap


Your answer:
","Parameters:
1. ?from - cells
2. ?to - cells

Preconditions:
```
(and
    (has-trap ?from)
    (connected ?from ?to)
    (at-hero ?from)
    (not (is-destroyed ?to))
    (has-trap ?to)
    (arm-free)
)
```

Effects:
```
(and
    (at-hero ?to)
    (is-destroyed ?from)
)
```
","(:action move-to-trap
    :parameters (?from - cells ?to - cells)
    :precondition (and (connected ?from ?to) (at-hero ?from) (not (is-destroyed ?to)) (not (has-trap ?from)) (has-trap ?to) (arm-free))
    :effect (and (at-hero ?to) (is-destroyed ?from) (not (at-hero ?from)))
)","negate (not (has-trap ?from)) in preconditions
remove (not (at-hero ?from)) from effects
"
rpggame,move-to-trap,0.5216376185417175,Hard Negative (Manipulated Action),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: The hero can **move** to an adjacent room (connected by a corridor) that has not been destroyed (i.e., the hero has not already visited the room). When this action is executed, the hero gets into a location with a trap

Action name: move-to-trap


Your answer:
","Parameters:
1. ?from - cells
2. ?to - cells

Preconditions:
```
(and
    (has-trap ?from)
    (connected ?from ?to)
    (at-hero ?from)
    (not (is-destroyed ?to))
    (has-trap ?to)
    (arm-free)
)
```

Effects:
```
(and
    (at-hero ?to)
    (is-destroyed ?from)
    (not (at-hero ?from))
)
```
","(:action move-to-trap
    :parameters (?from - cells ?to - cells)
    :precondition (and (connected ?from ?to) (at-hero ?from) (not (is-destroyed ?to)) (not (has-trap ?from)) (has-trap ?to) (arm-free))
    :effect (and (at-hero ?to) (is-destroyed ?from) (not (at-hero ?from)))
)","negate (not (has-trap ?from)) in preconditions
"
rpggame,move-to-trap,0.40898504853248596,Hard Negative (Manipulated Action),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: The hero can **move** to an adjacent room (connected by a corridor) that has not been destroyed (i.e., the hero has not already visited the room). When this action is executed, the hero gets into a location with a trap

Action name: move-to-trap


Your answer:
","Parameters:
1. ?from - cells
2. ?to - cells

Preconditions:
```
(and
    (is-destroyed ?from)
    (connected ?from ?to)
    (at-hero ?from)
    (has-trap ?to)
    (arm-free)
)
```

Effects:
```
(and
    (not (has-trap ?from))
    (at-hero ?to)
    (not (at-hero ?from))
)
```
","(:action move-to-trap
    :parameters (?from - cells ?to - cells)
    :precondition (and (connected ?from ?to) (at-hero ?from) (not (is-destroyed ?to)) (not (has-trap ?from)) (has-trap ?to) (arm-free))
    :effect (and (at-hero ?to) (is-destroyed ?from) (not (at-hero ?from)))
)","remove (not (is-destroyed ?to)) from preconditions
swap (not (has-trap ?from)) with (is-destroyed ?from)
"
rpggame,move-to-trap,0.31733572483062744,Hard Negative (Manipulated Action),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: The hero can **move** to an adjacent room (connected by a corridor) that has not been destroyed (i.e., the hero has not already visited the room). When this action is executed, the hero gets into a location with a trap

Action name: move-to-trap


Your answer:
","Parameters:
1. ?from - cells
2. ?to - cells

Preconditions:
```
(and
    (not (at-hero ?from))
    (is-destroyed ?from)
    (connected ?from ?to)
    (not (is-destroyed ?to))
    (has-trap ?to)
    (arm-free)
)
```

Effects:
```
(and
    (at-hero ?from)
    (not (has-trap ?from))
    (at-hero ?to)
)
```
","(:action move-to-trap
    :parameters (?from - cells ?to - cells)
    :precondition (and (connected ?from ?to) (at-hero ?from) (not (is-destroyed ?to)) (not (has-trap ?from)) (has-trap ?to) (arm-free))
    :effect (and (at-hero ?to) (is-destroyed ?from) (not (at-hero ?from)))
)","swap (at-hero ?from) with (not (at-hero ?from))
swap (not (has-trap ?from)) with (is-destroyed ?from)
"
rpggame,move-to-trap,0.3786734342575073,Hard Negative (Manipulated Action),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: The hero can **move** to an adjacent room (connected by a corridor) that has not been destroyed (i.e., the hero has not already visited the room). When this action is executed, the hero gets into a location with a trap

Action name: move-to-trap


Your answer:

**Explanation:**

Imagine you're guiding a hero who just woke up in a mysterious dungeon. Each room can have different things: some are empty, others have monsters, some have traps, and a few might have swords. There's also a special room with an exit—our hero's goal.

Now, let's talk about the action called **move-to-trap**. This action involves our hero moving from one room (we'll call it ""Room A"") to another room (""Room B""), where, unfortunately, there's a trap waiting. Here's why each part of the plan (or action schema) makes sense:

1. **Connected Rooms**: Our hero can only move to a room directly connected to the one they're currently in. This is like being in your house and only being able to walk into rooms that have doors leading from where you are now.

2. **Hero's Current Location**: The hero must start in Room A to move to Room B. You can't move from a place if you're not actually there, right?

3. **Room B Not Destroyed**: The room our hero is moving to mustn't be already destroyed (or in ruins). It's like making sure the bridge you want to cross hasn't collapsed.

4. **Room A Doesn't Have a Trap**: It’s safer if the room our hero is leaving doesn't have a trap. Imagine trying to leave a room with a trap; it could activate and cause trouble!

5. **Room B Has a Trap**: Since the action is called **move-to-trap**, it specifically involves moving to a room with a trap, almost like knowing there's a puddle ahead but stepping into it anyway because it's the only path forward.

6. **Hero's Arm is Free**: This indicates that the hero isn’t holding anything like a sword. It’s important because handling traps might require free hands—think about needing your hands free to disarm or avoid a trap carefully.

When our hero completes this action, several things happen:
- **Hero is now in Room B**: Just like when you walk into another room, you’re no longer in the first room.
- **Room A is destroyed**: This could mean the hero leaves it in a way that no one can follow—maybe they close a heavy door that locks automatically.
- **Hero is no longer in Room A**: It confirms that the hero has completely left Room A.

This action is designed for specific situations in the dungeon where the hero might need to move strategically, even into risky areas, to navigate through the dungeon and eventually find the exit.","Parameters:
1. ?from - cells
2. ?to - cells

Preconditions:
```
(and
    (is-destroyed ?to)
    (not (at-hero ?from))
    (connected ?from ?to)
    (at-hero ?from)
    (has-trap ?to)
    (arm-free)
)
```

Effects:
```
(and
    (not (has-trap ?from))
    (at-hero ?to)
    (is-destroyed ?from)
)
```
","(:action move-to-trap
    :parameters (?from - cells ?to - cells)
    :precondition (and (connected ?from ?to) (at-hero ?from) (not (is-destroyed ?to)) (not (has-trap ?from)) (has-trap ?to) (arm-free))
    :effect (and (at-hero ?to) (is-destroyed ?from) (not (at-hero ?from)))
)","negate (not (is-destroyed ?to)) in preconditions
swap (not (has-trap ?from)) with (not (at-hero ?from))
"
rpggame,move-to-trap,0.341754674911499,Hard Negative (Manipulated Action),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: The hero can **move** to an adjacent room (connected by a corridor) that has not been destroyed (i.e., the hero has not already visited the room). When this action is executed, the hero gets into a location with a trap

Action name: move-to-trap


Your answer:

**Explanation:**

Imagine you're guiding a hero who just woke up in a mysterious dungeon. Each room can have different things: some are empty, others have monsters, some have traps, and a few might have swords. There's also a special room with an exit—our hero's goal.

Now, let's talk about the action called **move-to-trap**. This action involves our hero moving from one room (we'll call it ""Room A"") to another room (""Room B""), where, unfortunately, there's a trap waiting. Here's why each part of the plan (or action schema) makes sense:

1. **Connected Rooms**: Our hero can only move to a room directly connected to the one they're currently in. This is like being in your house and only being able to walk into rooms that have doors leading from where you are now.

2. **Hero's Current Location**: The hero must start in Room A to move to Room B. You can't move from a place if you're not actually there, right?

3. **Room B Not Destroyed**: The room our hero is moving to mustn't be already destroyed (or in ruins). It's like making sure the bridge you want to cross hasn't collapsed.

4. **Room A Doesn't Have a Trap**: It’s safer if the room our hero is leaving doesn't have a trap. Imagine trying to leave a room with a trap; it could activate and cause trouble!

5. **Room B Has a Trap**: Since the action is called **move-to-trap**, it specifically involves moving to a room with a trap, almost like knowing there's a puddle ahead but stepping into it anyway because it's the only path forward.

6. **Hero's Arm is Free**: This indicates that the hero isn’t holding anything like a sword. It’s important because handling traps might require free hands—think about needing your hands free to disarm or avoid a trap carefully.

When our hero completes this action, several things happen:
- **Hero is now in Room B**: Just like when you walk into another room, you’re no longer in the first room.
- **Room A is destroyed**: This could mean the hero leaves it in a way that no one can follow—maybe they close a heavy door that locks automatically.
- **Hero is no longer in Room A**: It confirms that the hero has completely left Room A.

This action is designed for specific situations in the dungeon where the hero might need to move strategically, even into risky areas, to navigate through the dungeon and eventually find the exit.","Parameters:
1. ?from - cells
2. ?to - cells

Preconditions:
```
(and
    (not (at-hero ?from))
    (connected ?from ?to)
    (not (is-destroyed ?to))
    (not (has-trap ?from))
    (has-trap ?to)
    (arm-free)
)
```

Effects:
```
(and
    (at-hero ?from)
    (at-hero ?to)
    (is-destroyed ?from)
)
```
","(:action move-to-trap
    :parameters (?from - cells ?to - cells)
    :precondition (and (connected ?from ?to) (at-hero ?from) (not (is-destroyed ?to)) (not (has-trap ?from)) (has-trap ?to) (arm-free))
    :effect (and (at-hero ?to) (is-destroyed ?from) (not (at-hero ?from)))
)","swap (at-hero ?from) with (not (at-hero ?from))
"
rpggame,move-to-trap,0.5004749298095703,Hard Negative (Manipulated Action),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: The hero can **move** to an adjacent room (connected by a corridor) that has not been destroyed (i.e., the hero has not already visited the room). When this action is executed, the hero gets into a location with a trap

Action name: move-to-trap


Your answer:

**Explanation:**

Imagine you're guiding a hero who just woke up in a mysterious dungeon. Each room can have different things: some are empty, others have monsters, some have traps, and a few might have swords. There's also a special room with an exit—our hero's goal.

Now, let's talk about the action called **move-to-trap**. This action involves our hero moving from one room (we'll call it ""Room A"") to another room (""Room B""), where, unfortunately, there's a trap waiting. Here's why each part of the plan (or action schema) makes sense:

1. **Connected Rooms**: Our hero can only move to a room directly connected to the one they're currently in. This is like being in your house and only being able to walk into rooms that have doors leading from where you are now.

2. **Hero's Current Location**: The hero must start in Room A to move to Room B. You can't move from a place if you're not actually there, right?

3. **Room B Not Destroyed**: The room our hero is moving to mustn't be already destroyed (or in ruins). It's like making sure the bridge you want to cross hasn't collapsed.

4. **Room A Doesn't Have a Trap**: It’s safer if the room our hero is leaving doesn't have a trap. Imagine trying to leave a room with a trap; it could activate and cause trouble!

5. **Room B Has a Trap**: Since the action is called **move-to-trap**, it specifically involves moving to a room with a trap, almost like knowing there's a puddle ahead but stepping into it anyway because it's the only path forward.

6. **Hero's Arm is Free**: This indicates that the hero isn’t holding anything like a sword. It’s important because handling traps might require free hands—think about needing your hands free to disarm or avoid a trap carefully.

When our hero completes this action, several things happen:
- **Hero is now in Room B**: Just like when you walk into another room, you’re no longer in the first room.
- **Room A is destroyed**: This could mean the hero leaves it in a way that no one can follow—maybe they close a heavy door that locks automatically.
- **Hero is no longer in Room A**: It confirms that the hero has completely left Room A.

This action is designed for specific situations in the dungeon where the hero might need to move strategically, even into risky areas, to navigate through the dungeon and eventually find the exit.","Parameters:
1. ?from - cells
2. ?to - cells

Preconditions:
```
(and
    (at-hero ?to)
    (connected ?from ?to)
    (at-hero ?from)
    (not (is-destroyed ?to))
    (not (has-trap ?from))
    (arm-free)
)
```

Effects:
```
(and
    (has-trap ?to)
    (is-destroyed ?from)
    (not (at-hero ?from))
)
```
","(:action move-to-trap
    :parameters (?from - cells ?to - cells)
    :precondition (and (connected ?from ?to) (at-hero ?from) (not (is-destroyed ?to)) (not (has-trap ?from)) (has-trap ?to) (arm-free))
    :effect (and (at-hero ?to) (is-destroyed ?from) (not (at-hero ?from)))
)","swap (has-trap ?to) with (at-hero ?to)
"
rpggame,move-to-trap,0.47034910321235657,Hard Negative (Manipulated Action),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: The hero can **move** to an adjacent room (connected by a corridor) that has not been destroyed (i.e., the hero has not already visited the room). When this action is executed, the hero gets into a location with a trap

Action name: move-to-trap


Your answer:

**Explanation:**

Imagine you're guiding a hero who just woke up in a mysterious dungeon. Each room can have different things: some are empty, others have monsters, some have traps, and a few might have swords. There's also a special room with an exit—our hero's goal.

Now, let's talk about the action called **move-to-trap**. This action involves our hero moving from one room (we'll call it ""Room A"") to another room (""Room B""), where, unfortunately, there's a trap waiting. Here's why each part of the plan (or action schema) makes sense:

1. **Connected Rooms**: Our hero can only move to a room directly connected to the one they're currently in. This is like being in your house and only being able to walk into rooms that have doors leading from where you are now.

2. **Hero's Current Location**: The hero must start in Room A to move to Room B. You can't move from a place if you're not actually there, right?

3. **Room B Not Destroyed**: The room our hero is moving to mustn't be already destroyed (or in ruins). It's like making sure the bridge you want to cross hasn't collapsed.

4. **Room A Doesn't Have a Trap**: It’s safer if the room our hero is leaving doesn't have a trap. Imagine trying to leave a room with a trap; it could activate and cause trouble!

5. **Room B Has a Trap**: Since the action is called **move-to-trap**, it specifically involves moving to a room with a trap, almost like knowing there's a puddle ahead but stepping into it anyway because it's the only path forward.

6. **Hero's Arm is Free**: This indicates that the hero isn’t holding anything like a sword. It’s important because handling traps might require free hands—think about needing your hands free to disarm or avoid a trap carefully.

When our hero completes this action, several things happen:
- **Hero is now in Room B**: Just like when you walk into another room, you’re no longer in the first room.
- **Room A is destroyed**: This could mean the hero leaves it in a way that no one can follow—maybe they close a heavy door that locks automatically.
- **Hero is no longer in Room A**: It confirms that the hero has completely left Room A.

This action is designed for specific situations in the dungeon where the hero might need to move strategically, even into risky areas, to navigate through the dungeon and eventually find the exit.","Parameters:
1. ?from - cells
2. ?to - cells

Preconditions:
```
(and
    (connected ?from ?to)
    (at-hero ?from)
    (not (is-destroyed ?to))
    (not (has-trap ?from))
    (has-trap ?to)
    (arm-free)
)
```

Effects:
```
(and
    (not (is-destroyed ?from))
    (at-hero ?to)
    (not (at-hero ?from))
)
```
","(:action move-to-trap
    :parameters (?from - cells ?to - cells)
    :precondition (and (connected ?from ?to) (at-hero ?from) (not (is-destroyed ?to)) (not (has-trap ?from)) (has-trap ?to) (arm-free))
    :effect (and (at-hero ?to) (is-destroyed ?from) (not (at-hero ?from)))
)","negate (is-destroyed ?from) in effects
"
rpggame,move-to-trap,0.3205968141555786,Hard Negative (Manipulated Action),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: The hero can **move** to an adjacent room (connected by a corridor) that has not been destroyed (i.e., the hero has not already visited the room). When this action is executed, the hero gets into a location with a trap

Action name: move-to-trap


Your answer:

**Explanation:**

Imagine you're guiding a hero who just woke up in a mysterious dungeon. Each room can have different things: some are empty, others have monsters, some have traps, and a few might have swords. There's also a special room with an exit—our hero's goal.

Now, let's talk about the action called **move-to-trap**. This action involves our hero moving from one room (we'll call it ""Room A"") to another room (""Room B""), where, unfortunately, there's a trap waiting. Here's why each part of the plan (or action schema) makes sense:

1. **Connected Rooms**: Our hero can only move to a room directly connected to the one they're currently in. This is like being in your house and only being able to walk into rooms that have doors leading from where you are now.

2. **Hero's Current Location**: The hero must start in Room A to move to Room B. You can't move from a place if you're not actually there, right?

3. **Room B Not Destroyed**: The room our hero is moving to mustn't be already destroyed (or in ruins). It's like making sure the bridge you want to cross hasn't collapsed.

4. **Room A Doesn't Have a Trap**: It’s safer if the room our hero is leaving doesn't have a trap. Imagine trying to leave a room with a trap; it could activate and cause trouble!

5. **Room B Has a Trap**: Since the action is called **move-to-trap**, it specifically involves moving to a room with a trap, almost like knowing there's a puddle ahead but stepping into it anyway because it's the only path forward.

6. **Hero's Arm is Free**: This indicates that the hero isn’t holding anything like a sword. It’s important because handling traps might require free hands—think about needing your hands free to disarm or avoid a trap carefully.

When our hero completes this action, several things happen:
- **Hero is now in Room B**: Just like when you walk into another room, you’re no longer in the first room.
- **Room A is destroyed**: This could mean the hero leaves it in a way that no one can follow—maybe they close a heavy door that locks automatically.
- **Hero is no longer in Room A**: It confirms that the hero has completely left Room A.

This action is designed for specific situations in the dungeon where the hero might need to move strategically, even into risky areas, to navigate through the dungeon and eventually find the exit.","Parameters:
1. ?from - cells
2. ?to - cells

Preconditions:
```
(and
    (not (connected ?from ?to))
    (at-hero ?from)
    (not (is-destroyed ?to))
    (not (has-trap ?from))
    (has-trap ?to)
    (arm-free)
)
```

Effects:
```
(and
    (at-hero ?from)
    (at-hero ?to)
    (is-destroyed ?from)
)
```
","(:action move-to-trap
    :parameters (?from - cells ?to - cells)
    :precondition (and (connected ?from ?to) (at-hero ?from) (not (is-destroyed ?to)) (not (has-trap ?from)) (has-trap ?to) (arm-free))
    :effect (and (at-hero ?to) (is-destroyed ?from) (not (at-hero ?from)))
)","negate (connected ?from ?to) in preconditions
negate (not (at-hero ?from)) in effects
"
rpggame,move-to-trap,0.30840057134628296,Hard Negative (Manipulated Action),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: The hero can **move** to an adjacent room (connected by a corridor) that has not been destroyed (i.e., the hero has not already visited the room). When this action is executed, the hero gets into a location with a trap

Action name: move-to-trap


Your answer:

**Explanation:**

Imagine you're guiding a hero who just woke up in a mysterious dungeon. Each room can have different things: some are empty, others have monsters, some have traps, and a few might have swords. There's also a special room with an exit—our hero's goal.

Now, let's talk about the action called **move-to-trap**. This action involves our hero moving from one room (we'll call it ""Room A"") to another room (""Room B""), where, unfortunately, there's a trap waiting. Here's why each part of the plan (or action schema) makes sense:

1. **Connected Rooms**: Our hero can only move to a room directly connected to the one they're currently in. This is like being in your house and only being able to walk into rooms that have doors leading from where you are now.

2. **Hero's Current Location**: The hero must start in Room A to move to Room B. You can't move from a place if you're not actually there, right?

3. **Room B Not Destroyed**: The room our hero is moving to mustn't be already destroyed (or in ruins). It's like making sure the bridge you want to cross hasn't collapsed.

4. **Room A Doesn't Have a Trap**: It’s safer if the room our hero is leaving doesn't have a trap. Imagine trying to leave a room with a trap; it could activate and cause trouble!

5. **Room B Has a Trap**: Since the action is called **move-to-trap**, it specifically involves moving to a room with a trap, almost like knowing there's a puddle ahead but stepping into it anyway because it's the only path forward.

6. **Hero's Arm is Free**: This indicates that the hero isn’t holding anything like a sword. It’s important because handling traps might require free hands—think about needing your hands free to disarm or avoid a trap carefully.

When our hero completes this action, several things happen:
- **Hero is now in Room B**: Just like when you walk into another room, you’re no longer in the first room.
- **Room A is destroyed**: This could mean the hero leaves it in a way that no one can follow—maybe they close a heavy door that locks automatically.
- **Hero is no longer in Room A**: It confirms that the hero has completely left Room A.

This action is designed for specific situations in the dungeon where the hero might need to move strategically, even into risky areas, to navigate through the dungeon and eventually find the exit.","Parameters:
1. ?from - cells
2. ?to - cells

Preconditions:
```
(and
    (not (at-hero ?from))
    (connected ?from ?to)
    (not (is-destroyed ?to))
    (has-trap ?to)
    (arm-free)
)
```

Effects:
```
(and
    (not (has-trap ?from))
    (at-hero ?to)
    (is-destroyed ?from)
)
```
","(:action move-to-trap
    :parameters (?from - cells ?to - cells)
    :precondition (and (connected ?from ?to) (at-hero ?from) (not (is-destroyed ?to)) (not (has-trap ?from)) (has-trap ?to) (arm-free))
    :effect (and (at-hero ?to) (is-destroyed ?from) (not (at-hero ?from)))
)","swap (not (has-trap ?from)) with (not (at-hero ?from))
negate (at-hero ?from) in preconditions
"
rpggame,move-to-trap,0.4619557559490204,Hard Negative (Manipulated Action),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: The hero can **move** to an adjacent room (connected by a corridor) that has not been destroyed (i.e., the hero has not already visited the room). When this action is executed, the hero gets into a location with a trap

Action name: move-to-trap


Your answer:

**Explanation:**

Imagine you're guiding a hero who just woke up in a mysterious dungeon. Each room can have different things: some are empty, others have monsters, some have traps, and a few might have swords. There's also a special room with an exit—our hero's goal.

Now, let's talk about the action called **move-to-trap**. This action involves our hero moving from one room (we'll call it ""Room A"") to another room (""Room B""), where, unfortunately, there's a trap waiting. Here's why each part of the plan (or action schema) makes sense:

1. **Connected Rooms**: Our hero can only move to a room directly connected to the one they're currently in. This is like being in your house and only being able to walk into rooms that have doors leading from where you are now.

2. **Hero's Current Location**: The hero must start in Room A to move to Room B. You can't move from a place if you're not actually there, right?

3. **Room B Not Destroyed**: The room our hero is moving to mustn't be already destroyed (or in ruins). It's like making sure the bridge you want to cross hasn't collapsed.

4. **Room A Doesn't Have a Trap**: It’s safer if the room our hero is leaving doesn't have a trap. Imagine trying to leave a room with a trap; it could activate and cause trouble!

5. **Room B Has a Trap**: Since the action is called **move-to-trap**, it specifically involves moving to a room with a trap, almost like knowing there's a puddle ahead but stepping into it anyway because it's the only path forward.

6. **Hero's Arm is Free**: This indicates that the hero isn’t holding anything like a sword. It’s important because handling traps might require free hands—think about needing your hands free to disarm or avoid a trap carefully.

When our hero completes this action, several things happen:
- **Hero is now in Room B**: Just like when you walk into another room, you’re no longer in the first room.
- **Room A is destroyed**: This could mean the hero leaves it in a way that no one can follow—maybe they close a heavy door that locks automatically.
- **Hero is no longer in Room A**: It confirms that the hero has completely left Room A.

This action is designed for specific situations in the dungeon where the hero might need to move strategically, even into risky areas, to navigate through the dungeon and eventually find the exit.","Parameters:
1. ?from - cells
2. ?to - cells

Preconditions:
```
(and
    (connected ?from ?to)
    (at-hero ?from)
    (not (is-destroyed ?to))
    (not (has-trap ?from))
    (has-trap ?to)
    (arm-free)
)
```

Effects:
```
(and
    (at-hero ?to)
    (is-destroyed ?from)
)
```
","(:action move-to-trap
    :parameters (?from - cells ?to - cells)
    :precondition (and (connected ?from ?to) (at-hero ?from) (not (is-destroyed ?to)) (not (has-trap ?from)) (has-trap ?to) (arm-free))
    :effect (and (at-hero ?to) (is-destroyed ?from) (not (at-hero ?from)))
)","remove (not (at-hero ?from)) from effects
"
rpggame,move-to-trap,0.29896363615989685,Hard Negative (Manipulated Action),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: The hero can **move** to an adjacent room (connected by a corridor) that has not been destroyed (i.e., the hero has not already visited the room). When this action is executed, the hero gets into a location with a trap

Action name: move-to-trap


Your answer:

**Explanation:**

Imagine you're guiding a hero who just woke up in a mysterious dungeon. Each room can have different things: some are empty, others have monsters, some have traps, and a few might have swords. There's also a special room with an exit—our hero's goal.

Now, let's talk about the action called **move-to-trap**. This action involves our hero moving from one room (we'll call it ""Room A"") to another room (""Room B""), where, unfortunately, there's a trap waiting. Here's why each part of the plan (or action schema) makes sense:

1. **Connected Rooms**: Our hero can only move to a room directly connected to the one they're currently in. This is like being in your house and only being able to walk into rooms that have doors leading from where you are now.

2. **Hero's Current Location**: The hero must start in Room A to move to Room B. You can't move from a place if you're not actually there, right?

3. **Room B Not Destroyed**: The room our hero is moving to mustn't be already destroyed (or in ruins). It's like making sure the bridge you want to cross hasn't collapsed.

4. **Room A Doesn't Have a Trap**: It’s safer if the room our hero is leaving doesn't have a trap. Imagine trying to leave a room with a trap; it could activate and cause trouble!

5. **Room B Has a Trap**: Since the action is called **move-to-trap**, it specifically involves moving to a room with a trap, almost like knowing there's a puddle ahead but stepping into it anyway because it's the only path forward.

6. **Hero's Arm is Free**: This indicates that the hero isn’t holding anything like a sword. It’s important because handling traps might require free hands—think about needing your hands free to disarm or avoid a trap carefully.

When our hero completes this action, several things happen:
- **Hero is now in Room B**: Just like when you walk into another room, you’re no longer in the first room.
- **Room A is destroyed**: This could mean the hero leaves it in a way that no one can follow—maybe they close a heavy door that locks automatically.
- **Hero is no longer in Room A**: It confirms that the hero has completely left Room A.

This action is designed for specific situations in the dungeon where the hero might need to move strategically, even into risky areas, to navigate through the dungeon and eventually find the exit.","Parameters:
1. ?from - cells
2. ?to - cells

Preconditions:
```
(and
    (not (at-hero ?from))
    (not (is-destroyed ?to))
    (not (has-trap ?from))
    (has-trap ?to)
    (arm-free)
)
```

Effects:
```
(and
    (at-hero ?to)
    (is-destroyed ?from)
    (not (at-hero ?from))
)
```
","(:action move-to-trap
    :parameters (?from - cells ?to - cells)
    :precondition (and (connected ?from ?to) (at-hero ?from) (not (is-destroyed ?to)) (not (has-trap ?from)) (has-trap ?to) (arm-free))
    :effect (and (at-hero ?to) (is-destroyed ?from) (not (at-hero ?from)))
)","negate (at-hero ?from) in preconditions
remove (connected ?from ?to) from preconditions
"
rpggame,move-to-trap,0.3523814380168915,Hard Negative (Manipulated Action),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: The hero can **move** to an adjacent room (connected by a corridor) that has not been destroyed (i.e., the hero has not already visited the room). When this action is executed, the hero gets into a location with a trap

Action name: move-to-trap


Your answer:

**Explanation:**

Imagine you're guiding a hero who just woke up in a mysterious dungeon. Each room can have different things: some are empty, others have monsters, some have traps, and a few might have swords. There's also a special room with an exit—our hero's goal.

Now, let's talk about the action called **move-to-trap**. This action involves our hero moving from one room (we'll call it ""Room A"") to another room (""Room B""), where, unfortunately, there's a trap waiting. Here's why each part of the plan (or action schema) makes sense:

1. **Connected Rooms**: Our hero can only move to a room directly connected to the one they're currently in. This is like being in your house and only being able to walk into rooms that have doors leading from where you are now.

2. **Hero's Current Location**: The hero must start in Room A to move to Room B. You can't move from a place if you're not actually there, right?

3. **Room B Not Destroyed**: The room our hero is moving to mustn't be already destroyed (or in ruins). It's like making sure the bridge you want to cross hasn't collapsed.

4. **Room A Doesn't Have a Trap**: It’s safer if the room our hero is leaving doesn't have a trap. Imagine trying to leave a room with a trap; it could activate and cause trouble!

5. **Room B Has a Trap**: Since the action is called **move-to-trap**, it specifically involves moving to a room with a trap, almost like knowing there's a puddle ahead but stepping into it anyway because it's the only path forward.

6. **Hero's Arm is Free**: This indicates that the hero isn’t holding anything like a sword. It’s important because handling traps might require free hands—think about needing your hands free to disarm or avoid a trap carefully.

When our hero completes this action, several things happen:
- **Hero is now in Room B**: Just like when you walk into another room, you’re no longer in the first room.
- **Room A is destroyed**: This could mean the hero leaves it in a way that no one can follow—maybe they close a heavy door that locks automatically.
- **Hero is no longer in Room A**: It confirms that the hero has completely left Room A.

This action is designed for specific situations in the dungeon where the hero might need to move strategically, even into risky areas, to navigate through the dungeon and eventually find the exit.","Parameters:
1. ?from - cells
2. ?to - cells

Preconditions:
```
(and
    (is-destroyed ?from)
    (not (at-hero ?from))
    (connected ?from ?to)
    (at-hero ?from)
    (not (has-trap ?from))
    (arm-free)
)
```

Effects:
```
(and
    (has-trap ?to)
    (not (is-destroyed ?to))
    (at-hero ?to)
)
```
","(:action move-to-trap
    :parameters (?from - cells ?to - cells)
    :precondition (and (connected ?from ?to) (at-hero ?from) (not (is-destroyed ?to)) (not (has-trap ?from)) (has-trap ?to) (arm-free))
    :effect (and (at-hero ?to) (is-destroyed ?from) (not (at-hero ?from)))
)","swap (has-trap ?to) with (is-destroyed ?from)
swap (not (is-destroyed ?to)) with (not (at-hero ?from))
"
rpggame,move-to-trap,0.3638225793838501,Hard Negative (Manipulated Action),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: The hero can **move** to an adjacent room (connected by a corridor) that has not been destroyed (i.e., the hero has not already visited the room). When this action is executed, the hero gets into a location with a trap

Action name: move-to-trap


Your answer:

**Explanation:**

Imagine you're guiding a hero who just woke up in a mysterious dungeon. Each room can have different things: some are empty, others have monsters, some have traps, and a few might have swords. There's also a special room with an exit—our hero's goal.

Now, let's talk about the action called **move-to-trap**. This action involves our hero moving from one room (we'll call it ""Room A"") to another room (""Room B""), where, unfortunately, there's a trap waiting. Here's why each part of the plan (or action schema) makes sense:

1. **Connected Rooms**: Our hero can only move to a room directly connected to the one they're currently in. This is like being in your house and only being able to walk into rooms that have doors leading from where you are now.

2. **Hero's Current Location**: The hero must start in Room A to move to Room B. You can't move from a place if you're not actually there, right?

3. **Room B Not Destroyed**: The room our hero is moving to mustn't be already destroyed (or in ruins). It's like making sure the bridge you want to cross hasn't collapsed.

4. **Room A Doesn't Have a Trap**: It’s safer if the room our hero is leaving doesn't have a trap. Imagine trying to leave a room with a trap; it could activate and cause trouble!

5. **Room B Has a Trap**: Since the action is called **move-to-trap**, it specifically involves moving to a room with a trap, almost like knowing there's a puddle ahead but stepping into it anyway because it's the only path forward.

6. **Hero's Arm is Free**: This indicates that the hero isn’t holding anything like a sword. It’s important because handling traps might require free hands—think about needing your hands free to disarm or avoid a trap carefully.

When our hero completes this action, several things happen:
- **Hero is now in Room B**: Just like when you walk into another room, you’re no longer in the first room.
- **Room A is destroyed**: This could mean the hero leaves it in a way that no one can follow—maybe they close a heavy door that locks automatically.
- **Hero is no longer in Room A**: It confirms that the hero has completely left Room A.

This action is designed for specific situations in the dungeon where the hero might need to move strategically, even into risky areas, to navigate through the dungeon and eventually find the exit.","Parameters:
1. ?from - cells
2. ?to - cells

Preconditions:
```
(and
    (connected ?from ?to)
    (not (has-trap ?from))
    (has-trap ?to)
    (arm-free)
)
```

Effects:
```
(and
    (at-hero ?to)
    (is-destroyed ?from)
    (not (at-hero ?from))
)
```
","(:action move-to-trap
    :parameters (?from - cells ?to - cells)
    :precondition (and (connected ?from ?to) (at-hero ?from) (not (is-destroyed ?to)) (not (has-trap ?from)) (has-trap ?to) (arm-free))
    :effect (and (at-hero ?to) (is-destroyed ?from) (not (at-hero ?from)))
)","remove (at-hero ?from) from preconditions
remove (not (is-destroyed ?to)) from preconditions
"
rpggame,move-to-trap,0.7892916202545166,Hard Negative (Manipulated Action),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: The hero can **move** to an adjacent room (connected by a corridor) that has not been destroyed (i.e., the hero has not already visited the room). When this action is executed, the hero gets into a location with a trap

Action name: move-to-trap


Your answer:
","**Explanation:**

Imagine you're guiding a hero who just woke up in a mysterious dungeon. Each room can have different things: some are empty, others have monsters, some have traps, and a few might have swords. There's also a special room with an exit—our hero's goal.

Now, let's talk about the action called **move-to-trap**. This action involves our hero moving from one room (we'll call it ""Room A"") to another room (""Room B""), where, unfortunately, there's a trap waiting. Here's why each part of the plan (or action schema) makes sense:

1. **Connected Rooms**: Our hero can only move to a room directly connected to the one they're currently in. This is like being in your house and only being able to walk into rooms that have doors leading from where you are now.

2. **Hero's Current Location**: The hero must start in Room A to move to Room B. You can't move from a place if you're not actually there, right?

3. **Room B Not Destroyed**: The room our hero is moving to mustn't be already destroyed (or in ruins). It's like making sure the bridge you want to cross hasn't collapsed.

4. **Room A Doesn't Have a Trap**: It’s safer if the room our hero is leaving doesn't have a trap. Imagine trying to leave a room with a trap; it could activate and cause trouble!

5. **Room B Has a Trap**: Since the action is called **move-to-trap**, it specifically involves moving to a room with a trap, almost like knowing there's a puddle ahead but stepping into it anyway because it's the only path forward.

6. **Hero's Arm is Free**: This indicates that the hero isn’t holding anything like a sword. It’s important because handling traps might require free hands—think about needing your hands free to disarm or avoid a trap carefully.

When our hero completes this action, several things happen:
- **Hero is now in Room B**: Just like when you walk into another room, you’re no longer in the first room.
- **Room A is destroyed**: This could mean the hero leaves it in a way that no one can follow—maybe they close a heavy door that locks automatically.
- **Hero is no longer in Room A**: It confirms that the hero has completely left Room A.

This action is designed for specific situations in the dungeon where the hero might need to move strategically, even into risky areas, to navigate through the dungeon and eventually find the exit.
Parameters:
1. ?from - cells
2. ?to - cells

Preconditions:
```
(and
    (not (at-hero ?from))
    (connected ?from ?to)
    (at-hero ?from)
    (not (is-destroyed ?to))
    (not (has-trap ?from))
    (has-trap ?to)
)
```

Effects:
```
(and
    (arm-free)
    (is-destroyed ?from)
)
```
","(:action move-to-trap
    :parameters (?from - cells ?to - cells)
    :precondition (and (connected ?from ?to) (at-hero ?from) (not (is-destroyed ?to)) (not (has-trap ?from)) (has-trap ?to) (arm-free))
    :effect (and (at-hero ?to) (is-destroyed ?from) (not (at-hero ?from)))
)","swap (arm-free) with (not (at-hero ?from))
remove (at-hero ?to) from effects
"
rpggame,move-to-trap,0.7892916202545166,Hard Negative (Manipulated Action),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: The hero can **move** to an adjacent room (connected by a corridor) that has not been destroyed (i.e., the hero has not already visited the room). When this action is executed, the hero gets into a location with a trap

Action name: move-to-trap


Your answer:
","**Explanation:**

Imagine you're guiding a hero who just woke up in a mysterious dungeon. Each room can have different things: some are empty, others have monsters, some have traps, and a few might have swords. There's also a special room with an exit—our hero's goal.

Now, let's talk about the action called **move-to-trap**. This action involves our hero moving from one room (we'll call it ""Room A"") to another room (""Room B""), where, unfortunately, there's a trap waiting. Here's why each part of the plan (or action schema) makes sense:

1. **Connected Rooms**: Our hero can only move to a room directly connected to the one they're currently in. This is like being in your house and only being able to walk into rooms that have doors leading from where you are now.

2. **Hero's Current Location**: The hero must start in Room A to move to Room B. You can't move from a place if you're not actually there, right?

3. **Room B Not Destroyed**: The room our hero is moving to mustn't be already destroyed (or in ruins). It's like making sure the bridge you want to cross hasn't collapsed.

4. **Room A Doesn't Have a Trap**: It’s safer if the room our hero is leaving doesn't have a trap. Imagine trying to leave a room with a trap; it could activate and cause trouble!

5. **Room B Has a Trap**: Since the action is called **move-to-trap**, it specifically involves moving to a room with a trap, almost like knowing there's a puddle ahead but stepping into it anyway because it's the only path forward.

6. **Hero's Arm is Free**: This indicates that the hero isn’t holding anything like a sword. It’s important because handling traps might require free hands—think about needing your hands free to disarm or avoid a trap carefully.

When our hero completes this action, several things happen:
- **Hero is now in Room B**: Just like when you walk into another room, you’re no longer in the first room.
- **Room A is destroyed**: This could mean the hero leaves it in a way that no one can follow—maybe they close a heavy door that locks automatically.
- **Hero is no longer in Room A**: It confirms that the hero has completely left Room A.

This action is designed for specific situations in the dungeon where the hero might need to move strategically, even into risky areas, to navigate through the dungeon and eventually find the exit.
Parameters:
1. ?from - cells
2. ?to - cells

Preconditions:
```
(and
    (connected ?from ?to)
    (at-hero ?from)
    (not (is-destroyed ?to))
    (not (has-trap ?from))
    (has-trap ?to)
    (arm-free)
)
```

Effects:
```
(and
    (at-hero ?to)
    (is-destroyed ?from)
)
```
","(:action move-to-trap
    :parameters (?from - cells ?to - cells)
    :precondition (and (connected ?from ?to) (at-hero ?from) (not (is-destroyed ?to)) (not (has-trap ?from)) (has-trap ?to) (arm-free))
    :effect (and (at-hero ?to) (is-destroyed ?from) (not (at-hero ?from)))
)","remove (not (at-hero ?from)) from effects
"
rpggame,move-to-trap,0.7892916202545166,Hard Negative (Manipulated Action),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: The hero can **move** to an adjacent room (connected by a corridor) that has not been destroyed (i.e., the hero has not already visited the room). When this action is executed, the hero gets into a location with a trap

Action name: move-to-trap


Your answer:
","**Explanation:**

Imagine you're guiding a hero who just woke up in a mysterious dungeon. Each room can have different things: some are empty, others have monsters, some have traps, and a few might have swords. There's also a special room with an exit—our hero's goal.

Now, let's talk about the action called **move-to-trap**. This action involves our hero moving from one room (we'll call it ""Room A"") to another room (""Room B""), where, unfortunately, there's a trap waiting. Here's why each part of the plan (or action schema) makes sense:

1. **Connected Rooms**: Our hero can only move to a room directly connected to the one they're currently in. This is like being in your house and only being able to walk into rooms that have doors leading from where you are now.

2. **Hero's Current Location**: The hero must start in Room A to move to Room B. You can't move from a place if you're not actually there, right?

3. **Room B Not Destroyed**: The room our hero is moving to mustn't be already destroyed (or in ruins). It's like making sure the bridge you want to cross hasn't collapsed.

4. **Room A Doesn't Have a Trap**: It’s safer if the room our hero is leaving doesn't have a trap. Imagine trying to leave a room with a trap; it could activate and cause trouble!

5. **Room B Has a Trap**: Since the action is called **move-to-trap**, it specifically involves moving to a room with a trap, almost like knowing there's a puddle ahead but stepping into it anyway because it's the only path forward.

6. **Hero's Arm is Free**: This indicates that the hero isn’t holding anything like a sword. It’s important because handling traps might require free hands—think about needing your hands free to disarm or avoid a trap carefully.

When our hero completes this action, several things happen:
- **Hero is now in Room B**: Just like when you walk into another room, you’re no longer in the first room.
- **Room A is destroyed**: This could mean the hero leaves it in a way that no one can follow—maybe they close a heavy door that locks automatically.
- **Hero is no longer in Room A**: It confirms that the hero has completely left Room A.

This action is designed for specific situations in the dungeon where the hero might need to move strategically, even into risky areas, to navigate through the dungeon and eventually find the exit.
Parameters:
1. ?from - cells
2. ?to - cells

Preconditions:
```
(and
    (is-destroyed ?to)
    (connected ?from ?to)
    (at-hero ?from)
    (not (has-trap ?from))
    (has-trap ?to)
)
```

Effects:
```
(and
    (at-hero ?to)
    (is-destroyed ?from)
    (not (at-hero ?from))
)
```
","(:action move-to-trap
    :parameters (?from - cells ?to - cells)
    :precondition (and (connected ?from ?to) (at-hero ?from) (not (is-destroyed ?to)) (not (has-trap ?from)) (has-trap ?to) (arm-free))
    :effect (and (at-hero ?to) (is-destroyed ?from) (not (at-hero ?from)))
)","remove (arm-free) from preconditions
negate (not (is-destroyed ?to)) in preconditions
"
rpggame,move-to-trap,0.7892916202545166,Hard Negative (Manipulated Action),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: The hero can **move** to an adjacent room (connected by a corridor) that has not been destroyed (i.e., the hero has not already visited the room). When this action is executed, the hero gets into a location with a trap

Action name: move-to-trap


Your answer:
","**Explanation:**

Imagine you're guiding a hero who just woke up in a mysterious dungeon. Each room can have different things: some are empty, others have monsters, some have traps, and a few might have swords. There's also a special room with an exit—our hero's goal.

Now, let's talk about the action called **move-to-trap**. This action involves our hero moving from one room (we'll call it ""Room A"") to another room (""Room B""), where, unfortunately, there's a trap waiting. Here's why each part of the plan (or action schema) makes sense:

1. **Connected Rooms**: Our hero can only move to a room directly connected to the one they're currently in. This is like being in your house and only being able to walk into rooms that have doors leading from where you are now.

2. **Hero's Current Location**: The hero must start in Room A to move to Room B. You can't move from a place if you're not actually there, right?

3. **Room B Not Destroyed**: The room our hero is moving to mustn't be already destroyed (or in ruins). It's like making sure the bridge you want to cross hasn't collapsed.

4. **Room A Doesn't Have a Trap**: It’s safer if the room our hero is leaving doesn't have a trap. Imagine trying to leave a room with a trap; it could activate and cause trouble!

5. **Room B Has a Trap**: Since the action is called **move-to-trap**, it specifically involves moving to a room with a trap, almost like knowing there's a puddle ahead but stepping into it anyway because it's the only path forward.

6. **Hero's Arm is Free**: This indicates that the hero isn’t holding anything like a sword. It’s important because handling traps might require free hands—think about needing your hands free to disarm or avoid a trap carefully.

When our hero completes this action, several things happen:
- **Hero is now in Room B**: Just like when you walk into another room, you’re no longer in the first room.
- **Room A is destroyed**: This could mean the hero leaves it in a way that no one can follow—maybe they close a heavy door that locks automatically.
- **Hero is no longer in Room A**: It confirms that the hero has completely left Room A.

This action is designed for specific situations in the dungeon where the hero might need to move strategically, even into risky areas, to navigate through the dungeon and eventually find the exit.
Parameters:
1. ?from - cells
2. ?to - cells

Preconditions:
```
(and
    (connected ?from ?to)
    (at-hero ?from)
    (not (is-destroyed ?to))
    (has-trap ?to)
    (arm-free)
)
```

Effects:
```
(and
    (is-destroyed ?from)
    (not (at-hero ?from))
)
```
","(:action move-to-trap
    :parameters (?from - cells ?to - cells)
    :precondition (and (connected ?from ?to) (at-hero ?from) (not (is-destroyed ?to)) (not (has-trap ?from)) (has-trap ?to) (arm-free))
    :effect (and (at-hero ?to) (is-destroyed ?from) (not (at-hero ?from)))
)","remove (at-hero ?to) from effects
remove (not (has-trap ?from)) from preconditions
"
rpggame,move-to-trap,0.7892916202545166,Hard Negative (Manipulated Action),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: The hero can **move** to an adjacent room (connected by a corridor) that has not been destroyed (i.e., the hero has not already visited the room). When this action is executed, the hero gets into a location with a trap

Action name: move-to-trap


Your answer:
","**Explanation:**

Imagine you're guiding a hero who just woke up in a mysterious dungeon. Each room can have different things: some are empty, others have monsters, some have traps, and a few might have swords. There's also a special room with an exit—our hero's goal.

Now, let's talk about the action called **move-to-trap**. This action involves our hero moving from one room (we'll call it ""Room A"") to another room (""Room B""), where, unfortunately, there's a trap waiting. Here's why each part of the plan (or action schema) makes sense:

1. **Connected Rooms**: Our hero can only move to a room directly connected to the one they're currently in. This is like being in your house and only being able to walk into rooms that have doors leading from where you are now.

2. **Hero's Current Location**: The hero must start in Room A to move to Room B. You can't move from a place if you're not actually there, right?

3. **Room B Not Destroyed**: The room our hero is moving to mustn't be already destroyed (or in ruins). It's like making sure the bridge you want to cross hasn't collapsed.

4. **Room A Doesn't Have a Trap**: It’s safer if the room our hero is leaving doesn't have a trap. Imagine trying to leave a room with a trap; it could activate and cause trouble!

5. **Room B Has a Trap**: Since the action is called **move-to-trap**, it specifically involves moving to a room with a trap, almost like knowing there's a puddle ahead but stepping into it anyway because it's the only path forward.

6. **Hero's Arm is Free**: This indicates that the hero isn’t holding anything like a sword. It’s important because handling traps might require free hands—think about needing your hands free to disarm or avoid a trap carefully.

When our hero completes this action, several things happen:
- **Hero is now in Room B**: Just like when you walk into another room, you’re no longer in the first room.
- **Room A is destroyed**: This could mean the hero leaves it in a way that no one can follow—maybe they close a heavy door that locks automatically.
- **Hero is no longer in Room A**: It confirms that the hero has completely left Room A.

This action is designed for specific situations in the dungeon where the hero might need to move strategically, even into risky areas, to navigate through the dungeon and eventually find the exit.
Parameters:
1. ?from - cells
2. ?to - cells

Preconditions:
```
(and
    (at-hero ?to)
    (is-destroyed ?from)
    (at-hero ?from)
    (not (is-destroyed ?to))
    (not (has-trap ?from))
    (has-trap ?to)
)
```

Effects:
```
(and
    (connected ?from ?to)
    (arm-free)
    (not (at-hero ?from))
)
```
","(:action move-to-trap
    :parameters (?from - cells ?to - cells)
    :precondition (and (connected ?from ?to) (at-hero ?from) (not (is-destroyed ?to)) (not (has-trap ?from)) (has-trap ?to) (arm-free))
    :effect (and (at-hero ?to) (is-destroyed ?from) (not (at-hero ?from)))
)","swap (connected ?from ?to) with (at-hero ?to)
swap (arm-free) with (is-destroyed ?from)
"
rpggame,move-to-trap,0.7892916202545166,Hard Negative (Manipulated Action),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: The hero can **move** to an adjacent room (connected by a corridor) that has not been destroyed (i.e., the hero has not already visited the room). When this action is executed, the hero gets into a location with a trap

Action name: move-to-trap


Your answer:
","**Explanation:**

Imagine you're guiding a hero who just woke up in a mysterious dungeon. Each room can have different things: some are empty, others have monsters, some have traps, and a few might have swords. There's also a special room with an exit—our hero's goal.

Now, let's talk about the action called **move-to-trap**. This action involves our hero moving from one room (we'll call it ""Room A"") to another room (""Room B""), where, unfortunately, there's a trap waiting. Here's why each part of the plan (or action schema) makes sense:

1. **Connected Rooms**: Our hero can only move to a room directly connected to the one they're currently in. This is like being in your house and only being able to walk into rooms that have doors leading from where you are now.

2. **Hero's Current Location**: The hero must start in Room A to move to Room B. You can't move from a place if you're not actually there, right?

3. **Room B Not Destroyed**: The room our hero is moving to mustn't be already destroyed (or in ruins). It's like making sure the bridge you want to cross hasn't collapsed.

4. **Room A Doesn't Have a Trap**: It’s safer if the room our hero is leaving doesn't have a trap. Imagine trying to leave a room with a trap; it could activate and cause trouble!

5. **Room B Has a Trap**: Since the action is called **move-to-trap**, it specifically involves moving to a room with a trap, almost like knowing there's a puddle ahead but stepping into it anyway because it's the only path forward.

6. **Hero's Arm is Free**: This indicates that the hero isn’t holding anything like a sword. It’s important because handling traps might require free hands—think about needing your hands free to disarm or avoid a trap carefully.

When our hero completes this action, several things happen:
- **Hero is now in Room B**: Just like when you walk into another room, you’re no longer in the first room.
- **Room A is destroyed**: This could mean the hero leaves it in a way that no one can follow—maybe they close a heavy door that locks automatically.
- **Hero is no longer in Room A**: It confirms that the hero has completely left Room A.

This action is designed for specific situations in the dungeon where the hero might need to move strategically, even into risky areas, to navigate through the dungeon and eventually find the exit.
Parameters:
1. ?from - cells
2. ?to - cells

Preconditions:
```
(and
    (not (connected ?from ?to))
    (at-hero ?from)
    (not (is-destroyed ?to))
    (not (has-trap ?from))
    (has-trap ?to)
    (arm-free)
)
```

Effects:
```
(and
    (at-hero ?to)
    (is-destroyed ?from)
)
```
","(:action move-to-trap
    :parameters (?from - cells ?to - cells)
    :precondition (and (connected ?from ?to) (at-hero ?from) (not (is-destroyed ?to)) (not (has-trap ?from)) (has-trap ?to) (arm-free))
    :effect (and (at-hero ?to) (is-destroyed ?from) (not (at-hero ?from)))
)","negate (connected ?from ?to) in preconditions
remove (not (at-hero ?from)) from effects
"
rpggame,move-to-trap,0.7892916202545166,Hard Negative (Manipulated Action),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: The hero can **move** to an adjacent room (connected by a corridor) that has not been destroyed (i.e., the hero has not already visited the room). When this action is executed, the hero gets into a location with a trap

Action name: move-to-trap


Your answer:
","**Explanation:**

Imagine you're guiding a hero who just woke up in a mysterious dungeon. Each room can have different things: some are empty, others have monsters, some have traps, and a few might have swords. There's also a special room with an exit—our hero's goal.

Now, let's talk about the action called **move-to-trap**. This action involves our hero moving from one room (we'll call it ""Room A"") to another room (""Room B""), where, unfortunately, there's a trap waiting. Here's why each part of the plan (or action schema) makes sense:

1. **Connected Rooms**: Our hero can only move to a room directly connected to the one they're currently in. This is like being in your house and only being able to walk into rooms that have doors leading from where you are now.

2. **Hero's Current Location**: The hero must start in Room A to move to Room B. You can't move from a place if you're not actually there, right?

3. **Room B Not Destroyed**: The room our hero is moving to mustn't be already destroyed (or in ruins). It's like making sure the bridge you want to cross hasn't collapsed.

4. **Room A Doesn't Have a Trap**: It’s safer if the room our hero is leaving doesn't have a trap. Imagine trying to leave a room with a trap; it could activate and cause trouble!

5. **Room B Has a Trap**: Since the action is called **move-to-trap**, it specifically involves moving to a room with a trap, almost like knowing there's a puddle ahead but stepping into it anyway because it's the only path forward.

6. **Hero's Arm is Free**: This indicates that the hero isn’t holding anything like a sword. It’s important because handling traps might require free hands—think about needing your hands free to disarm or avoid a trap carefully.

When our hero completes this action, several things happen:
- **Hero is now in Room B**: Just like when you walk into another room, you’re no longer in the first room.
- **Room A is destroyed**: This could mean the hero leaves it in a way that no one can follow—maybe they close a heavy door that locks automatically.
- **Hero is no longer in Room A**: It confirms that the hero has completely left Room A.

This action is designed for specific situations in the dungeon where the hero might need to move strategically, even into risky areas, to navigate through the dungeon and eventually find the exit.
Parameters:
1. ?from - cells
2. ?to - cells

Preconditions:
```
(and
    (is-destroyed ?from)
    (connected ?from ?to)
    (at-hero ?from)
    (not (has-trap ?from))
    (has-trap ?to)
    (arm-free)
)
```

Effects:
```
(and
    (not (is-destroyed ?to))
    (at-hero ?to)
    (not (at-hero ?from))
)
```
","(:action move-to-trap
    :parameters (?from - cells ?to - cells)
    :precondition (and (connected ?from ?to) (at-hero ?from) (not (is-destroyed ?to)) (not (has-trap ?from)) (has-trap ?to) (arm-free))
    :effect (and (at-hero ?to) (is-destroyed ?from) (not (at-hero ?from)))
)","swap (not (is-destroyed ?to)) with (is-destroyed ?from)
"
rpggame,move-to-trap,0.7892916202545166,Hard Negative (Manipulated Action),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: The hero can **move** to an adjacent room (connected by a corridor) that has not been destroyed (i.e., the hero has not already visited the room). When this action is executed, the hero gets into a location with a trap

Action name: move-to-trap


Your answer:
","**Explanation:**

Imagine you're guiding a hero who just woke up in a mysterious dungeon. Each room can have different things: some are empty, others have monsters, some have traps, and a few might have swords. There's also a special room with an exit—our hero's goal.

Now, let's talk about the action called **move-to-trap**. This action involves our hero moving from one room (we'll call it ""Room A"") to another room (""Room B""), where, unfortunately, there's a trap waiting. Here's why each part of the plan (or action schema) makes sense:

1. **Connected Rooms**: Our hero can only move to a room directly connected to the one they're currently in. This is like being in your house and only being able to walk into rooms that have doors leading from where you are now.

2. **Hero's Current Location**: The hero must start in Room A to move to Room B. You can't move from a place if you're not actually there, right?

3. **Room B Not Destroyed**: The room our hero is moving to mustn't be already destroyed (or in ruins). It's like making sure the bridge you want to cross hasn't collapsed.

4. **Room A Doesn't Have a Trap**: It’s safer if the room our hero is leaving doesn't have a trap. Imagine trying to leave a room with a trap; it could activate and cause trouble!

5. **Room B Has a Trap**: Since the action is called **move-to-trap**, it specifically involves moving to a room with a trap, almost like knowing there's a puddle ahead but stepping into it anyway because it's the only path forward.

6. **Hero's Arm is Free**: This indicates that the hero isn’t holding anything like a sword. It’s important because handling traps might require free hands—think about needing your hands free to disarm or avoid a trap carefully.

When our hero completes this action, several things happen:
- **Hero is now in Room B**: Just like when you walk into another room, you’re no longer in the first room.
- **Room A is destroyed**: This could mean the hero leaves it in a way that no one can follow—maybe they close a heavy door that locks automatically.
- **Hero is no longer in Room A**: It confirms that the hero has completely left Room A.

This action is designed for specific situations in the dungeon where the hero might need to move strategically, even into risky areas, to navigate through the dungeon and eventually find the exit.
Parameters:
1. ?from - cells
2. ?to - cells

Preconditions:
```
(and
    (not (at-hero ?from))
    (connected ?from ?to)
    (at-hero ?from)
    (not (is-destroyed ?to))
    (has-trap ?to)
    (arm-free)
)
```

Effects:
```
(and
    (not (has-trap ?from))
    (at-hero ?to)
    (is-destroyed ?from)
)
```
","(:action move-to-trap
    :parameters (?from - cells ?to - cells)
    :precondition (and (connected ?from ?to) (at-hero ?from) (not (is-destroyed ?to)) (not (has-trap ?from)) (has-trap ?to) (arm-free))
    :effect (and (at-hero ?to) (is-destroyed ?from) (not (at-hero ?from)))
)","swap (not (has-trap ?from)) with (not (at-hero ?from))
"
rpggame,move-to-trap,0.7892916202545166,Hard Negative (Manipulated Action),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: The hero can **move** to an adjacent room (connected by a corridor) that has not been destroyed (i.e., the hero has not already visited the room). When this action is executed, the hero gets into a location with a trap

Action name: move-to-trap


Your answer:
","**Explanation:**

Imagine you're guiding a hero who just woke up in a mysterious dungeon. Each room can have different things: some are empty, others have monsters, some have traps, and a few might have swords. There's also a special room with an exit—our hero's goal.

Now, let's talk about the action called **move-to-trap**. This action involves our hero moving from one room (we'll call it ""Room A"") to another room (""Room B""), where, unfortunately, there's a trap waiting. Here's why each part of the plan (or action schema) makes sense:

1. **Connected Rooms**: Our hero can only move to a room directly connected to the one they're currently in. This is like being in your house and only being able to walk into rooms that have doors leading from where you are now.

2. **Hero's Current Location**: The hero must start in Room A to move to Room B. You can't move from a place if you're not actually there, right?

3. **Room B Not Destroyed**: The room our hero is moving to mustn't be already destroyed (or in ruins). It's like making sure the bridge you want to cross hasn't collapsed.

4. **Room A Doesn't Have a Trap**: It’s safer if the room our hero is leaving doesn't have a trap. Imagine trying to leave a room with a trap; it could activate and cause trouble!

5. **Room B Has a Trap**: Since the action is called **move-to-trap**, it specifically involves moving to a room with a trap, almost like knowing there's a puddle ahead but stepping into it anyway because it's the only path forward.

6. **Hero's Arm is Free**: This indicates that the hero isn’t holding anything like a sword. It’s important because handling traps might require free hands—think about needing your hands free to disarm or avoid a trap carefully.

When our hero completes this action, several things happen:
- **Hero is now in Room B**: Just like when you walk into another room, you’re no longer in the first room.
- **Room A is destroyed**: This could mean the hero leaves it in a way that no one can follow—maybe they close a heavy door that locks automatically.
- **Hero is no longer in Room A**: It confirms that the hero has completely left Room A.

This action is designed for specific situations in the dungeon where the hero might need to move strategically, even into risky areas, to navigate through the dungeon and eventually find the exit.
Parameters:
1. ?from - cells
2. ?to - cells

Preconditions:
```
(and
    (connected ?from ?to)
    (at-hero ?from)
    (not (is-destroyed ?to))
    (not (has-trap ?from))
    (has-trap ?to)
    (arm-free)
)
```

Effects:
```
(and
    (at-hero ?to)
    (not (at-hero ?from))
)
```
","(:action move-to-trap
    :parameters (?from - cells ?to - cells)
    :precondition (and (connected ?from ?to) (at-hero ?from) (not (is-destroyed ?to)) (not (has-trap ?from)) (has-trap ?to) (arm-free))
    :effect (and (at-hero ?to) (is-destroyed ?from) (not (at-hero ?from)))
)","remove (is-destroyed ?from) from effects
"
rpggame,move-to-trap,0.7892916202545166,Hard Negative (Manipulated Action),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: The hero can **move** to an adjacent room (connected by a corridor) that has not been destroyed (i.e., the hero has not already visited the room). When this action is executed, the hero gets into a location with a trap

Action name: move-to-trap


Your answer:
","**Explanation:**

Imagine you're guiding a hero who just woke up in a mysterious dungeon. Each room can have different things: some are empty, others have monsters, some have traps, and a few might have swords. There's also a special room with an exit—our hero's goal.

Now, let's talk about the action called **move-to-trap**. This action involves our hero moving from one room (we'll call it ""Room A"") to another room (""Room B""), where, unfortunately, there's a trap waiting. Here's why each part of the plan (or action schema) makes sense:

1. **Connected Rooms**: Our hero can only move to a room directly connected to the one they're currently in. This is like being in your house and only being able to walk into rooms that have doors leading from where you are now.

2. **Hero's Current Location**: The hero must start in Room A to move to Room B. You can't move from a place if you're not actually there, right?

3. **Room B Not Destroyed**: The room our hero is moving to mustn't be already destroyed (or in ruins). It's like making sure the bridge you want to cross hasn't collapsed.

4. **Room A Doesn't Have a Trap**: It’s safer if the room our hero is leaving doesn't have a trap. Imagine trying to leave a room with a trap; it could activate and cause trouble!

5. **Room B Has a Trap**: Since the action is called **move-to-trap**, it specifically involves moving to a room with a trap, almost like knowing there's a puddle ahead but stepping into it anyway because it's the only path forward.

6. **Hero's Arm is Free**: This indicates that the hero isn’t holding anything like a sword. It’s important because handling traps might require free hands—think about needing your hands free to disarm or avoid a trap carefully.

When our hero completes this action, several things happen:
- **Hero is now in Room B**: Just like when you walk into another room, you’re no longer in the first room.
- **Room A is destroyed**: This could mean the hero leaves it in a way that no one can follow—maybe they close a heavy door that locks automatically.
- **Hero is no longer in Room A**: It confirms that the hero has completely left Room A.

This action is designed for specific situations in the dungeon where the hero might need to move strategically, even into risky areas, to navigate through the dungeon and eventually find the exit.
Parameters:
1. ?from - cells
2. ?to - cells

Preconditions:
```
(and
    (is-destroyed ?from)
    (connected ?from ?to)
    (at-hero ?from)
    (not (is-destroyed ?to))
    (not (has-trap ?from))
    (has-trap ?to)
)
```

Effects:
```
(and
    (at-hero ?from)
    (arm-free)
    (at-hero ?to)
)
```
","(:action move-to-trap
    :parameters (?from - cells ?to - cells)
    :precondition (and (connected ?from ?to) (at-hero ?from) (not (is-destroyed ?to)) (not (has-trap ?from)) (has-trap ?to) (arm-free))
    :effect (and (at-hero ?to) (is-destroyed ?from) (not (at-hero ?from)))
)","negate (not (at-hero ?from)) in effects
swap (arm-free) with (is-destroyed ?from)
"
rpggame,move,0.6636555194854736,Positive (Correct Match),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: The hero can **move** to an adjacent room (connected by a corridor) that has not been destroyed (i.e., the hero has not already visited the room). When this action is executed, the original cell get destroyed.

Action name: move


Your answer:
","Parameters:
1. ?from - cells
2. ?to - cells

Preconditions:
```
(and
    (connected ?from ?to)
    (at-hero ?from)
    (not (has-trap ?from))
    (not (is-destroyed ?to))
    (not (has-trap ?to))
    (not (has-monster ?to))
)
```

Effects:
```
(and
    (at-hero ?to)
    (is-destroyed ?from)
    (not (at-hero ?from))
)
```
","(:action move
    :parameters (?from - cells ?to - cells)
    :precondition (and (connected ?from ?to) (at-hero ?from) (not (has-trap ?from)) (not (is-destroyed ?to)) (not (has-trap ?to)) (not (has-monster ?to)))
    :effect (and (at-hero ?to) (is-destroyed ?from) (not (at-hero ?from)))
)",
rpggame,move,0.6636555194854736,Positive (Correct Match),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: The hero can **move** to an adjacent room (connected by a corridor) that has not been destroyed (i.e., the hero has not already visited the room). When this action is executed, the original cell get destroyed.

Action name: move


Your answer:

**Explanation:**

Imagine our hero in a big, scary dungeon, just like a character from a fairy tale or a video game. The dungeon has several rooms, and some rooms are safe while others have monsters or traps. The hero's goal is to escape from this dungeon, moving from one room to another until he finds the exit.

Now, let's talk about the action called ""move"" that our hero can take. The action ""move"" lets the hero go from one room (we'll call this the ""current room"") to a connected room (let's call this the ""next room""). Think of the dungeon like a big house with many doors connecting the rooms; the hero can only move through a door if it’s open and the room on the other side is safe.

In the PDDL (a kind of programming language for planning what actions to take), the action ""move"" needs some conditions to be met before the hero can move:
1. **The rooms must be connected:** Just like you can't walk through a wall at home, the hero can only move to a room if there's a direct connection (like a doorway or a corridor).
2. **The hero must be in the current room:** The hero can only leave a room if he's actually in it.
3. **The current room shouldn’t have a trap that could hurt him.**
4. **The next room shouldn’t be destroyed:** The hero can't go into a room if it’s already been collapsed or destroyed (maybe from a previous adventure!).
5. **The next room shouldn’t have a trap or a monster:** This makes sure our hero doesn’t walk into new danger.

When the hero moves:
- **He is now in the next room:** Just like if you walk to another room in your house, you're then in that new room.
- **The room he left gets destroyed:** This might sound strange, but imagine if every time he left a room, the door magically closed and locked forever, so he can’t go back the same way.
- **He is no longer in the current room:** This is just confirming that he has moved on from the previous room.

These rules help our hero make smart moves through the dungeon, avoiding danger and making progress towards escape. This way of setting up the hero's actions makes sure he can navigate through the dungeon safely and eventually find his way out.","Parameters:
1. ?from - cells
2. ?to - cells

Preconditions:
```
(and
    (connected ?from ?to)
    (at-hero ?from)
    (not (has-trap ?from))
    (not (is-destroyed ?to))
    (not (has-trap ?to))
    (not (has-monster ?to))
)
```

Effects:
```
(and
    (at-hero ?to)
    (is-destroyed ?from)
    (not (at-hero ?from))
)
```
","(:action move
    :parameters (?from - cells ?to - cells)
    :precondition (and (connected ?from ?to) (at-hero ?from) (not (has-trap ?from)) (not (is-destroyed ?to)) (not (has-trap ?to)) (not (has-monster ?to)))
    :effect (and (at-hero ?to) (is-destroyed ?from) (not (at-hero ?from)))
)",
rpggame,move,0.7861346006393433,Positive (Correct Match),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: The hero can **move** to an adjacent room (connected by a corridor) that has not been destroyed (i.e., the hero has not already visited the room). When this action is executed, the original cell get destroyed.

Action name: move


Your answer:
","**Explanation:**

Imagine our hero in a big, scary dungeon, just like a character from a fairy tale or a video game. The dungeon has several rooms, and some rooms are safe while others have monsters or traps. The hero's goal is to escape from this dungeon, moving from one room to another until he finds the exit.

Now, let's talk about the action called ""move"" that our hero can take. The action ""move"" lets the hero go from one room (we'll call this the ""current room"") to a connected room (let's call this the ""next room""). Think of the dungeon like a big house with many doors connecting the rooms; the hero can only move through a door if it’s open and the room on the other side is safe.

In the PDDL (a kind of programming language for planning what actions to take), the action ""move"" needs some conditions to be met before the hero can move:
1. **The rooms must be connected:** Just like you can't walk through a wall at home, the hero can only move to a room if there's a direct connection (like a doorway or a corridor).
2. **The hero must be in the current room:** The hero can only leave a room if he's actually in it.
3. **The current room shouldn’t have a trap that could hurt him.**
4. **The next room shouldn’t be destroyed:** The hero can't go into a room if it’s already been collapsed or destroyed (maybe from a previous adventure!).
5. **The next room shouldn’t have a trap or a monster:** This makes sure our hero doesn’t walk into new danger.

When the hero moves:
- **He is now in the next room:** Just like if you walk to another room in your house, you're then in that new room.
- **The room he left gets destroyed:** This might sound strange, but imagine if every time he left a room, the door magically closed and locked forever, so he can’t go back the same way.
- **He is no longer in the current room:** This is just confirming that he has moved on from the previous room.

These rules help our hero make smart moves through the dungeon, avoiding danger and making progress towards escape. This way of setting up the hero's actions makes sure he can navigate through the dungeon safely and eventually find his way out.
Parameters:
1. ?from - cells
2. ?to - cells

Preconditions:
```
(and
    (connected ?from ?to)
    (at-hero ?from)
    (not (has-trap ?from))
    (not (is-destroyed ?to))
    (not (has-trap ?to))
    (not (has-monster ?to))
)
```

Effects:
```
(and
    (at-hero ?to)
    (is-destroyed ?from)
    (not (at-hero ?from))
)
```
","(:action move
    :parameters (?from - cells ?to - cells)
    :precondition (and (connected ?from ?to) (at-hero ?from) (not (has-trap ?from)) (not (is-destroyed ?to)) (not (has-trap ?to)) (not (has-monster ?to)))
    :effect (and (at-hero ?to) (is-destroyed ?from) (not (at-hero ?from)))
)",
rpggame,move,0.055100973695516586,Easy Negative (Inter-Domain Mismatch),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: The hero can **move** to an adjacent room (connected by a corridor) that has not been destroyed (i.e., the hero has not already visited the room). When this action is executed, the original cell get destroyed.

Action name: move


Your answer:
","Parameters:
1. ?var0 - moveable
2. ?var1 - agent

Preconditions:
```
(equipped ?var0 ?var1)
```

Effects:
```
(and
    (inventory ?var0)
    (not (equipped ?var0 ?var1))
    (handsfree ?var1)
)
```
","(:action move
    :parameters (?from - cells ?to - cells)
    :precondition (and (connected ?from ?to) (at-hero ?from) (not (has-trap ?from)) (not (is-destroyed ?to)) (not (has-trap ?to)) (not (has-monster ?to)))
    :effect (and (at-hero ?to) (is-destroyed ?from) (not (at-hero ?from)))
)",
rpggame,move,0.25146690011024475,Easy Negative (Inter-Domain Mismatch),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: The hero can **move** to an adjacent room (connected by a corridor) that has not been destroyed (i.e., the hero has not already visited the room). When this action is executed, the original cell get destroyed.

Action name: move


Your answer:
","Parameters:
1. ?var0 - moveable
2. ?var1 - agent
3. ?var2 - moveable

Preconditions:
```
(and
    (hypothetical ?var0)
    (is_log ?var2)
    (equipped ?var2 ?var1)
)
```

Effects:
```
(and
    (inventory ?var0)
    (is_planks ?var0)
    (handsfree ?var1)
    (not (equipped ?var2 ?var1))
    (not (hypothetical ?var0))
    (not (is_log ?var2))
)
```
","(:action move
    :parameters (?from - cells ?to - cells)
    :precondition (and (connected ?from ?to) (at-hero ?from) (not (has-trap ?from)) (not (is-destroyed ?to)) (not (has-trap ?to)) (not (has-monster ?to)))
    :effect (and (at-hero ?to) (is-destroyed ?from) (not (at-hero ?from)))
)",
rpggame,move,0.08231978118419647,Easy Negative (Inter-Domain Mismatch),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: The hero can **move** to an adjacent room (connected by a corridor) that has not been destroyed (i.e., the hero has not already visited the room). When this action is executed, the original cell get destroyed.

Action name: move


Your answer:
","Parameters:
1. ?var0 - static
2. ?var1 - static

Preconditions:
```
(agent_at ?var1)
```

Effects:
```
(and
    (agent_at ?var0)
    (not (agent_at ?var1))
)
```
","(:action move
    :parameters (?from - cells ?to - cells)
    :precondition (and (connected ?from ?to) (at-hero ?from) (not (has-trap ?from)) (not (is-destroyed ?to)) (not (has-trap ?to)) (not (has-monster ?to)))
    :effect (and (at-hero ?to) (is-destroyed ?from) (not (at-hero ?from)))
)",
rpggame,move,0.16986292600631714,Easy Negative (Inter-Domain Mismatch),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: The hero can **move** to an adjacent room (connected by a corridor) that has not been destroyed (i.e., the hero has not already visited the room). When this action is executed, the original cell get destroyed.

Action name: move


Your answer:
","Parameters:
1. ?var0 - moveable
2. ?var1 - agent

Preconditions:
```
(and
    (inventory ?var0)
    (handsfree ?var1)
)
```

Effects:
```
(and
    (equipped ?var0 ?var1)
    (not (handsfree ?var1))
    (not (inventory ?var0))
)
```
","(:action move
    :parameters (?from - cells ?to - cells)
    :precondition (and (connected ?from ?to) (at-hero ?from) (not (has-trap ?from)) (not (is-destroyed ?to)) (not (has-trap ?to)) (not (has-monster ?to)))
    :effect (and (at-hero ?to) (is-destroyed ?from) (not (at-hero ?from)))
)",
rpggame,move,0.10609016567468643,Easy Negative (Inter-Domain Mismatch),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: The hero can **move** to an adjacent room (connected by a corridor) that has not been destroyed (i.e., the hero has not already visited the room). When this action is executed, the original cell get destroyed.

Action name: move


Your answer:
","Parameters:
1. ?var0 - moveable
2. ?var1 - static

Preconditions:
```
(and
    (at ?var0 ?var1)
    (agent_at ?var1)
)
```

Effects:
```
(and
    (inventory ?var0)
    (not (at ?var0 ?var1))
)
```
","(:action move
    :parameters (?from - cells ?to - cells)
    :precondition (and (connected ?from ?to) (at-hero ?from) (not (has-trap ?from)) (not (is-destroyed ?to)) (not (has-trap ?to)) (not (has-monster ?to)))
    :effect (and (at-hero ?to) (is-destroyed ?from) (not (at-hero ?from)))
)",
rpggame,move,0.055100973695516586,Easy Negative (Inter-Domain Mismatch),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: The hero can **move** to an adjacent room (connected by a corridor) that has not been destroyed (i.e., the hero has not already visited the room). When this action is executed, the original cell get destroyed.

Action name: move


Your answer:

**Explanation:**

Imagine our hero in a big, scary dungeon, just like a character from a fairy tale or a video game. The dungeon has several rooms, and some rooms are safe while others have monsters or traps. The hero's goal is to escape from this dungeon, moving from one room to another until he finds the exit.

Now, let's talk about the action called ""move"" that our hero can take. The action ""move"" lets the hero go from one room (we'll call this the ""current room"") to a connected room (let's call this the ""next room""). Think of the dungeon like a big house with many doors connecting the rooms; the hero can only move through a door if it’s open and the room on the other side is safe.

In the PDDL (a kind of programming language for planning what actions to take), the action ""move"" needs some conditions to be met before the hero can move:
1. **The rooms must be connected:** Just like you can't walk through a wall at home, the hero can only move to a room if there's a direct connection (like a doorway or a corridor).
2. **The hero must be in the current room:** The hero can only leave a room if he's actually in it.
3. **The current room shouldn’t have a trap that could hurt him.**
4. **The next room shouldn’t be destroyed:** The hero can't go into a room if it’s already been collapsed or destroyed (maybe from a previous adventure!).
5. **The next room shouldn’t have a trap or a monster:** This makes sure our hero doesn’t walk into new danger.

When the hero moves:
- **He is now in the next room:** Just like if you walk to another room in your house, you're then in that new room.
- **The room he left gets destroyed:** This might sound strange, but imagine if every time he left a room, the door magically closed and locked forever, so he can’t go back the same way.
- **He is no longer in the current room:** This is just confirming that he has moved on from the previous room.

These rules help our hero make smart moves through the dungeon, avoiding danger and making progress towards escape. This way of setting up the hero's actions makes sure he can navigate through the dungeon safely and eventually find his way out.","Parameters:
1. ?var0 - moveable
2. ?var1 - agent

Preconditions:
```
(equipped ?var0 ?var1)
```

Effects:
```
(and
    (inventory ?var0)
    (not (equipped ?var0 ?var1))
    (handsfree ?var1)
)
```
","(:action move
    :parameters (?from - cells ?to - cells)
    :precondition (and (connected ?from ?to) (at-hero ?from) (not (has-trap ?from)) (not (is-destroyed ?to)) (not (has-trap ?to)) (not (has-monster ?to)))
    :effect (and (at-hero ?to) (is-destroyed ?from) (not (at-hero ?from)))
)",
rpggame,move,0.25146690011024475,Easy Negative (Inter-Domain Mismatch),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: The hero can **move** to an adjacent room (connected by a corridor) that has not been destroyed (i.e., the hero has not already visited the room). When this action is executed, the original cell get destroyed.

Action name: move


Your answer:

**Explanation:**

Imagine our hero in a big, scary dungeon, just like a character from a fairy tale or a video game. The dungeon has several rooms, and some rooms are safe while others have monsters or traps. The hero's goal is to escape from this dungeon, moving from one room to another until he finds the exit.

Now, let's talk about the action called ""move"" that our hero can take. The action ""move"" lets the hero go from one room (we'll call this the ""current room"") to a connected room (let's call this the ""next room""). Think of the dungeon like a big house with many doors connecting the rooms; the hero can only move through a door if it’s open and the room on the other side is safe.

In the PDDL (a kind of programming language for planning what actions to take), the action ""move"" needs some conditions to be met before the hero can move:
1. **The rooms must be connected:** Just like you can't walk through a wall at home, the hero can only move to a room if there's a direct connection (like a doorway or a corridor).
2. **The hero must be in the current room:** The hero can only leave a room if he's actually in it.
3. **The current room shouldn’t have a trap that could hurt him.**
4. **The next room shouldn’t be destroyed:** The hero can't go into a room if it’s already been collapsed or destroyed (maybe from a previous adventure!).
5. **The next room shouldn’t have a trap or a monster:** This makes sure our hero doesn’t walk into new danger.

When the hero moves:
- **He is now in the next room:** Just like if you walk to another room in your house, you're then in that new room.
- **The room he left gets destroyed:** This might sound strange, but imagine if every time he left a room, the door magically closed and locked forever, so he can’t go back the same way.
- **He is no longer in the current room:** This is just confirming that he has moved on from the previous room.

These rules help our hero make smart moves through the dungeon, avoiding danger and making progress towards escape. This way of setting up the hero's actions makes sure he can navigate through the dungeon safely and eventually find his way out.","Parameters:
1. ?var0 - moveable
2. ?var1 - agent
3. ?var2 - moveable

Preconditions:
```
(and
    (hypothetical ?var0)
    (is_log ?var2)
    (equipped ?var2 ?var1)
)
```

Effects:
```
(and
    (inventory ?var0)
    (is_planks ?var0)
    (handsfree ?var1)
    (not (equipped ?var2 ?var1))
    (not (hypothetical ?var0))
    (not (is_log ?var2))
)
```
","(:action move
    :parameters (?from - cells ?to - cells)
    :precondition (and (connected ?from ?to) (at-hero ?from) (not (has-trap ?from)) (not (is-destroyed ?to)) (not (has-trap ?to)) (not (has-monster ?to)))
    :effect (and (at-hero ?to) (is-destroyed ?from) (not (at-hero ?from)))
)",
rpggame,move,0.08231978118419647,Easy Negative (Inter-Domain Mismatch),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: The hero can **move** to an adjacent room (connected by a corridor) that has not been destroyed (i.e., the hero has not already visited the room). When this action is executed, the original cell get destroyed.

Action name: move


Your answer:

**Explanation:**

Imagine our hero in a big, scary dungeon, just like a character from a fairy tale or a video game. The dungeon has several rooms, and some rooms are safe while others have monsters or traps. The hero's goal is to escape from this dungeon, moving from one room to another until he finds the exit.

Now, let's talk about the action called ""move"" that our hero can take. The action ""move"" lets the hero go from one room (we'll call this the ""current room"") to a connected room (let's call this the ""next room""). Think of the dungeon like a big house with many doors connecting the rooms; the hero can only move through a door if it’s open and the room on the other side is safe.

In the PDDL (a kind of programming language for planning what actions to take), the action ""move"" needs some conditions to be met before the hero can move:
1. **The rooms must be connected:** Just like you can't walk through a wall at home, the hero can only move to a room if there's a direct connection (like a doorway or a corridor).
2. **The hero must be in the current room:** The hero can only leave a room if he's actually in it.
3. **The current room shouldn’t have a trap that could hurt him.**
4. **The next room shouldn’t be destroyed:** The hero can't go into a room if it’s already been collapsed or destroyed (maybe from a previous adventure!).
5. **The next room shouldn’t have a trap or a monster:** This makes sure our hero doesn’t walk into new danger.

When the hero moves:
- **He is now in the next room:** Just like if you walk to another room in your house, you're then in that new room.
- **The room he left gets destroyed:** This might sound strange, but imagine if every time he left a room, the door magically closed and locked forever, so he can’t go back the same way.
- **He is no longer in the current room:** This is just confirming that he has moved on from the previous room.

These rules help our hero make smart moves through the dungeon, avoiding danger and making progress towards escape. This way of setting up the hero's actions makes sure he can navigate through the dungeon safely and eventually find his way out.","Parameters:
1. ?var0 - static
2. ?var1 - static

Preconditions:
```
(agent_at ?var1)
```

Effects:
```
(and
    (agent_at ?var0)
    (not (agent_at ?var1))
)
```
","(:action move
    :parameters (?from - cells ?to - cells)
    :precondition (and (connected ?from ?to) (at-hero ?from) (not (has-trap ?from)) (not (is-destroyed ?to)) (not (has-trap ?to)) (not (has-monster ?to)))
    :effect (and (at-hero ?to) (is-destroyed ?from) (not (at-hero ?from)))
)",
rpggame,move,0.16986292600631714,Easy Negative (Inter-Domain Mismatch),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: The hero can **move** to an adjacent room (connected by a corridor) that has not been destroyed (i.e., the hero has not already visited the room). When this action is executed, the original cell get destroyed.

Action name: move


Your answer:

**Explanation:**

Imagine our hero in a big, scary dungeon, just like a character from a fairy tale or a video game. The dungeon has several rooms, and some rooms are safe while others have monsters or traps. The hero's goal is to escape from this dungeon, moving from one room to another until he finds the exit.

Now, let's talk about the action called ""move"" that our hero can take. The action ""move"" lets the hero go from one room (we'll call this the ""current room"") to a connected room (let's call this the ""next room""). Think of the dungeon like a big house with many doors connecting the rooms; the hero can only move through a door if it’s open and the room on the other side is safe.

In the PDDL (a kind of programming language for planning what actions to take), the action ""move"" needs some conditions to be met before the hero can move:
1. **The rooms must be connected:** Just like you can't walk through a wall at home, the hero can only move to a room if there's a direct connection (like a doorway or a corridor).
2. **The hero must be in the current room:** The hero can only leave a room if he's actually in it.
3. **The current room shouldn’t have a trap that could hurt him.**
4. **The next room shouldn’t be destroyed:** The hero can't go into a room if it’s already been collapsed or destroyed (maybe from a previous adventure!).
5. **The next room shouldn’t have a trap or a monster:** This makes sure our hero doesn’t walk into new danger.

When the hero moves:
- **He is now in the next room:** Just like if you walk to another room in your house, you're then in that new room.
- **The room he left gets destroyed:** This might sound strange, but imagine if every time he left a room, the door magically closed and locked forever, so he can’t go back the same way.
- **He is no longer in the current room:** This is just confirming that he has moved on from the previous room.

These rules help our hero make smart moves through the dungeon, avoiding danger and making progress towards escape. This way of setting up the hero's actions makes sure he can navigate through the dungeon safely and eventually find his way out.","Parameters:
1. ?var0 - moveable
2. ?var1 - agent

Preconditions:
```
(and
    (inventory ?var0)
    (handsfree ?var1)
)
```

Effects:
```
(and
    (equipped ?var0 ?var1)
    (not (handsfree ?var1))
    (not (inventory ?var0))
)
```
","(:action move
    :parameters (?from - cells ?to - cells)
    :precondition (and (connected ?from ?to) (at-hero ?from) (not (has-trap ?from)) (not (is-destroyed ?to)) (not (has-trap ?to)) (not (has-monster ?to)))
    :effect (and (at-hero ?to) (is-destroyed ?from) (not (at-hero ?from)))
)",
rpggame,move,0.10609016567468643,Easy Negative (Inter-Domain Mismatch),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: The hero can **move** to an adjacent room (connected by a corridor) that has not been destroyed (i.e., the hero has not already visited the room). When this action is executed, the original cell get destroyed.

Action name: move


Your answer:

**Explanation:**

Imagine our hero in a big, scary dungeon, just like a character from a fairy tale or a video game. The dungeon has several rooms, and some rooms are safe while others have monsters or traps. The hero's goal is to escape from this dungeon, moving from one room to another until he finds the exit.

Now, let's talk about the action called ""move"" that our hero can take. The action ""move"" lets the hero go from one room (we'll call this the ""current room"") to a connected room (let's call this the ""next room""). Think of the dungeon like a big house with many doors connecting the rooms; the hero can only move through a door if it’s open and the room on the other side is safe.

In the PDDL (a kind of programming language for planning what actions to take), the action ""move"" needs some conditions to be met before the hero can move:
1. **The rooms must be connected:** Just like you can't walk through a wall at home, the hero can only move to a room if there's a direct connection (like a doorway or a corridor).
2. **The hero must be in the current room:** The hero can only leave a room if he's actually in it.
3. **The current room shouldn’t have a trap that could hurt him.**
4. **The next room shouldn’t be destroyed:** The hero can't go into a room if it’s already been collapsed or destroyed (maybe from a previous adventure!).
5. **The next room shouldn’t have a trap or a monster:** This makes sure our hero doesn’t walk into new danger.

When the hero moves:
- **He is now in the next room:** Just like if you walk to another room in your house, you're then in that new room.
- **The room he left gets destroyed:** This might sound strange, but imagine if every time he left a room, the door magically closed and locked forever, so he can’t go back the same way.
- **He is no longer in the current room:** This is just confirming that he has moved on from the previous room.

These rules help our hero make smart moves through the dungeon, avoiding danger and making progress towards escape. This way of setting up the hero's actions makes sure he can navigate through the dungeon safely and eventually find his way out.","Parameters:
1. ?var0 - moveable
2. ?var1 - static

Preconditions:
```
(and
    (at ?var0 ?var1)
    (agent_at ?var1)
)
```

Effects:
```
(and
    (inventory ?var0)
    (not (at ?var0 ?var1))
)
```
","(:action move
    :parameters (?from - cells ?to - cells)
    :precondition (and (connected ?from ?to) (at-hero ?from) (not (has-trap ?from)) (not (is-destroyed ?to)) (not (has-trap ?to)) (not (has-monster ?to)))
    :effect (and (at-hero ?to) (is-destroyed ?from) (not (at-hero ?from)))
)",
rpggame,move,0.11406250298023224,Easy Negative (Inter-Domain Mismatch),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: The hero can **move** to an adjacent room (connected by a corridor) that has not been destroyed (i.e., the hero has not already visited the room). When this action is executed, the original cell get destroyed.

Action name: move


Your answer:
","**Explanation:** 

Imagine you are a librarian in a library, and you need to take a book off the shelf. This book is placed on top of another book. The action ""remove-from-shelf"" lets you take the top book off the shelf. To do this, certain conditions, called ""preconditions,"" must be met to make sure you can successfully take the book.

For the action ""remove-from-shelf,"" let's break down what needs to be true before you can take the book off the shelf:

1. **The book must be on the shelf:** This means the book you want to take is on top of another book on the shelf.
2. **The book must be accessible:** This means the book isn't covered by other books or objects, so you can easily reach it.
3. **Your hands must be free:** You need to have empty hands to pick up the book, meaning you aren't already holding something else.
4. **The book must belong to a certain category:** This helps you know which book you are taking and ensures you are organizing the books properly.

Once these preconditions are met, you can proceed with the ""remove-from-shelf"" action. This action results in several changes, called ""effects,"" that update the status of the books and your hands:

1. **You are now holding the book:** This indicates you have picked up the book from the shelf.
2. **The book underneath becomes accessible:** Since you have removed the top book, the book underneath is now easy to reach.
3. **The book you removed is no longer accessible:** Because you are holding the book, it's not available on the shelf anymore.
4. **Your hands are no longer free:** Since you are now holding the book, your hands are occupied.
5. **The book is no longer on the shelf:** This shows that the book has been taken off the shelf.
6. **The shelf is now empty for that category:** This helps keep track of the shelf space and organization.

To summarize, the preconditions ensure the book is on the shelf, accessible, your hands are free, and you know which category the book belongs to. The effects update the situation to show you are holding the book, the book underneath is now accessible, and the shelf is empty for that category.
Parameters:
1. ?x - book
2. ?y - book
3. ?cat - category

Preconditions:
```
(and
    (on-shelf ?x ?y)
    (accessible ?x)
    (hands-free)
    (belongs-to-category ?x ?cat)
)
```

Effects:
```
(and
    (holding ?x)
    (accessible ?y)
    (not (accessible ?x))
    (not (hands-free))
    (not (on-shelf ?x ?y))
    (shelf-empty ?cat)
)
```
","(:action move
    :parameters (?from - cells ?to - cells)
    :precondition (and (connected ?from ?to) (at-hero ?from) (not (has-trap ?from)) (not (is-destroyed ?to)) (not (has-trap ?to)) (not (has-monster ?to)))
    :effect (and (at-hero ?to) (is-destroyed ?from) (not (at-hero ?from)))
)",
rpggame,move,0.10156753659248352,Easy Negative (Inter-Domain Mismatch),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: The hero can **move** to an adjacent room (connected by a corridor) that has not been destroyed (i.e., the hero has not already visited the room). When this action is executed, the original cell get destroyed.

Action name: move


Your answer:
","**Explanation:** 

Imagine you are a librarian holding a book in your hands, and you want to place it on a nearby table. The action ""place-on-table"" lets you do this. To make sure everything goes smoothly, there is a condition, called a ""precondition,"" that must be met before you can place the book on the table.

For the action ""place-on-table,"" let's break down what needs to be true before you can place the book on the table:

1. **You must be holding the book:** This means you have the book in your hands, ready to place it on the table.

Once this precondition is met, you can proceed with the ""place-on-table"" action. This action results in several changes, called ""effects,"" that update the status of the book and your hands:

1. **You are no longer holding the book:** This shows that you have placed the book on the table.
2. **The book becomes accessible:** Now that the book is on the table, it is easy to reach and pick up again if needed.
3. **Your hands are now free:** Since you have placed the book on the table, your hands are empty again.
4. **The book is on the table:** This indicates the new location of the book.

To summarize, the precondition ensures you are holding the book, making sure you are ready to place it on the table. The effects update the situation to show that you have placed the book on the table, it is now accessible, and your hands are free again.
Parameters:
1. ?x - book

Preconditions:
```
(holding ?x)
```

Effects:
```
(and
    (not (holding ?x))
    (accessible ?x)
    (hands-free)
    (on-table ?x)
)
```
","(:action move
    :parameters (?from - cells ?to - cells)
    :precondition (and (connected ?from ?to) (at-hero ?from) (not (has-trap ?from)) (not (is-destroyed ?to)) (not (has-trap ?to)) (not (has-monster ?to)))
    :effect (and (at-hero ?to) (is-destroyed ?from) (not (at-hero ?from)))
)",
rpggame,move,0.19100171327590942,Easy Negative (Inter-Domain Mismatch),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: The hero can **move** to an adjacent room (connected by a corridor) that has not been destroyed (i.e., the hero has not already visited the room). When this action is executed, the original cell get destroyed.

Action name: move


Your answer:
","**Explanation:** 

Imagine a librarian in a library who helps patrons borrow books. When a patron wants to borrow a book, the librarian needs to make sure certain conditions are met before they can check the book out. These conditions are called ""preconditions.""

For the action ""check-out,"" let's think about what needs to be true before the librarian can let the patron borrow the book:

1. **The book must be accessible:** This means the book is not covered by other books or objects, making it easy for the librarian to pick up. If the book isn't accessible, the librarian can't reach it to check it out.
2. **The book must not be already checked out:** If the book is already checked out to someone else, it can't be borrowed by another patron until it's returned.

Once these preconditions are met, the librarian can proceed with the check-out action. The action results in several changes, called ""effects,"" that update the status of the book:

1. **The book is marked as checked out:** This indicates that the book is now borrowed and can't be checked out by another patron until it's returned.
2. **The book is no longer accessible:** Since the book is borrowed, it's no longer available on the shelf for others to take.
3. **There is a request for the book:** This keeps track of the borrowing transaction.
4. **A return due date is set:** This helps the library know when to expect the book back.

To summarize, the preconditions ensure the librarian can access the book and that it isn't already borrowed. The effects update the system to show the book is now checked out, not accessible, and has a return due date.
Parameters:
1. ?x - book

Preconditions:
```
(and
    (accessible ?x)
    (not (checked-out ?x))
)
```

Effects:
```
(and
    (checked-out ?x)
    (not (accessible ?x))
    (book-request ?x)
    (return-due ?x)
)
```
","(:action move
    :parameters (?from - cells ?to - cells)
    :precondition (and (connected ?from ?to) (at-hero ?from) (not (has-trap ?from)) (not (is-destroyed ?to)) (not (has-trap ?to)) (not (has-monster ?to)))
    :effect (and (at-hero ?to) (is-destroyed ?from) (not (at-hero ?from)))
)",
rpggame,move,0.1797766089439392,Easy Negative (Inter-Domain Mismatch),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: The hero can **move** to an adjacent room (connected by a corridor) that has not been destroyed (i.e., the hero has not already visited the room). When this action is executed, the original cell get destroyed.

Action name: move


Your answer:
","**Explanation:** 

Imagine a patron is returning a borrowed book to the library. The librarian needs to process this return to update the book's status and remove any return due date. The action ""return-book"" describes how the librarian can do this. There are specific conditions, called ""preconditions,"" that must be met to ensure the return can be processed correctly.

For the action ""return-book,"" let's break down what needs to be true before the librarian can return the book:

1. **The book must be checked out:** This means the book is currently borrowed by someone and needs to be returned.
2. **The librarian must be holding the book:** This indicates the librarian has the book in their hands, ready to process the return.

Once these preconditions are met, the librarian can proceed with the ""return-book"" action. This action results in several changes, called ""effects,"" that update the status of the book and the librarian's hands:

1. **The book is no longer checked out:** This shows that the book has been returned and is available for borrowing again.
2. **The librarian is no longer holding the book:** This indicates the librarian has processed the return and placed the book back in its proper place.
3. **Any request for the book is removed:** If there was a request for this book, it is no longer needed since the book is now available.
4. **The return due date is removed:** This updates the system to show that the book is no longer due for return.
5. **The book becomes accessible:** Now that the book is back in the library, it is easy to find and borrow again.
6. **The librarian's hands are now free:** Since the librarian has finished processing the return, their hands are empty and ready for the next task.

To summarize, the preconditions ensure the book is currently borrowed and the librarian has it in their hands, ready to return. The effects update the situation to show that the book is no longer checked out, any requests and due dates are removed, the book is accessible again, and the librarian's hands are free.
Parameters:
1. ?x - book

Preconditions:
```
(and
    (checked-out ?x)
    (holding ?x)
)
```

Effects:
```
(and
    (not (checked-out ?x))
    (not (holding ?x))
    (not (book-request ?x))
    (not (return-due ?x))
    (accessible ?x)
    (hands-free)
)
```
","(:action move
    :parameters (?from - cells ?to - cells)
    :precondition (and (connected ?from ?to) (at-hero ?from) (not (has-trap ?from)) (not (is-destroyed ?to)) (not (has-trap ?to)) (not (has-monster ?to)))
    :effect (and (at-hero ?to) (is-destroyed ?from) (not (at-hero ?from)))
)",
rpggame,move,0.07760506123304367,Easy Negative (Inter-Domain Mismatch),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: The hero can **move** to an adjacent room (connected by a corridor) that has not been destroyed (i.e., the hero has not already visited the room). When this action is executed, the original cell get destroyed.

Action name: move


Your answer:
","**Explanation:** 

Imagine you're a librarian in a library, and there's a table full of books that need to be sorted. You want to pick up one of these books. To do this, certain conditions, called ""preconditions,"" must be met to ensure you can successfully pick up the book.

For the action ""take-from-table,"" let's break down what needs to be true before you can pick up a book:

1. **The book must be accessible:** This means the book isn't covered by other books or objects, so you can easily reach it.
2. **The book must be on the table:** This indicates the book is physically located on the table, not somewhere else like a shelf.
3. **Your hands must be free:** You need to have empty hands to pick up the book, meaning you aren't already holding something else.

Once these preconditions are met, you can proceed with the ""take-from-table"" action. This action results in several changes, called ""effects,"" that update the status of the book and your hands:

1. **The book is no longer on the table:** This indicates you've picked up the book from the table.
2. **The book is no longer accessible:** Since you're holding the book, it's not available for someone else to pick up from the table.
3. **Your hands are no longer free:** Because you're now holding the book, your hands are occupied.
4. **You are holding the book:** This shows that the book is now in your hands.

To summarize, the preconditions ensure you can reach the book, it's on the table, and your hands are free to pick it up. The effects update the situation to reflect that the book is now in your hands and no longer on the table or accessible to others.
Parameters:
1. ?x - book

Preconditions:
```
(and
    (accessible ?x)
    (on-table ?x)
    (hands-free)
)
```

Effects:
```
(and
    (not (on-table ?x))
    (not (accessible ?x))
    (not (hands-free))
    (holding ?x)
)
```
","(:action move
    :parameters (?from - cells ?to - cells)
    :precondition (and (connected ?from ?to) (at-hero ?from) (not (has-trap ?from)) (not (is-destroyed ?to)) (not (has-trap ?to)) (not (has-monster ?to)))
    :effect (and (at-hero ?to) (is-destroyed ?from) (not (at-hero ?from)))
)",
rpggame,move,0.07736551761627197,Easy Negative (Inter-Domain Mismatch),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: The hero can **move** to an adjacent room (connected by a corridor) that has not been destroyed (i.e., the hero has not already visited the room). When this action is executed, the original cell get destroyed.

Action name: move


Your answer:
","**Explanation:** 

Imagine you are a librarian standing near a shelf, holding a book in your hands. You want to place this book on top of another book that is already on the shelf. This action, called ""place-on-shelf,"" needs to follow certain rules, called ""preconditions,"" to make sure everything goes smoothly.

For the action ""place-on-shelf,"" let's break down what needs to be true before you can place the book on the shelf:

1. **You must be holding the book:** This means you have the book in your hands, ready to place it on the shelf.
2. **The book on the shelf must be accessible:** The book already on the shelf should not be covered by other books or objects, so you can easily place your book on top of it.
3. **The book you are holding must belong to a certain category:** This helps in organizing the books properly according to their categories.
4. **The shelf should not be overflowing:** There should be enough space on the shelf to place another book.

Once these preconditions are met, you can proceed with the ""place-on-shelf"" action. This action results in several changes, called ""effects,"" that update the status of the books and your hands:

1. **You are no longer holding the book:** This shows that you have placed the book on the shelf.
2. **The book on the shelf is no longer accessible:** Because the new book is now on top of it, making it covered.
3. **The book you placed is now accessible:** This indicates the book you just placed is easy to reach.
4. **Your hands are now free:** Since you have placed the book on the shelf, your hands are empty again.
5. **The new book is on the shelf on top of the other book:** This shows the new book's position.
6. **The shelf is now considered empty for that category:** This helps in tracking the organization and availability of shelf space for that category.

To summarize, the preconditions ensure you are holding the book, the shelf has space, and the book on the shelf is accessible. The effects update the situation to show that you have placed the book on the shelf, the new book is accessible, and your hands are free again.
Parameters:
1. ?x - book
2. ?y - book
3. ?cat - category

Preconditions:
```
(and
    (holding ?x)
    (accessible ?y)
    (belongs-to-category ?x ?cat)
    (not (shelf-overflow ?cat))
)
```

Effects:
```
(and
    (not (holding ?x))
    (not (accessible ?y))
    (accessible ?x)
    (hands-free)
    (on-shelf ?x ?y)
    (shelf-empty ?cat)
)
```
","(:action move
    :parameters (?from - cells ?to - cells)
    :precondition (and (connected ?from ?to) (at-hero ?from) (not (has-trap ?from)) (not (is-destroyed ?to)) (not (has-trap ?to)) (not (has-monster ?to)))
    :effect (and (at-hero ?to) (is-destroyed ?from) (not (at-hero ?from)))
)",
rpggame,move,0.5180956125259399,Semi-Hard Negative (Intra-Domain Mismatch),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: The hero can **move** to an adjacent room (connected by a corridor) that has not been destroyed (i.e., the hero has not already visited the room). When this action is executed, the original cell get destroyed.

Action name: move


Your answer:
","Parameters:
1. ?from - cells
2. ?to - cells

Preconditions:
```
(and
    (connected ?from ?to)
    (at-hero ?from)
    (not (is-destroyed ?to))
    (not (has-trap ?from))
    (has-trap ?to)
    (arm-free)
)
```

Effects:
```
(and
    (at-hero ?to)
    (is-destroyed ?from)
    (not (at-hero ?from))
)
```
","(:action move
    :parameters (?from - cells ?to - cells)
    :precondition (and (connected ?from ?to) (at-hero ?from) (not (has-trap ?from)) (not (is-destroyed ?to)) (not (has-trap ?to)) (not (has-monster ?to)))
    :effect (and (at-hero ?to) (is-destroyed ?from) (not (at-hero ?from)))
)",
rpggame,move,0.3123786151409149,Semi-Hard Negative (Intra-Domain Mismatch),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: The hero can **move** to an adjacent room (connected by a corridor) that has not been destroyed (i.e., the hero has not already visited the room). When this action is executed, the original cell get destroyed.

Action name: move


Your answer:
","Parameters:
1. ?loc - cells
2. ?s - swords

Preconditions:
```
(and
    (at-hero ?loc)
    (at-sword ?s ?loc)
    (arm-free)
)
```

Effects:
```
(and
    (holding ?s)
    (not (at-sword ?s ?loc))
    (not (arm-free))
)
```
","(:action move
    :parameters (?from - cells ?to - cells)
    :precondition (and (connected ?from ?to) (at-hero ?from) (not (has-trap ?from)) (not (is-destroyed ?to)) (not (has-trap ?to)) (not (has-monster ?to)))
    :effect (and (at-hero ?to) (is-destroyed ?from) (not (at-hero ?from)))
)",
rpggame,move,0.7996939420700073,Semi-Hard Negative (Intra-Domain Mismatch),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: The hero can **move** to an adjacent room (connected by a corridor) that has not been destroyed (i.e., the hero has not already visited the room). When this action is executed, the original cell get destroyed.

Action name: move


Your answer:
","Parameters:
1. ?loc - cells

Preconditions:
```
(and
    (at-hero ?loc)
    (arm-free)
    (has-trap ?loc)
)
```

Effects:
```
(and
    (trap-disarmed ?loc)
    (not (has-trap ?loc))
)
```
","(:action move
    :parameters (?from - cells ?to - cells)
    :precondition (and (connected ?from ?to) (at-hero ?from) (not (has-trap ?from)) (not (is-destroyed ?to)) (not (has-trap ?to)) (not (has-monster ?to)))
    :effect (and (at-hero ?to) (is-destroyed ?from) (not (at-hero ?from)))
)",
rpggame,move,0.8527721166610718,Semi-Hard Negative (Intra-Domain Mismatch),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: The hero can **move** to an adjacent room (connected by a corridor) that has not been destroyed (i.e., the hero has not already visited the room). When this action is executed, the original cell get destroyed.

Action name: move


Your answer:
","Parameters:
1. ?from - cells
2. ?to - cells
3. ?s - swords

Preconditions:
```
(and
    (connected ?from ?to)
    (at-hero ?from)
    (has-monster ?to)
    (not (is-destroyed ?to))
    (not (has-trap ?from))
    (holding ?s)
)
```

Effects:
```
(and
    (at-hero ?to)
    (is-destroyed ?from)
    (not (at-hero ?from))
)
```
","(:action move
    :parameters (?from - cells ?to - cells)
    :precondition (and (connected ?from ?to) (at-hero ?from) (not (has-trap ?from)) (not (is-destroyed ?to)) (not (has-trap ?to)) (not (has-monster ?to)))
    :effect (and (at-hero ?to) (is-destroyed ?from) (not (at-hero ?from)))
)",
rpggame,move,0.6134718060493469,Semi-Hard Negative (Intra-Domain Mismatch),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: The hero can **move** to an adjacent room (connected by a corridor) that has not been destroyed (i.e., the hero has not already visited the room). When this action is executed, the original cell get destroyed.

Action name: move


Your answer:
","Parameters:
1. ?loc - cells
2. ?s - swords

Preconditions:
```
(and
    (at-hero ?loc)
    (holding ?s)
    (not (has-trap ?loc))
    (not (has-monster ?loc))
)
```

Effects:
```
(and
    (arm-free)
    (is-destroyed ?s)
    (not (holding ?s))
)
```
","(:action move
    :parameters (?from - cells ?to - cells)
    :precondition (and (connected ?from ?to) (at-hero ?from) (not (has-trap ?from)) (not (is-destroyed ?to)) (not (has-trap ?to)) (not (has-monster ?to)))
    :effect (and (at-hero ?to) (is-destroyed ?from) (not (at-hero ?from)))
)",
rpggame,move,0.5180956125259399,Semi-Hard Negative (Intra-Domain Mismatch),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: The hero can **move** to an adjacent room (connected by a corridor) that has not been destroyed (i.e., the hero has not already visited the room). When this action is executed, the original cell get destroyed.

Action name: move


Your answer:

**Explanation:**

Imagine our hero in a big, scary dungeon, just like a character from a fairy tale or a video game. The dungeon has several rooms, and some rooms are safe while others have monsters or traps. The hero's goal is to escape from this dungeon, moving from one room to another until he finds the exit.

Now, let's talk about the action called ""move"" that our hero can take. The action ""move"" lets the hero go from one room (we'll call this the ""current room"") to a connected room (let's call this the ""next room""). Think of the dungeon like a big house with many doors connecting the rooms; the hero can only move through a door if it’s open and the room on the other side is safe.

In the PDDL (a kind of programming language for planning what actions to take), the action ""move"" needs some conditions to be met before the hero can move:
1. **The rooms must be connected:** Just like you can't walk through a wall at home, the hero can only move to a room if there's a direct connection (like a doorway or a corridor).
2. **The hero must be in the current room:** The hero can only leave a room if he's actually in it.
3. **The current room shouldn’t have a trap that could hurt him.**
4. **The next room shouldn’t be destroyed:** The hero can't go into a room if it’s already been collapsed or destroyed (maybe from a previous adventure!).
5. **The next room shouldn’t have a trap or a monster:** This makes sure our hero doesn’t walk into new danger.

When the hero moves:
- **He is now in the next room:** Just like if you walk to another room in your house, you're then in that new room.
- **The room he left gets destroyed:** This might sound strange, but imagine if every time he left a room, the door magically closed and locked forever, so he can’t go back the same way.
- **He is no longer in the current room:** This is just confirming that he has moved on from the previous room.

These rules help our hero make smart moves through the dungeon, avoiding danger and making progress towards escape. This way of setting up the hero's actions makes sure he can navigate through the dungeon safely and eventually find his way out.","Parameters:
1. ?from - cells
2. ?to - cells

Preconditions:
```
(and
    (connected ?from ?to)
    (at-hero ?from)
    (not (is-destroyed ?to))
    (not (has-trap ?from))
    (has-trap ?to)
    (arm-free)
)
```

Effects:
```
(and
    (at-hero ?to)
    (is-destroyed ?from)
    (not (at-hero ?from))
)
```
","(:action move
    :parameters (?from - cells ?to - cells)
    :precondition (and (connected ?from ?to) (at-hero ?from) (not (has-trap ?from)) (not (is-destroyed ?to)) (not (has-trap ?to)) (not (has-monster ?to)))
    :effect (and (at-hero ?to) (is-destroyed ?from) (not (at-hero ?from)))
)",
rpggame,move,0.3123786151409149,Semi-Hard Negative (Intra-Domain Mismatch),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: The hero can **move** to an adjacent room (connected by a corridor) that has not been destroyed (i.e., the hero has not already visited the room). When this action is executed, the original cell get destroyed.

Action name: move


Your answer:

**Explanation:**

Imagine our hero in a big, scary dungeon, just like a character from a fairy tale or a video game. The dungeon has several rooms, and some rooms are safe while others have monsters or traps. The hero's goal is to escape from this dungeon, moving from one room to another until he finds the exit.

Now, let's talk about the action called ""move"" that our hero can take. The action ""move"" lets the hero go from one room (we'll call this the ""current room"") to a connected room (let's call this the ""next room""). Think of the dungeon like a big house with many doors connecting the rooms; the hero can only move through a door if it’s open and the room on the other side is safe.

In the PDDL (a kind of programming language for planning what actions to take), the action ""move"" needs some conditions to be met before the hero can move:
1. **The rooms must be connected:** Just like you can't walk through a wall at home, the hero can only move to a room if there's a direct connection (like a doorway or a corridor).
2. **The hero must be in the current room:** The hero can only leave a room if he's actually in it.
3. **The current room shouldn’t have a trap that could hurt him.**
4. **The next room shouldn’t be destroyed:** The hero can't go into a room if it’s already been collapsed or destroyed (maybe from a previous adventure!).
5. **The next room shouldn’t have a trap or a monster:** This makes sure our hero doesn’t walk into new danger.

When the hero moves:
- **He is now in the next room:** Just like if you walk to another room in your house, you're then in that new room.
- **The room he left gets destroyed:** This might sound strange, but imagine if every time he left a room, the door magically closed and locked forever, so he can’t go back the same way.
- **He is no longer in the current room:** This is just confirming that he has moved on from the previous room.

These rules help our hero make smart moves through the dungeon, avoiding danger and making progress towards escape. This way of setting up the hero's actions makes sure he can navigate through the dungeon safely and eventually find his way out.","Parameters:
1. ?loc - cells
2. ?s - swords

Preconditions:
```
(and
    (at-hero ?loc)
    (at-sword ?s ?loc)
    (arm-free)
)
```

Effects:
```
(and
    (holding ?s)
    (not (at-sword ?s ?loc))
    (not (arm-free))
)
```
","(:action move
    :parameters (?from - cells ?to - cells)
    :precondition (and (connected ?from ?to) (at-hero ?from) (not (has-trap ?from)) (not (is-destroyed ?to)) (not (has-trap ?to)) (not (has-monster ?to)))
    :effect (and (at-hero ?to) (is-destroyed ?from) (not (at-hero ?from)))
)",
rpggame,move,0.7996939420700073,Semi-Hard Negative (Intra-Domain Mismatch),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: The hero can **move** to an adjacent room (connected by a corridor) that has not been destroyed (i.e., the hero has not already visited the room). When this action is executed, the original cell get destroyed.

Action name: move


Your answer:

**Explanation:**

Imagine our hero in a big, scary dungeon, just like a character from a fairy tale or a video game. The dungeon has several rooms, and some rooms are safe while others have monsters or traps. The hero's goal is to escape from this dungeon, moving from one room to another until he finds the exit.

Now, let's talk about the action called ""move"" that our hero can take. The action ""move"" lets the hero go from one room (we'll call this the ""current room"") to a connected room (let's call this the ""next room""). Think of the dungeon like a big house with many doors connecting the rooms; the hero can only move through a door if it’s open and the room on the other side is safe.

In the PDDL (a kind of programming language for planning what actions to take), the action ""move"" needs some conditions to be met before the hero can move:
1. **The rooms must be connected:** Just like you can't walk through a wall at home, the hero can only move to a room if there's a direct connection (like a doorway or a corridor).
2. **The hero must be in the current room:** The hero can only leave a room if he's actually in it.
3. **The current room shouldn’t have a trap that could hurt him.**
4. **The next room shouldn’t be destroyed:** The hero can't go into a room if it’s already been collapsed or destroyed (maybe from a previous adventure!).
5. **The next room shouldn’t have a trap or a monster:** This makes sure our hero doesn’t walk into new danger.

When the hero moves:
- **He is now in the next room:** Just like if you walk to another room in your house, you're then in that new room.
- **The room he left gets destroyed:** This might sound strange, but imagine if every time he left a room, the door magically closed and locked forever, so he can’t go back the same way.
- **He is no longer in the current room:** This is just confirming that he has moved on from the previous room.

These rules help our hero make smart moves through the dungeon, avoiding danger and making progress towards escape. This way of setting up the hero's actions makes sure he can navigate through the dungeon safely and eventually find his way out.","Parameters:
1. ?loc - cells

Preconditions:
```
(and
    (at-hero ?loc)
    (arm-free)
    (has-trap ?loc)
)
```

Effects:
```
(and
    (trap-disarmed ?loc)
    (not (has-trap ?loc))
)
```
","(:action move
    :parameters (?from - cells ?to - cells)
    :precondition (and (connected ?from ?to) (at-hero ?from) (not (has-trap ?from)) (not (is-destroyed ?to)) (not (has-trap ?to)) (not (has-monster ?to)))
    :effect (and (at-hero ?to) (is-destroyed ?from) (not (at-hero ?from)))
)",
rpggame,move,0.8527721166610718,Semi-Hard Negative (Intra-Domain Mismatch),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: The hero can **move** to an adjacent room (connected by a corridor) that has not been destroyed (i.e., the hero has not already visited the room). When this action is executed, the original cell get destroyed.

Action name: move


Your answer:

**Explanation:**

Imagine our hero in a big, scary dungeon, just like a character from a fairy tale or a video game. The dungeon has several rooms, and some rooms are safe while others have monsters or traps. The hero's goal is to escape from this dungeon, moving from one room to another until he finds the exit.

Now, let's talk about the action called ""move"" that our hero can take. The action ""move"" lets the hero go from one room (we'll call this the ""current room"") to a connected room (let's call this the ""next room""). Think of the dungeon like a big house with many doors connecting the rooms; the hero can only move through a door if it’s open and the room on the other side is safe.

In the PDDL (a kind of programming language for planning what actions to take), the action ""move"" needs some conditions to be met before the hero can move:
1. **The rooms must be connected:** Just like you can't walk through a wall at home, the hero can only move to a room if there's a direct connection (like a doorway or a corridor).
2. **The hero must be in the current room:** The hero can only leave a room if he's actually in it.
3. **The current room shouldn’t have a trap that could hurt him.**
4. **The next room shouldn’t be destroyed:** The hero can't go into a room if it’s already been collapsed or destroyed (maybe from a previous adventure!).
5. **The next room shouldn’t have a trap or a monster:** This makes sure our hero doesn’t walk into new danger.

When the hero moves:
- **He is now in the next room:** Just like if you walk to another room in your house, you're then in that new room.
- **The room he left gets destroyed:** This might sound strange, but imagine if every time he left a room, the door magically closed and locked forever, so he can’t go back the same way.
- **He is no longer in the current room:** This is just confirming that he has moved on from the previous room.

These rules help our hero make smart moves through the dungeon, avoiding danger and making progress towards escape. This way of setting up the hero's actions makes sure he can navigate through the dungeon safely and eventually find his way out.","Parameters:
1. ?from - cells
2. ?to - cells
3. ?s - swords

Preconditions:
```
(and
    (connected ?from ?to)
    (at-hero ?from)
    (has-monster ?to)
    (not (is-destroyed ?to))
    (not (has-trap ?from))
    (holding ?s)
)
```

Effects:
```
(and
    (at-hero ?to)
    (is-destroyed ?from)
    (not (at-hero ?from))
)
```
","(:action move
    :parameters (?from - cells ?to - cells)
    :precondition (and (connected ?from ?to) (at-hero ?from) (not (has-trap ?from)) (not (is-destroyed ?to)) (not (has-trap ?to)) (not (has-monster ?to)))
    :effect (and (at-hero ?to) (is-destroyed ?from) (not (at-hero ?from)))
)",
rpggame,move,0.6134718060493469,Semi-Hard Negative (Intra-Domain Mismatch),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: The hero can **move** to an adjacent room (connected by a corridor) that has not been destroyed (i.e., the hero has not already visited the room). When this action is executed, the original cell get destroyed.

Action name: move


Your answer:

**Explanation:**

Imagine our hero in a big, scary dungeon, just like a character from a fairy tale or a video game. The dungeon has several rooms, and some rooms are safe while others have monsters or traps. The hero's goal is to escape from this dungeon, moving from one room to another until he finds the exit.

Now, let's talk about the action called ""move"" that our hero can take. The action ""move"" lets the hero go from one room (we'll call this the ""current room"") to a connected room (let's call this the ""next room""). Think of the dungeon like a big house with many doors connecting the rooms; the hero can only move through a door if it’s open and the room on the other side is safe.

In the PDDL (a kind of programming language for planning what actions to take), the action ""move"" needs some conditions to be met before the hero can move:
1. **The rooms must be connected:** Just like you can't walk through a wall at home, the hero can only move to a room if there's a direct connection (like a doorway or a corridor).
2. **The hero must be in the current room:** The hero can only leave a room if he's actually in it.
3. **The current room shouldn’t have a trap that could hurt him.**
4. **The next room shouldn’t be destroyed:** The hero can't go into a room if it’s already been collapsed or destroyed (maybe from a previous adventure!).
5. **The next room shouldn’t have a trap or a monster:** This makes sure our hero doesn’t walk into new danger.

When the hero moves:
- **He is now in the next room:** Just like if you walk to another room in your house, you're then in that new room.
- **The room he left gets destroyed:** This might sound strange, but imagine if every time he left a room, the door magically closed and locked forever, so he can’t go back the same way.
- **He is no longer in the current room:** This is just confirming that he has moved on from the previous room.

These rules help our hero make smart moves through the dungeon, avoiding danger and making progress towards escape. This way of setting up the hero's actions makes sure he can navigate through the dungeon safely and eventually find his way out.","Parameters:
1. ?loc - cells
2. ?s - swords

Preconditions:
```
(and
    (at-hero ?loc)
    (holding ?s)
    (not (has-trap ?loc))
    (not (has-monster ?loc))
)
```

Effects:
```
(and
    (arm-free)
    (is-destroyed ?s)
    (not (holding ?s))
)
```
","(:action move
    :parameters (?from - cells ?to - cells)
    :precondition (and (connected ?from ?to) (at-hero ?from) (not (has-trap ?from)) (not (is-destroyed ?to)) (not (has-trap ?to)) (not (has-monster ?to)))
    :effect (and (at-hero ?to) (is-destroyed ?from) (not (at-hero ?from)))
)",
rpggame,move,0.7892916202545166,Semi-Hard Negative (Intra-Domain Mismatch),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: The hero can **move** to an adjacent room (connected by a corridor) that has not been destroyed (i.e., the hero has not already visited the room). When this action is executed, the original cell get destroyed.

Action name: move


Your answer:
","**Explanation:**

Imagine you're guiding a hero who just woke up in a mysterious dungeon. Each room can have different things: some are empty, others have monsters, some have traps, and a few might have swords. There's also a special room with an exit—our hero's goal.

Now, let's talk about the action called **move-to-trap**. This action involves our hero moving from one room (we'll call it ""Room A"") to another room (""Room B""), where, unfortunately, there's a trap waiting. Here's why each part of the plan (or action schema) makes sense:

1. **Connected Rooms**: Our hero can only move to a room directly connected to the one they're currently in. This is like being in your house and only being able to walk into rooms that have doors leading from where you are now.

2. **Hero's Current Location**: The hero must start in Room A to move to Room B. You can't move from a place if you're not actually there, right?

3. **Room B Not Destroyed**: The room our hero is moving to mustn't be already destroyed (or in ruins). It's like making sure the bridge you want to cross hasn't collapsed.

4. **Room A Doesn't Have a Trap**: It’s safer if the room our hero is leaving doesn't have a trap. Imagine trying to leave a room with a trap; it could activate and cause trouble!

5. **Room B Has a Trap**: Since the action is called **move-to-trap**, it specifically involves moving to a room with a trap, almost like knowing there's a puddle ahead but stepping into it anyway because it's the only path forward.

6. **Hero's Arm is Free**: This indicates that the hero isn’t holding anything like a sword. It’s important because handling traps might require free hands—think about needing your hands free to disarm or avoid a trap carefully.

When our hero completes this action, several things happen:
- **Hero is now in Room B**: Just like when you walk into another room, you’re no longer in the first room.
- **Room A is destroyed**: This could mean the hero leaves it in a way that no one can follow—maybe they close a heavy door that locks automatically.
- **Hero is no longer in Room A**: It confirms that the hero has completely left Room A.

This action is designed for specific situations in the dungeon where the hero might need to move strategically, even into risky areas, to navigate through the dungeon and eventually find the exit.
Parameters:
1. ?from - cells
2. ?to - cells

Preconditions:
```
(and
    (connected ?from ?to)
    (at-hero ?from)
    (not (is-destroyed ?to))
    (not (has-trap ?from))
    (has-trap ?to)
    (arm-free)
)
```

Effects:
```
(and
    (at-hero ?to)
    (is-destroyed ?from)
    (not (at-hero ?from))
)
```
","(:action move
    :parameters (?from - cells ?to - cells)
    :precondition (and (connected ?from ?to) (at-hero ?from) (not (has-trap ?from)) (not (is-destroyed ?to)) (not (has-trap ?to)) (not (has-monster ?to)))
    :effect (and (at-hero ?to) (is-destroyed ?from) (not (at-hero ?from)))
)",
rpggame,move,0.4962548613548279,Semi-Hard Negative (Intra-Domain Mismatch),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: The hero can **move** to an adjacent room (connected by a corridor) that has not been destroyed (i.e., the hero has not already visited the room). When this action is executed, the original cell get destroyed.

Action name: move


Your answer:
","**Explanation:**

Imagine you're helping a hero navigate through a tricky dungeon filled with different challenges. The hero's objective is to escape, but along the way, they might find useful items like swords that can help protect against monsters.

In our scenario, the action of picking up a sword is crucial. Let's think of it like this: if you enter a room and see a sword on the floor while your hands are free, you can pick it up. The action schema in PDDL, which is a way to represent planning problems, explains this in a structured format.

The preconditions for our action ""pick-sword"" are:
1. **The hero must be in the same room as the sword** (represented as `(at-hero ?loc)` and `(at-sword ?s ?loc)`). This makes sense because you can't pick up something that's not in the same room as you.
2. **The hero's hand must be free** (`(arm-free)`). Just like you can't hold two grocery bags in one hand easily, our hero needs a free hand to pick up the sword.

The effects after the hero picks up the sword are:
1. **The hero is now holding the sword** (`(holding ?s)`). This indicates that the hero has successfully picked up the sword.
2. **The sword is no longer in its original place** (`(not (at-sword ?s ?loc))`). Just like if you take an apple from a basket, the apple isn't in the basket anymore.
3. **The hero's hand is no longer free** (`(not (arm-free))`). Holding the sword means the hand that was free is now occupied.

This action schema is a simple way to model the interaction between the hero and the sword in the dungeon. It helps ensure that all necessary conditions are met before the action takes place, making the hero's journey through the dungeon logical and structured. This way, the hero doesn't magically have a sword without picking it up or has two items in one hand, which keeps our dungeon adventure realistic and understandable.
Parameters:
1. ?loc - cells
2. ?s - swords

Preconditions:
```
(and
    (at-hero ?loc)
    (at-sword ?s ?loc)
    (arm-free)
)
```

Effects:
```
(and
    (holding ?s)
    (not (at-sword ?s ?loc))
    (not (arm-free))
)
```
","(:action move
    :parameters (?from - cells ?to - cells)
    :precondition (and (connected ?from ?to) (at-hero ?from) (not (has-trap ?from)) (not (is-destroyed ?to)) (not (has-trap ?to)) (not (has-monster ?to)))
    :effect (and (at-hero ?to) (is-destroyed ?from) (not (at-hero ?from)))
)",
rpggame,move,0.6990560293197632,Semi-Hard Negative (Intra-Domain Mismatch),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: The hero can **move** to an adjacent room (connected by a corridor) that has not been destroyed (i.e., the hero has not already visited the room). When this action is executed, the original cell get destroyed.

Action name: move


Your answer:
","**Explanation:**

Imagine our hero in a dungeon, a place with rooms connected like a spider web. Each room can be just an empty space, or it might have something like a monster, a trap, or even a sword. Somewhere in this maze, there's a special room that has an exit—the ultimate goal for our hero.

Now, let's focus on a specific action our hero might need to take: **disarming a trap**. In our scenario, the hero finds themselves in a room with a trap. The action to disarm this trap is what we need to understand.

The action is named `disarm-trap`. This action, like any other, has specific requirements (preconditions) that must be met before the hero can perform it. These preconditions are:
1. **The hero must be in the same room as the trap.** This makes sense because you can't disarm a trap from another room. It's like needing to be in the kitchen to turn off a stove.
2. **The hero's hand must be free.** This means the hero can’t be holding anything, like a sword. It's a bit like needing both hands free to tie your shoes properly.
3. **There must actually be a trap in the room.** Obviously, the hero can't disarm a trap if there isn't one there!

If all these conditions are met, then the hero can go ahead and disarm the trap. The results (effects) of this action are:
1. **The trap in the room is disarmed.** This means the room is now safe from that trap.
2. **The trap is no longer considered to be in the room.** It's like cleaning up a spill; once it's cleaned, it's not there anymore.

By breaking down the action like this, we see how each condition helps ensure the action can be carried out safely and effectively. It’s just like following a recipe—each ingredient needs to be added at the right time for the dish to come out right!
Parameters:
1. ?loc - cells

Preconditions:
```
(and
    (at-hero ?loc)
    (arm-free)
    (has-trap ?loc)
)
```

Effects:
```
(and
    (trap-disarmed ?loc)
    (not (has-trap ?loc))
)
```
","(:action move
    :parameters (?from - cells ?to - cells)
    :precondition (and (connected ?from ?to) (at-hero ?from) (not (has-trap ?from)) (not (is-destroyed ?to)) (not (has-trap ?to)) (not (has-monster ?to)))
    :effect (and (at-hero ?to) (is-destroyed ?from) (not (at-hero ?from)))
)",
rpggame,move,0.7913336753845215,Semi-Hard Negative (Intra-Domain Mismatch),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: The hero can **move** to an adjacent room (connected by a corridor) that has not been destroyed (i.e., the hero has not already visited the room). When this action is executed, the original cell get destroyed.

Action name: move


Your answer:
","**Explanation:**

Let's imagine our hero in the dungeon scenario. The hero wakes up and finds themselves in a room, wanting to move to an adjacent room where, unfortunately, there's a monster. Here's how we translate this scenario into a set of instructions, or a 'domain model,' in planning language.

The action we're talking about is called ""move-to-monster."" This means our hero is trying to move from one room (let’s call it Room A) to another room (Room B) where there is a monster. To ensure this action can happen, there are certain conditions that need to be met (these are called 'preconditions') and certain outcomes that will happen as a result of the action (these are called 'effects').

1. **Preconditions**:
   - **Connected Rooms**: Room A and Room B must be connected by a corridor. This makes sense because our hero can't magically jump from one room to another; there must be a path.
   - **Hero's Current Location**: The hero must currently be in Room A. If the hero isn't there, they can't start moving from it!
   - **Monster Presence**: Room B must have a monster. After all, the action is specifically about moving to a room with a monster.
   - **Room Integrity**: Room B should not be destroyed. A destroyed room might mean it’s collapsed or inaccessible, so it's logical our hero can’t move into it.
   - **Safety in Room A**: Room A should not have a trap. This makes sure our hero is safe and able to move without getting caught in a trap.
   - **Armed Hero**: The hero must be holding a sword. It’s a dangerous task to move into a room with a monster, so having a sword means the hero is prepared for a fight.

2. **Effects**:
   - **Hero's New Location**: After the action, the hero will be in Room B. They've successfully moved.
   - **Change in Room A's Status**: Room A becomes 'destroyed.' This might represent that the room is no longer safe or viable after the hero leaves, maybe because of the haste in escaping or some mechanism triggered by the departure.
   - **Update Hero's Old Location**: The fact that the hero was in Room A is no longer true, which is updated in our model to reflect the hero’s new position.

This planning helps organize our thoughts and actions logically, ensuring every step is clear and all necessary precautions are taken. Think of it like giving someone directions with a checklist: ""Before you go there, make sure this, this, and this are true, and once you do, this and this will happen."" This ensures everyone knows what to expect and how to prepare! 
Parameters:
1. ?from - cells
2. ?to - cells
3. ?s - swords

Preconditions:
```
(and
    (connected ?from ?to)
    (at-hero ?from)
    (has-monster ?to)
    (not (is-destroyed ?to))
    (not (has-trap ?from))
    (holding ?s)
)
```

Effects:
```
(and
    (at-hero ?to)
    (is-destroyed ?from)
    (not (at-hero ?from))
)
```
","(:action move
    :parameters (?from - cells ?to - cells)
    :precondition (and (connected ?from ?to) (at-hero ?from) (not (has-trap ?from)) (not (is-destroyed ?to)) (not (has-trap ?to)) (not (has-monster ?to)))
    :effect (and (at-hero ?to) (is-destroyed ?from) (not (at-hero ?from)))
)",
rpggame,move,0.6022753715515137,Semi-Hard Negative (Intra-Domain Mismatch),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: The hero can **move** to an adjacent room (connected by a corridor) that has not been destroyed (i.e., the hero has not already visited the room). When this action is executed, the original cell get destroyed.

Action name: move


Your answer:
","**Explanation:**

Imagine you're helping a hero navigate a dungeon full of monsters and traps, a bit like playing a video game. Now, the hero has a sword, but in this part of the game, the hero decides to destroy the sword. To understand why certain conditions are checked before the hero can destroy the sword safely, let's break it down using the action ""destroy-sword"" from the game's rules (or in technical terms, the PDDL action schema).

Firstly, the hero needs to be in the same location as the sword. This makes sense, right? You can't throw something away or break it if it's not with you. So, the condition `(at-hero ?loc)` ensures that the hero is at the right spot to perform the action.

Secondly, the hero must be holding the sword. It’s similar to needing both hands on a bat to swing it; here, the hero needs to have the sword in hand to destroy it, checked by `(holding ?s)`.

But why check for no traps or monsters in the room? Think of it like trying to do something delicate, like assembling a model airplane, in a room with a loose tiger. Not a great idea, right? If there’s a monster in the room, destroying the sword might make the hero vulnerable to attack. Similarly, a trap could be triggered by the noise or movement, putting the hero in danger. So, `(not (has-trap ?loc))` and `(not (has-monster ?loc))` ensure that the environment is safe for the hero to break the sword without turning the situation worse.

Now, what happens after the sword is destroyed? The effect is that the hero’s hand is now free (`arm-free`), the sword is confirmed as destroyed (`is-destroyed ?s`), and the hero is no longer holding it (`not (holding ?s)`). It’s like cleaning up after finishing a task: put away the tools, clean up the mess, and free up your hands for the next task.

In simple terms, this action schema is like a set of instructions to make sure the hero does something risky (like destroying a sword) safely and responsibly, without making the dangerous dungeon situation even worse.
Parameters:
1. ?loc - cells
2. ?s - swords

Preconditions:
```
(and
    (at-hero ?loc)
    (holding ?s)
    (not (has-trap ?loc))
    (not (has-monster ?loc))
)
```

Effects:
```
(and
    (arm-free)
    (is-destroyed ?s)
    (not (holding ?s))
)
```
","(:action move
    :parameters (?from - cells ?to - cells)
    :precondition (and (connected ?from ?to) (at-hero ?from) (not (has-trap ?from)) (not (is-destroyed ?to)) (not (has-trap ?to)) (not (has-monster ?to)))
    :effect (and (at-hero ?to) (is-destroyed ?from) (not (at-hero ?from)))
)",
rpggame,move,0.5347782373428345,Hard Negative (Manipulated Action),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: The hero can **move** to an adjacent room (connected by a corridor) that has not been destroyed (i.e., the hero has not already visited the room). When this action is executed, the original cell get destroyed.

Action name: move


Your answer:
","Parameters:
1. ?from - cells
2. ?to - cells

Preconditions:
```
(and
    (connected ?from ?to)
    (at-hero ?from)
    (not (has-trap ?from))
    (not (is-destroyed ?to))
    (not (has-monster ?to))
)
```

Effects:
```
(and
    (at-hero ?to)
    (is-destroyed ?from)
    (not (at-hero ?from))
)
```
","(:action move
    :parameters (?from - cells ?to - cells)
    :precondition (and (connected ?from ?to) (at-hero ?from) (not (has-trap ?from)) (not (is-destroyed ?to)) (not (has-trap ?to)) (not (has-monster ?to)))
    :effect (and (at-hero ?to) (is-destroyed ?from) (not (at-hero ?from)))
)","remove (not (has-trap ?to)) from preconditions
"
rpggame,move,0.5450031161308289,Hard Negative (Manipulated Action),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: The hero can **move** to an adjacent room (connected by a corridor) that has not been destroyed (i.e., the hero has not already visited the room). When this action is executed, the original cell get destroyed.

Action name: move


Your answer:
","Parameters:
1. ?from - cells
2. ?to - cells

Preconditions:
```
(and
    (at-hero ?to)
    (connected ?from ?to)
    (at-hero ?from)
    (not (has-trap ?from))
    (not (is-destroyed ?to))
    (not (has-monster ?to))
)
```

Effects:
```
(and
    (not (has-trap ?to))
    (not (is-destroyed ?from))
    (not (at-hero ?from))
)
```
","(:action move
    :parameters (?from - cells ?to - cells)
    :precondition (and (connected ?from ?to) (at-hero ?from) (not (has-trap ?from)) (not (is-destroyed ?to)) (not (has-trap ?to)) (not (has-monster ?to)))
    :effect (and (at-hero ?to) (is-destroyed ?from) (not (at-hero ?from)))
)","swap (not (has-trap ?to)) with (at-hero ?to)
negate (is-destroyed ?from) in effects
"
rpggame,move,0.34822219610214233,Hard Negative (Manipulated Action),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: The hero can **move** to an adjacent room (connected by a corridor) that has not been destroyed (i.e., the hero has not already visited the room). When this action is executed, the original cell get destroyed.

Action name: move


Your answer:
","Parameters:
1. ?from - cells
2. ?to - cells

Preconditions:
```
(and
    (is-destroyed ?from)
    (not (has-trap ?from))
    (not (is-destroyed ?to))
    (not (has-trap ?to))
    (not (has-monster ?to))
)
```

Effects:
```
(and
    (connected ?from ?to)
    (at-hero ?to)
    (not (at-hero ?from))
)
```
","(:action move
    :parameters (?from - cells ?to - cells)
    :precondition (and (connected ?from ?to) (at-hero ?from) (not (has-trap ?from)) (not (is-destroyed ?to)) (not (has-trap ?to)) (not (has-monster ?to)))
    :effect (and (at-hero ?to) (is-destroyed ?from) (not (at-hero ?from)))
)","remove (at-hero ?from) from preconditions
swap (connected ?from ?to) with (is-destroyed ?from)
"
rpggame,move,0.37705281376838684,Hard Negative (Manipulated Action),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: The hero can **move** to an adjacent room (connected by a corridor) that has not been destroyed (i.e., the hero has not already visited the room). When this action is executed, the original cell get destroyed.

Action name: move


Your answer:
","Parameters:
1. ?from - cells
2. ?to - cells

Preconditions:
```
(and
    (not (at-hero ?from))
    (connected ?from ?to)
    (not (has-trap ?from))
    (not (has-trap ?to))
    (not (has-monster ?to))
)
```

Effects:
```
(and
    (at-hero ?from)
    (at-hero ?to)
    (is-destroyed ?from)
)
```
","(:action move
    :parameters (?from - cells ?to - cells)
    :precondition (and (connected ?from ?to) (at-hero ?from) (not (has-trap ?from)) (not (is-destroyed ?to)) (not (has-trap ?to)) (not (has-monster ?to)))
    :effect (and (at-hero ?to) (is-destroyed ?from) (not (at-hero ?from)))
)","remove (not (is-destroyed ?to)) from preconditions
swap (at-hero ?from) with (not (at-hero ?from))
"
rpggame,move,0.4270290434360504,Hard Negative (Manipulated Action),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: The hero can **move** to an adjacent room (connected by a corridor) that has not been destroyed (i.e., the hero has not already visited the room). When this action is executed, the original cell get destroyed.

Action name: move


Your answer:
","Parameters:
1. ?from - cells
2. ?to - cells

Preconditions:
```
(and
    (not (connected ?from ?to))
    (at-hero ?from)
    (not (has-trap ?from))
    (not (is-destroyed ?to))
    (not (has-trap ?to))
    (not (has-monster ?to))
)
```

Effects:
```
(and
    (at-hero ?to)
    (is-destroyed ?from)
    (not (at-hero ?from))
)
```
","(:action move
    :parameters (?from - cells ?to - cells)
    :precondition (and (connected ?from ?to) (at-hero ?from) (not (has-trap ?from)) (not (is-destroyed ?to)) (not (has-trap ?to)) (not (has-monster ?to)))
    :effect (and (at-hero ?to) (is-destroyed ?from) (not (at-hero ?from)))
)","negate (connected ?from ?to) in preconditions
"
rpggame,move,0.5573819279670715,Hard Negative (Manipulated Action),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: The hero can **move** to an adjacent room (connected by a corridor) that has not been destroyed (i.e., the hero has not already visited the room). When this action is executed, the original cell get destroyed.

Action name: move


Your answer:
","Parameters:
1. ?from - cells
2. ?to - cells

Preconditions:
```
(and
    (has-trap ?to)
    (connected ?from ?to)
    (at-hero ?from)
    (not (has-trap ?from))
    (not (is-destroyed ?to))
    (not (has-monster ?to))
)
```

Effects:
```
(and
    (at-hero ?from)
    (at-hero ?to)
    (is-destroyed ?from)
)
```
","(:action move
    :parameters (?from - cells ?to - cells)
    :precondition (and (connected ?from ?to) (at-hero ?from) (not (has-trap ?from)) (not (is-destroyed ?to)) (not (has-trap ?to)) (not (has-monster ?to)))
    :effect (and (at-hero ?to) (is-destroyed ?from) (not (at-hero ?from)))
)","negate (not (has-trap ?to)) in preconditions
negate (not (at-hero ?from)) in effects
"
rpggame,move,0.5513617396354675,Hard Negative (Manipulated Action),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: The hero can **move** to an adjacent room (connected by a corridor) that has not been destroyed (i.e., the hero has not already visited the room). When this action is executed, the original cell get destroyed.

Action name: move


Your answer:
","Parameters:
1. ?from - cells
2. ?to - cells

Preconditions:
```
(and
    (connected ?from ?to)
    (at-hero ?from)
    (not (has-trap ?from))
    (not (is-destroyed ?to))
    (not (has-trap ?to))
    (not (has-monster ?to))
)
```

Effects:
```
(and
    (at-hero ?to)
    (not (at-hero ?from))
)
```
","(:action move
    :parameters (?from - cells ?to - cells)
    :precondition (and (connected ?from ?to) (at-hero ?from) (not (has-trap ?from)) (not (is-destroyed ?to)) (not (has-trap ?to)) (not (has-monster ?to)))
    :effect (and (at-hero ?to) (is-destroyed ?from) (not (at-hero ?from)))
)","remove (is-destroyed ?from) from effects
"
rpggame,move,0.39609697461128235,Hard Negative (Manipulated Action),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: The hero can **move** to an adjacent room (connected by a corridor) that has not been destroyed (i.e., the hero has not already visited the room). When this action is executed, the original cell get destroyed.

Action name: move


Your answer:
","Parameters:
1. ?from - cells
2. ?to - cells

Preconditions:
```
(and
    (is-destroyed ?from)
    (at-hero ?to)
    (connected ?from ?to)
    (at-hero ?from)
    (not (has-trap ?from))
    (not (is-destroyed ?to))
)
```

Effects:
```
(and
    (not (has-monster ?to))
    (not (has-trap ?to))
    (not (at-hero ?from))
)
```
","(:action move
    :parameters (?from - cells ?to - cells)
    :precondition (and (connected ?from ?to) (at-hero ?from) (not (has-trap ?from)) (not (is-destroyed ?to)) (not (has-trap ?to)) (not (has-monster ?to)))
    :effect (and (at-hero ?to) (is-destroyed ?from) (not (at-hero ?from)))
)","swap (not (has-monster ?to)) with (is-destroyed ?from)
swap (not (has-trap ?to)) with (at-hero ?to)
"
rpggame,move,0.4997785687446594,Hard Negative (Manipulated Action),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: The hero can **move** to an adjacent room (connected by a corridor) that has not been destroyed (i.e., the hero has not already visited the room). When this action is executed, the original cell get destroyed.

Action name: move


Your answer:
","Parameters:
1. ?from - cells
2. ?to - cells

Preconditions:
```
(and
    (connected ?from ?to)
    (at-hero ?from)
    (not (has-trap ?from))
    (not (has-trap ?to))
    (not (has-monster ?to))
)
```

Effects:
```
(and
    (at-hero ?to)
    (is-destroyed ?from)
    (not (at-hero ?from))
)
```
","(:action move
    :parameters (?from - cells ?to - cells)
    :precondition (and (connected ?from ?to) (at-hero ?from) (not (has-trap ?from)) (not (is-destroyed ?to)) (not (has-trap ?to)) (not (has-monster ?to)))
    :effect (and (at-hero ?to) (is-destroyed ?from) (not (at-hero ?from)))
)","remove (not (is-destroyed ?to)) from preconditions
"
rpggame,move,0.43419700860977173,Hard Negative (Manipulated Action),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: The hero can **move** to an adjacent room (connected by a corridor) that has not been destroyed (i.e., the hero has not already visited the room). When this action is executed, the original cell get destroyed.

Action name: move


Your answer:
","Parameters:
1. ?from - cells
2. ?to - cells

Preconditions:
```
(and
    (not (at-hero ?from))
    (has-monster ?to)
    (connected ?from ?to)
    (not (has-trap ?from))
    (not (is-destroyed ?to))
    (not (has-trap ?to))
)
```

Effects:
```
(and
    (at-hero ?to)
    (is-destroyed ?from)
    (not (at-hero ?from))
)
```
","(:action move
    :parameters (?from - cells ?to - cells)
    :precondition (and (connected ?from ?to) (at-hero ?from) (not (has-trap ?from)) (not (is-destroyed ?to)) (not (has-trap ?to)) (not (has-monster ?to)))
    :effect (and (at-hero ?to) (is-destroyed ?from) (not (at-hero ?from)))
)","negate (at-hero ?from) in preconditions
negate (not (has-monster ?to)) in preconditions
"
rpggame,move,0.4793625771999359,Hard Negative (Manipulated Action),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: The hero can **move** to an adjacent room (connected by a corridor) that has not been destroyed (i.e., the hero has not already visited the room). When this action is executed, the original cell get destroyed.

Action name: move


Your answer:

**Explanation:**

Imagine our hero in a big, scary dungeon, just like a character from a fairy tale or a video game. The dungeon has several rooms, and some rooms are safe while others have monsters or traps. The hero's goal is to escape from this dungeon, moving from one room to another until he finds the exit.

Now, let's talk about the action called ""move"" that our hero can take. The action ""move"" lets the hero go from one room (we'll call this the ""current room"") to a connected room (let's call this the ""next room""). Think of the dungeon like a big house with many doors connecting the rooms; the hero can only move through a door if it’s open and the room on the other side is safe.

In the PDDL (a kind of programming language for planning what actions to take), the action ""move"" needs some conditions to be met before the hero can move:
1. **The rooms must be connected:** Just like you can't walk through a wall at home, the hero can only move to a room if there's a direct connection (like a doorway or a corridor).
2. **The hero must be in the current room:** The hero can only leave a room if he's actually in it.
3. **The current room shouldn’t have a trap that could hurt him.**
4. **The next room shouldn’t be destroyed:** The hero can't go into a room if it’s already been collapsed or destroyed (maybe from a previous adventure!).
5. **The next room shouldn’t have a trap or a monster:** This makes sure our hero doesn’t walk into new danger.

When the hero moves:
- **He is now in the next room:** Just like if you walk to another room in your house, you're then in that new room.
- **The room he left gets destroyed:** This might sound strange, but imagine if every time he left a room, the door magically closed and locked forever, so he can’t go back the same way.
- **He is no longer in the current room:** This is just confirming that he has moved on from the previous room.

These rules help our hero make smart moves through the dungeon, avoiding danger and making progress towards escape. This way of setting up the hero's actions makes sure he can navigate through the dungeon safely and eventually find his way out.","Parameters:
1. ?from - cells
2. ?to - cells

Preconditions:
```
(and
    (connected ?from ?to)
    (at-hero ?from)
    (not (is-destroyed ?to))
    (not (has-trap ?to))
    (not (has-monster ?to))
)
```

Effects:
```
(and
    (not (is-destroyed ?from))
    (at-hero ?to)
    (not (at-hero ?from))
)
```
","(:action move
    :parameters (?from - cells ?to - cells)
    :precondition (and (connected ?from ?to) (at-hero ?from) (not (has-trap ?from)) (not (is-destroyed ?to)) (not (has-trap ?to)) (not (has-monster ?to)))
    :effect (and (at-hero ?to) (is-destroyed ?from) (not (at-hero ?from)))
)","negate (is-destroyed ?from) in effects
remove (not (has-trap ?from)) from preconditions
"
rpggame,move,0.5209085941314697,Hard Negative (Manipulated Action),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: The hero can **move** to an adjacent room (connected by a corridor) that has not been destroyed (i.e., the hero has not already visited the room). When this action is executed, the original cell get destroyed.

Action name: move


Your answer:

**Explanation:**

Imagine our hero in a big, scary dungeon, just like a character from a fairy tale or a video game. The dungeon has several rooms, and some rooms are safe while others have monsters or traps. The hero's goal is to escape from this dungeon, moving from one room to another until he finds the exit.

Now, let's talk about the action called ""move"" that our hero can take. The action ""move"" lets the hero go from one room (we'll call this the ""current room"") to a connected room (let's call this the ""next room""). Think of the dungeon like a big house with many doors connecting the rooms; the hero can only move through a door if it’s open and the room on the other side is safe.

In the PDDL (a kind of programming language for planning what actions to take), the action ""move"" needs some conditions to be met before the hero can move:
1. **The rooms must be connected:** Just like you can't walk through a wall at home, the hero can only move to a room if there's a direct connection (like a doorway or a corridor).
2. **The hero must be in the current room:** The hero can only leave a room if he's actually in it.
3. **The current room shouldn’t have a trap that could hurt him.**
4. **The next room shouldn’t be destroyed:** The hero can't go into a room if it’s already been collapsed or destroyed (maybe from a previous adventure!).
5. **The next room shouldn’t have a trap or a monster:** This makes sure our hero doesn’t walk into new danger.

When the hero moves:
- **He is now in the next room:** Just like if you walk to another room in your house, you're then in that new room.
- **The room he left gets destroyed:** This might sound strange, but imagine if every time he left a room, the door magically closed and locked forever, so he can’t go back the same way.
- **He is no longer in the current room:** This is just confirming that he has moved on from the previous room.

These rules help our hero make smart moves through the dungeon, avoiding danger and making progress towards escape. This way of setting up the hero's actions makes sure he can navigate through the dungeon safely and eventually find his way out.","Parameters:
1. ?from - cells
2. ?to - cells

Preconditions:
```
(and
    (connected ?from ?to)
    (at-hero ?from)
    (not (has-trap ?from))
    (not (is-destroyed ?to))
    (not (has-trap ?to))
    (not (has-monster ?to))
)
```

Effects:
```
(and
    (not (at-hero ?to))
    (is-destroyed ?from)
    (not (at-hero ?from))
)
```
","(:action move
    :parameters (?from - cells ?to - cells)
    :precondition (and (connected ?from ?to) (at-hero ?from) (not (has-trap ?from)) (not (is-destroyed ?to)) (not (has-trap ?to)) (not (has-monster ?to)))
    :effect (and (at-hero ?to) (is-destroyed ?from) (not (at-hero ?from)))
)","negate (at-hero ?to) in effects
"
rpggame,move,0.4190295338630676,Hard Negative (Manipulated Action),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: The hero can **move** to an adjacent room (connected by a corridor) that has not been destroyed (i.e., the hero has not already visited the room). When this action is executed, the original cell get destroyed.

Action name: move


Your answer:

**Explanation:**

Imagine our hero in a big, scary dungeon, just like a character from a fairy tale or a video game. The dungeon has several rooms, and some rooms are safe while others have monsters or traps. The hero's goal is to escape from this dungeon, moving from one room to another until he finds the exit.

Now, let's talk about the action called ""move"" that our hero can take. The action ""move"" lets the hero go from one room (we'll call this the ""current room"") to a connected room (let's call this the ""next room""). Think of the dungeon like a big house with many doors connecting the rooms; the hero can only move through a door if it’s open and the room on the other side is safe.

In the PDDL (a kind of programming language for planning what actions to take), the action ""move"" needs some conditions to be met before the hero can move:
1. **The rooms must be connected:** Just like you can't walk through a wall at home, the hero can only move to a room if there's a direct connection (like a doorway or a corridor).
2. **The hero must be in the current room:** The hero can only leave a room if he's actually in it.
3. **The current room shouldn’t have a trap that could hurt him.**
4. **The next room shouldn’t be destroyed:** The hero can't go into a room if it’s already been collapsed or destroyed (maybe from a previous adventure!).
5. **The next room shouldn’t have a trap or a monster:** This makes sure our hero doesn’t walk into new danger.

When the hero moves:
- **He is now in the next room:** Just like if you walk to another room in your house, you're then in that new room.
- **The room he left gets destroyed:** This might sound strange, but imagine if every time he left a room, the door magically closed and locked forever, so he can’t go back the same way.
- **He is no longer in the current room:** This is just confirming that he has moved on from the previous room.

These rules help our hero make smart moves through the dungeon, avoiding danger and making progress towards escape. This way of setting up the hero's actions makes sure he can navigate through the dungeon safely and eventually find his way out.","Parameters:
1. ?from - cells
2. ?to - cells

Preconditions:
```
(and
    (not (at-hero ?from))
    (connected ?from ?to)
    (not (has-trap ?from))
    (not (is-destroyed ?to))
    (not (has-trap ?to))
    (not (has-monster ?to))
)
```

Effects:
```
(and
    (not (at-hero ?to))
    (is-destroyed ?from)
    (not (at-hero ?from))
)
```
","(:action move
    :parameters (?from - cells ?to - cells)
    :precondition (and (connected ?from ?to) (at-hero ?from) (not (has-trap ?from)) (not (is-destroyed ?to)) (not (has-trap ?to)) (not (has-monster ?to)))
    :effect (and (at-hero ?to) (is-destroyed ?from) (not (at-hero ?from)))
)","negate (at-hero ?to) in effects
negate (at-hero ?from) in preconditions
"
rpggame,move,0.515404462814331,Hard Negative (Manipulated Action),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: The hero can **move** to an adjacent room (connected by a corridor) that has not been destroyed (i.e., the hero has not already visited the room). When this action is executed, the original cell get destroyed.

Action name: move


Your answer:

**Explanation:**

Imagine our hero in a big, scary dungeon, just like a character from a fairy tale or a video game. The dungeon has several rooms, and some rooms are safe while others have monsters or traps. The hero's goal is to escape from this dungeon, moving from one room to another until he finds the exit.

Now, let's talk about the action called ""move"" that our hero can take. The action ""move"" lets the hero go from one room (we'll call this the ""current room"") to a connected room (let's call this the ""next room""). Think of the dungeon like a big house with many doors connecting the rooms; the hero can only move through a door if it’s open and the room on the other side is safe.

In the PDDL (a kind of programming language for planning what actions to take), the action ""move"" needs some conditions to be met before the hero can move:
1. **The rooms must be connected:** Just like you can't walk through a wall at home, the hero can only move to a room if there's a direct connection (like a doorway or a corridor).
2. **The hero must be in the current room:** The hero can only leave a room if he's actually in it.
3. **The current room shouldn’t have a trap that could hurt him.**
4. **The next room shouldn’t be destroyed:** The hero can't go into a room if it’s already been collapsed or destroyed (maybe from a previous adventure!).
5. **The next room shouldn’t have a trap or a monster:** This makes sure our hero doesn’t walk into new danger.

When the hero moves:
- **He is now in the next room:** Just like if you walk to another room in your house, you're then in that new room.
- **The room he left gets destroyed:** This might sound strange, but imagine if every time he left a room, the door magically closed and locked forever, so he can’t go back the same way.
- **He is no longer in the current room:** This is just confirming that he has moved on from the previous room.

These rules help our hero make smart moves through the dungeon, avoiding danger and making progress towards escape. This way of setting up the hero's actions makes sure he can navigate through the dungeon safely and eventually find his way out.","Parameters:
1. ?from - cells
2. ?to - cells

Preconditions:
```
(and
    (at-hero ?to)
    (connected ?from ?to)
    (at-hero ?from)
    (not (has-trap ?from))
    (not (is-destroyed ?to))
    (not (has-trap ?to))
)
```

Effects:
```
(and
    (not (has-monster ?to))
    (is-destroyed ?from)
    (not (at-hero ?from))
)
```
","(:action move
    :parameters (?from - cells ?to - cells)
    :precondition (and (connected ?from ?to) (at-hero ?from) (not (has-trap ?from)) (not (is-destroyed ?to)) (not (has-trap ?to)) (not (has-monster ?to)))
    :effect (and (at-hero ?to) (is-destroyed ?from) (not (at-hero ?from)))
)","swap (not (has-monster ?to)) with (at-hero ?to)
"
rpggame,move,0.4802588224411011,Hard Negative (Manipulated Action),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: The hero can **move** to an adjacent room (connected by a corridor) that has not been destroyed (i.e., the hero has not already visited the room). When this action is executed, the original cell get destroyed.

Action name: move


Your answer:

**Explanation:**

Imagine our hero in a big, scary dungeon, just like a character from a fairy tale or a video game. The dungeon has several rooms, and some rooms are safe while others have monsters or traps. The hero's goal is to escape from this dungeon, moving from one room to another until he finds the exit.

Now, let's talk about the action called ""move"" that our hero can take. The action ""move"" lets the hero go from one room (we'll call this the ""current room"") to a connected room (let's call this the ""next room""). Think of the dungeon like a big house with many doors connecting the rooms; the hero can only move through a door if it’s open and the room on the other side is safe.

In the PDDL (a kind of programming language for planning what actions to take), the action ""move"" needs some conditions to be met before the hero can move:
1. **The rooms must be connected:** Just like you can't walk through a wall at home, the hero can only move to a room if there's a direct connection (like a doorway or a corridor).
2. **The hero must be in the current room:** The hero can only leave a room if he's actually in it.
3. **The current room shouldn’t have a trap that could hurt him.**
4. **The next room shouldn’t be destroyed:** The hero can't go into a room if it’s already been collapsed or destroyed (maybe from a previous adventure!).
5. **The next room shouldn’t have a trap or a monster:** This makes sure our hero doesn’t walk into new danger.

When the hero moves:
- **He is now in the next room:** Just like if you walk to another room in your house, you're then in that new room.
- **The room he left gets destroyed:** This might sound strange, but imagine if every time he left a room, the door magically closed and locked forever, so he can’t go back the same way.
- **He is no longer in the current room:** This is just confirming that he has moved on from the previous room.

These rules help our hero make smart moves through the dungeon, avoiding danger and making progress towards escape. This way of setting up the hero's actions makes sure he can navigate through the dungeon safely and eventually find his way out.","Parameters:
1. ?from - cells
2. ?to - cells

Preconditions:
```
(and
    (is-destroyed ?from)
    (not (at-hero ?from))
    (connected ?from ?to)
    (not (has-trap ?from))
    (not (is-destroyed ?to))
    (not (has-trap ?to))
)
```

Effects:
```
(and
    (at-hero ?from)
    (not (has-monster ?to))
    (at-hero ?to)
)
```
","(:action move
    :parameters (?from - cells ?to - cells)
    :precondition (and (connected ?from ?to) (at-hero ?from) (not (has-trap ?from)) (not (is-destroyed ?to)) (not (has-trap ?to)) (not (has-monster ?to)))
    :effect (and (at-hero ?to) (is-destroyed ?from) (not (at-hero ?from)))
)","swap (at-hero ?from) with (is-destroyed ?from)
swap (not (has-monster ?to)) with (not (at-hero ?from))
"
rpggame,move,0.33598750829696655,Hard Negative (Manipulated Action),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: The hero can **move** to an adjacent room (connected by a corridor) that has not been destroyed (i.e., the hero has not already visited the room). When this action is executed, the original cell get destroyed.

Action name: move


Your answer:

**Explanation:**

Imagine our hero in a big, scary dungeon, just like a character from a fairy tale or a video game. The dungeon has several rooms, and some rooms are safe while others have monsters or traps. The hero's goal is to escape from this dungeon, moving from one room to another until he finds the exit.

Now, let's talk about the action called ""move"" that our hero can take. The action ""move"" lets the hero go from one room (we'll call this the ""current room"") to a connected room (let's call this the ""next room""). Think of the dungeon like a big house with many doors connecting the rooms; the hero can only move through a door if it’s open and the room on the other side is safe.

In the PDDL (a kind of programming language for planning what actions to take), the action ""move"" needs some conditions to be met before the hero can move:
1. **The rooms must be connected:** Just like you can't walk through a wall at home, the hero can only move to a room if there's a direct connection (like a doorway or a corridor).
2. **The hero must be in the current room:** The hero can only leave a room if he's actually in it.
3. **The current room shouldn’t have a trap that could hurt him.**
4. **The next room shouldn’t be destroyed:** The hero can't go into a room if it’s already been collapsed or destroyed (maybe from a previous adventure!).
5. **The next room shouldn’t have a trap or a monster:** This makes sure our hero doesn’t walk into new danger.

When the hero moves:
- **He is now in the next room:** Just like if you walk to another room in your house, you're then in that new room.
- **The room he left gets destroyed:** This might sound strange, but imagine if every time he left a room, the door magically closed and locked forever, so he can’t go back the same way.
- **He is no longer in the current room:** This is just confirming that he has moved on from the previous room.

These rules help our hero make smart moves through the dungeon, avoiding danger and making progress towards escape. This way of setting up the hero's actions makes sure he can navigate through the dungeon safely and eventually find his way out.","Parameters:
1. ?from - cells
2. ?to - cells

Preconditions:
```
(and
    (not (at-hero ?from))
    (connected ?from ?to)
    (at-hero ?from)
    (not (is-destroyed ?to))
    (not (has-trap ?to))
    (not (has-monster ?to))
)
```

Effects:
```
(and
    (not (has-trap ?from))
    (at-hero ?to)
)
```
","(:action move
    :parameters (?from - cells ?to - cells)
    :precondition (and (connected ?from ?to) (at-hero ?from) (not (has-trap ?from)) (not (is-destroyed ?to)) (not (has-trap ?to)) (not (has-monster ?to)))
    :effect (and (at-hero ?to) (is-destroyed ?from) (not (at-hero ?from)))
)","remove (is-destroyed ?from) from effects
swap (not (has-trap ?from)) with (not (at-hero ?from))
"
rpggame,move,0.4340151846408844,Hard Negative (Manipulated Action),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: The hero can **move** to an adjacent room (connected by a corridor) that has not been destroyed (i.e., the hero has not already visited the room). When this action is executed, the original cell get destroyed.

Action name: move


Your answer:

**Explanation:**

Imagine our hero in a big, scary dungeon, just like a character from a fairy tale or a video game. The dungeon has several rooms, and some rooms are safe while others have monsters or traps. The hero's goal is to escape from this dungeon, moving from one room to another until he finds the exit.

Now, let's talk about the action called ""move"" that our hero can take. The action ""move"" lets the hero go from one room (we'll call this the ""current room"") to a connected room (let's call this the ""next room""). Think of the dungeon like a big house with many doors connecting the rooms; the hero can only move through a door if it’s open and the room on the other side is safe.

In the PDDL (a kind of programming language for planning what actions to take), the action ""move"" needs some conditions to be met before the hero can move:
1. **The rooms must be connected:** Just like you can't walk through a wall at home, the hero can only move to a room if there's a direct connection (like a doorway or a corridor).
2. **The hero must be in the current room:** The hero can only leave a room if he's actually in it.
3. **The current room shouldn’t have a trap that could hurt him.**
4. **The next room shouldn’t be destroyed:** The hero can't go into a room if it’s already been collapsed or destroyed (maybe from a previous adventure!).
5. **The next room shouldn’t have a trap or a monster:** This makes sure our hero doesn’t walk into new danger.

When the hero moves:
- **He is now in the next room:** Just like if you walk to another room in your house, you're then in that new room.
- **The room he left gets destroyed:** This might sound strange, but imagine if every time he left a room, the door magically closed and locked forever, so he can’t go back the same way.
- **He is no longer in the current room:** This is just confirming that he has moved on from the previous room.

These rules help our hero make smart moves through the dungeon, avoiding danger and making progress towards escape. This way of setting up the hero's actions makes sure he can navigate through the dungeon safely and eventually find his way out.","Parameters:
1. ?from - cells
2. ?to - cells

Preconditions:
```
(and
    (at-hero ?to)
    (not (connected ?from ?to))
    (at-hero ?from)
    (not (has-trap ?from))
    (not (is-destroyed ?to))
    (not (has-monster ?to))
)
```

Effects:
```
(and
    (not (has-trap ?to))
    (is-destroyed ?from)
    (not (at-hero ?from))
)
```
","(:action move
    :parameters (?from - cells ?to - cells)
    :precondition (and (connected ?from ?to) (at-hero ?from) (not (has-trap ?from)) (not (is-destroyed ?to)) (not (has-trap ?to)) (not (has-monster ?to)))
    :effect (and (at-hero ?to) (is-destroyed ?from) (not (at-hero ?from)))
)","swap (not (has-trap ?to)) with (at-hero ?to)
negate (connected ?from ?to) in preconditions
"
rpggame,move,0.4932636022567749,Hard Negative (Manipulated Action),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: The hero can **move** to an adjacent room (connected by a corridor) that has not been destroyed (i.e., the hero has not already visited the room). When this action is executed, the original cell get destroyed.

Action name: move


Your answer:

**Explanation:**

Imagine our hero in a big, scary dungeon, just like a character from a fairy tale or a video game. The dungeon has several rooms, and some rooms are safe while others have monsters or traps. The hero's goal is to escape from this dungeon, moving from one room to another until he finds the exit.

Now, let's talk about the action called ""move"" that our hero can take. The action ""move"" lets the hero go from one room (we'll call this the ""current room"") to a connected room (let's call this the ""next room""). Think of the dungeon like a big house with many doors connecting the rooms; the hero can only move through a door if it’s open and the room on the other side is safe.

In the PDDL (a kind of programming language for planning what actions to take), the action ""move"" needs some conditions to be met before the hero can move:
1. **The rooms must be connected:** Just like you can't walk through a wall at home, the hero can only move to a room if there's a direct connection (like a doorway or a corridor).
2. **The hero must be in the current room:** The hero can only leave a room if he's actually in it.
3. **The current room shouldn’t have a trap that could hurt him.**
4. **The next room shouldn’t be destroyed:** The hero can't go into a room if it’s already been collapsed or destroyed (maybe from a previous adventure!).
5. **The next room shouldn’t have a trap or a monster:** This makes sure our hero doesn’t walk into new danger.

When the hero moves:
- **He is now in the next room:** Just like if you walk to another room in your house, you're then in that new room.
- **The room he left gets destroyed:** This might sound strange, but imagine if every time he left a room, the door magically closed and locked forever, so he can’t go back the same way.
- **He is no longer in the current room:** This is just confirming that he has moved on from the previous room.

These rules help our hero make smart moves through the dungeon, avoiding danger and making progress towards escape. This way of setting up the hero's actions makes sure he can navigate through the dungeon safely and eventually find his way out.","Parameters:
1. ?from - cells
2. ?to - cells

Preconditions:
```
(and
    (connected ?from ?to)
    (at-hero ?from)
    (not (has-trap ?from))
    (not (has-trap ?to))
    (not (has-monster ?to))
)
```

Effects:
```
(and
    (at-hero ?to)
    (not (at-hero ?from))
)
```
","(:action move
    :parameters (?from - cells ?to - cells)
    :precondition (and (connected ?from ?to) (at-hero ?from) (not (has-trap ?from)) (not (is-destroyed ?to)) (not (has-trap ?to)) (not (has-monster ?to)))
    :effect (and (at-hero ?to) (is-destroyed ?from) (not (at-hero ?from)))
)","remove (is-destroyed ?from) from effects
remove (not (is-destroyed ?to)) from preconditions
"
rpggame,move,0.5368720889091492,Hard Negative (Manipulated Action),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: The hero can **move** to an adjacent room (connected by a corridor) that has not been destroyed (i.e., the hero has not already visited the room). When this action is executed, the original cell get destroyed.

Action name: move


Your answer:

**Explanation:**

Imagine our hero in a big, scary dungeon, just like a character from a fairy tale or a video game. The dungeon has several rooms, and some rooms are safe while others have monsters or traps. The hero's goal is to escape from this dungeon, moving from one room to another until he finds the exit.

Now, let's talk about the action called ""move"" that our hero can take. The action ""move"" lets the hero go from one room (we'll call this the ""current room"") to a connected room (let's call this the ""next room""). Think of the dungeon like a big house with many doors connecting the rooms; the hero can only move through a door if it’s open and the room on the other side is safe.

In the PDDL (a kind of programming language for planning what actions to take), the action ""move"" needs some conditions to be met before the hero can move:
1. **The rooms must be connected:** Just like you can't walk through a wall at home, the hero can only move to a room if there's a direct connection (like a doorway or a corridor).
2. **The hero must be in the current room:** The hero can only leave a room if he's actually in it.
3. **The current room shouldn’t have a trap that could hurt him.**
4. **The next room shouldn’t be destroyed:** The hero can't go into a room if it’s already been collapsed or destroyed (maybe from a previous adventure!).
5. **The next room shouldn’t have a trap or a monster:** This makes sure our hero doesn’t walk into new danger.

When the hero moves:
- **He is now in the next room:** Just like if you walk to another room in your house, you're then in that new room.
- **The room he left gets destroyed:** This might sound strange, but imagine if every time he left a room, the door magically closed and locked forever, so he can’t go back the same way.
- **He is no longer in the current room:** This is just confirming that he has moved on from the previous room.

These rules help our hero make smart moves through the dungeon, avoiding danger and making progress towards escape. This way of setting up the hero's actions makes sure he can navigate through the dungeon safely and eventually find his way out.","Parameters:
1. ?from - cells
2. ?to - cells

Preconditions:
```
(and
    (at-hero ?to)
    (connected ?from ?to)
    (at-hero ?from)
    (not (has-trap ?from))
    (not (is-destroyed ?to))
    (not (has-monster ?to))
)
```

Effects:
```
(and
    (not (has-trap ?to))
    (at-hero ?from)
    (is-destroyed ?from)
)
```
","(:action move
    :parameters (?from - cells ?to - cells)
    :precondition (and (connected ?from ?to) (at-hero ?from) (not (has-trap ?from)) (not (is-destroyed ?to)) (not (has-trap ?to)) (not (has-monster ?to)))
    :effect (and (at-hero ?to) (is-destroyed ?from) (not (at-hero ?from)))
)","swap (not (has-trap ?to)) with (at-hero ?to)
negate (not (at-hero ?from)) in effects
"
rpggame,move,0.4247657060623169,Hard Negative (Manipulated Action),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: The hero can **move** to an adjacent room (connected by a corridor) that has not been destroyed (i.e., the hero has not already visited the room). When this action is executed, the original cell get destroyed.

Action name: move


Your answer:

**Explanation:**

Imagine our hero in a big, scary dungeon, just like a character from a fairy tale or a video game. The dungeon has several rooms, and some rooms are safe while others have monsters or traps. The hero's goal is to escape from this dungeon, moving from one room to another until he finds the exit.

Now, let's talk about the action called ""move"" that our hero can take. The action ""move"" lets the hero go from one room (we'll call this the ""current room"") to a connected room (let's call this the ""next room""). Think of the dungeon like a big house with many doors connecting the rooms; the hero can only move through a door if it’s open and the room on the other side is safe.

In the PDDL (a kind of programming language for planning what actions to take), the action ""move"" needs some conditions to be met before the hero can move:
1. **The rooms must be connected:** Just like you can't walk through a wall at home, the hero can only move to a room if there's a direct connection (like a doorway or a corridor).
2. **The hero must be in the current room:** The hero can only leave a room if he's actually in it.
3. **The current room shouldn’t have a trap that could hurt him.**
4. **The next room shouldn’t be destroyed:** The hero can't go into a room if it’s already been collapsed or destroyed (maybe from a previous adventure!).
5. **The next room shouldn’t have a trap or a monster:** This makes sure our hero doesn’t walk into new danger.

When the hero moves:
- **He is now in the next room:** Just like if you walk to another room in your house, you're then in that new room.
- **The room he left gets destroyed:** This might sound strange, but imagine if every time he left a room, the door magically closed and locked forever, so he can’t go back the same way.
- **He is no longer in the current room:** This is just confirming that he has moved on from the previous room.

These rules help our hero make smart moves through the dungeon, avoiding danger and making progress towards escape. This way of setting up the hero's actions makes sure he can navigate through the dungeon safely and eventually find his way out.","Parameters:
1. ?from - cells
2. ?to - cells

Preconditions:
```
(and
    (is-destroyed ?from)
    (not (at-hero ?from))
    (at-hero ?from)
    (not (has-trap ?from))
    (not (is-destroyed ?to))
    (not (has-monster ?to))
)
```

Effects:
```
(and
    (connected ?from ?to)
    (not (has-trap ?to))
    (at-hero ?to)
)
```
","(:action move
    :parameters (?from - cells ?to - cells)
    :precondition (and (connected ?from ?to) (at-hero ?from) (not (has-trap ?from)) (not (is-destroyed ?to)) (not (has-trap ?to)) (not (has-monster ?to)))
    :effect (and (at-hero ?to) (is-destroyed ?from) (not (at-hero ?from)))
)","swap (connected ?from ?to) with (is-destroyed ?from)
swap (not (has-trap ?to)) with (not (at-hero ?from))
"
rpggame,move,0.7861345410346985,Hard Negative (Manipulated Action),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: The hero can **move** to an adjacent room (connected by a corridor) that has not been destroyed (i.e., the hero has not already visited the room). When this action is executed, the original cell get destroyed.

Action name: move


Your answer:
","**Explanation:**

Imagine our hero in a big, scary dungeon, just like a character from a fairy tale or a video game. The dungeon has several rooms, and some rooms are safe while others have monsters or traps. The hero's goal is to escape from this dungeon, moving from one room to another until he finds the exit.

Now, let's talk about the action called ""move"" that our hero can take. The action ""move"" lets the hero go from one room (we'll call this the ""current room"") to a connected room (let's call this the ""next room""). Think of the dungeon like a big house with many doors connecting the rooms; the hero can only move through a door if it’s open and the room on the other side is safe.

In the PDDL (a kind of programming language for planning what actions to take), the action ""move"" needs some conditions to be met before the hero can move:
1. **The rooms must be connected:** Just like you can't walk through a wall at home, the hero can only move to a room if there's a direct connection (like a doorway or a corridor).
2. **The hero must be in the current room:** The hero can only leave a room if he's actually in it.
3. **The current room shouldn’t have a trap that could hurt him.**
4. **The next room shouldn’t be destroyed:** The hero can't go into a room if it’s already been collapsed or destroyed (maybe from a previous adventure!).
5. **The next room shouldn’t have a trap or a monster:** This makes sure our hero doesn’t walk into new danger.

When the hero moves:
- **He is now in the next room:** Just like if you walk to another room in your house, you're then in that new room.
- **The room he left gets destroyed:** This might sound strange, but imagine if every time he left a room, the door magically closed and locked forever, so he can’t go back the same way.
- **He is no longer in the current room:** This is just confirming that he has moved on from the previous room.

These rules help our hero make smart moves through the dungeon, avoiding danger and making progress towards escape. This way of setting up the hero's actions makes sure he can navigate through the dungeon safely and eventually find his way out.
Parameters:
1. ?from - cells
2. ?to - cells

Preconditions:
```
(and
    (has-monster ?to)
    (is-destroyed ?from)
    (connected ?from ?to)
    (at-hero ?from)
    (not (has-trap ?from))
    (not (is-destroyed ?to))
)
```

Effects:
```
(and
    (not (has-trap ?to))
    (at-hero ?to)
    (not (at-hero ?from))
)
```
","(:action move
    :parameters (?from - cells ?to - cells)
    :precondition (and (connected ?from ?to) (at-hero ?from) (not (has-trap ?from)) (not (is-destroyed ?to)) (not (has-trap ?to)) (not (has-monster ?to)))
    :effect (and (at-hero ?to) (is-destroyed ?from) (not (at-hero ?from)))
)","negate (not (has-monster ?to)) in preconditions
swap (not (has-trap ?to)) with (is-destroyed ?from)
"
rpggame,move,0.7861345410346985,Hard Negative (Manipulated Action),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: The hero can **move** to an adjacent room (connected by a corridor) that has not been destroyed (i.e., the hero has not already visited the room). When this action is executed, the original cell get destroyed.

Action name: move


Your answer:
","**Explanation:**

Imagine our hero in a big, scary dungeon, just like a character from a fairy tale or a video game. The dungeon has several rooms, and some rooms are safe while others have monsters or traps. The hero's goal is to escape from this dungeon, moving from one room to another until he finds the exit.

Now, let's talk about the action called ""move"" that our hero can take. The action ""move"" lets the hero go from one room (we'll call this the ""current room"") to a connected room (let's call this the ""next room""). Think of the dungeon like a big house with many doors connecting the rooms; the hero can only move through a door if it’s open and the room on the other side is safe.

In the PDDL (a kind of programming language for planning what actions to take), the action ""move"" needs some conditions to be met before the hero can move:
1. **The rooms must be connected:** Just like you can't walk through a wall at home, the hero can only move to a room if there's a direct connection (like a doorway or a corridor).
2. **The hero must be in the current room:** The hero can only leave a room if he's actually in it.
3. **The current room shouldn’t have a trap that could hurt him.**
4. **The next room shouldn’t be destroyed:** The hero can't go into a room if it’s already been collapsed or destroyed (maybe from a previous adventure!).
5. **The next room shouldn’t have a trap or a monster:** This makes sure our hero doesn’t walk into new danger.

When the hero moves:
- **He is now in the next room:** Just like if you walk to another room in your house, you're then in that new room.
- **The room he left gets destroyed:** This might sound strange, but imagine if every time he left a room, the door magically closed and locked forever, so he can’t go back the same way.
- **He is no longer in the current room:** This is just confirming that he has moved on from the previous room.

These rules help our hero make smart moves through the dungeon, avoiding danger and making progress towards escape. This way of setting up the hero's actions makes sure he can navigate through the dungeon safely and eventually find his way out.
Parameters:
1. ?from - cells
2. ?to - cells

Preconditions:
```
(and
    (not (at-hero ?from))
    (at-hero ?to)
    (connected ?from ?to)
    (at-hero ?from)
    (not (has-trap ?to))
    (not (has-monster ?to))
)
```

Effects:
```
(and
    (not (has-trap ?from))
    (not (is-destroyed ?to))
    (is-destroyed ?from)
)
```
","(:action move
    :parameters (?from - cells ?to - cells)
    :precondition (and (connected ?from ?to) (at-hero ?from) (not (has-trap ?from)) (not (is-destroyed ?to)) (not (has-trap ?to)) (not (has-monster ?to)))
    :effect (and (at-hero ?to) (is-destroyed ?from) (not (at-hero ?from)))
)","swap (not (has-trap ?from)) with (not (at-hero ?from))
swap (not (is-destroyed ?to)) with (at-hero ?to)
"
rpggame,move,0.7861345410346985,Hard Negative (Manipulated Action),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: The hero can **move** to an adjacent room (connected by a corridor) that has not been destroyed (i.e., the hero has not already visited the room). When this action is executed, the original cell get destroyed.

Action name: move


Your answer:
","**Explanation:**

Imagine our hero in a big, scary dungeon, just like a character from a fairy tale or a video game. The dungeon has several rooms, and some rooms are safe while others have monsters or traps. The hero's goal is to escape from this dungeon, moving from one room to another until he finds the exit.

Now, let's talk about the action called ""move"" that our hero can take. The action ""move"" lets the hero go from one room (we'll call this the ""current room"") to a connected room (let's call this the ""next room""). Think of the dungeon like a big house with many doors connecting the rooms; the hero can only move through a door if it’s open and the room on the other side is safe.

In the PDDL (a kind of programming language for planning what actions to take), the action ""move"" needs some conditions to be met before the hero can move:
1. **The rooms must be connected:** Just like you can't walk through a wall at home, the hero can only move to a room if there's a direct connection (like a doorway or a corridor).
2. **The hero must be in the current room:** The hero can only leave a room if he's actually in it.
3. **The current room shouldn’t have a trap that could hurt him.**
4. **The next room shouldn’t be destroyed:** The hero can't go into a room if it’s already been collapsed or destroyed (maybe from a previous adventure!).
5. **The next room shouldn’t have a trap or a monster:** This makes sure our hero doesn’t walk into new danger.

When the hero moves:
- **He is now in the next room:** Just like if you walk to another room in your house, you're then in that new room.
- **The room he left gets destroyed:** This might sound strange, but imagine if every time he left a room, the door magically closed and locked forever, so he can’t go back the same way.
- **He is no longer in the current room:** This is just confirming that he has moved on from the previous room.

These rules help our hero make smart moves through the dungeon, avoiding danger and making progress towards escape. This way of setting up the hero's actions makes sure he can navigate through the dungeon safely and eventually find his way out.
Parameters:
1. ?from - cells
2. ?to - cells

Preconditions:
```
(and
    (at-hero ?to)
    (connected ?from ?to)
    (at-hero ?from)
    (not (has-trap ?from))
    (not (has-trap ?to))
    (not (has-monster ?to))
)
```

Effects:
```
(and
    (not (is-destroyed ?to))
    (at-hero ?from)
    (is-destroyed ?from)
)
```
","(:action move
    :parameters (?from - cells ?to - cells)
    :precondition (and (connected ?from ?to) (at-hero ?from) (not (has-trap ?from)) (not (is-destroyed ?to)) (not (has-trap ?to)) (not (has-monster ?to)))
    :effect (and (at-hero ?to) (is-destroyed ?from) (not (at-hero ?from)))
)","swap (not (is-destroyed ?to)) with (at-hero ?to)
negate (not (at-hero ?from)) in effects
"
rpggame,move,0.7861345410346985,Hard Negative (Manipulated Action),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: The hero can **move** to an adjacent room (connected by a corridor) that has not been destroyed (i.e., the hero has not already visited the room). When this action is executed, the original cell get destroyed.

Action name: move


Your answer:
","**Explanation:**

Imagine our hero in a big, scary dungeon, just like a character from a fairy tale or a video game. The dungeon has several rooms, and some rooms are safe while others have monsters or traps. The hero's goal is to escape from this dungeon, moving from one room to another until he finds the exit.

Now, let's talk about the action called ""move"" that our hero can take. The action ""move"" lets the hero go from one room (we'll call this the ""current room"") to a connected room (let's call this the ""next room""). Think of the dungeon like a big house with many doors connecting the rooms; the hero can only move through a door if it’s open and the room on the other side is safe.

In the PDDL (a kind of programming language for planning what actions to take), the action ""move"" needs some conditions to be met before the hero can move:
1. **The rooms must be connected:** Just like you can't walk through a wall at home, the hero can only move to a room if there's a direct connection (like a doorway or a corridor).
2. **The hero must be in the current room:** The hero can only leave a room if he's actually in it.
3. **The current room shouldn’t have a trap that could hurt him.**
4. **The next room shouldn’t be destroyed:** The hero can't go into a room if it’s already been collapsed or destroyed (maybe from a previous adventure!).
5. **The next room shouldn’t have a trap or a monster:** This makes sure our hero doesn’t walk into new danger.

When the hero moves:
- **He is now in the next room:** Just like if you walk to another room in your house, you're then in that new room.
- **The room he left gets destroyed:** This might sound strange, but imagine if every time he left a room, the door magically closed and locked forever, so he can’t go back the same way.
- **He is no longer in the current room:** This is just confirming that he has moved on from the previous room.

These rules help our hero make smart moves through the dungeon, avoiding danger and making progress towards escape. This way of setting up the hero's actions makes sure he can navigate through the dungeon safely and eventually find his way out.
Parameters:
1. ?from - cells
2. ?to - cells

Preconditions:
```
(and
    (connected ?from ?to)
    (at-hero ?from)
    (not (has-trap ?from))
    (not (is-destroyed ?to))
    (not (has-trap ?to))
    (not (has-monster ?to))
)
```

Effects:
```
(and
    (not (at-hero ?to))
    (is-destroyed ?from)
    (not (at-hero ?from))
)
```
","(:action move
    :parameters (?from - cells ?to - cells)
    :precondition (and (connected ?from ?to) (at-hero ?from) (not (has-trap ?from)) (not (is-destroyed ?to)) (not (has-trap ?to)) (not (has-monster ?to)))
    :effect (and (at-hero ?to) (is-destroyed ?from) (not (at-hero ?from)))
)","negate (at-hero ?to) in effects
"
rpggame,move,0.7861345410346985,Hard Negative (Manipulated Action),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: The hero can **move** to an adjacent room (connected by a corridor) that has not been destroyed (i.e., the hero has not already visited the room). When this action is executed, the original cell get destroyed.

Action name: move


Your answer:
","**Explanation:**

Imagine our hero in a big, scary dungeon, just like a character from a fairy tale or a video game. The dungeon has several rooms, and some rooms are safe while others have monsters or traps. The hero's goal is to escape from this dungeon, moving from one room to another until he finds the exit.

Now, let's talk about the action called ""move"" that our hero can take. The action ""move"" lets the hero go from one room (we'll call this the ""current room"") to a connected room (let's call this the ""next room""). Think of the dungeon like a big house with many doors connecting the rooms; the hero can only move through a door if it’s open and the room on the other side is safe.

In the PDDL (a kind of programming language for planning what actions to take), the action ""move"" needs some conditions to be met before the hero can move:
1. **The rooms must be connected:** Just like you can't walk through a wall at home, the hero can only move to a room if there's a direct connection (like a doorway or a corridor).
2. **The hero must be in the current room:** The hero can only leave a room if he's actually in it.
3. **The current room shouldn’t have a trap that could hurt him.**
4. **The next room shouldn’t be destroyed:** The hero can't go into a room if it’s already been collapsed or destroyed (maybe from a previous adventure!).
5. **The next room shouldn’t have a trap or a monster:** This makes sure our hero doesn’t walk into new danger.

When the hero moves:
- **He is now in the next room:** Just like if you walk to another room in your house, you're then in that new room.
- **The room he left gets destroyed:** This might sound strange, but imagine if every time he left a room, the door magically closed and locked forever, so he can’t go back the same way.
- **He is no longer in the current room:** This is just confirming that he has moved on from the previous room.

These rules help our hero make smart moves through the dungeon, avoiding danger and making progress towards escape. This way of setting up the hero's actions makes sure he can navigate through the dungeon safely and eventually find his way out.
Parameters:
1. ?from - cells
2. ?to - cells

Preconditions:
```
(and
    (connected ?from ?to)
    (at-hero ?from)
    (not (has-trap ?from))
    (not (has-trap ?to))
    (not (has-monster ?to))
)
```

Effects:
```
(and
    (at-hero ?to)
    (is-destroyed ?from)
)
```
","(:action move
    :parameters (?from - cells ?to - cells)
    :precondition (and (connected ?from ?to) (at-hero ?from) (not (has-trap ?from)) (not (is-destroyed ?to)) (not (has-trap ?to)) (not (has-monster ?to)))
    :effect (and (at-hero ?to) (is-destroyed ?from) (not (at-hero ?from)))
)","remove (not (is-destroyed ?to)) from preconditions
remove (not (at-hero ?from)) from effects
"
rpggame,move,0.7861345410346985,Hard Negative (Manipulated Action),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: The hero can **move** to an adjacent room (connected by a corridor) that has not been destroyed (i.e., the hero has not already visited the room). When this action is executed, the original cell get destroyed.

Action name: move


Your answer:
","**Explanation:**

Imagine our hero in a big, scary dungeon, just like a character from a fairy tale or a video game. The dungeon has several rooms, and some rooms are safe while others have monsters or traps. The hero's goal is to escape from this dungeon, moving from one room to another until he finds the exit.

Now, let's talk about the action called ""move"" that our hero can take. The action ""move"" lets the hero go from one room (we'll call this the ""current room"") to a connected room (let's call this the ""next room""). Think of the dungeon like a big house with many doors connecting the rooms; the hero can only move through a door if it’s open and the room on the other side is safe.

In the PDDL (a kind of programming language for planning what actions to take), the action ""move"" needs some conditions to be met before the hero can move:
1. **The rooms must be connected:** Just like you can't walk through a wall at home, the hero can only move to a room if there's a direct connection (like a doorway or a corridor).
2. **The hero must be in the current room:** The hero can only leave a room if he's actually in it.
3. **The current room shouldn’t have a trap that could hurt him.**
4. **The next room shouldn’t be destroyed:** The hero can't go into a room if it’s already been collapsed or destroyed (maybe from a previous adventure!).
5. **The next room shouldn’t have a trap or a monster:** This makes sure our hero doesn’t walk into new danger.

When the hero moves:
- **He is now in the next room:** Just like if you walk to another room in your house, you're then in that new room.
- **The room he left gets destroyed:** This might sound strange, but imagine if every time he left a room, the door magically closed and locked forever, so he can’t go back the same way.
- **He is no longer in the current room:** This is just confirming that he has moved on from the previous room.

These rules help our hero make smart moves through the dungeon, avoiding danger and making progress towards escape. This way of setting up the hero's actions makes sure he can navigate through the dungeon safely and eventually find his way out.
Parameters:
1. ?from - cells
2. ?to - cells

Preconditions:
```
(and
    (connected ?from ?to)
    (at-hero ?from)
    (not (has-trap ?from))
    (not (is-destroyed ?to))
    (not (has-trap ?to))
    (not (has-monster ?to))
)
```

Effects:
```
(and
    (at-hero ?from)
    (at-hero ?to)
    (is-destroyed ?from)
)
```
","(:action move
    :parameters (?from - cells ?to - cells)
    :precondition (and (connected ?from ?to) (at-hero ?from) (not (has-trap ?from)) (not (is-destroyed ?to)) (not (has-trap ?to)) (not (has-monster ?to)))
    :effect (and (at-hero ?to) (is-destroyed ?from) (not (at-hero ?from)))
)","negate (not (at-hero ?from)) in effects
"
rpggame,move,0.7861345410346985,Hard Negative (Manipulated Action),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: The hero can **move** to an adjacent room (connected by a corridor) that has not been destroyed (i.e., the hero has not already visited the room). When this action is executed, the original cell get destroyed.

Action name: move


Your answer:
","**Explanation:**

Imagine our hero in a big, scary dungeon, just like a character from a fairy tale or a video game. The dungeon has several rooms, and some rooms are safe while others have monsters or traps. The hero's goal is to escape from this dungeon, moving from one room to another until he finds the exit.

Now, let's talk about the action called ""move"" that our hero can take. The action ""move"" lets the hero go from one room (we'll call this the ""current room"") to a connected room (let's call this the ""next room""). Think of the dungeon like a big house with many doors connecting the rooms; the hero can only move through a door if it’s open and the room on the other side is safe.

In the PDDL (a kind of programming language for planning what actions to take), the action ""move"" needs some conditions to be met before the hero can move:
1. **The rooms must be connected:** Just like you can't walk through a wall at home, the hero can only move to a room if there's a direct connection (like a doorway or a corridor).
2. **The hero must be in the current room:** The hero can only leave a room if he's actually in it.
3. **The current room shouldn’t have a trap that could hurt him.**
4. **The next room shouldn’t be destroyed:** The hero can't go into a room if it’s already been collapsed or destroyed (maybe from a previous adventure!).
5. **The next room shouldn’t have a trap or a monster:** This makes sure our hero doesn’t walk into new danger.

When the hero moves:
- **He is now in the next room:** Just like if you walk to another room in your house, you're then in that new room.
- **The room he left gets destroyed:** This might sound strange, but imagine if every time he left a room, the door magically closed and locked forever, so he can’t go back the same way.
- **He is no longer in the current room:** This is just confirming that he has moved on from the previous room.

These rules help our hero make smart moves through the dungeon, avoiding danger and making progress towards escape. This way of setting up the hero's actions makes sure he can navigate through the dungeon safely and eventually find his way out.
Parameters:
1. ?from - cells
2. ?to - cells

Preconditions:
```
(and
    (has-monster ?to)
    (not (at-hero ?from))
    (connected ?from ?to)
    (at-hero ?from)
    (not (has-trap ?from))
    (not (is-destroyed ?to))
)
```

Effects:
```
(and
    (not (has-trap ?to))
    (at-hero ?to)
    (is-destroyed ?from)
)
```
","(:action move
    :parameters (?from - cells ?to - cells)
    :precondition (and (connected ?from ?to) (at-hero ?from) (not (has-trap ?from)) (not (is-destroyed ?to)) (not (has-trap ?to)) (not (has-monster ?to)))
    :effect (and (at-hero ?to) (is-destroyed ?from) (not (at-hero ?from)))
)","negate (not (has-monster ?to)) in preconditions
swap (not (has-trap ?to)) with (not (at-hero ?from))
"
rpggame,move,0.7861345410346985,Hard Negative (Manipulated Action),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: The hero can **move** to an adjacent room (connected by a corridor) that has not been destroyed (i.e., the hero has not already visited the room). When this action is executed, the original cell get destroyed.

Action name: move


Your answer:
","**Explanation:**

Imagine our hero in a big, scary dungeon, just like a character from a fairy tale or a video game. The dungeon has several rooms, and some rooms are safe while others have monsters or traps. The hero's goal is to escape from this dungeon, moving from one room to another until he finds the exit.

Now, let's talk about the action called ""move"" that our hero can take. The action ""move"" lets the hero go from one room (we'll call this the ""current room"") to a connected room (let's call this the ""next room""). Think of the dungeon like a big house with many doors connecting the rooms; the hero can only move through a door if it’s open and the room on the other side is safe.

In the PDDL (a kind of programming language for planning what actions to take), the action ""move"" needs some conditions to be met before the hero can move:
1. **The rooms must be connected:** Just like you can't walk through a wall at home, the hero can only move to a room if there's a direct connection (like a doorway or a corridor).
2. **The hero must be in the current room:** The hero can only leave a room if he's actually in it.
3. **The current room shouldn’t have a trap that could hurt him.**
4. **The next room shouldn’t be destroyed:** The hero can't go into a room if it’s already been collapsed or destroyed (maybe from a previous adventure!).
5. **The next room shouldn’t have a trap or a monster:** This makes sure our hero doesn’t walk into new danger.

When the hero moves:
- **He is now in the next room:** Just like if you walk to another room in your house, you're then in that new room.
- **The room he left gets destroyed:** This might sound strange, but imagine if every time he left a room, the door magically closed and locked forever, so he can’t go back the same way.
- **He is no longer in the current room:** This is just confirming that he has moved on from the previous room.

These rules help our hero make smart moves through the dungeon, avoiding danger and making progress towards escape. This way of setting up the hero's actions makes sure he can navigate through the dungeon safely and eventually find his way out.
Parameters:
1. ?from - cells
2. ?to - cells

Preconditions:
```
(and
    (is-destroyed ?from)
    (at-hero ?from)
    (not (has-trap ?from))
    (not (is-destroyed ?to))
    (not (has-trap ?to))
    (not (has-monster ?to))
)
```

Effects:
```
(and
    (connected ?from ?to)
    (at-hero ?to)
    (not (at-hero ?from))
)
```
","(:action move
    :parameters (?from - cells ?to - cells)
    :precondition (and (connected ?from ?to) (at-hero ?from) (not (has-trap ?from)) (not (is-destroyed ?to)) (not (has-trap ?to)) (not (has-monster ?to)))
    :effect (and (at-hero ?to) (is-destroyed ?from) (not (at-hero ?from)))
)","swap (connected ?from ?to) with (is-destroyed ?from)
"
rpggame,move,0.7861345410346985,Hard Negative (Manipulated Action),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: The hero can **move** to an adjacent room (connected by a corridor) that has not been destroyed (i.e., the hero has not already visited the room). When this action is executed, the original cell get destroyed.

Action name: move


Your answer:
","**Explanation:**

Imagine our hero in a big, scary dungeon, just like a character from a fairy tale or a video game. The dungeon has several rooms, and some rooms are safe while others have monsters or traps. The hero's goal is to escape from this dungeon, moving from one room to another until he finds the exit.

Now, let's talk about the action called ""move"" that our hero can take. The action ""move"" lets the hero go from one room (we'll call this the ""current room"") to a connected room (let's call this the ""next room""). Think of the dungeon like a big house with many doors connecting the rooms; the hero can only move through a door if it’s open and the room on the other side is safe.

In the PDDL (a kind of programming language for planning what actions to take), the action ""move"" needs some conditions to be met before the hero can move:
1. **The rooms must be connected:** Just like you can't walk through a wall at home, the hero can only move to a room if there's a direct connection (like a doorway or a corridor).
2. **The hero must be in the current room:** The hero can only leave a room if he's actually in it.
3. **The current room shouldn’t have a trap that could hurt him.**
4. **The next room shouldn’t be destroyed:** The hero can't go into a room if it’s already been collapsed or destroyed (maybe from a previous adventure!).
5. **The next room shouldn’t have a trap or a monster:** This makes sure our hero doesn’t walk into new danger.

When the hero moves:
- **He is now in the next room:** Just like if you walk to another room in your house, you're then in that new room.
- **The room he left gets destroyed:** This might sound strange, but imagine if every time he left a room, the door magically closed and locked forever, so he can’t go back the same way.
- **He is no longer in the current room:** This is just confirming that he has moved on from the previous room.

These rules help our hero make smart moves through the dungeon, avoiding danger and making progress towards escape. This way of setting up the hero's actions makes sure he can navigate through the dungeon safely and eventually find his way out.
Parameters:
1. ?from - cells
2. ?to - cells

Preconditions:
```
(and
    (at-hero ?to)
    (connected ?from ?to)
    (at-hero ?from)
    (not (has-trap ?from))
    (not (has-trap ?to))
    (not (has-monster ?to))
)
```

Effects:
```
(and
    (not (is-destroyed ?to))
    (is-destroyed ?from)
    (not (at-hero ?from))
)
```
","(:action move
    :parameters (?from - cells ?to - cells)
    :precondition (and (connected ?from ?to) (at-hero ?from) (not (has-trap ?from)) (not (is-destroyed ?to)) (not (has-trap ?to)) (not (has-monster ?to)))
    :effect (and (at-hero ?to) (is-destroyed ?from) (not (at-hero ?from)))
)","swap (not (is-destroyed ?to)) with (at-hero ?to)
"
rpggame,move,0.7861345410346985,Hard Negative (Manipulated Action),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: The hero can **move** to an adjacent room (connected by a corridor) that has not been destroyed (i.e., the hero has not already visited the room). When this action is executed, the original cell get destroyed.

Action name: move


Your answer:
","**Explanation:**

Imagine our hero in a big, scary dungeon, just like a character from a fairy tale or a video game. The dungeon has several rooms, and some rooms are safe while others have monsters or traps. The hero's goal is to escape from this dungeon, moving from one room to another until he finds the exit.

Now, let's talk about the action called ""move"" that our hero can take. The action ""move"" lets the hero go from one room (we'll call this the ""current room"") to a connected room (let's call this the ""next room""). Think of the dungeon like a big house with many doors connecting the rooms; the hero can only move through a door if it’s open and the room on the other side is safe.

In the PDDL (a kind of programming language for planning what actions to take), the action ""move"" needs some conditions to be met before the hero can move:
1. **The rooms must be connected:** Just like you can't walk through a wall at home, the hero can only move to a room if there's a direct connection (like a doorway or a corridor).
2. **The hero must be in the current room:** The hero can only leave a room if he's actually in it.
3. **The current room shouldn’t have a trap that could hurt him.**
4. **The next room shouldn’t be destroyed:** The hero can't go into a room if it’s already been collapsed or destroyed (maybe from a previous adventure!).
5. **The next room shouldn’t have a trap or a monster:** This makes sure our hero doesn’t walk into new danger.

When the hero moves:
- **He is now in the next room:** Just like if you walk to another room in your house, you're then in that new room.
- **The room he left gets destroyed:** This might sound strange, but imagine if every time he left a room, the door magically closed and locked forever, so he can’t go back the same way.
- **He is no longer in the current room:** This is just confirming that he has moved on from the previous room.

These rules help our hero make smart moves through the dungeon, avoiding danger and making progress towards escape. This way of setting up the hero's actions makes sure he can navigate through the dungeon safely and eventually find his way out.
Parameters:
1. ?from - cells
2. ?to - cells

Preconditions:
```
(and
    (connected ?from ?to)
    (at-hero ?from)
    (not (is-destroyed ?to))
    (not (has-trap ?to))
    (not (has-monster ?to))
)
```

Effects:
```
(and
    (at-hero ?to)
    (not (at-hero ?from))
)
```
","(:action move
    :parameters (?from - cells ?to - cells)
    :precondition (and (connected ?from ?to) (at-hero ?from) (not (has-trap ?from)) (not (is-destroyed ?to)) (not (has-trap ?to)) (not (has-monster ?to)))
    :effect (and (at-hero ?to) (is-destroyed ?from) (not (at-hero ?from)))
)","remove (not (has-trap ?from)) from preconditions
remove (is-destroyed ?from) from effects
"
rpggame,pick-sword,0.3123786151409149,Positive (Correct Match),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: **Pickup** the sword if present in the room the hero is currently in and the hero is empty handed

Action name: pick-sword


Your answer:
","Parameters:
1. ?loc - cells
2. ?s - swords

Preconditions:
```
(and
    (at-hero ?loc)
    (at-sword ?s ?loc)
    (arm-free)
)
```

Effects:
```
(and
    (holding ?s)
    (not (at-sword ?s ?loc))
    (not (arm-free))
)
```
","(:action pick-sword
    :parameters (?loc - cells ?s - swords)
    :precondition (and (at-hero ?loc) (at-sword ?s ?loc) (arm-free))
    :effect (and (holding ?s) (not (at-sword ?s ?loc)) (not (arm-free)))
)",
rpggame,pick-sword,0.3123786151409149,Positive (Correct Match),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: **Pickup** the sword if present in the room the hero is currently in and the hero is empty handed

Action name: pick-sword


Your answer:

**Explanation:**

Imagine you're helping a hero navigate through a tricky dungeon filled with different challenges. The hero's objective is to escape, but along the way, they might find useful items like swords that can help protect against monsters.

In our scenario, the action of picking up a sword is crucial. Let's think of it like this: if you enter a room and see a sword on the floor while your hands are free, you can pick it up. The action schema in PDDL, which is a way to represent planning problems, explains this in a structured format.

The preconditions for our action ""pick-sword"" are:
1. **The hero must be in the same room as the sword** (represented as `(at-hero ?loc)` and `(at-sword ?s ?loc)`). This makes sense because you can't pick up something that's not in the same room as you.
2. **The hero's hand must be free** (`(arm-free)`). Just like you can't hold two grocery bags in one hand easily, our hero needs a free hand to pick up the sword.

The effects after the hero picks up the sword are:
1. **The hero is now holding the sword** (`(holding ?s)`). This indicates that the hero has successfully picked up the sword.
2. **The sword is no longer in its original place** (`(not (at-sword ?s ?loc))`). Just like if you take an apple from a basket, the apple isn't in the basket anymore.
3. **The hero's hand is no longer free** (`(not (arm-free))`). Holding the sword means the hand that was free is now occupied.

This action schema is a simple way to model the interaction between the hero and the sword in the dungeon. It helps ensure that all necessary conditions are met before the action takes place, making the hero's journey through the dungeon logical and structured. This way, the hero doesn't magically have a sword without picking it up or has two items in one hand, which keeps our dungeon adventure realistic and understandable.","Parameters:
1. ?loc - cells
2. ?s - swords

Preconditions:
```
(and
    (at-hero ?loc)
    (at-sword ?s ?loc)
    (arm-free)
)
```

Effects:
```
(and
    (holding ?s)
    (not (at-sword ?s ?loc))
    (not (arm-free))
)
```
","(:action pick-sword
    :parameters (?loc - cells ?s - swords)
    :precondition (and (at-hero ?loc) (at-sword ?s ?loc) (arm-free))
    :effect (and (holding ?s) (not (at-sword ?s ?loc)) (not (arm-free)))
)",
rpggame,pick-sword,0.4962548613548279,Positive (Correct Match),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: **Pickup** the sword if present in the room the hero is currently in and the hero is empty handed

Action name: pick-sword


Your answer:
","**Explanation:**

Imagine you're helping a hero navigate through a tricky dungeon filled with different challenges. The hero's objective is to escape, but along the way, they might find useful items like swords that can help protect against monsters.

In our scenario, the action of picking up a sword is crucial. Let's think of it like this: if you enter a room and see a sword on the floor while your hands are free, you can pick it up. The action schema in PDDL, which is a way to represent planning problems, explains this in a structured format.

The preconditions for our action ""pick-sword"" are:
1. **The hero must be in the same room as the sword** (represented as `(at-hero ?loc)` and `(at-sword ?s ?loc)`). This makes sense because you can't pick up something that's not in the same room as you.
2. **The hero's hand must be free** (`(arm-free)`). Just like you can't hold two grocery bags in one hand easily, our hero needs a free hand to pick up the sword.

The effects after the hero picks up the sword are:
1. **The hero is now holding the sword** (`(holding ?s)`). This indicates that the hero has successfully picked up the sword.
2. **The sword is no longer in its original place** (`(not (at-sword ?s ?loc))`). Just like if you take an apple from a basket, the apple isn't in the basket anymore.
3. **The hero's hand is no longer free** (`(not (arm-free))`). Holding the sword means the hand that was free is now occupied.

This action schema is a simple way to model the interaction between the hero and the sword in the dungeon. It helps ensure that all necessary conditions are met before the action takes place, making the hero's journey through the dungeon logical and structured. This way, the hero doesn't magically have a sword without picking it up or has two items in one hand, which keeps our dungeon adventure realistic and understandable.
Parameters:
1. ?loc - cells
2. ?s - swords

Preconditions:
```
(and
    (at-hero ?loc)
    (at-sword ?s ?loc)
    (arm-free)
)
```

Effects:
```
(and
    (holding ?s)
    (not (at-sword ?s ?loc))
    (not (arm-free))
)
```
","(:action pick-sword
    :parameters (?loc - cells ?s - swords)
    :precondition (and (at-hero ?loc) (at-sword ?s ?loc) (arm-free))
    :effect (and (holding ?s) (not (at-sword ?s ?loc)) (not (arm-free)))
)",
rpggame,pick-sword,0.12457382678985596,Easy Negative (Inter-Domain Mismatch),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: **Pickup** the sword if present in the room the hero is currently in and the hero is empty handed

Action name: pick-sword


Your answer:
","Parameters:
1. ?x - book
2. ?y - book
3. ?cat - category

Preconditions:
```
(and
    (on-shelf ?x ?y)
    (accessible ?x)
    (hands-free)
    (belongs-to-category ?x ?cat)
)
```

Effects:
```
(and
    (holding ?x)
    (accessible ?y)
    (not (accessible ?x))
    (not (hands-free))
    (not (on-shelf ?x ?y))
    (shelf-empty ?cat)
)
```
","(:action pick-sword
    :parameters (?loc - cells ?s - swords)
    :precondition (and (at-hero ?loc) (at-sword ?s ?loc) (arm-free))
    :effect (and (holding ?s) (not (at-sword ?s ?loc)) (not (arm-free)))
)",
rpggame,pick-sword,0.03546389192342758,Easy Negative (Inter-Domain Mismatch),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: **Pickup** the sword if present in the room the hero is currently in and the hero is empty handed

Action name: pick-sword


Your answer:
","Parameters:
1. ?x - book

Preconditions:
```
(holding ?x)
```

Effects:
```
(and
    (not (holding ?x))
    (accessible ?x)
    (hands-free)
    (on-table ?x)
)
```
","(:action pick-sword
    :parameters (?loc - cells ?s - swords)
    :precondition (and (at-hero ?loc) (at-sword ?s ?loc) (arm-free))
    :effect (and (holding ?s) (not (at-sword ?s ?loc)) (not (arm-free)))
)",
rpggame,pick-sword,0.1453760266304016,Easy Negative (Inter-Domain Mismatch),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: **Pickup** the sword if present in the room the hero is currently in and the hero is empty handed

Action name: pick-sword


Your answer:
","Parameters:
1. ?x - book

Preconditions:
```
(and
    (accessible ?x)
    (not (checked-out ?x))
)
```

Effects:
```
(and
    (checked-out ?x)
    (not (accessible ?x))
    (book-request ?x)
    (return-due ?x)
)
```
","(:action pick-sword
    :parameters (?loc - cells ?s - swords)
    :precondition (and (at-hero ?loc) (at-sword ?s ?loc) (arm-free))
    :effect (and (holding ?s) (not (at-sword ?s ?loc)) (not (arm-free)))
)",
rpggame,pick-sword,0.07697039097547531,Easy Negative (Inter-Domain Mismatch),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: **Pickup** the sword if present in the room the hero is currently in and the hero is empty handed

Action name: pick-sword


Your answer:
","Parameters:
1. ?x - book

Preconditions:
```
(and
    (checked-out ?x)
    (holding ?x)
)
```

Effects:
```
(and
    (not (checked-out ?x))
    (not (holding ?x))
    (not (book-request ?x))
    (not (return-due ?x))
    (accessible ?x)
    (hands-free)
)
```
","(:action pick-sword
    :parameters (?loc - cells ?s - swords)
    :precondition (and (at-hero ?loc) (at-sword ?s ?loc) (arm-free))
    :effect (and (holding ?s) (not (at-sword ?s ?loc)) (not (arm-free)))
)",
rpggame,pick-sword,0.10417857021093369,Easy Negative (Inter-Domain Mismatch),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: **Pickup** the sword if present in the room the hero is currently in and the hero is empty handed

Action name: pick-sword


Your answer:
","Parameters:
1. ?x - book

Preconditions:
```
(and
    (accessible ?x)
    (on-table ?x)
    (hands-free)
)
```

Effects:
```
(and
    (not (on-table ?x))
    (not (accessible ?x))
    (not (hands-free))
    (holding ?x)
)
```
","(:action pick-sword
    :parameters (?loc - cells ?s - swords)
    :precondition (and (at-hero ?loc) (at-sword ?s ?loc) (arm-free))
    :effect (and (holding ?s) (not (at-sword ?s ?loc)) (not (arm-free)))
)",
rpggame,pick-sword,0.1758420765399933,Easy Negative (Inter-Domain Mismatch),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: **Pickup** the sword if present in the room the hero is currently in and the hero is empty handed

Action name: pick-sword


Your answer:
","Parameters:
1. ?x - book
2. ?y - book
3. ?cat - category

Preconditions:
```
(and
    (holding ?x)
    (accessible ?y)
    (belongs-to-category ?x ?cat)
    (not (shelf-overflow ?cat))
)
```

Effects:
```
(and
    (not (holding ?x))
    (not (accessible ?y))
    (accessible ?x)
    (hands-free)
    (on-shelf ?x ?y)
    (shelf-empty ?cat)
)
```
","(:action pick-sword
    :parameters (?loc - cells ?s - swords)
    :precondition (and (at-hero ?loc) (at-sword ?s ?loc) (arm-free))
    :effect (and (holding ?s) (not (at-sword ?s ?loc)) (not (arm-free)))
)",
rpggame,pick-sword,0.12457382678985596,Easy Negative (Inter-Domain Mismatch),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: **Pickup** the sword if present in the room the hero is currently in and the hero is empty handed

Action name: pick-sword


Your answer:

**Explanation:**

Imagine you're helping a hero navigate through a tricky dungeon filled with different challenges. The hero's objective is to escape, but along the way, they might find useful items like swords that can help protect against monsters.

In our scenario, the action of picking up a sword is crucial. Let's think of it like this: if you enter a room and see a sword on the floor while your hands are free, you can pick it up. The action schema in PDDL, which is a way to represent planning problems, explains this in a structured format.

The preconditions for our action ""pick-sword"" are:
1. **The hero must be in the same room as the sword** (represented as `(at-hero ?loc)` and `(at-sword ?s ?loc)`). This makes sense because you can't pick up something that's not in the same room as you.
2. **The hero's hand must be free** (`(arm-free)`). Just like you can't hold two grocery bags in one hand easily, our hero needs a free hand to pick up the sword.

The effects after the hero picks up the sword are:
1. **The hero is now holding the sword** (`(holding ?s)`). This indicates that the hero has successfully picked up the sword.
2. **The sword is no longer in its original place** (`(not (at-sword ?s ?loc))`). Just like if you take an apple from a basket, the apple isn't in the basket anymore.
3. **The hero's hand is no longer free** (`(not (arm-free))`). Holding the sword means the hand that was free is now occupied.

This action schema is a simple way to model the interaction between the hero and the sword in the dungeon. It helps ensure that all necessary conditions are met before the action takes place, making the hero's journey through the dungeon logical and structured. This way, the hero doesn't magically have a sword without picking it up or has two items in one hand, which keeps our dungeon adventure realistic and understandable.","Parameters:
1. ?x - book
2. ?y - book
3. ?cat - category

Preconditions:
```
(and
    (on-shelf ?x ?y)
    (accessible ?x)
    (hands-free)
    (belongs-to-category ?x ?cat)
)
```

Effects:
```
(and
    (holding ?x)
    (accessible ?y)
    (not (accessible ?x))
    (not (hands-free))
    (not (on-shelf ?x ?y))
    (shelf-empty ?cat)
)
```
","(:action pick-sword
    :parameters (?loc - cells ?s - swords)
    :precondition (and (at-hero ?loc) (at-sword ?s ?loc) (arm-free))
    :effect (and (holding ?s) (not (at-sword ?s ?loc)) (not (arm-free)))
)",
rpggame,pick-sword,0.03546389192342758,Easy Negative (Inter-Domain Mismatch),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: **Pickup** the sword if present in the room the hero is currently in and the hero is empty handed

Action name: pick-sword


Your answer:

**Explanation:**

Imagine you're helping a hero navigate through a tricky dungeon filled with different challenges. The hero's objective is to escape, but along the way, they might find useful items like swords that can help protect against monsters.

In our scenario, the action of picking up a sword is crucial. Let's think of it like this: if you enter a room and see a sword on the floor while your hands are free, you can pick it up. The action schema in PDDL, which is a way to represent planning problems, explains this in a structured format.

The preconditions for our action ""pick-sword"" are:
1. **The hero must be in the same room as the sword** (represented as `(at-hero ?loc)` and `(at-sword ?s ?loc)`). This makes sense because you can't pick up something that's not in the same room as you.
2. **The hero's hand must be free** (`(arm-free)`). Just like you can't hold two grocery bags in one hand easily, our hero needs a free hand to pick up the sword.

The effects after the hero picks up the sword are:
1. **The hero is now holding the sword** (`(holding ?s)`). This indicates that the hero has successfully picked up the sword.
2. **The sword is no longer in its original place** (`(not (at-sword ?s ?loc))`). Just like if you take an apple from a basket, the apple isn't in the basket anymore.
3. **The hero's hand is no longer free** (`(not (arm-free))`). Holding the sword means the hand that was free is now occupied.

This action schema is a simple way to model the interaction between the hero and the sword in the dungeon. It helps ensure that all necessary conditions are met before the action takes place, making the hero's journey through the dungeon logical and structured. This way, the hero doesn't magically have a sword without picking it up or has two items in one hand, which keeps our dungeon adventure realistic and understandable.","Parameters:
1. ?x - book

Preconditions:
```
(holding ?x)
```

Effects:
```
(and
    (not (holding ?x))
    (accessible ?x)
    (hands-free)
    (on-table ?x)
)
```
","(:action pick-sword
    :parameters (?loc - cells ?s - swords)
    :precondition (and (at-hero ?loc) (at-sword ?s ?loc) (arm-free))
    :effect (and (holding ?s) (not (at-sword ?s ?loc)) (not (arm-free)))
)",
rpggame,pick-sword,0.1453760266304016,Easy Negative (Inter-Domain Mismatch),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: **Pickup** the sword if present in the room the hero is currently in and the hero is empty handed

Action name: pick-sword


Your answer:

**Explanation:**

Imagine you're helping a hero navigate through a tricky dungeon filled with different challenges. The hero's objective is to escape, but along the way, they might find useful items like swords that can help protect against monsters.

In our scenario, the action of picking up a sword is crucial. Let's think of it like this: if you enter a room and see a sword on the floor while your hands are free, you can pick it up. The action schema in PDDL, which is a way to represent planning problems, explains this in a structured format.

The preconditions for our action ""pick-sword"" are:
1. **The hero must be in the same room as the sword** (represented as `(at-hero ?loc)` and `(at-sword ?s ?loc)`). This makes sense because you can't pick up something that's not in the same room as you.
2. **The hero's hand must be free** (`(arm-free)`). Just like you can't hold two grocery bags in one hand easily, our hero needs a free hand to pick up the sword.

The effects after the hero picks up the sword are:
1. **The hero is now holding the sword** (`(holding ?s)`). This indicates that the hero has successfully picked up the sword.
2. **The sword is no longer in its original place** (`(not (at-sword ?s ?loc))`). Just like if you take an apple from a basket, the apple isn't in the basket anymore.
3. **The hero's hand is no longer free** (`(not (arm-free))`). Holding the sword means the hand that was free is now occupied.

This action schema is a simple way to model the interaction between the hero and the sword in the dungeon. It helps ensure that all necessary conditions are met before the action takes place, making the hero's journey through the dungeon logical and structured. This way, the hero doesn't magically have a sword without picking it up or has two items in one hand, which keeps our dungeon adventure realistic and understandable.","Parameters:
1. ?x - book

Preconditions:
```
(and
    (accessible ?x)
    (not (checked-out ?x))
)
```

Effects:
```
(and
    (checked-out ?x)
    (not (accessible ?x))
    (book-request ?x)
    (return-due ?x)
)
```
","(:action pick-sword
    :parameters (?loc - cells ?s - swords)
    :precondition (and (at-hero ?loc) (at-sword ?s ?loc) (arm-free))
    :effect (and (holding ?s) (not (at-sword ?s ?loc)) (not (arm-free)))
)",
rpggame,pick-sword,0.07697039097547531,Easy Negative (Inter-Domain Mismatch),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: **Pickup** the sword if present in the room the hero is currently in and the hero is empty handed

Action name: pick-sword


Your answer:

**Explanation:**

Imagine you're helping a hero navigate through a tricky dungeon filled with different challenges. The hero's objective is to escape, but along the way, they might find useful items like swords that can help protect against monsters.

In our scenario, the action of picking up a sword is crucial. Let's think of it like this: if you enter a room and see a sword on the floor while your hands are free, you can pick it up. The action schema in PDDL, which is a way to represent planning problems, explains this in a structured format.

The preconditions for our action ""pick-sword"" are:
1. **The hero must be in the same room as the sword** (represented as `(at-hero ?loc)` and `(at-sword ?s ?loc)`). This makes sense because you can't pick up something that's not in the same room as you.
2. **The hero's hand must be free** (`(arm-free)`). Just like you can't hold two grocery bags in one hand easily, our hero needs a free hand to pick up the sword.

The effects after the hero picks up the sword are:
1. **The hero is now holding the sword** (`(holding ?s)`). This indicates that the hero has successfully picked up the sword.
2. **The sword is no longer in its original place** (`(not (at-sword ?s ?loc))`). Just like if you take an apple from a basket, the apple isn't in the basket anymore.
3. **The hero's hand is no longer free** (`(not (arm-free))`). Holding the sword means the hand that was free is now occupied.

This action schema is a simple way to model the interaction between the hero and the sword in the dungeon. It helps ensure that all necessary conditions are met before the action takes place, making the hero's journey through the dungeon logical and structured. This way, the hero doesn't magically have a sword without picking it up or has two items in one hand, which keeps our dungeon adventure realistic and understandable.","Parameters:
1. ?x - book

Preconditions:
```
(and
    (checked-out ?x)
    (holding ?x)
)
```

Effects:
```
(and
    (not (checked-out ?x))
    (not (holding ?x))
    (not (book-request ?x))
    (not (return-due ?x))
    (accessible ?x)
    (hands-free)
)
```
","(:action pick-sword
    :parameters (?loc - cells ?s - swords)
    :precondition (and (at-hero ?loc) (at-sword ?s ?loc) (arm-free))
    :effect (and (holding ?s) (not (at-sword ?s ?loc)) (not (arm-free)))
)",
rpggame,pick-sword,0.10417857021093369,Easy Negative (Inter-Domain Mismatch),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: **Pickup** the sword if present in the room the hero is currently in and the hero is empty handed

Action name: pick-sword


Your answer:

**Explanation:**

Imagine you're helping a hero navigate through a tricky dungeon filled with different challenges. The hero's objective is to escape, but along the way, they might find useful items like swords that can help protect against monsters.

In our scenario, the action of picking up a sword is crucial. Let's think of it like this: if you enter a room and see a sword on the floor while your hands are free, you can pick it up. The action schema in PDDL, which is a way to represent planning problems, explains this in a structured format.

The preconditions for our action ""pick-sword"" are:
1. **The hero must be in the same room as the sword** (represented as `(at-hero ?loc)` and `(at-sword ?s ?loc)`). This makes sense because you can't pick up something that's not in the same room as you.
2. **The hero's hand must be free** (`(arm-free)`). Just like you can't hold two grocery bags in one hand easily, our hero needs a free hand to pick up the sword.

The effects after the hero picks up the sword are:
1. **The hero is now holding the sword** (`(holding ?s)`). This indicates that the hero has successfully picked up the sword.
2. **The sword is no longer in its original place** (`(not (at-sword ?s ?loc))`). Just like if you take an apple from a basket, the apple isn't in the basket anymore.
3. **The hero's hand is no longer free** (`(not (arm-free))`). Holding the sword means the hand that was free is now occupied.

This action schema is a simple way to model the interaction between the hero and the sword in the dungeon. It helps ensure that all necessary conditions are met before the action takes place, making the hero's journey through the dungeon logical and structured. This way, the hero doesn't magically have a sword without picking it up or has two items in one hand, which keeps our dungeon adventure realistic and understandable.","Parameters:
1. ?x - book

Preconditions:
```
(and
    (accessible ?x)
    (on-table ?x)
    (hands-free)
)
```

Effects:
```
(and
    (not (on-table ?x))
    (not (accessible ?x))
    (not (hands-free))
    (holding ?x)
)
```
","(:action pick-sword
    :parameters (?loc - cells ?s - swords)
    :precondition (and (at-hero ?loc) (at-sword ?s ?loc) (arm-free))
    :effect (and (holding ?s) (not (at-sword ?s ?loc)) (not (arm-free)))
)",
rpggame,pick-sword,0.1758420765399933,Easy Negative (Inter-Domain Mismatch),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: **Pickup** the sword if present in the room the hero is currently in and the hero is empty handed

Action name: pick-sword


Your answer:

**Explanation:**

Imagine you're helping a hero navigate through a tricky dungeon filled with different challenges. The hero's objective is to escape, but along the way, they might find useful items like swords that can help protect against monsters.

In our scenario, the action of picking up a sword is crucial. Let's think of it like this: if you enter a room and see a sword on the floor while your hands are free, you can pick it up. The action schema in PDDL, which is a way to represent planning problems, explains this in a structured format.

The preconditions for our action ""pick-sword"" are:
1. **The hero must be in the same room as the sword** (represented as `(at-hero ?loc)` and `(at-sword ?s ?loc)`). This makes sense because you can't pick up something that's not in the same room as you.
2. **The hero's hand must be free** (`(arm-free)`). Just like you can't hold two grocery bags in one hand easily, our hero needs a free hand to pick up the sword.

The effects after the hero picks up the sword are:
1. **The hero is now holding the sword** (`(holding ?s)`). This indicates that the hero has successfully picked up the sword.
2. **The sword is no longer in its original place** (`(not (at-sword ?s ?loc))`). Just like if you take an apple from a basket, the apple isn't in the basket anymore.
3. **The hero's hand is no longer free** (`(not (arm-free))`). Holding the sword means the hand that was free is now occupied.

This action schema is a simple way to model the interaction between the hero and the sword in the dungeon. It helps ensure that all necessary conditions are met before the action takes place, making the hero's journey through the dungeon logical and structured. This way, the hero doesn't magically have a sword without picking it up or has two items in one hand, which keeps our dungeon adventure realistic and understandable.","Parameters:
1. ?x - book
2. ?y - book
3. ?cat - category

Preconditions:
```
(and
    (holding ?x)
    (accessible ?y)
    (belongs-to-category ?x ?cat)
    (not (shelf-overflow ?cat))
)
```

Effects:
```
(and
    (not (holding ?x))
    (not (accessible ?y))
    (accessible ?x)
    (hands-free)
    (on-shelf ?x ?y)
    (shelf-empty ?cat)
)
```
","(:action pick-sword
    :parameters (?loc - cells ?s - swords)
    :precondition (and (at-hero ?loc) (at-sword ?s ?loc) (arm-free))
    :effect (and (holding ?s) (not (at-sword ?s ?loc)) (not (arm-free)))
)",
rpggame,pick-sword,0.11406250298023224,Easy Negative (Inter-Domain Mismatch),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: **Pickup** the sword if present in the room the hero is currently in and the hero is empty handed

Action name: pick-sword


Your answer:
","**Explanation:** 

Imagine you are a librarian in a library, and you need to take a book off the shelf. This book is placed on top of another book. The action ""remove-from-shelf"" lets you take the top book off the shelf. To do this, certain conditions, called ""preconditions,"" must be met to make sure you can successfully take the book.

For the action ""remove-from-shelf,"" let's break down what needs to be true before you can take the book off the shelf:

1. **The book must be on the shelf:** This means the book you want to take is on top of another book on the shelf.
2. **The book must be accessible:** This means the book isn't covered by other books or objects, so you can easily reach it.
3. **Your hands must be free:** You need to have empty hands to pick up the book, meaning you aren't already holding something else.
4. **The book must belong to a certain category:** This helps you know which book you are taking and ensures you are organizing the books properly.

Once these preconditions are met, you can proceed with the ""remove-from-shelf"" action. This action results in several changes, called ""effects,"" that update the status of the books and your hands:

1. **You are now holding the book:** This indicates you have picked up the book from the shelf.
2. **The book underneath becomes accessible:** Since you have removed the top book, the book underneath is now easy to reach.
3. **The book you removed is no longer accessible:** Because you are holding the book, it's not available on the shelf anymore.
4. **Your hands are no longer free:** Since you are now holding the book, your hands are occupied.
5. **The book is no longer on the shelf:** This shows that the book has been taken off the shelf.
6. **The shelf is now empty for that category:** This helps keep track of the shelf space and organization.

To summarize, the preconditions ensure the book is on the shelf, accessible, your hands are free, and you know which category the book belongs to. The effects update the situation to show you are holding the book, the book underneath is now accessible, and the shelf is empty for that category.
Parameters:
1. ?x - book
2. ?y - book
3. ?cat - category

Preconditions:
```
(and
    (on-shelf ?x ?y)
    (accessible ?x)
    (hands-free)
    (belongs-to-category ?x ?cat)
)
```

Effects:
```
(and
    (holding ?x)
    (accessible ?y)
    (not (accessible ?x))
    (not (hands-free))
    (not (on-shelf ?x ?y))
    (shelf-empty ?cat)
)
```
","(:action pick-sword
    :parameters (?loc - cells ?s - swords)
    :precondition (and (at-hero ?loc) (at-sword ?s ?loc) (arm-free))
    :effect (and (holding ?s) (not (at-sword ?s ?loc)) (not (arm-free)))
)",
rpggame,pick-sword,0.10156753659248352,Easy Negative (Inter-Domain Mismatch),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: **Pickup** the sword if present in the room the hero is currently in and the hero is empty handed

Action name: pick-sword


Your answer:
","**Explanation:** 

Imagine you are a librarian holding a book in your hands, and you want to place it on a nearby table. The action ""place-on-table"" lets you do this. To make sure everything goes smoothly, there is a condition, called a ""precondition,"" that must be met before you can place the book on the table.

For the action ""place-on-table,"" let's break down what needs to be true before you can place the book on the table:

1. **You must be holding the book:** This means you have the book in your hands, ready to place it on the table.

Once this precondition is met, you can proceed with the ""place-on-table"" action. This action results in several changes, called ""effects,"" that update the status of the book and your hands:

1. **You are no longer holding the book:** This shows that you have placed the book on the table.
2. **The book becomes accessible:** Now that the book is on the table, it is easy to reach and pick up again if needed.
3. **Your hands are now free:** Since you have placed the book on the table, your hands are empty again.
4. **The book is on the table:** This indicates the new location of the book.

To summarize, the precondition ensures you are holding the book, making sure you are ready to place it on the table. The effects update the situation to show that you have placed the book on the table, it is now accessible, and your hands are free again.
Parameters:
1. ?x - book

Preconditions:
```
(holding ?x)
```

Effects:
```
(and
    (not (holding ?x))
    (accessible ?x)
    (hands-free)
    (on-table ?x)
)
```
","(:action pick-sword
    :parameters (?loc - cells ?s - swords)
    :precondition (and (at-hero ?loc) (at-sword ?s ?loc) (arm-free))
    :effect (and (holding ?s) (not (at-sword ?s ?loc)) (not (arm-free)))
)",
rpggame,pick-sword,0.19100171327590942,Easy Negative (Inter-Domain Mismatch),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: **Pickup** the sword if present in the room the hero is currently in and the hero is empty handed

Action name: pick-sword


Your answer:
","**Explanation:** 

Imagine a librarian in a library who helps patrons borrow books. When a patron wants to borrow a book, the librarian needs to make sure certain conditions are met before they can check the book out. These conditions are called ""preconditions.""

For the action ""check-out,"" let's think about what needs to be true before the librarian can let the patron borrow the book:

1. **The book must be accessible:** This means the book is not covered by other books or objects, making it easy for the librarian to pick up. If the book isn't accessible, the librarian can't reach it to check it out.
2. **The book must not be already checked out:** If the book is already checked out to someone else, it can't be borrowed by another patron until it's returned.

Once these preconditions are met, the librarian can proceed with the check-out action. The action results in several changes, called ""effects,"" that update the status of the book:

1. **The book is marked as checked out:** This indicates that the book is now borrowed and can't be checked out by another patron until it's returned.
2. **The book is no longer accessible:** Since the book is borrowed, it's no longer available on the shelf for others to take.
3. **There is a request for the book:** This keeps track of the borrowing transaction.
4. **A return due date is set:** This helps the library know when to expect the book back.

To summarize, the preconditions ensure the librarian can access the book and that it isn't already borrowed. The effects update the system to show the book is now checked out, not accessible, and has a return due date.
Parameters:
1. ?x - book

Preconditions:
```
(and
    (accessible ?x)
    (not (checked-out ?x))
)
```

Effects:
```
(and
    (checked-out ?x)
    (not (accessible ?x))
    (book-request ?x)
    (return-due ?x)
)
```
","(:action pick-sword
    :parameters (?loc - cells ?s - swords)
    :precondition (and (at-hero ?loc) (at-sword ?s ?loc) (arm-free))
    :effect (and (holding ?s) (not (at-sword ?s ?loc)) (not (arm-free)))
)",
rpggame,pick-sword,0.1797766089439392,Easy Negative (Inter-Domain Mismatch),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: **Pickup** the sword if present in the room the hero is currently in and the hero is empty handed

Action name: pick-sword


Your answer:
","**Explanation:** 

Imagine a patron is returning a borrowed book to the library. The librarian needs to process this return to update the book's status and remove any return due date. The action ""return-book"" describes how the librarian can do this. There are specific conditions, called ""preconditions,"" that must be met to ensure the return can be processed correctly.

For the action ""return-book,"" let's break down what needs to be true before the librarian can return the book:

1. **The book must be checked out:** This means the book is currently borrowed by someone and needs to be returned.
2. **The librarian must be holding the book:** This indicates the librarian has the book in their hands, ready to process the return.

Once these preconditions are met, the librarian can proceed with the ""return-book"" action. This action results in several changes, called ""effects,"" that update the status of the book and the librarian's hands:

1. **The book is no longer checked out:** This shows that the book has been returned and is available for borrowing again.
2. **The librarian is no longer holding the book:** This indicates the librarian has processed the return and placed the book back in its proper place.
3. **Any request for the book is removed:** If there was a request for this book, it is no longer needed since the book is now available.
4. **The return due date is removed:** This updates the system to show that the book is no longer due for return.
5. **The book becomes accessible:** Now that the book is back in the library, it is easy to find and borrow again.
6. **The librarian's hands are now free:** Since the librarian has finished processing the return, their hands are empty and ready for the next task.

To summarize, the preconditions ensure the book is currently borrowed and the librarian has it in their hands, ready to return. The effects update the situation to show that the book is no longer checked out, any requests and due dates are removed, the book is accessible again, and the librarian's hands are free.
Parameters:
1. ?x - book

Preconditions:
```
(and
    (checked-out ?x)
    (holding ?x)
)
```

Effects:
```
(and
    (not (checked-out ?x))
    (not (holding ?x))
    (not (book-request ?x))
    (not (return-due ?x))
    (accessible ?x)
    (hands-free)
)
```
","(:action pick-sword
    :parameters (?loc - cells ?s - swords)
    :precondition (and (at-hero ?loc) (at-sword ?s ?loc) (arm-free))
    :effect (and (holding ?s) (not (at-sword ?s ?loc)) (not (arm-free)))
)",
rpggame,pick-sword,0.07760506123304367,Easy Negative (Inter-Domain Mismatch),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: **Pickup** the sword if present in the room the hero is currently in and the hero is empty handed

Action name: pick-sword


Your answer:
","**Explanation:** 

Imagine you're a librarian in a library, and there's a table full of books that need to be sorted. You want to pick up one of these books. To do this, certain conditions, called ""preconditions,"" must be met to ensure you can successfully pick up the book.

For the action ""take-from-table,"" let's break down what needs to be true before you can pick up a book:

1. **The book must be accessible:** This means the book isn't covered by other books or objects, so you can easily reach it.
2. **The book must be on the table:** This indicates the book is physically located on the table, not somewhere else like a shelf.
3. **Your hands must be free:** You need to have empty hands to pick up the book, meaning you aren't already holding something else.

Once these preconditions are met, you can proceed with the ""take-from-table"" action. This action results in several changes, called ""effects,"" that update the status of the book and your hands:

1. **The book is no longer on the table:** This indicates you've picked up the book from the table.
2. **The book is no longer accessible:** Since you're holding the book, it's not available for someone else to pick up from the table.
3. **Your hands are no longer free:** Because you're now holding the book, your hands are occupied.
4. **You are holding the book:** This shows that the book is now in your hands.

To summarize, the preconditions ensure you can reach the book, it's on the table, and your hands are free to pick it up. The effects update the situation to reflect that the book is now in your hands and no longer on the table or accessible to others.
Parameters:
1. ?x - book

Preconditions:
```
(and
    (accessible ?x)
    (on-table ?x)
    (hands-free)
)
```

Effects:
```
(and
    (not (on-table ?x))
    (not (accessible ?x))
    (not (hands-free))
    (holding ?x)
)
```
","(:action pick-sword
    :parameters (?loc - cells ?s - swords)
    :precondition (and (at-hero ?loc) (at-sword ?s ?loc) (arm-free))
    :effect (and (holding ?s) (not (at-sword ?s ?loc)) (not (arm-free)))
)",
rpggame,pick-sword,0.07736551761627197,Easy Negative (Inter-Domain Mismatch),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: **Pickup** the sword if present in the room the hero is currently in and the hero is empty handed

Action name: pick-sword


Your answer:
","**Explanation:** 

Imagine you are a librarian standing near a shelf, holding a book in your hands. You want to place this book on top of another book that is already on the shelf. This action, called ""place-on-shelf,"" needs to follow certain rules, called ""preconditions,"" to make sure everything goes smoothly.

For the action ""place-on-shelf,"" let's break down what needs to be true before you can place the book on the shelf:

1. **You must be holding the book:** This means you have the book in your hands, ready to place it on the shelf.
2. **The book on the shelf must be accessible:** The book already on the shelf should not be covered by other books or objects, so you can easily place your book on top of it.
3. **The book you are holding must belong to a certain category:** This helps in organizing the books properly according to their categories.
4. **The shelf should not be overflowing:** There should be enough space on the shelf to place another book.

Once these preconditions are met, you can proceed with the ""place-on-shelf"" action. This action results in several changes, called ""effects,"" that update the status of the books and your hands:

1. **You are no longer holding the book:** This shows that you have placed the book on the shelf.
2. **The book on the shelf is no longer accessible:** Because the new book is now on top of it, making it covered.
3. **The book you placed is now accessible:** This indicates the book you just placed is easy to reach.
4. **Your hands are now free:** Since you have placed the book on the shelf, your hands are empty again.
5. **The new book is on the shelf on top of the other book:** This shows the new book's position.
6. **The shelf is now considered empty for that category:** This helps in tracking the organization and availability of shelf space for that category.

To summarize, the preconditions ensure you are holding the book, the shelf has space, and the book on the shelf is accessible. The effects update the situation to show that you have placed the book on the shelf, the new book is accessible, and your hands are free again.
Parameters:
1. ?x - book
2. ?y - book
3. ?cat - category

Preconditions:
```
(and
    (holding ?x)
    (accessible ?y)
    (belongs-to-category ?x ?cat)
    (not (shelf-overflow ?cat))
)
```

Effects:
```
(and
    (not (holding ?x))
    (not (accessible ?y))
    (accessible ?x)
    (hands-free)
    (on-shelf ?x ?y)
    (shelf-empty ?cat)
)
```
","(:action pick-sword
    :parameters (?loc - cells ?s - swords)
    :precondition (and (at-hero ?loc) (at-sword ?s ?loc) (arm-free))
    :effect (and (holding ?s) (not (at-sword ?s ?loc)) (not (arm-free)))
)",
rpggame,pick-sword,0.5180956125259399,Semi-Hard Negative (Intra-Domain Mismatch),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: **Pickup** the sword if present in the room the hero is currently in and the hero is empty handed

Action name: pick-sword


Your answer:
","Parameters:
1. ?from - cells
2. ?to - cells

Preconditions:
```
(and
    (connected ?from ?to)
    (at-hero ?from)
    (not (is-destroyed ?to))
    (not (has-trap ?from))
    (has-trap ?to)
    (arm-free)
)
```

Effects:
```
(and
    (at-hero ?to)
    (is-destroyed ?from)
    (not (at-hero ?from))
)
```
","(:action pick-sword
    :parameters (?loc - cells ?s - swords)
    :precondition (and (at-hero ?loc) (at-sword ?s ?loc) (arm-free))
    :effect (and (holding ?s) (not (at-sword ?s ?loc)) (not (arm-free)))
)",
rpggame,pick-sword,0.6636556386947632,Semi-Hard Negative (Intra-Domain Mismatch),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: **Pickup** the sword if present in the room the hero is currently in and the hero is empty handed

Action name: pick-sword


Your answer:
","Parameters:
1. ?from - cells
2. ?to - cells

Preconditions:
```
(and
    (connected ?from ?to)
    (at-hero ?from)
    (not (has-trap ?from))
    (not (is-destroyed ?to))
    (not (has-trap ?to))
    (not (has-monster ?to))
)
```

Effects:
```
(and
    (at-hero ?to)
    (is-destroyed ?from)
    (not (at-hero ?from))
)
```
","(:action pick-sword
    :parameters (?loc - cells ?s - swords)
    :precondition (and (at-hero ?loc) (at-sword ?s ?loc) (arm-free))
    :effect (and (holding ?s) (not (at-sword ?s ?loc)) (not (arm-free)))
)",
rpggame,pick-sword,0.7996939420700073,Semi-Hard Negative (Intra-Domain Mismatch),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: **Pickup** the sword if present in the room the hero is currently in and the hero is empty handed

Action name: pick-sword


Your answer:
","Parameters:
1. ?loc - cells

Preconditions:
```
(and
    (at-hero ?loc)
    (arm-free)
    (has-trap ?loc)
)
```

Effects:
```
(and
    (trap-disarmed ?loc)
    (not (has-trap ?loc))
)
```
","(:action pick-sword
    :parameters (?loc - cells ?s - swords)
    :precondition (and (at-hero ?loc) (at-sword ?s ?loc) (arm-free))
    :effect (and (holding ?s) (not (at-sword ?s ?loc)) (not (arm-free)))
)",
rpggame,pick-sword,0.8527721166610718,Semi-Hard Negative (Intra-Domain Mismatch),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: **Pickup** the sword if present in the room the hero is currently in and the hero is empty handed

Action name: pick-sword


Your answer:
","Parameters:
1. ?from - cells
2. ?to - cells
3. ?s - swords

Preconditions:
```
(and
    (connected ?from ?to)
    (at-hero ?from)
    (has-monster ?to)
    (not (is-destroyed ?to))
    (not (has-trap ?from))
    (holding ?s)
)
```

Effects:
```
(and
    (at-hero ?to)
    (is-destroyed ?from)
    (not (at-hero ?from))
)
```
","(:action pick-sword
    :parameters (?loc - cells ?s - swords)
    :precondition (and (at-hero ?loc) (at-sword ?s ?loc) (arm-free))
    :effect (and (holding ?s) (not (at-sword ?s ?loc)) (not (arm-free)))
)",
rpggame,pick-sword,0.6134718060493469,Semi-Hard Negative (Intra-Domain Mismatch),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: **Pickup** the sword if present in the room the hero is currently in and the hero is empty handed

Action name: pick-sword


Your answer:
","Parameters:
1. ?loc - cells
2. ?s - swords

Preconditions:
```
(and
    (at-hero ?loc)
    (holding ?s)
    (not (has-trap ?loc))
    (not (has-monster ?loc))
)
```

Effects:
```
(and
    (arm-free)
    (is-destroyed ?s)
    (not (holding ?s))
)
```
","(:action pick-sword
    :parameters (?loc - cells ?s - swords)
    :precondition (and (at-hero ?loc) (at-sword ?s ?loc) (arm-free))
    :effect (and (holding ?s) (not (at-sword ?s ?loc)) (not (arm-free)))
)",
rpggame,pick-sword,0.5180956125259399,Semi-Hard Negative (Intra-Domain Mismatch),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: **Pickup** the sword if present in the room the hero is currently in and the hero is empty handed

Action name: pick-sword


Your answer:

**Explanation:**

Imagine you're helping a hero navigate through a tricky dungeon filled with different challenges. The hero's objective is to escape, but along the way, they might find useful items like swords that can help protect against monsters.

In our scenario, the action of picking up a sword is crucial. Let's think of it like this: if you enter a room and see a sword on the floor while your hands are free, you can pick it up. The action schema in PDDL, which is a way to represent planning problems, explains this in a structured format.

The preconditions for our action ""pick-sword"" are:
1. **The hero must be in the same room as the sword** (represented as `(at-hero ?loc)` and `(at-sword ?s ?loc)`). This makes sense because you can't pick up something that's not in the same room as you.
2. **The hero's hand must be free** (`(arm-free)`). Just like you can't hold two grocery bags in one hand easily, our hero needs a free hand to pick up the sword.

The effects after the hero picks up the sword are:
1. **The hero is now holding the sword** (`(holding ?s)`). This indicates that the hero has successfully picked up the sword.
2. **The sword is no longer in its original place** (`(not (at-sword ?s ?loc))`). Just like if you take an apple from a basket, the apple isn't in the basket anymore.
3. **The hero's hand is no longer free** (`(not (arm-free))`). Holding the sword means the hand that was free is now occupied.

This action schema is a simple way to model the interaction between the hero and the sword in the dungeon. It helps ensure that all necessary conditions are met before the action takes place, making the hero's journey through the dungeon logical and structured. This way, the hero doesn't magically have a sword without picking it up or has two items in one hand, which keeps our dungeon adventure realistic and understandable.","Parameters:
1. ?from - cells
2. ?to - cells

Preconditions:
```
(and
    (connected ?from ?to)
    (at-hero ?from)
    (not (is-destroyed ?to))
    (not (has-trap ?from))
    (has-trap ?to)
    (arm-free)
)
```

Effects:
```
(and
    (at-hero ?to)
    (is-destroyed ?from)
    (not (at-hero ?from))
)
```
","(:action pick-sword
    :parameters (?loc - cells ?s - swords)
    :precondition (and (at-hero ?loc) (at-sword ?s ?loc) (arm-free))
    :effect (and (holding ?s) (not (at-sword ?s ?loc)) (not (arm-free)))
)",
rpggame,pick-sword,0.6636556386947632,Semi-Hard Negative (Intra-Domain Mismatch),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: **Pickup** the sword if present in the room the hero is currently in and the hero is empty handed

Action name: pick-sword


Your answer:

**Explanation:**

Imagine you're helping a hero navigate through a tricky dungeon filled with different challenges. The hero's objective is to escape, but along the way, they might find useful items like swords that can help protect against monsters.

In our scenario, the action of picking up a sword is crucial. Let's think of it like this: if you enter a room and see a sword on the floor while your hands are free, you can pick it up. The action schema in PDDL, which is a way to represent planning problems, explains this in a structured format.

The preconditions for our action ""pick-sword"" are:
1. **The hero must be in the same room as the sword** (represented as `(at-hero ?loc)` and `(at-sword ?s ?loc)`). This makes sense because you can't pick up something that's not in the same room as you.
2. **The hero's hand must be free** (`(arm-free)`). Just like you can't hold two grocery bags in one hand easily, our hero needs a free hand to pick up the sword.

The effects after the hero picks up the sword are:
1. **The hero is now holding the sword** (`(holding ?s)`). This indicates that the hero has successfully picked up the sword.
2. **The sword is no longer in its original place** (`(not (at-sword ?s ?loc))`). Just like if you take an apple from a basket, the apple isn't in the basket anymore.
3. **The hero's hand is no longer free** (`(not (arm-free))`). Holding the sword means the hand that was free is now occupied.

This action schema is a simple way to model the interaction between the hero and the sword in the dungeon. It helps ensure that all necessary conditions are met before the action takes place, making the hero's journey through the dungeon logical and structured. This way, the hero doesn't magically have a sword without picking it up or has two items in one hand, which keeps our dungeon adventure realistic and understandable.","Parameters:
1. ?from - cells
2. ?to - cells

Preconditions:
```
(and
    (connected ?from ?to)
    (at-hero ?from)
    (not (has-trap ?from))
    (not (is-destroyed ?to))
    (not (has-trap ?to))
    (not (has-monster ?to))
)
```

Effects:
```
(and
    (at-hero ?to)
    (is-destroyed ?from)
    (not (at-hero ?from))
)
```
","(:action pick-sword
    :parameters (?loc - cells ?s - swords)
    :precondition (and (at-hero ?loc) (at-sword ?s ?loc) (arm-free))
    :effect (and (holding ?s) (not (at-sword ?s ?loc)) (not (arm-free)))
)",
rpggame,pick-sword,0.7996939420700073,Semi-Hard Negative (Intra-Domain Mismatch),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: **Pickup** the sword if present in the room the hero is currently in and the hero is empty handed

Action name: pick-sword


Your answer:

**Explanation:**

Imagine you're helping a hero navigate through a tricky dungeon filled with different challenges. The hero's objective is to escape, but along the way, they might find useful items like swords that can help protect against monsters.

In our scenario, the action of picking up a sword is crucial. Let's think of it like this: if you enter a room and see a sword on the floor while your hands are free, you can pick it up. The action schema in PDDL, which is a way to represent planning problems, explains this in a structured format.

The preconditions for our action ""pick-sword"" are:
1. **The hero must be in the same room as the sword** (represented as `(at-hero ?loc)` and `(at-sword ?s ?loc)`). This makes sense because you can't pick up something that's not in the same room as you.
2. **The hero's hand must be free** (`(arm-free)`). Just like you can't hold two grocery bags in one hand easily, our hero needs a free hand to pick up the sword.

The effects after the hero picks up the sword are:
1. **The hero is now holding the sword** (`(holding ?s)`). This indicates that the hero has successfully picked up the sword.
2. **The sword is no longer in its original place** (`(not (at-sword ?s ?loc))`). Just like if you take an apple from a basket, the apple isn't in the basket anymore.
3. **The hero's hand is no longer free** (`(not (arm-free))`). Holding the sword means the hand that was free is now occupied.

This action schema is a simple way to model the interaction between the hero and the sword in the dungeon. It helps ensure that all necessary conditions are met before the action takes place, making the hero's journey through the dungeon logical and structured. This way, the hero doesn't magically have a sword without picking it up or has two items in one hand, which keeps our dungeon adventure realistic and understandable.","Parameters:
1. ?loc - cells

Preconditions:
```
(and
    (at-hero ?loc)
    (arm-free)
    (has-trap ?loc)
)
```

Effects:
```
(and
    (trap-disarmed ?loc)
    (not (has-trap ?loc))
)
```
","(:action pick-sword
    :parameters (?loc - cells ?s - swords)
    :precondition (and (at-hero ?loc) (at-sword ?s ?loc) (arm-free))
    :effect (and (holding ?s) (not (at-sword ?s ?loc)) (not (arm-free)))
)",
rpggame,pick-sword,0.8527721166610718,Semi-Hard Negative (Intra-Domain Mismatch),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: **Pickup** the sword if present in the room the hero is currently in and the hero is empty handed

Action name: pick-sword


Your answer:

**Explanation:**

Imagine you're helping a hero navigate through a tricky dungeon filled with different challenges. The hero's objective is to escape, but along the way, they might find useful items like swords that can help protect against monsters.

In our scenario, the action of picking up a sword is crucial. Let's think of it like this: if you enter a room and see a sword on the floor while your hands are free, you can pick it up. The action schema in PDDL, which is a way to represent planning problems, explains this in a structured format.

The preconditions for our action ""pick-sword"" are:
1. **The hero must be in the same room as the sword** (represented as `(at-hero ?loc)` and `(at-sword ?s ?loc)`). This makes sense because you can't pick up something that's not in the same room as you.
2. **The hero's hand must be free** (`(arm-free)`). Just like you can't hold two grocery bags in one hand easily, our hero needs a free hand to pick up the sword.

The effects after the hero picks up the sword are:
1. **The hero is now holding the sword** (`(holding ?s)`). This indicates that the hero has successfully picked up the sword.
2. **The sword is no longer in its original place** (`(not (at-sword ?s ?loc))`). Just like if you take an apple from a basket, the apple isn't in the basket anymore.
3. **The hero's hand is no longer free** (`(not (arm-free))`). Holding the sword means the hand that was free is now occupied.

This action schema is a simple way to model the interaction between the hero and the sword in the dungeon. It helps ensure that all necessary conditions are met before the action takes place, making the hero's journey through the dungeon logical and structured. This way, the hero doesn't magically have a sword without picking it up or has two items in one hand, which keeps our dungeon adventure realistic and understandable.","Parameters:
1. ?from - cells
2. ?to - cells
3. ?s - swords

Preconditions:
```
(and
    (connected ?from ?to)
    (at-hero ?from)
    (has-monster ?to)
    (not (is-destroyed ?to))
    (not (has-trap ?from))
    (holding ?s)
)
```

Effects:
```
(and
    (at-hero ?to)
    (is-destroyed ?from)
    (not (at-hero ?from))
)
```
","(:action pick-sword
    :parameters (?loc - cells ?s - swords)
    :precondition (and (at-hero ?loc) (at-sword ?s ?loc) (arm-free))
    :effect (and (holding ?s) (not (at-sword ?s ?loc)) (not (arm-free)))
)",
rpggame,pick-sword,0.6134718060493469,Semi-Hard Negative (Intra-Domain Mismatch),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: **Pickup** the sword if present in the room the hero is currently in and the hero is empty handed

Action name: pick-sword


Your answer:

**Explanation:**

Imagine you're helping a hero navigate through a tricky dungeon filled with different challenges. The hero's objective is to escape, but along the way, they might find useful items like swords that can help protect against monsters.

In our scenario, the action of picking up a sword is crucial. Let's think of it like this: if you enter a room and see a sword on the floor while your hands are free, you can pick it up. The action schema in PDDL, which is a way to represent planning problems, explains this in a structured format.

The preconditions for our action ""pick-sword"" are:
1. **The hero must be in the same room as the sword** (represented as `(at-hero ?loc)` and `(at-sword ?s ?loc)`). This makes sense because you can't pick up something that's not in the same room as you.
2. **The hero's hand must be free** (`(arm-free)`). Just like you can't hold two grocery bags in one hand easily, our hero needs a free hand to pick up the sword.

The effects after the hero picks up the sword are:
1. **The hero is now holding the sword** (`(holding ?s)`). This indicates that the hero has successfully picked up the sword.
2. **The sword is no longer in its original place** (`(not (at-sword ?s ?loc))`). Just like if you take an apple from a basket, the apple isn't in the basket anymore.
3. **The hero's hand is no longer free** (`(not (arm-free))`). Holding the sword means the hand that was free is now occupied.

This action schema is a simple way to model the interaction between the hero and the sword in the dungeon. It helps ensure that all necessary conditions are met before the action takes place, making the hero's journey through the dungeon logical and structured. This way, the hero doesn't magically have a sword without picking it up or has two items in one hand, which keeps our dungeon adventure realistic and understandable.","Parameters:
1. ?loc - cells
2. ?s - swords

Preconditions:
```
(and
    (at-hero ?loc)
    (holding ?s)
    (not (has-trap ?loc))
    (not (has-monster ?loc))
)
```

Effects:
```
(and
    (arm-free)
    (is-destroyed ?s)
    (not (holding ?s))
)
```
","(:action pick-sword
    :parameters (?loc - cells ?s - swords)
    :precondition (and (at-hero ?loc) (at-sword ?s ?loc) (arm-free))
    :effect (and (holding ?s) (not (at-sword ?s ?loc)) (not (arm-free)))
)",
rpggame,pick-sword,0.7892916202545166,Semi-Hard Negative (Intra-Domain Mismatch),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: **Pickup** the sword if present in the room the hero is currently in and the hero is empty handed

Action name: pick-sword


Your answer:
","**Explanation:**

Imagine you're guiding a hero who just woke up in a mysterious dungeon. Each room can have different things: some are empty, others have monsters, some have traps, and a few might have swords. There's also a special room with an exit—our hero's goal.

Now, let's talk about the action called **move-to-trap**. This action involves our hero moving from one room (we'll call it ""Room A"") to another room (""Room B""), where, unfortunately, there's a trap waiting. Here's why each part of the plan (or action schema) makes sense:

1. **Connected Rooms**: Our hero can only move to a room directly connected to the one they're currently in. This is like being in your house and only being able to walk into rooms that have doors leading from where you are now.

2. **Hero's Current Location**: The hero must start in Room A to move to Room B. You can't move from a place if you're not actually there, right?

3. **Room B Not Destroyed**: The room our hero is moving to mustn't be already destroyed (or in ruins). It's like making sure the bridge you want to cross hasn't collapsed.

4. **Room A Doesn't Have a Trap**: It’s safer if the room our hero is leaving doesn't have a trap. Imagine trying to leave a room with a trap; it could activate and cause trouble!

5. **Room B Has a Trap**: Since the action is called **move-to-trap**, it specifically involves moving to a room with a trap, almost like knowing there's a puddle ahead but stepping into it anyway because it's the only path forward.

6. **Hero's Arm is Free**: This indicates that the hero isn’t holding anything like a sword. It’s important because handling traps might require free hands—think about needing your hands free to disarm or avoid a trap carefully.

When our hero completes this action, several things happen:
- **Hero is now in Room B**: Just like when you walk into another room, you’re no longer in the first room.
- **Room A is destroyed**: This could mean the hero leaves it in a way that no one can follow—maybe they close a heavy door that locks automatically.
- **Hero is no longer in Room A**: It confirms that the hero has completely left Room A.

This action is designed for specific situations in the dungeon where the hero might need to move strategically, even into risky areas, to navigate through the dungeon and eventually find the exit.
Parameters:
1. ?from - cells
2. ?to - cells

Preconditions:
```
(and
    (connected ?from ?to)
    (at-hero ?from)
    (not (is-destroyed ?to))
    (not (has-trap ?from))
    (has-trap ?to)
    (arm-free)
)
```

Effects:
```
(and
    (at-hero ?to)
    (is-destroyed ?from)
    (not (at-hero ?from))
)
```
","(:action pick-sword
    :parameters (?loc - cells ?s - swords)
    :precondition (and (at-hero ?loc) (at-sword ?s ?loc) (arm-free))
    :effect (and (holding ?s) (not (at-sword ?s ?loc)) (not (arm-free)))
)",
rpggame,pick-sword,0.7861344814300537,Semi-Hard Negative (Intra-Domain Mismatch),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: **Pickup** the sword if present in the room the hero is currently in and the hero is empty handed

Action name: pick-sword


Your answer:
","**Explanation:**

Imagine our hero in a big, scary dungeon, just like a character from a fairy tale or a video game. The dungeon has several rooms, and some rooms are safe while others have monsters or traps. The hero's goal is to escape from this dungeon, moving from one room to another until he finds the exit.

Now, let's talk about the action called ""move"" that our hero can take. The action ""move"" lets the hero go from one room (we'll call this the ""current room"") to a connected room (let's call this the ""next room""). Think of the dungeon like a big house with many doors connecting the rooms; the hero can only move through a door if it’s open and the room on the other side is safe.

In the PDDL (a kind of programming language for planning what actions to take), the action ""move"" needs some conditions to be met before the hero can move:
1. **The rooms must be connected:** Just like you can't walk through a wall at home, the hero can only move to a room if there's a direct connection (like a doorway or a corridor).
2. **The hero must be in the current room:** The hero can only leave a room if he's actually in it.
3. **The current room shouldn’t have a trap that could hurt him.**
4. **The next room shouldn’t be destroyed:** The hero can't go into a room if it’s already been collapsed or destroyed (maybe from a previous adventure!).
5. **The next room shouldn’t have a trap or a monster:** This makes sure our hero doesn’t walk into new danger.

When the hero moves:
- **He is now in the next room:** Just like if you walk to another room in your house, you're then in that new room.
- **The room he left gets destroyed:** This might sound strange, but imagine if every time he left a room, the door magically closed and locked forever, so he can’t go back the same way.
- **He is no longer in the current room:** This is just confirming that he has moved on from the previous room.

These rules help our hero make smart moves through the dungeon, avoiding danger and making progress towards escape. This way of setting up the hero's actions makes sure he can navigate through the dungeon safely and eventually find his way out.
Parameters:
1. ?from - cells
2. ?to - cells

Preconditions:
```
(and
    (connected ?from ?to)
    (at-hero ?from)
    (not (has-trap ?from))
    (not (is-destroyed ?to))
    (not (has-trap ?to))
    (not (has-monster ?to))
)
```

Effects:
```
(and
    (at-hero ?to)
    (is-destroyed ?from)
    (not (at-hero ?from))
)
```
","(:action pick-sword
    :parameters (?loc - cells ?s - swords)
    :precondition (and (at-hero ?loc) (at-sword ?s ?loc) (arm-free))
    :effect (and (holding ?s) (not (at-sword ?s ?loc)) (not (arm-free)))
)",
rpggame,pick-sword,0.6990560293197632,Semi-Hard Negative (Intra-Domain Mismatch),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: **Pickup** the sword if present in the room the hero is currently in and the hero is empty handed

Action name: pick-sword


Your answer:
","**Explanation:**

Imagine our hero in a dungeon, a place with rooms connected like a spider web. Each room can be just an empty space, or it might have something like a monster, a trap, or even a sword. Somewhere in this maze, there's a special room that has an exit—the ultimate goal for our hero.

Now, let's focus on a specific action our hero might need to take: **disarming a trap**. In our scenario, the hero finds themselves in a room with a trap. The action to disarm this trap is what we need to understand.

The action is named `disarm-trap`. This action, like any other, has specific requirements (preconditions) that must be met before the hero can perform it. These preconditions are:
1. **The hero must be in the same room as the trap.** This makes sense because you can't disarm a trap from another room. It's like needing to be in the kitchen to turn off a stove.
2. **The hero's hand must be free.** This means the hero can’t be holding anything, like a sword. It's a bit like needing both hands free to tie your shoes properly.
3. **There must actually be a trap in the room.** Obviously, the hero can't disarm a trap if there isn't one there!

If all these conditions are met, then the hero can go ahead and disarm the trap. The results (effects) of this action are:
1. **The trap in the room is disarmed.** This means the room is now safe from that trap.
2. **The trap is no longer considered to be in the room.** It's like cleaning up a spill; once it's cleaned, it's not there anymore.

By breaking down the action like this, we see how each condition helps ensure the action can be carried out safely and effectively. It’s just like following a recipe—each ingredient needs to be added at the right time for the dish to come out right!
Parameters:
1. ?loc - cells

Preconditions:
```
(and
    (at-hero ?loc)
    (arm-free)
    (has-trap ?loc)
)
```

Effects:
```
(and
    (trap-disarmed ?loc)
    (not (has-trap ?loc))
)
```
","(:action pick-sword
    :parameters (?loc - cells ?s - swords)
    :precondition (and (at-hero ?loc) (at-sword ?s ?loc) (arm-free))
    :effect (and (holding ?s) (not (at-sword ?s ?loc)) (not (arm-free)))
)",
rpggame,pick-sword,0.7913336753845215,Semi-Hard Negative (Intra-Domain Mismatch),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: **Pickup** the sword if present in the room the hero is currently in and the hero is empty handed

Action name: pick-sword


Your answer:
","**Explanation:**

Let's imagine our hero in the dungeon scenario. The hero wakes up and finds themselves in a room, wanting to move to an adjacent room where, unfortunately, there's a monster. Here's how we translate this scenario into a set of instructions, or a 'domain model,' in planning language.

The action we're talking about is called ""move-to-monster."" This means our hero is trying to move from one room (let’s call it Room A) to another room (Room B) where there is a monster. To ensure this action can happen, there are certain conditions that need to be met (these are called 'preconditions') and certain outcomes that will happen as a result of the action (these are called 'effects').

1. **Preconditions**:
   - **Connected Rooms**: Room A and Room B must be connected by a corridor. This makes sense because our hero can't magically jump from one room to another; there must be a path.
   - **Hero's Current Location**: The hero must currently be in Room A. If the hero isn't there, they can't start moving from it!
   - **Monster Presence**: Room B must have a monster. After all, the action is specifically about moving to a room with a monster.
   - **Room Integrity**: Room B should not be destroyed. A destroyed room might mean it’s collapsed or inaccessible, so it's logical our hero can’t move into it.
   - **Safety in Room A**: Room A should not have a trap. This makes sure our hero is safe and able to move without getting caught in a trap.
   - **Armed Hero**: The hero must be holding a sword. It’s a dangerous task to move into a room with a monster, so having a sword means the hero is prepared for a fight.

2. **Effects**:
   - **Hero's New Location**: After the action, the hero will be in Room B. They've successfully moved.
   - **Change in Room A's Status**: Room A becomes 'destroyed.' This might represent that the room is no longer safe or viable after the hero leaves, maybe because of the haste in escaping or some mechanism triggered by the departure.
   - **Update Hero's Old Location**: The fact that the hero was in Room A is no longer true, which is updated in our model to reflect the hero’s new position.

This planning helps organize our thoughts and actions logically, ensuring every step is clear and all necessary precautions are taken. Think of it like giving someone directions with a checklist: ""Before you go there, make sure this, this, and this are true, and once you do, this and this will happen."" This ensures everyone knows what to expect and how to prepare! 
Parameters:
1. ?from - cells
2. ?to - cells
3. ?s - swords

Preconditions:
```
(and
    (connected ?from ?to)
    (at-hero ?from)
    (has-monster ?to)
    (not (is-destroyed ?to))
    (not (has-trap ?from))
    (holding ?s)
)
```

Effects:
```
(and
    (at-hero ?to)
    (is-destroyed ?from)
    (not (at-hero ?from))
)
```
","(:action pick-sword
    :parameters (?loc - cells ?s - swords)
    :precondition (and (at-hero ?loc) (at-sword ?s ?loc) (arm-free))
    :effect (and (holding ?s) (not (at-sword ?s ?loc)) (not (arm-free)))
)",
rpggame,pick-sword,0.6022753715515137,Semi-Hard Negative (Intra-Domain Mismatch),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: **Pickup** the sword if present in the room the hero is currently in and the hero is empty handed

Action name: pick-sword


Your answer:
","**Explanation:**

Imagine you're helping a hero navigate a dungeon full of monsters and traps, a bit like playing a video game. Now, the hero has a sword, but in this part of the game, the hero decides to destroy the sword. To understand why certain conditions are checked before the hero can destroy the sword safely, let's break it down using the action ""destroy-sword"" from the game's rules (or in technical terms, the PDDL action schema).

Firstly, the hero needs to be in the same location as the sword. This makes sense, right? You can't throw something away or break it if it's not with you. So, the condition `(at-hero ?loc)` ensures that the hero is at the right spot to perform the action.

Secondly, the hero must be holding the sword. It’s similar to needing both hands on a bat to swing it; here, the hero needs to have the sword in hand to destroy it, checked by `(holding ?s)`.

But why check for no traps or monsters in the room? Think of it like trying to do something delicate, like assembling a model airplane, in a room with a loose tiger. Not a great idea, right? If there’s a monster in the room, destroying the sword might make the hero vulnerable to attack. Similarly, a trap could be triggered by the noise or movement, putting the hero in danger. So, `(not (has-trap ?loc))` and `(not (has-monster ?loc))` ensure that the environment is safe for the hero to break the sword without turning the situation worse.

Now, what happens after the sword is destroyed? The effect is that the hero’s hand is now free (`arm-free`), the sword is confirmed as destroyed (`is-destroyed ?s`), and the hero is no longer holding it (`not (holding ?s)`). It’s like cleaning up after finishing a task: put away the tools, clean up the mess, and free up your hands for the next task.

In simple terms, this action schema is like a set of instructions to make sure the hero does something risky (like destroying a sword) safely and responsibly, without making the dangerous dungeon situation even worse.
Parameters:
1. ?loc - cells
2. ?s - swords

Preconditions:
```
(and
    (at-hero ?loc)
    (holding ?s)
    (not (has-trap ?loc))
    (not (has-monster ?loc))
)
```

Effects:
```
(and
    (arm-free)
    (is-destroyed ?s)
    (not (holding ?s))
)
```
","(:action pick-sword
    :parameters (?loc - cells ?s - swords)
    :precondition (and (at-hero ?loc) (at-sword ?s ?loc) (arm-free))
    :effect (and (holding ?s) (not (at-sword ?s ?loc)) (not (arm-free)))
)",
rpggame,pick-sword,0.2514823079109192,Hard Negative (Manipulated Action),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: **Pickup** the sword if present in the room the hero is currently in and the hero is empty handed

Action name: pick-sword


Your answer:
","Parameters:
1. ?loc - cells
2. ?s - swords

Preconditions:
```
(and
    (at-hero ?loc)
    (at-sword ?s ?loc)
    (arm-free)
)
```

Effects:
```
(and
    (arm-free)
    (holding ?s)
    (not (at-sword ?s ?loc))
)
```
","(:action pick-sword
    :parameters (?loc - cells ?s - swords)
    :precondition (and (at-hero ?loc) (at-sword ?s ?loc) (arm-free))
    :effect (and (holding ?s) (not (at-sword ?s ?loc)) (not (arm-free)))
)","negate (not (arm-free)) in effects
"
rpggame,pick-sword,0.08757323026657104,Hard Negative (Manipulated Action),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: **Pickup** the sword if present in the room the hero is currently in and the hero is empty handed

Action name: pick-sword


Your answer:
","Parameters:
1. ?loc - cells
2. ?s - swords

Preconditions:
```
(and
    (not (at-sword ?s ?loc))
    (at-hero ?loc)
    (at-sword ?s ?loc)
)
```

Effects:
```
(and
    (not (holding ?s))
    (arm-free)
    (not (arm-free))
)
```
","(:action pick-sword
    :parameters (?loc - cells ?s - swords)
    :precondition (and (at-hero ?loc) (at-sword ?s ?loc) (arm-free))
    :effect (and (holding ?s) (not (at-sword ?s ?loc)) (not (arm-free)))
)","negate (holding ?s) in effects
swap (arm-free) with (not (at-sword ?s ?loc))
"
rpggame,pick-sword,0.2629426121711731,Hard Negative (Manipulated Action),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: **Pickup** the sword if present in the room the hero is currently in and the hero is empty handed

Action name: pick-sword


Your answer:
","Parameters:
1. ?loc - cells
2. ?s - swords

Preconditions:
```
(and
    (at-hero ?loc)
    (at-sword ?s ?loc)
)
```

Effects:
```
(and
    (holding ?s)
    (not (at-sword ?s ?loc))
    (not (arm-free))
)
```
","(:action pick-sword
    :parameters (?loc - cells ?s - swords)
    :precondition (and (at-hero ?loc) (at-sword ?s ?loc) (arm-free))
    :effect (and (holding ?s) (not (at-sword ?s ?loc)) (not (arm-free)))
)","remove (arm-free) from preconditions
"
rpggame,pick-sword,0.05510397627949715,Hard Negative (Manipulated Action),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: **Pickup** the sword if present in the room the hero is currently in and the hero is empty handed

Action name: pick-sword


Your answer:
","Parameters:
1. ?loc - cells
2. ?s - swords

Preconditions:
```
(and
    (not (arm-free))
    (at-hero ?loc)
    (at-sword ?s ?loc)
)
```

Effects:
```
(and
    (holding ?s)
    (not (arm-free))
)
```
","(:action pick-sword
    :parameters (?loc - cells ?s - swords)
    :precondition (and (at-hero ?loc) (at-sword ?s ?loc) (arm-free))
    :effect (and (holding ?s) (not (at-sword ?s ?loc)) (not (arm-free)))
)","remove (not (at-sword ?s ?loc)) from effects
negate (arm-free) in preconditions
"
rpggame,pick-sword,0.1468682736158371,Hard Negative (Manipulated Action),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: **Pickup** the sword if present in the room the hero is currently in and the hero is empty handed

Action name: pick-sword


Your answer:
","Parameters:
1. ?loc - cells
2. ?s - swords

Preconditions:
```
(and
    (at-hero ?loc)
    (at-sword ?s ?loc)
    (arm-free)
)
```

Effects:
```
(and
    (not (holding ?s))
    (not (at-sword ?s ?loc))
    (not (arm-free))
)
```
","(:action pick-sword
    :parameters (?loc - cells ?s - swords)
    :precondition (and (at-hero ?loc) (at-sword ?s ?loc) (arm-free))
    :effect (and (holding ?s) (not (at-sword ?s ?loc)) (not (arm-free)))
)","negate (holding ?s) in effects
"
rpggame,pick-sword,0.29302337765693665,Hard Negative (Manipulated Action),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: **Pickup** the sword if present in the room the hero is currently in and the hero is empty handed

Action name: pick-sword


Your answer:
","Parameters:
1. ?loc - cells
2. ?s - swords

Preconditions:
```
(and
    (at-hero ?loc)
    (at-sword ?s ?loc)
    (arm-free)
)
```

Effects:
```
(and
    (at-sword ?s ?loc)
    (arm-free)
    (holding ?s)
)
```
","(:action pick-sword
    :parameters (?loc - cells ?s - swords)
    :precondition (and (at-hero ?loc) (at-sword ?s ?loc) (arm-free))
    :effect (and (holding ?s) (not (at-sword ?s ?loc)) (not (arm-free)))
)","negate (not (at-sword ?s ?loc)) in effects
negate (not (arm-free)) in effects
"
rpggame,pick-sword,0.3688291311264038,Hard Negative (Manipulated Action),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: **Pickup** the sword if present in the room the hero is currently in and the hero is empty handed

Action name: pick-sword


Your answer:
","Parameters:
1. ?loc - cells
2. ?s - swords

Preconditions:
```
(and
    (at-hero ?loc)
    (at-sword ?s ?loc)
    (arm-free)
)
```

Effects:
```
(and
    (not (at-sword ?s ?loc))
    (not (arm-free))
)
```
","(:action pick-sword
    :parameters (?loc - cells ?s - swords)
    :precondition (and (at-hero ?loc) (at-sword ?s ?loc) (arm-free))
    :effect (and (holding ?s) (not (at-sword ?s ?loc)) (not (arm-free)))
)","remove (holding ?s) from effects
"
rpggame,pick-sword,0.09245128184556961,Hard Negative (Manipulated Action),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: **Pickup** the sword if present in the room the hero is currently in and the hero is empty handed

Action name: pick-sword


Your answer:
","Parameters:
1. ?loc - cells
2. ?s - swords

Preconditions:
```
(and
    (not (arm-free))
    (at-sword ?s ?loc)
    (arm-free)
)
```

Effects:
```
(and
    (at-hero ?loc)
    (holding ?s)
    (not (at-sword ?s ?loc))
)
```
","(:action pick-sword
    :parameters (?loc - cells ?s - swords)
    :precondition (and (at-hero ?loc) (at-sword ?s ?loc) (arm-free))
    :effect (and (holding ?s) (not (at-sword ?s ?loc)) (not (arm-free)))
)","swap (at-hero ?loc) with (not (arm-free))
"
rpggame,pick-sword,0.22493232786655426,Hard Negative (Manipulated Action),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: **Pickup** the sword if present in the room the hero is currently in and the hero is empty handed

Action name: pick-sword


Your answer:
","Parameters:
1. ?loc - cells
2. ?s - swords

Preconditions:
```
(and
    (at-hero ?loc)
    (at-sword ?s ?loc)
)
```

Effects:
```
(and
    (holding ?s)
    (not (at-sword ?s ?loc))
)
```
","(:action pick-sword
    :parameters (?loc - cells ?s - swords)
    :precondition (and (at-hero ?loc) (at-sword ?s ?loc) (arm-free))
    :effect (and (holding ?s) (not (at-sword ?s ?loc)) (not (arm-free)))
)","remove (arm-free) from preconditions
remove (not (arm-free)) from effects
"
rpggame,pick-sword,0.1022750586271286,Hard Negative (Manipulated Action),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: **Pickup** the sword if present in the room the hero is currently in and the hero is empty handed

Action name: pick-sword


Your answer:
","Parameters:
1. ?loc - cells
2. ?s - swords

Preconditions:
```
(and
    (not (arm-free))
    (at-hero ?loc)
    (at-sword ?s ?loc)
)
```

Effects:
```
(and
    (arm-free)
    (holding ?s)
    (not (at-sword ?s ?loc))
)
```
","(:action pick-sword
    :parameters (?loc - cells ?s - swords)
    :precondition (and (at-hero ?loc) (at-sword ?s ?loc) (arm-free))
    :effect (and (holding ?s) (not (at-sword ?s ?loc)) (not (arm-free)))
)","swap (arm-free) with (not (arm-free))
"
rpggame,pick-sword,0.14079733192920685,Hard Negative (Manipulated Action),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: **Pickup** the sword if present in the room the hero is currently in and the hero is empty handed

Action name: pick-sword


Your answer:

**Explanation:**

Imagine you're helping a hero navigate through a tricky dungeon filled with different challenges. The hero's objective is to escape, but along the way, they might find useful items like swords that can help protect against monsters.

In our scenario, the action of picking up a sword is crucial. Let's think of it like this: if you enter a room and see a sword on the floor while your hands are free, you can pick it up. The action schema in PDDL, which is a way to represent planning problems, explains this in a structured format.

The preconditions for our action ""pick-sword"" are:
1. **The hero must be in the same room as the sword** (represented as `(at-hero ?loc)` and `(at-sword ?s ?loc)`). This makes sense because you can't pick up something that's not in the same room as you.
2. **The hero's hand must be free** (`(arm-free)`). Just like you can't hold two grocery bags in one hand easily, our hero needs a free hand to pick up the sword.

The effects after the hero picks up the sword are:
1. **The hero is now holding the sword** (`(holding ?s)`). This indicates that the hero has successfully picked up the sword.
2. **The sword is no longer in its original place** (`(not (at-sword ?s ?loc))`). Just like if you take an apple from a basket, the apple isn't in the basket anymore.
3. **The hero's hand is no longer free** (`(not (arm-free))`). Holding the sword means the hand that was free is now occupied.

This action schema is a simple way to model the interaction between the hero and the sword in the dungeon. It helps ensure that all necessary conditions are met before the action takes place, making the hero's journey through the dungeon logical and structured. This way, the hero doesn't magically have a sword without picking it up or has two items in one hand, which keeps our dungeon adventure realistic and understandable.","Parameters:
1. ?loc - cells
2. ?s - swords

Preconditions:
```
(and
    (not (at-hero ?loc))
    (at-sword ?s ?loc)
    (arm-free)
)
```

Effects:
```
(and
    (holding ?s)
    (not (at-sword ?s ?loc))
    (not (arm-free))
)
```
","(:action pick-sword
    :parameters (?loc - cells ?s - swords)
    :precondition (and (at-hero ?loc) (at-sword ?s ?loc) (arm-free))
    :effect (and (holding ?s) (not (at-sword ?s ?loc)) (not (arm-free)))
)","negate (at-hero ?loc) in preconditions
"
rpggame,pick-sword,0.09245122969150543,Hard Negative (Manipulated Action),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: **Pickup** the sword if present in the room the hero is currently in and the hero is empty handed

Action name: pick-sword


Your answer:

**Explanation:**

Imagine you're helping a hero navigate through a tricky dungeon filled with different challenges. The hero's objective is to escape, but along the way, they might find useful items like swords that can help protect against monsters.

In our scenario, the action of picking up a sword is crucial. Let's think of it like this: if you enter a room and see a sword on the floor while your hands are free, you can pick it up. The action schema in PDDL, which is a way to represent planning problems, explains this in a structured format.

The preconditions for our action ""pick-sword"" are:
1. **The hero must be in the same room as the sword** (represented as `(at-hero ?loc)` and `(at-sword ?s ?loc)`). This makes sense because you can't pick up something that's not in the same room as you.
2. **The hero's hand must be free** (`(arm-free)`). Just like you can't hold two grocery bags in one hand easily, our hero needs a free hand to pick up the sword.

The effects after the hero picks up the sword are:
1. **The hero is now holding the sword** (`(holding ?s)`). This indicates that the hero has successfully picked up the sword.
2. **The sword is no longer in its original place** (`(not (at-sword ?s ?loc))`). Just like if you take an apple from a basket, the apple isn't in the basket anymore.
3. **The hero's hand is no longer free** (`(not (arm-free))`). Holding the sword means the hand that was free is now occupied.

This action schema is a simple way to model the interaction between the hero and the sword in the dungeon. It helps ensure that all necessary conditions are met before the action takes place, making the hero's journey through the dungeon logical and structured. This way, the hero doesn't magically have a sword without picking it up or has two items in one hand, which keeps our dungeon adventure realistic and understandable.","Parameters:
1. ?loc - cells
2. ?s - swords

Preconditions:
```
(and
    (not (arm-free))
    (at-sword ?s ?loc)
    (arm-free)
)
```

Effects:
```
(and
    (at-hero ?loc)
    (holding ?s)
    (not (at-sword ?s ?loc))
)
```
","(:action pick-sword
    :parameters (?loc - cells ?s - swords)
    :precondition (and (at-hero ?loc) (at-sword ?s ?loc) (arm-free))
    :effect (and (holding ?s) (not (at-sword ?s ?loc)) (not (arm-free)))
)","swap (at-hero ?loc) with (not (arm-free))
"
rpggame,pick-sword,0.18085554242134094,Hard Negative (Manipulated Action),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: **Pickup** the sword if present in the room the hero is currently in and the hero is empty handed

Action name: pick-sword


Your answer:

**Explanation:**

Imagine you're helping a hero navigate through a tricky dungeon filled with different challenges. The hero's objective is to escape, but along the way, they might find useful items like swords that can help protect against monsters.

In our scenario, the action of picking up a sword is crucial. Let's think of it like this: if you enter a room and see a sword on the floor while your hands are free, you can pick it up. The action schema in PDDL, which is a way to represent planning problems, explains this in a structured format.

The preconditions for our action ""pick-sword"" are:
1. **The hero must be in the same room as the sword** (represented as `(at-hero ?loc)` and `(at-sword ?s ?loc)`). This makes sense because you can't pick up something that's not in the same room as you.
2. **The hero's hand must be free** (`(arm-free)`). Just like you can't hold two grocery bags in one hand easily, our hero needs a free hand to pick up the sword.

The effects after the hero picks up the sword are:
1. **The hero is now holding the sword** (`(holding ?s)`). This indicates that the hero has successfully picked up the sword.
2. **The sword is no longer in its original place** (`(not (at-sword ?s ?loc))`). Just like if you take an apple from a basket, the apple isn't in the basket anymore.
3. **The hero's hand is no longer free** (`(not (arm-free))`). Holding the sword means the hand that was free is now occupied.

This action schema is a simple way to model the interaction between the hero and the sword in the dungeon. It helps ensure that all necessary conditions are met before the action takes place, making the hero's journey through the dungeon logical and structured. This way, the hero doesn't magically have a sword without picking it up or has two items in one hand, which keeps our dungeon adventure realistic and understandable.","Parameters:
1. ?loc - cells
2. ?s - swords

Preconditions:
```
(and
    (at-hero ?loc)
    (at-sword ?s ?loc)
)
```

Effects:
```
(and
    (at-sword ?s ?loc)
    (holding ?s)
    (not (arm-free))
)
```
","(:action pick-sword
    :parameters (?loc - cells ?s - swords)
    :precondition (and (at-hero ?loc) (at-sword ?s ?loc) (arm-free))
    :effect (and (holding ?s) (not (at-sword ?s ?loc)) (not (arm-free)))
)","remove (arm-free) from preconditions
negate (not (at-sword ?s ?loc)) in effects
"
rpggame,pick-sword,0.2436251938343048,Hard Negative (Manipulated Action),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: **Pickup** the sword if present in the room the hero is currently in and the hero is empty handed

Action name: pick-sword


Your answer:

**Explanation:**

Imagine you're helping a hero navigate through a tricky dungeon filled with different challenges. The hero's objective is to escape, but along the way, they might find useful items like swords that can help protect against monsters.

In our scenario, the action of picking up a sword is crucial. Let's think of it like this: if you enter a room and see a sword on the floor while your hands are free, you can pick it up. The action schema in PDDL, which is a way to represent planning problems, explains this in a structured format.

The preconditions for our action ""pick-sword"" are:
1. **The hero must be in the same room as the sword** (represented as `(at-hero ?loc)` and `(at-sword ?s ?loc)`). This makes sense because you can't pick up something that's not in the same room as you.
2. **The hero's hand must be free** (`(arm-free)`). Just like you can't hold two grocery bags in one hand easily, our hero needs a free hand to pick up the sword.

The effects after the hero picks up the sword are:
1. **The hero is now holding the sword** (`(holding ?s)`). This indicates that the hero has successfully picked up the sword.
2. **The sword is no longer in its original place** (`(not (at-sword ?s ?loc))`). Just like if you take an apple from a basket, the apple isn't in the basket anymore.
3. **The hero's hand is no longer free** (`(not (arm-free))`). Holding the sword means the hand that was free is now occupied.

This action schema is a simple way to model the interaction between the hero and the sword in the dungeon. It helps ensure that all necessary conditions are met before the action takes place, making the hero's journey through the dungeon logical and structured. This way, the hero doesn't magically have a sword without picking it up or has two items in one hand, which keeps our dungeon adventure realistic and understandable.","Parameters:
1. ?loc - cells
2. ?s - swords

Preconditions:
```
(and
    (at-hero ?loc)
    (arm-free)
)
```

Effects:
```
(and
    (holding ?s)
    (not (at-sword ?s ?loc))
    (not (arm-free))
)
```
","(:action pick-sword
    :parameters (?loc - cells ?s - swords)
    :precondition (and (at-hero ?loc) (at-sword ?s ?loc) (arm-free))
    :effect (and (holding ?s) (not (at-sword ?s ?loc)) (not (arm-free)))
)","remove (at-sword ?s ?loc) from preconditions
"
rpggame,pick-sword,0.12203969806432724,Hard Negative (Manipulated Action),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: **Pickup** the sword if present in the room the hero is currently in and the hero is empty handed

Action name: pick-sword


Your answer:

**Explanation:**

Imagine you're helping a hero navigate through a tricky dungeon filled with different challenges. The hero's objective is to escape, but along the way, they might find useful items like swords that can help protect against monsters.

In our scenario, the action of picking up a sword is crucial. Let's think of it like this: if you enter a room and see a sword on the floor while your hands are free, you can pick it up. The action schema in PDDL, which is a way to represent planning problems, explains this in a structured format.

The preconditions for our action ""pick-sword"" are:
1. **The hero must be in the same room as the sword** (represented as `(at-hero ?loc)` and `(at-sword ?s ?loc)`). This makes sense because you can't pick up something that's not in the same room as you.
2. **The hero's hand must be free** (`(arm-free)`). Just like you can't hold two grocery bags in one hand easily, our hero needs a free hand to pick up the sword.

The effects after the hero picks up the sword are:
1. **The hero is now holding the sword** (`(holding ?s)`). This indicates that the hero has successfully picked up the sword.
2. **The sword is no longer in its original place** (`(not (at-sword ?s ?loc))`). Just like if you take an apple from a basket, the apple isn't in the basket anymore.
3. **The hero's hand is no longer free** (`(not (arm-free))`). Holding the sword means the hand that was free is now occupied.

This action schema is a simple way to model the interaction between the hero and the sword in the dungeon. It helps ensure that all necessary conditions are met before the action takes place, making the hero's journey through the dungeon logical and structured. This way, the hero doesn't magically have a sword without picking it up or has two items in one hand, which keeps our dungeon adventure realistic and understandable.","Parameters:
1. ?loc - cells
2. ?s - swords

Preconditions:
```
(and
    (not (at-sword ?s ?loc))
    (at-sword ?s ?loc)
    (arm-free)
)
```

Effects:
```
(and
    (at-hero ?loc)
    (holding ?s)
    (not (arm-free))
)
```
","(:action pick-sword
    :parameters (?loc - cells ?s - swords)
    :precondition (and (at-hero ?loc) (at-sword ?s ?loc) (arm-free))
    :effect (and (holding ?s) (not (at-sword ?s ?loc)) (not (arm-free)))
)","swap (at-hero ?loc) with (not (at-sword ?s ?loc))
"
rpggame,pick-sword,0.1773907095193863,Hard Negative (Manipulated Action),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: **Pickup** the sword if present in the room the hero is currently in and the hero is empty handed

Action name: pick-sword


Your answer:

**Explanation:**

Imagine you're helping a hero navigate through a tricky dungeon filled with different challenges. The hero's objective is to escape, but along the way, they might find useful items like swords that can help protect against monsters.

In our scenario, the action of picking up a sword is crucial. Let's think of it like this: if you enter a room and see a sword on the floor while your hands are free, you can pick it up. The action schema in PDDL, which is a way to represent planning problems, explains this in a structured format.

The preconditions for our action ""pick-sword"" are:
1. **The hero must be in the same room as the sword** (represented as `(at-hero ?loc)` and `(at-sword ?s ?loc)`). This makes sense because you can't pick up something that's not in the same room as you.
2. **The hero's hand must be free** (`(arm-free)`). Just like you can't hold two grocery bags in one hand easily, our hero needs a free hand to pick up the sword.

The effects after the hero picks up the sword are:
1. **The hero is now holding the sword** (`(holding ?s)`). This indicates that the hero has successfully picked up the sword.
2. **The sword is no longer in its original place** (`(not (at-sword ?s ?loc))`). Just like if you take an apple from a basket, the apple isn't in the basket anymore.
3. **The hero's hand is no longer free** (`(not (arm-free))`). Holding the sword means the hand that was free is now occupied.

This action schema is a simple way to model the interaction between the hero and the sword in the dungeon. It helps ensure that all necessary conditions are met before the action takes place, making the hero's journey through the dungeon logical and structured. This way, the hero doesn't magically have a sword without picking it up or has two items in one hand, which keeps our dungeon adventure realistic and understandable.","Parameters:
1. ?loc - cells
2. ?s - swords

Preconditions:
```
(and
    (at-hero ?loc)
    (at-sword ?s ?loc)
    (arm-free)
)
```

Effects:
```
(and
    (holding ?s)
    (not (arm-free))
)
```
","(:action pick-sword
    :parameters (?loc - cells ?s - swords)
    :precondition (and (at-hero ?loc) (at-sword ?s ?loc) (arm-free))
    :effect (and (holding ?s) (not (at-sword ?s ?loc)) (not (arm-free)))
)","remove (not (at-sword ?s ?loc)) from effects
"
rpggame,pick-sword,0.26438823342323303,Hard Negative (Manipulated Action),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: **Pickup** the sword if present in the room the hero is currently in and the hero is empty handed

Action name: pick-sword


Your answer:

**Explanation:**

Imagine you're helping a hero navigate through a tricky dungeon filled with different challenges. The hero's objective is to escape, but along the way, they might find useful items like swords that can help protect against monsters.

In our scenario, the action of picking up a sword is crucial. Let's think of it like this: if you enter a room and see a sword on the floor while your hands are free, you can pick it up. The action schema in PDDL, which is a way to represent planning problems, explains this in a structured format.

The preconditions for our action ""pick-sword"" are:
1. **The hero must be in the same room as the sword** (represented as `(at-hero ?loc)` and `(at-sword ?s ?loc)`). This makes sense because you can't pick up something that's not in the same room as you.
2. **The hero's hand must be free** (`(arm-free)`). Just like you can't hold two grocery bags in one hand easily, our hero needs a free hand to pick up the sword.

The effects after the hero picks up the sword are:
1. **The hero is now holding the sword** (`(holding ?s)`). This indicates that the hero has successfully picked up the sword.
2. **The sword is no longer in its original place** (`(not (at-sword ?s ?loc))`). Just like if you take an apple from a basket, the apple isn't in the basket anymore.
3. **The hero's hand is no longer free** (`(not (arm-free))`). Holding the sword means the hand that was free is now occupied.

This action schema is a simple way to model the interaction between the hero and the sword in the dungeon. It helps ensure that all necessary conditions are met before the action takes place, making the hero's journey through the dungeon logical and structured. This way, the hero doesn't magically have a sword without picking it up or has two items in one hand, which keeps our dungeon adventure realistic and understandable.","Parameters:
1. ?loc - cells
2. ?s - swords

Preconditions:
```
(and
    (at-hero ?loc)
    (at-sword ?s ?loc)
)
```

Effects:
```
(and
    (arm-free)
    (holding ?s)
    (not (at-sword ?s ?loc))
)
```
","(:action pick-sword
    :parameters (?loc - cells ?s - swords)
    :precondition (and (at-hero ?loc) (at-sword ?s ?loc) (arm-free))
    :effect (and (holding ?s) (not (at-sword ?s ?loc)) (not (arm-free)))
)","remove (arm-free) from preconditions
negate (not (arm-free)) in effects
"
rpggame,pick-sword,0.1151055097579956,Hard Negative (Manipulated Action),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: **Pickup** the sword if present in the room the hero is currently in and the hero is empty handed

Action name: pick-sword


Your answer:

**Explanation:**

Imagine you're helping a hero navigate through a tricky dungeon filled with different challenges. The hero's objective is to escape, but along the way, they might find useful items like swords that can help protect against monsters.

In our scenario, the action of picking up a sword is crucial. Let's think of it like this: if you enter a room and see a sword on the floor while your hands are free, you can pick it up. The action schema in PDDL, which is a way to represent planning problems, explains this in a structured format.

The preconditions for our action ""pick-sword"" are:
1. **The hero must be in the same room as the sword** (represented as `(at-hero ?loc)` and `(at-sword ?s ?loc)`). This makes sense because you can't pick up something that's not in the same room as you.
2. **The hero's hand must be free** (`(arm-free)`). Just like you can't hold two grocery bags in one hand easily, our hero needs a free hand to pick up the sword.

The effects after the hero picks up the sword are:
1. **The hero is now holding the sword** (`(holding ?s)`). This indicates that the hero has successfully picked up the sword.
2. **The sword is no longer in its original place** (`(not (at-sword ?s ?loc))`). Just like if you take an apple from a basket, the apple isn't in the basket anymore.
3. **The hero's hand is no longer free** (`(not (arm-free))`). Holding the sword means the hand that was free is now occupied.

This action schema is a simple way to model the interaction between the hero and the sword in the dungeon. It helps ensure that all necessary conditions are met before the action takes place, making the hero's journey through the dungeon logical and structured. This way, the hero doesn't magically have a sword without picking it up or has two items in one hand, which keeps our dungeon adventure realistic and understandable.","Parameters:
1. ?loc - cells
2. ?s - swords

Preconditions:
```
(and
    (not (at-sword ?s ?loc))
    (at-hero ?loc)
    (arm-free)
)
```

Effects:
```
(and
    (holding ?s)
    (not (at-sword ?s ?loc))
    (not (arm-free))
)
```
","(:action pick-sword
    :parameters (?loc - cells ?s - swords)
    :precondition (and (at-hero ?loc) (at-sword ?s ?loc) (arm-free))
    :effect (and (holding ?s) (not (at-sword ?s ?loc)) (not (arm-free)))
)","negate (at-sword ?s ?loc) in preconditions
"
rpggame,pick-sword,0.09370662271976471,Hard Negative (Manipulated Action),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: **Pickup** the sword if present in the room the hero is currently in and the hero is empty handed

Action name: pick-sword


Your answer:

**Explanation:**

Imagine you're helping a hero navigate through a tricky dungeon filled with different challenges. The hero's objective is to escape, but along the way, they might find useful items like swords that can help protect against monsters.

In our scenario, the action of picking up a sword is crucial. Let's think of it like this: if you enter a room and see a sword on the floor while your hands are free, you can pick it up. The action schema in PDDL, which is a way to represent planning problems, explains this in a structured format.

The preconditions for our action ""pick-sword"" are:
1. **The hero must be in the same room as the sword** (represented as `(at-hero ?loc)` and `(at-sword ?s ?loc)`). This makes sense because you can't pick up something that's not in the same room as you.
2. **The hero's hand must be free** (`(arm-free)`). Just like you can't hold two grocery bags in one hand easily, our hero needs a free hand to pick up the sword.

The effects after the hero picks up the sword are:
1. **The hero is now holding the sword** (`(holding ?s)`). This indicates that the hero has successfully picked up the sword.
2. **The sword is no longer in its original place** (`(not (at-sword ?s ?loc))`). Just like if you take an apple from a basket, the apple isn't in the basket anymore.
3. **The hero's hand is no longer free** (`(not (arm-free))`). Holding the sword means the hand that was free is now occupied.

This action schema is a simple way to model the interaction between the hero and the sword in the dungeon. It helps ensure that all necessary conditions are met before the action takes place, making the hero's journey through the dungeon logical and structured. This way, the hero doesn't magically have a sword without picking it up or has two items in one hand, which keeps our dungeon adventure realistic and understandable.","Parameters:
1. ?loc - cells
2. ?s - swords

Preconditions:
```
(and
    (not (arm-free))
    (not (at-sword ?s ?loc))
    (at-hero ?loc)
)
```

Effects:
```
(and
    (holding ?s)
    (not (at-sword ?s ?loc))
    (not (arm-free))
)
```
","(:action pick-sword
    :parameters (?loc - cells ?s - swords)
    :precondition (and (at-hero ?loc) (at-sword ?s ?loc) (arm-free))
    :effect (and (holding ?s) (not (at-sword ?s ?loc)) (not (arm-free)))
)","negate (arm-free) in preconditions
negate (at-sword ?s ?loc) in preconditions
"
rpggame,pick-sword,0.2837202548980713,Hard Negative (Manipulated Action),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: **Pickup** the sword if present in the room the hero is currently in and the hero is empty handed

Action name: pick-sword


Your answer:

**Explanation:**

Imagine you're helping a hero navigate through a tricky dungeon filled with different challenges. The hero's objective is to escape, but along the way, they might find useful items like swords that can help protect against monsters.

In our scenario, the action of picking up a sword is crucial. Let's think of it like this: if you enter a room and see a sword on the floor while your hands are free, you can pick it up. The action schema in PDDL, which is a way to represent planning problems, explains this in a structured format.

The preconditions for our action ""pick-sword"" are:
1. **The hero must be in the same room as the sword** (represented as `(at-hero ?loc)` and `(at-sword ?s ?loc)`). This makes sense because you can't pick up something that's not in the same room as you.
2. **The hero's hand must be free** (`(arm-free)`). Just like you can't hold two grocery bags in one hand easily, our hero needs a free hand to pick up the sword.

The effects after the hero picks up the sword are:
1. **The hero is now holding the sword** (`(holding ?s)`). This indicates that the hero has successfully picked up the sword.
2. **The sword is no longer in its original place** (`(not (at-sword ?s ?loc))`). Just like if you take an apple from a basket, the apple isn't in the basket anymore.
3. **The hero's hand is no longer free** (`(not (arm-free))`). Holding the sword means the hand that was free is now occupied.

This action schema is a simple way to model the interaction between the hero and the sword in the dungeon. It helps ensure that all necessary conditions are met before the action takes place, making the hero's journey through the dungeon logical and structured. This way, the hero doesn't magically have a sword without picking it up or has two items in one hand, which keeps our dungeon adventure realistic and understandable.","Parameters:
1. ?loc - cells
2. ?s - swords

Preconditions:
```
(and
    (holding ?s)
    (at-sword ?s ?loc)
    (arm-free)
)
```

Effects:
```
(and
    (at-hero ?loc)
    (not (at-sword ?s ?loc))
    (not (arm-free))
)
```
","(:action pick-sword
    :parameters (?loc - cells ?s - swords)
    :precondition (and (at-hero ?loc) (at-sword ?s ?loc) (arm-free))
    :effect (and (holding ?s) (not (at-sword ?s ?loc)) (not (arm-free)))
)","swap (at-hero ?loc) with (holding ?s)
"
rpggame,pick-sword,0.49625474214553833,Hard Negative (Manipulated Action),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: **Pickup** the sword if present in the room the hero is currently in and the hero is empty handed

Action name: pick-sword


Your answer:
","**Explanation:**

Imagine you're helping a hero navigate through a tricky dungeon filled with different challenges. The hero's objective is to escape, but along the way, they might find useful items like swords that can help protect against monsters.

In our scenario, the action of picking up a sword is crucial. Let's think of it like this: if you enter a room and see a sword on the floor while your hands are free, you can pick it up. The action schema in PDDL, which is a way to represent planning problems, explains this in a structured format.

The preconditions for our action ""pick-sword"" are:
1. **The hero must be in the same room as the sword** (represented as `(at-hero ?loc)` and `(at-sword ?s ?loc)`). This makes sense because you can't pick up something that's not in the same room as you.
2. **The hero's hand must be free** (`(arm-free)`). Just like you can't hold two grocery bags in one hand easily, our hero needs a free hand to pick up the sword.

The effects after the hero picks up the sword are:
1. **The hero is now holding the sword** (`(holding ?s)`). This indicates that the hero has successfully picked up the sword.
2. **The sword is no longer in its original place** (`(not (at-sword ?s ?loc))`). Just like if you take an apple from a basket, the apple isn't in the basket anymore.
3. **The hero's hand is no longer free** (`(not (arm-free))`). Holding the sword means the hand that was free is now occupied.

This action schema is a simple way to model the interaction between the hero and the sword in the dungeon. It helps ensure that all necessary conditions are met before the action takes place, making the hero's journey through the dungeon logical and structured. This way, the hero doesn't magically have a sword without picking it up or has two items in one hand, which keeps our dungeon adventure realistic and understandable.
Parameters:
1. ?loc - cells
2. ?s - swords

Preconditions:
```
(and
    (not (arm-free))
    (at-hero ?loc)
    (at-sword ?s ?loc)
)
```

Effects:
```
(and
    (holding ?s)
    (not (at-sword ?s ?loc))
    (not (arm-free))
)
```
","(:action pick-sword
    :parameters (?loc - cells ?s - swords)
    :precondition (and (at-hero ?loc) (at-sword ?s ?loc) (arm-free))
    :effect (and (holding ?s) (not (at-sword ?s ?loc)) (not (arm-free)))
)","negate (arm-free) in preconditions
"
rpggame,pick-sword,0.49625474214553833,Hard Negative (Manipulated Action),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: **Pickup** the sword if present in the room the hero is currently in and the hero is empty handed

Action name: pick-sword


Your answer:
","**Explanation:**

Imagine you're helping a hero navigate through a tricky dungeon filled with different challenges. The hero's objective is to escape, but along the way, they might find useful items like swords that can help protect against monsters.

In our scenario, the action of picking up a sword is crucial. Let's think of it like this: if you enter a room and see a sword on the floor while your hands are free, you can pick it up. The action schema in PDDL, which is a way to represent planning problems, explains this in a structured format.

The preconditions for our action ""pick-sword"" are:
1. **The hero must be in the same room as the sword** (represented as `(at-hero ?loc)` and `(at-sword ?s ?loc)`). This makes sense because you can't pick up something that's not in the same room as you.
2. **The hero's hand must be free** (`(arm-free)`). Just like you can't hold two grocery bags in one hand easily, our hero needs a free hand to pick up the sword.

The effects after the hero picks up the sword are:
1. **The hero is now holding the sword** (`(holding ?s)`). This indicates that the hero has successfully picked up the sword.
2. **The sword is no longer in its original place** (`(not (at-sword ?s ?loc))`). Just like if you take an apple from a basket, the apple isn't in the basket anymore.
3. **The hero's hand is no longer free** (`(not (arm-free))`). Holding the sword means the hand that was free is now occupied.

This action schema is a simple way to model the interaction between the hero and the sword in the dungeon. It helps ensure that all necessary conditions are met before the action takes place, making the hero's journey through the dungeon logical and structured. This way, the hero doesn't magically have a sword without picking it up or has two items in one hand, which keeps our dungeon adventure realistic and understandable.
Parameters:
1. ?loc - cells
2. ?s - swords

Preconditions:
```
(and
    (not (arm-free))
    (at-sword ?s ?loc)
    (arm-free)
)
```

Effects:
```
(and
    (at-hero ?loc)
    (holding ?s)
    (not (at-sword ?s ?loc))
)
```
","(:action pick-sword
    :parameters (?loc - cells ?s - swords)
    :precondition (and (at-hero ?loc) (at-sword ?s ?loc) (arm-free))
    :effect (and (holding ?s) (not (at-sword ?s ?loc)) (not (arm-free)))
)","swap (at-hero ?loc) with (not (arm-free))
"
rpggame,pick-sword,0.49625474214553833,Hard Negative (Manipulated Action),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: **Pickup** the sword if present in the room the hero is currently in and the hero is empty handed

Action name: pick-sword


Your answer:
","**Explanation:**

Imagine you're helping a hero navigate through a tricky dungeon filled with different challenges. The hero's objective is to escape, but along the way, they might find useful items like swords that can help protect against monsters.

In our scenario, the action of picking up a sword is crucial. Let's think of it like this: if you enter a room and see a sword on the floor while your hands are free, you can pick it up. The action schema in PDDL, which is a way to represent planning problems, explains this in a structured format.

The preconditions for our action ""pick-sword"" are:
1. **The hero must be in the same room as the sword** (represented as `(at-hero ?loc)` and `(at-sword ?s ?loc)`). This makes sense because you can't pick up something that's not in the same room as you.
2. **The hero's hand must be free** (`(arm-free)`). Just like you can't hold two grocery bags in one hand easily, our hero needs a free hand to pick up the sword.

The effects after the hero picks up the sword are:
1. **The hero is now holding the sword** (`(holding ?s)`). This indicates that the hero has successfully picked up the sword.
2. **The sword is no longer in its original place** (`(not (at-sword ?s ?loc))`). Just like if you take an apple from a basket, the apple isn't in the basket anymore.
3. **The hero's hand is no longer free** (`(not (arm-free))`). Holding the sword means the hand that was free is now occupied.

This action schema is a simple way to model the interaction between the hero and the sword in the dungeon. It helps ensure that all necessary conditions are met before the action takes place, making the hero's journey through the dungeon logical and structured. This way, the hero doesn't magically have a sword without picking it up or has two items in one hand, which keeps our dungeon adventure realistic and understandable.
Parameters:
1. ?loc - cells
2. ?s - swords

Preconditions:
```
(and
    (not (at-sword ?s ?loc))
    (not (arm-free))
    (at-hero ?loc)
)
```

Effects:
```
(and
    (arm-free)
    (holding ?s)
    (not (at-sword ?s ?loc))
)
```
","(:action pick-sword
    :parameters (?loc - cells ?s - swords)
    :precondition (and (at-hero ?loc) (at-sword ?s ?loc) (arm-free))
    :effect (and (holding ?s) (not (at-sword ?s ?loc)) (not (arm-free)))
)","negate (at-sword ?s ?loc) in preconditions
swap (arm-free) with (not (arm-free))
"
rpggame,pick-sword,0.49625474214553833,Hard Negative (Manipulated Action),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: **Pickup** the sword if present in the room the hero is currently in and the hero is empty handed

Action name: pick-sword


Your answer:
","**Explanation:**

Imagine you're helping a hero navigate through a tricky dungeon filled with different challenges. The hero's objective is to escape, but along the way, they might find useful items like swords that can help protect against monsters.

In our scenario, the action of picking up a sword is crucial. Let's think of it like this: if you enter a room and see a sword on the floor while your hands are free, you can pick it up. The action schema in PDDL, which is a way to represent planning problems, explains this in a structured format.

The preconditions for our action ""pick-sword"" are:
1. **The hero must be in the same room as the sword** (represented as `(at-hero ?loc)` and `(at-sword ?s ?loc)`). This makes sense because you can't pick up something that's not in the same room as you.
2. **The hero's hand must be free** (`(arm-free)`). Just like you can't hold two grocery bags in one hand easily, our hero needs a free hand to pick up the sword.

The effects after the hero picks up the sword are:
1. **The hero is now holding the sword** (`(holding ?s)`). This indicates that the hero has successfully picked up the sword.
2. **The sword is no longer in its original place** (`(not (at-sword ?s ?loc))`). Just like if you take an apple from a basket, the apple isn't in the basket anymore.
3. **The hero's hand is no longer free** (`(not (arm-free))`). Holding the sword means the hand that was free is now occupied.

This action schema is a simple way to model the interaction between the hero and the sword in the dungeon. It helps ensure that all necessary conditions are met before the action takes place, making the hero's journey through the dungeon logical and structured. This way, the hero doesn't magically have a sword without picking it up or has two items in one hand, which keeps our dungeon adventure realistic and understandable.
Parameters:
1. ?loc - cells
2. ?s - swords

Preconditions:
```
(and
    (not (at-sword ?s ?loc))
    (at-hero ?loc)
    (arm-free)
)
```

Effects:
```
(and
    (at-sword ?s ?loc)
    (holding ?s)
    (not (arm-free))
)
```
","(:action pick-sword
    :parameters (?loc - cells ?s - swords)
    :precondition (and (at-hero ?loc) (at-sword ?s ?loc) (arm-free))
    :effect (and (holding ?s) (not (at-sword ?s ?loc)) (not (arm-free)))
)","swap (at-sword ?s ?loc) with (not (at-sword ?s ?loc))
"
rpggame,pick-sword,0.49625474214553833,Hard Negative (Manipulated Action),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: **Pickup** the sword if present in the room the hero is currently in and the hero is empty handed

Action name: pick-sword


Your answer:
","**Explanation:**

Imagine you're helping a hero navigate through a tricky dungeon filled with different challenges. The hero's objective is to escape, but along the way, they might find useful items like swords that can help protect against monsters.

In our scenario, the action of picking up a sword is crucial. Let's think of it like this: if you enter a room and see a sword on the floor while your hands are free, you can pick it up. The action schema in PDDL, which is a way to represent planning problems, explains this in a structured format.

The preconditions for our action ""pick-sword"" are:
1. **The hero must be in the same room as the sword** (represented as `(at-hero ?loc)` and `(at-sword ?s ?loc)`). This makes sense because you can't pick up something that's not in the same room as you.
2. **The hero's hand must be free** (`(arm-free)`). Just like you can't hold two grocery bags in one hand easily, our hero needs a free hand to pick up the sword.

The effects after the hero picks up the sword are:
1. **The hero is now holding the sword** (`(holding ?s)`). This indicates that the hero has successfully picked up the sword.
2. **The sword is no longer in its original place** (`(not (at-sword ?s ?loc))`). Just like if you take an apple from a basket, the apple isn't in the basket anymore.
3. **The hero's hand is no longer free** (`(not (arm-free))`). Holding the sword means the hand that was free is now occupied.

This action schema is a simple way to model the interaction between the hero and the sword in the dungeon. It helps ensure that all necessary conditions are met before the action takes place, making the hero's journey through the dungeon logical and structured. This way, the hero doesn't magically have a sword without picking it up or has two items in one hand, which keeps our dungeon adventure realistic and understandable.
Parameters:
1. ?loc - cells
2. ?s - swords

Preconditions:
```
(and
    (at-hero ?loc)
    (at-sword ?s ?loc)
    (arm-free)
)
```

Effects:
```
(and
    (not (holding ?s))
    (not (at-sword ?s ?loc))
)
```
","(:action pick-sword
    :parameters (?loc - cells ?s - swords)
    :precondition (and (at-hero ?loc) (at-sword ?s ?loc) (arm-free))
    :effect (and (holding ?s) (not (at-sword ?s ?loc)) (not (arm-free)))
)","negate (holding ?s) in effects
remove (not (arm-free)) from effects
"
rpggame,pick-sword,0.49625474214553833,Hard Negative (Manipulated Action),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: **Pickup** the sword if present in the room the hero is currently in and the hero is empty handed

Action name: pick-sword


Your answer:
","**Explanation:**

Imagine you're helping a hero navigate through a tricky dungeon filled with different challenges. The hero's objective is to escape, but along the way, they might find useful items like swords that can help protect against monsters.

In our scenario, the action of picking up a sword is crucial. Let's think of it like this: if you enter a room and see a sword on the floor while your hands are free, you can pick it up. The action schema in PDDL, which is a way to represent planning problems, explains this in a structured format.

The preconditions for our action ""pick-sword"" are:
1. **The hero must be in the same room as the sword** (represented as `(at-hero ?loc)` and `(at-sword ?s ?loc)`). This makes sense because you can't pick up something that's not in the same room as you.
2. **The hero's hand must be free** (`(arm-free)`). Just like you can't hold two grocery bags in one hand easily, our hero needs a free hand to pick up the sword.

The effects after the hero picks up the sword are:
1. **The hero is now holding the sword** (`(holding ?s)`). This indicates that the hero has successfully picked up the sword.
2. **The sword is no longer in its original place** (`(not (at-sword ?s ?loc))`). Just like if you take an apple from a basket, the apple isn't in the basket anymore.
3. **The hero's hand is no longer free** (`(not (arm-free))`). Holding the sword means the hand that was free is now occupied.

This action schema is a simple way to model the interaction between the hero and the sword in the dungeon. It helps ensure that all necessary conditions are met before the action takes place, making the hero's journey through the dungeon logical and structured. This way, the hero doesn't magically have a sword without picking it up or has two items in one hand, which keeps our dungeon adventure realistic and understandable.
Parameters:
1. ?loc - cells
2. ?s - swords

Preconditions:
```
(and
    (at-hero ?loc)
    (at-sword ?s ?loc)
)
```

Effects:
```
(and
    (holding ?s)
    (not (at-sword ?s ?loc))
    (not (arm-free))
)
```
","(:action pick-sword
    :parameters (?loc - cells ?s - swords)
    :precondition (and (at-hero ?loc) (at-sword ?s ?loc) (arm-free))
    :effect (and (holding ?s) (not (at-sword ?s ?loc)) (not (arm-free)))
)","remove (arm-free) from preconditions
"
rpggame,pick-sword,0.49625474214553833,Hard Negative (Manipulated Action),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: **Pickup** the sword if present in the room the hero is currently in and the hero is empty handed

Action name: pick-sword


Your answer:
","**Explanation:**

Imagine you're helping a hero navigate through a tricky dungeon filled with different challenges. The hero's objective is to escape, but along the way, they might find useful items like swords that can help protect against monsters.

In our scenario, the action of picking up a sword is crucial. Let's think of it like this: if you enter a room and see a sword on the floor while your hands are free, you can pick it up. The action schema in PDDL, which is a way to represent planning problems, explains this in a structured format.

The preconditions for our action ""pick-sword"" are:
1. **The hero must be in the same room as the sword** (represented as `(at-hero ?loc)` and `(at-sword ?s ?loc)`). This makes sense because you can't pick up something that's not in the same room as you.
2. **The hero's hand must be free** (`(arm-free)`). Just like you can't hold two grocery bags in one hand easily, our hero needs a free hand to pick up the sword.

The effects after the hero picks up the sword are:
1. **The hero is now holding the sword** (`(holding ?s)`). This indicates that the hero has successfully picked up the sword.
2. **The sword is no longer in its original place** (`(not (at-sword ?s ?loc))`). Just like if you take an apple from a basket, the apple isn't in the basket anymore.
3. **The hero's hand is no longer free** (`(not (arm-free))`). Holding the sword means the hand that was free is now occupied.

This action schema is a simple way to model the interaction between the hero and the sword in the dungeon. It helps ensure that all necessary conditions are met before the action takes place, making the hero's journey through the dungeon logical and structured. This way, the hero doesn't magically have a sword without picking it up or has two items in one hand, which keeps our dungeon adventure realistic and understandable.
Parameters:
1. ?loc - cells
2. ?s - swords

Preconditions:
```
(and
    (not (at-sword ?s ?loc))
    (at-sword ?s ?loc)
    (arm-free)
)
```

Effects:
```
(and
    (at-hero ?loc)
    (holding ?s)
    (not (arm-free))
)
```
","(:action pick-sword
    :parameters (?loc - cells ?s - swords)
    :precondition (and (at-hero ?loc) (at-sword ?s ?loc) (arm-free))
    :effect (and (holding ?s) (not (at-sword ?s ?loc)) (not (arm-free)))
)","swap (at-hero ?loc) with (not (at-sword ?s ?loc))
"
rpggame,pick-sword,0.49625474214553833,Hard Negative (Manipulated Action),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: **Pickup** the sword if present in the room the hero is currently in and the hero is empty handed

Action name: pick-sword


Your answer:
","**Explanation:**

Imagine you're helping a hero navigate through a tricky dungeon filled with different challenges. The hero's objective is to escape, but along the way, they might find useful items like swords that can help protect against monsters.

In our scenario, the action of picking up a sword is crucial. Let's think of it like this: if you enter a room and see a sword on the floor while your hands are free, you can pick it up. The action schema in PDDL, which is a way to represent planning problems, explains this in a structured format.

The preconditions for our action ""pick-sword"" are:
1. **The hero must be in the same room as the sword** (represented as `(at-hero ?loc)` and `(at-sword ?s ?loc)`). This makes sense because you can't pick up something that's not in the same room as you.
2. **The hero's hand must be free** (`(arm-free)`). Just like you can't hold two grocery bags in one hand easily, our hero needs a free hand to pick up the sword.

The effects after the hero picks up the sword are:
1. **The hero is now holding the sword** (`(holding ?s)`). This indicates that the hero has successfully picked up the sword.
2. **The sword is no longer in its original place** (`(not (at-sword ?s ?loc))`). Just like if you take an apple from a basket, the apple isn't in the basket anymore.
3. **The hero's hand is no longer free** (`(not (arm-free))`). Holding the sword means the hand that was free is now occupied.

This action schema is a simple way to model the interaction between the hero and the sword in the dungeon. It helps ensure that all necessary conditions are met before the action takes place, making the hero's journey through the dungeon logical and structured. This way, the hero doesn't magically have a sword without picking it up or has two items in one hand, which keeps our dungeon adventure realistic and understandable.
Parameters:
1. ?loc - cells
2. ?s - swords

Preconditions:
```
(and
    (holding ?s)
    (at-hero ?loc)
    (arm-free)
)
```

Effects:
```
(and
    (arm-free)
    (at-sword ?s ?loc)
    (not (at-sword ?s ?loc))
)
```
","(:action pick-sword
    :parameters (?loc - cells ?s - swords)
    :precondition (and (at-hero ?loc) (at-sword ?s ?loc) (arm-free))
    :effect (and (holding ?s) (not (at-sword ?s ?loc)) (not (arm-free)))
)","negate (not (arm-free)) in effects
swap (at-sword ?s ?loc) with (holding ?s)
"
rpggame,pick-sword,0.49625474214553833,Hard Negative (Manipulated Action),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: **Pickup** the sword if present in the room the hero is currently in and the hero is empty handed

Action name: pick-sword


Your answer:
","**Explanation:**

Imagine you're helping a hero navigate through a tricky dungeon filled with different challenges. The hero's objective is to escape, but along the way, they might find useful items like swords that can help protect against monsters.

In our scenario, the action of picking up a sword is crucial. Let's think of it like this: if you enter a room and see a sword on the floor while your hands are free, you can pick it up. The action schema in PDDL, which is a way to represent planning problems, explains this in a structured format.

The preconditions for our action ""pick-sword"" are:
1. **The hero must be in the same room as the sword** (represented as `(at-hero ?loc)` and `(at-sword ?s ?loc)`). This makes sense because you can't pick up something that's not in the same room as you.
2. **The hero's hand must be free** (`(arm-free)`). Just like you can't hold two grocery bags in one hand easily, our hero needs a free hand to pick up the sword.

The effects after the hero picks up the sword are:
1. **The hero is now holding the sword** (`(holding ?s)`). This indicates that the hero has successfully picked up the sword.
2. **The sword is no longer in its original place** (`(not (at-sword ?s ?loc))`). Just like if you take an apple from a basket, the apple isn't in the basket anymore.
3. **The hero's hand is no longer free** (`(not (arm-free))`). Holding the sword means the hand that was free is now occupied.

This action schema is a simple way to model the interaction between the hero and the sword in the dungeon. It helps ensure that all necessary conditions are met before the action takes place, making the hero's journey through the dungeon logical and structured. This way, the hero doesn't magically have a sword without picking it up or has two items in one hand, which keeps our dungeon adventure realistic and understandable.
Parameters:
1. ?loc - cells
2. ?s - swords

Preconditions:
```
(and
    (holding ?s)
    (at-hero ?loc)
    (at-sword ?s ?loc)
)
```

Effects:
```
(and
    (arm-free)
    (not (at-sword ?s ?loc))
)
```
","(:action pick-sword
    :parameters (?loc - cells ?s - swords)
    :precondition (and (at-hero ?loc) (at-sword ?s ?loc) (arm-free))
    :effect (and (holding ?s) (not (at-sword ?s ?loc)) (not (arm-free)))
)","swap (arm-free) with (holding ?s)
remove (not (arm-free)) from effects
"
rpggame,pick-sword,0.49625474214553833,Hard Negative (Manipulated Action),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: **Pickup** the sword if present in the room the hero is currently in and the hero is empty handed

Action name: pick-sword


Your answer:
","**Explanation:**

Imagine you're helping a hero navigate through a tricky dungeon filled with different challenges. The hero's objective is to escape, but along the way, they might find useful items like swords that can help protect against monsters.

In our scenario, the action of picking up a sword is crucial. Let's think of it like this: if you enter a room and see a sword on the floor while your hands are free, you can pick it up. The action schema in PDDL, which is a way to represent planning problems, explains this in a structured format.

The preconditions for our action ""pick-sword"" are:
1. **The hero must be in the same room as the sword** (represented as `(at-hero ?loc)` and `(at-sword ?s ?loc)`). This makes sense because you can't pick up something that's not in the same room as you.
2. **The hero's hand must be free** (`(arm-free)`). Just like you can't hold two grocery bags in one hand easily, our hero needs a free hand to pick up the sword.

The effects after the hero picks up the sword are:
1. **The hero is now holding the sword** (`(holding ?s)`). This indicates that the hero has successfully picked up the sword.
2. **The sword is no longer in its original place** (`(not (at-sword ?s ?loc))`). Just like if you take an apple from a basket, the apple isn't in the basket anymore.
3. **The hero's hand is no longer free** (`(not (arm-free))`). Holding the sword means the hand that was free is now occupied.

This action schema is a simple way to model the interaction between the hero and the sword in the dungeon. It helps ensure that all necessary conditions are met before the action takes place, making the hero's journey through the dungeon logical and structured. This way, the hero doesn't magically have a sword without picking it up or has two items in one hand, which keeps our dungeon adventure realistic and understandable.
Parameters:
1. ?loc - cells
2. ?s - swords

Preconditions:
```
(and
    (not (arm-free))
    (at-hero ?loc)
    (arm-free)
)
```

Effects:
```
(and
    (at-sword ?s ?loc)
    (at-sword ?s ?loc)
    (holding ?s)
)
```
","(:action pick-sword
    :parameters (?loc - cells ?s - swords)
    :precondition (and (at-hero ?loc) (at-sword ?s ?loc) (arm-free))
    :effect (and (holding ?s) (not (at-sword ?s ?loc)) (not (arm-free)))
)","negate (not (at-sword ?s ?loc)) in effects
swap (at-sword ?s ?loc) with (not (arm-free))
"
rpggame,disarm-trap,0.7996939420700073,Positive (Correct Match),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: **Disarm a trap** – if there is a trap in the room the hero is in and the hero is empty-handed (does not hold a sword), then the hero can disarm it

Action name: disarm-trap


Your answer:
","Parameters:
1. ?loc - cells

Preconditions:
```
(and
    (at-hero ?loc)
    (arm-free)
    (has-trap ?loc)
)
```

Effects:
```
(and
    (trap-disarmed ?loc)
    (not (has-trap ?loc))
)
```
","(:action disarm-trap
    :parameters (?loc - cells)
    :precondition (and (at-hero ?loc) (arm-free) (has-trap ?loc))
    :effect (and (trap-disarmed ?loc) (not (has-trap ?loc)))
)",
rpggame,disarm-trap,0.7996939420700073,Positive (Correct Match),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: **Disarm a trap** – if there is a trap in the room the hero is in and the hero is empty-handed (does not hold a sword), then the hero can disarm it

Action name: disarm-trap


Your answer:

**Explanation:**

Imagine our hero in a dungeon, a place with rooms connected like a spider web. Each room can be just an empty space, or it might have something like a monster, a trap, or even a sword. Somewhere in this maze, there's a special room that has an exit—the ultimate goal for our hero.

Now, let's focus on a specific action our hero might need to take: **disarming a trap**. In our scenario, the hero finds themselves in a room with a trap. The action to disarm this trap is what we need to understand.

The action is named `disarm-trap`. This action, like any other, has specific requirements (preconditions) that must be met before the hero can perform it. These preconditions are:
1. **The hero must be in the same room as the trap.** This makes sense because you can't disarm a trap from another room. It's like needing to be in the kitchen to turn off a stove.
2. **The hero's hand must be free.** This means the hero can’t be holding anything, like a sword. It's a bit like needing both hands free to tie your shoes properly.
3. **There must actually be a trap in the room.** Obviously, the hero can't disarm a trap if there isn't one there!

If all these conditions are met, then the hero can go ahead and disarm the trap. The results (effects) of this action are:
1. **The trap in the room is disarmed.** This means the room is now safe from that trap.
2. **The trap is no longer considered to be in the room.** It's like cleaning up a spill; once it's cleaned, it's not there anymore.

By breaking down the action like this, we see how each condition helps ensure the action can be carried out safely and effectively. It’s just like following a recipe—each ingredient needs to be added at the right time for the dish to come out right!","Parameters:
1. ?loc - cells

Preconditions:
```
(and
    (at-hero ?loc)
    (arm-free)
    (has-trap ?loc)
)
```

Effects:
```
(and
    (trap-disarmed ?loc)
    (not (has-trap ?loc))
)
```
","(:action disarm-trap
    :parameters (?loc - cells)
    :precondition (and (at-hero ?loc) (arm-free) (has-trap ?loc))
    :effect (and (trap-disarmed ?loc) (not (has-trap ?loc)))
)",
rpggame,disarm-trap,0.6990561485290527,Positive (Correct Match),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: **Disarm a trap** – if there is a trap in the room the hero is in and the hero is empty-handed (does not hold a sword), then the hero can disarm it

Action name: disarm-trap


Your answer:
","**Explanation:**

Imagine our hero in a dungeon, a place with rooms connected like a spider web. Each room can be just an empty space, or it might have something like a monster, a trap, or even a sword. Somewhere in this maze, there's a special room that has an exit—the ultimate goal for our hero.

Now, let's focus on a specific action our hero might need to take: **disarming a trap**. In our scenario, the hero finds themselves in a room with a trap. The action to disarm this trap is what we need to understand.

The action is named `disarm-trap`. This action, like any other, has specific requirements (preconditions) that must be met before the hero can perform it. These preconditions are:
1. **The hero must be in the same room as the trap.** This makes sense because you can't disarm a trap from another room. It's like needing to be in the kitchen to turn off a stove.
2. **The hero's hand must be free.** This means the hero can’t be holding anything, like a sword. It's a bit like needing both hands free to tie your shoes properly.
3. **There must actually be a trap in the room.** Obviously, the hero can't disarm a trap if there isn't one there!

If all these conditions are met, then the hero can go ahead and disarm the trap. The results (effects) of this action are:
1. **The trap in the room is disarmed.** This means the room is now safe from that trap.
2. **The trap is no longer considered to be in the room.** It's like cleaning up a spill; once it's cleaned, it's not there anymore.

By breaking down the action like this, we see how each condition helps ensure the action can be carried out safely and effectively. It’s just like following a recipe—each ingredient needs to be added at the right time for the dish to come out right!
Parameters:
1. ?loc - cells

Preconditions:
```
(and
    (at-hero ?loc)
    (arm-free)
    (has-trap ?loc)
)
```

Effects:
```
(and
    (trap-disarmed ?loc)
    (not (has-trap ?loc))
)
```
","(:action disarm-trap
    :parameters (?loc - cells)
    :precondition (and (at-hero ?loc) (arm-free) (has-trap ?loc))
    :effect (and (trap-disarmed ?loc) (not (has-trap ?loc)))
)",
rpggame,disarm-trap,0.055100973695516586,Easy Negative (Inter-Domain Mismatch),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: **Disarm a trap** – if there is a trap in the room the hero is in and the hero is empty-handed (does not hold a sword), then the hero can disarm it

Action name: disarm-trap


Your answer:
","Parameters:
1. ?var0 - moveable
2. ?var1 - agent

Preconditions:
```
(equipped ?var0 ?var1)
```

Effects:
```
(and
    (inventory ?var0)
    (not (equipped ?var0 ?var1))
    (handsfree ?var1)
)
```
","(:action disarm-trap
    :parameters (?loc - cells)
    :precondition (and (at-hero ?loc) (arm-free) (has-trap ?loc))
    :effect (and (trap-disarmed ?loc) (not (has-trap ?loc)))
)",
rpggame,disarm-trap,0.25146690011024475,Easy Negative (Inter-Domain Mismatch),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: **Disarm a trap** – if there is a trap in the room the hero is in and the hero is empty-handed (does not hold a sword), then the hero can disarm it

Action name: disarm-trap


Your answer:
","Parameters:
1. ?var0 - moveable
2. ?var1 - agent
3. ?var2 - moveable

Preconditions:
```
(and
    (hypothetical ?var0)
    (is_log ?var2)
    (equipped ?var2 ?var1)
)
```

Effects:
```
(and
    (inventory ?var0)
    (is_planks ?var0)
    (handsfree ?var1)
    (not (equipped ?var2 ?var1))
    (not (hypothetical ?var0))
    (not (is_log ?var2))
)
```
","(:action disarm-trap
    :parameters (?loc - cells)
    :precondition (and (at-hero ?loc) (arm-free) (has-trap ?loc))
    :effect (and (trap-disarmed ?loc) (not (has-trap ?loc)))
)",
rpggame,disarm-trap,0.08231978118419647,Easy Negative (Inter-Domain Mismatch),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: **Disarm a trap** – if there is a trap in the room the hero is in and the hero is empty-handed (does not hold a sword), then the hero can disarm it

Action name: disarm-trap


Your answer:
","Parameters:
1. ?var0 - static
2. ?var1 - static

Preconditions:
```
(agent_at ?var1)
```

Effects:
```
(and
    (agent_at ?var0)
    (not (agent_at ?var1))
)
```
","(:action disarm-trap
    :parameters (?loc - cells)
    :precondition (and (at-hero ?loc) (arm-free) (has-trap ?loc))
    :effect (and (trap-disarmed ?loc) (not (has-trap ?loc)))
)",
rpggame,disarm-trap,0.16986292600631714,Easy Negative (Inter-Domain Mismatch),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: **Disarm a trap** – if there is a trap in the room the hero is in and the hero is empty-handed (does not hold a sword), then the hero can disarm it

Action name: disarm-trap


Your answer:
","Parameters:
1. ?var0 - moveable
2. ?var1 - agent

Preconditions:
```
(and
    (inventory ?var0)
    (handsfree ?var1)
)
```

Effects:
```
(and
    (equipped ?var0 ?var1)
    (not (handsfree ?var1))
    (not (inventory ?var0))
)
```
","(:action disarm-trap
    :parameters (?loc - cells)
    :precondition (and (at-hero ?loc) (arm-free) (has-trap ?loc))
    :effect (and (trap-disarmed ?loc) (not (has-trap ?loc)))
)",
rpggame,disarm-trap,0.10609016567468643,Easy Negative (Inter-Domain Mismatch),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: **Disarm a trap** – if there is a trap in the room the hero is in and the hero is empty-handed (does not hold a sword), then the hero can disarm it

Action name: disarm-trap


Your answer:
","Parameters:
1. ?var0 - moveable
2. ?var1 - static

Preconditions:
```
(and
    (at ?var0 ?var1)
    (agent_at ?var1)
)
```

Effects:
```
(and
    (inventory ?var0)
    (not (at ?var0 ?var1))
)
```
","(:action disarm-trap
    :parameters (?loc - cells)
    :precondition (and (at-hero ?loc) (arm-free) (has-trap ?loc))
    :effect (and (trap-disarmed ?loc) (not (has-trap ?loc)))
)",
rpggame,disarm-trap,0.055100973695516586,Easy Negative (Inter-Domain Mismatch),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: **Disarm a trap** – if there is a trap in the room the hero is in and the hero is empty-handed (does not hold a sword), then the hero can disarm it

Action name: disarm-trap


Your answer:

**Explanation:**

Imagine our hero in a dungeon, a place with rooms connected like a spider web. Each room can be just an empty space, or it might have something like a monster, a trap, or even a sword. Somewhere in this maze, there's a special room that has an exit—the ultimate goal for our hero.

Now, let's focus on a specific action our hero might need to take: **disarming a trap**. In our scenario, the hero finds themselves in a room with a trap. The action to disarm this trap is what we need to understand.

The action is named `disarm-trap`. This action, like any other, has specific requirements (preconditions) that must be met before the hero can perform it. These preconditions are:
1. **The hero must be in the same room as the trap.** This makes sense because you can't disarm a trap from another room. It's like needing to be in the kitchen to turn off a stove.
2. **The hero's hand must be free.** This means the hero can’t be holding anything, like a sword. It's a bit like needing both hands free to tie your shoes properly.
3. **There must actually be a trap in the room.** Obviously, the hero can't disarm a trap if there isn't one there!

If all these conditions are met, then the hero can go ahead and disarm the trap. The results (effects) of this action are:
1. **The trap in the room is disarmed.** This means the room is now safe from that trap.
2. **The trap is no longer considered to be in the room.** It's like cleaning up a spill; once it's cleaned, it's not there anymore.

By breaking down the action like this, we see how each condition helps ensure the action can be carried out safely and effectively. It’s just like following a recipe—each ingredient needs to be added at the right time for the dish to come out right!","Parameters:
1. ?var0 - moveable
2. ?var1 - agent

Preconditions:
```
(equipped ?var0 ?var1)
```

Effects:
```
(and
    (inventory ?var0)
    (not (equipped ?var0 ?var1))
    (handsfree ?var1)
)
```
","(:action disarm-trap
    :parameters (?loc - cells)
    :precondition (and (at-hero ?loc) (arm-free) (has-trap ?loc))
    :effect (and (trap-disarmed ?loc) (not (has-trap ?loc)))
)",
rpggame,disarm-trap,0.25146690011024475,Easy Negative (Inter-Domain Mismatch),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: **Disarm a trap** – if there is a trap in the room the hero is in and the hero is empty-handed (does not hold a sword), then the hero can disarm it

Action name: disarm-trap


Your answer:

**Explanation:**

Imagine our hero in a dungeon, a place with rooms connected like a spider web. Each room can be just an empty space, or it might have something like a monster, a trap, or even a sword. Somewhere in this maze, there's a special room that has an exit—the ultimate goal for our hero.

Now, let's focus on a specific action our hero might need to take: **disarming a trap**. In our scenario, the hero finds themselves in a room with a trap. The action to disarm this trap is what we need to understand.

The action is named `disarm-trap`. This action, like any other, has specific requirements (preconditions) that must be met before the hero can perform it. These preconditions are:
1. **The hero must be in the same room as the trap.** This makes sense because you can't disarm a trap from another room. It's like needing to be in the kitchen to turn off a stove.
2. **The hero's hand must be free.** This means the hero can’t be holding anything, like a sword. It's a bit like needing both hands free to tie your shoes properly.
3. **There must actually be a trap in the room.** Obviously, the hero can't disarm a trap if there isn't one there!

If all these conditions are met, then the hero can go ahead and disarm the trap. The results (effects) of this action are:
1. **The trap in the room is disarmed.** This means the room is now safe from that trap.
2. **The trap is no longer considered to be in the room.** It's like cleaning up a spill; once it's cleaned, it's not there anymore.

By breaking down the action like this, we see how each condition helps ensure the action can be carried out safely and effectively. It’s just like following a recipe—each ingredient needs to be added at the right time for the dish to come out right!","Parameters:
1. ?var0 - moveable
2. ?var1 - agent
3. ?var2 - moveable

Preconditions:
```
(and
    (hypothetical ?var0)
    (is_log ?var2)
    (equipped ?var2 ?var1)
)
```

Effects:
```
(and
    (inventory ?var0)
    (is_planks ?var0)
    (handsfree ?var1)
    (not (equipped ?var2 ?var1))
    (not (hypothetical ?var0))
    (not (is_log ?var2))
)
```
","(:action disarm-trap
    :parameters (?loc - cells)
    :precondition (and (at-hero ?loc) (arm-free) (has-trap ?loc))
    :effect (and (trap-disarmed ?loc) (not (has-trap ?loc)))
)",
rpggame,disarm-trap,0.08231978118419647,Easy Negative (Inter-Domain Mismatch),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: **Disarm a trap** – if there is a trap in the room the hero is in and the hero is empty-handed (does not hold a sword), then the hero can disarm it

Action name: disarm-trap


Your answer:

**Explanation:**

Imagine our hero in a dungeon, a place with rooms connected like a spider web. Each room can be just an empty space, or it might have something like a monster, a trap, or even a sword. Somewhere in this maze, there's a special room that has an exit—the ultimate goal for our hero.

Now, let's focus on a specific action our hero might need to take: **disarming a trap**. In our scenario, the hero finds themselves in a room with a trap. The action to disarm this trap is what we need to understand.

The action is named `disarm-trap`. This action, like any other, has specific requirements (preconditions) that must be met before the hero can perform it. These preconditions are:
1. **The hero must be in the same room as the trap.** This makes sense because you can't disarm a trap from another room. It's like needing to be in the kitchen to turn off a stove.
2. **The hero's hand must be free.** This means the hero can’t be holding anything, like a sword. It's a bit like needing both hands free to tie your shoes properly.
3. **There must actually be a trap in the room.** Obviously, the hero can't disarm a trap if there isn't one there!

If all these conditions are met, then the hero can go ahead and disarm the trap. The results (effects) of this action are:
1. **The trap in the room is disarmed.** This means the room is now safe from that trap.
2. **The trap is no longer considered to be in the room.** It's like cleaning up a spill; once it's cleaned, it's not there anymore.

By breaking down the action like this, we see how each condition helps ensure the action can be carried out safely and effectively. It’s just like following a recipe—each ingredient needs to be added at the right time for the dish to come out right!","Parameters:
1. ?var0 - static
2. ?var1 - static

Preconditions:
```
(agent_at ?var1)
```

Effects:
```
(and
    (agent_at ?var0)
    (not (agent_at ?var1))
)
```
","(:action disarm-trap
    :parameters (?loc - cells)
    :precondition (and (at-hero ?loc) (arm-free) (has-trap ?loc))
    :effect (and (trap-disarmed ?loc) (not (has-trap ?loc)))
)",
rpggame,disarm-trap,0.16986292600631714,Easy Negative (Inter-Domain Mismatch),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: **Disarm a trap** – if there is a trap in the room the hero is in and the hero is empty-handed (does not hold a sword), then the hero can disarm it

Action name: disarm-trap


Your answer:

**Explanation:**

Imagine our hero in a dungeon, a place with rooms connected like a spider web. Each room can be just an empty space, or it might have something like a monster, a trap, or even a sword. Somewhere in this maze, there's a special room that has an exit—the ultimate goal for our hero.

Now, let's focus on a specific action our hero might need to take: **disarming a trap**. In our scenario, the hero finds themselves in a room with a trap. The action to disarm this trap is what we need to understand.

The action is named `disarm-trap`. This action, like any other, has specific requirements (preconditions) that must be met before the hero can perform it. These preconditions are:
1. **The hero must be in the same room as the trap.** This makes sense because you can't disarm a trap from another room. It's like needing to be in the kitchen to turn off a stove.
2. **The hero's hand must be free.** This means the hero can’t be holding anything, like a sword. It's a bit like needing both hands free to tie your shoes properly.
3. **There must actually be a trap in the room.** Obviously, the hero can't disarm a trap if there isn't one there!

If all these conditions are met, then the hero can go ahead and disarm the trap. The results (effects) of this action are:
1. **The trap in the room is disarmed.** This means the room is now safe from that trap.
2. **The trap is no longer considered to be in the room.** It's like cleaning up a spill; once it's cleaned, it's not there anymore.

By breaking down the action like this, we see how each condition helps ensure the action can be carried out safely and effectively. It’s just like following a recipe—each ingredient needs to be added at the right time for the dish to come out right!","Parameters:
1. ?var0 - moveable
2. ?var1 - agent

Preconditions:
```
(and
    (inventory ?var0)
    (handsfree ?var1)
)
```

Effects:
```
(and
    (equipped ?var0 ?var1)
    (not (handsfree ?var1))
    (not (inventory ?var0))
)
```
","(:action disarm-trap
    :parameters (?loc - cells)
    :precondition (and (at-hero ?loc) (arm-free) (has-trap ?loc))
    :effect (and (trap-disarmed ?loc) (not (has-trap ?loc)))
)",
rpggame,disarm-trap,0.10609016567468643,Easy Negative (Inter-Domain Mismatch),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: **Disarm a trap** – if there is a trap in the room the hero is in and the hero is empty-handed (does not hold a sword), then the hero can disarm it

Action name: disarm-trap


Your answer:

**Explanation:**

Imagine our hero in a dungeon, a place with rooms connected like a spider web. Each room can be just an empty space, or it might have something like a monster, a trap, or even a sword. Somewhere in this maze, there's a special room that has an exit—the ultimate goal for our hero.

Now, let's focus on a specific action our hero might need to take: **disarming a trap**. In our scenario, the hero finds themselves in a room with a trap. The action to disarm this trap is what we need to understand.

The action is named `disarm-trap`. This action, like any other, has specific requirements (preconditions) that must be met before the hero can perform it. These preconditions are:
1. **The hero must be in the same room as the trap.** This makes sense because you can't disarm a trap from another room. It's like needing to be in the kitchen to turn off a stove.
2. **The hero's hand must be free.** This means the hero can’t be holding anything, like a sword. It's a bit like needing both hands free to tie your shoes properly.
3. **There must actually be a trap in the room.** Obviously, the hero can't disarm a trap if there isn't one there!

If all these conditions are met, then the hero can go ahead and disarm the trap. The results (effects) of this action are:
1. **The trap in the room is disarmed.** This means the room is now safe from that trap.
2. **The trap is no longer considered to be in the room.** It's like cleaning up a spill; once it's cleaned, it's not there anymore.

By breaking down the action like this, we see how each condition helps ensure the action can be carried out safely and effectively. It’s just like following a recipe—each ingredient needs to be added at the right time for the dish to come out right!","Parameters:
1. ?var0 - moveable
2. ?var1 - static

Preconditions:
```
(and
    (at ?var0 ?var1)
    (agent_at ?var1)
)
```

Effects:
```
(and
    (inventory ?var0)
    (not (at ?var0 ?var1))
)
```
","(:action disarm-trap
    :parameters (?loc - cells)
    :precondition (and (at-hero ?loc) (arm-free) (has-trap ?loc))
    :effect (and (trap-disarmed ?loc) (not (has-trap ?loc)))
)",
rpggame,disarm-trap,0.23983052372932434,Easy Negative (Inter-Domain Mismatch),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: **Disarm a trap** – if there is a trap in the room the hero is in and the hero is empty-handed (does not hold a sword), then the hero can disarm it

Action name: disarm-trap


Your answer:
","**Explanation:** Let's imagine you're playing a game similar to Minecraft. In this game, you have an action called ""recall,"" which lets you move an item you are holding directly into your backpack, making your hands empty again. To understand how this action works in the game's programming language (PDDL), let's break down the requirements and results of this action step-by-step.

1. **Precondition (What needs to be true before the action?):** 
   The precondition for the ""recall"" action is `(equipped ?var0 ?var1)`. This simply means that the item (`?var0`) must be currently held (equipped) by the player (`?var1`). Think of it as checking if you really have the axe in your hand before you can put it away.

2. **Effect (What happens after the action is done?):** 
   The effects of this action are several:
   - `(inventory ?var0)`: The item you were holding is now in your inventory. This is like saying, ""Okay, the axe is now in my backpack.""
   - `(not (equipped ?var0 ?var1))`: You are no longer holding the item. This ensures that the game knows the axe is no longer in your hand.
   - `(handsfree ?var1)`: Your hands are now empty. This part is like confirming that your hands are free, ready to grab or use something else.

By setting these preconditions and effects, the game ensures that the action of recalling an item (like teleporting your axe to your backpack) is logical and consistent with the game's rules. You need to be holding the item first to store it away, and after storing it, your hands should indeed be empty, ready for the next task. This keeps the game from getting confused, like trying to put away an axe you aren’t holding or ending up with an axe still in your hand after you've tried to store it.

In summary, the ""recall"" action in the game ensures everything happens in an orderly and expected manner, making your gameplay experience smooth and realistic within the game's world.
Parameters:
1. ?var0 - moveable
2. ?var1 - agent

Preconditions:
```
(equipped ?var0 ?var1)
```

Effects:
```
(and
    (inventory ?var0)
    (not (equipped ?var0 ?var1))
    (handsfree ?var1)
)
```
","(:action disarm-trap
    :parameters (?loc - cells)
    :precondition (and (at-hero ?loc) (arm-free) (has-trap ?loc))
    :effect (and (trap-disarmed ?loc) (not (has-trap ?loc)))
)",
rpggame,disarm-trap,0.24082696437835693,Easy Negative (Inter-Domain Mismatch),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: **Disarm a trap** – if there is a trap in the room the hero is in and the hero is empty-handed (does not hold a sword), then the hero can disarm it

Action name: disarm-trap


Your answer:
","**Explanation:**
Let's imagine that in the world of Minecraft, the agent (like a player) wants to craft planks from a log. Think of it like a cook needing specific ingredients and tools to make a meal.

In our PDDL model, the action named ""craft_plank"" follows a similar thought process. Here's how the description of the world leads to the rules in our model:

1. **Preconditions**: Before crafting, certain conditions must be met:
   - The agent must have a log that they are actually holding. This is represented by `(equipped ?var2 ?var1)` meaning the log (`?var2`) is equipped by the agent (`?var1`).
   - The log must be a real log, confirmed by `(is_log ?var2)`.
   - We also see `(hypothetical ?var0)`. Here, the planks that will be created are initially just an idea (hypothetical) before they become real.

2. **Effects**: After the action is performed, we expect changes:
   - The hypothetical planks become real, shown by `(inventory ?var0)` which means the planks (`?var0`) are now in the agent's inventory.
   - They are identified as planks with `(is_planks ?var0)`.
   - The agent's hands become free `(handsfree ?var1)` because the log they were holding is now transformed into planks.
   - The log is no longer equipped or identified as a log, shown by `(not (equipped ?var2 ?var1))` and `(not (is_log ?var2))`. This indicates the log has been used up.

This schema carefully makes sure that the agent can only craft planks if they have a log to start with, and it accounts for what happens to the log and the newly created planks. It's much like ensuring you have flour before you bake a cake, and then, once the cake is baked, you no longer have just flour but a delicious cake instead!
Parameters:
1. ?var0 - moveable
2. ?var1 - agent
3. ?var2 - moveable

Preconditions:
```
(and
    (hypothetical ?var0)
    (is_log ?var2)
    (equipped ?var2 ?var1)
)
```

Effects:
```
(and
    (inventory ?var0)
    (is_planks ?var0)
    (handsfree ?var1)
    (not (equipped ?var2 ?var1))
    (not (hypothetical ?var0))
    (not (is_log ?var2))
)
```
","(:action disarm-trap
    :parameters (?loc - cells)
    :precondition (and (at-hero ?loc) (arm-free) (has-trap ?loc))
    :effect (and (trap-disarmed ?loc) (not (has-trap ?loc)))
)",
rpggame,disarm-trap,0.32172030210494995,Easy Negative (Inter-Domain Mismatch),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: **Disarm a trap** – if there is a trap in the room the hero is in and the hero is empty-handed (does not hold a sword), then the hero can disarm it

Action name: disarm-trap


Your answer:
","**Explanation:**
Let's think about the action called ""move"" in a Minecraft-like game, where the goal is to get an agent (like a player) from one place to another. The PDDL action schema you're asking about is designed to handle this simple yet crucial task.

In the action schema, we have two parameters: `?var0` and `?var1`, which are both locations. You can think of `?var0` as the new location where the agent wants to go, and `?var1` as the current location where the agent is starting from.

**Preconditions:** The precondition for the ""move"" action is `(agent_at ?var1)`. This just means that before the agent can move, it must be verified that the agent is actually at the starting location (`?var1`). It’s similar to checking if you are really at home before you walk to the park.

**Effects:** After the agent moves, we need to update the agent's location in the game. This is what the effects in the action schema do:
- `(agent_at ?var0)` says that the agent is now at the new location (`?var0`), like saying, ""Now, I’m at the park.""
- `(not (agent_at ?var1))` means that the agent is no longer at the starting location (`?var1`), similar to saying, ""I'm no longer at home.""

This change in the agent's location is crucial for the game to keep track of where the agent is at any moment, which affects what the agent can interact with or what actions they can perform next. The effect ensures the game world is accurately updated following the agent's movement, and no confusion arises about where the agent is located. 

So, in simple terms, the action ""move"" in this game ensures that when the agent moves from one spot to another, the game correctly recognizes this change and updates the world accordingly.
Parameters:
1. ?var0 - static
2. ?var1 - static

Preconditions:
```
(agent_at ?var1)
```

Effects:
```
(and
    (agent_at ?var0)
    (not (agent_at ?var1))
)
```
","(:action disarm-trap
    :parameters (?loc - cells)
    :precondition (and (at-hero ?loc) (arm-free) (has-trap ?loc))
    :effect (and (trap-disarmed ?loc) (not (has-trap ?loc)))
)",
rpggame,disarm-trap,0.10805211216211319,Easy Negative (Inter-Domain Mismatch),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: **Disarm a trap** – if there is a trap in the room the hero is in and the hero is empty-handed (does not hold a sword), then the hero can disarm it

Action name: disarm-trap


Your answer:
","**Explanation:**
Let's think of the action called ""equip"" like someone getting ready to use something from their backpack. Imagine you're planning to paint a picture. First, you need to make sure you have a paintbrush in your backpack (this is similar to the ""inventory"" in our scenario). You also need to make sure your hand is free to hold the paintbrush (like the ""handsfree"" condition).

In the ""equip"" action in this Minecraft-like environment, two main things need to happen before the action can take place:
1. **The item is in the inventory** - This is just like making sure the paintbrush is in your backpack. The precondition `(inventory ?var0)` confirms that the item you want to use is actually with you, stored safely in your inventory.
2. **The agent's hands are free** - This means you aren't holding anything else. The precondition `(handsfree ?var1)` checks that your hands (or the agent's hands, in this case) are empty and ready to hold something new.

When you decide to ""equip"" or start using the item, several things change:
- **The item is now equipped** - This means the item is in your hand and ready to use, similar to how you would hold a paintbrush when you're ready to paint. This is shown by the effect `(equipped ?var0 ?var1)`.
- **Your hand is no longer free** - Just like when you pick up the paintbrush, your hand isn't empty anymore. This is why the effect includes `(not (handsfree ?var1))`.
- **The item is no longer just in the inventory** - Since you're now holding the item, it's not just sitting in your backpack. This change is represented by `(not (inventory ?var0))`.

These changes ensure that the action of equipping something is logical and makes sense in the environment, just like how you'd logically take a paintbrush out of your backpack to use it.
Parameters:
1. ?var0 - moveable
2. ?var1 - agent

Preconditions:
```
(and
    (inventory ?var0)
    (handsfree ?var1)
)
```

Effects:
```
(and
    (equipped ?var0 ?var1)
    (not (handsfree ?var1))
    (not (inventory ?var0))
)
```
","(:action disarm-trap
    :parameters (?loc - cells)
    :precondition (and (at-hero ?loc) (arm-free) (has-trap ?loc))
    :effect (and (trap-disarmed ?loc) (not (has-trap ?loc)))
)",
rpggame,disarm-trap,0.16423234343528748,Easy Negative (Inter-Domain Mismatch),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: **Disarm a trap** – if there is a trap in the room the hero is in and the hero is empty-handed (does not hold a sword), then the hero can disarm it

Action name: disarm-trap


Your answer:
","**Explanation:**

Let's imagine you're in a simplified game environment similar to Minecraft, where your goal is to gather resources like fruits or tools. In this game, to collect an item, you'd first need to be at the same location as the item. This ensures you can actually reach it to pick it up.

So, in the PDDL (which is a planning language used to describe tasks and environments in a structured way), the `pick` action is defined to help you collect these items. Here's why the action is set up this way:

1. **Preconditions (the must-haves before acting)**:
   - `(at ?var0 ?var1)`: This means the item (`?var0`) must be at your current location (`?var1`). Think of it as seeing a piece of fruit right at your feet. You need to be where the fruit is to pick it up.
   - `(agent_at ?var1)`: This specifies that you (the agent) must also be at that specific location (`?var1`). Just like in real life, you can't pick up something if you're not right there with it.

2. **Effects (what happens after the action)**:
   - `(inventory ?var0)`: Once you pick up the item, it moves into your inventory. This is like putting the fruit into your backpack.
   - `(not (at ?var0 ?var1))`: This indicates that the item is no longer lying on the ground at that location. It’s like saying, now that the fruit is in your backpack, it's not on the ground anymore.

This setup ensures that you can only pick up items that are within your immediate reach and that collecting an item changes its status from being 'on the ground' to being 'in your inventory'. It's a simple but effective way to manage resources in the game, making sure everything happens in a logical and realistic manner.
Parameters:
1. ?var0 - moveable
2. ?var1 - static

Preconditions:
```
(and
    (at ?var0 ?var1)
    (agent_at ?var1)
)
```

Effects:
```
(and
    (inventory ?var0)
    (not (at ?var0 ?var1))
)
```
","(:action disarm-trap
    :parameters (?loc - cells)
    :precondition (and (at-hero ?loc) (arm-free) (has-trap ?loc))
    :effect (and (trap-disarmed ?loc) (not (has-trap ?loc)))
)",
rpggame,disarm-trap,0.5180956125259399,Semi-Hard Negative (Intra-Domain Mismatch),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: **Disarm a trap** – if there is a trap in the room the hero is in and the hero is empty-handed (does not hold a sword), then the hero can disarm it

Action name: disarm-trap


Your answer:
","Parameters:
1. ?from - cells
2. ?to - cells

Preconditions:
```
(and
    (connected ?from ?to)
    (at-hero ?from)
    (not (is-destroyed ?to))
    (not (has-trap ?from))
    (has-trap ?to)
    (arm-free)
)
```

Effects:
```
(and
    (at-hero ?to)
    (is-destroyed ?from)
    (not (at-hero ?from))
)
```
","(:action disarm-trap
    :parameters (?loc - cells)
    :precondition (and (at-hero ?loc) (arm-free) (has-trap ?loc))
    :effect (and (trap-disarmed ?loc) (not (has-trap ?loc)))
)",
rpggame,disarm-trap,0.6636556386947632,Semi-Hard Negative (Intra-Domain Mismatch),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: **Disarm a trap** – if there is a trap in the room the hero is in and the hero is empty-handed (does not hold a sword), then the hero can disarm it

Action name: disarm-trap


Your answer:
","Parameters:
1. ?from - cells
2. ?to - cells

Preconditions:
```
(and
    (connected ?from ?to)
    (at-hero ?from)
    (not (has-trap ?from))
    (not (is-destroyed ?to))
    (not (has-trap ?to))
    (not (has-monster ?to))
)
```

Effects:
```
(and
    (at-hero ?to)
    (is-destroyed ?from)
    (not (at-hero ?from))
)
```
","(:action disarm-trap
    :parameters (?loc - cells)
    :precondition (and (at-hero ?loc) (arm-free) (has-trap ?loc))
    :effect (and (trap-disarmed ?loc) (not (has-trap ?loc)))
)",
rpggame,disarm-trap,0.3123786151409149,Semi-Hard Negative (Intra-Domain Mismatch),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: **Disarm a trap** – if there is a trap in the room the hero is in and the hero is empty-handed (does not hold a sword), then the hero can disarm it

Action name: disarm-trap


Your answer:
","Parameters:
1. ?loc - cells
2. ?s - swords

Preconditions:
```
(and
    (at-hero ?loc)
    (at-sword ?s ?loc)
    (arm-free)
)
```

Effects:
```
(and
    (holding ?s)
    (not (at-sword ?s ?loc))
    (not (arm-free))
)
```
","(:action disarm-trap
    :parameters (?loc - cells)
    :precondition (and (at-hero ?loc) (arm-free) (has-trap ?loc))
    :effect (and (trap-disarmed ?loc) (not (has-trap ?loc)))
)",
rpggame,disarm-trap,0.8527721166610718,Semi-Hard Negative (Intra-Domain Mismatch),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: **Disarm a trap** – if there is a trap in the room the hero is in and the hero is empty-handed (does not hold a sword), then the hero can disarm it

Action name: disarm-trap


Your answer:
","Parameters:
1. ?from - cells
2. ?to - cells
3. ?s - swords

Preconditions:
```
(and
    (connected ?from ?to)
    (at-hero ?from)
    (has-monster ?to)
    (not (is-destroyed ?to))
    (not (has-trap ?from))
    (holding ?s)
)
```

Effects:
```
(and
    (at-hero ?to)
    (is-destroyed ?from)
    (not (at-hero ?from))
)
```
","(:action disarm-trap
    :parameters (?loc - cells)
    :precondition (and (at-hero ?loc) (arm-free) (has-trap ?loc))
    :effect (and (trap-disarmed ?loc) (not (has-trap ?loc)))
)",
rpggame,disarm-trap,0.6134718060493469,Semi-Hard Negative (Intra-Domain Mismatch),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: **Disarm a trap** – if there is a trap in the room the hero is in and the hero is empty-handed (does not hold a sword), then the hero can disarm it

Action name: disarm-trap


Your answer:
","Parameters:
1. ?loc - cells
2. ?s - swords

Preconditions:
```
(and
    (at-hero ?loc)
    (holding ?s)
    (not (has-trap ?loc))
    (not (has-monster ?loc))
)
```

Effects:
```
(and
    (arm-free)
    (is-destroyed ?s)
    (not (holding ?s))
)
```
","(:action disarm-trap
    :parameters (?loc - cells)
    :precondition (and (at-hero ?loc) (arm-free) (has-trap ?loc))
    :effect (and (trap-disarmed ?loc) (not (has-trap ?loc)))
)",
rpggame,disarm-trap,0.5180956125259399,Semi-Hard Negative (Intra-Domain Mismatch),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: **Disarm a trap** – if there is a trap in the room the hero is in and the hero is empty-handed (does not hold a sword), then the hero can disarm it

Action name: disarm-trap


Your answer:

**Explanation:**

Imagine our hero in a dungeon, a place with rooms connected like a spider web. Each room can be just an empty space, or it might have something like a monster, a trap, or even a sword. Somewhere in this maze, there's a special room that has an exit—the ultimate goal for our hero.

Now, let's focus on a specific action our hero might need to take: **disarming a trap**. In our scenario, the hero finds themselves in a room with a trap. The action to disarm this trap is what we need to understand.

The action is named `disarm-trap`. This action, like any other, has specific requirements (preconditions) that must be met before the hero can perform it. These preconditions are:
1. **The hero must be in the same room as the trap.** This makes sense because you can't disarm a trap from another room. It's like needing to be in the kitchen to turn off a stove.
2. **The hero's hand must be free.** This means the hero can’t be holding anything, like a sword. It's a bit like needing both hands free to tie your shoes properly.
3. **There must actually be a trap in the room.** Obviously, the hero can't disarm a trap if there isn't one there!

If all these conditions are met, then the hero can go ahead and disarm the trap. The results (effects) of this action are:
1. **The trap in the room is disarmed.** This means the room is now safe from that trap.
2. **The trap is no longer considered to be in the room.** It's like cleaning up a spill; once it's cleaned, it's not there anymore.

By breaking down the action like this, we see how each condition helps ensure the action can be carried out safely and effectively. It’s just like following a recipe—each ingredient needs to be added at the right time for the dish to come out right!","Parameters:
1. ?from - cells
2. ?to - cells

Preconditions:
```
(and
    (connected ?from ?to)
    (at-hero ?from)
    (not (is-destroyed ?to))
    (not (has-trap ?from))
    (has-trap ?to)
    (arm-free)
)
```

Effects:
```
(and
    (at-hero ?to)
    (is-destroyed ?from)
    (not (at-hero ?from))
)
```
","(:action disarm-trap
    :parameters (?loc - cells)
    :precondition (and (at-hero ?loc) (arm-free) (has-trap ?loc))
    :effect (and (trap-disarmed ?loc) (not (has-trap ?loc)))
)",
rpggame,disarm-trap,0.6636556386947632,Semi-Hard Negative (Intra-Domain Mismatch),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: **Disarm a trap** – if there is a trap in the room the hero is in and the hero is empty-handed (does not hold a sword), then the hero can disarm it

Action name: disarm-trap


Your answer:

**Explanation:**

Imagine our hero in a dungeon, a place with rooms connected like a spider web. Each room can be just an empty space, or it might have something like a monster, a trap, or even a sword. Somewhere in this maze, there's a special room that has an exit—the ultimate goal for our hero.

Now, let's focus on a specific action our hero might need to take: **disarming a trap**. In our scenario, the hero finds themselves in a room with a trap. The action to disarm this trap is what we need to understand.

The action is named `disarm-trap`. This action, like any other, has specific requirements (preconditions) that must be met before the hero can perform it. These preconditions are:
1. **The hero must be in the same room as the trap.** This makes sense because you can't disarm a trap from another room. It's like needing to be in the kitchen to turn off a stove.
2. **The hero's hand must be free.** This means the hero can’t be holding anything, like a sword. It's a bit like needing both hands free to tie your shoes properly.
3. **There must actually be a trap in the room.** Obviously, the hero can't disarm a trap if there isn't one there!

If all these conditions are met, then the hero can go ahead and disarm the trap. The results (effects) of this action are:
1. **The trap in the room is disarmed.** This means the room is now safe from that trap.
2. **The trap is no longer considered to be in the room.** It's like cleaning up a spill; once it's cleaned, it's not there anymore.

By breaking down the action like this, we see how each condition helps ensure the action can be carried out safely and effectively. It’s just like following a recipe—each ingredient needs to be added at the right time for the dish to come out right!","Parameters:
1. ?from - cells
2. ?to - cells

Preconditions:
```
(and
    (connected ?from ?to)
    (at-hero ?from)
    (not (has-trap ?from))
    (not (is-destroyed ?to))
    (not (has-trap ?to))
    (not (has-monster ?to))
)
```

Effects:
```
(and
    (at-hero ?to)
    (is-destroyed ?from)
    (not (at-hero ?from))
)
```
","(:action disarm-trap
    :parameters (?loc - cells)
    :precondition (and (at-hero ?loc) (arm-free) (has-trap ?loc))
    :effect (and (trap-disarmed ?loc) (not (has-trap ?loc)))
)",
rpggame,disarm-trap,0.3123786151409149,Semi-Hard Negative (Intra-Domain Mismatch),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: **Disarm a trap** – if there is a trap in the room the hero is in and the hero is empty-handed (does not hold a sword), then the hero can disarm it

Action name: disarm-trap


Your answer:

**Explanation:**

Imagine our hero in a dungeon, a place with rooms connected like a spider web. Each room can be just an empty space, or it might have something like a monster, a trap, or even a sword. Somewhere in this maze, there's a special room that has an exit—the ultimate goal for our hero.

Now, let's focus on a specific action our hero might need to take: **disarming a trap**. In our scenario, the hero finds themselves in a room with a trap. The action to disarm this trap is what we need to understand.

The action is named `disarm-trap`. This action, like any other, has specific requirements (preconditions) that must be met before the hero can perform it. These preconditions are:
1. **The hero must be in the same room as the trap.** This makes sense because you can't disarm a trap from another room. It's like needing to be in the kitchen to turn off a stove.
2. **The hero's hand must be free.** This means the hero can’t be holding anything, like a sword. It's a bit like needing both hands free to tie your shoes properly.
3. **There must actually be a trap in the room.** Obviously, the hero can't disarm a trap if there isn't one there!

If all these conditions are met, then the hero can go ahead and disarm the trap. The results (effects) of this action are:
1. **The trap in the room is disarmed.** This means the room is now safe from that trap.
2. **The trap is no longer considered to be in the room.** It's like cleaning up a spill; once it's cleaned, it's not there anymore.

By breaking down the action like this, we see how each condition helps ensure the action can be carried out safely and effectively. It’s just like following a recipe—each ingredient needs to be added at the right time for the dish to come out right!","Parameters:
1. ?loc - cells
2. ?s - swords

Preconditions:
```
(and
    (at-hero ?loc)
    (at-sword ?s ?loc)
    (arm-free)
)
```

Effects:
```
(and
    (holding ?s)
    (not (at-sword ?s ?loc))
    (not (arm-free))
)
```
","(:action disarm-trap
    :parameters (?loc - cells)
    :precondition (and (at-hero ?loc) (arm-free) (has-trap ?loc))
    :effect (and (trap-disarmed ?loc) (not (has-trap ?loc)))
)",
rpggame,disarm-trap,0.8527721166610718,Semi-Hard Negative (Intra-Domain Mismatch),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: **Disarm a trap** – if there is a trap in the room the hero is in and the hero is empty-handed (does not hold a sword), then the hero can disarm it

Action name: disarm-trap


Your answer:

**Explanation:**

Imagine our hero in a dungeon, a place with rooms connected like a spider web. Each room can be just an empty space, or it might have something like a monster, a trap, or even a sword. Somewhere in this maze, there's a special room that has an exit—the ultimate goal for our hero.

Now, let's focus on a specific action our hero might need to take: **disarming a trap**. In our scenario, the hero finds themselves in a room with a trap. The action to disarm this trap is what we need to understand.

The action is named `disarm-trap`. This action, like any other, has specific requirements (preconditions) that must be met before the hero can perform it. These preconditions are:
1. **The hero must be in the same room as the trap.** This makes sense because you can't disarm a trap from another room. It's like needing to be in the kitchen to turn off a stove.
2. **The hero's hand must be free.** This means the hero can’t be holding anything, like a sword. It's a bit like needing both hands free to tie your shoes properly.
3. **There must actually be a trap in the room.** Obviously, the hero can't disarm a trap if there isn't one there!

If all these conditions are met, then the hero can go ahead and disarm the trap. The results (effects) of this action are:
1. **The trap in the room is disarmed.** This means the room is now safe from that trap.
2. **The trap is no longer considered to be in the room.** It's like cleaning up a spill; once it's cleaned, it's not there anymore.

By breaking down the action like this, we see how each condition helps ensure the action can be carried out safely and effectively. It’s just like following a recipe—each ingredient needs to be added at the right time for the dish to come out right!","Parameters:
1. ?from - cells
2. ?to - cells
3. ?s - swords

Preconditions:
```
(and
    (connected ?from ?to)
    (at-hero ?from)
    (has-monster ?to)
    (not (is-destroyed ?to))
    (not (has-trap ?from))
    (holding ?s)
)
```

Effects:
```
(and
    (at-hero ?to)
    (is-destroyed ?from)
    (not (at-hero ?from))
)
```
","(:action disarm-trap
    :parameters (?loc - cells)
    :precondition (and (at-hero ?loc) (arm-free) (has-trap ?loc))
    :effect (and (trap-disarmed ?loc) (not (has-trap ?loc)))
)",
rpggame,disarm-trap,0.6134718060493469,Semi-Hard Negative (Intra-Domain Mismatch),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: **Disarm a trap** – if there is a trap in the room the hero is in and the hero is empty-handed (does not hold a sword), then the hero can disarm it

Action name: disarm-trap


Your answer:

**Explanation:**

Imagine our hero in a dungeon, a place with rooms connected like a spider web. Each room can be just an empty space, or it might have something like a monster, a trap, or even a sword. Somewhere in this maze, there's a special room that has an exit—the ultimate goal for our hero.

Now, let's focus on a specific action our hero might need to take: **disarming a trap**. In our scenario, the hero finds themselves in a room with a trap. The action to disarm this trap is what we need to understand.

The action is named `disarm-trap`. This action, like any other, has specific requirements (preconditions) that must be met before the hero can perform it. These preconditions are:
1. **The hero must be in the same room as the trap.** This makes sense because you can't disarm a trap from another room. It's like needing to be in the kitchen to turn off a stove.
2. **The hero's hand must be free.** This means the hero can’t be holding anything, like a sword. It's a bit like needing both hands free to tie your shoes properly.
3. **There must actually be a trap in the room.** Obviously, the hero can't disarm a trap if there isn't one there!

If all these conditions are met, then the hero can go ahead and disarm the trap. The results (effects) of this action are:
1. **The trap in the room is disarmed.** This means the room is now safe from that trap.
2. **The trap is no longer considered to be in the room.** It's like cleaning up a spill; once it's cleaned, it's not there anymore.

By breaking down the action like this, we see how each condition helps ensure the action can be carried out safely and effectively. It’s just like following a recipe—each ingredient needs to be added at the right time for the dish to come out right!","Parameters:
1. ?loc - cells
2. ?s - swords

Preconditions:
```
(and
    (at-hero ?loc)
    (holding ?s)
    (not (has-trap ?loc))
    (not (has-monster ?loc))
)
```

Effects:
```
(and
    (arm-free)
    (is-destroyed ?s)
    (not (holding ?s))
)
```
","(:action disarm-trap
    :parameters (?loc - cells)
    :precondition (and (at-hero ?loc) (arm-free) (has-trap ?loc))
    :effect (and (trap-disarmed ?loc) (not (has-trap ?loc)))
)",
rpggame,disarm-trap,0.7892916202545166,Semi-Hard Negative (Intra-Domain Mismatch),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: **Disarm a trap** – if there is a trap in the room the hero is in and the hero is empty-handed (does not hold a sword), then the hero can disarm it

Action name: disarm-trap


Your answer:
","**Explanation:**

Imagine you're guiding a hero who just woke up in a mysterious dungeon. Each room can have different things: some are empty, others have monsters, some have traps, and a few might have swords. There's also a special room with an exit—our hero's goal.

Now, let's talk about the action called **move-to-trap**. This action involves our hero moving from one room (we'll call it ""Room A"") to another room (""Room B""), where, unfortunately, there's a trap waiting. Here's why each part of the plan (or action schema) makes sense:

1. **Connected Rooms**: Our hero can only move to a room directly connected to the one they're currently in. This is like being in your house and only being able to walk into rooms that have doors leading from where you are now.

2. **Hero's Current Location**: The hero must start in Room A to move to Room B. You can't move from a place if you're not actually there, right?

3. **Room B Not Destroyed**: The room our hero is moving to mustn't be already destroyed (or in ruins). It's like making sure the bridge you want to cross hasn't collapsed.

4. **Room A Doesn't Have a Trap**: It’s safer if the room our hero is leaving doesn't have a trap. Imagine trying to leave a room with a trap; it could activate and cause trouble!

5. **Room B Has a Trap**: Since the action is called **move-to-trap**, it specifically involves moving to a room with a trap, almost like knowing there's a puddle ahead but stepping into it anyway because it's the only path forward.

6. **Hero's Arm is Free**: This indicates that the hero isn’t holding anything like a sword. It’s important because handling traps might require free hands—think about needing your hands free to disarm or avoid a trap carefully.

When our hero completes this action, several things happen:
- **Hero is now in Room B**: Just like when you walk into another room, you’re no longer in the first room.
- **Room A is destroyed**: This could mean the hero leaves it in a way that no one can follow—maybe they close a heavy door that locks automatically.
- **Hero is no longer in Room A**: It confirms that the hero has completely left Room A.

This action is designed for specific situations in the dungeon where the hero might need to move strategically, even into risky areas, to navigate through the dungeon and eventually find the exit.
Parameters:
1. ?from - cells
2. ?to - cells

Preconditions:
```
(and
    (connected ?from ?to)
    (at-hero ?from)
    (not (is-destroyed ?to))
    (not (has-trap ?from))
    (has-trap ?to)
    (arm-free)
)
```

Effects:
```
(and
    (at-hero ?to)
    (is-destroyed ?from)
    (not (at-hero ?from))
)
```
","(:action disarm-trap
    :parameters (?loc - cells)
    :precondition (and (at-hero ?loc) (arm-free) (has-trap ?loc))
    :effect (and (trap-disarmed ?loc) (not (has-trap ?loc)))
)",
rpggame,disarm-trap,0.7861344814300537,Semi-Hard Negative (Intra-Domain Mismatch),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: **Disarm a trap** – if there is a trap in the room the hero is in and the hero is empty-handed (does not hold a sword), then the hero can disarm it

Action name: disarm-trap


Your answer:
","**Explanation:**

Imagine our hero in a big, scary dungeon, just like a character from a fairy tale or a video game. The dungeon has several rooms, and some rooms are safe while others have monsters or traps. The hero's goal is to escape from this dungeon, moving from one room to another until he finds the exit.

Now, let's talk about the action called ""move"" that our hero can take. The action ""move"" lets the hero go from one room (we'll call this the ""current room"") to a connected room (let's call this the ""next room""). Think of the dungeon like a big house with many doors connecting the rooms; the hero can only move through a door if it’s open and the room on the other side is safe.

In the PDDL (a kind of programming language for planning what actions to take), the action ""move"" needs some conditions to be met before the hero can move:
1. **The rooms must be connected:** Just like you can't walk through a wall at home, the hero can only move to a room if there's a direct connection (like a doorway or a corridor).
2. **The hero must be in the current room:** The hero can only leave a room if he's actually in it.
3. **The current room shouldn’t have a trap that could hurt him.**
4. **The next room shouldn’t be destroyed:** The hero can't go into a room if it’s already been collapsed or destroyed (maybe from a previous adventure!).
5. **The next room shouldn’t have a trap or a monster:** This makes sure our hero doesn’t walk into new danger.

When the hero moves:
- **He is now in the next room:** Just like if you walk to another room in your house, you're then in that new room.
- **The room he left gets destroyed:** This might sound strange, but imagine if every time he left a room, the door magically closed and locked forever, so he can’t go back the same way.
- **He is no longer in the current room:** This is just confirming that he has moved on from the previous room.

These rules help our hero make smart moves through the dungeon, avoiding danger and making progress towards escape. This way of setting up the hero's actions makes sure he can navigate through the dungeon safely and eventually find his way out.
Parameters:
1. ?from - cells
2. ?to - cells

Preconditions:
```
(and
    (connected ?from ?to)
    (at-hero ?from)
    (not (has-trap ?from))
    (not (is-destroyed ?to))
    (not (has-trap ?to))
    (not (has-monster ?to))
)
```

Effects:
```
(and
    (at-hero ?to)
    (is-destroyed ?from)
    (not (at-hero ?from))
)
```
","(:action disarm-trap
    :parameters (?loc - cells)
    :precondition (and (at-hero ?loc) (arm-free) (has-trap ?loc))
    :effect (and (trap-disarmed ?loc) (not (has-trap ?loc)))
)",
rpggame,disarm-trap,0.4962548613548279,Semi-Hard Negative (Intra-Domain Mismatch),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: **Disarm a trap** – if there is a trap in the room the hero is in and the hero is empty-handed (does not hold a sword), then the hero can disarm it

Action name: disarm-trap


Your answer:
","**Explanation:**

Imagine you're helping a hero navigate through a tricky dungeon filled with different challenges. The hero's objective is to escape, but along the way, they might find useful items like swords that can help protect against monsters.

In our scenario, the action of picking up a sword is crucial. Let's think of it like this: if you enter a room and see a sword on the floor while your hands are free, you can pick it up. The action schema in PDDL, which is a way to represent planning problems, explains this in a structured format.

The preconditions for our action ""pick-sword"" are:
1. **The hero must be in the same room as the sword** (represented as `(at-hero ?loc)` and `(at-sword ?s ?loc)`). This makes sense because you can't pick up something that's not in the same room as you.
2. **The hero's hand must be free** (`(arm-free)`). Just like you can't hold two grocery bags in one hand easily, our hero needs a free hand to pick up the sword.

The effects after the hero picks up the sword are:
1. **The hero is now holding the sword** (`(holding ?s)`). This indicates that the hero has successfully picked up the sword.
2. **The sword is no longer in its original place** (`(not (at-sword ?s ?loc))`). Just like if you take an apple from a basket, the apple isn't in the basket anymore.
3. **The hero's hand is no longer free** (`(not (arm-free))`). Holding the sword means the hand that was free is now occupied.

This action schema is a simple way to model the interaction between the hero and the sword in the dungeon. It helps ensure that all necessary conditions are met before the action takes place, making the hero's journey through the dungeon logical and structured. This way, the hero doesn't magically have a sword without picking it up or has two items in one hand, which keeps our dungeon adventure realistic and understandable.
Parameters:
1. ?loc - cells
2. ?s - swords

Preconditions:
```
(and
    (at-hero ?loc)
    (at-sword ?s ?loc)
    (arm-free)
)
```

Effects:
```
(and
    (holding ?s)
    (not (at-sword ?s ?loc))
    (not (arm-free))
)
```
","(:action disarm-trap
    :parameters (?loc - cells)
    :precondition (and (at-hero ?loc) (arm-free) (has-trap ?loc))
    :effect (and (trap-disarmed ?loc) (not (has-trap ?loc)))
)",
rpggame,disarm-trap,0.7913336753845215,Semi-Hard Negative (Intra-Domain Mismatch),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: **Disarm a trap** – if there is a trap in the room the hero is in and the hero is empty-handed (does not hold a sword), then the hero can disarm it

Action name: disarm-trap


Your answer:
","**Explanation:**

Let's imagine our hero in the dungeon scenario. The hero wakes up and finds themselves in a room, wanting to move to an adjacent room where, unfortunately, there's a monster. Here's how we translate this scenario into a set of instructions, or a 'domain model,' in planning language.

The action we're talking about is called ""move-to-monster."" This means our hero is trying to move from one room (let’s call it Room A) to another room (Room B) where there is a monster. To ensure this action can happen, there are certain conditions that need to be met (these are called 'preconditions') and certain outcomes that will happen as a result of the action (these are called 'effects').

1. **Preconditions**:
   - **Connected Rooms**: Room A and Room B must be connected by a corridor. This makes sense because our hero can't magically jump from one room to another; there must be a path.
   - **Hero's Current Location**: The hero must currently be in Room A. If the hero isn't there, they can't start moving from it!
   - **Monster Presence**: Room B must have a monster. After all, the action is specifically about moving to a room with a monster.
   - **Room Integrity**: Room B should not be destroyed. A destroyed room might mean it’s collapsed or inaccessible, so it's logical our hero can’t move into it.
   - **Safety in Room A**: Room A should not have a trap. This makes sure our hero is safe and able to move without getting caught in a trap.
   - **Armed Hero**: The hero must be holding a sword. It’s a dangerous task to move into a room with a monster, so having a sword means the hero is prepared for a fight.

2. **Effects**:
   - **Hero's New Location**: After the action, the hero will be in Room B. They've successfully moved.
   - **Change in Room A's Status**: Room A becomes 'destroyed.' This might represent that the room is no longer safe or viable after the hero leaves, maybe because of the haste in escaping or some mechanism triggered by the departure.
   - **Update Hero's Old Location**: The fact that the hero was in Room A is no longer true, which is updated in our model to reflect the hero’s new position.

This planning helps organize our thoughts and actions logically, ensuring every step is clear and all necessary precautions are taken. Think of it like giving someone directions with a checklist: ""Before you go there, make sure this, this, and this are true, and once you do, this and this will happen."" This ensures everyone knows what to expect and how to prepare! 
Parameters:
1. ?from - cells
2. ?to - cells
3. ?s - swords

Preconditions:
```
(and
    (connected ?from ?to)
    (at-hero ?from)
    (has-monster ?to)
    (not (is-destroyed ?to))
    (not (has-trap ?from))
    (holding ?s)
)
```

Effects:
```
(and
    (at-hero ?to)
    (is-destroyed ?from)
    (not (at-hero ?from))
)
```
","(:action disarm-trap
    :parameters (?loc - cells)
    :precondition (and (at-hero ?loc) (arm-free) (has-trap ?loc))
    :effect (and (trap-disarmed ?loc) (not (has-trap ?loc)))
)",
rpggame,disarm-trap,0.6022753715515137,Semi-Hard Negative (Intra-Domain Mismatch),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: **Disarm a trap** – if there is a trap in the room the hero is in and the hero is empty-handed (does not hold a sword), then the hero can disarm it

Action name: disarm-trap


Your answer:
","**Explanation:**

Imagine you're helping a hero navigate a dungeon full of monsters and traps, a bit like playing a video game. Now, the hero has a sword, but in this part of the game, the hero decides to destroy the sword. To understand why certain conditions are checked before the hero can destroy the sword safely, let's break it down using the action ""destroy-sword"" from the game's rules (or in technical terms, the PDDL action schema).

Firstly, the hero needs to be in the same location as the sword. This makes sense, right? You can't throw something away or break it if it's not with you. So, the condition `(at-hero ?loc)` ensures that the hero is at the right spot to perform the action.

Secondly, the hero must be holding the sword. It’s similar to needing both hands on a bat to swing it; here, the hero needs to have the sword in hand to destroy it, checked by `(holding ?s)`.

But why check for no traps or monsters in the room? Think of it like trying to do something delicate, like assembling a model airplane, in a room with a loose tiger. Not a great idea, right? If there’s a monster in the room, destroying the sword might make the hero vulnerable to attack. Similarly, a trap could be triggered by the noise or movement, putting the hero in danger. So, `(not (has-trap ?loc))` and `(not (has-monster ?loc))` ensure that the environment is safe for the hero to break the sword without turning the situation worse.

Now, what happens after the sword is destroyed? The effect is that the hero’s hand is now free (`arm-free`), the sword is confirmed as destroyed (`is-destroyed ?s`), and the hero is no longer holding it (`not (holding ?s)`). It’s like cleaning up after finishing a task: put away the tools, clean up the mess, and free up your hands for the next task.

In simple terms, this action schema is like a set of instructions to make sure the hero does something risky (like destroying a sword) safely and responsibly, without making the dangerous dungeon situation even worse.
Parameters:
1. ?loc - cells
2. ?s - swords

Preconditions:
```
(and
    (at-hero ?loc)
    (holding ?s)
    (not (has-trap ?loc))
    (not (has-monster ?loc))
)
```

Effects:
```
(and
    (arm-free)
    (is-destroyed ?s)
    (not (holding ?s))
)
```
","(:action disarm-trap
    :parameters (?loc - cells)
    :precondition (and (at-hero ?loc) (arm-free) (has-trap ?loc))
    :effect (and (trap-disarmed ?loc) (not (has-trap ?loc)))
)",
rpggame,disarm-trap,0.37753987312316895,Hard Negative (Manipulated Action),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: **Disarm a trap** – if there is a trap in the room the hero is in and the hero is empty-handed (does not hold a sword), then the hero can disarm it

Action name: disarm-trap


Your answer:
","Parameters:
1. ?loc - cells

Preconditions:
```
(and
    (not (at-hero ?loc))
    (has-trap ?loc)
)
```

Effects:
```
(and
    (trap-disarmed ?loc)
    (not (has-trap ?loc))
)
```
","(:action disarm-trap
    :parameters (?loc - cells)
    :precondition (and (at-hero ?loc) (arm-free) (has-trap ?loc))
    :effect (and (trap-disarmed ?loc) (not (has-trap ?loc)))
)","remove (arm-free) from preconditions
negate (at-hero ?loc) in preconditions
"
rpggame,disarm-trap,0.3508460223674774,Hard Negative (Manipulated Action),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: **Disarm a trap** – if there is a trap in the room the hero is in and the hero is empty-handed (does not hold a sword), then the hero can disarm it

Action name: disarm-trap


Your answer:
","Parameters:
1. ?loc - cells

Preconditions:
```
(and
    (not (has-trap ?loc))
    (at-hero ?loc)
    (arm-free)
)
```

Effects:
```
(and
    (has-trap ?loc)
    (trap-disarmed ?loc)
)
```
","(:action disarm-trap
    :parameters (?loc - cells)
    :precondition (and (at-hero ?loc) (arm-free) (has-trap ?loc))
    :effect (and (trap-disarmed ?loc) (not (has-trap ?loc)))
)","swap (has-trap ?loc) with (not (has-trap ?loc))
"
rpggame,disarm-trap,0.24749816954135895,Hard Negative (Manipulated Action),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: **Disarm a trap** – if there is a trap in the room the hero is in and the hero is empty-handed (does not hold a sword), then the hero can disarm it

Action name: disarm-trap


Your answer:
","Parameters:
1. ?loc - cells

Preconditions:
```
(and
    (not (arm-free))
    (trap-disarmed ?loc)
    (at-hero ?loc)
)
```

Effects:
```
(and
    (has-trap ?loc)
    (not (has-trap ?loc))
)
```
","(:action disarm-trap
    :parameters (?loc - cells)
    :precondition (and (at-hero ?loc) (arm-free) (has-trap ?loc))
    :effect (and (trap-disarmed ?loc) (not (has-trap ?loc)))
)","negate (arm-free) in preconditions
swap (has-trap ?loc) with (trap-disarmed ?loc)
"
rpggame,disarm-trap,0.5295013785362244,Hard Negative (Manipulated Action),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: **Disarm a trap** – if there is a trap in the room the hero is in and the hero is empty-handed (does not hold a sword), then the hero can disarm it

Action name: disarm-trap


Your answer:
","Parameters:
1. ?loc - cells

Preconditions:
```
(and
    (trap-disarmed ?loc)
    (at-hero ?loc)
    (has-trap ?loc)
)
```

Effects:
```
(and
    (arm-free)
    (not (has-trap ?loc))
)
```
","(:action disarm-trap
    :parameters (?loc - cells)
    :precondition (and (at-hero ?loc) (arm-free) (has-trap ?loc))
    :effect (and (trap-disarmed ?loc) (not (has-trap ?loc)))
)","swap (arm-free) with (trap-disarmed ?loc)
"
rpggame,disarm-trap,0.44905462861061096,Hard Negative (Manipulated Action),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: **Disarm a trap** – if there is a trap in the room the hero is in and the hero is empty-handed (does not hold a sword), then the hero can disarm it

Action name: disarm-trap


Your answer:
","Parameters:
1. ?loc - cells

Preconditions:
```
(and
    (at-hero ?loc)
    (arm-free)
)
```

Effects:
```
(and
    (trap-disarmed ?loc)
    (not (has-trap ?loc))
)
```
","(:action disarm-trap
    :parameters (?loc - cells)
    :precondition (and (at-hero ?loc) (arm-free) (has-trap ?loc))
    :effect (and (trap-disarmed ?loc) (not (has-trap ?loc)))
)","remove (has-trap ?loc) from preconditions
"
rpggame,disarm-trap,0.3508460223674774,Hard Negative (Manipulated Action),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: **Disarm a trap** – if there is a trap in the room the hero is in and the hero is empty-handed (does not hold a sword), then the hero can disarm it

Action name: disarm-trap


Your answer:
","Parameters:
1. ?loc - cells

Preconditions:
```
(and
    (not (has-trap ?loc))
    (at-hero ?loc)
    (arm-free)
)
```

Effects:
```
(and
    (has-trap ?loc)
    (trap-disarmed ?loc)
)
```
","(:action disarm-trap
    :parameters (?loc - cells)
    :precondition (and (at-hero ?loc) (arm-free) (has-trap ?loc))
    :effect (and (trap-disarmed ?loc) (not (has-trap ?loc)))
)","swap (has-trap ?loc) with (not (has-trap ?loc))
"
rpggame,disarm-trap,0.32180118560791016,Hard Negative (Manipulated Action),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: **Disarm a trap** – if there is a trap in the room the hero is in and the hero is empty-handed (does not hold a sword), then the hero can disarm it

Action name: disarm-trap


Your answer:
","Parameters:
1. ?loc - cells

Preconditions:
```
(and
    (not (has-trap ?loc))
    (at-hero ?loc)
    (has-trap ?loc)
)
```

Effects:
```
(and
    (arm-free)
    (trap-disarmed ?loc)
)
```
","(:action disarm-trap
    :parameters (?loc - cells)
    :precondition (and (at-hero ?loc) (arm-free) (has-trap ?loc))
    :effect (and (trap-disarmed ?loc) (not (has-trap ?loc)))
)","swap (arm-free) with (not (has-trap ?loc))
"
rpggame,disarm-trap,0.30294203758239746,Hard Negative (Manipulated Action),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: **Disarm a trap** – if there is a trap in the room the hero is in and the hero is empty-handed (does not hold a sword), then the hero can disarm it

Action name: disarm-trap


Your answer:
","Parameters:
1. ?loc - cells

Preconditions:
```
(and
    (trap-disarmed ?loc)
    (arm-free)
)
```

Effects:
```
(and
    (at-hero ?loc)
    (not (has-trap ?loc))
)
```
","(:action disarm-trap
    :parameters (?loc - cells)
    :precondition (and (at-hero ?loc) (arm-free) (has-trap ?loc))
    :effect (and (trap-disarmed ?loc) (not (has-trap ?loc)))
)","remove (has-trap ?loc) from preconditions
swap (at-hero ?loc) with (trap-disarmed ?loc)
"
rpggame,disarm-trap,0.44905462861061096,Hard Negative (Manipulated Action),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: **Disarm a trap** – if there is a trap in the room the hero is in and the hero is empty-handed (does not hold a sword), then the hero can disarm it

Action name: disarm-trap


Your answer:
","Parameters:
1. ?loc - cells

Preconditions:
```
(and
    (at-hero ?loc)
    (arm-free)
)
```

Effects:
```
(and
    (trap-disarmed ?loc)
    (not (has-trap ?loc))
)
```
","(:action disarm-trap
    :parameters (?loc - cells)
    :precondition (and (at-hero ?loc) (arm-free) (has-trap ?loc))
    :effect (and (trap-disarmed ?loc) (not (has-trap ?loc)))
)","remove (has-trap ?loc) from preconditions
"
rpggame,disarm-trap,0.24092437326908112,Hard Negative (Manipulated Action),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: **Disarm a trap** – if there is a trap in the room the hero is in and the hero is empty-handed (does not hold a sword), then the hero can disarm it

Action name: disarm-trap


Your answer:
","Parameters:
1. ?loc - cells

Preconditions:
```
(and
    (not (has-trap ?loc))
    (has-trap ?loc)
)
```

Effects:
```
(and
    (arm-free)
    (trap-disarmed ?loc)
)
```
","(:action disarm-trap
    :parameters (?loc - cells)
    :precondition (and (at-hero ?loc) (arm-free) (has-trap ?loc))
    :effect (and (trap-disarmed ?loc) (not (has-trap ?loc)))
)","swap (arm-free) with (not (has-trap ?loc))
remove (at-hero ?loc) from preconditions
"
rpggame,disarm-trap,0.5120278596878052,Hard Negative (Manipulated Action),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: **Disarm a trap** – if there is a trap in the room the hero is in and the hero is empty-handed (does not hold a sword), then the hero can disarm it

Action name: disarm-trap


Your answer:

**Explanation:**

Imagine our hero in a dungeon, a place with rooms connected like a spider web. Each room can be just an empty space, or it might have something like a monster, a trap, or even a sword. Somewhere in this maze, there's a special room that has an exit—the ultimate goal for our hero.

Now, let's focus on a specific action our hero might need to take: **disarming a trap**. In our scenario, the hero finds themselves in a room with a trap. The action to disarm this trap is what we need to understand.

The action is named `disarm-trap`. This action, like any other, has specific requirements (preconditions) that must be met before the hero can perform it. These preconditions are:
1. **The hero must be in the same room as the trap.** This makes sense because you can't disarm a trap from another room. It's like needing to be in the kitchen to turn off a stove.
2. **The hero's hand must be free.** This means the hero can’t be holding anything, like a sword. It's a bit like needing both hands free to tie your shoes properly.
3. **There must actually be a trap in the room.** Obviously, the hero can't disarm a trap if there isn't one there!

If all these conditions are met, then the hero can go ahead and disarm the trap. The results (effects) of this action are:
1. **The trap in the room is disarmed.** This means the room is now safe from that trap.
2. **The trap is no longer considered to be in the room.** It's like cleaning up a spill; once it's cleaned, it's not there anymore.

By breaking down the action like this, we see how each condition helps ensure the action can be carried out safely and effectively. It’s just like following a recipe—each ingredient needs to be added at the right time for the dish to come out right!","Parameters:
1. ?loc - cells

Preconditions:
```
(and
    (arm-free)
    (has-trap ?loc)
)
```

Effects:
```
(and
    (trap-disarmed ?loc)
    (not (has-trap ?loc))
)
```
","(:action disarm-trap
    :parameters (?loc - cells)
    :precondition (and (at-hero ?loc) (arm-free) (has-trap ?loc))
    :effect (and (trap-disarmed ?loc) (not (has-trap ?loc)))
)","remove (at-hero ?loc) from preconditions
"
rpggame,disarm-trap,0.3508460223674774,Hard Negative (Manipulated Action),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: **Disarm a trap** – if there is a trap in the room the hero is in and the hero is empty-handed (does not hold a sword), then the hero can disarm it

Action name: disarm-trap


Your answer:

**Explanation:**

Imagine our hero in a dungeon, a place with rooms connected like a spider web. Each room can be just an empty space, or it might have something like a monster, a trap, or even a sword. Somewhere in this maze, there's a special room that has an exit—the ultimate goal for our hero.

Now, let's focus on a specific action our hero might need to take: **disarming a trap**. In our scenario, the hero finds themselves in a room with a trap. The action to disarm this trap is what we need to understand.

The action is named `disarm-trap`. This action, like any other, has specific requirements (preconditions) that must be met before the hero can perform it. These preconditions are:
1. **The hero must be in the same room as the trap.** This makes sense because you can't disarm a trap from another room. It's like needing to be in the kitchen to turn off a stove.
2. **The hero's hand must be free.** This means the hero can’t be holding anything, like a sword. It's a bit like needing both hands free to tie your shoes properly.
3. **There must actually be a trap in the room.** Obviously, the hero can't disarm a trap if there isn't one there!

If all these conditions are met, then the hero can go ahead and disarm the trap. The results (effects) of this action are:
1. **The trap in the room is disarmed.** This means the room is now safe from that trap.
2. **The trap is no longer considered to be in the room.** It's like cleaning up a spill; once it's cleaned, it's not there anymore.

By breaking down the action like this, we see how each condition helps ensure the action can be carried out safely and effectively. It’s just like following a recipe—each ingredient needs to be added at the right time for the dish to come out right!","Parameters:
1. ?loc - cells

Preconditions:
```
(and
    (not (has-trap ?loc))
    (at-hero ?loc)
    (arm-free)
)
```

Effects:
```
(and
    (has-trap ?loc)
    (trap-disarmed ?loc)
)
```
","(:action disarm-trap
    :parameters (?loc - cells)
    :precondition (and (at-hero ?loc) (arm-free) (has-trap ?loc))
    :effect (and (trap-disarmed ?loc) (not (has-trap ?loc)))
)","negate (not (has-trap ?loc)) in effects
negate (has-trap ?loc) in preconditions
"
rpggame,disarm-trap,0.24427887797355652,Hard Negative (Manipulated Action),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: **Disarm a trap** – if there is a trap in the room the hero is in and the hero is empty-handed (does not hold a sword), then the hero can disarm it

Action name: disarm-trap


Your answer:

**Explanation:**

Imagine our hero in a dungeon, a place with rooms connected like a spider web. Each room can be just an empty space, or it might have something like a monster, a trap, or even a sword. Somewhere in this maze, there's a special room that has an exit—the ultimate goal for our hero.

Now, let's focus on a specific action our hero might need to take: **disarming a trap**. In our scenario, the hero finds themselves in a room with a trap. The action to disarm this trap is what we need to understand.

The action is named `disarm-trap`. This action, like any other, has specific requirements (preconditions) that must be met before the hero can perform it. These preconditions are:
1. **The hero must be in the same room as the trap.** This makes sense because you can't disarm a trap from another room. It's like needing to be in the kitchen to turn off a stove.
2. **The hero's hand must be free.** This means the hero can’t be holding anything, like a sword. It's a bit like needing both hands free to tie your shoes properly.
3. **There must actually be a trap in the room.** Obviously, the hero can't disarm a trap if there isn't one there!

If all these conditions are met, then the hero can go ahead and disarm the trap. The results (effects) of this action are:
1. **The trap in the room is disarmed.** This means the room is now safe from that trap.
2. **The trap is no longer considered to be in the room.** It's like cleaning up a spill; once it's cleaned, it's not there anymore.

By breaking down the action like this, we see how each condition helps ensure the action can be carried out safely and effectively. It’s just like following a recipe—each ingredient needs to be added at the right time for the dish to come out right!","Parameters:
1. ?loc - cells

Preconditions:
```
(and
    (not (has-trap ?loc))
    (at-hero ?loc)
)
```

Effects:
```
(and
    (arm-free)
    (trap-disarmed ?loc)
)
```
","(:action disarm-trap
    :parameters (?loc - cells)
    :precondition (and (at-hero ?loc) (arm-free) (has-trap ?loc))
    :effect (and (trap-disarmed ?loc) (not (has-trap ?loc)))
)","negate (has-trap ?loc) in preconditions
swap (arm-free) with (not (has-trap ?loc))
"
rpggame,disarm-trap,0.5120278596878052,Hard Negative (Manipulated Action),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: **Disarm a trap** – if there is a trap in the room the hero is in and the hero is empty-handed (does not hold a sword), then the hero can disarm it

Action name: disarm-trap


Your answer:

**Explanation:**

Imagine our hero in a dungeon, a place with rooms connected like a spider web. Each room can be just an empty space, or it might have something like a monster, a trap, or even a sword. Somewhere in this maze, there's a special room that has an exit—the ultimate goal for our hero.

Now, let's focus on a specific action our hero might need to take: **disarming a trap**. In our scenario, the hero finds themselves in a room with a trap. The action to disarm this trap is what we need to understand.

The action is named `disarm-trap`. This action, like any other, has specific requirements (preconditions) that must be met before the hero can perform it. These preconditions are:
1. **The hero must be in the same room as the trap.** This makes sense because you can't disarm a trap from another room. It's like needing to be in the kitchen to turn off a stove.
2. **The hero's hand must be free.** This means the hero can’t be holding anything, like a sword. It's a bit like needing both hands free to tie your shoes properly.
3. **There must actually be a trap in the room.** Obviously, the hero can't disarm a trap if there isn't one there!

If all these conditions are met, then the hero can go ahead and disarm the trap. The results (effects) of this action are:
1. **The trap in the room is disarmed.** This means the room is now safe from that trap.
2. **The trap is no longer considered to be in the room.** It's like cleaning up a spill; once it's cleaned, it's not there anymore.

By breaking down the action like this, we see how each condition helps ensure the action can be carried out safely and effectively. It’s just like following a recipe—each ingredient needs to be added at the right time for the dish to come out right!","Parameters:
1. ?loc - cells

Preconditions:
```
(and
    (arm-free)
    (has-trap ?loc)
)
```

Effects:
```
(and
    (trap-disarmed ?loc)
    (not (has-trap ?loc))
)
```
","(:action disarm-trap
    :parameters (?loc - cells)
    :precondition (and (at-hero ?loc) (arm-free) (has-trap ?loc))
    :effect (and (trap-disarmed ?loc) (not (has-trap ?loc)))
)","remove (at-hero ?loc) from preconditions
"
rpggame,disarm-trap,0.3544121980667114,Hard Negative (Manipulated Action),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: **Disarm a trap** – if there is a trap in the room the hero is in and the hero is empty-handed (does not hold a sword), then the hero can disarm it

Action name: disarm-trap


Your answer:

**Explanation:**

Imagine our hero in a dungeon, a place with rooms connected like a spider web. Each room can be just an empty space, or it might have something like a monster, a trap, or even a sword. Somewhere in this maze, there's a special room that has an exit—the ultimate goal for our hero.

Now, let's focus on a specific action our hero might need to take: **disarming a trap**. In our scenario, the hero finds themselves in a room with a trap. The action to disarm this trap is what we need to understand.

The action is named `disarm-trap`. This action, like any other, has specific requirements (preconditions) that must be met before the hero can perform it. These preconditions are:
1. **The hero must be in the same room as the trap.** This makes sense because you can't disarm a trap from another room. It's like needing to be in the kitchen to turn off a stove.
2. **The hero's hand must be free.** This means the hero can’t be holding anything, like a sword. It's a bit like needing both hands free to tie your shoes properly.
3. **There must actually be a trap in the room.** Obviously, the hero can't disarm a trap if there isn't one there!

If all these conditions are met, then the hero can go ahead and disarm the trap. The results (effects) of this action are:
1. **The trap in the room is disarmed.** This means the room is now safe from that trap.
2. **The trap is no longer considered to be in the room.** It's like cleaning up a spill; once it's cleaned, it's not there anymore.

By breaking down the action like this, we see how each condition helps ensure the action can be carried out safely and effectively. It’s just like following a recipe—each ingredient needs to be added at the right time for the dish to come out right!","Parameters:
1. ?loc - cells

Preconditions:
```
(and
    (not (arm-free))
    (at-hero ?loc)
    (has-trap ?loc)
)
```

Effects:
```
(and
    (trap-disarmed ?loc)
    (not (has-trap ?loc))
)
```
","(:action disarm-trap
    :parameters (?loc - cells)
    :precondition (and (at-hero ?loc) (arm-free) (has-trap ?loc))
    :effect (and (trap-disarmed ?loc) (not (has-trap ?loc)))
)","negate (arm-free) in preconditions
"
rpggame,disarm-trap,0.3498781621456146,Hard Negative (Manipulated Action),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: **Disarm a trap** – if there is a trap in the room the hero is in and the hero is empty-handed (does not hold a sword), then the hero can disarm it

Action name: disarm-trap


Your answer:

**Explanation:**

Imagine our hero in a dungeon, a place with rooms connected like a spider web. Each room can be just an empty space, or it might have something like a monster, a trap, or even a sword. Somewhere in this maze, there's a special room that has an exit—the ultimate goal for our hero.

Now, let's focus on a specific action our hero might need to take: **disarming a trap**. In our scenario, the hero finds themselves in a room with a trap. The action to disarm this trap is what we need to understand.

The action is named `disarm-trap`. This action, like any other, has specific requirements (preconditions) that must be met before the hero can perform it. These preconditions are:
1. **The hero must be in the same room as the trap.** This makes sense because you can't disarm a trap from another room. It's like needing to be in the kitchen to turn off a stove.
2. **The hero's hand must be free.** This means the hero can’t be holding anything, like a sword. It's a bit like needing both hands free to tie your shoes properly.
3. **There must actually be a trap in the room.** Obviously, the hero can't disarm a trap if there isn't one there!

If all these conditions are met, then the hero can go ahead and disarm the trap. The results (effects) of this action are:
1. **The trap in the room is disarmed.** This means the room is now safe from that trap.
2. **The trap is no longer considered to be in the room.** It's like cleaning up a spill; once it's cleaned, it's not there anymore.

By breaking down the action like this, we see how each condition helps ensure the action can be carried out safely and effectively. It’s just like following a recipe—each ingredient needs to be added at the right time for the dish to come out right!","Parameters:
1. ?loc - cells

Preconditions:
```
(and
    (not (has-trap ?loc))
    (arm-free)
    (has-trap ?loc)
)
```

Effects:
```
(and
    (at-hero ?loc)
    (trap-disarmed ?loc)
)
```
","(:action disarm-trap
    :parameters (?loc - cells)
    :precondition (and (at-hero ?loc) (arm-free) (has-trap ?loc))
    :effect (and (trap-disarmed ?loc) (not (has-trap ?loc)))
)","swap (at-hero ?loc) with (not (has-trap ?loc))
"
rpggame,disarm-trap,0.7038177251815796,Hard Negative (Manipulated Action),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: **Disarm a trap** – if there is a trap in the room the hero is in and the hero is empty-handed (does not hold a sword), then the hero can disarm it

Action name: disarm-trap


Your answer:

**Explanation:**

Imagine our hero in a dungeon, a place with rooms connected like a spider web. Each room can be just an empty space, or it might have something like a monster, a trap, or even a sword. Somewhere in this maze, there's a special room that has an exit—the ultimate goal for our hero.

Now, let's focus on a specific action our hero might need to take: **disarming a trap**. In our scenario, the hero finds themselves in a room with a trap. The action to disarm this trap is what we need to understand.

The action is named `disarm-trap`. This action, like any other, has specific requirements (preconditions) that must be met before the hero can perform it. These preconditions are:
1. **The hero must be in the same room as the trap.** This makes sense because you can't disarm a trap from another room. It's like needing to be in the kitchen to turn off a stove.
2. **The hero's hand must be free.** This means the hero can’t be holding anything, like a sword. It's a bit like needing both hands free to tie your shoes properly.
3. **There must actually be a trap in the room.** Obviously, the hero can't disarm a trap if there isn't one there!

If all these conditions are met, then the hero can go ahead and disarm the trap. The results (effects) of this action are:
1. **The trap in the room is disarmed.** This means the room is now safe from that trap.
2. **The trap is no longer considered to be in the room.** It's like cleaning up a spill; once it's cleaned, it's not there anymore.

By breaking down the action like this, we see how each condition helps ensure the action can be carried out safely and effectively. It’s just like following a recipe—each ingredient needs to be added at the right time for the dish to come out right!","Parameters:
1. ?loc - cells

Preconditions:
```
(and
    (at-hero ?loc)
    (arm-free)
    (has-trap ?loc)
)
```

Effects:
```
(and
    (has-trap ?loc)
    (trap-disarmed ?loc)
)
```
","(:action disarm-trap
    :parameters (?loc - cells)
    :precondition (and (at-hero ?loc) (arm-free) (has-trap ?loc))
    :effect (and (trap-disarmed ?loc) (not (has-trap ?loc)))
)","negate (not (has-trap ?loc)) in effects
"
rpggame,disarm-trap,0.41724348068237305,Hard Negative (Manipulated Action),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: **Disarm a trap** – if there is a trap in the room the hero is in and the hero is empty-handed (does not hold a sword), then the hero can disarm it

Action name: disarm-trap


Your answer:

**Explanation:**

Imagine our hero in a dungeon, a place with rooms connected like a spider web. Each room can be just an empty space, or it might have something like a monster, a trap, or even a sword. Somewhere in this maze, there's a special room that has an exit—the ultimate goal for our hero.

Now, let's focus on a specific action our hero might need to take: **disarming a trap**. In our scenario, the hero finds themselves in a room with a trap. The action to disarm this trap is what we need to understand.

The action is named `disarm-trap`. This action, like any other, has specific requirements (preconditions) that must be met before the hero can perform it. These preconditions are:
1. **The hero must be in the same room as the trap.** This makes sense because you can't disarm a trap from another room. It's like needing to be in the kitchen to turn off a stove.
2. **The hero's hand must be free.** This means the hero can’t be holding anything, like a sword. It's a bit like needing both hands free to tie your shoes properly.
3. **There must actually be a trap in the room.** Obviously, the hero can't disarm a trap if there isn't one there!

If all these conditions are met, then the hero can go ahead and disarm the trap. The results (effects) of this action are:
1. **The trap in the room is disarmed.** This means the room is now safe from that trap.
2. **The trap is no longer considered to be in the room.** It's like cleaning up a spill; once it's cleaned, it's not there anymore.

By breaking down the action like this, we see how each condition helps ensure the action can be carried out safely and effectively. It’s just like following a recipe—each ingredient needs to be added at the right time for the dish to come out right!","Parameters:
1. ?loc - cells

Preconditions:
```
(and
    (not (has-trap ?loc))
    (at-hero ?loc)
    (arm-free)
)
```

Effects:
```
(and
    (trap-disarmed ?loc)
    (not (has-trap ?loc))
)
```
","(:action disarm-trap
    :parameters (?loc - cells)
    :precondition (and (at-hero ?loc) (arm-free) (has-trap ?loc))
    :effect (and (trap-disarmed ?loc) (not (has-trap ?loc)))
)","negate (has-trap ?loc) in preconditions
"
rpggame,disarm-trap,0.3402034044265747,Hard Negative (Manipulated Action),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: **Disarm a trap** – if there is a trap in the room the hero is in and the hero is empty-handed (does not hold a sword), then the hero can disarm it

Action name: disarm-trap


Your answer:

**Explanation:**

Imagine our hero in a dungeon, a place with rooms connected like a spider web. Each room can be just an empty space, or it might have something like a monster, a trap, or even a sword. Somewhere in this maze, there's a special room that has an exit—the ultimate goal for our hero.

Now, let's focus on a specific action our hero might need to take: **disarming a trap**. In our scenario, the hero finds themselves in a room with a trap. The action to disarm this trap is what we need to understand.

The action is named `disarm-trap`. This action, like any other, has specific requirements (preconditions) that must be met before the hero can perform it. These preconditions are:
1. **The hero must be in the same room as the trap.** This makes sense because you can't disarm a trap from another room. It's like needing to be in the kitchen to turn off a stove.
2. **The hero's hand must be free.** This means the hero can’t be holding anything, like a sword. It's a bit like needing both hands free to tie your shoes properly.
3. **There must actually be a trap in the room.** Obviously, the hero can't disarm a trap if there isn't one there!

If all these conditions are met, then the hero can go ahead and disarm the trap. The results (effects) of this action are:
1. **The trap in the room is disarmed.** This means the room is now safe from that trap.
2. **The trap is no longer considered to be in the room.** It's like cleaning up a spill; once it's cleaned, it's not there anymore.

By breaking down the action like this, we see how each condition helps ensure the action can be carried out safely and effectively. It’s just like following a recipe—each ingredient needs to be added at the right time for the dish to come out right!","Parameters:
1. ?loc - cells

Preconditions:
```
(and
    (not (has-trap ?loc))
    (at-hero ?loc)
)
```

Effects:
```
(and
    (has-trap ?loc)
    (trap-disarmed ?loc)
)
```
","(:action disarm-trap
    :parameters (?loc - cells)
    :precondition (and (at-hero ?loc) (arm-free) (has-trap ?loc))
    :effect (and (trap-disarmed ?loc) (not (has-trap ?loc)))
)","swap (has-trap ?loc) with (not (has-trap ?loc))
remove (arm-free) from preconditions
"
rpggame,disarm-trap,0.5408951044082642,Hard Negative (Manipulated Action),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: **Disarm a trap** – if there is a trap in the room the hero is in and the hero is empty-handed (does not hold a sword), then the hero can disarm it

Action name: disarm-trap


Your answer:

**Explanation:**

Imagine our hero in a dungeon, a place with rooms connected like a spider web. Each room can be just an empty space, or it might have something like a monster, a trap, or even a sword. Somewhere in this maze, there's a special room that has an exit—the ultimate goal for our hero.

Now, let's focus on a specific action our hero might need to take: **disarming a trap**. In our scenario, the hero finds themselves in a room with a trap. The action to disarm this trap is what we need to understand.

The action is named `disarm-trap`. This action, like any other, has specific requirements (preconditions) that must be met before the hero can perform it. These preconditions are:
1. **The hero must be in the same room as the trap.** This makes sense because you can't disarm a trap from another room. It's like needing to be in the kitchen to turn off a stove.
2. **The hero's hand must be free.** This means the hero can’t be holding anything, like a sword. It's a bit like needing both hands free to tie your shoes properly.
3. **There must actually be a trap in the room.** Obviously, the hero can't disarm a trap if there isn't one there!

If all these conditions are met, then the hero can go ahead and disarm the trap. The results (effects) of this action are:
1. **The trap in the room is disarmed.** This means the room is now safe from that trap.
2. **The trap is no longer considered to be in the room.** It's like cleaning up a spill; once it's cleaned, it's not there anymore.

By breaking down the action like this, we see how each condition helps ensure the action can be carried out safely and effectively. It’s just like following a recipe—each ingredient needs to be added at the right time for the dish to come out right!","Parameters:
1. ?loc - cells

Preconditions:
```
(and
    (trap-disarmed ?loc)
    (arm-free)
    (has-trap ?loc)
)
```

Effects:
```
(and
    (at-hero ?loc)
    (has-trap ?loc)
)
```
","(:action disarm-trap
    :parameters (?loc - cells)
    :precondition (and (at-hero ?loc) (arm-free) (has-trap ?loc))
    :effect (and (trap-disarmed ?loc) (not (has-trap ?loc)))
)","swap (at-hero ?loc) with (trap-disarmed ?loc)
negate (not (has-trap ?loc)) in effects
"
rpggame,disarm-trap,0.6990561485290527,Hard Negative (Manipulated Action),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: **Disarm a trap** – if there is a trap in the room the hero is in and the hero is empty-handed (does not hold a sword), then the hero can disarm it

Action name: disarm-trap


Your answer:
","**Explanation:**

Imagine our hero in a dungeon, a place with rooms connected like a spider web. Each room can be just an empty space, or it might have something like a monster, a trap, or even a sword. Somewhere in this maze, there's a special room that has an exit—the ultimate goal for our hero.

Now, let's focus on a specific action our hero might need to take: **disarming a trap**. In our scenario, the hero finds themselves in a room with a trap. The action to disarm this trap is what we need to understand.

The action is named `disarm-trap`. This action, like any other, has specific requirements (preconditions) that must be met before the hero can perform it. These preconditions are:
1. **The hero must be in the same room as the trap.** This makes sense because you can't disarm a trap from another room. It's like needing to be in the kitchen to turn off a stove.
2. **The hero's hand must be free.** This means the hero can’t be holding anything, like a sword. It's a bit like needing both hands free to tie your shoes properly.
3. **There must actually be a trap in the room.** Obviously, the hero can't disarm a trap if there isn't one there!

If all these conditions are met, then the hero can go ahead and disarm the trap. The results (effects) of this action are:
1. **The trap in the room is disarmed.** This means the room is now safe from that trap.
2. **The trap is no longer considered to be in the room.** It's like cleaning up a spill; once it's cleaned, it's not there anymore.

By breaking down the action like this, we see how each condition helps ensure the action can be carried out safely and effectively. It’s just like following a recipe—each ingredient needs to be added at the right time for the dish to come out right!
Parameters:
1. ?loc - cells

Preconditions:
```
(and
    (at-hero ?loc)
    (arm-free)
    (has-trap ?loc)
)
```

Effects:
```
(and
    (not (trap-disarmed ?loc))
    (not (has-trap ?loc))
)
```
","(:action disarm-trap
    :parameters (?loc - cells)
    :precondition (and (at-hero ?loc) (arm-free) (has-trap ?loc))
    :effect (and (trap-disarmed ?loc) (not (has-trap ?loc)))
)","negate (trap-disarmed ?loc) in effects
"
rpggame,disarm-trap,0.6990561485290527,Hard Negative (Manipulated Action),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: **Disarm a trap** – if there is a trap in the room the hero is in and the hero is empty-handed (does not hold a sword), then the hero can disarm it

Action name: disarm-trap


Your answer:
","**Explanation:**

Imagine our hero in a dungeon, a place with rooms connected like a spider web. Each room can be just an empty space, or it might have something like a monster, a trap, or even a sword. Somewhere in this maze, there's a special room that has an exit—the ultimate goal for our hero.

Now, let's focus on a specific action our hero might need to take: **disarming a trap**. In our scenario, the hero finds themselves in a room with a trap. The action to disarm this trap is what we need to understand.

The action is named `disarm-trap`. This action, like any other, has specific requirements (preconditions) that must be met before the hero can perform it. These preconditions are:
1. **The hero must be in the same room as the trap.** This makes sense because you can't disarm a trap from another room. It's like needing to be in the kitchen to turn off a stove.
2. **The hero's hand must be free.** This means the hero can’t be holding anything, like a sword. It's a bit like needing both hands free to tie your shoes properly.
3. **There must actually be a trap in the room.** Obviously, the hero can't disarm a trap if there isn't one there!

If all these conditions are met, then the hero can go ahead and disarm the trap. The results (effects) of this action are:
1. **The trap in the room is disarmed.** This means the room is now safe from that trap.
2. **The trap is no longer considered to be in the room.** It's like cleaning up a spill; once it's cleaned, it's not there anymore.

By breaking down the action like this, we see how each condition helps ensure the action can be carried out safely and effectively. It’s just like following a recipe—each ingredient needs to be added at the right time for the dish to come out right!
Parameters:
1. ?loc - cells

Preconditions:
```
(and
    (at-hero ?loc)
    (arm-free)
    (has-trap ?loc)
)
```

Effects:
```
(and
    (not (trap-disarmed ?loc))
    (not (has-trap ?loc))
)
```
","(:action disarm-trap
    :parameters (?loc - cells)
    :precondition (and (at-hero ?loc) (arm-free) (has-trap ?loc))
    :effect (and (trap-disarmed ?loc) (not (has-trap ?loc)))
)","negate (trap-disarmed ?loc) in effects
"
rpggame,disarm-trap,0.6990561485290527,Hard Negative (Manipulated Action),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: **Disarm a trap** – if there is a trap in the room the hero is in and the hero is empty-handed (does not hold a sword), then the hero can disarm it

Action name: disarm-trap


Your answer:
","**Explanation:**

Imagine our hero in a dungeon, a place with rooms connected like a spider web. Each room can be just an empty space, or it might have something like a monster, a trap, or even a sword. Somewhere in this maze, there's a special room that has an exit—the ultimate goal for our hero.

Now, let's focus on a specific action our hero might need to take: **disarming a trap**. In our scenario, the hero finds themselves in a room with a trap. The action to disarm this trap is what we need to understand.

The action is named `disarm-trap`. This action, like any other, has specific requirements (preconditions) that must be met before the hero can perform it. These preconditions are:
1. **The hero must be in the same room as the trap.** This makes sense because you can't disarm a trap from another room. It's like needing to be in the kitchen to turn off a stove.
2. **The hero's hand must be free.** This means the hero can’t be holding anything, like a sword. It's a bit like needing both hands free to tie your shoes properly.
3. **There must actually be a trap in the room.** Obviously, the hero can't disarm a trap if there isn't one there!

If all these conditions are met, then the hero can go ahead and disarm the trap. The results (effects) of this action are:
1. **The trap in the room is disarmed.** This means the room is now safe from that trap.
2. **The trap is no longer considered to be in the room.** It's like cleaning up a spill; once it's cleaned, it's not there anymore.

By breaking down the action like this, we see how each condition helps ensure the action can be carried out safely and effectively. It’s just like following a recipe—each ingredient needs to be added at the right time for the dish to come out right!
Parameters:
1. ?loc - cells

Preconditions:
```
(and
    (at-hero ?loc)
    (arm-free)
)
```

Effects:
```
(and
    (has-trap ?loc)
    (trap-disarmed ?loc)
)
```
","(:action disarm-trap
    :parameters (?loc - cells)
    :precondition (and (at-hero ?loc) (arm-free) (has-trap ?loc))
    :effect (and (trap-disarmed ?loc) (not (has-trap ?loc)))
)","negate (not (has-trap ?loc)) in effects
remove (has-trap ?loc) from preconditions
"
rpggame,disarm-trap,0.6990561485290527,Hard Negative (Manipulated Action),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: **Disarm a trap** – if there is a trap in the room the hero is in and the hero is empty-handed (does not hold a sword), then the hero can disarm it

Action name: disarm-trap


Your answer:
","**Explanation:**

Imagine our hero in a dungeon, a place with rooms connected like a spider web. Each room can be just an empty space, or it might have something like a monster, a trap, or even a sword. Somewhere in this maze, there's a special room that has an exit—the ultimate goal for our hero.

Now, let's focus on a specific action our hero might need to take: **disarming a trap**. In our scenario, the hero finds themselves in a room with a trap. The action to disarm this trap is what we need to understand.

The action is named `disarm-trap`. This action, like any other, has specific requirements (preconditions) that must be met before the hero can perform it. These preconditions are:
1. **The hero must be in the same room as the trap.** This makes sense because you can't disarm a trap from another room. It's like needing to be in the kitchen to turn off a stove.
2. **The hero's hand must be free.** This means the hero can’t be holding anything, like a sword. It's a bit like needing both hands free to tie your shoes properly.
3. **There must actually be a trap in the room.** Obviously, the hero can't disarm a trap if there isn't one there!

If all these conditions are met, then the hero can go ahead and disarm the trap. The results (effects) of this action are:
1. **The trap in the room is disarmed.** This means the room is now safe from that trap.
2. **The trap is no longer considered to be in the room.** It's like cleaning up a spill; once it's cleaned, it's not there anymore.

By breaking down the action like this, we see how each condition helps ensure the action can be carried out safely and effectively. It’s just like following a recipe—each ingredient needs to be added at the right time for the dish to come out right!
Parameters:
1. ?loc - cells

Preconditions:
```
(and
    (at-hero ?loc)
    (arm-free)
    (has-trap ?loc)
)
```

Effects:
```
(and
    (not (has-trap ?loc))
)
```
","(:action disarm-trap
    :parameters (?loc - cells)
    :precondition (and (at-hero ?loc) (arm-free) (has-trap ?loc))
    :effect (and (trap-disarmed ?loc) (not (has-trap ?loc)))
)","remove (trap-disarmed ?loc) from effects
"
rpggame,disarm-trap,0.6990561485290527,Hard Negative (Manipulated Action),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: **Disarm a trap** – if there is a trap in the room the hero is in and the hero is empty-handed (does not hold a sword), then the hero can disarm it

Action name: disarm-trap


Your answer:
","**Explanation:**

Imagine our hero in a dungeon, a place with rooms connected like a spider web. Each room can be just an empty space, or it might have something like a monster, a trap, or even a sword. Somewhere in this maze, there's a special room that has an exit—the ultimate goal for our hero.

Now, let's focus on a specific action our hero might need to take: **disarming a trap**. In our scenario, the hero finds themselves in a room with a trap. The action to disarm this trap is what we need to understand.

The action is named `disarm-trap`. This action, like any other, has specific requirements (preconditions) that must be met before the hero can perform it. These preconditions are:
1. **The hero must be in the same room as the trap.** This makes sense because you can't disarm a trap from another room. It's like needing to be in the kitchen to turn off a stove.
2. **The hero's hand must be free.** This means the hero can’t be holding anything, like a sword. It's a bit like needing both hands free to tie your shoes properly.
3. **There must actually be a trap in the room.** Obviously, the hero can't disarm a trap if there isn't one there!

If all these conditions are met, then the hero can go ahead and disarm the trap. The results (effects) of this action are:
1. **The trap in the room is disarmed.** This means the room is now safe from that trap.
2. **The trap is no longer considered to be in the room.** It's like cleaning up a spill; once it's cleaned, it's not there anymore.

By breaking down the action like this, we see how each condition helps ensure the action can be carried out safely and effectively. It’s just like following a recipe—each ingredient needs to be added at the right time for the dish to come out right!
Parameters:
1. ?loc - cells

Preconditions:
```
(and
    (trap-disarmed ?loc)
    (arm-free)
    (has-trap ?loc)
)
```

Effects:
```
(and
    (at-hero ?loc)
    (not (has-trap ?loc))
)
```
","(:action disarm-trap
    :parameters (?loc - cells)
    :precondition (and (at-hero ?loc) (arm-free) (has-trap ?loc))
    :effect (and (trap-disarmed ?loc) (not (has-trap ?loc)))
)","swap (at-hero ?loc) with (trap-disarmed ?loc)
"
rpggame,disarm-trap,0.6990561485290527,Hard Negative (Manipulated Action),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: **Disarm a trap** – if there is a trap in the room the hero is in and the hero is empty-handed (does not hold a sword), then the hero can disarm it

Action name: disarm-trap


Your answer:
","**Explanation:**

Imagine our hero in a dungeon, a place with rooms connected like a spider web. Each room can be just an empty space, or it might have something like a monster, a trap, or even a sword. Somewhere in this maze, there's a special room that has an exit—the ultimate goal for our hero.

Now, let's focus on a specific action our hero might need to take: **disarming a trap**. In our scenario, the hero finds themselves in a room with a trap. The action to disarm this trap is what we need to understand.

The action is named `disarm-trap`. This action, like any other, has specific requirements (preconditions) that must be met before the hero can perform it. These preconditions are:
1. **The hero must be in the same room as the trap.** This makes sense because you can't disarm a trap from another room. It's like needing to be in the kitchen to turn off a stove.
2. **The hero's hand must be free.** This means the hero can’t be holding anything, like a sword. It's a bit like needing both hands free to tie your shoes properly.
3. **There must actually be a trap in the room.** Obviously, the hero can't disarm a trap if there isn't one there!

If all these conditions are met, then the hero can go ahead and disarm the trap. The results (effects) of this action are:
1. **The trap in the room is disarmed.** This means the room is now safe from that trap.
2. **The trap is no longer considered to be in the room.** It's like cleaning up a spill; once it's cleaned, it's not there anymore.

By breaking down the action like this, we see how each condition helps ensure the action can be carried out safely and effectively. It’s just like following a recipe—each ingredient needs to be added at the right time for the dish to come out right!
Parameters:
1. ?loc - cells

Preconditions:
```
(and
    (at-hero ?loc)
    (arm-free)
    (has-trap ?loc)
)
```

Effects:
```
(and
    (not (has-trap ?loc))
)
```
","(:action disarm-trap
    :parameters (?loc - cells)
    :precondition (and (at-hero ?loc) (arm-free) (has-trap ?loc))
    :effect (and (trap-disarmed ?loc) (not (has-trap ?loc)))
)","remove (trap-disarmed ?loc) from effects
"
rpggame,disarm-trap,0.6990561485290527,Hard Negative (Manipulated Action),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: **Disarm a trap** – if there is a trap in the room the hero is in and the hero is empty-handed (does not hold a sword), then the hero can disarm it

Action name: disarm-trap


Your answer:
","**Explanation:**

Imagine our hero in a dungeon, a place with rooms connected like a spider web. Each room can be just an empty space, or it might have something like a monster, a trap, or even a sword. Somewhere in this maze, there's a special room that has an exit—the ultimate goal for our hero.

Now, let's focus on a specific action our hero might need to take: **disarming a trap**. In our scenario, the hero finds themselves in a room with a trap. The action to disarm this trap is what we need to understand.

The action is named `disarm-trap`. This action, like any other, has specific requirements (preconditions) that must be met before the hero can perform it. These preconditions are:
1. **The hero must be in the same room as the trap.** This makes sense because you can't disarm a trap from another room. It's like needing to be in the kitchen to turn off a stove.
2. **The hero's hand must be free.** This means the hero can’t be holding anything, like a sword. It's a bit like needing both hands free to tie your shoes properly.
3. **There must actually be a trap in the room.** Obviously, the hero can't disarm a trap if there isn't one there!

If all these conditions are met, then the hero can go ahead and disarm the trap. The results (effects) of this action are:
1. **The trap in the room is disarmed.** This means the room is now safe from that trap.
2. **The trap is no longer considered to be in the room.** It's like cleaning up a spill; once it's cleaned, it's not there anymore.

By breaking down the action like this, we see how each condition helps ensure the action can be carried out safely and effectively. It’s just like following a recipe—each ingredient needs to be added at the right time for the dish to come out right!
Parameters:
1. ?loc - cells

Preconditions:
```
(and
    (not (arm-free))
    (has-trap ?loc)
)
```

Effects:
```
(and
    (trap-disarmed ?loc)
    (not (has-trap ?loc))
)
```
","(:action disarm-trap
    :parameters (?loc - cells)
    :precondition (and (at-hero ?loc) (arm-free) (has-trap ?loc))
    :effect (and (trap-disarmed ?loc) (not (has-trap ?loc)))
)","remove (at-hero ?loc) from preconditions
negate (arm-free) in preconditions
"
rpggame,disarm-trap,0.6990561485290527,Hard Negative (Manipulated Action),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: **Disarm a trap** – if there is a trap in the room the hero is in and the hero is empty-handed (does not hold a sword), then the hero can disarm it

Action name: disarm-trap


Your answer:
","**Explanation:**

Imagine our hero in a dungeon, a place with rooms connected like a spider web. Each room can be just an empty space, or it might have something like a monster, a trap, or even a sword. Somewhere in this maze, there's a special room that has an exit—the ultimate goal for our hero.

Now, let's focus on a specific action our hero might need to take: **disarming a trap**. In our scenario, the hero finds themselves in a room with a trap. The action to disarm this trap is what we need to understand.

The action is named `disarm-trap`. This action, like any other, has specific requirements (preconditions) that must be met before the hero can perform it. These preconditions are:
1. **The hero must be in the same room as the trap.** This makes sense because you can't disarm a trap from another room. It's like needing to be in the kitchen to turn off a stove.
2. **The hero's hand must be free.** This means the hero can’t be holding anything, like a sword. It's a bit like needing both hands free to tie your shoes properly.
3. **There must actually be a trap in the room.** Obviously, the hero can't disarm a trap if there isn't one there!

If all these conditions are met, then the hero can go ahead and disarm the trap. The results (effects) of this action are:
1. **The trap in the room is disarmed.** This means the room is now safe from that trap.
2. **The trap is no longer considered to be in the room.** It's like cleaning up a spill; once it's cleaned, it's not there anymore.

By breaking down the action like this, we see how each condition helps ensure the action can be carried out safely and effectively. It’s just like following a recipe—each ingredient needs to be added at the right time for the dish to come out right!
Parameters:
1. ?loc - cells

Preconditions:
```
(and
    (at-hero ?loc)
    (arm-free)
)
```

Effects:
```
(and
    (trap-disarmed ?loc)
    (not (has-trap ?loc))
)
```
","(:action disarm-trap
    :parameters (?loc - cells)
    :precondition (and (at-hero ?loc) (arm-free) (has-trap ?loc))
    :effect (and (trap-disarmed ?loc) (not (has-trap ?loc)))
)","remove (has-trap ?loc) from preconditions
"
rpggame,disarm-trap,0.6990561485290527,Hard Negative (Manipulated Action),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: **Disarm a trap** – if there is a trap in the room the hero is in and the hero is empty-handed (does not hold a sword), then the hero can disarm it

Action name: disarm-trap


Your answer:
","**Explanation:**

Imagine our hero in a dungeon, a place with rooms connected like a spider web. Each room can be just an empty space, or it might have something like a monster, a trap, or even a sword. Somewhere in this maze, there's a special room that has an exit—the ultimate goal for our hero.

Now, let's focus on a specific action our hero might need to take: **disarming a trap**. In our scenario, the hero finds themselves in a room with a trap. The action to disarm this trap is what we need to understand.

The action is named `disarm-trap`. This action, like any other, has specific requirements (preconditions) that must be met before the hero can perform it. These preconditions are:
1. **The hero must be in the same room as the trap.** This makes sense because you can't disarm a trap from another room. It's like needing to be in the kitchen to turn off a stove.
2. **The hero's hand must be free.** This means the hero can’t be holding anything, like a sword. It's a bit like needing both hands free to tie your shoes properly.
3. **There must actually be a trap in the room.** Obviously, the hero can't disarm a trap if there isn't one there!

If all these conditions are met, then the hero can go ahead and disarm the trap. The results (effects) of this action are:
1. **The trap in the room is disarmed.** This means the room is now safe from that trap.
2. **The trap is no longer considered to be in the room.** It's like cleaning up a spill; once it's cleaned, it's not there anymore.

By breaking down the action like this, we see how each condition helps ensure the action can be carried out safely and effectively. It’s just like following a recipe—each ingredient needs to be added at the right time for the dish to come out right!
Parameters:
1. ?loc - cells

Preconditions:
```
(and
    (not (at-hero ?loc))
    (not (arm-free))
    (has-trap ?loc)
)
```

Effects:
```
(and
    (trap-disarmed ?loc)
    (not (has-trap ?loc))
)
```
","(:action disarm-trap
    :parameters (?loc - cells)
    :precondition (and (at-hero ?loc) (arm-free) (has-trap ?loc))
    :effect (and (trap-disarmed ?loc) (not (has-trap ?loc)))
)","negate (at-hero ?loc) in preconditions
negate (arm-free) in preconditions
"
rpggame,disarm-trap,0.6990561485290527,Hard Negative (Manipulated Action),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: **Disarm a trap** – if there is a trap in the room the hero is in and the hero is empty-handed (does not hold a sword), then the hero can disarm it

Action name: disarm-trap


Your answer:
","**Explanation:**

Imagine our hero in a dungeon, a place with rooms connected like a spider web. Each room can be just an empty space, or it might have something like a monster, a trap, or even a sword. Somewhere in this maze, there's a special room that has an exit—the ultimate goal for our hero.

Now, let's focus on a specific action our hero might need to take: **disarming a trap**. In our scenario, the hero finds themselves in a room with a trap. The action to disarm this trap is what we need to understand.

The action is named `disarm-trap`. This action, like any other, has specific requirements (preconditions) that must be met before the hero can perform it. These preconditions are:
1. **The hero must be in the same room as the trap.** This makes sense because you can't disarm a trap from another room. It's like needing to be in the kitchen to turn off a stove.
2. **The hero's hand must be free.** This means the hero can’t be holding anything, like a sword. It's a bit like needing both hands free to tie your shoes properly.
3. **There must actually be a trap in the room.** Obviously, the hero can't disarm a trap if there isn't one there!

If all these conditions are met, then the hero can go ahead and disarm the trap. The results (effects) of this action are:
1. **The trap in the room is disarmed.** This means the room is now safe from that trap.
2. **The trap is no longer considered to be in the room.** It's like cleaning up a spill; once it's cleaned, it's not there anymore.

By breaking down the action like this, we see how each condition helps ensure the action can be carried out safely and effectively. It’s just like following a recipe—each ingredient needs to be added at the right time for the dish to come out right!
Parameters:
1. ?loc - cells

Preconditions:
```
(and
    (not (has-trap ?loc))
    (at-hero ?loc)
    (arm-free)
)
```

Effects:
```
(and
    (has-trap ?loc)
    (trap-disarmed ?loc)
)
```
","(:action disarm-trap
    :parameters (?loc - cells)
    :precondition (and (at-hero ?loc) (arm-free) (has-trap ?loc))
    :effect (and (trap-disarmed ?loc) (not (has-trap ?loc)))
)","negate (not (has-trap ?loc)) in effects
negate (has-trap ?loc) in preconditions
"
rpggame,move-to-monster,0.8527721762657166,Positive (Correct Match),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: The hero can **move** to an adjacent room (connected by a corridor) that has not been destroyed (i.e., the hero has not already visited the room). When this action is executed, the hero gets into a location with a monster

Action name: move-to-monster


Your answer:
","Parameters:
1. ?from - cells
2. ?to - cells
3. ?s - swords

Preconditions:
```
(and
    (connected ?from ?to)
    (at-hero ?from)
    (has-monster ?to)
    (not (is-destroyed ?to))
    (not (has-trap ?from))
    (holding ?s)
)
```

Effects:
```
(and
    (at-hero ?to)
    (is-destroyed ?from)
    (not (at-hero ?from))
)
```
","(:action move-to-monster
    :parameters (?from - cells ?to - cells ?s - swords)
    :precondition (and (connected ?from ?to) (at-hero ?from) (has-monster ?to) (not (is-destroyed ?to)) (not (has-trap ?from)) (holding ?s))
    :effect (and (at-hero ?to) (is-destroyed ?from) (not (at-hero ?from)))
)",
rpggame,move-to-monster,0.8527721762657166,Positive (Correct Match),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: The hero can **move** to an adjacent room (connected by a corridor) that has not been destroyed (i.e., the hero has not already visited the room). When this action is executed, the hero gets into a location with a monster

Action name: move-to-monster


Your answer:

**Explanation:**

Let's imagine our hero in the dungeon scenario. The hero wakes up and finds themselves in a room, wanting to move to an adjacent room where, unfortunately, there's a monster. Here's how we translate this scenario into a set of instructions, or a 'domain model,' in planning language.

The action we're talking about is called ""move-to-monster."" This means our hero is trying to move from one room (let’s call it Room A) to another room (Room B) where there is a monster. To ensure this action can happen, there are certain conditions that need to be met (these are called 'preconditions') and certain outcomes that will happen as a result of the action (these are called 'effects').

1. **Preconditions**:
   - **Connected Rooms**: Room A and Room B must be connected by a corridor. This makes sense because our hero can't magically jump from one room to another; there must be a path.
   - **Hero's Current Location**: The hero must currently be in Room A. If the hero isn't there, they can't start moving from it!
   - **Monster Presence**: Room B must have a monster. After all, the action is specifically about moving to a room with a monster.
   - **Room Integrity**: Room B should not be destroyed. A destroyed room might mean it’s collapsed or inaccessible, so it's logical our hero can’t move into it.
   - **Safety in Room A**: Room A should not have a trap. This makes sure our hero is safe and able to move without getting caught in a trap.
   - **Armed Hero**: The hero must be holding a sword. It’s a dangerous task to move into a room with a monster, so having a sword means the hero is prepared for a fight.

2. **Effects**:
   - **Hero's New Location**: After the action, the hero will be in Room B. They've successfully moved.
   - **Change in Room A's Status**: Room A becomes 'destroyed.' This might represent that the room is no longer safe or viable after the hero leaves, maybe because of the haste in escaping or some mechanism triggered by the departure.
   - **Update Hero's Old Location**: The fact that the hero was in Room A is no longer true, which is updated in our model to reflect the hero’s new position.

This planning helps organize our thoughts and actions logically, ensuring every step is clear and all necessary precautions are taken. Think of it like giving someone directions with a checklist: ""Before you go there, make sure this, this, and this are true, and once you do, this and this will happen."" This ensures everyone knows what to expect and how to prepare! ","Parameters:
1. ?from - cells
2. ?to - cells
3. ?s - swords

Preconditions:
```
(and
    (connected ?from ?to)
    (at-hero ?from)
    (has-monster ?to)
    (not (is-destroyed ?to))
    (not (has-trap ?from))
    (holding ?s)
)
```

Effects:
```
(and
    (at-hero ?to)
    (is-destroyed ?from)
    (not (at-hero ?from))
)
```
","(:action move-to-monster
    :parameters (?from - cells ?to - cells ?s - swords)
    :precondition (and (connected ?from ?to) (at-hero ?from) (has-monster ?to) (not (is-destroyed ?to)) (not (has-trap ?from)) (holding ?s))
    :effect (and (at-hero ?to) (is-destroyed ?from) (not (at-hero ?from)))
)",
rpggame,move-to-monster,0.7913336753845215,Positive (Correct Match),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: The hero can **move** to an adjacent room (connected by a corridor) that has not been destroyed (i.e., the hero has not already visited the room). When this action is executed, the hero gets into a location with a monster

Action name: move-to-monster


Your answer:
","**Explanation:**

Let's imagine our hero in the dungeon scenario. The hero wakes up and finds themselves in a room, wanting to move to an adjacent room where, unfortunately, there's a monster. Here's how we translate this scenario into a set of instructions, or a 'domain model,' in planning language.

The action we're talking about is called ""move-to-monster."" This means our hero is trying to move from one room (let’s call it Room A) to another room (Room B) where there is a monster. To ensure this action can happen, there are certain conditions that need to be met (these are called 'preconditions') and certain outcomes that will happen as a result of the action (these are called 'effects').

1. **Preconditions**:
   - **Connected Rooms**: Room A and Room B must be connected by a corridor. This makes sense because our hero can't magically jump from one room to another; there must be a path.
   - **Hero's Current Location**: The hero must currently be in Room A. If the hero isn't there, they can't start moving from it!
   - **Monster Presence**: Room B must have a monster. After all, the action is specifically about moving to a room with a monster.
   - **Room Integrity**: Room B should not be destroyed. A destroyed room might mean it’s collapsed or inaccessible, so it's logical our hero can’t move into it.
   - **Safety in Room A**: Room A should not have a trap. This makes sure our hero is safe and able to move without getting caught in a trap.
   - **Armed Hero**: The hero must be holding a sword. It’s a dangerous task to move into a room with a monster, so having a sword means the hero is prepared for a fight.

2. **Effects**:
   - **Hero's New Location**: After the action, the hero will be in Room B. They've successfully moved.
   - **Change in Room A's Status**: Room A becomes 'destroyed.' This might represent that the room is no longer safe or viable after the hero leaves, maybe because of the haste in escaping or some mechanism triggered by the departure.
   - **Update Hero's Old Location**: The fact that the hero was in Room A is no longer true, which is updated in our model to reflect the hero’s new position.

This planning helps organize our thoughts and actions logically, ensuring every step is clear and all necessary precautions are taken. Think of it like giving someone directions with a checklist: ""Before you go there, make sure this, this, and this are true, and once you do, this and this will happen."" This ensures everyone knows what to expect and how to prepare! 
Parameters:
1. ?from - cells
2. ?to - cells
3. ?s - swords

Preconditions:
```
(and
    (connected ?from ?to)
    (at-hero ?from)
    (has-monster ?to)
    (not (is-destroyed ?to))
    (not (has-trap ?from))
    (holding ?s)
)
```

Effects:
```
(and
    (at-hero ?to)
    (is-destroyed ?from)
    (not (at-hero ?from))
)
```
","(:action move-to-monster
    :parameters (?from - cells ?to - cells ?s - swords)
    :precondition (and (connected ?from ?to) (at-hero ?from) (has-monster ?to) (not (is-destroyed ?to)) (not (has-trap ?from)) (holding ?s))
    :effect (and (at-hero ?to) (is-destroyed ?from) (not (at-hero ?from)))
)",
rpggame,move-to-monster,0.12457382678985596,Easy Negative (Inter-Domain Mismatch),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: The hero can **move** to an adjacent room (connected by a corridor) that has not been destroyed (i.e., the hero has not already visited the room). When this action is executed, the hero gets into a location with a monster

Action name: move-to-monster


Your answer:
","Parameters:
1. ?x - book
2. ?y - book
3. ?cat - category

Preconditions:
```
(and
    (on-shelf ?x ?y)
    (accessible ?x)
    (hands-free)
    (belongs-to-category ?x ?cat)
)
```

Effects:
```
(and
    (holding ?x)
    (accessible ?y)
    (not (accessible ?x))
    (not (hands-free))
    (not (on-shelf ?x ?y))
    (shelf-empty ?cat)
)
```
","(:action move-to-monster
    :parameters (?from - cells ?to - cells ?s - swords)
    :precondition (and (connected ?from ?to) (at-hero ?from) (has-monster ?to) (not (is-destroyed ?to)) (not (has-trap ?from)) (holding ?s))
    :effect (and (at-hero ?to) (is-destroyed ?from) (not (at-hero ?from)))
)",
rpggame,move-to-monster,0.03546389192342758,Easy Negative (Inter-Domain Mismatch),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: The hero can **move** to an adjacent room (connected by a corridor) that has not been destroyed (i.e., the hero has not already visited the room). When this action is executed, the hero gets into a location with a monster

Action name: move-to-monster


Your answer:
","Parameters:
1. ?x - book

Preconditions:
```
(holding ?x)
```

Effects:
```
(and
    (not (holding ?x))
    (accessible ?x)
    (hands-free)
    (on-table ?x)
)
```
","(:action move-to-monster
    :parameters (?from - cells ?to - cells ?s - swords)
    :precondition (and (connected ?from ?to) (at-hero ?from) (has-monster ?to) (not (is-destroyed ?to)) (not (has-trap ?from)) (holding ?s))
    :effect (and (at-hero ?to) (is-destroyed ?from) (not (at-hero ?from)))
)",
rpggame,move-to-monster,0.1453760266304016,Easy Negative (Inter-Domain Mismatch),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: The hero can **move** to an adjacent room (connected by a corridor) that has not been destroyed (i.e., the hero has not already visited the room). When this action is executed, the hero gets into a location with a monster

Action name: move-to-monster


Your answer:
","Parameters:
1. ?x - book

Preconditions:
```
(and
    (accessible ?x)
    (not (checked-out ?x))
)
```

Effects:
```
(and
    (checked-out ?x)
    (not (accessible ?x))
    (book-request ?x)
    (return-due ?x)
)
```
","(:action move-to-monster
    :parameters (?from - cells ?to - cells ?s - swords)
    :precondition (and (connected ?from ?to) (at-hero ?from) (has-monster ?to) (not (is-destroyed ?to)) (not (has-trap ?from)) (holding ?s))
    :effect (and (at-hero ?to) (is-destroyed ?from) (not (at-hero ?from)))
)",
rpggame,move-to-monster,0.07697039097547531,Easy Negative (Inter-Domain Mismatch),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: The hero can **move** to an adjacent room (connected by a corridor) that has not been destroyed (i.e., the hero has not already visited the room). When this action is executed, the hero gets into a location with a monster

Action name: move-to-monster


Your answer:
","Parameters:
1. ?x - book

Preconditions:
```
(and
    (checked-out ?x)
    (holding ?x)
)
```

Effects:
```
(and
    (not (checked-out ?x))
    (not (holding ?x))
    (not (book-request ?x))
    (not (return-due ?x))
    (accessible ?x)
    (hands-free)
)
```
","(:action move-to-monster
    :parameters (?from - cells ?to - cells ?s - swords)
    :precondition (and (connected ?from ?to) (at-hero ?from) (has-monster ?to) (not (is-destroyed ?to)) (not (has-trap ?from)) (holding ?s))
    :effect (and (at-hero ?to) (is-destroyed ?from) (not (at-hero ?from)))
)",
rpggame,move-to-monster,0.10417857021093369,Easy Negative (Inter-Domain Mismatch),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: The hero can **move** to an adjacent room (connected by a corridor) that has not been destroyed (i.e., the hero has not already visited the room). When this action is executed, the hero gets into a location with a monster

Action name: move-to-monster


Your answer:
","Parameters:
1. ?x - book

Preconditions:
```
(and
    (accessible ?x)
    (on-table ?x)
    (hands-free)
)
```

Effects:
```
(and
    (not (on-table ?x))
    (not (accessible ?x))
    (not (hands-free))
    (holding ?x)
)
```
","(:action move-to-monster
    :parameters (?from - cells ?to - cells ?s - swords)
    :precondition (and (connected ?from ?to) (at-hero ?from) (has-monster ?to) (not (is-destroyed ?to)) (not (has-trap ?from)) (holding ?s))
    :effect (and (at-hero ?to) (is-destroyed ?from) (not (at-hero ?from)))
)",
rpggame,move-to-monster,0.1758420765399933,Easy Negative (Inter-Domain Mismatch),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: The hero can **move** to an adjacent room (connected by a corridor) that has not been destroyed (i.e., the hero has not already visited the room). When this action is executed, the hero gets into a location with a monster

Action name: move-to-monster


Your answer:
","Parameters:
1. ?x - book
2. ?y - book
3. ?cat - category

Preconditions:
```
(and
    (holding ?x)
    (accessible ?y)
    (belongs-to-category ?x ?cat)
    (not (shelf-overflow ?cat))
)
```

Effects:
```
(and
    (not (holding ?x))
    (not (accessible ?y))
    (accessible ?x)
    (hands-free)
    (on-shelf ?x ?y)
    (shelf-empty ?cat)
)
```
","(:action move-to-monster
    :parameters (?from - cells ?to - cells ?s - swords)
    :precondition (and (connected ?from ?to) (at-hero ?from) (has-monster ?to) (not (is-destroyed ?to)) (not (has-trap ?from)) (holding ?s))
    :effect (and (at-hero ?to) (is-destroyed ?from) (not (at-hero ?from)))
)",
rpggame,move-to-monster,0.12457382678985596,Easy Negative (Inter-Domain Mismatch),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: The hero can **move** to an adjacent room (connected by a corridor) that has not been destroyed (i.e., the hero has not already visited the room). When this action is executed, the hero gets into a location with a monster

Action name: move-to-monster


Your answer:

**Explanation:**

Let's imagine our hero in the dungeon scenario. The hero wakes up and finds themselves in a room, wanting to move to an adjacent room where, unfortunately, there's a monster. Here's how we translate this scenario into a set of instructions, or a 'domain model,' in planning language.

The action we're talking about is called ""move-to-monster."" This means our hero is trying to move from one room (let’s call it Room A) to another room (Room B) where there is a monster. To ensure this action can happen, there are certain conditions that need to be met (these are called 'preconditions') and certain outcomes that will happen as a result of the action (these are called 'effects').

1. **Preconditions**:
   - **Connected Rooms**: Room A and Room B must be connected by a corridor. This makes sense because our hero can't magically jump from one room to another; there must be a path.
   - **Hero's Current Location**: The hero must currently be in Room A. If the hero isn't there, they can't start moving from it!
   - **Monster Presence**: Room B must have a monster. After all, the action is specifically about moving to a room with a monster.
   - **Room Integrity**: Room B should not be destroyed. A destroyed room might mean it’s collapsed or inaccessible, so it's logical our hero can’t move into it.
   - **Safety in Room A**: Room A should not have a trap. This makes sure our hero is safe and able to move without getting caught in a trap.
   - **Armed Hero**: The hero must be holding a sword. It’s a dangerous task to move into a room with a monster, so having a sword means the hero is prepared for a fight.

2. **Effects**:
   - **Hero's New Location**: After the action, the hero will be in Room B. They've successfully moved.
   - **Change in Room A's Status**: Room A becomes 'destroyed.' This might represent that the room is no longer safe or viable after the hero leaves, maybe because of the haste in escaping or some mechanism triggered by the departure.
   - **Update Hero's Old Location**: The fact that the hero was in Room A is no longer true, which is updated in our model to reflect the hero’s new position.

This planning helps organize our thoughts and actions logically, ensuring every step is clear and all necessary precautions are taken. Think of it like giving someone directions with a checklist: ""Before you go there, make sure this, this, and this are true, and once you do, this and this will happen."" This ensures everyone knows what to expect and how to prepare! ","Parameters:
1. ?x - book
2. ?y - book
3. ?cat - category

Preconditions:
```
(and
    (on-shelf ?x ?y)
    (accessible ?x)
    (hands-free)
    (belongs-to-category ?x ?cat)
)
```

Effects:
```
(and
    (holding ?x)
    (accessible ?y)
    (not (accessible ?x))
    (not (hands-free))
    (not (on-shelf ?x ?y))
    (shelf-empty ?cat)
)
```
","(:action move-to-monster
    :parameters (?from - cells ?to - cells ?s - swords)
    :precondition (and (connected ?from ?to) (at-hero ?from) (has-monster ?to) (not (is-destroyed ?to)) (not (has-trap ?from)) (holding ?s))
    :effect (and (at-hero ?to) (is-destroyed ?from) (not (at-hero ?from)))
)",
rpggame,move-to-monster,0.03546389192342758,Easy Negative (Inter-Domain Mismatch),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: The hero can **move** to an adjacent room (connected by a corridor) that has not been destroyed (i.e., the hero has not already visited the room). When this action is executed, the hero gets into a location with a monster

Action name: move-to-monster


Your answer:

**Explanation:**

Let's imagine our hero in the dungeon scenario. The hero wakes up and finds themselves in a room, wanting to move to an adjacent room where, unfortunately, there's a monster. Here's how we translate this scenario into a set of instructions, or a 'domain model,' in planning language.

The action we're talking about is called ""move-to-monster."" This means our hero is trying to move from one room (let’s call it Room A) to another room (Room B) where there is a monster. To ensure this action can happen, there are certain conditions that need to be met (these are called 'preconditions') and certain outcomes that will happen as a result of the action (these are called 'effects').

1. **Preconditions**:
   - **Connected Rooms**: Room A and Room B must be connected by a corridor. This makes sense because our hero can't magically jump from one room to another; there must be a path.
   - **Hero's Current Location**: The hero must currently be in Room A. If the hero isn't there, they can't start moving from it!
   - **Monster Presence**: Room B must have a monster. After all, the action is specifically about moving to a room with a monster.
   - **Room Integrity**: Room B should not be destroyed. A destroyed room might mean it’s collapsed or inaccessible, so it's logical our hero can’t move into it.
   - **Safety in Room A**: Room A should not have a trap. This makes sure our hero is safe and able to move without getting caught in a trap.
   - **Armed Hero**: The hero must be holding a sword. It’s a dangerous task to move into a room with a monster, so having a sword means the hero is prepared for a fight.

2. **Effects**:
   - **Hero's New Location**: After the action, the hero will be in Room B. They've successfully moved.
   - **Change in Room A's Status**: Room A becomes 'destroyed.' This might represent that the room is no longer safe or viable after the hero leaves, maybe because of the haste in escaping or some mechanism triggered by the departure.
   - **Update Hero's Old Location**: The fact that the hero was in Room A is no longer true, which is updated in our model to reflect the hero’s new position.

This planning helps organize our thoughts and actions logically, ensuring every step is clear and all necessary precautions are taken. Think of it like giving someone directions with a checklist: ""Before you go there, make sure this, this, and this are true, and once you do, this and this will happen."" This ensures everyone knows what to expect and how to prepare! ","Parameters:
1. ?x - book

Preconditions:
```
(holding ?x)
```

Effects:
```
(and
    (not (holding ?x))
    (accessible ?x)
    (hands-free)
    (on-table ?x)
)
```
","(:action move-to-monster
    :parameters (?from - cells ?to - cells ?s - swords)
    :precondition (and (connected ?from ?to) (at-hero ?from) (has-monster ?to) (not (is-destroyed ?to)) (not (has-trap ?from)) (holding ?s))
    :effect (and (at-hero ?to) (is-destroyed ?from) (not (at-hero ?from)))
)",
rpggame,move-to-monster,0.1453760266304016,Easy Negative (Inter-Domain Mismatch),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: The hero can **move** to an adjacent room (connected by a corridor) that has not been destroyed (i.e., the hero has not already visited the room). When this action is executed, the hero gets into a location with a monster

Action name: move-to-monster


Your answer:

**Explanation:**

Let's imagine our hero in the dungeon scenario. The hero wakes up and finds themselves in a room, wanting to move to an adjacent room where, unfortunately, there's a monster. Here's how we translate this scenario into a set of instructions, or a 'domain model,' in planning language.

The action we're talking about is called ""move-to-monster."" This means our hero is trying to move from one room (let’s call it Room A) to another room (Room B) where there is a monster. To ensure this action can happen, there are certain conditions that need to be met (these are called 'preconditions') and certain outcomes that will happen as a result of the action (these are called 'effects').

1. **Preconditions**:
   - **Connected Rooms**: Room A and Room B must be connected by a corridor. This makes sense because our hero can't magically jump from one room to another; there must be a path.
   - **Hero's Current Location**: The hero must currently be in Room A. If the hero isn't there, they can't start moving from it!
   - **Monster Presence**: Room B must have a monster. After all, the action is specifically about moving to a room with a monster.
   - **Room Integrity**: Room B should not be destroyed. A destroyed room might mean it’s collapsed or inaccessible, so it's logical our hero can’t move into it.
   - **Safety in Room A**: Room A should not have a trap. This makes sure our hero is safe and able to move without getting caught in a trap.
   - **Armed Hero**: The hero must be holding a sword. It’s a dangerous task to move into a room with a monster, so having a sword means the hero is prepared for a fight.

2. **Effects**:
   - **Hero's New Location**: After the action, the hero will be in Room B. They've successfully moved.
   - **Change in Room A's Status**: Room A becomes 'destroyed.' This might represent that the room is no longer safe or viable after the hero leaves, maybe because of the haste in escaping or some mechanism triggered by the departure.
   - **Update Hero's Old Location**: The fact that the hero was in Room A is no longer true, which is updated in our model to reflect the hero’s new position.

This planning helps organize our thoughts and actions logically, ensuring every step is clear and all necessary precautions are taken. Think of it like giving someone directions with a checklist: ""Before you go there, make sure this, this, and this are true, and once you do, this and this will happen."" This ensures everyone knows what to expect and how to prepare! ","Parameters:
1. ?x - book

Preconditions:
```
(and
    (accessible ?x)
    (not (checked-out ?x))
)
```

Effects:
```
(and
    (checked-out ?x)
    (not (accessible ?x))
    (book-request ?x)
    (return-due ?x)
)
```
","(:action move-to-monster
    :parameters (?from - cells ?to - cells ?s - swords)
    :precondition (and (connected ?from ?to) (at-hero ?from) (has-monster ?to) (not (is-destroyed ?to)) (not (has-trap ?from)) (holding ?s))
    :effect (and (at-hero ?to) (is-destroyed ?from) (not (at-hero ?from)))
)",
rpggame,move-to-monster,0.07697039097547531,Easy Negative (Inter-Domain Mismatch),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: The hero can **move** to an adjacent room (connected by a corridor) that has not been destroyed (i.e., the hero has not already visited the room). When this action is executed, the hero gets into a location with a monster

Action name: move-to-monster


Your answer:

**Explanation:**

Let's imagine our hero in the dungeon scenario. The hero wakes up and finds themselves in a room, wanting to move to an adjacent room where, unfortunately, there's a monster. Here's how we translate this scenario into a set of instructions, or a 'domain model,' in planning language.

The action we're talking about is called ""move-to-monster."" This means our hero is trying to move from one room (let’s call it Room A) to another room (Room B) where there is a monster. To ensure this action can happen, there are certain conditions that need to be met (these are called 'preconditions') and certain outcomes that will happen as a result of the action (these are called 'effects').

1. **Preconditions**:
   - **Connected Rooms**: Room A and Room B must be connected by a corridor. This makes sense because our hero can't magically jump from one room to another; there must be a path.
   - **Hero's Current Location**: The hero must currently be in Room A. If the hero isn't there, they can't start moving from it!
   - **Monster Presence**: Room B must have a monster. After all, the action is specifically about moving to a room with a monster.
   - **Room Integrity**: Room B should not be destroyed. A destroyed room might mean it’s collapsed or inaccessible, so it's logical our hero can’t move into it.
   - **Safety in Room A**: Room A should not have a trap. This makes sure our hero is safe and able to move without getting caught in a trap.
   - **Armed Hero**: The hero must be holding a sword. It’s a dangerous task to move into a room with a monster, so having a sword means the hero is prepared for a fight.

2. **Effects**:
   - **Hero's New Location**: After the action, the hero will be in Room B. They've successfully moved.
   - **Change in Room A's Status**: Room A becomes 'destroyed.' This might represent that the room is no longer safe or viable after the hero leaves, maybe because of the haste in escaping or some mechanism triggered by the departure.
   - **Update Hero's Old Location**: The fact that the hero was in Room A is no longer true, which is updated in our model to reflect the hero’s new position.

This planning helps organize our thoughts and actions logically, ensuring every step is clear and all necessary precautions are taken. Think of it like giving someone directions with a checklist: ""Before you go there, make sure this, this, and this are true, and once you do, this and this will happen."" This ensures everyone knows what to expect and how to prepare! ","Parameters:
1. ?x - book

Preconditions:
```
(and
    (checked-out ?x)
    (holding ?x)
)
```

Effects:
```
(and
    (not (checked-out ?x))
    (not (holding ?x))
    (not (book-request ?x))
    (not (return-due ?x))
    (accessible ?x)
    (hands-free)
)
```
","(:action move-to-monster
    :parameters (?from - cells ?to - cells ?s - swords)
    :precondition (and (connected ?from ?to) (at-hero ?from) (has-monster ?to) (not (is-destroyed ?to)) (not (has-trap ?from)) (holding ?s))
    :effect (and (at-hero ?to) (is-destroyed ?from) (not (at-hero ?from)))
)",
rpggame,move-to-monster,0.10417857021093369,Easy Negative (Inter-Domain Mismatch),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: The hero can **move** to an adjacent room (connected by a corridor) that has not been destroyed (i.e., the hero has not already visited the room). When this action is executed, the hero gets into a location with a monster

Action name: move-to-monster


Your answer:

**Explanation:**

Let's imagine our hero in the dungeon scenario. The hero wakes up and finds themselves in a room, wanting to move to an adjacent room where, unfortunately, there's a monster. Here's how we translate this scenario into a set of instructions, or a 'domain model,' in planning language.

The action we're talking about is called ""move-to-monster."" This means our hero is trying to move from one room (let’s call it Room A) to another room (Room B) where there is a monster. To ensure this action can happen, there are certain conditions that need to be met (these are called 'preconditions') and certain outcomes that will happen as a result of the action (these are called 'effects').

1. **Preconditions**:
   - **Connected Rooms**: Room A and Room B must be connected by a corridor. This makes sense because our hero can't magically jump from one room to another; there must be a path.
   - **Hero's Current Location**: The hero must currently be in Room A. If the hero isn't there, they can't start moving from it!
   - **Monster Presence**: Room B must have a monster. After all, the action is specifically about moving to a room with a monster.
   - **Room Integrity**: Room B should not be destroyed. A destroyed room might mean it’s collapsed or inaccessible, so it's logical our hero can’t move into it.
   - **Safety in Room A**: Room A should not have a trap. This makes sure our hero is safe and able to move without getting caught in a trap.
   - **Armed Hero**: The hero must be holding a sword. It’s a dangerous task to move into a room with a monster, so having a sword means the hero is prepared for a fight.

2. **Effects**:
   - **Hero's New Location**: After the action, the hero will be in Room B. They've successfully moved.
   - **Change in Room A's Status**: Room A becomes 'destroyed.' This might represent that the room is no longer safe or viable after the hero leaves, maybe because of the haste in escaping or some mechanism triggered by the departure.
   - **Update Hero's Old Location**: The fact that the hero was in Room A is no longer true, which is updated in our model to reflect the hero’s new position.

This planning helps organize our thoughts and actions logically, ensuring every step is clear and all necessary precautions are taken. Think of it like giving someone directions with a checklist: ""Before you go there, make sure this, this, and this are true, and once you do, this and this will happen."" This ensures everyone knows what to expect and how to prepare! ","Parameters:
1. ?x - book

Preconditions:
```
(and
    (accessible ?x)
    (on-table ?x)
    (hands-free)
)
```

Effects:
```
(and
    (not (on-table ?x))
    (not (accessible ?x))
    (not (hands-free))
    (holding ?x)
)
```
","(:action move-to-monster
    :parameters (?from - cells ?to - cells ?s - swords)
    :precondition (and (connected ?from ?to) (at-hero ?from) (has-monster ?to) (not (is-destroyed ?to)) (not (has-trap ?from)) (holding ?s))
    :effect (and (at-hero ?to) (is-destroyed ?from) (not (at-hero ?from)))
)",
rpggame,move-to-monster,0.1758420765399933,Easy Negative (Inter-Domain Mismatch),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: The hero can **move** to an adjacent room (connected by a corridor) that has not been destroyed (i.e., the hero has not already visited the room). When this action is executed, the hero gets into a location with a monster

Action name: move-to-monster


Your answer:

**Explanation:**

Let's imagine our hero in the dungeon scenario. The hero wakes up and finds themselves in a room, wanting to move to an adjacent room where, unfortunately, there's a monster. Here's how we translate this scenario into a set of instructions, or a 'domain model,' in planning language.

The action we're talking about is called ""move-to-monster."" This means our hero is trying to move from one room (let’s call it Room A) to another room (Room B) where there is a monster. To ensure this action can happen, there are certain conditions that need to be met (these are called 'preconditions') and certain outcomes that will happen as a result of the action (these are called 'effects').

1. **Preconditions**:
   - **Connected Rooms**: Room A and Room B must be connected by a corridor. This makes sense because our hero can't magically jump from one room to another; there must be a path.
   - **Hero's Current Location**: The hero must currently be in Room A. If the hero isn't there, they can't start moving from it!
   - **Monster Presence**: Room B must have a monster. After all, the action is specifically about moving to a room with a monster.
   - **Room Integrity**: Room B should not be destroyed. A destroyed room might mean it’s collapsed or inaccessible, so it's logical our hero can’t move into it.
   - **Safety in Room A**: Room A should not have a trap. This makes sure our hero is safe and able to move without getting caught in a trap.
   - **Armed Hero**: The hero must be holding a sword. It’s a dangerous task to move into a room with a monster, so having a sword means the hero is prepared for a fight.

2. **Effects**:
   - **Hero's New Location**: After the action, the hero will be in Room B. They've successfully moved.
   - **Change in Room A's Status**: Room A becomes 'destroyed.' This might represent that the room is no longer safe or viable after the hero leaves, maybe because of the haste in escaping or some mechanism triggered by the departure.
   - **Update Hero's Old Location**: The fact that the hero was in Room A is no longer true, which is updated in our model to reflect the hero’s new position.

This planning helps organize our thoughts and actions logically, ensuring every step is clear and all necessary precautions are taken. Think of it like giving someone directions with a checklist: ""Before you go there, make sure this, this, and this are true, and once you do, this and this will happen."" This ensures everyone knows what to expect and how to prepare! ","Parameters:
1. ?x - book
2. ?y - book
3. ?cat - category

Preconditions:
```
(and
    (holding ?x)
    (accessible ?y)
    (belongs-to-category ?x ?cat)
    (not (shelf-overflow ?cat))
)
```

Effects:
```
(and
    (not (holding ?x))
    (not (accessible ?y))
    (accessible ?x)
    (hands-free)
    (on-shelf ?x ?y)
    (shelf-empty ?cat)
)
```
","(:action move-to-monster
    :parameters (?from - cells ?to - cells ?s - swords)
    :precondition (and (connected ?from ?to) (at-hero ?from) (has-monster ?to) (not (is-destroyed ?to)) (not (has-trap ?from)) (holding ?s))
    :effect (and (at-hero ?to) (is-destroyed ?from) (not (at-hero ?from)))
)",
rpggame,move-to-monster,0.11406250298023224,Easy Negative (Inter-Domain Mismatch),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: The hero can **move** to an adjacent room (connected by a corridor) that has not been destroyed (i.e., the hero has not already visited the room). When this action is executed, the hero gets into a location with a monster

Action name: move-to-monster


Your answer:
","**Explanation:** 

Imagine you are a librarian in a library, and you need to take a book off the shelf. This book is placed on top of another book. The action ""remove-from-shelf"" lets you take the top book off the shelf. To do this, certain conditions, called ""preconditions,"" must be met to make sure you can successfully take the book.

For the action ""remove-from-shelf,"" let's break down what needs to be true before you can take the book off the shelf:

1. **The book must be on the shelf:** This means the book you want to take is on top of another book on the shelf.
2. **The book must be accessible:** This means the book isn't covered by other books or objects, so you can easily reach it.
3. **Your hands must be free:** You need to have empty hands to pick up the book, meaning you aren't already holding something else.
4. **The book must belong to a certain category:** This helps you know which book you are taking and ensures you are organizing the books properly.

Once these preconditions are met, you can proceed with the ""remove-from-shelf"" action. This action results in several changes, called ""effects,"" that update the status of the books and your hands:

1. **You are now holding the book:** This indicates you have picked up the book from the shelf.
2. **The book underneath becomes accessible:** Since you have removed the top book, the book underneath is now easy to reach.
3. **The book you removed is no longer accessible:** Because you are holding the book, it's not available on the shelf anymore.
4. **Your hands are no longer free:** Since you are now holding the book, your hands are occupied.
5. **The book is no longer on the shelf:** This shows that the book has been taken off the shelf.
6. **The shelf is now empty for that category:** This helps keep track of the shelf space and organization.

To summarize, the preconditions ensure the book is on the shelf, accessible, your hands are free, and you know which category the book belongs to. The effects update the situation to show you are holding the book, the book underneath is now accessible, and the shelf is empty for that category.
Parameters:
1. ?x - book
2. ?y - book
3. ?cat - category

Preconditions:
```
(and
    (on-shelf ?x ?y)
    (accessible ?x)
    (hands-free)
    (belongs-to-category ?x ?cat)
)
```

Effects:
```
(and
    (holding ?x)
    (accessible ?y)
    (not (accessible ?x))
    (not (hands-free))
    (not (on-shelf ?x ?y))
    (shelf-empty ?cat)
)
```
","(:action move-to-monster
    :parameters (?from - cells ?to - cells ?s - swords)
    :precondition (and (connected ?from ?to) (at-hero ?from) (has-monster ?to) (not (is-destroyed ?to)) (not (has-trap ?from)) (holding ?s))
    :effect (and (at-hero ?to) (is-destroyed ?from) (not (at-hero ?from)))
)",
rpggame,move-to-monster,0.10156753659248352,Easy Negative (Inter-Domain Mismatch),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: The hero can **move** to an adjacent room (connected by a corridor) that has not been destroyed (i.e., the hero has not already visited the room). When this action is executed, the hero gets into a location with a monster

Action name: move-to-monster


Your answer:
","**Explanation:** 

Imagine you are a librarian holding a book in your hands, and you want to place it on a nearby table. The action ""place-on-table"" lets you do this. To make sure everything goes smoothly, there is a condition, called a ""precondition,"" that must be met before you can place the book on the table.

For the action ""place-on-table,"" let's break down what needs to be true before you can place the book on the table:

1. **You must be holding the book:** This means you have the book in your hands, ready to place it on the table.

Once this precondition is met, you can proceed with the ""place-on-table"" action. This action results in several changes, called ""effects,"" that update the status of the book and your hands:

1. **You are no longer holding the book:** This shows that you have placed the book on the table.
2. **The book becomes accessible:** Now that the book is on the table, it is easy to reach and pick up again if needed.
3. **Your hands are now free:** Since you have placed the book on the table, your hands are empty again.
4. **The book is on the table:** This indicates the new location of the book.

To summarize, the precondition ensures you are holding the book, making sure you are ready to place it on the table. The effects update the situation to show that you have placed the book on the table, it is now accessible, and your hands are free again.
Parameters:
1. ?x - book

Preconditions:
```
(holding ?x)
```

Effects:
```
(and
    (not (holding ?x))
    (accessible ?x)
    (hands-free)
    (on-table ?x)
)
```
","(:action move-to-monster
    :parameters (?from - cells ?to - cells ?s - swords)
    :precondition (and (connected ?from ?to) (at-hero ?from) (has-monster ?to) (not (is-destroyed ?to)) (not (has-trap ?from)) (holding ?s))
    :effect (and (at-hero ?to) (is-destroyed ?from) (not (at-hero ?from)))
)",
rpggame,move-to-monster,0.19100171327590942,Easy Negative (Inter-Domain Mismatch),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: The hero can **move** to an adjacent room (connected by a corridor) that has not been destroyed (i.e., the hero has not already visited the room). When this action is executed, the hero gets into a location with a monster

Action name: move-to-monster


Your answer:
","**Explanation:** 

Imagine a librarian in a library who helps patrons borrow books. When a patron wants to borrow a book, the librarian needs to make sure certain conditions are met before they can check the book out. These conditions are called ""preconditions.""

For the action ""check-out,"" let's think about what needs to be true before the librarian can let the patron borrow the book:

1. **The book must be accessible:** This means the book is not covered by other books or objects, making it easy for the librarian to pick up. If the book isn't accessible, the librarian can't reach it to check it out.
2. **The book must not be already checked out:** If the book is already checked out to someone else, it can't be borrowed by another patron until it's returned.

Once these preconditions are met, the librarian can proceed with the check-out action. The action results in several changes, called ""effects,"" that update the status of the book:

1. **The book is marked as checked out:** This indicates that the book is now borrowed and can't be checked out by another patron until it's returned.
2. **The book is no longer accessible:** Since the book is borrowed, it's no longer available on the shelf for others to take.
3. **There is a request for the book:** This keeps track of the borrowing transaction.
4. **A return due date is set:** This helps the library know when to expect the book back.

To summarize, the preconditions ensure the librarian can access the book and that it isn't already borrowed. The effects update the system to show the book is now checked out, not accessible, and has a return due date.
Parameters:
1. ?x - book

Preconditions:
```
(and
    (accessible ?x)
    (not (checked-out ?x))
)
```

Effects:
```
(and
    (checked-out ?x)
    (not (accessible ?x))
    (book-request ?x)
    (return-due ?x)
)
```
","(:action move-to-monster
    :parameters (?from - cells ?to - cells ?s - swords)
    :precondition (and (connected ?from ?to) (at-hero ?from) (has-monster ?to) (not (is-destroyed ?to)) (not (has-trap ?from)) (holding ?s))
    :effect (and (at-hero ?to) (is-destroyed ?from) (not (at-hero ?from)))
)",
rpggame,move-to-monster,0.1797766089439392,Easy Negative (Inter-Domain Mismatch),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: The hero can **move** to an adjacent room (connected by a corridor) that has not been destroyed (i.e., the hero has not already visited the room). When this action is executed, the hero gets into a location with a monster

Action name: move-to-monster


Your answer:
","**Explanation:** 

Imagine a patron is returning a borrowed book to the library. The librarian needs to process this return to update the book's status and remove any return due date. The action ""return-book"" describes how the librarian can do this. There are specific conditions, called ""preconditions,"" that must be met to ensure the return can be processed correctly.

For the action ""return-book,"" let's break down what needs to be true before the librarian can return the book:

1. **The book must be checked out:** This means the book is currently borrowed by someone and needs to be returned.
2. **The librarian must be holding the book:** This indicates the librarian has the book in their hands, ready to process the return.

Once these preconditions are met, the librarian can proceed with the ""return-book"" action. This action results in several changes, called ""effects,"" that update the status of the book and the librarian's hands:

1. **The book is no longer checked out:** This shows that the book has been returned and is available for borrowing again.
2. **The librarian is no longer holding the book:** This indicates the librarian has processed the return and placed the book back in its proper place.
3. **Any request for the book is removed:** If there was a request for this book, it is no longer needed since the book is now available.
4. **The return due date is removed:** This updates the system to show that the book is no longer due for return.
5. **The book becomes accessible:** Now that the book is back in the library, it is easy to find and borrow again.
6. **The librarian's hands are now free:** Since the librarian has finished processing the return, their hands are empty and ready for the next task.

To summarize, the preconditions ensure the book is currently borrowed and the librarian has it in their hands, ready to return. The effects update the situation to show that the book is no longer checked out, any requests and due dates are removed, the book is accessible again, and the librarian's hands are free.
Parameters:
1. ?x - book

Preconditions:
```
(and
    (checked-out ?x)
    (holding ?x)
)
```

Effects:
```
(and
    (not (checked-out ?x))
    (not (holding ?x))
    (not (book-request ?x))
    (not (return-due ?x))
    (accessible ?x)
    (hands-free)
)
```
","(:action move-to-monster
    :parameters (?from - cells ?to - cells ?s - swords)
    :precondition (and (connected ?from ?to) (at-hero ?from) (has-monster ?to) (not (is-destroyed ?to)) (not (has-trap ?from)) (holding ?s))
    :effect (and (at-hero ?to) (is-destroyed ?from) (not (at-hero ?from)))
)",
rpggame,move-to-monster,0.07760506123304367,Easy Negative (Inter-Domain Mismatch),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: The hero can **move** to an adjacent room (connected by a corridor) that has not been destroyed (i.e., the hero has not already visited the room). When this action is executed, the hero gets into a location with a monster

Action name: move-to-monster


Your answer:
","**Explanation:** 

Imagine you're a librarian in a library, and there's a table full of books that need to be sorted. You want to pick up one of these books. To do this, certain conditions, called ""preconditions,"" must be met to ensure you can successfully pick up the book.

For the action ""take-from-table,"" let's break down what needs to be true before you can pick up a book:

1. **The book must be accessible:** This means the book isn't covered by other books or objects, so you can easily reach it.
2. **The book must be on the table:** This indicates the book is physically located on the table, not somewhere else like a shelf.
3. **Your hands must be free:** You need to have empty hands to pick up the book, meaning you aren't already holding something else.

Once these preconditions are met, you can proceed with the ""take-from-table"" action. This action results in several changes, called ""effects,"" that update the status of the book and your hands:

1. **The book is no longer on the table:** This indicates you've picked up the book from the table.
2. **The book is no longer accessible:** Since you're holding the book, it's not available for someone else to pick up from the table.
3. **Your hands are no longer free:** Because you're now holding the book, your hands are occupied.
4. **You are holding the book:** This shows that the book is now in your hands.

To summarize, the preconditions ensure you can reach the book, it's on the table, and your hands are free to pick it up. The effects update the situation to reflect that the book is now in your hands and no longer on the table or accessible to others.
Parameters:
1. ?x - book

Preconditions:
```
(and
    (accessible ?x)
    (on-table ?x)
    (hands-free)
)
```

Effects:
```
(and
    (not (on-table ?x))
    (not (accessible ?x))
    (not (hands-free))
    (holding ?x)
)
```
","(:action move-to-monster
    :parameters (?from - cells ?to - cells ?s - swords)
    :precondition (and (connected ?from ?to) (at-hero ?from) (has-monster ?to) (not (is-destroyed ?to)) (not (has-trap ?from)) (holding ?s))
    :effect (and (at-hero ?to) (is-destroyed ?from) (not (at-hero ?from)))
)",
rpggame,move-to-monster,0.07736551761627197,Easy Negative (Inter-Domain Mismatch),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: The hero can **move** to an adjacent room (connected by a corridor) that has not been destroyed (i.e., the hero has not already visited the room). When this action is executed, the hero gets into a location with a monster

Action name: move-to-monster


Your answer:
","**Explanation:** 

Imagine you are a librarian standing near a shelf, holding a book in your hands. You want to place this book on top of another book that is already on the shelf. This action, called ""place-on-shelf,"" needs to follow certain rules, called ""preconditions,"" to make sure everything goes smoothly.

For the action ""place-on-shelf,"" let's break down what needs to be true before you can place the book on the shelf:

1. **You must be holding the book:** This means you have the book in your hands, ready to place it on the shelf.
2. **The book on the shelf must be accessible:** The book already on the shelf should not be covered by other books or objects, so you can easily place your book on top of it.
3. **The book you are holding must belong to a certain category:** This helps in organizing the books properly according to their categories.
4. **The shelf should not be overflowing:** There should be enough space on the shelf to place another book.

Once these preconditions are met, you can proceed with the ""place-on-shelf"" action. This action results in several changes, called ""effects,"" that update the status of the books and your hands:

1. **You are no longer holding the book:** This shows that you have placed the book on the shelf.
2. **The book on the shelf is no longer accessible:** Because the new book is now on top of it, making it covered.
3. **The book you placed is now accessible:** This indicates the book you just placed is easy to reach.
4. **Your hands are now free:** Since you have placed the book on the shelf, your hands are empty again.
5. **The new book is on the shelf on top of the other book:** This shows the new book's position.
6. **The shelf is now considered empty for that category:** This helps in tracking the organization and availability of shelf space for that category.

To summarize, the preconditions ensure you are holding the book, the shelf has space, and the book on the shelf is accessible. The effects update the situation to show that you have placed the book on the shelf, the new book is accessible, and your hands are free again.
Parameters:
1. ?x - book
2. ?y - book
3. ?cat - category

Preconditions:
```
(and
    (holding ?x)
    (accessible ?y)
    (belongs-to-category ?x ?cat)
    (not (shelf-overflow ?cat))
)
```

Effects:
```
(and
    (not (holding ?x))
    (not (accessible ?y))
    (accessible ?x)
    (hands-free)
    (on-shelf ?x ?y)
    (shelf-empty ?cat)
)
```
","(:action move-to-monster
    :parameters (?from - cells ?to - cells ?s - swords)
    :precondition (and (connected ?from ?to) (at-hero ?from) (has-monster ?to) (not (is-destroyed ?to)) (not (has-trap ?from)) (holding ?s))
    :effect (and (at-hero ?to) (is-destroyed ?from) (not (at-hero ?from)))
)",
rpggame,move-to-monster,0.5180956125259399,Semi-Hard Negative (Intra-Domain Mismatch),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: The hero can **move** to an adjacent room (connected by a corridor) that has not been destroyed (i.e., the hero has not already visited the room). When this action is executed, the hero gets into a location with a monster

Action name: move-to-monster


Your answer:
","Parameters:
1. ?from - cells
2. ?to - cells

Preconditions:
```
(and
    (connected ?from ?to)
    (at-hero ?from)
    (not (is-destroyed ?to))
    (not (has-trap ?from))
    (has-trap ?to)
    (arm-free)
)
```

Effects:
```
(and
    (at-hero ?to)
    (is-destroyed ?from)
    (not (at-hero ?from))
)
```
","(:action move-to-monster
    :parameters (?from - cells ?to - cells ?s - swords)
    :precondition (and (connected ?from ?to) (at-hero ?from) (has-monster ?to) (not (is-destroyed ?to)) (not (has-trap ?from)) (holding ?s))
    :effect (and (at-hero ?to) (is-destroyed ?from) (not (at-hero ?from)))
)",
rpggame,move-to-monster,0.6636556386947632,Semi-Hard Negative (Intra-Domain Mismatch),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: The hero can **move** to an adjacent room (connected by a corridor) that has not been destroyed (i.e., the hero has not already visited the room). When this action is executed, the hero gets into a location with a monster

Action name: move-to-monster


Your answer:
","Parameters:
1. ?from - cells
2. ?to - cells

Preconditions:
```
(and
    (connected ?from ?to)
    (at-hero ?from)
    (not (has-trap ?from))
    (not (is-destroyed ?to))
    (not (has-trap ?to))
    (not (has-monster ?to))
)
```

Effects:
```
(and
    (at-hero ?to)
    (is-destroyed ?from)
    (not (at-hero ?from))
)
```
","(:action move-to-monster
    :parameters (?from - cells ?to - cells ?s - swords)
    :precondition (and (connected ?from ?to) (at-hero ?from) (has-monster ?to) (not (is-destroyed ?to)) (not (has-trap ?from)) (holding ?s))
    :effect (and (at-hero ?to) (is-destroyed ?from) (not (at-hero ?from)))
)",
rpggame,move-to-monster,0.3123786151409149,Semi-Hard Negative (Intra-Domain Mismatch),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: The hero can **move** to an adjacent room (connected by a corridor) that has not been destroyed (i.e., the hero has not already visited the room). When this action is executed, the hero gets into a location with a monster

Action name: move-to-monster


Your answer:
","Parameters:
1. ?loc - cells
2. ?s - swords

Preconditions:
```
(and
    (at-hero ?loc)
    (at-sword ?s ?loc)
    (arm-free)
)
```

Effects:
```
(and
    (holding ?s)
    (not (at-sword ?s ?loc))
    (not (arm-free))
)
```
","(:action move-to-monster
    :parameters (?from - cells ?to - cells ?s - swords)
    :precondition (and (connected ?from ?to) (at-hero ?from) (has-monster ?to) (not (is-destroyed ?to)) (not (has-trap ?from)) (holding ?s))
    :effect (and (at-hero ?to) (is-destroyed ?from) (not (at-hero ?from)))
)",
rpggame,move-to-monster,0.7996939420700073,Semi-Hard Negative (Intra-Domain Mismatch),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: The hero can **move** to an adjacent room (connected by a corridor) that has not been destroyed (i.e., the hero has not already visited the room). When this action is executed, the hero gets into a location with a monster

Action name: move-to-monster


Your answer:
","Parameters:
1. ?loc - cells

Preconditions:
```
(and
    (at-hero ?loc)
    (arm-free)
    (has-trap ?loc)
)
```

Effects:
```
(and
    (trap-disarmed ?loc)
    (not (has-trap ?loc))
)
```
","(:action move-to-monster
    :parameters (?from - cells ?to - cells ?s - swords)
    :precondition (and (connected ?from ?to) (at-hero ?from) (has-monster ?to) (not (is-destroyed ?to)) (not (has-trap ?from)) (holding ?s))
    :effect (and (at-hero ?to) (is-destroyed ?from) (not (at-hero ?from)))
)",
rpggame,move-to-monster,0.6134718060493469,Semi-Hard Negative (Intra-Domain Mismatch),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: The hero can **move** to an adjacent room (connected by a corridor) that has not been destroyed (i.e., the hero has not already visited the room). When this action is executed, the hero gets into a location with a monster

Action name: move-to-monster


Your answer:
","Parameters:
1. ?loc - cells
2. ?s - swords

Preconditions:
```
(and
    (at-hero ?loc)
    (holding ?s)
    (not (has-trap ?loc))
    (not (has-monster ?loc))
)
```

Effects:
```
(and
    (arm-free)
    (is-destroyed ?s)
    (not (holding ?s))
)
```
","(:action move-to-monster
    :parameters (?from - cells ?to - cells ?s - swords)
    :precondition (and (connected ?from ?to) (at-hero ?from) (has-monster ?to) (not (is-destroyed ?to)) (not (has-trap ?from)) (holding ?s))
    :effect (and (at-hero ?to) (is-destroyed ?from) (not (at-hero ?from)))
)",
rpggame,move-to-monster,0.5180956125259399,Semi-Hard Negative (Intra-Domain Mismatch),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: The hero can **move** to an adjacent room (connected by a corridor) that has not been destroyed (i.e., the hero has not already visited the room). When this action is executed, the hero gets into a location with a monster

Action name: move-to-monster


Your answer:

**Explanation:**

Let's imagine our hero in the dungeon scenario. The hero wakes up and finds themselves in a room, wanting to move to an adjacent room where, unfortunately, there's a monster. Here's how we translate this scenario into a set of instructions, or a 'domain model,' in planning language.

The action we're talking about is called ""move-to-monster."" This means our hero is trying to move from one room (let’s call it Room A) to another room (Room B) where there is a monster. To ensure this action can happen, there are certain conditions that need to be met (these are called 'preconditions') and certain outcomes that will happen as a result of the action (these are called 'effects').

1. **Preconditions**:
   - **Connected Rooms**: Room A and Room B must be connected by a corridor. This makes sense because our hero can't magically jump from one room to another; there must be a path.
   - **Hero's Current Location**: The hero must currently be in Room A. If the hero isn't there, they can't start moving from it!
   - **Monster Presence**: Room B must have a monster. After all, the action is specifically about moving to a room with a monster.
   - **Room Integrity**: Room B should not be destroyed. A destroyed room might mean it’s collapsed or inaccessible, so it's logical our hero can’t move into it.
   - **Safety in Room A**: Room A should not have a trap. This makes sure our hero is safe and able to move without getting caught in a trap.
   - **Armed Hero**: The hero must be holding a sword. It’s a dangerous task to move into a room with a monster, so having a sword means the hero is prepared for a fight.

2. **Effects**:
   - **Hero's New Location**: After the action, the hero will be in Room B. They've successfully moved.
   - **Change in Room A's Status**: Room A becomes 'destroyed.' This might represent that the room is no longer safe or viable after the hero leaves, maybe because of the haste in escaping or some mechanism triggered by the departure.
   - **Update Hero's Old Location**: The fact that the hero was in Room A is no longer true, which is updated in our model to reflect the hero’s new position.

This planning helps organize our thoughts and actions logically, ensuring every step is clear and all necessary precautions are taken. Think of it like giving someone directions with a checklist: ""Before you go there, make sure this, this, and this are true, and once you do, this and this will happen."" This ensures everyone knows what to expect and how to prepare! ","Parameters:
1. ?from - cells
2. ?to - cells

Preconditions:
```
(and
    (connected ?from ?to)
    (at-hero ?from)
    (not (is-destroyed ?to))
    (not (has-trap ?from))
    (has-trap ?to)
    (arm-free)
)
```

Effects:
```
(and
    (at-hero ?to)
    (is-destroyed ?from)
    (not (at-hero ?from))
)
```
","(:action move-to-monster
    :parameters (?from - cells ?to - cells ?s - swords)
    :precondition (and (connected ?from ?to) (at-hero ?from) (has-monster ?to) (not (is-destroyed ?to)) (not (has-trap ?from)) (holding ?s))
    :effect (and (at-hero ?to) (is-destroyed ?from) (not (at-hero ?from)))
)",
rpggame,move-to-monster,0.6636556386947632,Semi-Hard Negative (Intra-Domain Mismatch),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: The hero can **move** to an adjacent room (connected by a corridor) that has not been destroyed (i.e., the hero has not already visited the room). When this action is executed, the hero gets into a location with a monster

Action name: move-to-monster


Your answer:

**Explanation:**

Let's imagine our hero in the dungeon scenario. The hero wakes up and finds themselves in a room, wanting to move to an adjacent room where, unfortunately, there's a monster. Here's how we translate this scenario into a set of instructions, or a 'domain model,' in planning language.

The action we're talking about is called ""move-to-monster."" This means our hero is trying to move from one room (let’s call it Room A) to another room (Room B) where there is a monster. To ensure this action can happen, there are certain conditions that need to be met (these are called 'preconditions') and certain outcomes that will happen as a result of the action (these are called 'effects').

1. **Preconditions**:
   - **Connected Rooms**: Room A and Room B must be connected by a corridor. This makes sense because our hero can't magically jump from one room to another; there must be a path.
   - **Hero's Current Location**: The hero must currently be in Room A. If the hero isn't there, they can't start moving from it!
   - **Monster Presence**: Room B must have a monster. After all, the action is specifically about moving to a room with a monster.
   - **Room Integrity**: Room B should not be destroyed. A destroyed room might mean it’s collapsed or inaccessible, so it's logical our hero can’t move into it.
   - **Safety in Room A**: Room A should not have a trap. This makes sure our hero is safe and able to move without getting caught in a trap.
   - **Armed Hero**: The hero must be holding a sword. It’s a dangerous task to move into a room with a monster, so having a sword means the hero is prepared for a fight.

2. **Effects**:
   - **Hero's New Location**: After the action, the hero will be in Room B. They've successfully moved.
   - **Change in Room A's Status**: Room A becomes 'destroyed.' This might represent that the room is no longer safe or viable after the hero leaves, maybe because of the haste in escaping or some mechanism triggered by the departure.
   - **Update Hero's Old Location**: The fact that the hero was in Room A is no longer true, which is updated in our model to reflect the hero’s new position.

This planning helps organize our thoughts and actions logically, ensuring every step is clear and all necessary precautions are taken. Think of it like giving someone directions with a checklist: ""Before you go there, make sure this, this, and this are true, and once you do, this and this will happen."" This ensures everyone knows what to expect and how to prepare! ","Parameters:
1. ?from - cells
2. ?to - cells

Preconditions:
```
(and
    (connected ?from ?to)
    (at-hero ?from)
    (not (has-trap ?from))
    (not (is-destroyed ?to))
    (not (has-trap ?to))
    (not (has-monster ?to))
)
```

Effects:
```
(and
    (at-hero ?to)
    (is-destroyed ?from)
    (not (at-hero ?from))
)
```
","(:action move-to-monster
    :parameters (?from - cells ?to - cells ?s - swords)
    :precondition (and (connected ?from ?to) (at-hero ?from) (has-monster ?to) (not (is-destroyed ?to)) (not (has-trap ?from)) (holding ?s))
    :effect (and (at-hero ?to) (is-destroyed ?from) (not (at-hero ?from)))
)",
rpggame,move-to-monster,0.3123786151409149,Semi-Hard Negative (Intra-Domain Mismatch),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: The hero can **move** to an adjacent room (connected by a corridor) that has not been destroyed (i.e., the hero has not already visited the room). When this action is executed, the hero gets into a location with a monster

Action name: move-to-monster


Your answer:

**Explanation:**

Let's imagine our hero in the dungeon scenario. The hero wakes up and finds themselves in a room, wanting to move to an adjacent room where, unfortunately, there's a monster. Here's how we translate this scenario into a set of instructions, or a 'domain model,' in planning language.

The action we're talking about is called ""move-to-monster."" This means our hero is trying to move from one room (let’s call it Room A) to another room (Room B) where there is a monster. To ensure this action can happen, there are certain conditions that need to be met (these are called 'preconditions') and certain outcomes that will happen as a result of the action (these are called 'effects').

1. **Preconditions**:
   - **Connected Rooms**: Room A and Room B must be connected by a corridor. This makes sense because our hero can't magically jump from one room to another; there must be a path.
   - **Hero's Current Location**: The hero must currently be in Room A. If the hero isn't there, they can't start moving from it!
   - **Monster Presence**: Room B must have a monster. After all, the action is specifically about moving to a room with a monster.
   - **Room Integrity**: Room B should not be destroyed. A destroyed room might mean it’s collapsed or inaccessible, so it's logical our hero can’t move into it.
   - **Safety in Room A**: Room A should not have a trap. This makes sure our hero is safe and able to move without getting caught in a trap.
   - **Armed Hero**: The hero must be holding a sword. It’s a dangerous task to move into a room with a monster, so having a sword means the hero is prepared for a fight.

2. **Effects**:
   - **Hero's New Location**: After the action, the hero will be in Room B. They've successfully moved.
   - **Change in Room A's Status**: Room A becomes 'destroyed.' This might represent that the room is no longer safe or viable after the hero leaves, maybe because of the haste in escaping or some mechanism triggered by the departure.
   - **Update Hero's Old Location**: The fact that the hero was in Room A is no longer true, which is updated in our model to reflect the hero’s new position.

This planning helps organize our thoughts and actions logically, ensuring every step is clear and all necessary precautions are taken. Think of it like giving someone directions with a checklist: ""Before you go there, make sure this, this, and this are true, and once you do, this and this will happen."" This ensures everyone knows what to expect and how to prepare! ","Parameters:
1. ?loc - cells
2. ?s - swords

Preconditions:
```
(and
    (at-hero ?loc)
    (at-sword ?s ?loc)
    (arm-free)
)
```

Effects:
```
(and
    (holding ?s)
    (not (at-sword ?s ?loc))
    (not (arm-free))
)
```
","(:action move-to-monster
    :parameters (?from - cells ?to - cells ?s - swords)
    :precondition (and (connected ?from ?to) (at-hero ?from) (has-monster ?to) (not (is-destroyed ?to)) (not (has-trap ?from)) (holding ?s))
    :effect (and (at-hero ?to) (is-destroyed ?from) (not (at-hero ?from)))
)",
rpggame,move-to-monster,0.7996939420700073,Semi-Hard Negative (Intra-Domain Mismatch),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: The hero can **move** to an adjacent room (connected by a corridor) that has not been destroyed (i.e., the hero has not already visited the room). When this action is executed, the hero gets into a location with a monster

Action name: move-to-monster


Your answer:

**Explanation:**

Let's imagine our hero in the dungeon scenario. The hero wakes up and finds themselves in a room, wanting to move to an adjacent room where, unfortunately, there's a monster. Here's how we translate this scenario into a set of instructions, or a 'domain model,' in planning language.

The action we're talking about is called ""move-to-monster."" This means our hero is trying to move from one room (let’s call it Room A) to another room (Room B) where there is a monster. To ensure this action can happen, there are certain conditions that need to be met (these are called 'preconditions') and certain outcomes that will happen as a result of the action (these are called 'effects').

1. **Preconditions**:
   - **Connected Rooms**: Room A and Room B must be connected by a corridor. This makes sense because our hero can't magically jump from one room to another; there must be a path.
   - **Hero's Current Location**: The hero must currently be in Room A. If the hero isn't there, they can't start moving from it!
   - **Monster Presence**: Room B must have a monster. After all, the action is specifically about moving to a room with a monster.
   - **Room Integrity**: Room B should not be destroyed. A destroyed room might mean it’s collapsed or inaccessible, so it's logical our hero can’t move into it.
   - **Safety in Room A**: Room A should not have a trap. This makes sure our hero is safe and able to move without getting caught in a trap.
   - **Armed Hero**: The hero must be holding a sword. It’s a dangerous task to move into a room with a monster, so having a sword means the hero is prepared for a fight.

2. **Effects**:
   - **Hero's New Location**: After the action, the hero will be in Room B. They've successfully moved.
   - **Change in Room A's Status**: Room A becomes 'destroyed.' This might represent that the room is no longer safe or viable after the hero leaves, maybe because of the haste in escaping or some mechanism triggered by the departure.
   - **Update Hero's Old Location**: The fact that the hero was in Room A is no longer true, which is updated in our model to reflect the hero’s new position.

This planning helps organize our thoughts and actions logically, ensuring every step is clear and all necessary precautions are taken. Think of it like giving someone directions with a checklist: ""Before you go there, make sure this, this, and this are true, and once you do, this and this will happen."" This ensures everyone knows what to expect and how to prepare! ","Parameters:
1. ?loc - cells

Preconditions:
```
(and
    (at-hero ?loc)
    (arm-free)
    (has-trap ?loc)
)
```

Effects:
```
(and
    (trap-disarmed ?loc)
    (not (has-trap ?loc))
)
```
","(:action move-to-monster
    :parameters (?from - cells ?to - cells ?s - swords)
    :precondition (and (connected ?from ?to) (at-hero ?from) (has-monster ?to) (not (is-destroyed ?to)) (not (has-trap ?from)) (holding ?s))
    :effect (and (at-hero ?to) (is-destroyed ?from) (not (at-hero ?from)))
)",
rpggame,move-to-monster,0.6134718060493469,Semi-Hard Negative (Intra-Domain Mismatch),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: The hero can **move** to an adjacent room (connected by a corridor) that has not been destroyed (i.e., the hero has not already visited the room). When this action is executed, the hero gets into a location with a monster

Action name: move-to-monster


Your answer:

**Explanation:**

Let's imagine our hero in the dungeon scenario. The hero wakes up and finds themselves in a room, wanting to move to an adjacent room where, unfortunately, there's a monster. Here's how we translate this scenario into a set of instructions, or a 'domain model,' in planning language.

The action we're talking about is called ""move-to-monster."" This means our hero is trying to move from one room (let’s call it Room A) to another room (Room B) where there is a monster. To ensure this action can happen, there are certain conditions that need to be met (these are called 'preconditions') and certain outcomes that will happen as a result of the action (these are called 'effects').

1. **Preconditions**:
   - **Connected Rooms**: Room A and Room B must be connected by a corridor. This makes sense because our hero can't magically jump from one room to another; there must be a path.
   - **Hero's Current Location**: The hero must currently be in Room A. If the hero isn't there, they can't start moving from it!
   - **Monster Presence**: Room B must have a monster. After all, the action is specifically about moving to a room with a monster.
   - **Room Integrity**: Room B should not be destroyed. A destroyed room might mean it’s collapsed or inaccessible, so it's logical our hero can’t move into it.
   - **Safety in Room A**: Room A should not have a trap. This makes sure our hero is safe and able to move without getting caught in a trap.
   - **Armed Hero**: The hero must be holding a sword. It’s a dangerous task to move into a room with a monster, so having a sword means the hero is prepared for a fight.

2. **Effects**:
   - **Hero's New Location**: After the action, the hero will be in Room B. They've successfully moved.
   - **Change in Room A's Status**: Room A becomes 'destroyed.' This might represent that the room is no longer safe or viable after the hero leaves, maybe because of the haste in escaping or some mechanism triggered by the departure.
   - **Update Hero's Old Location**: The fact that the hero was in Room A is no longer true, which is updated in our model to reflect the hero’s new position.

This planning helps organize our thoughts and actions logically, ensuring every step is clear and all necessary precautions are taken. Think of it like giving someone directions with a checklist: ""Before you go there, make sure this, this, and this are true, and once you do, this and this will happen."" This ensures everyone knows what to expect and how to prepare! ","Parameters:
1. ?loc - cells
2. ?s - swords

Preconditions:
```
(and
    (at-hero ?loc)
    (holding ?s)
    (not (has-trap ?loc))
    (not (has-monster ?loc))
)
```

Effects:
```
(and
    (arm-free)
    (is-destroyed ?s)
    (not (holding ?s))
)
```
","(:action move-to-monster
    :parameters (?from - cells ?to - cells ?s - swords)
    :precondition (and (connected ?from ?to) (at-hero ?from) (has-monster ?to) (not (is-destroyed ?to)) (not (has-trap ?from)) (holding ?s))
    :effect (and (at-hero ?to) (is-destroyed ?from) (not (at-hero ?from)))
)",
rpggame,move-to-monster,0.7892916202545166,Semi-Hard Negative (Intra-Domain Mismatch),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: The hero can **move** to an adjacent room (connected by a corridor) that has not been destroyed (i.e., the hero has not already visited the room). When this action is executed, the hero gets into a location with a monster

Action name: move-to-monster


Your answer:
","**Explanation:**

Imagine you're guiding a hero who just woke up in a mysterious dungeon. Each room can have different things: some are empty, others have monsters, some have traps, and a few might have swords. There's also a special room with an exit—our hero's goal.

Now, let's talk about the action called **move-to-trap**. This action involves our hero moving from one room (we'll call it ""Room A"") to another room (""Room B""), where, unfortunately, there's a trap waiting. Here's why each part of the plan (or action schema) makes sense:

1. **Connected Rooms**: Our hero can only move to a room directly connected to the one they're currently in. This is like being in your house and only being able to walk into rooms that have doors leading from where you are now.

2. **Hero's Current Location**: The hero must start in Room A to move to Room B. You can't move from a place if you're not actually there, right?

3. **Room B Not Destroyed**: The room our hero is moving to mustn't be already destroyed (or in ruins). It's like making sure the bridge you want to cross hasn't collapsed.

4. **Room A Doesn't Have a Trap**: It’s safer if the room our hero is leaving doesn't have a trap. Imagine trying to leave a room with a trap; it could activate and cause trouble!

5. **Room B Has a Trap**: Since the action is called **move-to-trap**, it specifically involves moving to a room with a trap, almost like knowing there's a puddle ahead but stepping into it anyway because it's the only path forward.

6. **Hero's Arm is Free**: This indicates that the hero isn’t holding anything like a sword. It’s important because handling traps might require free hands—think about needing your hands free to disarm or avoid a trap carefully.

When our hero completes this action, several things happen:
- **Hero is now in Room B**: Just like when you walk into another room, you’re no longer in the first room.
- **Room A is destroyed**: This could mean the hero leaves it in a way that no one can follow—maybe they close a heavy door that locks automatically.
- **Hero is no longer in Room A**: It confirms that the hero has completely left Room A.

This action is designed for specific situations in the dungeon where the hero might need to move strategically, even into risky areas, to navigate through the dungeon and eventually find the exit.
Parameters:
1. ?from - cells
2. ?to - cells

Preconditions:
```
(and
    (connected ?from ?to)
    (at-hero ?from)
    (not (is-destroyed ?to))
    (not (has-trap ?from))
    (has-trap ?to)
    (arm-free)
)
```

Effects:
```
(and
    (at-hero ?to)
    (is-destroyed ?from)
    (not (at-hero ?from))
)
```
","(:action move-to-monster
    :parameters (?from - cells ?to - cells ?s - swords)
    :precondition (and (connected ?from ?to) (at-hero ?from) (has-monster ?to) (not (is-destroyed ?to)) (not (has-trap ?from)) (holding ?s))
    :effect (and (at-hero ?to) (is-destroyed ?from) (not (at-hero ?from)))
)",
rpggame,move-to-monster,0.7861344814300537,Semi-Hard Negative (Intra-Domain Mismatch),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: The hero can **move** to an adjacent room (connected by a corridor) that has not been destroyed (i.e., the hero has not already visited the room). When this action is executed, the hero gets into a location with a monster

Action name: move-to-monster


Your answer:
","**Explanation:**

Imagine our hero in a big, scary dungeon, just like a character from a fairy tale or a video game. The dungeon has several rooms, and some rooms are safe while others have monsters or traps. The hero's goal is to escape from this dungeon, moving from one room to another until he finds the exit.

Now, let's talk about the action called ""move"" that our hero can take. The action ""move"" lets the hero go from one room (we'll call this the ""current room"") to a connected room (let's call this the ""next room""). Think of the dungeon like a big house with many doors connecting the rooms; the hero can only move through a door if it’s open and the room on the other side is safe.

In the PDDL (a kind of programming language for planning what actions to take), the action ""move"" needs some conditions to be met before the hero can move:
1. **The rooms must be connected:** Just like you can't walk through a wall at home, the hero can only move to a room if there's a direct connection (like a doorway or a corridor).
2. **The hero must be in the current room:** The hero can only leave a room if he's actually in it.
3. **The current room shouldn’t have a trap that could hurt him.**
4. **The next room shouldn’t be destroyed:** The hero can't go into a room if it’s already been collapsed or destroyed (maybe from a previous adventure!).
5. **The next room shouldn’t have a trap or a monster:** This makes sure our hero doesn’t walk into new danger.

When the hero moves:
- **He is now in the next room:** Just like if you walk to another room in your house, you're then in that new room.
- **The room he left gets destroyed:** This might sound strange, but imagine if every time he left a room, the door magically closed and locked forever, so he can’t go back the same way.
- **He is no longer in the current room:** This is just confirming that he has moved on from the previous room.

These rules help our hero make smart moves through the dungeon, avoiding danger and making progress towards escape. This way of setting up the hero's actions makes sure he can navigate through the dungeon safely and eventually find his way out.
Parameters:
1. ?from - cells
2. ?to - cells

Preconditions:
```
(and
    (connected ?from ?to)
    (at-hero ?from)
    (not (has-trap ?from))
    (not (is-destroyed ?to))
    (not (has-trap ?to))
    (not (has-monster ?to))
)
```

Effects:
```
(and
    (at-hero ?to)
    (is-destroyed ?from)
    (not (at-hero ?from))
)
```
","(:action move-to-monster
    :parameters (?from - cells ?to - cells ?s - swords)
    :precondition (and (connected ?from ?to) (at-hero ?from) (has-monster ?to) (not (is-destroyed ?to)) (not (has-trap ?from)) (holding ?s))
    :effect (and (at-hero ?to) (is-destroyed ?from) (not (at-hero ?from)))
)",
rpggame,move-to-monster,0.4962548613548279,Semi-Hard Negative (Intra-Domain Mismatch),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: The hero can **move** to an adjacent room (connected by a corridor) that has not been destroyed (i.e., the hero has not already visited the room). When this action is executed, the hero gets into a location with a monster

Action name: move-to-monster


Your answer:
","**Explanation:**

Imagine you're helping a hero navigate through a tricky dungeon filled with different challenges. The hero's objective is to escape, but along the way, they might find useful items like swords that can help protect against monsters.

In our scenario, the action of picking up a sword is crucial. Let's think of it like this: if you enter a room and see a sword on the floor while your hands are free, you can pick it up. The action schema in PDDL, which is a way to represent planning problems, explains this in a structured format.

The preconditions for our action ""pick-sword"" are:
1. **The hero must be in the same room as the sword** (represented as `(at-hero ?loc)` and `(at-sword ?s ?loc)`). This makes sense because you can't pick up something that's not in the same room as you.
2. **The hero's hand must be free** (`(arm-free)`). Just like you can't hold two grocery bags in one hand easily, our hero needs a free hand to pick up the sword.

The effects after the hero picks up the sword are:
1. **The hero is now holding the sword** (`(holding ?s)`). This indicates that the hero has successfully picked up the sword.
2. **The sword is no longer in its original place** (`(not (at-sword ?s ?loc))`). Just like if you take an apple from a basket, the apple isn't in the basket anymore.
3. **The hero's hand is no longer free** (`(not (arm-free))`). Holding the sword means the hand that was free is now occupied.

This action schema is a simple way to model the interaction between the hero and the sword in the dungeon. It helps ensure that all necessary conditions are met before the action takes place, making the hero's journey through the dungeon logical and structured. This way, the hero doesn't magically have a sword without picking it up or has two items in one hand, which keeps our dungeon adventure realistic and understandable.
Parameters:
1. ?loc - cells
2. ?s - swords

Preconditions:
```
(and
    (at-hero ?loc)
    (at-sword ?s ?loc)
    (arm-free)
)
```

Effects:
```
(and
    (holding ?s)
    (not (at-sword ?s ?loc))
    (not (arm-free))
)
```
","(:action move-to-monster
    :parameters (?from - cells ?to - cells ?s - swords)
    :precondition (and (connected ?from ?to) (at-hero ?from) (has-monster ?to) (not (is-destroyed ?to)) (not (has-trap ?from)) (holding ?s))
    :effect (and (at-hero ?to) (is-destroyed ?from) (not (at-hero ?from)))
)",
rpggame,move-to-monster,0.6990560293197632,Semi-Hard Negative (Intra-Domain Mismatch),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: The hero can **move** to an adjacent room (connected by a corridor) that has not been destroyed (i.e., the hero has not already visited the room). When this action is executed, the hero gets into a location with a monster

Action name: move-to-monster


Your answer:
","**Explanation:**

Imagine our hero in a dungeon, a place with rooms connected like a spider web. Each room can be just an empty space, or it might have something like a monster, a trap, or even a sword. Somewhere in this maze, there's a special room that has an exit—the ultimate goal for our hero.

Now, let's focus on a specific action our hero might need to take: **disarming a trap**. In our scenario, the hero finds themselves in a room with a trap. The action to disarm this trap is what we need to understand.

The action is named `disarm-trap`. This action, like any other, has specific requirements (preconditions) that must be met before the hero can perform it. These preconditions are:
1. **The hero must be in the same room as the trap.** This makes sense because you can't disarm a trap from another room. It's like needing to be in the kitchen to turn off a stove.
2. **The hero's hand must be free.** This means the hero can’t be holding anything, like a sword. It's a bit like needing both hands free to tie your shoes properly.
3. **There must actually be a trap in the room.** Obviously, the hero can't disarm a trap if there isn't one there!

If all these conditions are met, then the hero can go ahead and disarm the trap. The results (effects) of this action are:
1. **The trap in the room is disarmed.** This means the room is now safe from that trap.
2. **The trap is no longer considered to be in the room.** It's like cleaning up a spill; once it's cleaned, it's not there anymore.

By breaking down the action like this, we see how each condition helps ensure the action can be carried out safely and effectively. It’s just like following a recipe—each ingredient needs to be added at the right time for the dish to come out right!
Parameters:
1. ?loc - cells

Preconditions:
```
(and
    (at-hero ?loc)
    (arm-free)
    (has-trap ?loc)
)
```

Effects:
```
(and
    (trap-disarmed ?loc)
    (not (has-trap ?loc))
)
```
","(:action move-to-monster
    :parameters (?from - cells ?to - cells ?s - swords)
    :precondition (and (connected ?from ?to) (at-hero ?from) (has-monster ?to) (not (is-destroyed ?to)) (not (has-trap ?from)) (holding ?s))
    :effect (and (at-hero ?to) (is-destroyed ?from) (not (at-hero ?from)))
)",
rpggame,move-to-monster,0.6022753715515137,Semi-Hard Negative (Intra-Domain Mismatch),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: The hero can **move** to an adjacent room (connected by a corridor) that has not been destroyed (i.e., the hero has not already visited the room). When this action is executed, the hero gets into a location with a monster

Action name: move-to-monster


Your answer:
","**Explanation:**

Imagine you're helping a hero navigate a dungeon full of monsters and traps, a bit like playing a video game. Now, the hero has a sword, but in this part of the game, the hero decides to destroy the sword. To understand why certain conditions are checked before the hero can destroy the sword safely, let's break it down using the action ""destroy-sword"" from the game's rules (or in technical terms, the PDDL action schema).

Firstly, the hero needs to be in the same location as the sword. This makes sense, right? You can't throw something away or break it if it's not with you. So, the condition `(at-hero ?loc)` ensures that the hero is at the right spot to perform the action.

Secondly, the hero must be holding the sword. It’s similar to needing both hands on a bat to swing it; here, the hero needs to have the sword in hand to destroy it, checked by `(holding ?s)`.

But why check for no traps or monsters in the room? Think of it like trying to do something delicate, like assembling a model airplane, in a room with a loose tiger. Not a great idea, right? If there’s a monster in the room, destroying the sword might make the hero vulnerable to attack. Similarly, a trap could be triggered by the noise or movement, putting the hero in danger. So, `(not (has-trap ?loc))` and `(not (has-monster ?loc))` ensure that the environment is safe for the hero to break the sword without turning the situation worse.

Now, what happens after the sword is destroyed? The effect is that the hero’s hand is now free (`arm-free`), the sword is confirmed as destroyed (`is-destroyed ?s`), and the hero is no longer holding it (`not (holding ?s)`). It’s like cleaning up after finishing a task: put away the tools, clean up the mess, and free up your hands for the next task.

In simple terms, this action schema is like a set of instructions to make sure the hero does something risky (like destroying a sword) safely and responsibly, without making the dangerous dungeon situation even worse.
Parameters:
1. ?loc - cells
2. ?s - swords

Preconditions:
```
(and
    (at-hero ?loc)
    (holding ?s)
    (not (has-trap ?loc))
    (not (has-monster ?loc))
)
```

Effects:
```
(and
    (arm-free)
    (is-destroyed ?s)
    (not (holding ?s))
)
```
","(:action move-to-monster
    :parameters (?from - cells ?to - cells ?s - swords)
    :precondition (and (connected ?from ?to) (at-hero ?from) (has-monster ?to) (not (is-destroyed ?to)) (not (has-trap ?from)) (holding ?s))
    :effect (and (at-hero ?to) (is-destroyed ?from) (not (at-hero ?from)))
)",
rpggame,move-to-monster,0.7691131830215454,Hard Negative (Manipulated Action),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: The hero can **move** to an adjacent room (connected by a corridor) that has not been destroyed (i.e., the hero has not already visited the room). When this action is executed, the hero gets into a location with a monster

Action name: move-to-monster


Your answer:
","Parameters:
1. ?from - cells
2. ?to - cells
3. ?s - swords

Preconditions:
```
(and
    (connected ?from ?to)
    (at-hero ?from)
    (has-monster ?to)
    (not (is-destroyed ?to))
    (not (has-trap ?from))
    (holding ?s)
)
```

Effects:
```
(and
    (at-hero ?to)
    (is-destroyed ?from)
)
```
","(:action move-to-monster
    :parameters (?from - cells ?to - cells ?s - swords)
    :precondition (and (connected ?from ?to) (at-hero ?from) (has-monster ?to) (not (is-destroyed ?to)) (not (has-trap ?from)) (holding ?s))
    :effect (and (at-hero ?to) (is-destroyed ?from) (not (at-hero ?from)))
)","remove (not (at-hero ?from)) from effects
"
rpggame,move-to-monster,0.6089840531349182,Hard Negative (Manipulated Action),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: The hero can **move** to an adjacent room (connected by a corridor) that has not been destroyed (i.e., the hero has not already visited the room). When this action is executed, the hero gets into a location with a monster

Action name: move-to-monster


Your answer:
","Parameters:
1. ?from - cells
2. ?to - cells
3. ?s - swords

Preconditions:
```
(and
    (at-hero ?to)
    (not (at-hero ?from))
    (at-hero ?from)
    (has-monster ?to)
    (not (is-destroyed ?to))
    (not (has-trap ?from))
)
```

Effects:
```
(and
    (connected ?from ?to)
    (holding ?s)
    (is-destroyed ?from)
)
```
","(:action move-to-monster
    :parameters (?from - cells ?to - cells ?s - swords)
    :precondition (and (connected ?from ?to) (at-hero ?from) (has-monster ?to) (not (is-destroyed ?to)) (not (has-trap ?from)) (holding ?s))
    :effect (and (at-hero ?to) (is-destroyed ?from) (not (at-hero ?from)))
)","swap (connected ?from ?to) with (at-hero ?to)
swap (holding ?s) with (not (at-hero ?from))
"
rpggame,move-to-monster,0.771878182888031,Hard Negative (Manipulated Action),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: The hero can **move** to an adjacent room (connected by a corridor) that has not been destroyed (i.e., the hero has not already visited the room). When this action is executed, the hero gets into a location with a monster

Action name: move-to-monster


Your answer:
","Parameters:
1. ?from - cells
2. ?to - cells
3. ?s - swords

Preconditions:
```
(and
    (connected ?from ?to)
    (at-hero ?from)
    (has-monster ?to)
    (not (is-destroyed ?to))
    (not (has-trap ?from))
    (holding ?s)
)
```

Effects:
```
(and
    (at-hero ?to)
    (not (at-hero ?from))
)
```
","(:action move-to-monster
    :parameters (?from - cells ?to - cells ?s - swords)
    :precondition (and (connected ?from ?to) (at-hero ?from) (has-monster ?to) (not (is-destroyed ?to)) (not (has-trap ?from)) (holding ?s))
    :effect (and (at-hero ?to) (is-destroyed ?from) (not (at-hero ?from)))
)","remove (is-destroyed ?from) from effects
"
rpggame,move-to-monster,0.771878182888031,Hard Negative (Manipulated Action),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: The hero can **move** to an adjacent room (connected by a corridor) that has not been destroyed (i.e., the hero has not already visited the room). When this action is executed, the hero gets into a location with a monster

Action name: move-to-monster


Your answer:
","Parameters:
1. ?from - cells
2. ?to - cells
3. ?s - swords

Preconditions:
```
(and
    (connected ?from ?to)
    (at-hero ?from)
    (has-monster ?to)
    (not (is-destroyed ?to))
    (not (has-trap ?from))
    (holding ?s)
)
```

Effects:
```
(and
    (at-hero ?to)
    (not (at-hero ?from))
)
```
","(:action move-to-monster
    :parameters (?from - cells ?to - cells ?s - swords)
    :precondition (and (connected ?from ?to) (at-hero ?from) (has-monster ?to) (not (is-destroyed ?to)) (not (has-trap ?from)) (holding ?s))
    :effect (and (at-hero ?to) (is-destroyed ?from) (not (at-hero ?from)))
)","remove (is-destroyed ?from) from effects
"
rpggame,move-to-monster,0.8225700855255127,Hard Negative (Manipulated Action),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: The hero can **move** to an adjacent room (connected by a corridor) that has not been destroyed (i.e., the hero has not already visited the room). When this action is executed, the hero gets into a location with a monster

Action name: move-to-monster


Your answer:
","Parameters:
1. ?from - cells
2. ?to - cells
3. ?s - swords

Preconditions:
```
(and
    (connected ?from ?to)
    (at-hero ?from)
    (has-monster ?to)
    (not (is-destroyed ?to))
    (not (has-trap ?from))
    (holding ?s)
)
```

Effects:
```
(and
    (not (at-hero ?to))
    (is-destroyed ?from)
    (not (at-hero ?from))
)
```
","(:action move-to-monster
    :parameters (?from - cells ?to - cells ?s - swords)
    :precondition (and (connected ?from ?to) (at-hero ?from) (has-monster ?to) (not (is-destroyed ?to)) (not (has-trap ?from)) (holding ?s))
    :effect (and (at-hero ?to) (is-destroyed ?from) (not (at-hero ?from)))
)","negate (at-hero ?to) in effects
"
rpggame,move-to-monster,0.5873777270317078,Hard Negative (Manipulated Action),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: The hero can **move** to an adjacent room (connected by a corridor) that has not been destroyed (i.e., the hero has not already visited the room). When this action is executed, the hero gets into a location with a monster

Action name: move-to-monster


Your answer:
","Parameters:
1. ?from - cells
2. ?to - cells
3. ?s - swords

Preconditions:
```
(and
    (is-destroyed ?to)
    (connected ?from ?to)
    (at-hero ?from)
    (has-monster ?to)
    (not (has-trap ?from))
    (holding ?s)
)
```

Effects:
```
(and
    (at-hero ?to)
    (is-destroyed ?from)
    (not (at-hero ?from))
)
```
","(:action move-to-monster
    :parameters (?from - cells ?to - cells ?s - swords)
    :precondition (and (connected ?from ?to) (at-hero ?from) (has-monster ?to) (not (is-destroyed ?to)) (not (has-trap ?from)) (holding ?s))
    :effect (and (at-hero ?to) (is-destroyed ?from) (not (at-hero ?from)))
)","negate (not (is-destroyed ?to)) in preconditions
"
rpggame,move-to-monster,0.7691131830215454,Hard Negative (Manipulated Action),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: The hero can **move** to an adjacent room (connected by a corridor) that has not been destroyed (i.e., the hero has not already visited the room). When this action is executed, the hero gets into a location with a monster

Action name: move-to-monster


Your answer:
","Parameters:
1. ?from - cells
2. ?to - cells
3. ?s - swords

Preconditions:
```
(and
    (connected ?from ?to)
    (at-hero ?from)
    (has-monster ?to)
    (not (is-destroyed ?to))
    (not (has-trap ?from))
    (holding ?s)
)
```

Effects:
```
(and
    (at-hero ?to)
    (is-destroyed ?from)
)
```
","(:action move-to-monster
    :parameters (?from - cells ?to - cells ?s - swords)
    :precondition (and (connected ?from ?to) (at-hero ?from) (has-monster ?to) (not (is-destroyed ?to)) (not (has-trap ?from)) (holding ?s))
    :effect (and (at-hero ?to) (is-destroyed ?from) (not (at-hero ?from)))
)","remove (not (at-hero ?from)) from effects
"
rpggame,move-to-monster,0.5143387317657471,Hard Negative (Manipulated Action),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: The hero can **move** to an adjacent room (connected by a corridor) that has not been destroyed (i.e., the hero has not already visited the room). When this action is executed, the hero gets into a location with a monster

Action name: move-to-monster


Your answer:
","Parameters:
1. ?from - cells
2. ?to - cells
3. ?s - swords

Preconditions:
```
(and
    (is-destroyed ?from)
    (connected ?from ?to)
    (has-monster ?to)
    (not (is-destroyed ?to))
    (not (has-trap ?from))
)
```

Effects:
```
(and
    (at-hero ?from)
    (at-hero ?to)
    (not (at-hero ?from))
)
```
","(:action move-to-monster
    :parameters (?from - cells ?to - cells ?s - swords)
    :precondition (and (connected ?from ?to) (at-hero ?from) (has-monster ?to) (not (is-destroyed ?to)) (not (has-trap ?from)) (holding ?s))
    :effect (and (at-hero ?to) (is-destroyed ?from) (not (at-hero ?from)))
)","swap (at-hero ?from) with (is-destroyed ?from)
remove (holding ?s) from preconditions
"
rpggame,move-to-monster,0.7447155714035034,Hard Negative (Manipulated Action),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: The hero can **move** to an adjacent room (connected by a corridor) that has not been destroyed (i.e., the hero has not already visited the room). When this action is executed, the hero gets into a location with a monster

Action name: move-to-monster


Your answer:
","Parameters:
1. ?from - cells
2. ?to - cells
3. ?s - swords

Preconditions:
```
(and
    (connected ?from ?to)
    (at-hero ?from)
    (has-monster ?to)
    (not (is-destroyed ?to))
    (not (has-trap ?from))
)
```

Effects:
```
(and
    (at-hero ?to)
    (is-destroyed ?from)
    (not (at-hero ?from))
)
```
","(:action move-to-monster
    :parameters (?from - cells ?to - cells ?s - swords)
    :precondition (and (connected ?from ?to) (at-hero ?from) (has-monster ?to) (not (is-destroyed ?to)) (not (has-trap ?from)) (holding ?s))
    :effect (and (at-hero ?to) (is-destroyed ?from) (not (at-hero ?from)))
)","remove (holding ?s) from preconditions
"
rpggame,move-to-monster,0.8225700855255127,Hard Negative (Manipulated Action),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: The hero can **move** to an adjacent room (connected by a corridor) that has not been destroyed (i.e., the hero has not already visited the room). When this action is executed, the hero gets into a location with a monster

Action name: move-to-monster


Your answer:
","Parameters:
1. ?from - cells
2. ?to - cells
3. ?s - swords

Preconditions:
```
(and
    (connected ?from ?to)
    (at-hero ?from)
    (has-monster ?to)
    (not (is-destroyed ?to))
    (not (has-trap ?from))
    (holding ?s)
)
```

Effects:
```
(and
    (not (at-hero ?to))
    (is-destroyed ?from)
    (not (at-hero ?from))
)
```
","(:action move-to-monster
    :parameters (?from - cells ?to - cells ?s - swords)
    :precondition (and (connected ?from ?to) (at-hero ?from) (has-monster ?to) (not (is-destroyed ?to)) (not (has-trap ?from)) (holding ?s))
    :effect (and (at-hero ?to) (is-destroyed ?from) (not (at-hero ?from)))
)","negate (at-hero ?to) in effects
"
rpggame,move-to-monster,0.7447155714035034,Hard Negative (Manipulated Action),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: The hero can **move** to an adjacent room (connected by a corridor) that has not been destroyed (i.e., the hero has not already visited the room). When this action is executed, the hero gets into a location with a monster

Action name: move-to-monster


Your answer:

**Explanation:**

Let's imagine our hero in the dungeon scenario. The hero wakes up and finds themselves in a room, wanting to move to an adjacent room where, unfortunately, there's a monster. Here's how we translate this scenario into a set of instructions, or a 'domain model,' in planning language.

The action we're talking about is called ""move-to-monster."" This means our hero is trying to move from one room (let’s call it Room A) to another room (Room B) where there is a monster. To ensure this action can happen, there are certain conditions that need to be met (these are called 'preconditions') and certain outcomes that will happen as a result of the action (these are called 'effects').

1. **Preconditions**:
   - **Connected Rooms**: Room A and Room B must be connected by a corridor. This makes sense because our hero can't magically jump from one room to another; there must be a path.
   - **Hero's Current Location**: The hero must currently be in Room A. If the hero isn't there, they can't start moving from it!
   - **Monster Presence**: Room B must have a monster. After all, the action is specifically about moving to a room with a monster.
   - **Room Integrity**: Room B should not be destroyed. A destroyed room might mean it’s collapsed or inaccessible, so it's logical our hero can’t move into it.
   - **Safety in Room A**: Room A should not have a trap. This makes sure our hero is safe and able to move without getting caught in a trap.
   - **Armed Hero**: The hero must be holding a sword. It’s a dangerous task to move into a room with a monster, so having a sword means the hero is prepared for a fight.

2. **Effects**:
   - **Hero's New Location**: After the action, the hero will be in Room B. They've successfully moved.
   - **Change in Room A's Status**: Room A becomes 'destroyed.' This might represent that the room is no longer safe or viable after the hero leaves, maybe because of the haste in escaping or some mechanism triggered by the departure.
   - **Update Hero's Old Location**: The fact that the hero was in Room A is no longer true, which is updated in our model to reflect the hero’s new position.

This planning helps organize our thoughts and actions logically, ensuring every step is clear and all necessary precautions are taken. Think of it like giving someone directions with a checklist: ""Before you go there, make sure this, this, and this are true, and once you do, this and this will happen."" This ensures everyone knows what to expect and how to prepare! ","Parameters:
1. ?from - cells
2. ?to - cells
3. ?s - swords

Preconditions:
```
(and
    (connected ?from ?to)
    (at-hero ?from)
    (has-monster ?to)
    (not (is-destroyed ?to))
    (not (has-trap ?from))
)
```

Effects:
```
(and
    (at-hero ?to)
    (is-destroyed ?from)
    (not (at-hero ?from))
)
```
","(:action move-to-monster
    :parameters (?from - cells ?to - cells ?s - swords)
    :precondition (and (connected ?from ?to) (at-hero ?from) (has-monster ?to) (not (is-destroyed ?to)) (not (has-trap ?from)) (holding ?s))
    :effect (and (at-hero ?to) (is-destroyed ?from) (not (at-hero ?from)))
)","remove (holding ?s) from preconditions
"
rpggame,move-to-monster,0.5614043474197388,Hard Negative (Manipulated Action),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: The hero can **move** to an adjacent room (connected by a corridor) that has not been destroyed (i.e., the hero has not already visited the room). When this action is executed, the hero gets into a location with a monster

Action name: move-to-monster


Your answer:

**Explanation:**

Let's imagine our hero in the dungeon scenario. The hero wakes up and finds themselves in a room, wanting to move to an adjacent room where, unfortunately, there's a monster. Here's how we translate this scenario into a set of instructions, or a 'domain model,' in planning language.

The action we're talking about is called ""move-to-monster."" This means our hero is trying to move from one room (let’s call it Room A) to another room (Room B) where there is a monster. To ensure this action can happen, there are certain conditions that need to be met (these are called 'preconditions') and certain outcomes that will happen as a result of the action (these are called 'effects').

1. **Preconditions**:
   - **Connected Rooms**: Room A and Room B must be connected by a corridor. This makes sense because our hero can't magically jump from one room to another; there must be a path.
   - **Hero's Current Location**: The hero must currently be in Room A. If the hero isn't there, they can't start moving from it!
   - **Monster Presence**: Room B must have a monster. After all, the action is specifically about moving to a room with a monster.
   - **Room Integrity**: Room B should not be destroyed. A destroyed room might mean it’s collapsed or inaccessible, so it's logical our hero can’t move into it.
   - **Safety in Room A**: Room A should not have a trap. This makes sure our hero is safe and able to move without getting caught in a trap.
   - **Armed Hero**: The hero must be holding a sword. It’s a dangerous task to move into a room with a monster, so having a sword means the hero is prepared for a fight.

2. **Effects**:
   - **Hero's New Location**: After the action, the hero will be in Room B. They've successfully moved.
   - **Change in Room A's Status**: Room A becomes 'destroyed.' This might represent that the room is no longer safe or viable after the hero leaves, maybe because of the haste in escaping or some mechanism triggered by the departure.
   - **Update Hero's Old Location**: The fact that the hero was in Room A is no longer true, which is updated in our model to reflect the hero’s new position.

This planning helps organize our thoughts and actions logically, ensuring every step is clear and all necessary precautions are taken. Think of it like giving someone directions with a checklist: ""Before you go there, make sure this, this, and this are true, and once you do, this and this will happen."" This ensures everyone knows what to expect and how to prepare! ","Parameters:
1. ?from - cells
2. ?to - cells
3. ?s - swords

Preconditions:
```
(and
    (is-destroyed ?to)
    (connected ?from ?to)
    (at-hero ?from)
    (has-monster ?to)
    (not (has-trap ?from))
    (holding ?s)
)
```

Effects:
```
(and
    (at-hero ?from)
    (at-hero ?to)
    (is-destroyed ?from)
)
```
","(:action move-to-monster
    :parameters (?from - cells ?to - cells ?s - swords)
    :precondition (and (connected ?from ?to) (at-hero ?from) (has-monster ?to) (not (is-destroyed ?to)) (not (has-trap ?from)) (holding ?s))
    :effect (and (at-hero ?to) (is-destroyed ?from) (not (at-hero ?from)))
)","negate (not (at-hero ?from)) in effects
negate (not (is-destroyed ?to)) in preconditions
"
rpggame,move-to-monster,0.8165873289108276,Hard Negative (Manipulated Action),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: The hero can **move** to an adjacent room (connected by a corridor) that has not been destroyed (i.e., the hero has not already visited the room). When this action is executed, the hero gets into a location with a monster

Action name: move-to-monster


Your answer:

**Explanation:**

Let's imagine our hero in the dungeon scenario. The hero wakes up and finds themselves in a room, wanting to move to an adjacent room where, unfortunately, there's a monster. Here's how we translate this scenario into a set of instructions, or a 'domain model,' in planning language.

The action we're talking about is called ""move-to-monster."" This means our hero is trying to move from one room (let’s call it Room A) to another room (Room B) where there is a monster. To ensure this action can happen, there are certain conditions that need to be met (these are called 'preconditions') and certain outcomes that will happen as a result of the action (these are called 'effects').

1. **Preconditions**:
   - **Connected Rooms**: Room A and Room B must be connected by a corridor. This makes sense because our hero can't magically jump from one room to another; there must be a path.
   - **Hero's Current Location**: The hero must currently be in Room A. If the hero isn't there, they can't start moving from it!
   - **Monster Presence**: Room B must have a monster. After all, the action is specifically about moving to a room with a monster.
   - **Room Integrity**: Room B should not be destroyed. A destroyed room might mean it’s collapsed or inaccessible, so it's logical our hero can’t move into it.
   - **Safety in Room A**: Room A should not have a trap. This makes sure our hero is safe and able to move without getting caught in a trap.
   - **Armed Hero**: The hero must be holding a sword. It’s a dangerous task to move into a room with a monster, so having a sword means the hero is prepared for a fight.

2. **Effects**:
   - **Hero's New Location**: After the action, the hero will be in Room B. They've successfully moved.
   - **Change in Room A's Status**: Room A becomes 'destroyed.' This might represent that the room is no longer safe or viable after the hero leaves, maybe because of the haste in escaping or some mechanism triggered by the departure.
   - **Update Hero's Old Location**: The fact that the hero was in Room A is no longer true, which is updated in our model to reflect the hero’s new position.

This planning helps organize our thoughts and actions logically, ensuring every step is clear and all necessary precautions are taken. Think of it like giving someone directions with a checklist: ""Before you go there, make sure this, this, and this are true, and once you do, this and this will happen."" This ensures everyone knows what to expect and how to prepare! ","Parameters:
1. ?from - cells
2. ?to - cells
3. ?s - swords

Preconditions:
```
(and
    (connected ?from ?to)
    (at-hero ?from)
    (has-monster ?to)
    (not (is-destroyed ?to))
    (not (has-trap ?from))
    (holding ?s)
)
```

Effects:
```
(and
    (not (is-destroyed ?from))
    (at-hero ?to)
    (not (at-hero ?from))
)
```
","(:action move-to-monster
    :parameters (?from - cells ?to - cells ?s - swords)
    :precondition (and (connected ?from ?to) (at-hero ?from) (has-monster ?to) (not (is-destroyed ?to)) (not (has-trap ?from)) (holding ?s))
    :effect (and (at-hero ?to) (is-destroyed ?from) (not (at-hero ?from)))
)","negate (is-destroyed ?from) in effects
"
rpggame,move-to-monster,0.5232926607131958,Hard Negative (Manipulated Action),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: The hero can **move** to an adjacent room (connected by a corridor) that has not been destroyed (i.e., the hero has not already visited the room). When this action is executed, the hero gets into a location with a monster

Action name: move-to-monster


Your answer:

**Explanation:**

Let's imagine our hero in the dungeon scenario. The hero wakes up and finds themselves in a room, wanting to move to an adjacent room where, unfortunately, there's a monster. Here's how we translate this scenario into a set of instructions, or a 'domain model,' in planning language.

The action we're talking about is called ""move-to-monster."" This means our hero is trying to move from one room (let’s call it Room A) to another room (Room B) where there is a monster. To ensure this action can happen, there are certain conditions that need to be met (these are called 'preconditions') and certain outcomes that will happen as a result of the action (these are called 'effects').

1. **Preconditions**:
   - **Connected Rooms**: Room A and Room B must be connected by a corridor. This makes sense because our hero can't magically jump from one room to another; there must be a path.
   - **Hero's Current Location**: The hero must currently be in Room A. If the hero isn't there, they can't start moving from it!
   - **Monster Presence**: Room B must have a monster. After all, the action is specifically about moving to a room with a monster.
   - **Room Integrity**: Room B should not be destroyed. A destroyed room might mean it’s collapsed or inaccessible, so it's logical our hero can’t move into it.
   - **Safety in Room A**: Room A should not have a trap. This makes sure our hero is safe and able to move without getting caught in a trap.
   - **Armed Hero**: The hero must be holding a sword. It’s a dangerous task to move into a room with a monster, so having a sword means the hero is prepared for a fight.

2. **Effects**:
   - **Hero's New Location**: After the action, the hero will be in Room B. They've successfully moved.
   - **Change in Room A's Status**: Room A becomes 'destroyed.' This might represent that the room is no longer safe or viable after the hero leaves, maybe because of the haste in escaping or some mechanism triggered by the departure.
   - **Update Hero's Old Location**: The fact that the hero was in Room A is no longer true, which is updated in our model to reflect the hero’s new position.

This planning helps organize our thoughts and actions logically, ensuring every step is clear and all necessary precautions are taken. Think of it like giving someone directions with a checklist: ""Before you go there, make sure this, this, and this are true, and once you do, this and this will happen."" This ensures everyone knows what to expect and how to prepare! ","Parameters:
1. ?from - cells
2. ?to - cells
3. ?s - swords

Preconditions:
```
(and
    (not (at-hero ?from))
    (connected ?from ?to)
    (has-monster ?to)
    (not (is-destroyed ?to))
    (not (has-trap ?from))
    (holding ?s)
)
```

Effects:
```
(and
    (at-hero ?to)
    (is-destroyed ?from)
    (not (at-hero ?from))
)
```
","(:action move-to-monster
    :parameters (?from - cells ?to - cells ?s - swords)
    :precondition (and (connected ?from ?to) (at-hero ?from) (has-monster ?to) (not (is-destroyed ?to)) (not (has-trap ?from)) (holding ?s))
    :effect (and (at-hero ?to) (is-destroyed ?from) (not (at-hero ?from)))
)","negate (at-hero ?from) in preconditions
"
rpggame,move-to-monster,0.8345639705657959,Hard Negative (Manipulated Action),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: The hero can **move** to an adjacent room (connected by a corridor) that has not been destroyed (i.e., the hero has not already visited the room). When this action is executed, the hero gets into a location with a monster

Action name: move-to-monster


Your answer:

**Explanation:**

Let's imagine our hero in the dungeon scenario. The hero wakes up and finds themselves in a room, wanting to move to an adjacent room where, unfortunately, there's a monster. Here's how we translate this scenario into a set of instructions, or a 'domain model,' in planning language.

The action we're talking about is called ""move-to-monster."" This means our hero is trying to move from one room (let’s call it Room A) to another room (Room B) where there is a monster. To ensure this action can happen, there are certain conditions that need to be met (these are called 'preconditions') and certain outcomes that will happen as a result of the action (these are called 'effects').

1. **Preconditions**:
   - **Connected Rooms**: Room A and Room B must be connected by a corridor. This makes sense because our hero can't magically jump from one room to another; there must be a path.
   - **Hero's Current Location**: The hero must currently be in Room A. If the hero isn't there, they can't start moving from it!
   - **Monster Presence**: Room B must have a monster. After all, the action is specifically about moving to a room with a monster.
   - **Room Integrity**: Room B should not be destroyed. A destroyed room might mean it’s collapsed or inaccessible, so it's logical our hero can’t move into it.
   - **Safety in Room A**: Room A should not have a trap. This makes sure our hero is safe and able to move without getting caught in a trap.
   - **Armed Hero**: The hero must be holding a sword. It’s a dangerous task to move into a room with a monster, so having a sword means the hero is prepared for a fight.

2. **Effects**:
   - **Hero's New Location**: After the action, the hero will be in Room B. They've successfully moved.
   - **Change in Room A's Status**: Room A becomes 'destroyed.' This might represent that the room is no longer safe or viable after the hero leaves, maybe because of the haste in escaping or some mechanism triggered by the departure.
   - **Update Hero's Old Location**: The fact that the hero was in Room A is no longer true, which is updated in our model to reflect the hero’s new position.

This planning helps organize our thoughts and actions logically, ensuring every step is clear and all necessary precautions are taken. Think of it like giving someone directions with a checklist: ""Before you go there, make sure this, this, and this are true, and once you do, this and this will happen."" This ensures everyone knows what to expect and how to prepare! ","Parameters:
1. ?from - cells
2. ?to - cells
3. ?s - swords

Preconditions:
```
(and
    (connected ?from ?to)
    (at-hero ?from)
    (has-monster ?to)
    (not (is-destroyed ?to))
    (not (has-trap ?from))
    (holding ?s)
)
```

Effects:
```
(and
    (at-hero ?from)
    (not (is-destroyed ?from))
    (at-hero ?to)
)
```
","(:action move-to-monster
    :parameters (?from - cells ?to - cells ?s - swords)
    :precondition (and (connected ?from ?to) (at-hero ?from) (has-monster ?to) (not (is-destroyed ?to)) (not (has-trap ?from)) (holding ?s))
    :effect (and (at-hero ?to) (is-destroyed ?from) (not (at-hero ?from)))
)","negate (not (at-hero ?from)) in effects
negate (is-destroyed ?from) in effects
"
rpggame,move-to-monster,0.6899423599243164,Hard Negative (Manipulated Action),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: The hero can **move** to an adjacent room (connected by a corridor) that has not been destroyed (i.e., the hero has not already visited the room). When this action is executed, the hero gets into a location with a monster

Action name: move-to-monster


Your answer:

**Explanation:**

Let's imagine our hero in the dungeon scenario. The hero wakes up and finds themselves in a room, wanting to move to an adjacent room where, unfortunately, there's a monster. Here's how we translate this scenario into a set of instructions, or a 'domain model,' in planning language.

The action we're talking about is called ""move-to-monster."" This means our hero is trying to move from one room (let’s call it Room A) to another room (Room B) where there is a monster. To ensure this action can happen, there are certain conditions that need to be met (these are called 'preconditions') and certain outcomes that will happen as a result of the action (these are called 'effects').

1. **Preconditions**:
   - **Connected Rooms**: Room A and Room B must be connected by a corridor. This makes sense because our hero can't magically jump from one room to another; there must be a path.
   - **Hero's Current Location**: The hero must currently be in Room A. If the hero isn't there, they can't start moving from it!
   - **Monster Presence**: Room B must have a monster. After all, the action is specifically about moving to a room with a monster.
   - **Room Integrity**: Room B should not be destroyed. A destroyed room might mean it’s collapsed or inaccessible, so it's logical our hero can’t move into it.
   - **Safety in Room A**: Room A should not have a trap. This makes sure our hero is safe and able to move without getting caught in a trap.
   - **Armed Hero**: The hero must be holding a sword. It’s a dangerous task to move into a room with a monster, so having a sword means the hero is prepared for a fight.

2. **Effects**:
   - **Hero's New Location**: After the action, the hero will be in Room B. They've successfully moved.
   - **Change in Room A's Status**: Room A becomes 'destroyed.' This might represent that the room is no longer safe or viable after the hero leaves, maybe because of the haste in escaping or some mechanism triggered by the departure.
   - **Update Hero's Old Location**: The fact that the hero was in Room A is no longer true, which is updated in our model to reflect the hero’s new position.

This planning helps organize our thoughts and actions logically, ensuring every step is clear and all necessary precautions are taken. Think of it like giving someone directions with a checklist: ""Before you go there, make sure this, this, and this are true, and once you do, this and this will happen."" This ensures everyone knows what to expect and how to prepare! ","Parameters:
1. ?from - cells
2. ?to - cells
3. ?s - swords

Preconditions:
```
(and
    (at-hero ?to)
    (connected ?from ?to)
    (at-hero ?from)
    (has-monster ?to)
    (not (is-destroyed ?to))
    (holding ?s)
)
```

Effects:
```
(and
    (not (has-trap ?from))
    (is-destroyed ?from)
    (not (at-hero ?from))
)
```
","(:action move-to-monster
    :parameters (?from - cells ?to - cells ?s - swords)
    :precondition (and (connected ?from ?to) (at-hero ?from) (has-monster ?to) (not (is-destroyed ?to)) (not (has-trap ?from)) (holding ?s))
    :effect (and (at-hero ?to) (is-destroyed ?from) (not (at-hero ?from)))
)","swap (not (has-trap ?from)) with (at-hero ?to)
"
rpggame,move-to-monster,0.7691131830215454,Hard Negative (Manipulated Action),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: The hero can **move** to an adjacent room (connected by a corridor) that has not been destroyed (i.e., the hero has not already visited the room). When this action is executed, the hero gets into a location with a monster

Action name: move-to-monster


Your answer:

**Explanation:**

Let's imagine our hero in the dungeon scenario. The hero wakes up and finds themselves in a room, wanting to move to an adjacent room where, unfortunately, there's a monster. Here's how we translate this scenario into a set of instructions, or a 'domain model,' in planning language.

The action we're talking about is called ""move-to-monster."" This means our hero is trying to move from one room (let’s call it Room A) to another room (Room B) where there is a monster. To ensure this action can happen, there are certain conditions that need to be met (these are called 'preconditions') and certain outcomes that will happen as a result of the action (these are called 'effects').

1. **Preconditions**:
   - **Connected Rooms**: Room A and Room B must be connected by a corridor. This makes sense because our hero can't magically jump from one room to another; there must be a path.
   - **Hero's Current Location**: The hero must currently be in Room A. If the hero isn't there, they can't start moving from it!
   - **Monster Presence**: Room B must have a monster. After all, the action is specifically about moving to a room with a monster.
   - **Room Integrity**: Room B should not be destroyed. A destroyed room might mean it’s collapsed or inaccessible, so it's logical our hero can’t move into it.
   - **Safety in Room A**: Room A should not have a trap. This makes sure our hero is safe and able to move without getting caught in a trap.
   - **Armed Hero**: The hero must be holding a sword. It’s a dangerous task to move into a room with a monster, so having a sword means the hero is prepared for a fight.

2. **Effects**:
   - **Hero's New Location**: After the action, the hero will be in Room B. They've successfully moved.
   - **Change in Room A's Status**: Room A becomes 'destroyed.' This might represent that the room is no longer safe or viable after the hero leaves, maybe because of the haste in escaping or some mechanism triggered by the departure.
   - **Update Hero's Old Location**: The fact that the hero was in Room A is no longer true, which is updated in our model to reflect the hero’s new position.

This planning helps organize our thoughts and actions logically, ensuring every step is clear and all necessary precautions are taken. Think of it like giving someone directions with a checklist: ""Before you go there, make sure this, this, and this are true, and once you do, this and this will happen."" This ensures everyone knows what to expect and how to prepare! ","Parameters:
1. ?from - cells
2. ?to - cells
3. ?s - swords

Preconditions:
```
(and
    (connected ?from ?to)
    (at-hero ?from)
    (has-monster ?to)
    (not (is-destroyed ?to))
    (not (has-trap ?from))
    (holding ?s)
)
```

Effects:
```
(and
    (at-hero ?to)
    (is-destroyed ?from)
)
```
","(:action move-to-monster
    :parameters (?from - cells ?to - cells ?s - swords)
    :precondition (and (connected ?from ?to) (at-hero ?from) (has-monster ?to) (not (is-destroyed ?to)) (not (has-trap ?from)) (holding ?s))
    :effect (and (at-hero ?to) (is-destroyed ?from) (not (at-hero ?from)))
)","remove (not (at-hero ?from)) from effects
"
rpggame,move-to-monster,0.4287538528442383,Hard Negative (Manipulated Action),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: The hero can **move** to an adjacent room (connected by a corridor) that has not been destroyed (i.e., the hero has not already visited the room). When this action is executed, the hero gets into a location with a monster

Action name: move-to-monster


Your answer:

**Explanation:**

Let's imagine our hero in the dungeon scenario. The hero wakes up and finds themselves in a room, wanting to move to an adjacent room where, unfortunately, there's a monster. Here's how we translate this scenario into a set of instructions, or a 'domain model,' in planning language.

The action we're talking about is called ""move-to-monster."" This means our hero is trying to move from one room (let’s call it Room A) to another room (Room B) where there is a monster. To ensure this action can happen, there are certain conditions that need to be met (these are called 'preconditions') and certain outcomes that will happen as a result of the action (these are called 'effects').

1. **Preconditions**:
   - **Connected Rooms**: Room A and Room B must be connected by a corridor. This makes sense because our hero can't magically jump from one room to another; there must be a path.
   - **Hero's Current Location**: The hero must currently be in Room A. If the hero isn't there, they can't start moving from it!
   - **Monster Presence**: Room B must have a monster. After all, the action is specifically about moving to a room with a monster.
   - **Room Integrity**: Room B should not be destroyed. A destroyed room might mean it’s collapsed or inaccessible, so it's logical our hero can’t move into it.
   - **Safety in Room A**: Room A should not have a trap. This makes sure our hero is safe and able to move without getting caught in a trap.
   - **Armed Hero**: The hero must be holding a sword. It’s a dangerous task to move into a room with a monster, so having a sword means the hero is prepared for a fight.

2. **Effects**:
   - **Hero's New Location**: After the action, the hero will be in Room B. They've successfully moved.
   - **Change in Room A's Status**: Room A becomes 'destroyed.' This might represent that the room is no longer safe or viable after the hero leaves, maybe because of the haste in escaping or some mechanism triggered by the departure.
   - **Update Hero's Old Location**: The fact that the hero was in Room A is no longer true, which is updated in our model to reflect the hero’s new position.

This planning helps organize our thoughts and actions logically, ensuring every step is clear and all necessary precautions are taken. Think of it like giving someone directions with a checklist: ""Before you go there, make sure this, this, and this are true, and once you do, this and this will happen."" This ensures everyone knows what to expect and how to prepare! ","Parameters:
1. ?from - cells
2. ?to - cells
3. ?s - swords

Preconditions:
```
(and
    (not (holding ?s))
    (connected ?from ?to)
    (at-hero ?from)
    (has-monster ?to)
    (not (is-destroyed ?to))
    (not (has-trap ?from))
)
```

Effects:
```
(and
    (at-hero ?to)
    (not (at-hero ?from))
)
```
","(:action move-to-monster
    :parameters (?from - cells ?to - cells ?s - swords)
    :precondition (and (connected ?from ?to) (at-hero ?from) (has-monster ?to) (not (is-destroyed ?to)) (not (has-trap ?from)) (holding ?s))
    :effect (and (at-hero ?to) (is-destroyed ?from) (not (at-hero ?from)))
)","negate (holding ?s) in preconditions
remove (is-destroyed ?from) from effects
"
rpggame,move-to-monster,0.7270770072937012,Hard Negative (Manipulated Action),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: The hero can **move** to an adjacent room (connected by a corridor) that has not been destroyed (i.e., the hero has not already visited the room). When this action is executed, the hero gets into a location with a monster

Action name: move-to-monster


Your answer:

**Explanation:**

Let's imagine our hero in the dungeon scenario. The hero wakes up and finds themselves in a room, wanting to move to an adjacent room where, unfortunately, there's a monster. Here's how we translate this scenario into a set of instructions, or a 'domain model,' in planning language.

The action we're talking about is called ""move-to-monster."" This means our hero is trying to move from one room (let’s call it Room A) to another room (Room B) where there is a monster. To ensure this action can happen, there are certain conditions that need to be met (these are called 'preconditions') and certain outcomes that will happen as a result of the action (these are called 'effects').

1. **Preconditions**:
   - **Connected Rooms**: Room A and Room B must be connected by a corridor. This makes sense because our hero can't magically jump from one room to another; there must be a path.
   - **Hero's Current Location**: The hero must currently be in Room A. If the hero isn't there, they can't start moving from it!
   - **Monster Presence**: Room B must have a monster. After all, the action is specifically about moving to a room with a monster.
   - **Room Integrity**: Room B should not be destroyed. A destroyed room might mean it’s collapsed or inaccessible, so it's logical our hero can’t move into it.
   - **Safety in Room A**: Room A should not have a trap. This makes sure our hero is safe and able to move without getting caught in a trap.
   - **Armed Hero**: The hero must be holding a sword. It’s a dangerous task to move into a room with a monster, so having a sword means the hero is prepared for a fight.

2. **Effects**:
   - **Hero's New Location**: After the action, the hero will be in Room B. They've successfully moved.
   - **Change in Room A's Status**: Room A becomes 'destroyed.' This might represent that the room is no longer safe or viable after the hero leaves, maybe because of the haste in escaping or some mechanism triggered by the departure.
   - **Update Hero's Old Location**: The fact that the hero was in Room A is no longer true, which is updated in our model to reflect the hero’s new position.

This planning helps organize our thoughts and actions logically, ensuring every step is clear and all necessary precautions are taken. Think of it like giving someone directions with a checklist: ""Before you go there, make sure this, this, and this are true, and once you do, this and this will happen."" This ensures everyone knows what to expect and how to prepare! ","Parameters:
1. ?from - cells
2. ?to - cells
3. ?s - swords

Preconditions:
```
(and
    (connected ?from ?to)
    (at-hero ?from)
    (has-monster ?to)
    (not (is-destroyed ?to))
    (not (has-trap ?from))
)
```

Effects:
```
(and
    (at-hero ?from)
    (at-hero ?to)
    (is-destroyed ?from)
)
```
","(:action move-to-monster
    :parameters (?from - cells ?to - cells ?s - swords)
    :precondition (and (connected ?from ?to) (at-hero ?from) (has-monster ?to) (not (is-destroyed ?to)) (not (has-trap ?from)) (holding ?s))
    :effect (and (at-hero ?to) (is-destroyed ?from) (not (at-hero ?from)))
)","remove (holding ?s) from preconditions
negate (not (at-hero ?from)) in effects
"
rpggame,move-to-monster,0.6325230598449707,Hard Negative (Manipulated Action),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: The hero can **move** to an adjacent room (connected by a corridor) that has not been destroyed (i.e., the hero has not already visited the room). When this action is executed, the hero gets into a location with a monster

Action name: move-to-monster


Your answer:

**Explanation:**

Let's imagine our hero in the dungeon scenario. The hero wakes up and finds themselves in a room, wanting to move to an adjacent room where, unfortunately, there's a monster. Here's how we translate this scenario into a set of instructions, or a 'domain model,' in planning language.

The action we're talking about is called ""move-to-monster."" This means our hero is trying to move from one room (let’s call it Room A) to another room (Room B) where there is a monster. To ensure this action can happen, there are certain conditions that need to be met (these are called 'preconditions') and certain outcomes that will happen as a result of the action (these are called 'effects').

1. **Preconditions**:
   - **Connected Rooms**: Room A and Room B must be connected by a corridor. This makes sense because our hero can't magically jump from one room to another; there must be a path.
   - **Hero's Current Location**: The hero must currently be in Room A. If the hero isn't there, they can't start moving from it!
   - **Monster Presence**: Room B must have a monster. After all, the action is specifically about moving to a room with a monster.
   - **Room Integrity**: Room B should not be destroyed. A destroyed room might mean it’s collapsed or inaccessible, so it's logical our hero can’t move into it.
   - **Safety in Room A**: Room A should not have a trap. This makes sure our hero is safe and able to move without getting caught in a trap.
   - **Armed Hero**: The hero must be holding a sword. It’s a dangerous task to move into a room with a monster, so having a sword means the hero is prepared for a fight.

2. **Effects**:
   - **Hero's New Location**: After the action, the hero will be in Room B. They've successfully moved.
   - **Change in Room A's Status**: Room A becomes 'destroyed.' This might represent that the room is no longer safe or viable after the hero leaves, maybe because of the haste in escaping or some mechanism triggered by the departure.
   - **Update Hero's Old Location**: The fact that the hero was in Room A is no longer true, which is updated in our model to reflect the hero’s new position.

This planning helps organize our thoughts and actions logically, ensuring every step is clear and all necessary precautions are taken. Think of it like giving someone directions with a checklist: ""Before you go there, make sure this, this, and this are true, and once you do, this and this will happen."" This ensures everyone knows what to expect and how to prepare! ","Parameters:
1. ?from - cells
2. ?to - cells
3. ?s - swords

Preconditions:
```
(and
    (has-trap ?from)
    (connected ?from ?to)
    (at-hero ?from)
    (has-monster ?to)
    (not (is-destroyed ?to))
    (holding ?s)
)
```

Effects:
```
(and
    (at-hero ?to)
    (is-destroyed ?from)
)
```
","(:action move-to-monster
    :parameters (?from - cells ?to - cells ?s - swords)
    :precondition (and (connected ?from ?to) (at-hero ?from) (has-monster ?to) (not (is-destroyed ?to)) (not (has-trap ?from)) (holding ?s))
    :effect (and (at-hero ?to) (is-destroyed ?from) (not (at-hero ?from)))
)","remove (not (at-hero ?from)) from effects
negate (not (has-trap ?from)) in preconditions
"
rpggame,move-to-monster,0.7913336157798767,Hard Negative (Manipulated Action),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: The hero can **move** to an adjacent room (connected by a corridor) that has not been destroyed (i.e., the hero has not already visited the room). When this action is executed, the hero gets into a location with a monster

Action name: move-to-monster


Your answer:
","**Explanation:**

Let's imagine our hero in the dungeon scenario. The hero wakes up and finds themselves in a room, wanting to move to an adjacent room where, unfortunately, there's a monster. Here's how we translate this scenario into a set of instructions, or a 'domain model,' in planning language.

The action we're talking about is called ""move-to-monster."" This means our hero is trying to move from one room (let’s call it Room A) to another room (Room B) where there is a monster. To ensure this action can happen, there are certain conditions that need to be met (these are called 'preconditions') and certain outcomes that will happen as a result of the action (these are called 'effects').

1. **Preconditions**:
   - **Connected Rooms**: Room A and Room B must be connected by a corridor. This makes sense because our hero can't magically jump from one room to another; there must be a path.
   - **Hero's Current Location**: The hero must currently be in Room A. If the hero isn't there, they can't start moving from it!
   - **Monster Presence**: Room B must have a monster. After all, the action is specifically about moving to a room with a monster.
   - **Room Integrity**: Room B should not be destroyed. A destroyed room might mean it’s collapsed or inaccessible, so it's logical our hero can’t move into it.
   - **Safety in Room A**: Room A should not have a trap. This makes sure our hero is safe and able to move without getting caught in a trap.
   - **Armed Hero**: The hero must be holding a sword. It’s a dangerous task to move into a room with a monster, so having a sword means the hero is prepared for a fight.

2. **Effects**:
   - **Hero's New Location**: After the action, the hero will be in Room B. They've successfully moved.
   - **Change in Room A's Status**: Room A becomes 'destroyed.' This might represent that the room is no longer safe or viable after the hero leaves, maybe because of the haste in escaping or some mechanism triggered by the departure.
   - **Update Hero's Old Location**: The fact that the hero was in Room A is no longer true, which is updated in our model to reflect the hero’s new position.

This planning helps organize our thoughts and actions logically, ensuring every step is clear and all necessary precautions are taken. Think of it like giving someone directions with a checklist: ""Before you go there, make sure this, this, and this are true, and once you do, this and this will happen."" This ensures everyone knows what to expect and how to prepare! 
Parameters:
1. ?from - cells
2. ?to - cells
3. ?s - swords

Preconditions:
```
(and
    (connected ?from ?to)
    (has-monster ?to)
    (not (is-destroyed ?to))
    (not (has-trap ?from))
    (holding ?s)
)
```

Effects:
```
(and
    (at-hero ?to)
    (is-destroyed ?from)
    (not (at-hero ?from))
)
```
","(:action move-to-monster
    :parameters (?from - cells ?to - cells ?s - swords)
    :precondition (and (connected ?from ?to) (at-hero ?from) (has-monster ?to) (not (is-destroyed ?to)) (not (has-trap ?from)) (holding ?s))
    :effect (and (at-hero ?to) (is-destroyed ?from) (not (at-hero ?from)))
)","remove (at-hero ?from) from preconditions
"
rpggame,move-to-monster,0.7913336157798767,Hard Negative (Manipulated Action),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: The hero can **move** to an adjacent room (connected by a corridor) that has not been destroyed (i.e., the hero has not already visited the room). When this action is executed, the hero gets into a location with a monster

Action name: move-to-monster


Your answer:
","**Explanation:**

Let's imagine our hero in the dungeon scenario. The hero wakes up and finds themselves in a room, wanting to move to an adjacent room where, unfortunately, there's a monster. Here's how we translate this scenario into a set of instructions, or a 'domain model,' in planning language.

The action we're talking about is called ""move-to-monster."" This means our hero is trying to move from one room (let’s call it Room A) to another room (Room B) where there is a monster. To ensure this action can happen, there are certain conditions that need to be met (these are called 'preconditions') and certain outcomes that will happen as a result of the action (these are called 'effects').

1. **Preconditions**:
   - **Connected Rooms**: Room A and Room B must be connected by a corridor. This makes sense because our hero can't magically jump from one room to another; there must be a path.
   - **Hero's Current Location**: The hero must currently be in Room A. If the hero isn't there, they can't start moving from it!
   - **Monster Presence**: Room B must have a monster. After all, the action is specifically about moving to a room with a monster.
   - **Room Integrity**: Room B should not be destroyed. A destroyed room might mean it’s collapsed or inaccessible, so it's logical our hero can’t move into it.
   - **Safety in Room A**: Room A should not have a trap. This makes sure our hero is safe and able to move without getting caught in a trap.
   - **Armed Hero**: The hero must be holding a sword. It’s a dangerous task to move into a room with a monster, so having a sword means the hero is prepared for a fight.

2. **Effects**:
   - **Hero's New Location**: After the action, the hero will be in Room B. They've successfully moved.
   - **Change in Room A's Status**: Room A becomes 'destroyed.' This might represent that the room is no longer safe or viable after the hero leaves, maybe because of the haste in escaping or some mechanism triggered by the departure.
   - **Update Hero's Old Location**: The fact that the hero was in Room A is no longer true, which is updated in our model to reflect the hero’s new position.

This planning helps organize our thoughts and actions logically, ensuring every step is clear and all necessary precautions are taken. Think of it like giving someone directions with a checklist: ""Before you go there, make sure this, this, and this are true, and once you do, this and this will happen."" This ensures everyone knows what to expect and how to prepare! 
Parameters:
1. ?from - cells
2. ?to - cells
3. ?s - swords

Preconditions:
```
(and
    (at-hero ?to)
    (connected ?from ?to)
    (has-monster ?to)
    (not (is-destroyed ?to))
    (not (has-trap ?from))
    (holding ?s)
)
```

Effects:
```
(and
    (at-hero ?from)
    (is-destroyed ?from)
    (not (at-hero ?from))
)
```
","(:action move-to-monster
    :parameters (?from - cells ?to - cells ?s - swords)
    :precondition (and (connected ?from ?to) (at-hero ?from) (has-monster ?to) (not (is-destroyed ?to)) (not (has-trap ?from)) (holding ?s))
    :effect (and (at-hero ?to) (is-destroyed ?from) (not (at-hero ?from)))
)","swap (at-hero ?from) with (at-hero ?to)
"
rpggame,move-to-monster,0.7913336157798767,Hard Negative (Manipulated Action),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: The hero can **move** to an adjacent room (connected by a corridor) that has not been destroyed (i.e., the hero has not already visited the room). When this action is executed, the hero gets into a location with a monster

Action name: move-to-monster


Your answer:
","**Explanation:**

Let's imagine our hero in the dungeon scenario. The hero wakes up and finds themselves in a room, wanting to move to an adjacent room where, unfortunately, there's a monster. Here's how we translate this scenario into a set of instructions, or a 'domain model,' in planning language.

The action we're talking about is called ""move-to-monster."" This means our hero is trying to move from one room (let’s call it Room A) to another room (Room B) where there is a monster. To ensure this action can happen, there are certain conditions that need to be met (these are called 'preconditions') and certain outcomes that will happen as a result of the action (these are called 'effects').

1. **Preconditions**:
   - **Connected Rooms**: Room A and Room B must be connected by a corridor. This makes sense because our hero can't magically jump from one room to another; there must be a path.
   - **Hero's Current Location**: The hero must currently be in Room A. If the hero isn't there, they can't start moving from it!
   - **Monster Presence**: Room B must have a monster. After all, the action is specifically about moving to a room with a monster.
   - **Room Integrity**: Room B should not be destroyed. A destroyed room might mean it’s collapsed or inaccessible, so it's logical our hero can’t move into it.
   - **Safety in Room A**: Room A should not have a trap. This makes sure our hero is safe and able to move without getting caught in a trap.
   - **Armed Hero**: The hero must be holding a sword. It’s a dangerous task to move into a room with a monster, so having a sword means the hero is prepared for a fight.

2. **Effects**:
   - **Hero's New Location**: After the action, the hero will be in Room B. They've successfully moved.
   - **Change in Room A's Status**: Room A becomes 'destroyed.' This might represent that the room is no longer safe or viable after the hero leaves, maybe because of the haste in escaping or some mechanism triggered by the departure.
   - **Update Hero's Old Location**: The fact that the hero was in Room A is no longer true, which is updated in our model to reflect the hero’s new position.

This planning helps organize our thoughts and actions logically, ensuring every step is clear and all necessary precautions are taken. Think of it like giving someone directions with a checklist: ""Before you go there, make sure this, this, and this are true, and once you do, this and this will happen."" This ensures everyone knows what to expect and how to prepare! 
Parameters:
1. ?from - cells
2. ?to - cells
3. ?s - swords

Preconditions:
```
(and
    (at-hero ?to)
    (connected ?from ?to)
    (at-hero ?from)
    (not (is-destroyed ?to))
    (not (has-trap ?from))
    (holding ?s)
)
```

Effects:
```
(and
    (has-monster ?to)
    (not (at-hero ?from))
)
```
","(:action move-to-monster
    :parameters (?from - cells ?to - cells ?s - swords)
    :precondition (and (connected ?from ?to) (at-hero ?from) (has-monster ?to) (not (is-destroyed ?to)) (not (has-trap ?from)) (holding ?s))
    :effect (and (at-hero ?to) (is-destroyed ?from) (not (at-hero ?from)))
)","swap (has-monster ?to) with (at-hero ?to)
remove (is-destroyed ?from) from effects
"
rpggame,move-to-monster,0.7913336157798767,Hard Negative (Manipulated Action),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: The hero can **move** to an adjacent room (connected by a corridor) that has not been destroyed (i.e., the hero has not already visited the room). When this action is executed, the hero gets into a location with a monster

Action name: move-to-monster


Your answer:
","**Explanation:**

Let's imagine our hero in the dungeon scenario. The hero wakes up and finds themselves in a room, wanting to move to an adjacent room where, unfortunately, there's a monster. Here's how we translate this scenario into a set of instructions, or a 'domain model,' in planning language.

The action we're talking about is called ""move-to-monster."" This means our hero is trying to move from one room (let’s call it Room A) to another room (Room B) where there is a monster. To ensure this action can happen, there are certain conditions that need to be met (these are called 'preconditions') and certain outcomes that will happen as a result of the action (these are called 'effects').

1. **Preconditions**:
   - **Connected Rooms**: Room A and Room B must be connected by a corridor. This makes sense because our hero can't magically jump from one room to another; there must be a path.
   - **Hero's Current Location**: The hero must currently be in Room A. If the hero isn't there, they can't start moving from it!
   - **Monster Presence**: Room B must have a monster. After all, the action is specifically about moving to a room with a monster.
   - **Room Integrity**: Room B should not be destroyed. A destroyed room might mean it’s collapsed or inaccessible, so it's logical our hero can’t move into it.
   - **Safety in Room A**: Room A should not have a trap. This makes sure our hero is safe and able to move without getting caught in a trap.
   - **Armed Hero**: The hero must be holding a sword. It’s a dangerous task to move into a room with a monster, so having a sword means the hero is prepared for a fight.

2. **Effects**:
   - **Hero's New Location**: After the action, the hero will be in Room B. They've successfully moved.
   - **Change in Room A's Status**: Room A becomes 'destroyed.' This might represent that the room is no longer safe or viable after the hero leaves, maybe because of the haste in escaping or some mechanism triggered by the departure.
   - **Update Hero's Old Location**: The fact that the hero was in Room A is no longer true, which is updated in our model to reflect the hero’s new position.

This planning helps organize our thoughts and actions logically, ensuring every step is clear and all necessary precautions are taken. Think of it like giving someone directions with a checklist: ""Before you go there, make sure this, this, and this are true, and once you do, this and this will happen."" This ensures everyone knows what to expect and how to prepare! 
Parameters:
1. ?from - cells
2. ?to - cells
3. ?s - swords

Preconditions:
```
(and
    (connected ?from ?to)
    (at-hero ?from)
    (has-monster ?to)
    (not (is-destroyed ?to))
    (not (has-trap ?from))
    (holding ?s)
)
```

Effects:
```
(and
    (is-destroyed ?from)
)
```
","(:action move-to-monster
    :parameters (?from - cells ?to - cells ?s - swords)
    :precondition (and (connected ?from ?to) (at-hero ?from) (has-monster ?to) (not (is-destroyed ?to)) (not (has-trap ?from)) (holding ?s))
    :effect (and (at-hero ?to) (is-destroyed ?from) (not (at-hero ?from)))
)","remove (not (at-hero ?from)) from effects
remove (at-hero ?to) from effects
"
rpggame,move-to-monster,0.7913336157798767,Hard Negative (Manipulated Action),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: The hero can **move** to an adjacent room (connected by a corridor) that has not been destroyed (i.e., the hero has not already visited the room). When this action is executed, the hero gets into a location with a monster

Action name: move-to-monster


Your answer:
","**Explanation:**

Let's imagine our hero in the dungeon scenario. The hero wakes up and finds themselves in a room, wanting to move to an adjacent room where, unfortunately, there's a monster. Here's how we translate this scenario into a set of instructions, or a 'domain model,' in planning language.

The action we're talking about is called ""move-to-monster."" This means our hero is trying to move from one room (let’s call it Room A) to another room (Room B) where there is a monster. To ensure this action can happen, there are certain conditions that need to be met (these are called 'preconditions') and certain outcomes that will happen as a result of the action (these are called 'effects').

1. **Preconditions**:
   - **Connected Rooms**: Room A and Room B must be connected by a corridor. This makes sense because our hero can't magically jump from one room to another; there must be a path.
   - **Hero's Current Location**: The hero must currently be in Room A. If the hero isn't there, they can't start moving from it!
   - **Monster Presence**: Room B must have a monster. After all, the action is specifically about moving to a room with a monster.
   - **Room Integrity**: Room B should not be destroyed. A destroyed room might mean it’s collapsed or inaccessible, so it's logical our hero can’t move into it.
   - **Safety in Room A**: Room A should not have a trap. This makes sure our hero is safe and able to move without getting caught in a trap.
   - **Armed Hero**: The hero must be holding a sword. It’s a dangerous task to move into a room with a monster, so having a sword means the hero is prepared for a fight.

2. **Effects**:
   - **Hero's New Location**: After the action, the hero will be in Room B. They've successfully moved.
   - **Change in Room A's Status**: Room A becomes 'destroyed.' This might represent that the room is no longer safe or viable after the hero leaves, maybe because of the haste in escaping or some mechanism triggered by the departure.
   - **Update Hero's Old Location**: The fact that the hero was in Room A is no longer true, which is updated in our model to reflect the hero’s new position.

This planning helps organize our thoughts and actions logically, ensuring every step is clear and all necessary precautions are taken. Think of it like giving someone directions with a checklist: ""Before you go there, make sure this, this, and this are true, and once you do, this and this will happen."" This ensures everyone knows what to expect and how to prepare! 
Parameters:
1. ?from - cells
2. ?to - cells
3. ?s - swords

Preconditions:
```
(and
    (connected ?from ?to)
    (at-hero ?from)
    (has-monster ?to)
    (not (is-destroyed ?to))
    (not (has-trap ?from))
    (holding ?s)
)
```

Effects:
```
(and
    (at-hero ?to)
    (is-destroyed ?from)
)
```
","(:action move-to-monster
    :parameters (?from - cells ?to - cells ?s - swords)
    :precondition (and (connected ?from ?to) (at-hero ?from) (has-monster ?to) (not (is-destroyed ?to)) (not (has-trap ?from)) (holding ?s))
    :effect (and (at-hero ?to) (is-destroyed ?from) (not (at-hero ?from)))
)","remove (not (at-hero ?from)) from effects
"
rpggame,move-to-monster,0.7913336157798767,Hard Negative (Manipulated Action),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: The hero can **move** to an adjacent room (connected by a corridor) that has not been destroyed (i.e., the hero has not already visited the room). When this action is executed, the hero gets into a location with a monster

Action name: move-to-monster


Your answer:
","**Explanation:**

Let's imagine our hero in the dungeon scenario. The hero wakes up and finds themselves in a room, wanting to move to an adjacent room where, unfortunately, there's a monster. Here's how we translate this scenario into a set of instructions, or a 'domain model,' in planning language.

The action we're talking about is called ""move-to-monster."" This means our hero is trying to move from one room (let’s call it Room A) to another room (Room B) where there is a monster. To ensure this action can happen, there are certain conditions that need to be met (these are called 'preconditions') and certain outcomes that will happen as a result of the action (these are called 'effects').

1. **Preconditions**:
   - **Connected Rooms**: Room A and Room B must be connected by a corridor. This makes sense because our hero can't magically jump from one room to another; there must be a path.
   - **Hero's Current Location**: The hero must currently be in Room A. If the hero isn't there, they can't start moving from it!
   - **Monster Presence**: Room B must have a monster. After all, the action is specifically about moving to a room with a monster.
   - **Room Integrity**: Room B should not be destroyed. A destroyed room might mean it’s collapsed or inaccessible, so it's logical our hero can’t move into it.
   - **Safety in Room A**: Room A should not have a trap. This makes sure our hero is safe and able to move without getting caught in a trap.
   - **Armed Hero**: The hero must be holding a sword. It’s a dangerous task to move into a room with a monster, so having a sword means the hero is prepared for a fight.

2. **Effects**:
   - **Hero's New Location**: After the action, the hero will be in Room B. They've successfully moved.
   - **Change in Room A's Status**: Room A becomes 'destroyed.' This might represent that the room is no longer safe or viable after the hero leaves, maybe because of the haste in escaping or some mechanism triggered by the departure.
   - **Update Hero's Old Location**: The fact that the hero was in Room A is no longer true, which is updated in our model to reflect the hero’s new position.

This planning helps organize our thoughts and actions logically, ensuring every step is clear and all necessary precautions are taken. Think of it like giving someone directions with a checklist: ""Before you go there, make sure this, this, and this are true, and once you do, this and this will happen."" This ensures everyone knows what to expect and how to prepare! 
Parameters:
1. ?from - cells
2. ?to - cells
3. ?s - swords

Preconditions:
```
(and
    (connected ?from ?to)
    (at-hero ?from)
    (has-monster ?to)
    (not (has-trap ?from))
    (holding ?s)
)
```

Effects:
```
(and
    (at-hero ?to)
    (is-destroyed ?from)
    (not (at-hero ?from))
)
```
","(:action move-to-monster
    :parameters (?from - cells ?to - cells ?s - swords)
    :precondition (and (connected ?from ?to) (at-hero ?from) (has-monster ?to) (not (is-destroyed ?to)) (not (has-trap ?from)) (holding ?s))
    :effect (and (at-hero ?to) (is-destroyed ?from) (not (at-hero ?from)))
)","remove (not (is-destroyed ?to)) from preconditions
"
rpggame,move-to-monster,0.7913336157798767,Hard Negative (Manipulated Action),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: The hero can **move** to an adjacent room (connected by a corridor) that has not been destroyed (i.e., the hero has not already visited the room). When this action is executed, the hero gets into a location with a monster

Action name: move-to-monster


Your answer:
","**Explanation:**

Let's imagine our hero in the dungeon scenario. The hero wakes up and finds themselves in a room, wanting to move to an adjacent room where, unfortunately, there's a monster. Here's how we translate this scenario into a set of instructions, or a 'domain model,' in planning language.

The action we're talking about is called ""move-to-monster."" This means our hero is trying to move from one room (let’s call it Room A) to another room (Room B) where there is a monster. To ensure this action can happen, there are certain conditions that need to be met (these are called 'preconditions') and certain outcomes that will happen as a result of the action (these are called 'effects').

1. **Preconditions**:
   - **Connected Rooms**: Room A and Room B must be connected by a corridor. This makes sense because our hero can't magically jump from one room to another; there must be a path.
   - **Hero's Current Location**: The hero must currently be in Room A. If the hero isn't there, they can't start moving from it!
   - **Monster Presence**: Room B must have a monster. After all, the action is specifically about moving to a room with a monster.
   - **Room Integrity**: Room B should not be destroyed. A destroyed room might mean it’s collapsed or inaccessible, so it's logical our hero can’t move into it.
   - **Safety in Room A**: Room A should not have a trap. This makes sure our hero is safe and able to move without getting caught in a trap.
   - **Armed Hero**: The hero must be holding a sword. It’s a dangerous task to move into a room with a monster, so having a sword means the hero is prepared for a fight.

2. **Effects**:
   - **Hero's New Location**: After the action, the hero will be in Room B. They've successfully moved.
   - **Change in Room A's Status**: Room A becomes 'destroyed.' This might represent that the room is no longer safe or viable after the hero leaves, maybe because of the haste in escaping or some mechanism triggered by the departure.
   - **Update Hero's Old Location**: The fact that the hero was in Room A is no longer true, which is updated in our model to reflect the hero’s new position.

This planning helps organize our thoughts and actions logically, ensuring every step is clear and all necessary precautions are taken. Think of it like giving someone directions with a checklist: ""Before you go there, make sure this, this, and this are true, and once you do, this and this will happen."" This ensures everyone knows what to expect and how to prepare! 
Parameters:
1. ?from - cells
2. ?to - cells
3. ?s - swords

Preconditions:
```
(and
    (has-trap ?from)
    (connected ?from ?to)
    (at-hero ?from)
    (has-monster ?to)
    (holding ?s)
)
```

Effects:
```
(and
    (at-hero ?to)
    (is-destroyed ?from)
    (not (at-hero ?from))
)
```
","(:action move-to-monster
    :parameters (?from - cells ?to - cells ?s - swords)
    :precondition (and (connected ?from ?to) (at-hero ?from) (has-monster ?to) (not (is-destroyed ?to)) (not (has-trap ?from)) (holding ?s))
    :effect (and (at-hero ?to) (is-destroyed ?from) (not (at-hero ?from)))
)","remove (not (is-destroyed ?to)) from preconditions
negate (not (has-trap ?from)) in preconditions
"
rpggame,move-to-monster,0.7913336157798767,Hard Negative (Manipulated Action),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: The hero can **move** to an adjacent room (connected by a corridor) that has not been destroyed (i.e., the hero has not already visited the room). When this action is executed, the hero gets into a location with a monster

Action name: move-to-monster


Your answer:
","**Explanation:**

Let's imagine our hero in the dungeon scenario. The hero wakes up and finds themselves in a room, wanting to move to an adjacent room where, unfortunately, there's a monster. Here's how we translate this scenario into a set of instructions, or a 'domain model,' in planning language.

The action we're talking about is called ""move-to-monster."" This means our hero is trying to move from one room (let’s call it Room A) to another room (Room B) where there is a monster. To ensure this action can happen, there are certain conditions that need to be met (these are called 'preconditions') and certain outcomes that will happen as a result of the action (these are called 'effects').

1. **Preconditions**:
   - **Connected Rooms**: Room A and Room B must be connected by a corridor. This makes sense because our hero can't magically jump from one room to another; there must be a path.
   - **Hero's Current Location**: The hero must currently be in Room A. If the hero isn't there, they can't start moving from it!
   - **Monster Presence**: Room B must have a monster. After all, the action is specifically about moving to a room with a monster.
   - **Room Integrity**: Room B should not be destroyed. A destroyed room might mean it’s collapsed or inaccessible, so it's logical our hero can’t move into it.
   - **Safety in Room A**: Room A should not have a trap. This makes sure our hero is safe and able to move without getting caught in a trap.
   - **Armed Hero**: The hero must be holding a sword. It’s a dangerous task to move into a room with a monster, so having a sword means the hero is prepared for a fight.

2. **Effects**:
   - **Hero's New Location**: After the action, the hero will be in Room B. They've successfully moved.
   - **Change in Room A's Status**: Room A becomes 'destroyed.' This might represent that the room is no longer safe or viable after the hero leaves, maybe because of the haste in escaping or some mechanism triggered by the departure.
   - **Update Hero's Old Location**: The fact that the hero was in Room A is no longer true, which is updated in our model to reflect the hero’s new position.

This planning helps organize our thoughts and actions logically, ensuring every step is clear and all necessary precautions are taken. Think of it like giving someone directions with a checklist: ""Before you go there, make sure this, this, and this are true, and once you do, this and this will happen."" This ensures everyone knows what to expect and how to prepare! 
Parameters:
1. ?from - cells
2. ?to - cells
3. ?s - swords

Preconditions:
```
(and
    (at-hero ?to)
    (connected ?from ?to)
    (has-monster ?to)
    (not (is-destroyed ?to))
    (not (has-trap ?from))
    (holding ?s)
)
```

Effects:
```
(and
    (at-hero ?from)
    (is-destroyed ?from)
    (not (at-hero ?from))
)
```
","(:action move-to-monster
    :parameters (?from - cells ?to - cells ?s - swords)
    :precondition (and (connected ?from ?to) (at-hero ?from) (has-monster ?to) (not (is-destroyed ?to)) (not (has-trap ?from)) (holding ?s))
    :effect (and (at-hero ?to) (is-destroyed ?from) (not (at-hero ?from)))
)","swap (at-hero ?from) with (at-hero ?to)
"
rpggame,move-to-monster,0.7913336157798767,Hard Negative (Manipulated Action),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: The hero can **move** to an adjacent room (connected by a corridor) that has not been destroyed (i.e., the hero has not already visited the room). When this action is executed, the hero gets into a location with a monster

Action name: move-to-monster


Your answer:
","**Explanation:**

Let's imagine our hero in the dungeon scenario. The hero wakes up and finds themselves in a room, wanting to move to an adjacent room where, unfortunately, there's a monster. Here's how we translate this scenario into a set of instructions, or a 'domain model,' in planning language.

The action we're talking about is called ""move-to-monster."" This means our hero is trying to move from one room (let’s call it Room A) to another room (Room B) where there is a monster. To ensure this action can happen, there are certain conditions that need to be met (these are called 'preconditions') and certain outcomes that will happen as a result of the action (these are called 'effects').

1. **Preconditions**:
   - **Connected Rooms**: Room A and Room B must be connected by a corridor. This makes sense because our hero can't magically jump from one room to another; there must be a path.
   - **Hero's Current Location**: The hero must currently be in Room A. If the hero isn't there, they can't start moving from it!
   - **Monster Presence**: Room B must have a monster. After all, the action is specifically about moving to a room with a monster.
   - **Room Integrity**: Room B should not be destroyed. A destroyed room might mean it’s collapsed or inaccessible, so it's logical our hero can’t move into it.
   - **Safety in Room A**: Room A should not have a trap. This makes sure our hero is safe and able to move without getting caught in a trap.
   - **Armed Hero**: The hero must be holding a sword. It’s a dangerous task to move into a room with a monster, so having a sword means the hero is prepared for a fight.

2. **Effects**:
   - **Hero's New Location**: After the action, the hero will be in Room B. They've successfully moved.
   - **Change in Room A's Status**: Room A becomes 'destroyed.' This might represent that the room is no longer safe or viable after the hero leaves, maybe because of the haste in escaping or some mechanism triggered by the departure.
   - **Update Hero's Old Location**: The fact that the hero was in Room A is no longer true, which is updated in our model to reflect the hero’s new position.

This planning helps organize our thoughts and actions logically, ensuring every step is clear and all necessary precautions are taken. Think of it like giving someone directions with a checklist: ""Before you go there, make sure this, this, and this are true, and once you do, this and this will happen."" This ensures everyone knows what to expect and how to prepare! 
Parameters:
1. ?from - cells
2. ?to - cells
3. ?s - swords

Preconditions:
```
(and
    (connected ?from ?to)
    (at-hero ?from)
    (has-monster ?to)
    (not (is-destroyed ?to))
    (not (has-trap ?from))
    (holding ?s)
)
```

Effects:
```
(and
    (is-destroyed ?from)
    (not (at-hero ?from))
)
```
","(:action move-to-monster
    :parameters (?from - cells ?to - cells ?s - swords)
    :precondition (and (connected ?from ?to) (at-hero ?from) (has-monster ?to) (not (is-destroyed ?to)) (not (has-trap ?from)) (holding ?s))
    :effect (and (at-hero ?to) (is-destroyed ?from) (not (at-hero ?from)))
)","remove (at-hero ?to) from effects
"
rpggame,move-to-monster,0.7913336157798767,Hard Negative (Manipulated Action),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: The hero can **move** to an adjacent room (connected by a corridor) that has not been destroyed (i.e., the hero has not already visited the room). When this action is executed, the hero gets into a location with a monster

Action name: move-to-monster


Your answer:
","**Explanation:**

Let's imagine our hero in the dungeon scenario. The hero wakes up and finds themselves in a room, wanting to move to an adjacent room where, unfortunately, there's a monster. Here's how we translate this scenario into a set of instructions, or a 'domain model,' in planning language.

The action we're talking about is called ""move-to-monster."" This means our hero is trying to move from one room (let’s call it Room A) to another room (Room B) where there is a monster. To ensure this action can happen, there are certain conditions that need to be met (these are called 'preconditions') and certain outcomes that will happen as a result of the action (these are called 'effects').

1. **Preconditions**:
   - **Connected Rooms**: Room A and Room B must be connected by a corridor. This makes sense because our hero can't magically jump from one room to another; there must be a path.
   - **Hero's Current Location**: The hero must currently be in Room A. If the hero isn't there, they can't start moving from it!
   - **Monster Presence**: Room B must have a monster. After all, the action is specifically about moving to a room with a monster.
   - **Room Integrity**: Room B should not be destroyed. A destroyed room might mean it’s collapsed or inaccessible, so it's logical our hero can’t move into it.
   - **Safety in Room A**: Room A should not have a trap. This makes sure our hero is safe and able to move without getting caught in a trap.
   - **Armed Hero**: The hero must be holding a sword. It’s a dangerous task to move into a room with a monster, so having a sword means the hero is prepared for a fight.

2. **Effects**:
   - **Hero's New Location**: After the action, the hero will be in Room B. They've successfully moved.
   - **Change in Room A's Status**: Room A becomes 'destroyed.' This might represent that the room is no longer safe or viable after the hero leaves, maybe because of the haste in escaping or some mechanism triggered by the departure.
   - **Update Hero's Old Location**: The fact that the hero was in Room A is no longer true, which is updated in our model to reflect the hero’s new position.

This planning helps organize our thoughts and actions logically, ensuring every step is clear and all necessary precautions are taken. Think of it like giving someone directions with a checklist: ""Before you go there, make sure this, this, and this are true, and once you do, this and this will happen."" This ensures everyone knows what to expect and how to prepare! 
Parameters:
1. ?from - cells
2. ?to - cells
3. ?s - swords

Preconditions:
```
(and
    (connected ?from ?to)
    (at-hero ?from)
    (not (is-destroyed ?to))
    (not (has-trap ?from))
    (holding ?s)
)
```

Effects:
```
(and
    (at-hero ?to)
    (is-destroyed ?from)
    (not (at-hero ?from))
)
```
","(:action move-to-monster
    :parameters (?from - cells ?to - cells ?s - swords)
    :precondition (and (connected ?from ?to) (at-hero ?from) (has-monster ?to) (not (is-destroyed ?to)) (not (has-trap ?from)) (holding ?s))
    :effect (and (at-hero ?to) (is-destroyed ?from) (not (at-hero ?from)))
)","remove (has-monster ?to) from preconditions
"
rpggame,destroy-sword,0.6134716868400574,Positive (Correct Match),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: **Destroy** the sword that the hero currently holds. However, this can have unpleasant effects if done in a room with a trap or a monster: it triggers the trap or invites the monster to eat the hero.

Action name: destroy-sword


Your answer:
","Parameters:
1. ?loc - cells
2. ?s - swords

Preconditions:
```
(and
    (at-hero ?loc)
    (holding ?s)
    (not (has-trap ?loc))
    (not (has-monster ?loc))
)
```

Effects:
```
(and
    (arm-free)
    (is-destroyed ?s)
    (not (holding ?s))
)
```
","(:action destroy-sword
    :parameters (?loc - cells ?s - swords)
    :precondition (and (at-hero ?loc) (holding ?s) (not (has-trap ?loc)) (not (has-monster ?loc)))
    :effect (and (arm-free) (is-destroyed ?s) (not (holding ?s)))
)",
rpggame,destroy-sword,0.6134716868400574,Positive (Correct Match),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: **Destroy** the sword that the hero currently holds. However, this can have unpleasant effects if done in a room with a trap or a monster: it triggers the trap or invites the monster to eat the hero.

Action name: destroy-sword


Your answer:

**Explanation:**

Imagine you're helping a hero navigate a dungeon full of monsters and traps, a bit like playing a video game. Now, the hero has a sword, but in this part of the game, the hero decides to destroy the sword. To understand why certain conditions are checked before the hero can destroy the sword safely, let's break it down using the action ""destroy-sword"" from the game's rules (or in technical terms, the PDDL action schema).

Firstly, the hero needs to be in the same location as the sword. This makes sense, right? You can't throw something away or break it if it's not with you. So, the condition `(at-hero ?loc)` ensures that the hero is at the right spot to perform the action.

Secondly, the hero must be holding the sword. It’s similar to needing both hands on a bat to swing it; here, the hero needs to have the sword in hand to destroy it, checked by `(holding ?s)`.

But why check for no traps or monsters in the room? Think of it like trying to do something delicate, like assembling a model airplane, in a room with a loose tiger. Not a great idea, right? If there’s a monster in the room, destroying the sword might make the hero vulnerable to attack. Similarly, a trap could be triggered by the noise or movement, putting the hero in danger. So, `(not (has-trap ?loc))` and `(not (has-monster ?loc))` ensure that the environment is safe for the hero to break the sword without turning the situation worse.

Now, what happens after the sword is destroyed? The effect is that the hero’s hand is now free (`arm-free`), the sword is confirmed as destroyed (`is-destroyed ?s`), and the hero is no longer holding it (`not (holding ?s)`). It’s like cleaning up after finishing a task: put away the tools, clean up the mess, and free up your hands for the next task.

In simple terms, this action schema is like a set of instructions to make sure the hero does something risky (like destroying a sword) safely and responsibly, without making the dangerous dungeon situation even worse.","Parameters:
1. ?loc - cells
2. ?s - swords

Preconditions:
```
(and
    (at-hero ?loc)
    (holding ?s)
    (not (has-trap ?loc))
    (not (has-monster ?loc))
)
```

Effects:
```
(and
    (arm-free)
    (is-destroyed ?s)
    (not (holding ?s))
)
```
","(:action destroy-sword
    :parameters (?loc - cells ?s - swords)
    :precondition (and (at-hero ?loc) (holding ?s) (not (has-trap ?loc)) (not (has-monster ?loc)))
    :effect (and (arm-free) (is-destroyed ?s) (not (holding ?s)))
)",
rpggame,destroy-sword,0.6022752523422241,Positive (Correct Match),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: **Destroy** the sword that the hero currently holds. However, this can have unpleasant effects if done in a room with a trap or a monster: it triggers the trap or invites the monster to eat the hero.

Action name: destroy-sword


Your answer:
","**Explanation:**

Imagine you're helping a hero navigate a dungeon full of monsters and traps, a bit like playing a video game. Now, the hero has a sword, but in this part of the game, the hero decides to destroy the sword. To understand why certain conditions are checked before the hero can destroy the sword safely, let's break it down using the action ""destroy-sword"" from the game's rules (or in technical terms, the PDDL action schema).

Firstly, the hero needs to be in the same location as the sword. This makes sense, right? You can't throw something away or break it if it's not with you. So, the condition `(at-hero ?loc)` ensures that the hero is at the right spot to perform the action.

Secondly, the hero must be holding the sword. It’s similar to needing both hands on a bat to swing it; here, the hero needs to have the sword in hand to destroy it, checked by `(holding ?s)`.

But why check for no traps or monsters in the room? Think of it like trying to do something delicate, like assembling a model airplane, in a room with a loose tiger. Not a great idea, right? If there’s a monster in the room, destroying the sword might make the hero vulnerable to attack. Similarly, a trap could be triggered by the noise or movement, putting the hero in danger. So, `(not (has-trap ?loc))` and `(not (has-monster ?loc))` ensure that the environment is safe for the hero to break the sword without turning the situation worse.

Now, what happens after the sword is destroyed? The effect is that the hero’s hand is now free (`arm-free`), the sword is confirmed as destroyed (`is-destroyed ?s`), and the hero is no longer holding it (`not (holding ?s)`). It’s like cleaning up after finishing a task: put away the tools, clean up the mess, and free up your hands for the next task.

In simple terms, this action schema is like a set of instructions to make sure the hero does something risky (like destroying a sword) safely and responsibly, without making the dangerous dungeon situation even worse.
Parameters:
1. ?loc - cells
2. ?s - swords

Preconditions:
```
(and
    (at-hero ?loc)
    (holding ?s)
    (not (has-trap ?loc))
    (not (has-monster ?loc))
)
```

Effects:
```
(and
    (arm-free)
    (is-destroyed ?s)
    (not (holding ?s))
)
```
","(:action destroy-sword
    :parameters (?loc - cells ?s - swords)
    :precondition (and (at-hero ?loc) (holding ?s) (not (has-trap ?loc)) (not (has-monster ?loc)))
    :effect (and (arm-free) (is-destroyed ?s) (not (holding ?s)))
)",
rpggame,destroy-sword,0.055100973695516586,Easy Negative (Inter-Domain Mismatch),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: **Destroy** the sword that the hero currently holds. However, this can have unpleasant effects if done in a room with a trap or a monster: it triggers the trap or invites the monster to eat the hero.

Action name: destroy-sword


Your answer:
","Parameters:
1. ?var0 - moveable
2. ?var1 - agent

Preconditions:
```
(equipped ?var0 ?var1)
```

Effects:
```
(and
    (inventory ?var0)
    (not (equipped ?var0 ?var1))
    (handsfree ?var1)
)
```
","(:action destroy-sword
    :parameters (?loc - cells ?s - swords)
    :precondition (and (at-hero ?loc) (holding ?s) (not (has-trap ?loc)) (not (has-monster ?loc)))
    :effect (and (arm-free) (is-destroyed ?s) (not (holding ?s)))
)",
rpggame,destroy-sword,0.25146690011024475,Easy Negative (Inter-Domain Mismatch),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: **Destroy** the sword that the hero currently holds. However, this can have unpleasant effects if done in a room with a trap or a monster: it triggers the trap or invites the monster to eat the hero.

Action name: destroy-sword


Your answer:
","Parameters:
1. ?var0 - moveable
2. ?var1 - agent
3. ?var2 - moveable

Preconditions:
```
(and
    (hypothetical ?var0)
    (is_log ?var2)
    (equipped ?var2 ?var1)
)
```

Effects:
```
(and
    (inventory ?var0)
    (is_planks ?var0)
    (handsfree ?var1)
    (not (equipped ?var2 ?var1))
    (not (hypothetical ?var0))
    (not (is_log ?var2))
)
```
","(:action destroy-sword
    :parameters (?loc - cells ?s - swords)
    :precondition (and (at-hero ?loc) (holding ?s) (not (has-trap ?loc)) (not (has-monster ?loc)))
    :effect (and (arm-free) (is-destroyed ?s) (not (holding ?s)))
)",
rpggame,destroy-sword,0.08231978118419647,Easy Negative (Inter-Domain Mismatch),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: **Destroy** the sword that the hero currently holds. However, this can have unpleasant effects if done in a room with a trap or a monster: it triggers the trap or invites the monster to eat the hero.

Action name: destroy-sword


Your answer:
","Parameters:
1. ?var0 - static
2. ?var1 - static

Preconditions:
```
(agent_at ?var1)
```

Effects:
```
(and
    (agent_at ?var0)
    (not (agent_at ?var1))
)
```
","(:action destroy-sword
    :parameters (?loc - cells ?s - swords)
    :precondition (and (at-hero ?loc) (holding ?s) (not (has-trap ?loc)) (not (has-monster ?loc)))
    :effect (and (arm-free) (is-destroyed ?s) (not (holding ?s)))
)",
rpggame,destroy-sword,0.16986292600631714,Easy Negative (Inter-Domain Mismatch),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: **Destroy** the sword that the hero currently holds. However, this can have unpleasant effects if done in a room with a trap or a monster: it triggers the trap or invites the monster to eat the hero.

Action name: destroy-sword


Your answer:
","Parameters:
1. ?var0 - moveable
2. ?var1 - agent

Preconditions:
```
(and
    (inventory ?var0)
    (handsfree ?var1)
)
```

Effects:
```
(and
    (equipped ?var0 ?var1)
    (not (handsfree ?var1))
    (not (inventory ?var0))
)
```
","(:action destroy-sword
    :parameters (?loc - cells ?s - swords)
    :precondition (and (at-hero ?loc) (holding ?s) (not (has-trap ?loc)) (not (has-monster ?loc)))
    :effect (and (arm-free) (is-destroyed ?s) (not (holding ?s)))
)",
rpggame,destroy-sword,0.10609016567468643,Easy Negative (Inter-Domain Mismatch),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: **Destroy** the sword that the hero currently holds. However, this can have unpleasant effects if done in a room with a trap or a monster: it triggers the trap or invites the monster to eat the hero.

Action name: destroy-sword


Your answer:
","Parameters:
1. ?var0 - moveable
2. ?var1 - static

Preconditions:
```
(and
    (at ?var0 ?var1)
    (agent_at ?var1)
)
```

Effects:
```
(and
    (inventory ?var0)
    (not (at ?var0 ?var1))
)
```
","(:action destroy-sword
    :parameters (?loc - cells ?s - swords)
    :precondition (and (at-hero ?loc) (holding ?s) (not (has-trap ?loc)) (not (has-monster ?loc)))
    :effect (and (arm-free) (is-destroyed ?s) (not (holding ?s)))
)",
rpggame,destroy-sword,0.055100973695516586,Easy Negative (Inter-Domain Mismatch),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: **Destroy** the sword that the hero currently holds. However, this can have unpleasant effects if done in a room with a trap or a monster: it triggers the trap or invites the monster to eat the hero.

Action name: destroy-sword


Your answer:

**Explanation:**

Imagine you're helping a hero navigate a dungeon full of monsters and traps, a bit like playing a video game. Now, the hero has a sword, but in this part of the game, the hero decides to destroy the sword. To understand why certain conditions are checked before the hero can destroy the sword safely, let's break it down using the action ""destroy-sword"" from the game's rules (or in technical terms, the PDDL action schema).

Firstly, the hero needs to be in the same location as the sword. This makes sense, right? You can't throw something away or break it if it's not with you. So, the condition `(at-hero ?loc)` ensures that the hero is at the right spot to perform the action.

Secondly, the hero must be holding the sword. It’s similar to needing both hands on a bat to swing it; here, the hero needs to have the sword in hand to destroy it, checked by `(holding ?s)`.

But why check for no traps or monsters in the room? Think of it like trying to do something delicate, like assembling a model airplane, in a room with a loose tiger. Not a great idea, right? If there’s a monster in the room, destroying the sword might make the hero vulnerable to attack. Similarly, a trap could be triggered by the noise or movement, putting the hero in danger. So, `(not (has-trap ?loc))` and `(not (has-monster ?loc))` ensure that the environment is safe for the hero to break the sword without turning the situation worse.

Now, what happens after the sword is destroyed? The effect is that the hero’s hand is now free (`arm-free`), the sword is confirmed as destroyed (`is-destroyed ?s`), and the hero is no longer holding it (`not (holding ?s)`). It’s like cleaning up after finishing a task: put away the tools, clean up the mess, and free up your hands for the next task.

In simple terms, this action schema is like a set of instructions to make sure the hero does something risky (like destroying a sword) safely and responsibly, without making the dangerous dungeon situation even worse.","Parameters:
1. ?var0 - moveable
2. ?var1 - agent

Preconditions:
```
(equipped ?var0 ?var1)
```

Effects:
```
(and
    (inventory ?var0)
    (not (equipped ?var0 ?var1))
    (handsfree ?var1)
)
```
","(:action destroy-sword
    :parameters (?loc - cells ?s - swords)
    :precondition (and (at-hero ?loc) (holding ?s) (not (has-trap ?loc)) (not (has-monster ?loc)))
    :effect (and (arm-free) (is-destroyed ?s) (not (holding ?s)))
)",
rpggame,destroy-sword,0.25146690011024475,Easy Negative (Inter-Domain Mismatch),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: **Destroy** the sword that the hero currently holds. However, this can have unpleasant effects if done in a room with a trap or a monster: it triggers the trap or invites the monster to eat the hero.

Action name: destroy-sword


Your answer:

**Explanation:**

Imagine you're helping a hero navigate a dungeon full of monsters and traps, a bit like playing a video game. Now, the hero has a sword, but in this part of the game, the hero decides to destroy the sword. To understand why certain conditions are checked before the hero can destroy the sword safely, let's break it down using the action ""destroy-sword"" from the game's rules (or in technical terms, the PDDL action schema).

Firstly, the hero needs to be in the same location as the sword. This makes sense, right? You can't throw something away or break it if it's not with you. So, the condition `(at-hero ?loc)` ensures that the hero is at the right spot to perform the action.

Secondly, the hero must be holding the sword. It’s similar to needing both hands on a bat to swing it; here, the hero needs to have the sword in hand to destroy it, checked by `(holding ?s)`.

But why check for no traps or monsters in the room? Think of it like trying to do something delicate, like assembling a model airplane, in a room with a loose tiger. Not a great idea, right? If there’s a monster in the room, destroying the sword might make the hero vulnerable to attack. Similarly, a trap could be triggered by the noise or movement, putting the hero in danger. So, `(not (has-trap ?loc))` and `(not (has-monster ?loc))` ensure that the environment is safe for the hero to break the sword without turning the situation worse.

Now, what happens after the sword is destroyed? The effect is that the hero’s hand is now free (`arm-free`), the sword is confirmed as destroyed (`is-destroyed ?s`), and the hero is no longer holding it (`not (holding ?s)`). It’s like cleaning up after finishing a task: put away the tools, clean up the mess, and free up your hands for the next task.

In simple terms, this action schema is like a set of instructions to make sure the hero does something risky (like destroying a sword) safely and responsibly, without making the dangerous dungeon situation even worse.","Parameters:
1. ?var0 - moveable
2. ?var1 - agent
3. ?var2 - moveable

Preconditions:
```
(and
    (hypothetical ?var0)
    (is_log ?var2)
    (equipped ?var2 ?var1)
)
```

Effects:
```
(and
    (inventory ?var0)
    (is_planks ?var0)
    (handsfree ?var1)
    (not (equipped ?var2 ?var1))
    (not (hypothetical ?var0))
    (not (is_log ?var2))
)
```
","(:action destroy-sword
    :parameters (?loc - cells ?s - swords)
    :precondition (and (at-hero ?loc) (holding ?s) (not (has-trap ?loc)) (not (has-monster ?loc)))
    :effect (and (arm-free) (is-destroyed ?s) (not (holding ?s)))
)",
rpggame,destroy-sword,0.08231978118419647,Easy Negative (Inter-Domain Mismatch),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: **Destroy** the sword that the hero currently holds. However, this can have unpleasant effects if done in a room with a trap or a monster: it triggers the trap or invites the monster to eat the hero.

Action name: destroy-sword


Your answer:

**Explanation:**

Imagine you're helping a hero navigate a dungeon full of monsters and traps, a bit like playing a video game. Now, the hero has a sword, but in this part of the game, the hero decides to destroy the sword. To understand why certain conditions are checked before the hero can destroy the sword safely, let's break it down using the action ""destroy-sword"" from the game's rules (or in technical terms, the PDDL action schema).

Firstly, the hero needs to be in the same location as the sword. This makes sense, right? You can't throw something away or break it if it's not with you. So, the condition `(at-hero ?loc)` ensures that the hero is at the right spot to perform the action.

Secondly, the hero must be holding the sword. It’s similar to needing both hands on a bat to swing it; here, the hero needs to have the sword in hand to destroy it, checked by `(holding ?s)`.

But why check for no traps or monsters in the room? Think of it like trying to do something delicate, like assembling a model airplane, in a room with a loose tiger. Not a great idea, right? If there’s a monster in the room, destroying the sword might make the hero vulnerable to attack. Similarly, a trap could be triggered by the noise or movement, putting the hero in danger. So, `(not (has-trap ?loc))` and `(not (has-monster ?loc))` ensure that the environment is safe for the hero to break the sword without turning the situation worse.

Now, what happens after the sword is destroyed? The effect is that the hero’s hand is now free (`arm-free`), the sword is confirmed as destroyed (`is-destroyed ?s`), and the hero is no longer holding it (`not (holding ?s)`). It’s like cleaning up after finishing a task: put away the tools, clean up the mess, and free up your hands for the next task.

In simple terms, this action schema is like a set of instructions to make sure the hero does something risky (like destroying a sword) safely and responsibly, without making the dangerous dungeon situation even worse.","Parameters:
1. ?var0 - static
2. ?var1 - static

Preconditions:
```
(agent_at ?var1)
```

Effects:
```
(and
    (agent_at ?var0)
    (not (agent_at ?var1))
)
```
","(:action destroy-sword
    :parameters (?loc - cells ?s - swords)
    :precondition (and (at-hero ?loc) (holding ?s) (not (has-trap ?loc)) (not (has-monster ?loc)))
    :effect (and (arm-free) (is-destroyed ?s) (not (holding ?s)))
)",
rpggame,destroy-sword,0.16986292600631714,Easy Negative (Inter-Domain Mismatch),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: **Destroy** the sword that the hero currently holds. However, this can have unpleasant effects if done in a room with a trap or a monster: it triggers the trap or invites the monster to eat the hero.

Action name: destroy-sword


Your answer:

**Explanation:**

Imagine you're helping a hero navigate a dungeon full of monsters and traps, a bit like playing a video game. Now, the hero has a sword, but in this part of the game, the hero decides to destroy the sword. To understand why certain conditions are checked before the hero can destroy the sword safely, let's break it down using the action ""destroy-sword"" from the game's rules (or in technical terms, the PDDL action schema).

Firstly, the hero needs to be in the same location as the sword. This makes sense, right? You can't throw something away or break it if it's not with you. So, the condition `(at-hero ?loc)` ensures that the hero is at the right spot to perform the action.

Secondly, the hero must be holding the sword. It’s similar to needing both hands on a bat to swing it; here, the hero needs to have the sword in hand to destroy it, checked by `(holding ?s)`.

But why check for no traps or monsters in the room? Think of it like trying to do something delicate, like assembling a model airplane, in a room with a loose tiger. Not a great idea, right? If there’s a monster in the room, destroying the sword might make the hero vulnerable to attack. Similarly, a trap could be triggered by the noise or movement, putting the hero in danger. So, `(not (has-trap ?loc))` and `(not (has-monster ?loc))` ensure that the environment is safe for the hero to break the sword without turning the situation worse.

Now, what happens after the sword is destroyed? The effect is that the hero’s hand is now free (`arm-free`), the sword is confirmed as destroyed (`is-destroyed ?s`), and the hero is no longer holding it (`not (holding ?s)`). It’s like cleaning up after finishing a task: put away the tools, clean up the mess, and free up your hands for the next task.

In simple terms, this action schema is like a set of instructions to make sure the hero does something risky (like destroying a sword) safely and responsibly, without making the dangerous dungeon situation even worse.","Parameters:
1. ?var0 - moveable
2. ?var1 - agent

Preconditions:
```
(and
    (inventory ?var0)
    (handsfree ?var1)
)
```

Effects:
```
(and
    (equipped ?var0 ?var1)
    (not (handsfree ?var1))
    (not (inventory ?var0))
)
```
","(:action destroy-sword
    :parameters (?loc - cells ?s - swords)
    :precondition (and (at-hero ?loc) (holding ?s) (not (has-trap ?loc)) (not (has-monster ?loc)))
    :effect (and (arm-free) (is-destroyed ?s) (not (holding ?s)))
)",
rpggame,destroy-sword,0.10609016567468643,Easy Negative (Inter-Domain Mismatch),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: **Destroy** the sword that the hero currently holds. However, this can have unpleasant effects if done in a room with a trap or a monster: it triggers the trap or invites the monster to eat the hero.

Action name: destroy-sword


Your answer:

**Explanation:**

Imagine you're helping a hero navigate a dungeon full of monsters and traps, a bit like playing a video game. Now, the hero has a sword, but in this part of the game, the hero decides to destroy the sword. To understand why certain conditions are checked before the hero can destroy the sword safely, let's break it down using the action ""destroy-sword"" from the game's rules (or in technical terms, the PDDL action schema).

Firstly, the hero needs to be in the same location as the sword. This makes sense, right? You can't throw something away or break it if it's not with you. So, the condition `(at-hero ?loc)` ensures that the hero is at the right spot to perform the action.

Secondly, the hero must be holding the sword. It’s similar to needing both hands on a bat to swing it; here, the hero needs to have the sword in hand to destroy it, checked by `(holding ?s)`.

But why check for no traps or monsters in the room? Think of it like trying to do something delicate, like assembling a model airplane, in a room with a loose tiger. Not a great idea, right? If there’s a monster in the room, destroying the sword might make the hero vulnerable to attack. Similarly, a trap could be triggered by the noise or movement, putting the hero in danger. So, `(not (has-trap ?loc))` and `(not (has-monster ?loc))` ensure that the environment is safe for the hero to break the sword without turning the situation worse.

Now, what happens after the sword is destroyed? The effect is that the hero’s hand is now free (`arm-free`), the sword is confirmed as destroyed (`is-destroyed ?s`), and the hero is no longer holding it (`not (holding ?s)`). It’s like cleaning up after finishing a task: put away the tools, clean up the mess, and free up your hands for the next task.

In simple terms, this action schema is like a set of instructions to make sure the hero does something risky (like destroying a sword) safely and responsibly, without making the dangerous dungeon situation even worse.","Parameters:
1. ?var0 - moveable
2. ?var1 - static

Preconditions:
```
(and
    (at ?var0 ?var1)
    (agent_at ?var1)
)
```

Effects:
```
(and
    (inventory ?var0)
    (not (at ?var0 ?var1))
)
```
","(:action destroy-sword
    :parameters (?loc - cells ?s - swords)
    :precondition (and (at-hero ?loc) (holding ?s) (not (has-trap ?loc)) (not (has-monster ?loc)))
    :effect (and (arm-free) (is-destroyed ?s) (not (holding ?s)))
)",
rpggame,destroy-sword,0.23983052372932434,Easy Negative (Inter-Domain Mismatch),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: **Destroy** the sword that the hero currently holds. However, this can have unpleasant effects if done in a room with a trap or a monster: it triggers the trap or invites the monster to eat the hero.

Action name: destroy-sword


Your answer:
","**Explanation:** Let's imagine you're playing a game similar to Minecraft. In this game, you have an action called ""recall,"" which lets you move an item you are holding directly into your backpack, making your hands empty again. To understand how this action works in the game's programming language (PDDL), let's break down the requirements and results of this action step-by-step.

1. **Precondition (What needs to be true before the action?):** 
   The precondition for the ""recall"" action is `(equipped ?var0 ?var1)`. This simply means that the item (`?var0`) must be currently held (equipped) by the player (`?var1`). Think of it as checking if you really have the axe in your hand before you can put it away.

2. **Effect (What happens after the action is done?):** 
   The effects of this action are several:
   - `(inventory ?var0)`: The item you were holding is now in your inventory. This is like saying, ""Okay, the axe is now in my backpack.""
   - `(not (equipped ?var0 ?var1))`: You are no longer holding the item. This ensures that the game knows the axe is no longer in your hand.
   - `(handsfree ?var1)`: Your hands are now empty. This part is like confirming that your hands are free, ready to grab or use something else.

By setting these preconditions and effects, the game ensures that the action of recalling an item (like teleporting your axe to your backpack) is logical and consistent with the game's rules. You need to be holding the item first to store it away, and after storing it, your hands should indeed be empty, ready for the next task. This keeps the game from getting confused, like trying to put away an axe you aren’t holding or ending up with an axe still in your hand after you've tried to store it.

In summary, the ""recall"" action in the game ensures everything happens in an orderly and expected manner, making your gameplay experience smooth and realistic within the game's world.
Parameters:
1. ?var0 - moveable
2. ?var1 - agent

Preconditions:
```
(equipped ?var0 ?var1)
```

Effects:
```
(and
    (inventory ?var0)
    (not (equipped ?var0 ?var1))
    (handsfree ?var1)
)
```
","(:action destroy-sword
    :parameters (?loc - cells ?s - swords)
    :precondition (and (at-hero ?loc) (holding ?s) (not (has-trap ?loc)) (not (has-monster ?loc)))
    :effect (and (arm-free) (is-destroyed ?s) (not (holding ?s)))
)",
rpggame,destroy-sword,0.24082696437835693,Easy Negative (Inter-Domain Mismatch),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: **Destroy** the sword that the hero currently holds. However, this can have unpleasant effects if done in a room with a trap or a monster: it triggers the trap or invites the monster to eat the hero.

Action name: destroy-sword


Your answer:
","**Explanation:**
Let's imagine that in the world of Minecraft, the agent (like a player) wants to craft planks from a log. Think of it like a cook needing specific ingredients and tools to make a meal.

In our PDDL model, the action named ""craft_plank"" follows a similar thought process. Here's how the description of the world leads to the rules in our model:

1. **Preconditions**: Before crafting, certain conditions must be met:
   - The agent must have a log that they are actually holding. This is represented by `(equipped ?var2 ?var1)` meaning the log (`?var2`) is equipped by the agent (`?var1`).
   - The log must be a real log, confirmed by `(is_log ?var2)`.
   - We also see `(hypothetical ?var0)`. Here, the planks that will be created are initially just an idea (hypothetical) before they become real.

2. **Effects**: After the action is performed, we expect changes:
   - The hypothetical planks become real, shown by `(inventory ?var0)` which means the planks (`?var0`) are now in the agent's inventory.
   - They are identified as planks with `(is_planks ?var0)`.
   - The agent's hands become free `(handsfree ?var1)` because the log they were holding is now transformed into planks.
   - The log is no longer equipped or identified as a log, shown by `(not (equipped ?var2 ?var1))` and `(not (is_log ?var2))`. This indicates the log has been used up.

This schema carefully makes sure that the agent can only craft planks if they have a log to start with, and it accounts for what happens to the log and the newly created planks. It's much like ensuring you have flour before you bake a cake, and then, once the cake is baked, you no longer have just flour but a delicious cake instead!
Parameters:
1. ?var0 - moveable
2. ?var1 - agent
3. ?var2 - moveable

Preconditions:
```
(and
    (hypothetical ?var0)
    (is_log ?var2)
    (equipped ?var2 ?var1)
)
```

Effects:
```
(and
    (inventory ?var0)
    (is_planks ?var0)
    (handsfree ?var1)
    (not (equipped ?var2 ?var1))
    (not (hypothetical ?var0))
    (not (is_log ?var2))
)
```
","(:action destroy-sword
    :parameters (?loc - cells ?s - swords)
    :precondition (and (at-hero ?loc) (holding ?s) (not (has-trap ?loc)) (not (has-monster ?loc)))
    :effect (and (arm-free) (is-destroyed ?s) (not (holding ?s)))
)",
rpggame,destroy-sword,0.32172030210494995,Easy Negative (Inter-Domain Mismatch),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: **Destroy** the sword that the hero currently holds. However, this can have unpleasant effects if done in a room with a trap or a monster: it triggers the trap or invites the monster to eat the hero.

Action name: destroy-sword


Your answer:
","**Explanation:**
Let's think about the action called ""move"" in a Minecraft-like game, where the goal is to get an agent (like a player) from one place to another. The PDDL action schema you're asking about is designed to handle this simple yet crucial task.

In the action schema, we have two parameters: `?var0` and `?var1`, which are both locations. You can think of `?var0` as the new location where the agent wants to go, and `?var1` as the current location where the agent is starting from.

**Preconditions:** The precondition for the ""move"" action is `(agent_at ?var1)`. This just means that before the agent can move, it must be verified that the agent is actually at the starting location (`?var1`). It’s similar to checking if you are really at home before you walk to the park.

**Effects:** After the agent moves, we need to update the agent's location in the game. This is what the effects in the action schema do:
- `(agent_at ?var0)` says that the agent is now at the new location (`?var0`), like saying, ""Now, I’m at the park.""
- `(not (agent_at ?var1))` means that the agent is no longer at the starting location (`?var1`), similar to saying, ""I'm no longer at home.""

This change in the agent's location is crucial for the game to keep track of where the agent is at any moment, which affects what the agent can interact with or what actions they can perform next. The effect ensures the game world is accurately updated following the agent's movement, and no confusion arises about where the agent is located. 

So, in simple terms, the action ""move"" in this game ensures that when the agent moves from one spot to another, the game correctly recognizes this change and updates the world accordingly.
Parameters:
1. ?var0 - static
2. ?var1 - static

Preconditions:
```
(agent_at ?var1)
```

Effects:
```
(and
    (agent_at ?var0)
    (not (agent_at ?var1))
)
```
","(:action destroy-sword
    :parameters (?loc - cells ?s - swords)
    :precondition (and (at-hero ?loc) (holding ?s) (not (has-trap ?loc)) (not (has-monster ?loc)))
    :effect (and (arm-free) (is-destroyed ?s) (not (holding ?s)))
)",
rpggame,destroy-sword,0.10805211216211319,Easy Negative (Inter-Domain Mismatch),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: **Destroy** the sword that the hero currently holds. However, this can have unpleasant effects if done in a room with a trap or a monster: it triggers the trap or invites the monster to eat the hero.

Action name: destroy-sword


Your answer:
","**Explanation:**
Let's think of the action called ""equip"" like someone getting ready to use something from their backpack. Imagine you're planning to paint a picture. First, you need to make sure you have a paintbrush in your backpack (this is similar to the ""inventory"" in our scenario). You also need to make sure your hand is free to hold the paintbrush (like the ""handsfree"" condition).

In the ""equip"" action in this Minecraft-like environment, two main things need to happen before the action can take place:
1. **The item is in the inventory** - This is just like making sure the paintbrush is in your backpack. The precondition `(inventory ?var0)` confirms that the item you want to use is actually with you, stored safely in your inventory.
2. **The agent's hands are free** - This means you aren't holding anything else. The precondition `(handsfree ?var1)` checks that your hands (or the agent's hands, in this case) are empty and ready to hold something new.

When you decide to ""equip"" or start using the item, several things change:
- **The item is now equipped** - This means the item is in your hand and ready to use, similar to how you would hold a paintbrush when you're ready to paint. This is shown by the effect `(equipped ?var0 ?var1)`.
- **Your hand is no longer free** - Just like when you pick up the paintbrush, your hand isn't empty anymore. This is why the effect includes `(not (handsfree ?var1))`.
- **The item is no longer just in the inventory** - Since you're now holding the item, it's not just sitting in your backpack. This change is represented by `(not (inventory ?var0))`.

These changes ensure that the action of equipping something is logical and makes sense in the environment, just like how you'd logically take a paintbrush out of your backpack to use it.
Parameters:
1. ?var0 - moveable
2. ?var1 - agent

Preconditions:
```
(and
    (inventory ?var0)
    (handsfree ?var1)
)
```

Effects:
```
(and
    (equipped ?var0 ?var1)
    (not (handsfree ?var1))
    (not (inventory ?var0))
)
```
","(:action destroy-sword
    :parameters (?loc - cells ?s - swords)
    :precondition (and (at-hero ?loc) (holding ?s) (not (has-trap ?loc)) (not (has-monster ?loc)))
    :effect (and (arm-free) (is-destroyed ?s) (not (holding ?s)))
)",
rpggame,destroy-sword,0.16423234343528748,Easy Negative (Inter-Domain Mismatch),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: **Destroy** the sword that the hero currently holds. However, this can have unpleasant effects if done in a room with a trap or a monster: it triggers the trap or invites the monster to eat the hero.

Action name: destroy-sword


Your answer:
","**Explanation:**

Let's imagine you're in a simplified game environment similar to Minecraft, where your goal is to gather resources like fruits or tools. In this game, to collect an item, you'd first need to be at the same location as the item. This ensures you can actually reach it to pick it up.

So, in the PDDL (which is a planning language used to describe tasks and environments in a structured way), the `pick` action is defined to help you collect these items. Here's why the action is set up this way:

1. **Preconditions (the must-haves before acting)**:
   - `(at ?var0 ?var1)`: This means the item (`?var0`) must be at your current location (`?var1`). Think of it as seeing a piece of fruit right at your feet. You need to be where the fruit is to pick it up.
   - `(agent_at ?var1)`: This specifies that you (the agent) must also be at that specific location (`?var1`). Just like in real life, you can't pick up something if you're not right there with it.

2. **Effects (what happens after the action)**:
   - `(inventory ?var0)`: Once you pick up the item, it moves into your inventory. This is like putting the fruit into your backpack.
   - `(not (at ?var0 ?var1))`: This indicates that the item is no longer lying on the ground at that location. It’s like saying, now that the fruit is in your backpack, it's not on the ground anymore.

This setup ensures that you can only pick up items that are within your immediate reach and that collecting an item changes its status from being 'on the ground' to being 'in your inventory'. It's a simple but effective way to manage resources in the game, making sure everything happens in a logical and realistic manner.
Parameters:
1. ?var0 - moveable
2. ?var1 - static

Preconditions:
```
(and
    (at ?var0 ?var1)
    (agent_at ?var1)
)
```

Effects:
```
(and
    (inventory ?var0)
    (not (at ?var0 ?var1))
)
```
","(:action destroy-sword
    :parameters (?loc - cells ?s - swords)
    :precondition (and (at-hero ?loc) (holding ?s) (not (has-trap ?loc)) (not (has-monster ?loc)))
    :effect (and (arm-free) (is-destroyed ?s) (not (holding ?s)))
)",
rpggame,destroy-sword,0.5180956125259399,Semi-Hard Negative (Intra-Domain Mismatch),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: **Destroy** the sword that the hero currently holds. However, this can have unpleasant effects if done in a room with a trap or a monster: it triggers the trap or invites the monster to eat the hero.

Action name: destroy-sword


Your answer:
","Parameters:
1. ?from - cells
2. ?to - cells

Preconditions:
```
(and
    (connected ?from ?to)
    (at-hero ?from)
    (not (is-destroyed ?to))
    (not (has-trap ?from))
    (has-trap ?to)
    (arm-free)
)
```

Effects:
```
(and
    (at-hero ?to)
    (is-destroyed ?from)
    (not (at-hero ?from))
)
```
","(:action destroy-sword
    :parameters (?loc - cells ?s - swords)
    :precondition (and (at-hero ?loc) (holding ?s) (not (has-trap ?loc)) (not (has-monster ?loc)))
    :effect (and (arm-free) (is-destroyed ?s) (not (holding ?s)))
)",
rpggame,destroy-sword,0.6636556386947632,Semi-Hard Negative (Intra-Domain Mismatch),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: **Destroy** the sword that the hero currently holds. However, this can have unpleasant effects if done in a room with a trap or a monster: it triggers the trap or invites the monster to eat the hero.

Action name: destroy-sword


Your answer:
","Parameters:
1. ?from - cells
2. ?to - cells

Preconditions:
```
(and
    (connected ?from ?to)
    (at-hero ?from)
    (not (has-trap ?from))
    (not (is-destroyed ?to))
    (not (has-trap ?to))
    (not (has-monster ?to))
)
```

Effects:
```
(and
    (at-hero ?to)
    (is-destroyed ?from)
    (not (at-hero ?from))
)
```
","(:action destroy-sword
    :parameters (?loc - cells ?s - swords)
    :precondition (and (at-hero ?loc) (holding ?s) (not (has-trap ?loc)) (not (has-monster ?loc)))
    :effect (and (arm-free) (is-destroyed ?s) (not (holding ?s)))
)",
rpggame,destroy-sword,0.3123786151409149,Semi-Hard Negative (Intra-Domain Mismatch),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: **Destroy** the sword that the hero currently holds. However, this can have unpleasant effects if done in a room with a trap or a monster: it triggers the trap or invites the monster to eat the hero.

Action name: destroy-sword


Your answer:
","Parameters:
1. ?loc - cells
2. ?s - swords

Preconditions:
```
(and
    (at-hero ?loc)
    (at-sword ?s ?loc)
    (arm-free)
)
```

Effects:
```
(and
    (holding ?s)
    (not (at-sword ?s ?loc))
    (not (arm-free))
)
```
","(:action destroy-sword
    :parameters (?loc - cells ?s - swords)
    :precondition (and (at-hero ?loc) (holding ?s) (not (has-trap ?loc)) (not (has-monster ?loc)))
    :effect (and (arm-free) (is-destroyed ?s) (not (holding ?s)))
)",
rpggame,destroy-sword,0.7996939420700073,Semi-Hard Negative (Intra-Domain Mismatch),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: **Destroy** the sword that the hero currently holds. However, this can have unpleasant effects if done in a room with a trap or a monster: it triggers the trap or invites the monster to eat the hero.

Action name: destroy-sword


Your answer:
","Parameters:
1. ?loc - cells

Preconditions:
```
(and
    (at-hero ?loc)
    (arm-free)
    (has-trap ?loc)
)
```

Effects:
```
(and
    (trap-disarmed ?loc)
    (not (has-trap ?loc))
)
```
","(:action destroy-sword
    :parameters (?loc - cells ?s - swords)
    :precondition (and (at-hero ?loc) (holding ?s) (not (has-trap ?loc)) (not (has-monster ?loc)))
    :effect (and (arm-free) (is-destroyed ?s) (not (holding ?s)))
)",
rpggame,destroy-sword,0.8527721166610718,Semi-Hard Negative (Intra-Domain Mismatch),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: **Destroy** the sword that the hero currently holds. However, this can have unpleasant effects if done in a room with a trap or a monster: it triggers the trap or invites the monster to eat the hero.

Action name: destroy-sword


Your answer:
","Parameters:
1. ?from - cells
2. ?to - cells
3. ?s - swords

Preconditions:
```
(and
    (connected ?from ?to)
    (at-hero ?from)
    (has-monster ?to)
    (not (is-destroyed ?to))
    (not (has-trap ?from))
    (holding ?s)
)
```

Effects:
```
(and
    (at-hero ?to)
    (is-destroyed ?from)
    (not (at-hero ?from))
)
```
","(:action destroy-sword
    :parameters (?loc - cells ?s - swords)
    :precondition (and (at-hero ?loc) (holding ?s) (not (has-trap ?loc)) (not (has-monster ?loc)))
    :effect (and (arm-free) (is-destroyed ?s) (not (holding ?s)))
)",
rpggame,destroy-sword,0.5180956125259399,Semi-Hard Negative (Intra-Domain Mismatch),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: **Destroy** the sword that the hero currently holds. However, this can have unpleasant effects if done in a room with a trap or a monster: it triggers the trap or invites the monster to eat the hero.

Action name: destroy-sword


Your answer:

**Explanation:**

Imagine you're helping a hero navigate a dungeon full of monsters and traps, a bit like playing a video game. Now, the hero has a sword, but in this part of the game, the hero decides to destroy the sword. To understand why certain conditions are checked before the hero can destroy the sword safely, let's break it down using the action ""destroy-sword"" from the game's rules (or in technical terms, the PDDL action schema).

Firstly, the hero needs to be in the same location as the sword. This makes sense, right? You can't throw something away or break it if it's not with you. So, the condition `(at-hero ?loc)` ensures that the hero is at the right spot to perform the action.

Secondly, the hero must be holding the sword. It’s similar to needing both hands on a bat to swing it; here, the hero needs to have the sword in hand to destroy it, checked by `(holding ?s)`.

But why check for no traps or monsters in the room? Think of it like trying to do something delicate, like assembling a model airplane, in a room with a loose tiger. Not a great idea, right? If there’s a monster in the room, destroying the sword might make the hero vulnerable to attack. Similarly, a trap could be triggered by the noise or movement, putting the hero in danger. So, `(not (has-trap ?loc))` and `(not (has-monster ?loc))` ensure that the environment is safe for the hero to break the sword without turning the situation worse.

Now, what happens after the sword is destroyed? The effect is that the hero’s hand is now free (`arm-free`), the sword is confirmed as destroyed (`is-destroyed ?s`), and the hero is no longer holding it (`not (holding ?s)`). It’s like cleaning up after finishing a task: put away the tools, clean up the mess, and free up your hands for the next task.

In simple terms, this action schema is like a set of instructions to make sure the hero does something risky (like destroying a sword) safely and responsibly, without making the dangerous dungeon situation even worse.","Parameters:
1. ?from - cells
2. ?to - cells

Preconditions:
```
(and
    (connected ?from ?to)
    (at-hero ?from)
    (not (is-destroyed ?to))
    (not (has-trap ?from))
    (has-trap ?to)
    (arm-free)
)
```

Effects:
```
(and
    (at-hero ?to)
    (is-destroyed ?from)
    (not (at-hero ?from))
)
```
","(:action destroy-sword
    :parameters (?loc - cells ?s - swords)
    :precondition (and (at-hero ?loc) (holding ?s) (not (has-trap ?loc)) (not (has-monster ?loc)))
    :effect (and (arm-free) (is-destroyed ?s) (not (holding ?s)))
)",
rpggame,destroy-sword,0.6636556386947632,Semi-Hard Negative (Intra-Domain Mismatch),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: **Destroy** the sword that the hero currently holds. However, this can have unpleasant effects if done in a room with a trap or a monster: it triggers the trap or invites the monster to eat the hero.

Action name: destroy-sword


Your answer:

**Explanation:**

Imagine you're helping a hero navigate a dungeon full of monsters and traps, a bit like playing a video game. Now, the hero has a sword, but in this part of the game, the hero decides to destroy the sword. To understand why certain conditions are checked before the hero can destroy the sword safely, let's break it down using the action ""destroy-sword"" from the game's rules (or in technical terms, the PDDL action schema).

Firstly, the hero needs to be in the same location as the sword. This makes sense, right? You can't throw something away or break it if it's not with you. So, the condition `(at-hero ?loc)` ensures that the hero is at the right spot to perform the action.

Secondly, the hero must be holding the sword. It’s similar to needing both hands on a bat to swing it; here, the hero needs to have the sword in hand to destroy it, checked by `(holding ?s)`.

But why check for no traps or monsters in the room? Think of it like trying to do something delicate, like assembling a model airplane, in a room with a loose tiger. Not a great idea, right? If there’s a monster in the room, destroying the sword might make the hero vulnerable to attack. Similarly, a trap could be triggered by the noise or movement, putting the hero in danger. So, `(not (has-trap ?loc))` and `(not (has-monster ?loc))` ensure that the environment is safe for the hero to break the sword without turning the situation worse.

Now, what happens after the sword is destroyed? The effect is that the hero’s hand is now free (`arm-free`), the sword is confirmed as destroyed (`is-destroyed ?s`), and the hero is no longer holding it (`not (holding ?s)`). It’s like cleaning up after finishing a task: put away the tools, clean up the mess, and free up your hands for the next task.

In simple terms, this action schema is like a set of instructions to make sure the hero does something risky (like destroying a sword) safely and responsibly, without making the dangerous dungeon situation even worse.","Parameters:
1. ?from - cells
2. ?to - cells

Preconditions:
```
(and
    (connected ?from ?to)
    (at-hero ?from)
    (not (has-trap ?from))
    (not (is-destroyed ?to))
    (not (has-trap ?to))
    (not (has-monster ?to))
)
```

Effects:
```
(and
    (at-hero ?to)
    (is-destroyed ?from)
    (not (at-hero ?from))
)
```
","(:action destroy-sword
    :parameters (?loc - cells ?s - swords)
    :precondition (and (at-hero ?loc) (holding ?s) (not (has-trap ?loc)) (not (has-monster ?loc)))
    :effect (and (arm-free) (is-destroyed ?s) (not (holding ?s)))
)",
rpggame,destroy-sword,0.3123786151409149,Semi-Hard Negative (Intra-Domain Mismatch),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: **Destroy** the sword that the hero currently holds. However, this can have unpleasant effects if done in a room with a trap or a monster: it triggers the trap or invites the monster to eat the hero.

Action name: destroy-sword


Your answer:

**Explanation:**

Imagine you're helping a hero navigate a dungeon full of monsters and traps, a bit like playing a video game. Now, the hero has a sword, but in this part of the game, the hero decides to destroy the sword. To understand why certain conditions are checked before the hero can destroy the sword safely, let's break it down using the action ""destroy-sword"" from the game's rules (or in technical terms, the PDDL action schema).

Firstly, the hero needs to be in the same location as the sword. This makes sense, right? You can't throw something away or break it if it's not with you. So, the condition `(at-hero ?loc)` ensures that the hero is at the right spot to perform the action.

Secondly, the hero must be holding the sword. It’s similar to needing both hands on a bat to swing it; here, the hero needs to have the sword in hand to destroy it, checked by `(holding ?s)`.

But why check for no traps or monsters in the room? Think of it like trying to do something delicate, like assembling a model airplane, in a room with a loose tiger. Not a great idea, right? If there’s a monster in the room, destroying the sword might make the hero vulnerable to attack. Similarly, a trap could be triggered by the noise or movement, putting the hero in danger. So, `(not (has-trap ?loc))` and `(not (has-monster ?loc))` ensure that the environment is safe for the hero to break the sword without turning the situation worse.

Now, what happens after the sword is destroyed? The effect is that the hero’s hand is now free (`arm-free`), the sword is confirmed as destroyed (`is-destroyed ?s`), and the hero is no longer holding it (`not (holding ?s)`). It’s like cleaning up after finishing a task: put away the tools, clean up the mess, and free up your hands for the next task.

In simple terms, this action schema is like a set of instructions to make sure the hero does something risky (like destroying a sword) safely and responsibly, without making the dangerous dungeon situation even worse.","Parameters:
1. ?loc - cells
2. ?s - swords

Preconditions:
```
(and
    (at-hero ?loc)
    (at-sword ?s ?loc)
    (arm-free)
)
```

Effects:
```
(and
    (holding ?s)
    (not (at-sword ?s ?loc))
    (not (arm-free))
)
```
","(:action destroy-sword
    :parameters (?loc - cells ?s - swords)
    :precondition (and (at-hero ?loc) (holding ?s) (not (has-trap ?loc)) (not (has-monster ?loc)))
    :effect (and (arm-free) (is-destroyed ?s) (not (holding ?s)))
)",
rpggame,destroy-sword,0.7996939420700073,Semi-Hard Negative (Intra-Domain Mismatch),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: **Destroy** the sword that the hero currently holds. However, this can have unpleasant effects if done in a room with a trap or a monster: it triggers the trap or invites the monster to eat the hero.

Action name: destroy-sword


Your answer:

**Explanation:**

Imagine you're helping a hero navigate a dungeon full of monsters and traps, a bit like playing a video game. Now, the hero has a sword, but in this part of the game, the hero decides to destroy the sword. To understand why certain conditions are checked before the hero can destroy the sword safely, let's break it down using the action ""destroy-sword"" from the game's rules (or in technical terms, the PDDL action schema).

Firstly, the hero needs to be in the same location as the sword. This makes sense, right? You can't throw something away or break it if it's not with you. So, the condition `(at-hero ?loc)` ensures that the hero is at the right spot to perform the action.

Secondly, the hero must be holding the sword. It’s similar to needing both hands on a bat to swing it; here, the hero needs to have the sword in hand to destroy it, checked by `(holding ?s)`.

But why check for no traps or monsters in the room? Think of it like trying to do something delicate, like assembling a model airplane, in a room with a loose tiger. Not a great idea, right? If there’s a monster in the room, destroying the sword might make the hero vulnerable to attack. Similarly, a trap could be triggered by the noise or movement, putting the hero in danger. So, `(not (has-trap ?loc))` and `(not (has-monster ?loc))` ensure that the environment is safe for the hero to break the sword without turning the situation worse.

Now, what happens after the sword is destroyed? The effect is that the hero’s hand is now free (`arm-free`), the sword is confirmed as destroyed (`is-destroyed ?s`), and the hero is no longer holding it (`not (holding ?s)`). It’s like cleaning up after finishing a task: put away the tools, clean up the mess, and free up your hands for the next task.

In simple terms, this action schema is like a set of instructions to make sure the hero does something risky (like destroying a sword) safely and responsibly, without making the dangerous dungeon situation even worse.","Parameters:
1. ?loc - cells

Preconditions:
```
(and
    (at-hero ?loc)
    (arm-free)
    (has-trap ?loc)
)
```

Effects:
```
(and
    (trap-disarmed ?loc)
    (not (has-trap ?loc))
)
```
","(:action destroy-sword
    :parameters (?loc - cells ?s - swords)
    :precondition (and (at-hero ?loc) (holding ?s) (not (has-trap ?loc)) (not (has-monster ?loc)))
    :effect (and (arm-free) (is-destroyed ?s) (not (holding ?s)))
)",
rpggame,destroy-sword,0.8527721166610718,Semi-Hard Negative (Intra-Domain Mismatch),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: **Destroy** the sword that the hero currently holds. However, this can have unpleasant effects if done in a room with a trap or a monster: it triggers the trap or invites the monster to eat the hero.

Action name: destroy-sword


Your answer:

**Explanation:**

Imagine you're helping a hero navigate a dungeon full of monsters and traps, a bit like playing a video game. Now, the hero has a sword, but in this part of the game, the hero decides to destroy the sword. To understand why certain conditions are checked before the hero can destroy the sword safely, let's break it down using the action ""destroy-sword"" from the game's rules (or in technical terms, the PDDL action schema).

Firstly, the hero needs to be in the same location as the sword. This makes sense, right? You can't throw something away or break it if it's not with you. So, the condition `(at-hero ?loc)` ensures that the hero is at the right spot to perform the action.

Secondly, the hero must be holding the sword. It’s similar to needing both hands on a bat to swing it; here, the hero needs to have the sword in hand to destroy it, checked by `(holding ?s)`.

But why check for no traps or monsters in the room? Think of it like trying to do something delicate, like assembling a model airplane, in a room with a loose tiger. Not a great idea, right? If there’s a monster in the room, destroying the sword might make the hero vulnerable to attack. Similarly, a trap could be triggered by the noise or movement, putting the hero in danger. So, `(not (has-trap ?loc))` and `(not (has-monster ?loc))` ensure that the environment is safe for the hero to break the sword without turning the situation worse.

Now, what happens after the sword is destroyed? The effect is that the hero’s hand is now free (`arm-free`), the sword is confirmed as destroyed (`is-destroyed ?s`), and the hero is no longer holding it (`not (holding ?s)`). It’s like cleaning up after finishing a task: put away the tools, clean up the mess, and free up your hands for the next task.

In simple terms, this action schema is like a set of instructions to make sure the hero does something risky (like destroying a sword) safely and responsibly, without making the dangerous dungeon situation even worse.","Parameters:
1. ?from - cells
2. ?to - cells
3. ?s - swords

Preconditions:
```
(and
    (connected ?from ?to)
    (at-hero ?from)
    (has-monster ?to)
    (not (is-destroyed ?to))
    (not (has-trap ?from))
    (holding ?s)
)
```

Effects:
```
(and
    (at-hero ?to)
    (is-destroyed ?from)
    (not (at-hero ?from))
)
```
","(:action destroy-sword
    :parameters (?loc - cells ?s - swords)
    :precondition (and (at-hero ?loc) (holding ?s) (not (has-trap ?loc)) (not (has-monster ?loc)))
    :effect (and (arm-free) (is-destroyed ?s) (not (holding ?s)))
)",
rpggame,destroy-sword,0.7892916202545166,Semi-Hard Negative (Intra-Domain Mismatch),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: **Destroy** the sword that the hero currently holds. However, this can have unpleasant effects if done in a room with a trap or a monster: it triggers the trap or invites the monster to eat the hero.

Action name: destroy-sword


Your answer:
","**Explanation:**

Imagine you're guiding a hero who just woke up in a mysterious dungeon. Each room can have different things: some are empty, others have monsters, some have traps, and a few might have swords. There's also a special room with an exit—our hero's goal.

Now, let's talk about the action called **move-to-trap**. This action involves our hero moving from one room (we'll call it ""Room A"") to another room (""Room B""), where, unfortunately, there's a trap waiting. Here's why each part of the plan (or action schema) makes sense:

1. **Connected Rooms**: Our hero can only move to a room directly connected to the one they're currently in. This is like being in your house and only being able to walk into rooms that have doors leading from where you are now.

2. **Hero's Current Location**: The hero must start in Room A to move to Room B. You can't move from a place if you're not actually there, right?

3. **Room B Not Destroyed**: The room our hero is moving to mustn't be already destroyed (or in ruins). It's like making sure the bridge you want to cross hasn't collapsed.

4. **Room A Doesn't Have a Trap**: It’s safer if the room our hero is leaving doesn't have a trap. Imagine trying to leave a room with a trap; it could activate and cause trouble!

5. **Room B Has a Trap**: Since the action is called **move-to-trap**, it specifically involves moving to a room with a trap, almost like knowing there's a puddle ahead but stepping into it anyway because it's the only path forward.

6. **Hero's Arm is Free**: This indicates that the hero isn’t holding anything like a sword. It’s important because handling traps might require free hands—think about needing your hands free to disarm or avoid a trap carefully.

When our hero completes this action, several things happen:
- **Hero is now in Room B**: Just like when you walk into another room, you’re no longer in the first room.
- **Room A is destroyed**: This could mean the hero leaves it in a way that no one can follow—maybe they close a heavy door that locks automatically.
- **Hero is no longer in Room A**: It confirms that the hero has completely left Room A.

This action is designed for specific situations in the dungeon where the hero might need to move strategically, even into risky areas, to navigate through the dungeon and eventually find the exit.
Parameters:
1. ?from - cells
2. ?to - cells

Preconditions:
```
(and
    (connected ?from ?to)
    (at-hero ?from)
    (not (is-destroyed ?to))
    (not (has-trap ?from))
    (has-trap ?to)
    (arm-free)
)
```

Effects:
```
(and
    (at-hero ?to)
    (is-destroyed ?from)
    (not (at-hero ?from))
)
```
","(:action destroy-sword
    :parameters (?loc - cells ?s - swords)
    :precondition (and (at-hero ?loc) (holding ?s) (not (has-trap ?loc)) (not (has-monster ?loc)))
    :effect (and (arm-free) (is-destroyed ?s) (not (holding ?s)))
)",
rpggame,destroy-sword,0.7861344814300537,Semi-Hard Negative (Intra-Domain Mismatch),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: **Destroy** the sword that the hero currently holds. However, this can have unpleasant effects if done in a room with a trap or a monster: it triggers the trap or invites the monster to eat the hero.

Action name: destroy-sword


Your answer:
","**Explanation:**

Imagine our hero in a big, scary dungeon, just like a character from a fairy tale or a video game. The dungeon has several rooms, and some rooms are safe while others have monsters or traps. The hero's goal is to escape from this dungeon, moving from one room to another until he finds the exit.

Now, let's talk about the action called ""move"" that our hero can take. The action ""move"" lets the hero go from one room (we'll call this the ""current room"") to a connected room (let's call this the ""next room""). Think of the dungeon like a big house with many doors connecting the rooms; the hero can only move through a door if it’s open and the room on the other side is safe.

In the PDDL (a kind of programming language for planning what actions to take), the action ""move"" needs some conditions to be met before the hero can move:
1. **The rooms must be connected:** Just like you can't walk through a wall at home, the hero can only move to a room if there's a direct connection (like a doorway or a corridor).
2. **The hero must be in the current room:** The hero can only leave a room if he's actually in it.
3. **The current room shouldn’t have a trap that could hurt him.**
4. **The next room shouldn’t be destroyed:** The hero can't go into a room if it’s already been collapsed or destroyed (maybe from a previous adventure!).
5. **The next room shouldn’t have a trap or a monster:** This makes sure our hero doesn’t walk into new danger.

When the hero moves:
- **He is now in the next room:** Just like if you walk to another room in your house, you're then in that new room.
- **The room he left gets destroyed:** This might sound strange, but imagine if every time he left a room, the door magically closed and locked forever, so he can’t go back the same way.
- **He is no longer in the current room:** This is just confirming that he has moved on from the previous room.

These rules help our hero make smart moves through the dungeon, avoiding danger and making progress towards escape. This way of setting up the hero's actions makes sure he can navigate through the dungeon safely and eventually find his way out.
Parameters:
1. ?from - cells
2. ?to - cells

Preconditions:
```
(and
    (connected ?from ?to)
    (at-hero ?from)
    (not (has-trap ?from))
    (not (is-destroyed ?to))
    (not (has-trap ?to))
    (not (has-monster ?to))
)
```

Effects:
```
(and
    (at-hero ?to)
    (is-destroyed ?from)
    (not (at-hero ?from))
)
```
","(:action destroy-sword
    :parameters (?loc - cells ?s - swords)
    :precondition (and (at-hero ?loc) (holding ?s) (not (has-trap ?loc)) (not (has-monster ?loc)))
    :effect (and (arm-free) (is-destroyed ?s) (not (holding ?s)))
)",
rpggame,destroy-sword,0.4962548613548279,Semi-Hard Negative (Intra-Domain Mismatch),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: **Destroy** the sword that the hero currently holds. However, this can have unpleasant effects if done in a room with a trap or a monster: it triggers the trap or invites the monster to eat the hero.

Action name: destroy-sword


Your answer:
","**Explanation:**

Imagine you're helping a hero navigate through a tricky dungeon filled with different challenges. The hero's objective is to escape, but along the way, they might find useful items like swords that can help protect against monsters.

In our scenario, the action of picking up a sword is crucial. Let's think of it like this: if you enter a room and see a sword on the floor while your hands are free, you can pick it up. The action schema in PDDL, which is a way to represent planning problems, explains this in a structured format.

The preconditions for our action ""pick-sword"" are:
1. **The hero must be in the same room as the sword** (represented as `(at-hero ?loc)` and `(at-sword ?s ?loc)`). This makes sense because you can't pick up something that's not in the same room as you.
2. **The hero's hand must be free** (`(arm-free)`). Just like you can't hold two grocery bags in one hand easily, our hero needs a free hand to pick up the sword.

The effects after the hero picks up the sword are:
1. **The hero is now holding the sword** (`(holding ?s)`). This indicates that the hero has successfully picked up the sword.
2. **The sword is no longer in its original place** (`(not (at-sword ?s ?loc))`). Just like if you take an apple from a basket, the apple isn't in the basket anymore.
3. **The hero's hand is no longer free** (`(not (arm-free))`). Holding the sword means the hand that was free is now occupied.

This action schema is a simple way to model the interaction between the hero and the sword in the dungeon. It helps ensure that all necessary conditions are met before the action takes place, making the hero's journey through the dungeon logical and structured. This way, the hero doesn't magically have a sword without picking it up or has two items in one hand, which keeps our dungeon adventure realistic and understandable.
Parameters:
1. ?loc - cells
2. ?s - swords

Preconditions:
```
(and
    (at-hero ?loc)
    (at-sword ?s ?loc)
    (arm-free)
)
```

Effects:
```
(and
    (holding ?s)
    (not (at-sword ?s ?loc))
    (not (arm-free))
)
```
","(:action destroy-sword
    :parameters (?loc - cells ?s - swords)
    :precondition (and (at-hero ?loc) (holding ?s) (not (has-trap ?loc)) (not (has-monster ?loc)))
    :effect (and (arm-free) (is-destroyed ?s) (not (holding ?s)))
)",
rpggame,destroy-sword,0.6990560293197632,Semi-Hard Negative (Intra-Domain Mismatch),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: **Destroy** the sword that the hero currently holds. However, this can have unpleasant effects if done in a room with a trap or a monster: it triggers the trap or invites the monster to eat the hero.

Action name: destroy-sword


Your answer:
","**Explanation:**

Imagine our hero in a dungeon, a place with rooms connected like a spider web. Each room can be just an empty space, or it might have something like a monster, a trap, or even a sword. Somewhere in this maze, there's a special room that has an exit—the ultimate goal for our hero.

Now, let's focus on a specific action our hero might need to take: **disarming a trap**. In our scenario, the hero finds themselves in a room with a trap. The action to disarm this trap is what we need to understand.

The action is named `disarm-trap`. This action, like any other, has specific requirements (preconditions) that must be met before the hero can perform it. These preconditions are:
1. **The hero must be in the same room as the trap.** This makes sense because you can't disarm a trap from another room. It's like needing to be in the kitchen to turn off a stove.
2. **The hero's hand must be free.** This means the hero can’t be holding anything, like a sword. It's a bit like needing both hands free to tie your shoes properly.
3. **There must actually be a trap in the room.** Obviously, the hero can't disarm a trap if there isn't one there!

If all these conditions are met, then the hero can go ahead and disarm the trap. The results (effects) of this action are:
1. **The trap in the room is disarmed.** This means the room is now safe from that trap.
2. **The trap is no longer considered to be in the room.** It's like cleaning up a spill; once it's cleaned, it's not there anymore.

By breaking down the action like this, we see how each condition helps ensure the action can be carried out safely and effectively. It’s just like following a recipe—each ingredient needs to be added at the right time for the dish to come out right!
Parameters:
1. ?loc - cells

Preconditions:
```
(and
    (at-hero ?loc)
    (arm-free)
    (has-trap ?loc)
)
```

Effects:
```
(and
    (trap-disarmed ?loc)
    (not (has-trap ?loc))
)
```
","(:action destroy-sword
    :parameters (?loc - cells ?s - swords)
    :precondition (and (at-hero ?loc) (holding ?s) (not (has-trap ?loc)) (not (has-monster ?loc)))
    :effect (and (arm-free) (is-destroyed ?s) (not (holding ?s)))
)",
rpggame,destroy-sword,0.7913336753845215,Semi-Hard Negative (Intra-Domain Mismatch),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: **Destroy** the sword that the hero currently holds. However, this can have unpleasant effects if done in a room with a trap or a monster: it triggers the trap or invites the monster to eat the hero.

Action name: destroy-sword


Your answer:
","**Explanation:**

Let's imagine our hero in the dungeon scenario. The hero wakes up and finds themselves in a room, wanting to move to an adjacent room where, unfortunately, there's a monster. Here's how we translate this scenario into a set of instructions, or a 'domain model,' in planning language.

The action we're talking about is called ""move-to-monster."" This means our hero is trying to move from one room (let’s call it Room A) to another room (Room B) where there is a monster. To ensure this action can happen, there are certain conditions that need to be met (these are called 'preconditions') and certain outcomes that will happen as a result of the action (these are called 'effects').

1. **Preconditions**:
   - **Connected Rooms**: Room A and Room B must be connected by a corridor. This makes sense because our hero can't magically jump from one room to another; there must be a path.
   - **Hero's Current Location**: The hero must currently be in Room A. If the hero isn't there, they can't start moving from it!
   - **Monster Presence**: Room B must have a monster. After all, the action is specifically about moving to a room with a monster.
   - **Room Integrity**: Room B should not be destroyed. A destroyed room might mean it’s collapsed or inaccessible, so it's logical our hero can’t move into it.
   - **Safety in Room A**: Room A should not have a trap. This makes sure our hero is safe and able to move without getting caught in a trap.
   - **Armed Hero**: The hero must be holding a sword. It’s a dangerous task to move into a room with a monster, so having a sword means the hero is prepared for a fight.

2. **Effects**:
   - **Hero's New Location**: After the action, the hero will be in Room B. They've successfully moved.
   - **Change in Room A's Status**: Room A becomes 'destroyed.' This might represent that the room is no longer safe or viable after the hero leaves, maybe because of the haste in escaping or some mechanism triggered by the departure.
   - **Update Hero's Old Location**: The fact that the hero was in Room A is no longer true, which is updated in our model to reflect the hero’s new position.

This planning helps organize our thoughts and actions logically, ensuring every step is clear and all necessary precautions are taken. Think of it like giving someone directions with a checklist: ""Before you go there, make sure this, this, and this are true, and once you do, this and this will happen."" This ensures everyone knows what to expect and how to prepare! 
Parameters:
1. ?from - cells
2. ?to - cells
3. ?s - swords

Preconditions:
```
(and
    (connected ?from ?to)
    (at-hero ?from)
    (has-monster ?to)
    (not (is-destroyed ?to))
    (not (has-trap ?from))
    (holding ?s)
)
```

Effects:
```
(and
    (at-hero ?to)
    (is-destroyed ?from)
    (not (at-hero ?from))
)
```
","(:action destroy-sword
    :parameters (?loc - cells ?s - swords)
    :precondition (and (at-hero ?loc) (holding ?s) (not (has-trap ?loc)) (not (has-monster ?loc)))
    :effect (and (arm-free) (is-destroyed ?s) (not (holding ?s)))
)",
rpggame,destroy-sword,0.31304818391799927,Hard Negative (Manipulated Action),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: **Destroy** the sword that the hero currently holds. However, this can have unpleasant effects if done in a room with a trap or a monster: it triggers the trap or invites the monster to eat the hero.

Action name: destroy-sword


Your answer:
","Parameters:
1. ?loc - cells
2. ?s - swords

Preconditions:
```
(and
    (not (holding ?s))
    (arm-free)
    (holding ?s)
    (not (has-monster ?loc))
)
```

Effects:
```
(and
    (at-hero ?loc)
    (not (has-trap ?loc))
    (is-destroyed ?s)
)
```
","(:action destroy-sword
    :parameters (?loc - cells ?s - swords)
    :precondition (and (at-hero ?loc) (holding ?s) (not (has-trap ?loc)) (not (has-monster ?loc)))
    :effect (and (arm-free) (is-destroyed ?s) (not (holding ?s)))
)","swap (at-hero ?loc) with (not (holding ?s))
swap (not (has-trap ?loc)) with (arm-free)
"
rpggame,destroy-sword,0.3447232246398926,Hard Negative (Manipulated Action),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: **Destroy** the sword that the hero currently holds. However, this can have unpleasant effects if done in a room with a trap or a monster: it triggers the trap or invites the monster to eat the hero.

Action name: destroy-sword


Your answer:
","Parameters:
1. ?loc - cells
2. ?s - swords

Preconditions:
```
(and
    (arm-free)
    (not (has-trap ?loc))
    (not (has-monster ?loc))
)
```

Effects:
```
(and
    (at-hero ?loc)
    (is-destroyed ?s)
    (not (holding ?s))
)
```
","(:action destroy-sword
    :parameters (?loc - cells ?s - swords)
    :precondition (and (at-hero ?loc) (holding ?s) (not (has-trap ?loc)) (not (has-monster ?loc)))
    :effect (and (arm-free) (is-destroyed ?s) (not (holding ?s)))
)","swap (at-hero ?loc) with (arm-free)
remove (holding ?s) from preconditions
"
rpggame,destroy-sword,0.32190197706222534,Hard Negative (Manipulated Action),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: **Destroy** the sword that the hero currently holds. However, this can have unpleasant effects if done in a room with a trap or a monster: it triggers the trap or invites the monster to eat the hero.

Action name: destroy-sword


Your answer:
","Parameters:
1. ?loc - cells
2. ?s - swords

Preconditions:
```
(and
    (not (holding ?s))
    (is-destroyed ?s)
    (at-hero ?loc)
    (not (has-monster ?loc))
)
```

Effects:
```
(and
    (holding ?s)
    (not (has-trap ?loc))
    (arm-free)
)
```
","(:action destroy-sword
    :parameters (?loc - cells ?s - swords)
    :precondition (and (at-hero ?loc) (holding ?s) (not (has-trap ?loc)) (not (has-monster ?loc)))
    :effect (and (arm-free) (is-destroyed ?s) (not (holding ?s)))
)","swap (holding ?s) with (not (holding ?s))
swap (not (has-trap ?loc)) with (is-destroyed ?s)
"
rpggame,destroy-sword,0.17789803445339203,Hard Negative (Manipulated Action),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: **Destroy** the sword that the hero currently holds. However, this can have unpleasant effects if done in a room with a trap or a monster: it triggers the trap or invites the monster to eat the hero.

Action name: destroy-sword


Your answer:
","Parameters:
1. ?loc - cells
2. ?s - swords

Preconditions:
```
(and
    (is-destroyed ?s)
    (at-hero ?loc)
    (holding ?s)
)
```

Effects:
```
(and
    (not (has-monster ?loc))
    (arm-free)
    (not (holding ?s))
)
```
","(:action destroy-sword
    :parameters (?loc - cells ?s - swords)
    :precondition (and (at-hero ?loc) (holding ?s) (not (has-trap ?loc)) (not (has-monster ?loc)))
    :effect (and (arm-free) (is-destroyed ?s) (not (holding ?s)))
)","remove (not (has-trap ?loc)) from preconditions
swap (not (has-monster ?loc)) with (is-destroyed ?s)
"
rpggame,destroy-sword,0.32210880517959595,Hard Negative (Manipulated Action),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: **Destroy** the sword that the hero currently holds. However, this can have unpleasant effects if done in a room with a trap or a monster: it triggers the trap or invites the monster to eat the hero.

Action name: destroy-sword


Your answer:
","Parameters:
1. ?loc - cells
2. ?s - swords

Preconditions:
```
(and
    (not (holding ?s))
    (at-hero ?loc)
    (not (has-trap ?loc))
    (not (has-monster ?loc))
)
```

Effects:
```
(and
    (holding ?s)
    (arm-free)
    (is-destroyed ?s)
)
```
","(:action destroy-sword
    :parameters (?loc - cells ?s - swords)
    :precondition (and (at-hero ?loc) (holding ?s) (not (has-trap ?loc)) (not (has-monster ?loc)))
    :effect (and (arm-free) (is-destroyed ?s) (not (holding ?s)))
)","swap (holding ?s) with (not (holding ?s))
"
rpggame,destroy-sword,0.3129756450653076,Hard Negative (Manipulated Action),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: **Destroy** the sword that the hero currently holds. However, this can have unpleasant effects if done in a room with a trap or a monster: it triggers the trap or invites the monster to eat the hero.

Action name: destroy-sword


Your answer:
","Parameters:
1. ?loc - cells
2. ?s - swords

Preconditions:
```
(and
    (not (holding ?s))
    (is-destroyed ?s)
    (holding ?s)
    (not (has-monster ?loc))
)
```

Effects:
```
(and
    (at-hero ?loc)
    (not (has-trap ?loc))
    (arm-free)
)
```
","(:action destroy-sword
    :parameters (?loc - cells ?s - swords)
    :precondition (and (at-hero ?loc) (holding ?s) (not (has-trap ?loc)) (not (has-monster ?loc)))
    :effect (and (arm-free) (is-destroyed ?s) (not (holding ?s)))
)","swap (at-hero ?loc) with (not (holding ?s))
swap (not (has-trap ?loc)) with (is-destroyed ?s)
"
rpggame,destroy-sword,0.5530409812927246,Hard Negative (Manipulated Action),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: **Destroy** the sword that the hero currently holds. However, this can have unpleasant effects if done in a room with a trap or a monster: it triggers the trap or invites the monster to eat the hero.

Action name: destroy-sword


Your answer:
","Parameters:
1. ?loc - cells
2. ?s - swords

Preconditions:
```
(and
    (has-trap ?loc)
    (at-hero ?loc)
    (holding ?s)
    (not (has-monster ?loc))
)
```

Effects:
```
(and
    (arm-free)
    (is-destroyed ?s)
    (not (holding ?s))
)
```
","(:action destroy-sword
    :parameters (?loc - cells ?s - swords)
    :precondition (and (at-hero ?loc) (holding ?s) (not (has-trap ?loc)) (not (has-monster ?loc)))
    :effect (and (arm-free) (is-destroyed ?s) (not (holding ?s)))
)","negate (not (has-trap ?loc)) in preconditions
"
rpggame,destroy-sword,0.3870609998703003,Hard Negative (Manipulated Action),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: **Destroy** the sword that the hero currently holds. However, this can have unpleasant effects if done in a room with a trap or a monster: it triggers the trap or invites the monster to eat the hero.

Action name: destroy-sword


Your answer:
","Parameters:
1. ?loc - cells
2. ?s - swords

Preconditions:
```
(and
    (is-destroyed ?s)
    (at-hero ?loc)
    (holding ?s)
    (not (has-trap ?loc))
)
```

Effects:
```
(and
    (not (has-monster ?loc))
    (arm-free)
    (not (holding ?s))
)
```
","(:action destroy-sword
    :parameters (?loc - cells ?s - swords)
    :precondition (and (at-hero ?loc) (holding ?s) (not (has-trap ?loc)) (not (has-monster ?loc)))
    :effect (and (arm-free) (is-destroyed ?s) (not (holding ?s)))
)","swap (not (has-monster ?loc)) with (is-destroyed ?s)
"
rpggame,destroy-sword,0.4030017852783203,Hard Negative (Manipulated Action),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: **Destroy** the sword that the hero currently holds. However, this can have unpleasant effects if done in a room with a trap or a monster: it triggers the trap or invites the monster to eat the hero.

Action name: destroy-sword


Your answer:
","Parameters:
1. ?loc - cells
2. ?s - swords

Preconditions:
```
(and
    (has-monster ?loc)
    (holding ?s)
    (not (has-trap ?loc))
)
```

Effects:
```
(and
    (arm-free)
    (is-destroyed ?s)
    (not (holding ?s))
)
```
","(:action destroy-sword
    :parameters (?loc - cells ?s - swords)
    :precondition (and (at-hero ?loc) (holding ?s) (not (has-trap ?loc)) (not (has-monster ?loc)))
    :effect (and (arm-free) (is-destroyed ?s) (not (holding ?s)))
)","negate (not (has-monster ?loc)) in preconditions
remove (at-hero ?loc) from preconditions
"
rpggame,destroy-sword,0.3870609998703003,Hard Negative (Manipulated Action),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: **Destroy** the sword that the hero currently holds. However, this can have unpleasant effects if done in a room with a trap or a monster: it triggers the trap or invites the monster to eat the hero.

Action name: destroy-sword


Your answer:
","Parameters:
1. ?loc - cells
2. ?s - swords

Preconditions:
```
(and
    (is-destroyed ?s)
    (at-hero ?loc)
    (holding ?s)
    (not (has-trap ?loc))
)
```

Effects:
```
(and
    (not (has-monster ?loc))
    (arm-free)
    (not (holding ?s))
)
```
","(:action destroy-sword
    :parameters (?loc - cells ?s - swords)
    :precondition (and (at-hero ?loc) (holding ?s) (not (has-trap ?loc)) (not (has-monster ?loc)))
    :effect (and (arm-free) (is-destroyed ?s) (not (holding ?s)))
)","swap (not (has-monster ?loc)) with (is-destroyed ?s)
"
rpggame,destroy-sword,0.35671234130859375,Hard Negative (Manipulated Action),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: **Destroy** the sword that the hero currently holds. However, this can have unpleasant effects if done in a room with a trap or a monster: it triggers the trap or invites the monster to eat the hero.

Action name: destroy-sword


Your answer:

**Explanation:**

Imagine you're helping a hero navigate a dungeon full of monsters and traps, a bit like playing a video game. Now, the hero has a sword, but in this part of the game, the hero decides to destroy the sword. To understand why certain conditions are checked before the hero can destroy the sword safely, let's break it down using the action ""destroy-sword"" from the game's rules (or in technical terms, the PDDL action schema).

Firstly, the hero needs to be in the same location as the sword. This makes sense, right? You can't throw something away or break it if it's not with you. So, the condition `(at-hero ?loc)` ensures that the hero is at the right spot to perform the action.

Secondly, the hero must be holding the sword. It’s similar to needing both hands on a bat to swing it; here, the hero needs to have the sword in hand to destroy it, checked by `(holding ?s)`.

But why check for no traps or monsters in the room? Think of it like trying to do something delicate, like assembling a model airplane, in a room with a loose tiger. Not a great idea, right? If there’s a monster in the room, destroying the sword might make the hero vulnerable to attack. Similarly, a trap could be triggered by the noise or movement, putting the hero in danger. So, `(not (has-trap ?loc))` and `(not (has-monster ?loc))` ensure that the environment is safe for the hero to break the sword without turning the situation worse.

Now, what happens after the sword is destroyed? The effect is that the hero’s hand is now free (`arm-free`), the sword is confirmed as destroyed (`is-destroyed ?s`), and the hero is no longer holding it (`not (holding ?s)`). It’s like cleaning up after finishing a task: put away the tools, clean up the mess, and free up your hands for the next task.

In simple terms, this action schema is like a set of instructions to make sure the hero does something risky (like destroying a sword) safely and responsibly, without making the dangerous dungeon situation even worse.","Parameters:
1. ?loc - cells
2. ?s - swords

Preconditions:
```
(and
    (arm-free)
    (not (at-hero ?loc))
    (holding ?s)
    (not (has-monster ?loc))
)
```

Effects:
```
(and
    (not (has-trap ?loc))
    (is-destroyed ?s)
    (not (holding ?s))
)
```
","(:action destroy-sword
    :parameters (?loc - cells ?s - swords)
    :precondition (and (at-hero ?loc) (holding ?s) (not (has-trap ?loc)) (not (has-monster ?loc)))
    :effect (and (arm-free) (is-destroyed ?s) (not (holding ?s)))
)","swap (not (has-trap ?loc)) with (arm-free)
negate (at-hero ?loc) in preconditions
"
rpggame,destroy-sword,0.4578549563884735,Hard Negative (Manipulated Action),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: **Destroy** the sword that the hero currently holds. However, this can have unpleasant effects if done in a room with a trap or a monster: it triggers the trap or invites the monster to eat the hero.

Action name: destroy-sword


Your answer:

**Explanation:**

Imagine you're helping a hero navigate a dungeon full of monsters and traps, a bit like playing a video game. Now, the hero has a sword, but in this part of the game, the hero decides to destroy the sword. To understand why certain conditions are checked before the hero can destroy the sword safely, let's break it down using the action ""destroy-sword"" from the game's rules (or in technical terms, the PDDL action schema).

Firstly, the hero needs to be in the same location as the sword. This makes sense, right? You can't throw something away or break it if it's not with you. So, the condition `(at-hero ?loc)` ensures that the hero is at the right spot to perform the action.

Secondly, the hero must be holding the sword. It’s similar to needing both hands on a bat to swing it; here, the hero needs to have the sword in hand to destroy it, checked by `(holding ?s)`.

But why check for no traps or monsters in the room? Think of it like trying to do something delicate, like assembling a model airplane, in a room with a loose tiger. Not a great idea, right? If there’s a monster in the room, destroying the sword might make the hero vulnerable to attack. Similarly, a trap could be triggered by the noise or movement, putting the hero in danger. So, `(not (has-trap ?loc))` and `(not (has-monster ?loc))` ensure that the environment is safe for the hero to break the sword without turning the situation worse.

Now, what happens after the sword is destroyed? The effect is that the hero’s hand is now free (`arm-free`), the sword is confirmed as destroyed (`is-destroyed ?s`), and the hero is no longer holding it (`not (holding ?s)`). It’s like cleaning up after finishing a task: put away the tools, clean up the mess, and free up your hands for the next task.

In simple terms, this action schema is like a set of instructions to make sure the hero does something risky (like destroying a sword) safely and responsibly, without making the dangerous dungeon situation even worse.","Parameters:
1. ?loc - cells
2. ?s - swords

Preconditions:
```
(and
    (at-hero ?loc)
    (holding ?s)
    (not (has-trap ?loc))
    (not (has-monster ?loc))
)
```

Effects:
```
(and
    (not (is-destroyed ?s))
    (arm-free)
    (not (holding ?s))
)
```
","(:action destroy-sword
    :parameters (?loc - cells ?s - swords)
    :precondition (and (at-hero ?loc) (holding ?s) (not (has-trap ?loc)) (not (has-monster ?loc)))
    :effect (and (arm-free) (is-destroyed ?s) (not (holding ?s)))
)","negate (is-destroyed ?s) in effects
"
rpggame,destroy-sword,0.24293509125709534,Hard Negative (Manipulated Action),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: **Destroy** the sword that the hero currently holds. However, this can have unpleasant effects if done in a room with a trap or a monster: it triggers the trap or invites the monster to eat the hero.

Action name: destroy-sword


Your answer:

**Explanation:**

Imagine you're helping a hero navigate a dungeon full of monsters and traps, a bit like playing a video game. Now, the hero has a sword, but in this part of the game, the hero decides to destroy the sword. To understand why certain conditions are checked before the hero can destroy the sword safely, let's break it down using the action ""destroy-sword"" from the game's rules (or in technical terms, the PDDL action schema).

Firstly, the hero needs to be in the same location as the sword. This makes sense, right? You can't throw something away or break it if it's not with you. So, the condition `(at-hero ?loc)` ensures that the hero is at the right spot to perform the action.

Secondly, the hero must be holding the sword. It’s similar to needing both hands on a bat to swing it; here, the hero needs to have the sword in hand to destroy it, checked by `(holding ?s)`.

But why check for no traps or monsters in the room? Think of it like trying to do something delicate, like assembling a model airplane, in a room with a loose tiger. Not a great idea, right? If there’s a monster in the room, destroying the sword might make the hero vulnerable to attack. Similarly, a trap could be triggered by the noise or movement, putting the hero in danger. So, `(not (has-trap ?loc))` and `(not (has-monster ?loc))` ensure that the environment is safe for the hero to break the sword without turning the situation worse.

Now, what happens after the sword is destroyed? The effect is that the hero’s hand is now free (`arm-free`), the sword is confirmed as destroyed (`is-destroyed ?s`), and the hero is no longer holding it (`not (holding ?s)`). It’s like cleaning up after finishing a task: put away the tools, clean up the mess, and free up your hands for the next task.

In simple terms, this action schema is like a set of instructions to make sure the hero does something risky (like destroying a sword) safely and responsibly, without making the dangerous dungeon situation even worse.","Parameters:
1. ?loc - cells
2. ?s - swords

Preconditions:
```
(and
    (not (holding ?s))
    (at-hero ?loc)
    (holding ?s)
    (not (has-trap ?loc))
)
```

Effects:
```
(and
    (not (arm-free))
    (not (has-monster ?loc))
    (is-destroyed ?s)
)
```
","(:action destroy-sword
    :parameters (?loc - cells ?s - swords)
    :precondition (and (at-hero ?loc) (holding ?s) (not (has-trap ?loc)) (not (has-monster ?loc)))
    :effect (and (arm-free) (is-destroyed ?s) (not (holding ?s)))
)","negate (arm-free) in effects
swap (not (has-monster ?loc)) with (not (holding ?s))
"
rpggame,destroy-sword,0.21894985437393188,Hard Negative (Manipulated Action),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: **Destroy** the sword that the hero currently holds. However, this can have unpleasant effects if done in a room with a trap or a monster: it triggers the trap or invites the monster to eat the hero.

Action name: destroy-sword


Your answer:

**Explanation:**

Imagine you're helping a hero navigate a dungeon full of monsters and traps, a bit like playing a video game. Now, the hero has a sword, but in this part of the game, the hero decides to destroy the sword. To understand why certain conditions are checked before the hero can destroy the sword safely, let's break it down using the action ""destroy-sword"" from the game's rules (or in technical terms, the PDDL action schema).

Firstly, the hero needs to be in the same location as the sword. This makes sense, right? You can't throw something away or break it if it's not with you. So, the condition `(at-hero ?loc)` ensures that the hero is at the right spot to perform the action.

Secondly, the hero must be holding the sword. It’s similar to needing both hands on a bat to swing it; here, the hero needs to have the sword in hand to destroy it, checked by `(holding ?s)`.

But why check for no traps or monsters in the room? Think of it like trying to do something delicate, like assembling a model airplane, in a room with a loose tiger. Not a great idea, right? If there’s a monster in the room, destroying the sword might make the hero vulnerable to attack. Similarly, a trap could be triggered by the noise or movement, putting the hero in danger. So, `(not (has-trap ?loc))` and `(not (has-monster ?loc))` ensure that the environment is safe for the hero to break the sword without turning the situation worse.

Now, what happens after the sword is destroyed? The effect is that the hero’s hand is now free (`arm-free`), the sword is confirmed as destroyed (`is-destroyed ?s`), and the hero is no longer holding it (`not (holding ?s)`). It’s like cleaning up after finishing a task: put away the tools, clean up the mess, and free up your hands for the next task.

In simple terms, this action schema is like a set of instructions to make sure the hero does something risky (like destroying a sword) safely and responsibly, without making the dangerous dungeon situation even worse.","Parameters:
1. ?loc - cells
2. ?s - swords

Preconditions:
```
(and
    (not (holding ?s))
    (at-hero ?loc)
    (not (has-trap ?loc))
)
```

Effects:
```
(and
    (arm-free)
    (is-destroyed ?s)
    (not (holding ?s))
)
```
","(:action destroy-sword
    :parameters (?loc - cells ?s - swords)
    :precondition (and (at-hero ?loc) (holding ?s) (not (has-trap ?loc)) (not (has-monster ?loc)))
    :effect (and (arm-free) (is-destroyed ?s) (not (holding ?s)))
)","remove (not (has-monster ?loc)) from preconditions
negate (holding ?s) in preconditions
"
rpggame,destroy-sword,0.3254741430282593,Hard Negative (Manipulated Action),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: **Destroy** the sword that the hero currently holds. However, this can have unpleasant effects if done in a room with a trap or a monster: it triggers the trap or invites the monster to eat the hero.

Action name: destroy-sword


Your answer:

**Explanation:**

Imagine you're helping a hero navigate a dungeon full of monsters and traps, a bit like playing a video game. Now, the hero has a sword, but in this part of the game, the hero decides to destroy the sword. To understand why certain conditions are checked before the hero can destroy the sword safely, let's break it down using the action ""destroy-sword"" from the game's rules (or in technical terms, the PDDL action schema).

Firstly, the hero needs to be in the same location as the sword. This makes sense, right? You can't throw something away or break it if it's not with you. So, the condition `(at-hero ?loc)` ensures that the hero is at the right spot to perform the action.

Secondly, the hero must be holding the sword. It’s similar to needing both hands on a bat to swing it; here, the hero needs to have the sword in hand to destroy it, checked by `(holding ?s)`.

But why check for no traps or monsters in the room? Think of it like trying to do something delicate, like assembling a model airplane, in a room with a loose tiger. Not a great idea, right? If there’s a monster in the room, destroying the sword might make the hero vulnerable to attack. Similarly, a trap could be triggered by the noise or movement, putting the hero in danger. So, `(not (has-trap ?loc))` and `(not (has-monster ?loc))` ensure that the environment is safe for the hero to break the sword without turning the situation worse.

Now, what happens after the sword is destroyed? The effect is that the hero’s hand is now free (`arm-free`), the sword is confirmed as destroyed (`is-destroyed ?s`), and the hero is no longer holding it (`not (holding ?s)`). It’s like cleaning up after finishing a task: put away the tools, clean up the mess, and free up your hands for the next task.

In simple terms, this action schema is like a set of instructions to make sure the hero does something risky (like destroying a sword) safely and responsibly, without making the dangerous dungeon situation even worse.","Parameters:
1. ?loc - cells
2. ?s - swords

Preconditions:
```
(and
    (not (at-hero ?loc))
    (is-destroyed ?s)
    (holding ?s)
    (not (has-monster ?loc))
)
```

Effects:
```
(and
    (not (has-trap ?loc))
    (arm-free)
    (not (holding ?s))
)
```
","(:action destroy-sword
    :parameters (?loc - cells ?s - swords)
    :precondition (and (at-hero ?loc) (holding ?s) (not (has-trap ?loc)) (not (has-monster ?loc)))
    :effect (and (arm-free) (is-destroyed ?s) (not (holding ?s)))
)","negate (at-hero ?loc) in preconditions
swap (not (has-trap ?loc)) with (is-destroyed ?s)
"
rpggame,destroy-sword,0.27665820717811584,Hard Negative (Manipulated Action),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: **Destroy** the sword that the hero currently holds. However, this can have unpleasant effects if done in a room with a trap or a monster: it triggers the trap or invites the monster to eat the hero.

Action name: destroy-sword


Your answer:

**Explanation:**

Imagine you're helping a hero navigate a dungeon full of monsters and traps, a bit like playing a video game. Now, the hero has a sword, but in this part of the game, the hero decides to destroy the sword. To understand why certain conditions are checked before the hero can destroy the sword safely, let's break it down using the action ""destroy-sword"" from the game's rules (or in technical terms, the PDDL action schema).

Firstly, the hero needs to be in the same location as the sword. This makes sense, right? You can't throw something away or break it if it's not with you. So, the condition `(at-hero ?loc)` ensures that the hero is at the right spot to perform the action.

Secondly, the hero must be holding the sword. It’s similar to needing both hands on a bat to swing it; here, the hero needs to have the sword in hand to destroy it, checked by `(holding ?s)`.

But why check for no traps or monsters in the room? Think of it like trying to do something delicate, like assembling a model airplane, in a room with a loose tiger. Not a great idea, right? If there’s a monster in the room, destroying the sword might make the hero vulnerable to attack. Similarly, a trap could be triggered by the noise or movement, putting the hero in danger. So, `(not (has-trap ?loc))` and `(not (has-monster ?loc))` ensure that the environment is safe for the hero to break the sword without turning the situation worse.

Now, what happens after the sword is destroyed? The effect is that the hero’s hand is now free (`arm-free`), the sword is confirmed as destroyed (`is-destroyed ?s`), and the hero is no longer holding it (`not (holding ?s)`). It’s like cleaning up after finishing a task: put away the tools, clean up the mess, and free up your hands for the next task.

In simple terms, this action schema is like a set of instructions to make sure the hero does something risky (like destroying a sword) safely and responsibly, without making the dangerous dungeon situation even worse.","Parameters:
1. ?loc - cells
2. ?s - swords

Preconditions:
```
(and
    (not (holding ?s))
    (at-hero ?loc)
    (holding ?s)
    (not (has-monster ?loc))
)
```

Effects:
```
(and
    (not (has-trap ?loc))
    (not (is-destroyed ?s))
    (arm-free)
)
```
","(:action destroy-sword
    :parameters (?loc - cells ?s - swords)
    :precondition (and (at-hero ?loc) (holding ?s) (not (has-trap ?loc)) (not (has-monster ?loc)))
    :effect (and (arm-free) (is-destroyed ?s) (not (holding ?s)))
)","swap (not (has-trap ?loc)) with (not (holding ?s))
negate (is-destroyed ?s) in effects
"
rpggame,destroy-sword,0.5381560325622559,Hard Negative (Manipulated Action),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: **Destroy** the sword that the hero currently holds. However, this can have unpleasant effects if done in a room with a trap or a monster: it triggers the trap or invites the monster to eat the hero.

Action name: destroy-sword


Your answer:

**Explanation:**

Imagine you're helping a hero navigate a dungeon full of monsters and traps, a bit like playing a video game. Now, the hero has a sword, but in this part of the game, the hero decides to destroy the sword. To understand why certain conditions are checked before the hero can destroy the sword safely, let's break it down using the action ""destroy-sword"" from the game's rules (or in technical terms, the PDDL action schema).

Firstly, the hero needs to be in the same location as the sword. This makes sense, right? You can't throw something away or break it if it's not with you. So, the condition `(at-hero ?loc)` ensures that the hero is at the right spot to perform the action.

Secondly, the hero must be holding the sword. It’s similar to needing both hands on a bat to swing it; here, the hero needs to have the sword in hand to destroy it, checked by `(holding ?s)`.

But why check for no traps or monsters in the room? Think of it like trying to do something delicate, like assembling a model airplane, in a room with a loose tiger. Not a great idea, right? If there’s a monster in the room, destroying the sword might make the hero vulnerable to attack. Similarly, a trap could be triggered by the noise or movement, putting the hero in danger. So, `(not (has-trap ?loc))` and `(not (has-monster ?loc))` ensure that the environment is safe for the hero to break the sword without turning the situation worse.

Now, what happens after the sword is destroyed? The effect is that the hero’s hand is now free (`arm-free`), the sword is confirmed as destroyed (`is-destroyed ?s`), and the hero is no longer holding it (`not (holding ?s)`). It’s like cleaning up after finishing a task: put away the tools, clean up the mess, and free up your hands for the next task.

In simple terms, this action schema is like a set of instructions to make sure the hero does something risky (like destroying a sword) safely and responsibly, without making the dangerous dungeon situation even worse.","Parameters:
1. ?loc - cells
2. ?s - swords

Preconditions:
```
(and
    (at-hero ?loc)
    (holding ?s)
    (not (has-trap ?loc))
    (not (has-monster ?loc))
)
```

Effects:
```
(and
    (holding ?s)
    (arm-free)
    (is-destroyed ?s)
)
```
","(:action destroy-sword
    :parameters (?loc - cells ?s - swords)
    :precondition (and (at-hero ?loc) (holding ?s) (not (has-trap ?loc)) (not (has-monster ?loc)))
    :effect (and (arm-free) (is-destroyed ?s) (not (holding ?s)))
)","negate (not (holding ?s)) in effects
"
rpggame,destroy-sword,0.26977938413619995,Hard Negative (Manipulated Action),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: **Destroy** the sword that the hero currently holds. However, this can have unpleasant effects if done in a room with a trap or a monster: it triggers the trap or invites the monster to eat the hero.

Action name: destroy-sword


Your answer:

**Explanation:**

Imagine you're helping a hero navigate a dungeon full of monsters and traps, a bit like playing a video game. Now, the hero has a sword, but in this part of the game, the hero decides to destroy the sword. To understand why certain conditions are checked before the hero can destroy the sword safely, let's break it down using the action ""destroy-sword"" from the game's rules (or in technical terms, the PDDL action schema).

Firstly, the hero needs to be in the same location as the sword. This makes sense, right? You can't throw something away or break it if it's not with you. So, the condition `(at-hero ?loc)` ensures that the hero is at the right spot to perform the action.

Secondly, the hero must be holding the sword. It’s similar to needing both hands on a bat to swing it; here, the hero needs to have the sword in hand to destroy it, checked by `(holding ?s)`.

But why check for no traps or monsters in the room? Think of it like trying to do something delicate, like assembling a model airplane, in a room with a loose tiger. Not a great idea, right? If there’s a monster in the room, destroying the sword might make the hero vulnerable to attack. Similarly, a trap could be triggered by the noise or movement, putting the hero in danger. So, `(not (has-trap ?loc))` and `(not (has-monster ?loc))` ensure that the environment is safe for the hero to break the sword without turning the situation worse.

Now, what happens after the sword is destroyed? The effect is that the hero’s hand is now free (`arm-free`), the sword is confirmed as destroyed (`is-destroyed ?s`), and the hero is no longer holding it (`not (holding ?s)`). It’s like cleaning up after finishing a task: put away the tools, clean up the mess, and free up your hands for the next task.

In simple terms, this action schema is like a set of instructions to make sure the hero does something risky (like destroying a sword) safely and responsibly, without making the dangerous dungeon situation even worse.","Parameters:
1. ?loc - cells
2. ?s - swords

Preconditions:
```
(and
    (at-hero ?loc)
    (holding ?s)
    (not (has-monster ?loc))
)
```

Effects:
```
(and
    (arm-free)
    (is-destroyed ?s)
    (not (holding ?s))
)
```
","(:action destroy-sword
    :parameters (?loc - cells ?s - swords)
    :precondition (and (at-hero ?loc) (holding ?s) (not (has-trap ?loc)) (not (has-monster ?loc)))
    :effect (and (arm-free) (is-destroyed ?s) (not (holding ?s)))
)","remove (not (has-trap ?loc)) from preconditions
"
rpggame,destroy-sword,0.34365755319595337,Hard Negative (Manipulated Action),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: **Destroy** the sword that the hero currently holds. However, this can have unpleasant effects if done in a room with a trap or a monster: it triggers the trap or invites the monster to eat the hero.

Action name: destroy-sword


Your answer:

**Explanation:**

Imagine you're helping a hero navigate a dungeon full of monsters and traps, a bit like playing a video game. Now, the hero has a sword, but in this part of the game, the hero decides to destroy the sword. To understand why certain conditions are checked before the hero can destroy the sword safely, let's break it down using the action ""destroy-sword"" from the game's rules (or in technical terms, the PDDL action schema).

Firstly, the hero needs to be in the same location as the sword. This makes sense, right? You can't throw something away or break it if it's not with you. So, the condition `(at-hero ?loc)` ensures that the hero is at the right spot to perform the action.

Secondly, the hero must be holding the sword. It’s similar to needing both hands on a bat to swing it; here, the hero needs to have the sword in hand to destroy it, checked by `(holding ?s)`.

But why check for no traps or monsters in the room? Think of it like trying to do something delicate, like assembling a model airplane, in a room with a loose tiger. Not a great idea, right? If there’s a monster in the room, destroying the sword might make the hero vulnerable to attack. Similarly, a trap could be triggered by the noise or movement, putting the hero in danger. So, `(not (has-trap ?loc))` and `(not (has-monster ?loc))` ensure that the environment is safe for the hero to break the sword without turning the situation worse.

Now, what happens after the sword is destroyed? The effect is that the hero’s hand is now free (`arm-free`), the sword is confirmed as destroyed (`is-destroyed ?s`), and the hero is no longer holding it (`not (holding ?s)`). It’s like cleaning up after finishing a task: put away the tools, clean up the mess, and free up your hands for the next task.

In simple terms, this action schema is like a set of instructions to make sure the hero does something risky (like destroying a sword) safely and responsibly, without making the dangerous dungeon situation even worse.","Parameters:
1. ?loc - cells
2. ?s - swords

Preconditions:
```
(and
    (not (at-hero ?loc))
    (not (holding ?s))
    (not (has-trap ?loc))
    (not (has-monster ?loc))
)
```

Effects:
```
(and
    (arm-free)
    (is-destroyed ?s)
    (not (holding ?s))
)
```
","(:action destroy-sword
    :parameters (?loc - cells ?s - swords)
    :precondition (and (at-hero ?loc) (holding ?s) (not (has-trap ?loc)) (not (has-monster ?loc)))
    :effect (and (arm-free) (is-destroyed ?s) (not (holding ?s)))
)","negate (at-hero ?loc) in preconditions
negate (holding ?s) in preconditions
"
rpggame,destroy-sword,0.5309767723083496,Hard Negative (Manipulated Action),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: **Destroy** the sword that the hero currently holds. However, this can have unpleasant effects if done in a room with a trap or a monster: it triggers the trap or invites the monster to eat the hero.

Action name: destroy-sword


Your answer:

**Explanation:**

Imagine you're helping a hero navigate a dungeon full of monsters and traps, a bit like playing a video game. Now, the hero has a sword, but in this part of the game, the hero decides to destroy the sword. To understand why certain conditions are checked before the hero can destroy the sword safely, let's break it down using the action ""destroy-sword"" from the game's rules (or in technical terms, the PDDL action schema).

Firstly, the hero needs to be in the same location as the sword. This makes sense, right? You can't throw something away or break it if it's not with you. So, the condition `(at-hero ?loc)` ensures that the hero is at the right spot to perform the action.

Secondly, the hero must be holding the sword. It’s similar to needing both hands on a bat to swing it; here, the hero needs to have the sword in hand to destroy it, checked by `(holding ?s)`.

But why check for no traps or monsters in the room? Think of it like trying to do something delicate, like assembling a model airplane, in a room with a loose tiger. Not a great idea, right? If there’s a monster in the room, destroying the sword might make the hero vulnerable to attack. Similarly, a trap could be triggered by the noise or movement, putting the hero in danger. So, `(not (has-trap ?loc))` and `(not (has-monster ?loc))` ensure that the environment is safe for the hero to break the sword without turning the situation worse.

Now, what happens after the sword is destroyed? The effect is that the hero’s hand is now free (`arm-free`), the sword is confirmed as destroyed (`is-destroyed ?s`), and the hero is no longer holding it (`not (holding ?s)`). It’s like cleaning up after finishing a task: put away the tools, clean up the mess, and free up your hands for the next task.

In simple terms, this action schema is like a set of instructions to make sure the hero does something risky (like destroying a sword) safely and responsibly, without making the dangerous dungeon situation even worse.","Parameters:
1. ?loc - cells
2. ?s - swords

Preconditions:
```
(and
    (at-hero ?loc)
    (holding ?s)
    (not (has-trap ?loc))
    (not (has-monster ?loc))
)
```

Effects:
```
(and
    (arm-free)
    (not (holding ?s))
)
```
","(:action destroy-sword
    :parameters (?loc - cells ?s - swords)
    :precondition (and (at-hero ?loc) (holding ?s) (not (has-trap ?loc)) (not (has-monster ?loc)))
    :effect (and (arm-free) (is-destroyed ?s) (not (holding ?s)))
)","remove (is-destroyed ?s) from effects
"
rpggame,destroy-sword,0.6022752523422241,Hard Negative (Manipulated Action),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: **Destroy** the sword that the hero currently holds. However, this can have unpleasant effects if done in a room with a trap or a monster: it triggers the trap or invites the monster to eat the hero.

Action name: destroy-sword


Your answer:
","**Explanation:**

Imagine you're helping a hero navigate a dungeon full of monsters and traps, a bit like playing a video game. Now, the hero has a sword, but in this part of the game, the hero decides to destroy the sword. To understand why certain conditions are checked before the hero can destroy the sword safely, let's break it down using the action ""destroy-sword"" from the game's rules (or in technical terms, the PDDL action schema).

Firstly, the hero needs to be in the same location as the sword. This makes sense, right? You can't throw something away or break it if it's not with you. So, the condition `(at-hero ?loc)` ensures that the hero is at the right spot to perform the action.

Secondly, the hero must be holding the sword. It’s similar to needing both hands on a bat to swing it; here, the hero needs to have the sword in hand to destroy it, checked by `(holding ?s)`.

But why check for no traps or monsters in the room? Think of it like trying to do something delicate, like assembling a model airplane, in a room with a loose tiger. Not a great idea, right? If there’s a monster in the room, destroying the sword might make the hero vulnerable to attack. Similarly, a trap could be triggered by the noise or movement, putting the hero in danger. So, `(not (has-trap ?loc))` and `(not (has-monster ?loc))` ensure that the environment is safe for the hero to break the sword without turning the situation worse.

Now, what happens after the sword is destroyed? The effect is that the hero’s hand is now free (`arm-free`), the sword is confirmed as destroyed (`is-destroyed ?s`), and the hero is no longer holding it (`not (holding ?s)`). It’s like cleaning up after finishing a task: put away the tools, clean up the mess, and free up your hands for the next task.

In simple terms, this action schema is like a set of instructions to make sure the hero does something risky (like destroying a sword) safely and responsibly, without making the dangerous dungeon situation even worse.
Parameters:
1. ?loc - cells
2. ?s - swords

Preconditions:
```
(and
    (holding ?s)
    (not (has-trap ?loc))
    (not (has-monster ?loc))
)
```

Effects:
```
(and
    (arm-free)
    (is-destroyed ?s)
    (not (holding ?s))
)
```
","(:action destroy-sword
    :parameters (?loc - cells ?s - swords)
    :precondition (and (at-hero ?loc) (holding ?s) (not (has-trap ?loc)) (not (has-monster ?loc)))
    :effect (and (arm-free) (is-destroyed ?s) (not (holding ?s)))
)","remove (at-hero ?loc) from preconditions
"
rpggame,destroy-sword,0.6022752523422241,Hard Negative (Manipulated Action),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: **Destroy** the sword that the hero currently holds. However, this can have unpleasant effects if done in a room with a trap or a monster: it triggers the trap or invites the monster to eat the hero.

Action name: destroy-sword


Your answer:
","**Explanation:**

Imagine you're helping a hero navigate a dungeon full of monsters and traps, a bit like playing a video game. Now, the hero has a sword, but in this part of the game, the hero decides to destroy the sword. To understand why certain conditions are checked before the hero can destroy the sword safely, let's break it down using the action ""destroy-sword"" from the game's rules (or in technical terms, the PDDL action schema).

Firstly, the hero needs to be in the same location as the sword. This makes sense, right? You can't throw something away or break it if it's not with you. So, the condition `(at-hero ?loc)` ensures that the hero is at the right spot to perform the action.

Secondly, the hero must be holding the sword. It’s similar to needing both hands on a bat to swing it; here, the hero needs to have the sword in hand to destroy it, checked by `(holding ?s)`.

But why check for no traps or monsters in the room? Think of it like trying to do something delicate, like assembling a model airplane, in a room with a loose tiger. Not a great idea, right? If there’s a monster in the room, destroying the sword might make the hero vulnerable to attack. Similarly, a trap could be triggered by the noise or movement, putting the hero in danger. So, `(not (has-trap ?loc))` and `(not (has-monster ?loc))` ensure that the environment is safe for the hero to break the sword without turning the situation worse.

Now, what happens after the sword is destroyed? The effect is that the hero’s hand is now free (`arm-free`), the sword is confirmed as destroyed (`is-destroyed ?s`), and the hero is no longer holding it (`not (holding ?s)`). It’s like cleaning up after finishing a task: put away the tools, clean up the mess, and free up your hands for the next task.

In simple terms, this action schema is like a set of instructions to make sure the hero does something risky (like destroying a sword) safely and responsibly, without making the dangerous dungeon situation even worse.
Parameters:
1. ?loc - cells
2. ?s - swords

Preconditions:
```
(and
    (is-destroyed ?s)
    (at-hero ?loc)
    (not (has-trap ?loc))
    (not (has-monster ?loc))
)
```

Effects:
```
(and
    (holding ?s)
    (arm-free)
    (not (holding ?s))
)
```
","(:action destroy-sword
    :parameters (?loc - cells ?s - swords)
    :precondition (and (at-hero ?loc) (holding ?s) (not (has-trap ?loc)) (not (has-monster ?loc)))
    :effect (and (arm-free) (is-destroyed ?s) (not (holding ?s)))
)","swap (holding ?s) with (is-destroyed ?s)
"
rpggame,destroy-sword,0.6022752523422241,Hard Negative (Manipulated Action),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: **Destroy** the sword that the hero currently holds. However, this can have unpleasant effects if done in a room with a trap or a monster: it triggers the trap or invites the monster to eat the hero.

Action name: destroy-sword


Your answer:
","**Explanation:**

Imagine you're helping a hero navigate a dungeon full of monsters and traps, a bit like playing a video game. Now, the hero has a sword, but in this part of the game, the hero decides to destroy the sword. To understand why certain conditions are checked before the hero can destroy the sword safely, let's break it down using the action ""destroy-sword"" from the game's rules (or in technical terms, the PDDL action schema).

Firstly, the hero needs to be in the same location as the sword. This makes sense, right? You can't throw something away or break it if it's not with you. So, the condition `(at-hero ?loc)` ensures that the hero is at the right spot to perform the action.

Secondly, the hero must be holding the sword. It’s similar to needing both hands on a bat to swing it; here, the hero needs to have the sword in hand to destroy it, checked by `(holding ?s)`.

But why check for no traps or monsters in the room? Think of it like trying to do something delicate, like assembling a model airplane, in a room with a loose tiger. Not a great idea, right? If there’s a monster in the room, destroying the sword might make the hero vulnerable to attack. Similarly, a trap could be triggered by the noise or movement, putting the hero in danger. So, `(not (has-trap ?loc))` and `(not (has-monster ?loc))` ensure that the environment is safe for the hero to break the sword without turning the situation worse.

Now, what happens after the sword is destroyed? The effect is that the hero’s hand is now free (`arm-free`), the sword is confirmed as destroyed (`is-destroyed ?s`), and the hero is no longer holding it (`not (holding ?s)`). It’s like cleaning up after finishing a task: put away the tools, clean up the mess, and free up your hands for the next task.

In simple terms, this action schema is like a set of instructions to make sure the hero does something risky (like destroying a sword) safely and responsibly, without making the dangerous dungeon situation even worse.
Parameters:
1. ?loc - cells
2. ?s - swords

Preconditions:
```
(and
    (has-monster ?loc)
    (at-hero ?loc)
    (holding ?s)
    (not (has-trap ?loc))
)
```

Effects:
```
(and
    (arm-free)
    (is-destroyed ?s)
    (not (holding ?s))
)
```
","(:action destroy-sword
    :parameters (?loc - cells ?s - swords)
    :precondition (and (at-hero ?loc) (holding ?s) (not (has-trap ?loc)) (not (has-monster ?loc)))
    :effect (and (arm-free) (is-destroyed ?s) (not (holding ?s)))
)","negate (not (has-monster ?loc)) in preconditions
"
rpggame,destroy-sword,0.6022752523422241,Hard Negative (Manipulated Action),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: **Destroy** the sword that the hero currently holds. However, this can have unpleasant effects if done in a room with a trap or a monster: it triggers the trap or invites the monster to eat the hero.

Action name: destroy-sword


Your answer:
","**Explanation:**

Imagine you're helping a hero navigate a dungeon full of monsters and traps, a bit like playing a video game. Now, the hero has a sword, but in this part of the game, the hero decides to destroy the sword. To understand why certain conditions are checked before the hero can destroy the sword safely, let's break it down using the action ""destroy-sword"" from the game's rules (or in technical terms, the PDDL action schema).

Firstly, the hero needs to be in the same location as the sword. This makes sense, right? You can't throw something away or break it if it's not with you. So, the condition `(at-hero ?loc)` ensures that the hero is at the right spot to perform the action.

Secondly, the hero must be holding the sword. It’s similar to needing both hands on a bat to swing it; here, the hero needs to have the sword in hand to destroy it, checked by `(holding ?s)`.

But why check for no traps or monsters in the room? Think of it like trying to do something delicate, like assembling a model airplane, in a room with a loose tiger. Not a great idea, right? If there’s a monster in the room, destroying the sword might make the hero vulnerable to attack. Similarly, a trap could be triggered by the noise or movement, putting the hero in danger. So, `(not (has-trap ?loc))` and `(not (has-monster ?loc))` ensure that the environment is safe for the hero to break the sword without turning the situation worse.

Now, what happens after the sword is destroyed? The effect is that the hero’s hand is now free (`arm-free`), the sword is confirmed as destroyed (`is-destroyed ?s`), and the hero is no longer holding it (`not (holding ?s)`). It’s like cleaning up after finishing a task: put away the tools, clean up the mess, and free up your hands for the next task.

In simple terms, this action schema is like a set of instructions to make sure the hero does something risky (like destroying a sword) safely and responsibly, without making the dangerous dungeon situation even worse.
Parameters:
1. ?loc - cells
2. ?s - swords

Preconditions:
```
(and
    (holding ?s)
    (not (has-trap ?loc))
    (not (has-monster ?loc))
)
```

Effects:
```
(and
    (arm-free)
    (is-destroyed ?s)
)
```
","(:action destroy-sword
    :parameters (?loc - cells ?s - swords)
    :precondition (and (at-hero ?loc) (holding ?s) (not (has-trap ?loc)) (not (has-monster ?loc)))
    :effect (and (arm-free) (is-destroyed ?s) (not (holding ?s)))
)","remove (not (holding ?s)) from effects
remove (at-hero ?loc) from preconditions
"
rpggame,destroy-sword,0.6022752523422241,Hard Negative (Manipulated Action),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: **Destroy** the sword that the hero currently holds. However, this can have unpleasant effects if done in a room with a trap or a monster: it triggers the trap or invites the monster to eat the hero.

Action name: destroy-sword


Your answer:
","**Explanation:**

Imagine you're helping a hero navigate a dungeon full of monsters and traps, a bit like playing a video game. Now, the hero has a sword, but in this part of the game, the hero decides to destroy the sword. To understand why certain conditions are checked before the hero can destroy the sword safely, let's break it down using the action ""destroy-sword"" from the game's rules (or in technical terms, the PDDL action schema).

Firstly, the hero needs to be in the same location as the sword. This makes sense, right? You can't throw something away or break it if it's not with you. So, the condition `(at-hero ?loc)` ensures that the hero is at the right spot to perform the action.

Secondly, the hero must be holding the sword. It’s similar to needing both hands on a bat to swing it; here, the hero needs to have the sword in hand to destroy it, checked by `(holding ?s)`.

But why check for no traps or monsters in the room? Think of it like trying to do something delicate, like assembling a model airplane, in a room with a loose tiger. Not a great idea, right? If there’s a monster in the room, destroying the sword might make the hero vulnerable to attack. Similarly, a trap could be triggered by the noise or movement, putting the hero in danger. So, `(not (has-trap ?loc))` and `(not (has-monster ?loc))` ensure that the environment is safe for the hero to break the sword without turning the situation worse.

Now, what happens after the sword is destroyed? The effect is that the hero’s hand is now free (`arm-free`), the sword is confirmed as destroyed (`is-destroyed ?s`), and the hero is no longer holding it (`not (holding ?s)`). It’s like cleaning up after finishing a task: put away the tools, clean up the mess, and free up your hands for the next task.

In simple terms, this action schema is like a set of instructions to make sure the hero does something risky (like destroying a sword) safely and responsibly, without making the dangerous dungeon situation even worse.
Parameters:
1. ?loc - cells
2. ?s - swords

Preconditions:
```
(and
    (at-hero ?loc)
    (holding ?s)
    (not (has-trap ?loc))
)
```

Effects:
```
(and
    (not (is-destroyed ?s))
    (arm-free)
    (not (holding ?s))
)
```
","(:action destroy-sword
    :parameters (?loc - cells ?s - swords)
    :precondition (and (at-hero ?loc) (holding ?s) (not (has-trap ?loc)) (not (has-monster ?loc)))
    :effect (and (arm-free) (is-destroyed ?s) (not (holding ?s)))
)","remove (not (has-monster ?loc)) from preconditions
negate (is-destroyed ?s) in effects
"
rpggame,destroy-sword,0.6022752523422241,Hard Negative (Manipulated Action),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: **Destroy** the sword that the hero currently holds. However, this can have unpleasant effects if done in a room with a trap or a monster: it triggers the trap or invites the monster to eat the hero.

Action name: destroy-sword


Your answer:
","**Explanation:**

Imagine you're helping a hero navigate a dungeon full of monsters and traps, a bit like playing a video game. Now, the hero has a sword, but in this part of the game, the hero decides to destroy the sword. To understand why certain conditions are checked before the hero can destroy the sword safely, let's break it down using the action ""destroy-sword"" from the game's rules (or in technical terms, the PDDL action schema).

Firstly, the hero needs to be in the same location as the sword. This makes sense, right? You can't throw something away or break it if it's not with you. So, the condition `(at-hero ?loc)` ensures that the hero is at the right spot to perform the action.

Secondly, the hero must be holding the sword. It’s similar to needing both hands on a bat to swing it; here, the hero needs to have the sword in hand to destroy it, checked by `(holding ?s)`.

But why check for no traps or monsters in the room? Think of it like trying to do something delicate, like assembling a model airplane, in a room with a loose tiger. Not a great idea, right? If there’s a monster in the room, destroying the sword might make the hero vulnerable to attack. Similarly, a trap could be triggered by the noise or movement, putting the hero in danger. So, `(not (has-trap ?loc))` and `(not (has-monster ?loc))` ensure that the environment is safe for the hero to break the sword without turning the situation worse.

Now, what happens after the sword is destroyed? The effect is that the hero’s hand is now free (`arm-free`), the sword is confirmed as destroyed (`is-destroyed ?s`), and the hero is no longer holding it (`not (holding ?s)`). It’s like cleaning up after finishing a task: put away the tools, clean up the mess, and free up your hands for the next task.

In simple terms, this action schema is like a set of instructions to make sure the hero does something risky (like destroying a sword) safely and responsibly, without making the dangerous dungeon situation even worse.
Parameters:
1. ?loc - cells
2. ?s - swords

Preconditions:
```
(and
    (arm-free)
    (not (holding ?s))
    (at-hero ?loc)
    (not (has-monster ?loc))
)
```

Effects:
```
(and
    (not (has-trap ?loc))
    (holding ?s)
    (is-destroyed ?s)
)
```
","(:action destroy-sword
    :parameters (?loc - cells ?s - swords)
    :precondition (and (at-hero ?loc) (holding ?s) (not (has-trap ?loc)) (not (has-monster ?loc)))
    :effect (and (arm-free) (is-destroyed ?s) (not (holding ?s)))
)","swap (not (has-trap ?loc)) with (arm-free)
swap (holding ?s) with (not (holding ?s))
"
rpggame,destroy-sword,0.6022752523422241,Hard Negative (Manipulated Action),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: **Destroy** the sword that the hero currently holds. However, this can have unpleasant effects if done in a room with a trap or a monster: it triggers the trap or invites the monster to eat the hero.

Action name: destroy-sword


Your answer:
","**Explanation:**

Imagine you're helping a hero navigate a dungeon full of monsters and traps, a bit like playing a video game. Now, the hero has a sword, but in this part of the game, the hero decides to destroy the sword. To understand why certain conditions are checked before the hero can destroy the sword safely, let's break it down using the action ""destroy-sword"" from the game's rules (or in technical terms, the PDDL action schema).

Firstly, the hero needs to be in the same location as the sword. This makes sense, right? You can't throw something away or break it if it's not with you. So, the condition `(at-hero ?loc)` ensures that the hero is at the right spot to perform the action.

Secondly, the hero must be holding the sword. It’s similar to needing both hands on a bat to swing it; here, the hero needs to have the sword in hand to destroy it, checked by `(holding ?s)`.

But why check for no traps or monsters in the room? Think of it like trying to do something delicate, like assembling a model airplane, in a room with a loose tiger. Not a great idea, right? If there’s a monster in the room, destroying the sword might make the hero vulnerable to attack. Similarly, a trap could be triggered by the noise or movement, putting the hero in danger. So, `(not (has-trap ?loc))` and `(not (has-monster ?loc))` ensure that the environment is safe for the hero to break the sword without turning the situation worse.

Now, what happens after the sword is destroyed? The effect is that the hero’s hand is now free (`arm-free`), the sword is confirmed as destroyed (`is-destroyed ?s`), and the hero is no longer holding it (`not (holding ?s)`). It’s like cleaning up after finishing a task: put away the tools, clean up the mess, and free up your hands for the next task.

In simple terms, this action schema is like a set of instructions to make sure the hero does something risky (like destroying a sword) safely and responsibly, without making the dangerous dungeon situation even worse.
Parameters:
1. ?loc - cells
2. ?s - swords

Preconditions:
```
(and
    (not (holding ?s))
    (at-hero ?loc)
    (holding ?s)
    (not (has-monster ?loc))
)
```

Effects:
```
(and
    (not (has-trap ?loc))
    (arm-free)
    (is-destroyed ?s)
)
```
","(:action destroy-sword
    :parameters (?loc - cells ?s - swords)
    :precondition (and (at-hero ?loc) (holding ?s) (not (has-trap ?loc)) (not (has-monster ?loc)))
    :effect (and (arm-free) (is-destroyed ?s) (not (holding ?s)))
)","swap (not (has-trap ?loc)) with (not (holding ?s))
"
rpggame,destroy-sword,0.6022752523422241,Hard Negative (Manipulated Action),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: **Destroy** the sword that the hero currently holds. However, this can have unpleasant effects if done in a room with a trap or a monster: it triggers the trap or invites the monster to eat the hero.

Action name: destroy-sword


Your answer:
","**Explanation:**

Imagine you're helping a hero navigate a dungeon full of monsters and traps, a bit like playing a video game. Now, the hero has a sword, but in this part of the game, the hero decides to destroy the sword. To understand why certain conditions are checked before the hero can destroy the sword safely, let's break it down using the action ""destroy-sword"" from the game's rules (or in technical terms, the PDDL action schema).

Firstly, the hero needs to be in the same location as the sword. This makes sense, right? You can't throw something away or break it if it's not with you. So, the condition `(at-hero ?loc)` ensures that the hero is at the right spot to perform the action.

Secondly, the hero must be holding the sword. It’s similar to needing both hands on a bat to swing it; here, the hero needs to have the sword in hand to destroy it, checked by `(holding ?s)`.

But why check for no traps or monsters in the room? Think of it like trying to do something delicate, like assembling a model airplane, in a room with a loose tiger. Not a great idea, right? If there’s a monster in the room, destroying the sword might make the hero vulnerable to attack. Similarly, a trap could be triggered by the noise or movement, putting the hero in danger. So, `(not (has-trap ?loc))` and `(not (has-monster ?loc))` ensure that the environment is safe for the hero to break the sword without turning the situation worse.

Now, what happens after the sword is destroyed? The effect is that the hero’s hand is now free (`arm-free`), the sword is confirmed as destroyed (`is-destroyed ?s`), and the hero is no longer holding it (`not (holding ?s)`). It’s like cleaning up after finishing a task: put away the tools, clean up the mess, and free up your hands for the next task.

In simple terms, this action schema is like a set of instructions to make sure the hero does something risky (like destroying a sword) safely and responsibly, without making the dangerous dungeon situation even worse.
Parameters:
1. ?loc - cells
2. ?s - swords

Preconditions:
```
(and
    (not (holding ?s))
    (holding ?s)
    (not (has-trap ?loc))
)
```

Effects:
```
(and
    (not (has-monster ?loc))
    (arm-free)
    (is-destroyed ?s)
)
```
","(:action destroy-sword
    :parameters (?loc - cells ?s - swords)
    :precondition (and (at-hero ?loc) (holding ?s) (not (has-trap ?loc)) (not (has-monster ?loc)))
    :effect (and (arm-free) (is-destroyed ?s) (not (holding ?s)))
)","remove (at-hero ?loc) from preconditions
swap (not (has-monster ?loc)) with (not (holding ?s))
"
rpggame,destroy-sword,0.6022752523422241,Hard Negative (Manipulated Action),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: **Destroy** the sword that the hero currently holds. However, this can have unpleasant effects if done in a room with a trap or a monster: it triggers the trap or invites the monster to eat the hero.

Action name: destroy-sword


Your answer:
","**Explanation:**

Imagine you're helping a hero navigate a dungeon full of monsters and traps, a bit like playing a video game. Now, the hero has a sword, but in this part of the game, the hero decides to destroy the sword. To understand why certain conditions are checked before the hero can destroy the sword safely, let's break it down using the action ""destroy-sword"" from the game's rules (or in technical terms, the PDDL action schema).

Firstly, the hero needs to be in the same location as the sword. This makes sense, right? You can't throw something away or break it if it's not with you. So, the condition `(at-hero ?loc)` ensures that the hero is at the right spot to perform the action.

Secondly, the hero must be holding the sword. It’s similar to needing both hands on a bat to swing it; here, the hero needs to have the sword in hand to destroy it, checked by `(holding ?s)`.

But why check for no traps or monsters in the room? Think of it like trying to do something delicate, like assembling a model airplane, in a room with a loose tiger. Not a great idea, right? If there’s a monster in the room, destroying the sword might make the hero vulnerable to attack. Similarly, a trap could be triggered by the noise or movement, putting the hero in danger. So, `(not (has-trap ?loc))` and `(not (has-monster ?loc))` ensure that the environment is safe for the hero to break the sword without turning the situation worse.

Now, what happens after the sword is destroyed? The effect is that the hero’s hand is now free (`arm-free`), the sword is confirmed as destroyed (`is-destroyed ?s`), and the hero is no longer holding it (`not (holding ?s)`). It’s like cleaning up after finishing a task: put away the tools, clean up the mess, and free up your hands for the next task.

In simple terms, this action schema is like a set of instructions to make sure the hero does something risky (like destroying a sword) safely and responsibly, without making the dangerous dungeon situation even worse.
Parameters:
1. ?loc - cells
2. ?s - swords

Preconditions:
```
(and
    (not (holding ?s))
    (at-hero ?loc)
    (not (has-trap ?loc))
)
```

Effects:
```
(and
    (arm-free)
    (is-destroyed ?s)
    (not (holding ?s))
)
```
","(:action destroy-sword
    :parameters (?loc - cells ?s - swords)
    :precondition (and (at-hero ?loc) (holding ?s) (not (has-trap ?loc)) (not (has-monster ?loc)))
    :effect (and (arm-free) (is-destroyed ?s) (not (holding ?s)))
)","remove (not (has-monster ?loc)) from preconditions
negate (holding ?s) in preconditions
"
rpggame,destroy-sword,0.6022752523422241,Hard Negative (Manipulated Action),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape

A list of available predicates
1. (at-hero ?loc - cells) ;;  Hero's cell location
2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location
3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster
4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap
5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed
6. (connected ?from ?to - cells) ;; connects cells
7. (arm-free) ;; Hero's hand is free
8. (holding ?s - swords) ;; Hero's holding a sword
9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed

Action Description: **Destroy** the sword that the hero currently holds. However, this can have unpleasant effects if done in a room with a trap or a monster: it triggers the trap or invites the monster to eat the hero.

Action name: destroy-sword


Your answer:
","**Explanation:**

Imagine you're helping a hero navigate a dungeon full of monsters and traps, a bit like playing a video game. Now, the hero has a sword, but in this part of the game, the hero decides to destroy the sword. To understand why certain conditions are checked before the hero can destroy the sword safely, let's break it down using the action ""destroy-sword"" from the game's rules (or in technical terms, the PDDL action schema).

Firstly, the hero needs to be in the same location as the sword. This makes sense, right? You can't throw something away or break it if it's not with you. So, the condition `(at-hero ?loc)` ensures that the hero is at the right spot to perform the action.

Secondly, the hero must be holding the sword. It’s similar to needing both hands on a bat to swing it; here, the hero needs to have the sword in hand to destroy it, checked by `(holding ?s)`.

But why check for no traps or monsters in the room? Think of it like trying to do something delicate, like assembling a model airplane, in a room with a loose tiger. Not a great idea, right? If there’s a monster in the room, destroying the sword might make the hero vulnerable to attack. Similarly, a trap could be triggered by the noise or movement, putting the hero in danger. So, `(not (has-trap ?loc))` and `(not (has-monster ?loc))` ensure that the environment is safe for the hero to break the sword without turning the situation worse.

Now, what happens after the sword is destroyed? The effect is that the hero’s hand is now free (`arm-free`), the sword is confirmed as destroyed (`is-destroyed ?s`), and the hero is no longer holding it (`not (holding ?s)`). It’s like cleaning up after finishing a task: put away the tools, clean up the mess, and free up your hands for the next task.

In simple terms, this action schema is like a set of instructions to make sure the hero does something risky (like destroying a sword) safely and responsibly, without making the dangerous dungeon situation even worse.
Parameters:
1. ?loc - cells
2. ?s - swords

Preconditions:
```
(and
    (has-monster ?loc)
    (at-hero ?loc)
    (holding ?s)
    (not (has-trap ?loc))
)
```

Effects:
```
(and
    (arm-free)
    (not (holding ?s))
)
```
","(:action destroy-sword
    :parameters (?loc - cells ?s - swords)
    :precondition (and (at-hero ?loc) (holding ?s) (not (has-trap ?loc)) (not (has-monster ?loc)))
    :effect (and (arm-free) (is-destroyed ?s) (not (holding ?s)))
)","negate (not (has-monster ?loc)) in preconditions
remove (is-destroyed ?s) from effects
"
minecraft,recall,0.48663029074668884,Positive (Correct Match),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: Imagine the agent (like a Minecraft player) has an ability to teleport an item they are currently using (equipped) straight into their inventory. That's what the recall action does. It's like saying, 'Okay, I'm done with this axe; let's magically put it back in my backpack.' This action not only puts the item away but also ensures that the agent's hands are now empty and ready for something else.

Action name: recall


Your answer:
","Parameters:
1. ?var0 - moveable
2. ?var1 - agent

Preconditions:
```
(equipped ?var0 ?var1)
```

Effects:
```
(and
    (inventory ?var0)
    (not (equipped ?var0 ?var1))
    (handsfree ?var1)
)
```
","(:action recall
    :parameters (?var0 - moveable ?var1 - agent)
    :precondition (equipped ?var0 ?var1)
    :effect (and (inventory ?var0) (not (equipped ?var0 ?var1)) (handsfree ?var1))
)",
minecraft,recall,0.48663029074668884,Positive (Correct Match),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: Imagine the agent (like a Minecraft player) has an ability to teleport an item they are currently using (equipped) straight into their inventory. That's what the recall action does. It's like saying, 'Okay, I'm done with this axe; let's magically put it back in my backpack.' This action not only puts the item away but also ensures that the agent's hands are now empty and ready for something else.

Action name: recall


Your answer:

**Explanation:** Let's imagine you're playing a game similar to Minecraft. In this game, you have an action called ""recall,"" which lets you move an item you are holding directly into your backpack, making your hands empty again. To understand how this action works in the game's programming language (PDDL), let's break down the requirements and results of this action step-by-step.

1. **Precondition (What needs to be true before the action?):** 
   The precondition for the ""recall"" action is `(equipped ?var0 ?var1)`. This simply means that the item (`?var0`) must be currently held (equipped) by the player (`?var1`). Think of it as checking if you really have the axe in your hand before you can put it away.

2. **Effect (What happens after the action is done?):** 
   The effects of this action are several:
   - `(inventory ?var0)`: The item you were holding is now in your inventory. This is like saying, ""Okay, the axe is now in my backpack.""
   - `(not (equipped ?var0 ?var1))`: You are no longer holding the item. This ensures that the game knows the axe is no longer in your hand.
   - `(handsfree ?var1)`: Your hands are now empty. This part is like confirming that your hands are free, ready to grab or use something else.

By setting these preconditions and effects, the game ensures that the action of recalling an item (like teleporting your axe to your backpack) is logical and consistent with the game's rules. You need to be holding the item first to store it away, and after storing it, your hands should indeed be empty, ready for the next task. This keeps the game from getting confused, like trying to put away an axe you aren’t holding or ending up with an axe still in your hand after you've tried to store it.

In summary, the ""recall"" action in the game ensures everything happens in an orderly and expected manner, making your gameplay experience smooth and realistic within the game's world.","Parameters:
1. ?var0 - moveable
2. ?var1 - agent

Preconditions:
```
(equipped ?var0 ?var1)
```

Effects:
```
(and
    (inventory ?var0)
    (not (equipped ?var0 ?var1))
    (handsfree ?var1)
)
```
","(:action recall
    :parameters (?var0 - moveable ?var1 - agent)
    :precondition (equipped ?var0 ?var1)
    :effect (and (inventory ?var0) (not (equipped ?var0 ?var1)) (handsfree ?var1))
)",
minecraft,recall,0.5239914655685425,Positive (Correct Match),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: Imagine the agent (like a Minecraft player) has an ability to teleport an item they are currently using (equipped) straight into their inventory. That's what the recall action does. It's like saying, 'Okay, I'm done with this axe; let's magically put it back in my backpack.' This action not only puts the item away but also ensures that the agent's hands are now empty and ready for something else.

Action name: recall


Your answer:
","**Explanation:** Let's imagine you're playing a game similar to Minecraft. In this game, you have an action called ""recall,"" which lets you move an item you are holding directly into your backpack, making your hands empty again. To understand how this action works in the game's programming language (PDDL), let's break down the requirements and results of this action step-by-step.

1. **Precondition (What needs to be true before the action?):** 
   The precondition for the ""recall"" action is `(equipped ?var0 ?var1)`. This simply means that the item (`?var0`) must be currently held (equipped) by the player (`?var1`). Think of it as checking if you really have the axe in your hand before you can put it away.

2. **Effect (What happens after the action is done?):** 
   The effects of this action are several:
   - `(inventory ?var0)`: The item you were holding is now in your inventory. This is like saying, ""Okay, the axe is now in my backpack.""
   - `(not (equipped ?var0 ?var1))`: You are no longer holding the item. This ensures that the game knows the axe is no longer in your hand.
   - `(handsfree ?var1)`: Your hands are now empty. This part is like confirming that your hands are free, ready to grab or use something else.

By setting these preconditions and effects, the game ensures that the action of recalling an item (like teleporting your axe to your backpack) is logical and consistent with the game's rules. You need to be holding the item first to store it away, and after storing it, your hands should indeed be empty, ready for the next task. This keeps the game from getting confused, like trying to put away an axe you aren’t holding or ending up with an axe still in your hand after you've tried to store it.

In summary, the ""recall"" action in the game ensures everything happens in an orderly and expected manner, making your gameplay experience smooth and realistic within the game's world.
Parameters:
1. ?var0 - moveable
2. ?var1 - agent

Preconditions:
```
(equipped ?var0 ?var1)
```

Effects:
```
(and
    (inventory ?var0)
    (not (equipped ?var0 ?var1))
    (handsfree ?var1)
)
```
","(:action recall
    :parameters (?var0 - moveable ?var1 - agent)
    :precondition (equipped ?var0 ?var1)
    :effect (and (inventory ?var0) (not (equipped ?var0 ?var1)) (handsfree ?var1))
)",
minecraft,recall,0.17881816625595093,Easy Negative (Inter-Domain Mismatch),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: Imagine the agent (like a Minecraft player) has an ability to teleport an item they are currently using (equipped) straight into their inventory. That's what the recall action does. It's like saying, 'Okay, I'm done with this axe; let's magically put it back in my backpack.' This action not only puts the item away but also ensures that the agent's hands are now empty and ready for something else.

Action name: recall


Your answer:
","Parameters:
1. ?from - cells
2. ?to - cells

Preconditions:
```
(and
    (connected ?from ?to)
    (at-hero ?from)
    (not (is-destroyed ?to))
    (not (has-trap ?from))
    (has-trap ?to)
    (arm-free)
)
```

Effects:
```
(and
    (at-hero ?to)
    (is-destroyed ?from)
    (not (at-hero ?from))
)
```
","(:action recall
    :parameters (?var0 - moveable ?var1 - agent)
    :precondition (equipped ?var0 ?var1)
    :effect (and (inventory ?var0) (not (equipped ?var0 ?var1)) (handsfree ?var1))
)",
minecraft,recall,0.22251534461975098,Easy Negative (Inter-Domain Mismatch),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: Imagine the agent (like a Minecraft player) has an ability to teleport an item they are currently using (equipped) straight into their inventory. That's what the recall action does. It's like saying, 'Okay, I'm done with this axe; let's magically put it back in my backpack.' This action not only puts the item away but also ensures that the agent's hands are now empty and ready for something else.

Action name: recall


Your answer:
","Parameters:
1. ?from - cells
2. ?to - cells

Preconditions:
```
(and
    (connected ?from ?to)
    (at-hero ?from)
    (not (has-trap ?from))
    (not (is-destroyed ?to))
    (not (has-trap ?to))
    (not (has-monster ?to))
)
```

Effects:
```
(and
    (at-hero ?to)
    (is-destroyed ?from)
    (not (at-hero ?from))
)
```
","(:action recall
    :parameters (?var0 - moveable ?var1 - agent)
    :precondition (equipped ?var0 ?var1)
    :effect (and (inventory ?var0) (not (equipped ?var0 ?var1)) (handsfree ?var1))
)",
minecraft,recall,0.15997400879859924,Easy Negative (Inter-Domain Mismatch),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: Imagine the agent (like a Minecraft player) has an ability to teleport an item they are currently using (equipped) straight into their inventory. That's what the recall action does. It's like saying, 'Okay, I'm done with this axe; let's magically put it back in my backpack.' This action not only puts the item away but also ensures that the agent's hands are now empty and ready for something else.

Action name: recall


Your answer:
","Parameters:
1. ?loc - cells
2. ?s - swords

Preconditions:
```
(and
    (at-hero ?loc)
    (at-sword ?s ?loc)
    (arm-free)
)
```

Effects:
```
(and
    (holding ?s)
    (not (at-sword ?s ?loc))
    (not (arm-free))
)
```
","(:action recall
    :parameters (?var0 - moveable ?var1 - agent)
    :precondition (equipped ?var0 ?var1)
    :effect (and (inventory ?var0) (not (equipped ?var0 ?var1)) (handsfree ?var1))
)",
minecraft,recall,0.30057987570762634,Easy Negative (Inter-Domain Mismatch),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: Imagine the agent (like a Minecraft player) has an ability to teleport an item they are currently using (equipped) straight into their inventory. That's what the recall action does. It's like saying, 'Okay, I'm done with this axe; let's magically put it back in my backpack.' This action not only puts the item away but also ensures that the agent's hands are now empty and ready for something else.

Action name: recall


Your answer:
","Parameters:
1. ?loc - cells

Preconditions:
```
(and
    (at-hero ?loc)
    (arm-free)
    (has-trap ?loc)
)
```

Effects:
```
(and
    (trap-disarmed ?loc)
    (not (has-trap ?loc))
)
```
","(:action recall
    :parameters (?var0 - moveable ?var1 - agent)
    :precondition (equipped ?var0 ?var1)
    :effect (and (inventory ?var0) (not (equipped ?var0 ?var1)) (handsfree ?var1))
)",
minecraft,recall,0.2988182306289673,Easy Negative (Inter-Domain Mismatch),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: Imagine the agent (like a Minecraft player) has an ability to teleport an item they are currently using (equipped) straight into their inventory. That's what the recall action does. It's like saying, 'Okay, I'm done with this axe; let's magically put it back in my backpack.' This action not only puts the item away but also ensures that the agent's hands are now empty and ready for something else.

Action name: recall


Your answer:
","Parameters:
1. ?from - cells
2. ?to - cells
3. ?s - swords

Preconditions:
```
(and
    (connected ?from ?to)
    (at-hero ?from)
    (has-monster ?to)
    (not (is-destroyed ?to))
    (not (has-trap ?from))
    (holding ?s)
)
```

Effects:
```
(and
    (at-hero ?to)
    (is-destroyed ?from)
    (not (at-hero ?from))
)
```
","(:action recall
    :parameters (?var0 - moveable ?var1 - agent)
    :precondition (equipped ?var0 ?var1)
    :effect (and (inventory ?var0) (not (equipped ?var0 ?var1)) (handsfree ?var1))
)",
minecraft,recall,0.2034735381603241,Easy Negative (Inter-Domain Mismatch),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: Imagine the agent (like a Minecraft player) has an ability to teleport an item they are currently using (equipped) straight into their inventory. That's what the recall action does. It's like saying, 'Okay, I'm done with this axe; let's magically put it back in my backpack.' This action not only puts the item away but also ensures that the agent's hands are now empty and ready for something else.

Action name: recall


Your answer:
","Parameters:
1. ?loc - cells
2. ?s - swords

Preconditions:
```
(and
    (at-hero ?loc)
    (holding ?s)
    (not (has-trap ?loc))
    (not (has-monster ?loc))
)
```

Effects:
```
(and
    (arm-free)
    (is-destroyed ?s)
    (not (holding ?s))
)
```
","(:action recall
    :parameters (?var0 - moveable ?var1 - agent)
    :precondition (equipped ?var0 ?var1)
    :effect (and (inventory ?var0) (not (equipped ?var0 ?var1)) (handsfree ?var1))
)",
minecraft,recall,0.17881816625595093,Easy Negative (Inter-Domain Mismatch),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: Imagine the agent (like a Minecraft player) has an ability to teleport an item they are currently using (equipped) straight into their inventory. That's what the recall action does. It's like saying, 'Okay, I'm done with this axe; let's magically put it back in my backpack.' This action not only puts the item away but also ensures that the agent's hands are now empty and ready for something else.

Action name: recall


Your answer:

**Explanation:** Let's imagine you're playing a game similar to Minecraft. In this game, you have an action called ""recall,"" which lets you move an item you are holding directly into your backpack, making your hands empty again. To understand how this action works in the game's programming language (PDDL), let's break down the requirements and results of this action step-by-step.

1. **Precondition (What needs to be true before the action?):** 
   The precondition for the ""recall"" action is `(equipped ?var0 ?var1)`. This simply means that the item (`?var0`) must be currently held (equipped) by the player (`?var1`). Think of it as checking if you really have the axe in your hand before you can put it away.

2. **Effect (What happens after the action is done?):** 
   The effects of this action are several:
   - `(inventory ?var0)`: The item you were holding is now in your inventory. This is like saying, ""Okay, the axe is now in my backpack.""
   - `(not (equipped ?var0 ?var1))`: You are no longer holding the item. This ensures that the game knows the axe is no longer in your hand.
   - `(handsfree ?var1)`: Your hands are now empty. This part is like confirming that your hands are free, ready to grab or use something else.

By setting these preconditions and effects, the game ensures that the action of recalling an item (like teleporting your axe to your backpack) is logical and consistent with the game's rules. You need to be holding the item first to store it away, and after storing it, your hands should indeed be empty, ready for the next task. This keeps the game from getting confused, like trying to put away an axe you aren’t holding or ending up with an axe still in your hand after you've tried to store it.

In summary, the ""recall"" action in the game ensures everything happens in an orderly and expected manner, making your gameplay experience smooth and realistic within the game's world.","Parameters:
1. ?from - cells
2. ?to - cells

Preconditions:
```
(and
    (connected ?from ?to)
    (at-hero ?from)
    (not (is-destroyed ?to))
    (not (has-trap ?from))
    (has-trap ?to)
    (arm-free)
)
```

Effects:
```
(and
    (at-hero ?to)
    (is-destroyed ?from)
    (not (at-hero ?from))
)
```
","(:action recall
    :parameters (?var0 - moveable ?var1 - agent)
    :precondition (equipped ?var0 ?var1)
    :effect (and (inventory ?var0) (not (equipped ?var0 ?var1)) (handsfree ?var1))
)",
minecraft,recall,0.22251534461975098,Easy Negative (Inter-Domain Mismatch),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: Imagine the agent (like a Minecraft player) has an ability to teleport an item they are currently using (equipped) straight into their inventory. That's what the recall action does. It's like saying, 'Okay, I'm done with this axe; let's magically put it back in my backpack.' This action not only puts the item away but also ensures that the agent's hands are now empty and ready for something else.

Action name: recall


Your answer:

**Explanation:** Let's imagine you're playing a game similar to Minecraft. In this game, you have an action called ""recall,"" which lets you move an item you are holding directly into your backpack, making your hands empty again. To understand how this action works in the game's programming language (PDDL), let's break down the requirements and results of this action step-by-step.

1. **Precondition (What needs to be true before the action?):** 
   The precondition for the ""recall"" action is `(equipped ?var0 ?var1)`. This simply means that the item (`?var0`) must be currently held (equipped) by the player (`?var1`). Think of it as checking if you really have the axe in your hand before you can put it away.

2. **Effect (What happens after the action is done?):** 
   The effects of this action are several:
   - `(inventory ?var0)`: The item you were holding is now in your inventory. This is like saying, ""Okay, the axe is now in my backpack.""
   - `(not (equipped ?var0 ?var1))`: You are no longer holding the item. This ensures that the game knows the axe is no longer in your hand.
   - `(handsfree ?var1)`: Your hands are now empty. This part is like confirming that your hands are free, ready to grab or use something else.

By setting these preconditions and effects, the game ensures that the action of recalling an item (like teleporting your axe to your backpack) is logical and consistent with the game's rules. You need to be holding the item first to store it away, and after storing it, your hands should indeed be empty, ready for the next task. This keeps the game from getting confused, like trying to put away an axe you aren’t holding or ending up with an axe still in your hand after you've tried to store it.

In summary, the ""recall"" action in the game ensures everything happens in an orderly and expected manner, making your gameplay experience smooth and realistic within the game's world.","Parameters:
1. ?from - cells
2. ?to - cells

Preconditions:
```
(and
    (connected ?from ?to)
    (at-hero ?from)
    (not (has-trap ?from))
    (not (is-destroyed ?to))
    (not (has-trap ?to))
    (not (has-monster ?to))
)
```

Effects:
```
(and
    (at-hero ?to)
    (is-destroyed ?from)
    (not (at-hero ?from))
)
```
","(:action recall
    :parameters (?var0 - moveable ?var1 - agent)
    :precondition (equipped ?var0 ?var1)
    :effect (and (inventory ?var0) (not (equipped ?var0 ?var1)) (handsfree ?var1))
)",
minecraft,recall,0.15997400879859924,Easy Negative (Inter-Domain Mismatch),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: Imagine the agent (like a Minecraft player) has an ability to teleport an item they are currently using (equipped) straight into their inventory. That's what the recall action does. It's like saying, 'Okay, I'm done with this axe; let's magically put it back in my backpack.' This action not only puts the item away but also ensures that the agent's hands are now empty and ready for something else.

Action name: recall


Your answer:

**Explanation:** Let's imagine you're playing a game similar to Minecraft. In this game, you have an action called ""recall,"" which lets you move an item you are holding directly into your backpack, making your hands empty again. To understand how this action works in the game's programming language (PDDL), let's break down the requirements and results of this action step-by-step.

1. **Precondition (What needs to be true before the action?):** 
   The precondition for the ""recall"" action is `(equipped ?var0 ?var1)`. This simply means that the item (`?var0`) must be currently held (equipped) by the player (`?var1`). Think of it as checking if you really have the axe in your hand before you can put it away.

2. **Effect (What happens after the action is done?):** 
   The effects of this action are several:
   - `(inventory ?var0)`: The item you were holding is now in your inventory. This is like saying, ""Okay, the axe is now in my backpack.""
   - `(not (equipped ?var0 ?var1))`: You are no longer holding the item. This ensures that the game knows the axe is no longer in your hand.
   - `(handsfree ?var1)`: Your hands are now empty. This part is like confirming that your hands are free, ready to grab or use something else.

By setting these preconditions and effects, the game ensures that the action of recalling an item (like teleporting your axe to your backpack) is logical and consistent with the game's rules. You need to be holding the item first to store it away, and after storing it, your hands should indeed be empty, ready for the next task. This keeps the game from getting confused, like trying to put away an axe you aren’t holding or ending up with an axe still in your hand after you've tried to store it.

In summary, the ""recall"" action in the game ensures everything happens in an orderly and expected manner, making your gameplay experience smooth and realistic within the game's world.","Parameters:
1. ?loc - cells
2. ?s - swords

Preconditions:
```
(and
    (at-hero ?loc)
    (at-sword ?s ?loc)
    (arm-free)
)
```

Effects:
```
(and
    (holding ?s)
    (not (at-sword ?s ?loc))
    (not (arm-free))
)
```
","(:action recall
    :parameters (?var0 - moveable ?var1 - agent)
    :precondition (equipped ?var0 ?var1)
    :effect (and (inventory ?var0) (not (equipped ?var0 ?var1)) (handsfree ?var1))
)",
minecraft,recall,0.30057987570762634,Easy Negative (Inter-Domain Mismatch),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: Imagine the agent (like a Minecraft player) has an ability to teleport an item they are currently using (equipped) straight into their inventory. That's what the recall action does. It's like saying, 'Okay, I'm done with this axe; let's magically put it back in my backpack.' This action not only puts the item away but also ensures that the agent's hands are now empty and ready for something else.

Action name: recall


Your answer:

**Explanation:** Let's imagine you're playing a game similar to Minecraft. In this game, you have an action called ""recall,"" which lets you move an item you are holding directly into your backpack, making your hands empty again. To understand how this action works in the game's programming language (PDDL), let's break down the requirements and results of this action step-by-step.

1. **Precondition (What needs to be true before the action?):** 
   The precondition for the ""recall"" action is `(equipped ?var0 ?var1)`. This simply means that the item (`?var0`) must be currently held (equipped) by the player (`?var1`). Think of it as checking if you really have the axe in your hand before you can put it away.

2. **Effect (What happens after the action is done?):** 
   The effects of this action are several:
   - `(inventory ?var0)`: The item you were holding is now in your inventory. This is like saying, ""Okay, the axe is now in my backpack.""
   - `(not (equipped ?var0 ?var1))`: You are no longer holding the item. This ensures that the game knows the axe is no longer in your hand.
   - `(handsfree ?var1)`: Your hands are now empty. This part is like confirming that your hands are free, ready to grab or use something else.

By setting these preconditions and effects, the game ensures that the action of recalling an item (like teleporting your axe to your backpack) is logical and consistent with the game's rules. You need to be holding the item first to store it away, and after storing it, your hands should indeed be empty, ready for the next task. This keeps the game from getting confused, like trying to put away an axe you aren’t holding or ending up with an axe still in your hand after you've tried to store it.

In summary, the ""recall"" action in the game ensures everything happens in an orderly and expected manner, making your gameplay experience smooth and realistic within the game's world.","Parameters:
1. ?loc - cells

Preconditions:
```
(and
    (at-hero ?loc)
    (arm-free)
    (has-trap ?loc)
)
```

Effects:
```
(and
    (trap-disarmed ?loc)
    (not (has-trap ?loc))
)
```
","(:action recall
    :parameters (?var0 - moveable ?var1 - agent)
    :precondition (equipped ?var0 ?var1)
    :effect (and (inventory ?var0) (not (equipped ?var0 ?var1)) (handsfree ?var1))
)",
minecraft,recall,0.2988182306289673,Easy Negative (Inter-Domain Mismatch),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: Imagine the agent (like a Minecraft player) has an ability to teleport an item they are currently using (equipped) straight into their inventory. That's what the recall action does. It's like saying, 'Okay, I'm done with this axe; let's magically put it back in my backpack.' This action not only puts the item away but also ensures that the agent's hands are now empty and ready for something else.

Action name: recall


Your answer:

**Explanation:** Let's imagine you're playing a game similar to Minecraft. In this game, you have an action called ""recall,"" which lets you move an item you are holding directly into your backpack, making your hands empty again. To understand how this action works in the game's programming language (PDDL), let's break down the requirements and results of this action step-by-step.

1. **Precondition (What needs to be true before the action?):** 
   The precondition for the ""recall"" action is `(equipped ?var0 ?var1)`. This simply means that the item (`?var0`) must be currently held (equipped) by the player (`?var1`). Think of it as checking if you really have the axe in your hand before you can put it away.

2. **Effect (What happens after the action is done?):** 
   The effects of this action are several:
   - `(inventory ?var0)`: The item you were holding is now in your inventory. This is like saying, ""Okay, the axe is now in my backpack.""
   - `(not (equipped ?var0 ?var1))`: You are no longer holding the item. This ensures that the game knows the axe is no longer in your hand.
   - `(handsfree ?var1)`: Your hands are now empty. This part is like confirming that your hands are free, ready to grab or use something else.

By setting these preconditions and effects, the game ensures that the action of recalling an item (like teleporting your axe to your backpack) is logical and consistent with the game's rules. You need to be holding the item first to store it away, and after storing it, your hands should indeed be empty, ready for the next task. This keeps the game from getting confused, like trying to put away an axe you aren’t holding or ending up with an axe still in your hand after you've tried to store it.

In summary, the ""recall"" action in the game ensures everything happens in an orderly and expected manner, making your gameplay experience smooth and realistic within the game's world.","Parameters:
1. ?from - cells
2. ?to - cells
3. ?s - swords

Preconditions:
```
(and
    (connected ?from ?to)
    (at-hero ?from)
    (has-monster ?to)
    (not (is-destroyed ?to))
    (not (has-trap ?from))
    (holding ?s)
)
```

Effects:
```
(and
    (at-hero ?to)
    (is-destroyed ?from)
    (not (at-hero ?from))
)
```
","(:action recall
    :parameters (?var0 - moveable ?var1 - agent)
    :precondition (equipped ?var0 ?var1)
    :effect (and (inventory ?var0) (not (equipped ?var0 ?var1)) (handsfree ?var1))
)",
minecraft,recall,0.2034735381603241,Easy Negative (Inter-Domain Mismatch),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: Imagine the agent (like a Minecraft player) has an ability to teleport an item they are currently using (equipped) straight into their inventory. That's what the recall action does. It's like saying, 'Okay, I'm done with this axe; let's magically put it back in my backpack.' This action not only puts the item away but also ensures that the agent's hands are now empty and ready for something else.

Action name: recall


Your answer:

**Explanation:** Let's imagine you're playing a game similar to Minecraft. In this game, you have an action called ""recall,"" which lets you move an item you are holding directly into your backpack, making your hands empty again. To understand how this action works in the game's programming language (PDDL), let's break down the requirements and results of this action step-by-step.

1. **Precondition (What needs to be true before the action?):** 
   The precondition for the ""recall"" action is `(equipped ?var0 ?var1)`. This simply means that the item (`?var0`) must be currently held (equipped) by the player (`?var1`). Think of it as checking if you really have the axe in your hand before you can put it away.

2. **Effect (What happens after the action is done?):** 
   The effects of this action are several:
   - `(inventory ?var0)`: The item you were holding is now in your inventory. This is like saying, ""Okay, the axe is now in my backpack.""
   - `(not (equipped ?var0 ?var1))`: You are no longer holding the item. This ensures that the game knows the axe is no longer in your hand.
   - `(handsfree ?var1)`: Your hands are now empty. This part is like confirming that your hands are free, ready to grab or use something else.

By setting these preconditions and effects, the game ensures that the action of recalling an item (like teleporting your axe to your backpack) is logical and consistent with the game's rules. You need to be holding the item first to store it away, and after storing it, your hands should indeed be empty, ready for the next task. This keeps the game from getting confused, like trying to put away an axe you aren’t holding or ending up with an axe still in your hand after you've tried to store it.

In summary, the ""recall"" action in the game ensures everything happens in an orderly and expected manner, making your gameplay experience smooth and realistic within the game's world.","Parameters:
1. ?loc - cells
2. ?s - swords

Preconditions:
```
(and
    (at-hero ?loc)
    (holding ?s)
    (not (has-trap ?loc))
    (not (has-monster ?loc))
)
```

Effects:
```
(and
    (arm-free)
    (is-destroyed ?s)
    (not (holding ?s))
)
```
","(:action recall
    :parameters (?var0 - moveable ?var1 - agent)
    :precondition (equipped ?var0 ?var1)
    :effect (and (inventory ?var0) (not (equipped ?var0 ?var1)) (handsfree ?var1))
)",
minecraft,recall,0.28263044357299805,Easy Negative (Inter-Domain Mismatch),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: Imagine the agent (like a Minecraft player) has an ability to teleport an item they are currently using (equipped) straight into their inventory. That's what the recall action does. It's like saying, 'Okay, I'm done with this axe; let's magically put it back in my backpack.' This action not only puts the item away but also ensures that the agent's hands are now empty and ready for something else.

Action name: recall


Your answer:
","**Explanation:**

Imagine you're guiding a hero who just woke up in a mysterious dungeon. Each room can have different things: some are empty, others have monsters, some have traps, and a few might have swords. There's also a special room with an exit—our hero's goal.

Now, let's talk about the action called **move-to-trap**. This action involves our hero moving from one room (we'll call it ""Room A"") to another room (""Room B""), where, unfortunately, there's a trap waiting. Here's why each part of the plan (or action schema) makes sense:

1. **Connected Rooms**: Our hero can only move to a room directly connected to the one they're currently in. This is like being in your house and only being able to walk into rooms that have doors leading from where you are now.

2. **Hero's Current Location**: The hero must start in Room A to move to Room B. You can't move from a place if you're not actually there, right?

3. **Room B Not Destroyed**: The room our hero is moving to mustn't be already destroyed (or in ruins). It's like making sure the bridge you want to cross hasn't collapsed.

4. **Room A Doesn't Have a Trap**: It’s safer if the room our hero is leaving doesn't have a trap. Imagine trying to leave a room with a trap; it could activate and cause trouble!

5. **Room B Has a Trap**: Since the action is called **move-to-trap**, it specifically involves moving to a room with a trap, almost like knowing there's a puddle ahead but stepping into it anyway because it's the only path forward.

6. **Hero's Arm is Free**: This indicates that the hero isn’t holding anything like a sword. It’s important because handling traps might require free hands—think about needing your hands free to disarm or avoid a trap carefully.

When our hero completes this action, several things happen:
- **Hero is now in Room B**: Just like when you walk into another room, you’re no longer in the first room.
- **Room A is destroyed**: This could mean the hero leaves it in a way that no one can follow—maybe they close a heavy door that locks automatically.
- **Hero is no longer in Room A**: It confirms that the hero has completely left Room A.

This action is designed for specific situations in the dungeon where the hero might need to move strategically, even into risky areas, to navigate through the dungeon and eventually find the exit.
Parameters:
1. ?from - cells
2. ?to - cells

Preconditions:
```
(and
    (connected ?from ?to)
    (at-hero ?from)
    (not (is-destroyed ?to))
    (not (has-trap ?from))
    (has-trap ?to)
    (arm-free)
)
```

Effects:
```
(and
    (at-hero ?to)
    (is-destroyed ?from)
    (not (at-hero ?from))
)
```
","(:action recall
    :parameters (?var0 - moveable ?var1 - agent)
    :precondition (equipped ?var0 ?var1)
    :effect (and (inventory ?var0) (not (equipped ?var0 ?var1)) (handsfree ?var1))
)",
minecraft,recall,0.28654181957244873,Easy Negative (Inter-Domain Mismatch),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: Imagine the agent (like a Minecraft player) has an ability to teleport an item they are currently using (equipped) straight into their inventory. That's what the recall action does. It's like saying, 'Okay, I'm done with this axe; let's magically put it back in my backpack.' This action not only puts the item away but also ensures that the agent's hands are now empty and ready for something else.

Action name: recall


Your answer:
","**Explanation:**

Imagine our hero in a big, scary dungeon, just like a character from a fairy tale or a video game. The dungeon has several rooms, and some rooms are safe while others have monsters or traps. The hero's goal is to escape from this dungeon, moving from one room to another until he finds the exit.

Now, let's talk about the action called ""move"" that our hero can take. The action ""move"" lets the hero go from one room (we'll call this the ""current room"") to a connected room (let's call this the ""next room""). Think of the dungeon like a big house with many doors connecting the rooms; the hero can only move through a door if it’s open and the room on the other side is safe.

In the PDDL (a kind of programming language for planning what actions to take), the action ""move"" needs some conditions to be met before the hero can move:
1. **The rooms must be connected:** Just like you can't walk through a wall at home, the hero can only move to a room if there's a direct connection (like a doorway or a corridor).
2. **The hero must be in the current room:** The hero can only leave a room if he's actually in it.
3. **The current room shouldn’t have a trap that could hurt him.**
4. **The next room shouldn’t be destroyed:** The hero can't go into a room if it’s already been collapsed or destroyed (maybe from a previous adventure!).
5. **The next room shouldn’t have a trap or a monster:** This makes sure our hero doesn’t walk into new danger.

When the hero moves:
- **He is now in the next room:** Just like if you walk to another room in your house, you're then in that new room.
- **The room he left gets destroyed:** This might sound strange, but imagine if every time he left a room, the door magically closed and locked forever, so he can’t go back the same way.
- **He is no longer in the current room:** This is just confirming that he has moved on from the previous room.

These rules help our hero make smart moves through the dungeon, avoiding danger and making progress towards escape. This way of setting up the hero's actions makes sure he can navigate through the dungeon safely and eventually find his way out.
Parameters:
1. ?from - cells
2. ?to - cells

Preconditions:
```
(and
    (connected ?from ?to)
    (at-hero ?from)
    (not (has-trap ?from))
    (not (is-destroyed ?to))
    (not (has-trap ?to))
    (not (has-monster ?to))
)
```

Effects:
```
(and
    (at-hero ?to)
    (is-destroyed ?from)
    (not (at-hero ?from))
)
```
","(:action recall
    :parameters (?var0 - moveable ?var1 - agent)
    :precondition (equipped ?var0 ?var1)
    :effect (and (inventory ?var0) (not (equipped ?var0 ?var1)) (handsfree ?var1))
)",
minecraft,recall,0.30158182978630066,Easy Negative (Inter-Domain Mismatch),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: Imagine the agent (like a Minecraft player) has an ability to teleport an item they are currently using (equipped) straight into their inventory. That's what the recall action does. It's like saying, 'Okay, I'm done with this axe; let's magically put it back in my backpack.' This action not only puts the item away but also ensures that the agent's hands are now empty and ready for something else.

Action name: recall


Your answer:
","**Explanation:**

Imagine you're helping a hero navigate through a tricky dungeon filled with different challenges. The hero's objective is to escape, but along the way, they might find useful items like swords that can help protect against monsters.

In our scenario, the action of picking up a sword is crucial. Let's think of it like this: if you enter a room and see a sword on the floor while your hands are free, you can pick it up. The action schema in PDDL, which is a way to represent planning problems, explains this in a structured format.

The preconditions for our action ""pick-sword"" are:
1. **The hero must be in the same room as the sword** (represented as `(at-hero ?loc)` and `(at-sword ?s ?loc)`). This makes sense because you can't pick up something that's not in the same room as you.
2. **The hero's hand must be free** (`(arm-free)`). Just like you can't hold two grocery bags in one hand easily, our hero needs a free hand to pick up the sword.

The effects after the hero picks up the sword are:
1. **The hero is now holding the sword** (`(holding ?s)`). This indicates that the hero has successfully picked up the sword.
2. **The sword is no longer in its original place** (`(not (at-sword ?s ?loc))`). Just like if you take an apple from a basket, the apple isn't in the basket anymore.
3. **The hero's hand is no longer free** (`(not (arm-free))`). Holding the sword means the hand that was free is now occupied.

This action schema is a simple way to model the interaction between the hero and the sword in the dungeon. It helps ensure that all necessary conditions are met before the action takes place, making the hero's journey through the dungeon logical and structured. This way, the hero doesn't magically have a sword without picking it up or has two items in one hand, which keeps our dungeon adventure realistic and understandable.
Parameters:
1. ?loc - cells
2. ?s - swords

Preconditions:
```
(and
    (at-hero ?loc)
    (at-sword ?s ?loc)
    (arm-free)
)
```

Effects:
```
(and
    (holding ?s)
    (not (at-sword ?s ?loc))
    (not (arm-free))
)
```
","(:action recall
    :parameters (?var0 - moveable ?var1 - agent)
    :precondition (equipped ?var0 ?var1)
    :effect (and (inventory ?var0) (not (equipped ?var0 ?var1)) (handsfree ?var1))
)",
minecraft,recall,0.20672237873077393,Easy Negative (Inter-Domain Mismatch),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: Imagine the agent (like a Minecraft player) has an ability to teleport an item they are currently using (equipped) straight into their inventory. That's what the recall action does. It's like saying, 'Okay, I'm done with this axe; let's magically put it back in my backpack.' This action not only puts the item away but also ensures that the agent's hands are now empty and ready for something else.

Action name: recall


Your answer:
","**Explanation:**

Imagine our hero in a dungeon, a place with rooms connected like a spider web. Each room can be just an empty space, or it might have something like a monster, a trap, or even a sword. Somewhere in this maze, there's a special room that has an exit—the ultimate goal for our hero.

Now, let's focus on a specific action our hero might need to take: **disarming a trap**. In our scenario, the hero finds themselves in a room with a trap. The action to disarm this trap is what we need to understand.

The action is named `disarm-trap`. This action, like any other, has specific requirements (preconditions) that must be met before the hero can perform it. These preconditions are:
1. **The hero must be in the same room as the trap.** This makes sense because you can't disarm a trap from another room. It's like needing to be in the kitchen to turn off a stove.
2. **The hero's hand must be free.** This means the hero can’t be holding anything, like a sword. It's a bit like needing both hands free to tie your shoes properly.
3. **There must actually be a trap in the room.** Obviously, the hero can't disarm a trap if there isn't one there!

If all these conditions are met, then the hero can go ahead and disarm the trap. The results (effects) of this action are:
1. **The trap in the room is disarmed.** This means the room is now safe from that trap.
2. **The trap is no longer considered to be in the room.** It's like cleaning up a spill; once it's cleaned, it's not there anymore.

By breaking down the action like this, we see how each condition helps ensure the action can be carried out safely and effectively. It’s just like following a recipe—each ingredient needs to be added at the right time for the dish to come out right!
Parameters:
1. ?loc - cells

Preconditions:
```
(and
    (at-hero ?loc)
    (arm-free)
    (has-trap ?loc)
)
```

Effects:
```
(and
    (trap-disarmed ?loc)
    (not (has-trap ?loc))
)
```
","(:action recall
    :parameters (?var0 - moveable ?var1 - agent)
    :precondition (equipped ?var0 ?var1)
    :effect (and (inventory ?var0) (not (equipped ?var0 ?var1)) (handsfree ?var1))
)",
minecraft,recall,0.3918250799179077,Easy Negative (Inter-Domain Mismatch),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: Imagine the agent (like a Minecraft player) has an ability to teleport an item they are currently using (equipped) straight into their inventory. That's what the recall action does. It's like saying, 'Okay, I'm done with this axe; let's magically put it back in my backpack.' This action not only puts the item away but also ensures that the agent's hands are now empty and ready for something else.

Action name: recall


Your answer:
","**Explanation:**

Let's imagine our hero in the dungeon scenario. The hero wakes up and finds themselves in a room, wanting to move to an adjacent room where, unfortunately, there's a monster. Here's how we translate this scenario into a set of instructions, or a 'domain model,' in planning language.

The action we're talking about is called ""move-to-monster."" This means our hero is trying to move from one room (let’s call it Room A) to another room (Room B) where there is a monster. To ensure this action can happen, there are certain conditions that need to be met (these are called 'preconditions') and certain outcomes that will happen as a result of the action (these are called 'effects').

1. **Preconditions**:
   - **Connected Rooms**: Room A and Room B must be connected by a corridor. This makes sense because our hero can't magically jump from one room to another; there must be a path.
   - **Hero's Current Location**: The hero must currently be in Room A. If the hero isn't there, they can't start moving from it!
   - **Monster Presence**: Room B must have a monster. After all, the action is specifically about moving to a room with a monster.
   - **Room Integrity**: Room B should not be destroyed. A destroyed room might mean it’s collapsed or inaccessible, so it's logical our hero can’t move into it.
   - **Safety in Room A**: Room A should not have a trap. This makes sure our hero is safe and able to move without getting caught in a trap.
   - **Armed Hero**: The hero must be holding a sword. It’s a dangerous task to move into a room with a monster, so having a sword means the hero is prepared for a fight.

2. **Effects**:
   - **Hero's New Location**: After the action, the hero will be in Room B. They've successfully moved.
   - **Change in Room A's Status**: Room A becomes 'destroyed.' This might represent that the room is no longer safe or viable after the hero leaves, maybe because of the haste in escaping or some mechanism triggered by the departure.
   - **Update Hero's Old Location**: The fact that the hero was in Room A is no longer true, which is updated in our model to reflect the hero’s new position.

This planning helps organize our thoughts and actions logically, ensuring every step is clear and all necessary precautions are taken. Think of it like giving someone directions with a checklist: ""Before you go there, make sure this, this, and this are true, and once you do, this and this will happen."" This ensures everyone knows what to expect and how to prepare! 
Parameters:
1. ?from - cells
2. ?to - cells
3. ?s - swords

Preconditions:
```
(and
    (connected ?from ?to)
    (at-hero ?from)
    (has-monster ?to)
    (not (is-destroyed ?to))
    (not (has-trap ?from))
    (holding ?s)
)
```

Effects:
```
(and
    (at-hero ?to)
    (is-destroyed ?from)
    (not (at-hero ?from))
)
```
","(:action recall
    :parameters (?var0 - moveable ?var1 - agent)
    :precondition (equipped ?var0 ?var1)
    :effect (and (inventory ?var0) (not (equipped ?var0 ?var1)) (handsfree ?var1))
)",
minecraft,recall,0.26161399483680725,Easy Negative (Inter-Domain Mismatch),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: Imagine the agent (like a Minecraft player) has an ability to teleport an item they are currently using (equipped) straight into their inventory. That's what the recall action does. It's like saying, 'Okay, I'm done with this axe; let's magically put it back in my backpack.' This action not only puts the item away but also ensures that the agent's hands are now empty and ready for something else.

Action name: recall


Your answer:
","**Explanation:**

Imagine you're helping a hero navigate a dungeon full of monsters and traps, a bit like playing a video game. Now, the hero has a sword, but in this part of the game, the hero decides to destroy the sword. To understand why certain conditions are checked before the hero can destroy the sword safely, let's break it down using the action ""destroy-sword"" from the game's rules (or in technical terms, the PDDL action schema).

Firstly, the hero needs to be in the same location as the sword. This makes sense, right? You can't throw something away or break it if it's not with you. So, the condition `(at-hero ?loc)` ensures that the hero is at the right spot to perform the action.

Secondly, the hero must be holding the sword. It’s similar to needing both hands on a bat to swing it; here, the hero needs to have the sword in hand to destroy it, checked by `(holding ?s)`.

But why check for no traps or monsters in the room? Think of it like trying to do something delicate, like assembling a model airplane, in a room with a loose tiger. Not a great idea, right? If there’s a monster in the room, destroying the sword might make the hero vulnerable to attack. Similarly, a trap could be triggered by the noise or movement, putting the hero in danger. So, `(not (has-trap ?loc))` and `(not (has-monster ?loc))` ensure that the environment is safe for the hero to break the sword without turning the situation worse.

Now, what happens after the sword is destroyed? The effect is that the hero’s hand is now free (`arm-free`), the sword is confirmed as destroyed (`is-destroyed ?s`), and the hero is no longer holding it (`not (holding ?s)`). It’s like cleaning up after finishing a task: put away the tools, clean up the mess, and free up your hands for the next task.

In simple terms, this action schema is like a set of instructions to make sure the hero does something risky (like destroying a sword) safely and responsibly, without making the dangerous dungeon situation even worse.
Parameters:
1. ?loc - cells
2. ?s - swords

Preconditions:
```
(and
    (at-hero ?loc)
    (holding ?s)
    (not (has-trap ?loc))
    (not (has-monster ?loc))
)
```

Effects:
```
(and
    (arm-free)
    (is-destroyed ?s)
    (not (holding ?s))
)
```
","(:action recall
    :parameters (?var0 - moveable ?var1 - agent)
    :precondition (equipped ?var0 ?var1)
    :effect (and (inventory ?var0) (not (equipped ?var0 ?var1)) (handsfree ?var1))
)",
minecraft,recall,0.7756763100624084,Semi-Hard Negative (Intra-Domain Mismatch),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: Imagine the agent (like a Minecraft player) has an ability to teleport an item they are currently using (equipped) straight into their inventory. That's what the recall action does. It's like saying, 'Okay, I'm done with this axe; let's magically put it back in my backpack.' This action not only puts the item away but also ensures that the agent's hands are now empty and ready for something else.

Action name: recall


Your answer:
","Parameters:
1. ?var0 - moveable
2. ?var1 - agent
3. ?var2 - moveable

Preconditions:
```
(and
    (hypothetical ?var0)
    (is_log ?var2)
    (equipped ?var2 ?var1)
)
```

Effects:
```
(and
    (inventory ?var0)
    (is_planks ?var0)
    (handsfree ?var1)
    (not (equipped ?var2 ?var1))
    (not (hypothetical ?var0))
    (not (is_log ?var2))
)
```
","(:action recall
    :parameters (?var0 - moveable ?var1 - agent)
    :precondition (equipped ?var0 ?var1)
    :effect (and (inventory ?var0) (not (equipped ?var0 ?var1)) (handsfree ?var1))
)",
minecraft,recall,0.410630464553833,Semi-Hard Negative (Intra-Domain Mismatch),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: Imagine the agent (like a Minecraft player) has an ability to teleport an item they are currently using (equipped) straight into their inventory. That's what the recall action does. It's like saying, 'Okay, I'm done with this axe; let's magically put it back in my backpack.' This action not only puts the item away but also ensures that the agent's hands are now empty and ready for something else.

Action name: recall


Your answer:
","Parameters:
1. ?var0 - static
2. ?var1 - static

Preconditions:
```
(agent_at ?var1)
```

Effects:
```
(and
    (agent_at ?var0)
    (not (agent_at ?var1))
)
```
","(:action recall
    :parameters (?var0 - moveable ?var1 - agent)
    :precondition (equipped ?var0 ?var1)
    :effect (and (inventory ?var0) (not (equipped ?var0 ?var1)) (handsfree ?var1))
)",
minecraft,recall,0.7020046710968018,Semi-Hard Negative (Intra-Domain Mismatch),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: Imagine the agent (like a Minecraft player) has an ability to teleport an item they are currently using (equipped) straight into their inventory. That's what the recall action does. It's like saying, 'Okay, I'm done with this axe; let's magically put it back in my backpack.' This action not only puts the item away but also ensures that the agent's hands are now empty and ready for something else.

Action name: recall


Your answer:
","Parameters:
1. ?var0 - moveable
2. ?var1 - agent

Preconditions:
```
(and
    (inventory ?var0)
    (handsfree ?var1)
)
```

Effects:
```
(and
    (equipped ?var0 ?var1)
    (not (handsfree ?var1))
    (not (inventory ?var0))
)
```
","(:action recall
    :parameters (?var0 - moveable ?var1 - agent)
    :precondition (equipped ?var0 ?var1)
    :effect (and (inventory ?var0) (not (equipped ?var0 ?var1)) (handsfree ?var1))
)",
minecraft,recall,0.6227985620498657,Semi-Hard Negative (Intra-Domain Mismatch),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: Imagine the agent (like a Minecraft player) has an ability to teleport an item they are currently using (equipped) straight into their inventory. That's what the recall action does. It's like saying, 'Okay, I'm done with this axe; let's magically put it back in my backpack.' This action not only puts the item away but also ensures that the agent's hands are now empty and ready for something else.

Action name: recall


Your answer:
","Parameters:
1. ?var0 - moveable
2. ?var1 - static

Preconditions:
```
(and
    (at ?var0 ?var1)
    (agent_at ?var1)
)
```

Effects:
```
(and
    (inventory ?var0)
    (not (at ?var0 ?var1))
)
```
","(:action recall
    :parameters (?var0 - moveable ?var1 - agent)
    :precondition (equipped ?var0 ?var1)
    :effect (and (inventory ?var0) (not (equipped ?var0 ?var1)) (handsfree ?var1))
)",
minecraft,recall,0.7756763100624084,Semi-Hard Negative (Intra-Domain Mismatch),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: Imagine the agent (like a Minecraft player) has an ability to teleport an item they are currently using (equipped) straight into their inventory. That's what the recall action does. It's like saying, 'Okay, I'm done with this axe; let's magically put it back in my backpack.' This action not only puts the item away but also ensures that the agent's hands are now empty and ready for something else.

Action name: recall


Your answer:

**Explanation:** Let's imagine you're playing a game similar to Minecraft. In this game, you have an action called ""recall,"" which lets you move an item you are holding directly into your backpack, making your hands empty again. To understand how this action works in the game's programming language (PDDL), let's break down the requirements and results of this action step-by-step.

1. **Precondition (What needs to be true before the action?):** 
   The precondition for the ""recall"" action is `(equipped ?var0 ?var1)`. This simply means that the item (`?var0`) must be currently held (equipped) by the player (`?var1`). Think of it as checking if you really have the axe in your hand before you can put it away.

2. **Effect (What happens after the action is done?):** 
   The effects of this action are several:
   - `(inventory ?var0)`: The item you were holding is now in your inventory. This is like saying, ""Okay, the axe is now in my backpack.""
   - `(not (equipped ?var0 ?var1))`: You are no longer holding the item. This ensures that the game knows the axe is no longer in your hand.
   - `(handsfree ?var1)`: Your hands are now empty. This part is like confirming that your hands are free, ready to grab or use something else.

By setting these preconditions and effects, the game ensures that the action of recalling an item (like teleporting your axe to your backpack) is logical and consistent with the game's rules. You need to be holding the item first to store it away, and after storing it, your hands should indeed be empty, ready for the next task. This keeps the game from getting confused, like trying to put away an axe you aren’t holding or ending up with an axe still in your hand after you've tried to store it.

In summary, the ""recall"" action in the game ensures everything happens in an orderly and expected manner, making your gameplay experience smooth and realistic within the game's world.","Parameters:
1. ?var0 - moveable
2. ?var1 - agent
3. ?var2 - moveable

Preconditions:
```
(and
    (hypothetical ?var0)
    (is_log ?var2)
    (equipped ?var2 ?var1)
)
```

Effects:
```
(and
    (inventory ?var0)
    (is_planks ?var0)
    (handsfree ?var1)
    (not (equipped ?var2 ?var1))
    (not (hypothetical ?var0))
    (not (is_log ?var2))
)
```
","(:action recall
    :parameters (?var0 - moveable ?var1 - agent)
    :precondition (equipped ?var0 ?var1)
    :effect (and (inventory ?var0) (not (equipped ?var0 ?var1)) (handsfree ?var1))
)",
minecraft,recall,0.410630464553833,Semi-Hard Negative (Intra-Domain Mismatch),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: Imagine the agent (like a Minecraft player) has an ability to teleport an item they are currently using (equipped) straight into their inventory. That's what the recall action does. It's like saying, 'Okay, I'm done with this axe; let's magically put it back in my backpack.' This action not only puts the item away but also ensures that the agent's hands are now empty and ready for something else.

Action name: recall


Your answer:

**Explanation:** Let's imagine you're playing a game similar to Minecraft. In this game, you have an action called ""recall,"" which lets you move an item you are holding directly into your backpack, making your hands empty again. To understand how this action works in the game's programming language (PDDL), let's break down the requirements and results of this action step-by-step.

1. **Precondition (What needs to be true before the action?):** 
   The precondition for the ""recall"" action is `(equipped ?var0 ?var1)`. This simply means that the item (`?var0`) must be currently held (equipped) by the player (`?var1`). Think of it as checking if you really have the axe in your hand before you can put it away.

2. **Effect (What happens after the action is done?):** 
   The effects of this action are several:
   - `(inventory ?var0)`: The item you were holding is now in your inventory. This is like saying, ""Okay, the axe is now in my backpack.""
   - `(not (equipped ?var0 ?var1))`: You are no longer holding the item. This ensures that the game knows the axe is no longer in your hand.
   - `(handsfree ?var1)`: Your hands are now empty. This part is like confirming that your hands are free, ready to grab or use something else.

By setting these preconditions and effects, the game ensures that the action of recalling an item (like teleporting your axe to your backpack) is logical and consistent with the game's rules. You need to be holding the item first to store it away, and after storing it, your hands should indeed be empty, ready for the next task. This keeps the game from getting confused, like trying to put away an axe you aren’t holding or ending up with an axe still in your hand after you've tried to store it.

In summary, the ""recall"" action in the game ensures everything happens in an orderly and expected manner, making your gameplay experience smooth and realistic within the game's world.","Parameters:
1. ?var0 - static
2. ?var1 - static

Preconditions:
```
(agent_at ?var1)
```

Effects:
```
(and
    (agent_at ?var0)
    (not (agent_at ?var1))
)
```
","(:action recall
    :parameters (?var0 - moveable ?var1 - agent)
    :precondition (equipped ?var0 ?var1)
    :effect (and (inventory ?var0) (not (equipped ?var0 ?var1)) (handsfree ?var1))
)",
minecraft,recall,0.7020046710968018,Semi-Hard Negative (Intra-Domain Mismatch),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: Imagine the agent (like a Minecraft player) has an ability to teleport an item they are currently using (equipped) straight into their inventory. That's what the recall action does. It's like saying, 'Okay, I'm done with this axe; let's magically put it back in my backpack.' This action not only puts the item away but also ensures that the agent's hands are now empty and ready for something else.

Action name: recall


Your answer:

**Explanation:** Let's imagine you're playing a game similar to Minecraft. In this game, you have an action called ""recall,"" which lets you move an item you are holding directly into your backpack, making your hands empty again. To understand how this action works in the game's programming language (PDDL), let's break down the requirements and results of this action step-by-step.

1. **Precondition (What needs to be true before the action?):** 
   The precondition for the ""recall"" action is `(equipped ?var0 ?var1)`. This simply means that the item (`?var0`) must be currently held (equipped) by the player (`?var1`). Think of it as checking if you really have the axe in your hand before you can put it away.

2. **Effect (What happens after the action is done?):** 
   The effects of this action are several:
   - `(inventory ?var0)`: The item you were holding is now in your inventory. This is like saying, ""Okay, the axe is now in my backpack.""
   - `(not (equipped ?var0 ?var1))`: You are no longer holding the item. This ensures that the game knows the axe is no longer in your hand.
   - `(handsfree ?var1)`: Your hands are now empty. This part is like confirming that your hands are free, ready to grab or use something else.

By setting these preconditions and effects, the game ensures that the action of recalling an item (like teleporting your axe to your backpack) is logical and consistent with the game's rules. You need to be holding the item first to store it away, and after storing it, your hands should indeed be empty, ready for the next task. This keeps the game from getting confused, like trying to put away an axe you aren’t holding or ending up with an axe still in your hand after you've tried to store it.

In summary, the ""recall"" action in the game ensures everything happens in an orderly and expected manner, making your gameplay experience smooth and realistic within the game's world.","Parameters:
1. ?var0 - moveable
2. ?var1 - agent

Preconditions:
```
(and
    (inventory ?var0)
    (handsfree ?var1)
)
```

Effects:
```
(and
    (equipped ?var0 ?var1)
    (not (handsfree ?var1))
    (not (inventory ?var0))
)
```
","(:action recall
    :parameters (?var0 - moveable ?var1 - agent)
    :precondition (equipped ?var0 ?var1)
    :effect (and (inventory ?var0) (not (equipped ?var0 ?var1)) (handsfree ?var1))
)",
minecraft,recall,0.6227985620498657,Semi-Hard Negative (Intra-Domain Mismatch),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: Imagine the agent (like a Minecraft player) has an ability to teleport an item they are currently using (equipped) straight into their inventory. That's what the recall action does. It's like saying, 'Okay, I'm done with this axe; let's magically put it back in my backpack.' This action not only puts the item away but also ensures that the agent's hands are now empty and ready for something else.

Action name: recall


Your answer:

**Explanation:** Let's imagine you're playing a game similar to Minecraft. In this game, you have an action called ""recall,"" which lets you move an item you are holding directly into your backpack, making your hands empty again. To understand how this action works in the game's programming language (PDDL), let's break down the requirements and results of this action step-by-step.

1. **Precondition (What needs to be true before the action?):** 
   The precondition for the ""recall"" action is `(equipped ?var0 ?var1)`. This simply means that the item (`?var0`) must be currently held (equipped) by the player (`?var1`). Think of it as checking if you really have the axe in your hand before you can put it away.

2. **Effect (What happens after the action is done?):** 
   The effects of this action are several:
   - `(inventory ?var0)`: The item you were holding is now in your inventory. This is like saying, ""Okay, the axe is now in my backpack.""
   - `(not (equipped ?var0 ?var1))`: You are no longer holding the item. This ensures that the game knows the axe is no longer in your hand.
   - `(handsfree ?var1)`: Your hands are now empty. This part is like confirming that your hands are free, ready to grab or use something else.

By setting these preconditions and effects, the game ensures that the action of recalling an item (like teleporting your axe to your backpack) is logical and consistent with the game's rules. You need to be holding the item first to store it away, and after storing it, your hands should indeed be empty, ready for the next task. This keeps the game from getting confused, like trying to put away an axe you aren’t holding or ending up with an axe still in your hand after you've tried to store it.

In summary, the ""recall"" action in the game ensures everything happens in an orderly and expected manner, making your gameplay experience smooth and realistic within the game's world.","Parameters:
1. ?var0 - moveable
2. ?var1 - static

Preconditions:
```
(and
    (at ?var0 ?var1)
    (agent_at ?var1)
)
```

Effects:
```
(and
    (inventory ?var0)
    (not (at ?var0 ?var1))
)
```
","(:action recall
    :parameters (?var0 - moveable ?var1 - agent)
    :precondition (equipped ?var0 ?var1)
    :effect (and (inventory ?var0) (not (equipped ?var0 ?var1)) (handsfree ?var1))
)",
minecraft,recall,0.6813176870346069,Semi-Hard Negative (Intra-Domain Mismatch),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: Imagine the agent (like a Minecraft player) has an ability to teleport an item they are currently using (equipped) straight into their inventory. That's what the recall action does. It's like saying, 'Okay, I'm done with this axe; let's magically put it back in my backpack.' This action not only puts the item away but also ensures that the agent's hands are now empty and ready for something else.

Action name: recall


Your answer:
","**Explanation:**
Let's imagine that in the world of Minecraft, the agent (like a player) wants to craft planks from a log. Think of it like a cook needing specific ingredients and tools to make a meal.

In our PDDL model, the action named ""craft_plank"" follows a similar thought process. Here's how the description of the world leads to the rules in our model:

1. **Preconditions**: Before crafting, certain conditions must be met:
   - The agent must have a log that they are actually holding. This is represented by `(equipped ?var2 ?var1)` meaning the log (`?var2`) is equipped by the agent (`?var1`).
   - The log must be a real log, confirmed by `(is_log ?var2)`.
   - We also see `(hypothetical ?var0)`. Here, the planks that will be created are initially just an idea (hypothetical) before they become real.

2. **Effects**: After the action is performed, we expect changes:
   - The hypothetical planks become real, shown by `(inventory ?var0)` which means the planks (`?var0`) are now in the agent's inventory.
   - They are identified as planks with `(is_planks ?var0)`.
   - The agent's hands become free `(handsfree ?var1)` because the log they were holding is now transformed into planks.
   - The log is no longer equipped or identified as a log, shown by `(not (equipped ?var2 ?var1))` and `(not (is_log ?var2))`. This indicates the log has been used up.

This schema carefully makes sure that the agent can only craft planks if they have a log to start with, and it accounts for what happens to the log and the newly created planks. It's much like ensuring you have flour before you bake a cake, and then, once the cake is baked, you no longer have just flour but a delicious cake instead!
Parameters:
1. ?var0 - moveable
2. ?var1 - agent
3. ?var2 - moveable

Preconditions:
```
(and
    (hypothetical ?var0)
    (is_log ?var2)
    (equipped ?var2 ?var1)
)
```

Effects:
```
(and
    (inventory ?var0)
    (is_planks ?var0)
    (handsfree ?var1)
    (not (equipped ?var2 ?var1))
    (not (hypothetical ?var0))
    (not (is_log ?var2))
)
```
","(:action recall
    :parameters (?var0 - moveable ?var1 - agent)
    :precondition (equipped ?var0 ?var1)
    :effect (and (inventory ?var0) (not (equipped ?var0 ?var1)) (handsfree ?var1))
)",
minecraft,recall,0.57680344581604,Semi-Hard Negative (Intra-Domain Mismatch),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: Imagine the agent (like a Minecraft player) has an ability to teleport an item they are currently using (equipped) straight into their inventory. That's what the recall action does. It's like saying, 'Okay, I'm done with this axe; let's magically put it back in my backpack.' This action not only puts the item away but also ensures that the agent's hands are now empty and ready for something else.

Action name: recall


Your answer:
","**Explanation:**
Let's think about the action called ""move"" in a Minecraft-like game, where the goal is to get an agent (like a player) from one place to another. The PDDL action schema you're asking about is designed to handle this simple yet crucial task.

In the action schema, we have two parameters: `?var0` and `?var1`, which are both locations. You can think of `?var0` as the new location where the agent wants to go, and `?var1` as the current location where the agent is starting from.

**Preconditions:** The precondition for the ""move"" action is `(agent_at ?var1)`. This just means that before the agent can move, it must be verified that the agent is actually at the starting location (`?var1`). It’s similar to checking if you are really at home before you walk to the park.

**Effects:** After the agent moves, we need to update the agent's location in the game. This is what the effects in the action schema do:
- `(agent_at ?var0)` says that the agent is now at the new location (`?var0`), like saying, ""Now, I’m at the park.""
- `(not (agent_at ?var1))` means that the agent is no longer at the starting location (`?var1`), similar to saying, ""I'm no longer at home.""

This change in the agent's location is crucial for the game to keep track of where the agent is at any moment, which affects what the agent can interact with or what actions they can perform next. The effect ensures the game world is accurately updated following the agent's movement, and no confusion arises about where the agent is located. 

So, in simple terms, the action ""move"" in this game ensures that when the agent moves from one spot to another, the game correctly recognizes this change and updates the world accordingly.
Parameters:
1. ?var0 - static
2. ?var1 - static

Preconditions:
```
(agent_at ?var1)
```

Effects:
```
(and
    (agent_at ?var0)
    (not (agent_at ?var1))
)
```
","(:action recall
    :parameters (?var0 - moveable ?var1 - agent)
    :precondition (equipped ?var0 ?var1)
    :effect (and (inventory ?var0) (not (equipped ?var0 ?var1)) (handsfree ?var1))
)",
minecraft,recall,0.4719609022140503,Semi-Hard Negative (Intra-Domain Mismatch),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: Imagine the agent (like a Minecraft player) has an ability to teleport an item they are currently using (equipped) straight into their inventory. That's what the recall action does. It's like saying, 'Okay, I'm done with this axe; let's magically put it back in my backpack.' This action not only puts the item away but also ensures that the agent's hands are now empty and ready for something else.

Action name: recall


Your answer:
","**Explanation:**
Let's think of the action called ""equip"" like someone getting ready to use something from their backpack. Imagine you're planning to paint a picture. First, you need to make sure you have a paintbrush in your backpack (this is similar to the ""inventory"" in our scenario). You also need to make sure your hand is free to hold the paintbrush (like the ""handsfree"" condition).

In the ""equip"" action in this Minecraft-like environment, two main things need to happen before the action can take place:
1. **The item is in the inventory** - This is just like making sure the paintbrush is in your backpack. The precondition `(inventory ?var0)` confirms that the item you want to use is actually with you, stored safely in your inventory.
2. **The agent's hands are free** - This means you aren't holding anything else. The precondition `(handsfree ?var1)` checks that your hands (or the agent's hands, in this case) are empty and ready to hold something new.

When you decide to ""equip"" or start using the item, several things change:
- **The item is now equipped** - This means the item is in your hand and ready to use, similar to how you would hold a paintbrush when you're ready to paint. This is shown by the effect `(equipped ?var0 ?var1)`.
- **Your hand is no longer free** - Just like when you pick up the paintbrush, your hand isn't empty anymore. This is why the effect includes `(not (handsfree ?var1))`.
- **The item is no longer just in the inventory** - Since you're now holding the item, it's not just sitting in your backpack. This change is represented by `(not (inventory ?var0))`.

These changes ensure that the action of equipping something is logical and makes sense in the environment, just like how you'd logically take a paintbrush out of your backpack to use it.
Parameters:
1. ?var0 - moveable
2. ?var1 - agent

Preconditions:
```
(and
    (inventory ?var0)
    (handsfree ?var1)
)
```

Effects:
```
(and
    (equipped ?var0 ?var1)
    (not (handsfree ?var1))
    (not (inventory ?var0))
)
```
","(:action recall
    :parameters (?var0 - moveable ?var1 - agent)
    :precondition (equipped ?var0 ?var1)
    :effect (and (inventory ?var0) (not (equipped ?var0 ?var1)) (handsfree ?var1))
)",
minecraft,recall,0.5246511101722717,Semi-Hard Negative (Intra-Domain Mismatch),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: Imagine the agent (like a Minecraft player) has an ability to teleport an item they are currently using (equipped) straight into their inventory. That's what the recall action does. It's like saying, 'Okay, I'm done with this axe; let's magically put it back in my backpack.' This action not only puts the item away but also ensures that the agent's hands are now empty and ready for something else.

Action name: recall


Your answer:
","**Explanation:**

Let's imagine you're in a simplified game environment similar to Minecraft, where your goal is to gather resources like fruits or tools. In this game, to collect an item, you'd first need to be at the same location as the item. This ensures you can actually reach it to pick it up.

So, in the PDDL (which is a planning language used to describe tasks and environments in a structured way), the `pick` action is defined to help you collect these items. Here's why the action is set up this way:

1. **Preconditions (the must-haves before acting)**:
   - `(at ?var0 ?var1)`: This means the item (`?var0`) must be at your current location (`?var1`). Think of it as seeing a piece of fruit right at your feet. You need to be where the fruit is to pick it up.
   - `(agent_at ?var1)`: This specifies that you (the agent) must also be at that specific location (`?var1`). Just like in real life, you can't pick up something if you're not right there with it.

2. **Effects (what happens after the action)**:
   - `(inventory ?var0)`: Once you pick up the item, it moves into your inventory. This is like putting the fruit into your backpack.
   - `(not (at ?var0 ?var1))`: This indicates that the item is no longer lying on the ground at that location. It’s like saying, now that the fruit is in your backpack, it's not on the ground anymore.

This setup ensures that you can only pick up items that are within your immediate reach and that collecting an item changes its status from being 'on the ground' to being 'in your inventory'. It's a simple but effective way to manage resources in the game, making sure everything happens in a logical and realistic manner.
Parameters:
1. ?var0 - moveable
2. ?var1 - static

Preconditions:
```
(and
    (at ?var0 ?var1)
    (agent_at ?var1)
)
```

Effects:
```
(and
    (inventory ?var0)
    (not (at ?var0 ?var1))
)
```
","(:action recall
    :parameters (?var0 - moveable ?var1 - agent)
    :precondition (equipped ?var0 ?var1)
    :effect (and (inventory ?var0) (not (equipped ?var0 ?var1)) (handsfree ?var1))
)",
minecraft,recall,0.11040543019771576,Hard Negative (Manipulated Action),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: Imagine the agent (like a Minecraft player) has an ability to teleport an item they are currently using (equipped) straight into their inventory. That's what the recall action does. It's like saying, 'Okay, I'm done with this axe; let's magically put it back in my backpack.' This action not only puts the item away but also ensures that the agent's hands are now empty and ready for something else.

Action name: recall


Your answer:
","Parameters:
1. ?var0 - moveable
2. ?var1 - agent

Preconditions:
```
(equipped ?var0 ?var1)
```

Effects:
```
(and
    (handsfree ?var1)
)
```
","(:action recall
    :parameters (?var0 - moveable ?var1 - agent)
    :precondition (equipped ?var0 ?var1)
    :effect (and (inventory ?var0) (not (equipped ?var0 ?var1)) (handsfree ?var1))
)","remove (inventory ?var0) from effects
remove (not (equipped ?var0 ?var1)) from effects
"
minecraft,recall,0.22394466400146484,Hard Negative (Manipulated Action),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: Imagine the agent (like a Minecraft player) has an ability to teleport an item they are currently using (equipped) straight into their inventory. That's what the recall action does. It's like saying, 'Okay, I'm done with this axe; let's magically put it back in my backpack.' This action not only puts the item away but also ensures that the agent's hands are now empty and ready for something else.

Action name: recall


Your answer:
","Parameters:
1. ?var0 - moveable
2. ?var1 - agent

Preconditions:
```
(not (equipped ?var0 ?var1))
```

Effects:
```
(and
    (inventory ?var0)
    (not (equipped ?var0 ?var1))
    (handsfree ?var1)
)
```
","(:action recall
    :parameters (?var0 - moveable ?var1 - agent)
    :precondition (equipped ?var0 ?var1)
    :effect (and (inventory ?var0) (not (equipped ?var0 ?var1)) (handsfree ?var1))
)","negate (equipped ?var0 ?var1) in preconditions
"
minecraft,recall,0.19122737646102905,Hard Negative (Manipulated Action),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: Imagine the agent (like a Minecraft player) has an ability to teleport an item they are currently using (equipped) straight into their inventory. That's what the recall action does. It's like saying, 'Okay, I'm done with this axe; let's magically put it back in my backpack.' This action not only puts the item away but also ensures that the agent's hands are now empty and ready for something else.

Action name: recall


Your answer:
","Parameters:
1. ?var0 - moveable
2. ?var1 - agent

Preconditions:
```
(inventory ?var0)
```

Effects:
```
(and
    (equipped ?var0 ?var1)
    (not (handsfree ?var1))
    (not (equipped ?var0 ?var1))
)
```
","(:action recall
    :parameters (?var0 - moveable ?var1 - agent)
    :precondition (equipped ?var0 ?var1)
    :effect (and (inventory ?var0) (not (equipped ?var0 ?var1)) (handsfree ?var1))
)","swap (equipped ?var0 ?var1) with (inventory ?var0)
negate (handsfree ?var1) in effects
"
minecraft,recall,0.4782349467277527,Hard Negative (Manipulated Action),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: Imagine the agent (like a Minecraft player) has an ability to teleport an item they are currently using (equipped) straight into their inventory. That's what the recall action does. It's like saying, 'Okay, I'm done with this axe; let's magically put it back in my backpack.' This action not only puts the item away but also ensures that the agent's hands are now empty and ready for something else.

Action name: recall


Your answer:
","Parameters:
1. ?var0 - moveable
2. ?var1 - agent

Preconditions:
```
(equipped ?var0 ?var1)
```

Effects:
```
(and
    (inventory ?var0)
    (not (equipped ?var0 ?var1))
)
```
","(:action recall
    :parameters (?var0 - moveable ?var1 - agent)
    :precondition (equipped ?var0 ?var1)
    :effect (and (inventory ?var0) (not (equipped ?var0 ?var1)) (handsfree ?var1))
)","remove (handsfree ?var1) from effects
"
minecraft,recall,0.1394137144088745,Hard Negative (Manipulated Action),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: Imagine the agent (like a Minecraft player) has an ability to teleport an item they are currently using (equipped) straight into their inventory. That's what the recall action does. It's like saying, 'Okay, I'm done with this axe; let's magically put it back in my backpack.' This action not only puts the item away but also ensures that the agent's hands are now empty and ready for something else.

Action name: recall


Your answer:
","Parameters:
1. ?var0 - moveable
2. ?var1 - agent

Preconditions:
```
(equipped ?var0 ?var1)
```

Effects:
```
(and
    (not (handsfree ?var1))
    (inventory ?var0)
    (not (equipped ?var0 ?var1))
)
```
","(:action recall
    :parameters (?var0 - moveable ?var1 - agent)
    :precondition (equipped ?var0 ?var1)
    :effect (and (inventory ?var0) (not (equipped ?var0 ?var1)) (handsfree ?var1))
)","negate (handsfree ?var1) in effects
"
minecraft,recall,0.24383610486984253,Hard Negative (Manipulated Action),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: Imagine the agent (like a Minecraft player) has an ability to teleport an item they are currently using (equipped) straight into their inventory. That's what the recall action does. It's like saying, 'Okay, I'm done with this axe; let's magically put it back in my backpack.' This action not only puts the item away but also ensures that the agent's hands are now empty and ready for something else.

Action name: recall


Your answer:
","Parameters:
1. ?var0 - moveable
2. ?var1 - agent

Preconditions:
```
(not (equipped ?var0 ?var1))
```

Effects:
```
(and
    (equipped ?var0 ?var1)
    (inventory ?var0)
)
```
","(:action recall
    :parameters (?var0 - moveable ?var1 - agent)
    :precondition (equipped ?var0 ?var1)
    :effect (and (inventory ?var0) (not (equipped ?var0 ?var1)) (handsfree ?var1))
)","swap (equipped ?var0 ?var1) with (not (equipped ?var0 ?var1))
remove (handsfree ?var1) from effects
"
minecraft,recall,0.22394466400146484,Hard Negative (Manipulated Action),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: Imagine the agent (like a Minecraft player) has an ability to teleport an item they are currently using (equipped) straight into their inventory. That's what the recall action does. It's like saying, 'Okay, I'm done with this axe; let's magically put it back in my backpack.' This action not only puts the item away but also ensures that the agent's hands are now empty and ready for something else.

Action name: recall


Your answer:
","Parameters:
1. ?var0 - moveable
2. ?var1 - agent

Preconditions:
```
(not (equipped ?var0 ?var1))
```

Effects:
```
(and
    (inventory ?var0)
    (not (equipped ?var0 ?var1))
    (handsfree ?var1)
)
```
","(:action recall
    :parameters (?var0 - moveable ?var1 - agent)
    :precondition (equipped ?var0 ?var1)
    :effect (and (inventory ?var0) (not (equipped ?var0 ?var1)) (handsfree ?var1))
)","negate (equipped ?var0 ?var1) in preconditions
"
minecraft,recall,0.4028080701828003,Hard Negative (Manipulated Action),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: Imagine the agent (like a Minecraft player) has an ability to teleport an item they are currently using (equipped) straight into their inventory. That's what the recall action does. It's like saying, 'Okay, I'm done with this axe; let's magically put it back in my backpack.' This action not only puts the item away but also ensures that the agent's hands are now empty and ready for something else.

Action name: recall


Your answer:
","Parameters:
1. ?var0 - moveable
2. ?var1 - agent

Preconditions:
```
(equipped ?var0 ?var1)
```

Effects:
```
(and
    (inventory ?var0)
)
```
","(:action recall
    :parameters (?var0 - moveable ?var1 - agent)
    :precondition (equipped ?var0 ?var1)
    :effect (and (inventory ?var0) (not (equipped ?var0 ?var1)) (handsfree ?var1))
)","remove (handsfree ?var1) from effects
remove (not (equipped ?var0 ?var1)) from effects
"
minecraft,recall,0.4782349467277527,Hard Negative (Manipulated Action),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: Imagine the agent (like a Minecraft player) has an ability to teleport an item they are currently using (equipped) straight into their inventory. That's what the recall action does. It's like saying, 'Okay, I'm done with this axe; let's magically put it back in my backpack.' This action not only puts the item away but also ensures that the agent's hands are now empty and ready for something else.

Action name: recall


Your answer:
","Parameters:
1. ?var0 - moveable
2. ?var1 - agent

Preconditions:
```
(equipped ?var0 ?var1)
```

Effects:
```
(and
    (inventory ?var0)
    (not (equipped ?var0 ?var1))
)
```
","(:action recall
    :parameters (?var0 - moveable ?var1 - agent)
    :precondition (equipped ?var0 ?var1)
    :effect (and (inventory ?var0) (not (equipped ?var0 ?var1)) (handsfree ?var1))
)","remove (handsfree ?var1) from effects
"
minecraft,recall,0.3308003842830658,Hard Negative (Manipulated Action),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: Imagine the agent (like a Minecraft player) has an ability to teleport an item they are currently using (equipped) straight into their inventory. That's what the recall action does. It's like saying, 'Okay, I'm done with this axe; let's magically put it back in my backpack.' This action not only puts the item away but also ensures that the agent's hands are now empty and ready for something else.

Action name: recall


Your answer:
","Parameters:
1. ?var0 - moveable
2. ?var1 - agent

Preconditions:
```
(inventory ?var0)
```

Effects:
```
(and
    (equipped ?var0 ?var1)
    (handsfree ?var1)
)
```
","(:action recall
    :parameters (?var0 - moveable ?var1 - agent)
    :precondition (equipped ?var0 ?var1)
    :effect (and (inventory ?var0) (not (equipped ?var0 ?var1)) (handsfree ?var1))
)","swap (equipped ?var0 ?var1) with (inventory ?var0)
remove (not (equipped ?var0 ?var1)) from effects
"
minecraft,recall,0.24557971954345703,Hard Negative (Manipulated Action),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: Imagine the agent (like a Minecraft player) has an ability to teleport an item they are currently using (equipped) straight into their inventory. That's what the recall action does. It's like saying, 'Okay, I'm done with this axe; let's magically put it back in my backpack.' This action not only puts the item away but also ensures that the agent's hands are now empty and ready for something else.

Action name: recall


Your answer:

**Explanation:** Let's imagine you're playing a game similar to Minecraft. In this game, you have an action called ""recall,"" which lets you move an item you are holding directly into your backpack, making your hands empty again. To understand how this action works in the game's programming language (PDDL), let's break down the requirements and results of this action step-by-step.

1. **Precondition (What needs to be true before the action?):** 
   The precondition for the ""recall"" action is `(equipped ?var0 ?var1)`. This simply means that the item (`?var0`) must be currently held (equipped) by the player (`?var1`). Think of it as checking if you really have the axe in your hand before you can put it away.

2. **Effect (What happens after the action is done?):** 
   The effects of this action are several:
   - `(inventory ?var0)`: The item you were holding is now in your inventory. This is like saying, ""Okay, the axe is now in my backpack.""
   - `(not (equipped ?var0 ?var1))`: You are no longer holding the item. This ensures that the game knows the axe is no longer in your hand.
   - `(handsfree ?var1)`: Your hands are now empty. This part is like confirming that your hands are free, ready to grab or use something else.

By setting these preconditions and effects, the game ensures that the action of recalling an item (like teleporting your axe to your backpack) is logical and consistent with the game's rules. You need to be holding the item first to store it away, and after storing it, your hands should indeed be empty, ready for the next task. This keeps the game from getting confused, like trying to put away an axe you aren’t holding or ending up with an axe still in your hand after you've tried to store it.

In summary, the ""recall"" action in the game ensures everything happens in an orderly and expected manner, making your gameplay experience smooth and realistic within the game's world.","Parameters:
1. ?var0 - moveable
2. ?var1 - agent

Preconditions:
```
(equipped ?var0 ?var1)
```

Effects:
```
(and
    (not (equipped ?var0 ?var1))
    (handsfree ?var1)
)
```
","(:action recall
    :parameters (?var0 - moveable ?var1 - agent)
    :precondition (equipped ?var0 ?var1)
    :effect (and (inventory ?var0) (not (equipped ?var0 ?var1)) (handsfree ?var1))
)","remove (inventory ?var0) from effects
"
minecraft,recall,0.2288183569908142,Hard Negative (Manipulated Action),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: Imagine the agent (like a Minecraft player) has an ability to teleport an item they are currently using (equipped) straight into their inventory. That's what the recall action does. It's like saying, 'Okay, I'm done with this axe; let's magically put it back in my backpack.' This action not only puts the item away but also ensures that the agent's hands are now empty and ready for something else.

Action name: recall


Your answer:

**Explanation:** Let's imagine you're playing a game similar to Minecraft. In this game, you have an action called ""recall,"" which lets you move an item you are holding directly into your backpack, making your hands empty again. To understand how this action works in the game's programming language (PDDL), let's break down the requirements and results of this action step-by-step.

1. **Precondition (What needs to be true before the action?):** 
   The precondition for the ""recall"" action is `(equipped ?var0 ?var1)`. This simply means that the item (`?var0`) must be currently held (equipped) by the player (`?var1`). Think of it as checking if you really have the axe in your hand before you can put it away.

2. **Effect (What happens after the action is done?):** 
   The effects of this action are several:
   - `(inventory ?var0)`: The item you were holding is now in your inventory. This is like saying, ""Okay, the axe is now in my backpack.""
   - `(not (equipped ?var0 ?var1))`: You are no longer holding the item. This ensures that the game knows the axe is no longer in your hand.
   - `(handsfree ?var1)`: Your hands are now empty. This part is like confirming that your hands are free, ready to grab or use something else.

By setting these preconditions and effects, the game ensures that the action of recalling an item (like teleporting your axe to your backpack) is logical and consistent with the game's rules. You need to be holding the item first to store it away, and after storing it, your hands should indeed be empty, ready for the next task. This keeps the game from getting confused, like trying to put away an axe you aren’t holding or ending up with an axe still in your hand after you've tried to store it.

In summary, the ""recall"" action in the game ensures everything happens in an orderly and expected manner, making your gameplay experience smooth and realistic within the game's world.","Parameters:
1. ?var0 - moveable
2. ?var1 - agent

Preconditions:
```
(not (equipped ?var0 ?var1))
```

Effects:
```
(and
    (equipped ?var0 ?var1)
    (inventory ?var0)
    (handsfree ?var1)
)
```
","(:action recall
    :parameters (?var0 - moveable ?var1 - agent)
    :precondition (equipped ?var0 ?var1)
    :effect (and (inventory ?var0) (not (equipped ?var0 ?var1)) (handsfree ?var1))
)","negate (equipped ?var0 ?var1) in preconditions
negate (not (equipped ?var0 ?var1)) in effects
"
minecraft,recall,0.11040543019771576,Hard Negative (Manipulated Action),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: Imagine the agent (like a Minecraft player) has an ability to teleport an item they are currently using (equipped) straight into their inventory. That's what the recall action does. It's like saying, 'Okay, I'm done with this axe; let's magically put it back in my backpack.' This action not only puts the item away but also ensures that the agent's hands are now empty and ready for something else.

Action name: recall


Your answer:

**Explanation:** Let's imagine you're playing a game similar to Minecraft. In this game, you have an action called ""recall,"" which lets you move an item you are holding directly into your backpack, making your hands empty again. To understand how this action works in the game's programming language (PDDL), let's break down the requirements and results of this action step-by-step.

1. **Precondition (What needs to be true before the action?):** 
   The precondition for the ""recall"" action is `(equipped ?var0 ?var1)`. This simply means that the item (`?var0`) must be currently held (equipped) by the player (`?var1`). Think of it as checking if you really have the axe in your hand before you can put it away.

2. **Effect (What happens after the action is done?):** 
   The effects of this action are several:
   - `(inventory ?var0)`: The item you were holding is now in your inventory. This is like saying, ""Okay, the axe is now in my backpack.""
   - `(not (equipped ?var0 ?var1))`: You are no longer holding the item. This ensures that the game knows the axe is no longer in your hand.
   - `(handsfree ?var1)`: Your hands are now empty. This part is like confirming that your hands are free, ready to grab or use something else.

By setting these preconditions and effects, the game ensures that the action of recalling an item (like teleporting your axe to your backpack) is logical and consistent with the game's rules. You need to be holding the item first to store it away, and after storing it, your hands should indeed be empty, ready for the next task. This keeps the game from getting confused, like trying to put away an axe you aren’t holding or ending up with an axe still in your hand after you've tried to store it.

In summary, the ""recall"" action in the game ensures everything happens in an orderly and expected manner, making your gameplay experience smooth and realistic within the game's world.","Parameters:
1. ?var0 - moveable
2. ?var1 - agent

Preconditions:
```
(equipped ?var0 ?var1)
```

Effects:
```
(and
    (handsfree ?var1)
)
```
","(:action recall
    :parameters (?var0 - moveable ?var1 - agent)
    :precondition (equipped ?var0 ?var1)
    :effect (and (inventory ?var0) (not (equipped ?var0 ?var1)) (handsfree ?var1))
)","remove (inventory ?var0) from effects
remove (not (equipped ?var0 ?var1)) from effects
"
minecraft,recall,0.4156724810600281,Hard Negative (Manipulated Action),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: Imagine the agent (like a Minecraft player) has an ability to teleport an item they are currently using (equipped) straight into their inventory. That's what the recall action does. It's like saying, 'Okay, I'm done with this axe; let's magically put it back in my backpack.' This action not only puts the item away but also ensures that the agent's hands are now empty and ready for something else.

Action name: recall


Your answer:

**Explanation:** Let's imagine you're playing a game similar to Minecraft. In this game, you have an action called ""recall,"" which lets you move an item you are holding directly into your backpack, making your hands empty again. To understand how this action works in the game's programming language (PDDL), let's break down the requirements and results of this action step-by-step.

1. **Precondition (What needs to be true before the action?):** 
   The precondition for the ""recall"" action is `(equipped ?var0 ?var1)`. This simply means that the item (`?var0`) must be currently held (equipped) by the player (`?var1`). Think of it as checking if you really have the axe in your hand before you can put it away.

2. **Effect (What happens after the action is done?):** 
   The effects of this action are several:
   - `(inventory ?var0)`: The item you were holding is now in your inventory. This is like saying, ""Okay, the axe is now in my backpack.""
   - `(not (equipped ?var0 ?var1))`: You are no longer holding the item. This ensures that the game knows the axe is no longer in your hand.
   - `(handsfree ?var1)`: Your hands are now empty. This part is like confirming that your hands are free, ready to grab or use something else.

By setting these preconditions and effects, the game ensures that the action of recalling an item (like teleporting your axe to your backpack) is logical and consistent with the game's rules. You need to be holding the item first to store it away, and after storing it, your hands should indeed be empty, ready for the next task. This keeps the game from getting confused, like trying to put away an axe you aren’t holding or ending up with an axe still in your hand after you've tried to store it.

In summary, the ""recall"" action in the game ensures everything happens in an orderly and expected manner, making your gameplay experience smooth and realistic within the game's world.","Parameters:
1. ?var0 - moveable
2. ?var1 - agent

Preconditions:
```
(inventory ?var0)
```

Effects:
```
(and
    (equipped ?var0 ?var1)
    (not (equipped ?var0 ?var1))
)
```
","(:action recall
    :parameters (?var0 - moveable ?var1 - agent)
    :precondition (equipped ?var0 ?var1)
    :effect (and (inventory ?var0) (not (equipped ?var0 ?var1)) (handsfree ?var1))
)","remove (handsfree ?var1) from effects
swap (equipped ?var0 ?var1) with (inventory ?var0)
"
minecraft,recall,0.22394466400146484,Hard Negative (Manipulated Action),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: Imagine the agent (like a Minecraft player) has an ability to teleport an item they are currently using (equipped) straight into their inventory. That's what the recall action does. It's like saying, 'Okay, I'm done with this axe; let's magically put it back in my backpack.' This action not only puts the item away but also ensures that the agent's hands are now empty and ready for something else.

Action name: recall


Your answer:

**Explanation:** Let's imagine you're playing a game similar to Minecraft. In this game, you have an action called ""recall,"" which lets you move an item you are holding directly into your backpack, making your hands empty again. To understand how this action works in the game's programming language (PDDL), let's break down the requirements and results of this action step-by-step.

1. **Precondition (What needs to be true before the action?):** 
   The precondition for the ""recall"" action is `(equipped ?var0 ?var1)`. This simply means that the item (`?var0`) must be currently held (equipped) by the player (`?var1`). Think of it as checking if you really have the axe in your hand before you can put it away.

2. **Effect (What happens after the action is done?):** 
   The effects of this action are several:
   - `(inventory ?var0)`: The item you were holding is now in your inventory. This is like saying, ""Okay, the axe is now in my backpack.""
   - `(not (equipped ?var0 ?var1))`: You are no longer holding the item. This ensures that the game knows the axe is no longer in your hand.
   - `(handsfree ?var1)`: Your hands are now empty. This part is like confirming that your hands are free, ready to grab or use something else.

By setting these preconditions and effects, the game ensures that the action of recalling an item (like teleporting your axe to your backpack) is logical and consistent with the game's rules. You need to be holding the item first to store it away, and after storing it, your hands should indeed be empty, ready for the next task. This keeps the game from getting confused, like trying to put away an axe you aren’t holding or ending up with an axe still in your hand after you've tried to store it.

In summary, the ""recall"" action in the game ensures everything happens in an orderly and expected manner, making your gameplay experience smooth and realistic within the game's world.","Parameters:
1. ?var0 - moveable
2. ?var1 - agent

Preconditions:
```
(not (equipped ?var0 ?var1))
```

Effects:
```
(and
    (inventory ?var0)
    (not (equipped ?var0 ?var1))
    (handsfree ?var1)
)
```
","(:action recall
    :parameters (?var0 - moveable ?var1 - agent)
    :precondition (equipped ?var0 ?var1)
    :effect (and (inventory ?var0) (not (equipped ?var0 ?var1)) (handsfree ?var1))
)","negate (equipped ?var0 ?var1) in preconditions
"
minecraft,recall,0.11040543019771576,Hard Negative (Manipulated Action),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: Imagine the agent (like a Minecraft player) has an ability to teleport an item they are currently using (equipped) straight into their inventory. That's what the recall action does. It's like saying, 'Okay, I'm done with this axe; let's magically put it back in my backpack.' This action not only puts the item away but also ensures that the agent's hands are now empty and ready for something else.

Action name: recall


Your answer:

**Explanation:** Let's imagine you're playing a game similar to Minecraft. In this game, you have an action called ""recall,"" which lets you move an item you are holding directly into your backpack, making your hands empty again. To understand how this action works in the game's programming language (PDDL), let's break down the requirements and results of this action step-by-step.

1. **Precondition (What needs to be true before the action?):** 
   The precondition for the ""recall"" action is `(equipped ?var0 ?var1)`. This simply means that the item (`?var0`) must be currently held (equipped) by the player (`?var1`). Think of it as checking if you really have the axe in your hand before you can put it away.

2. **Effect (What happens after the action is done?):** 
   The effects of this action are several:
   - `(inventory ?var0)`: The item you were holding is now in your inventory. This is like saying, ""Okay, the axe is now in my backpack.""
   - `(not (equipped ?var0 ?var1))`: You are no longer holding the item. This ensures that the game knows the axe is no longer in your hand.
   - `(handsfree ?var1)`: Your hands are now empty. This part is like confirming that your hands are free, ready to grab or use something else.

By setting these preconditions and effects, the game ensures that the action of recalling an item (like teleporting your axe to your backpack) is logical and consistent with the game's rules. You need to be holding the item first to store it away, and after storing it, your hands should indeed be empty, ready for the next task. This keeps the game from getting confused, like trying to put away an axe you aren’t holding or ending up with an axe still in your hand after you've tried to store it.

In summary, the ""recall"" action in the game ensures everything happens in an orderly and expected manner, making your gameplay experience smooth and realistic within the game's world.","Parameters:
1. ?var0 - moveable
2. ?var1 - agent

Preconditions:
```
(equipped ?var0 ?var1)
```

Effects:
```
(and
    (handsfree ?var1)
)
```
","(:action recall
    :parameters (?var0 - moveable ?var1 - agent)
    :precondition (equipped ?var0 ?var1)
    :effect (and (inventory ?var0) (not (equipped ?var0 ?var1)) (handsfree ?var1))
)","remove (not (equipped ?var0 ?var1)) from effects
remove (inventory ?var0) from effects
"
minecraft,recall,0.2288183569908142,Hard Negative (Manipulated Action),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: Imagine the agent (like a Minecraft player) has an ability to teleport an item they are currently using (equipped) straight into their inventory. That's what the recall action does. It's like saying, 'Okay, I'm done with this axe; let's magically put it back in my backpack.' This action not only puts the item away but also ensures that the agent's hands are now empty and ready for something else.

Action name: recall


Your answer:

**Explanation:** Let's imagine you're playing a game similar to Minecraft. In this game, you have an action called ""recall,"" which lets you move an item you are holding directly into your backpack, making your hands empty again. To understand how this action works in the game's programming language (PDDL), let's break down the requirements and results of this action step-by-step.

1. **Precondition (What needs to be true before the action?):** 
   The precondition for the ""recall"" action is `(equipped ?var0 ?var1)`. This simply means that the item (`?var0`) must be currently held (equipped) by the player (`?var1`). Think of it as checking if you really have the axe in your hand before you can put it away.

2. **Effect (What happens after the action is done?):** 
   The effects of this action are several:
   - `(inventory ?var0)`: The item you were holding is now in your inventory. This is like saying, ""Okay, the axe is now in my backpack.""
   - `(not (equipped ?var0 ?var1))`: You are no longer holding the item. This ensures that the game knows the axe is no longer in your hand.
   - `(handsfree ?var1)`: Your hands are now empty. This part is like confirming that your hands are free, ready to grab or use something else.

By setting these preconditions and effects, the game ensures that the action of recalling an item (like teleporting your axe to your backpack) is logical and consistent with the game's rules. You need to be holding the item first to store it away, and after storing it, your hands should indeed be empty, ready for the next task. This keeps the game from getting confused, like trying to put away an axe you aren’t holding or ending up with an axe still in your hand after you've tried to store it.

In summary, the ""recall"" action in the game ensures everything happens in an orderly and expected manner, making your gameplay experience smooth and realistic within the game's world.","Parameters:
1. ?var0 - moveable
2. ?var1 - agent

Preconditions:
```
(not (equipped ?var0 ?var1))
```

Effects:
```
(and
    (equipped ?var0 ?var1)
    (inventory ?var0)
    (handsfree ?var1)
)
```
","(:action recall
    :parameters (?var0 - moveable ?var1 - agent)
    :precondition (equipped ?var0 ?var1)
    :effect (and (inventory ?var0) (not (equipped ?var0 ?var1)) (handsfree ?var1))
)","swap (equipped ?var0 ?var1) with (not (equipped ?var0 ?var1))
"
minecraft,recall,0.22394466400146484,Hard Negative (Manipulated Action),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: Imagine the agent (like a Minecraft player) has an ability to teleport an item they are currently using (equipped) straight into their inventory. That's what the recall action does. It's like saying, 'Okay, I'm done with this axe; let's magically put it back in my backpack.' This action not only puts the item away but also ensures that the agent's hands are now empty and ready for something else.

Action name: recall


Your answer:

**Explanation:** Let's imagine you're playing a game similar to Minecraft. In this game, you have an action called ""recall,"" which lets you move an item you are holding directly into your backpack, making your hands empty again. To understand how this action works in the game's programming language (PDDL), let's break down the requirements and results of this action step-by-step.

1. **Precondition (What needs to be true before the action?):** 
   The precondition for the ""recall"" action is `(equipped ?var0 ?var1)`. This simply means that the item (`?var0`) must be currently held (equipped) by the player (`?var1`). Think of it as checking if you really have the axe in your hand before you can put it away.

2. **Effect (What happens after the action is done?):** 
   The effects of this action are several:
   - `(inventory ?var0)`: The item you were holding is now in your inventory. This is like saying, ""Okay, the axe is now in my backpack.""
   - `(not (equipped ?var0 ?var1))`: You are no longer holding the item. This ensures that the game knows the axe is no longer in your hand.
   - `(handsfree ?var1)`: Your hands are now empty. This part is like confirming that your hands are free, ready to grab or use something else.

By setting these preconditions and effects, the game ensures that the action of recalling an item (like teleporting your axe to your backpack) is logical and consistent with the game's rules. You need to be holding the item first to store it away, and after storing it, your hands should indeed be empty, ready for the next task. This keeps the game from getting confused, like trying to put away an axe you aren’t holding or ending up with an axe still in your hand after you've tried to store it.

In summary, the ""recall"" action in the game ensures everything happens in an orderly and expected manner, making your gameplay experience smooth and realistic within the game's world.","Parameters:
1. ?var0 - moveable
2. ?var1 - agent

Preconditions:
```
(not (equipped ?var0 ?var1))
```

Effects:
```
(and
    (inventory ?var0)
    (not (equipped ?var0 ?var1))
    (handsfree ?var1)
)
```
","(:action recall
    :parameters (?var0 - moveable ?var1 - agent)
    :precondition (equipped ?var0 ?var1)
    :effect (and (inventory ?var0) (not (equipped ?var0 ?var1)) (handsfree ?var1))
)","negate (equipped ?var0 ?var1) in preconditions
"
minecraft,recall,0.1242927610874176,Hard Negative (Manipulated Action),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: Imagine the agent (like a Minecraft player) has an ability to teleport an item they are currently using (equipped) straight into their inventory. That's what the recall action does. It's like saying, 'Okay, I'm done with this axe; let's magically put it back in my backpack.' This action not only puts the item away but also ensures that the agent's hands are now empty and ready for something else.

Action name: recall


Your answer:

**Explanation:** Let's imagine you're playing a game similar to Minecraft. In this game, you have an action called ""recall,"" which lets you move an item you are holding directly into your backpack, making your hands empty again. To understand how this action works in the game's programming language (PDDL), let's break down the requirements and results of this action step-by-step.

1. **Precondition (What needs to be true before the action?):** 
   The precondition for the ""recall"" action is `(equipped ?var0 ?var1)`. This simply means that the item (`?var0`) must be currently held (equipped) by the player (`?var1`). Think of it as checking if you really have the axe in your hand before you can put it away.

2. **Effect (What happens after the action is done?):** 
   The effects of this action are several:
   - `(inventory ?var0)`: The item you were holding is now in your inventory. This is like saying, ""Okay, the axe is now in my backpack.""
   - `(not (equipped ?var0 ?var1))`: You are no longer holding the item. This ensures that the game knows the axe is no longer in your hand.
   - `(handsfree ?var1)`: Your hands are now empty. This part is like confirming that your hands are free, ready to grab or use something else.

By setting these preconditions and effects, the game ensures that the action of recalling an item (like teleporting your axe to your backpack) is logical and consistent with the game's rules. You need to be holding the item first to store it away, and after storing it, your hands should indeed be empty, ready for the next task. This keeps the game from getting confused, like trying to put away an axe you aren’t holding or ending up with an axe still in your hand after you've tried to store it.

In summary, the ""recall"" action in the game ensures everything happens in an orderly and expected manner, making your gameplay experience smooth and realistic within the game's world.","Parameters:
1. ?var0 - moveable
2. ?var1 - agent

Preconditions:
```
(not (equipped ?var0 ?var1))
```

Effects:
```
(and
    (equipped ?var0 ?var1)
    (handsfree ?var1)
)
```
","(:action recall
    :parameters (?var0 - moveable ?var1 - agent)
    :precondition (equipped ?var0 ?var1)
    :effect (and (inventory ?var0) (not (equipped ?var0 ?var1)) (handsfree ?var1))
)","swap (equipped ?var0 ?var1) with (not (equipped ?var0 ?var1))
remove (inventory ?var0) from effects
"
minecraft,recall,0.42711830139160156,Hard Negative (Manipulated Action),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: Imagine the agent (like a Minecraft player) has an ability to teleport an item they are currently using (equipped) straight into their inventory. That's what the recall action does. It's like saying, 'Okay, I'm done with this axe; let's magically put it back in my backpack.' This action not only puts the item away but also ensures that the agent's hands are now empty and ready for something else.

Action name: recall


Your answer:

**Explanation:** Let's imagine you're playing a game similar to Minecraft. In this game, you have an action called ""recall,"" which lets you move an item you are holding directly into your backpack, making your hands empty again. To understand how this action works in the game's programming language (PDDL), let's break down the requirements and results of this action step-by-step.

1. **Precondition (What needs to be true before the action?):** 
   The precondition for the ""recall"" action is `(equipped ?var0 ?var1)`. This simply means that the item (`?var0`) must be currently held (equipped) by the player (`?var1`). Think of it as checking if you really have the axe in your hand before you can put it away.

2. **Effect (What happens after the action is done?):** 
   The effects of this action are several:
   - `(inventory ?var0)`: The item you were holding is now in your inventory. This is like saying, ""Okay, the axe is now in my backpack.""
   - `(not (equipped ?var0 ?var1))`: You are no longer holding the item. This ensures that the game knows the axe is no longer in your hand.
   - `(handsfree ?var1)`: Your hands are now empty. This part is like confirming that your hands are free, ready to grab or use something else.

By setting these preconditions and effects, the game ensures that the action of recalling an item (like teleporting your axe to your backpack) is logical and consistent with the game's rules. You need to be holding the item first to store it away, and after storing it, your hands should indeed be empty, ready for the next task. This keeps the game from getting confused, like trying to put away an axe you aren’t holding or ending up with an axe still in your hand after you've tried to store it.

In summary, the ""recall"" action in the game ensures everything happens in an orderly and expected manner, making your gameplay experience smooth and realistic within the game's world.","Parameters:
1. ?var0 - moveable
2. ?var1 - agent

Preconditions:
```
(inventory ?var0)
```

Effects:
```
(and
    (equipped ?var0 ?var1)
    (not (equipped ?var0 ?var1))
    (handsfree ?var1)
)
```
","(:action recall
    :parameters (?var0 - moveable ?var1 - agent)
    :precondition (equipped ?var0 ?var1)
    :effect (and (inventory ?var0) (not (equipped ?var0 ?var1)) (handsfree ?var1))
)","swap (equipped ?var0 ?var1) with (inventory ?var0)
"
minecraft,recall,0.5239914059638977,Hard Negative (Manipulated Action),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: Imagine the agent (like a Minecraft player) has an ability to teleport an item they are currently using (equipped) straight into their inventory. That's what the recall action does. It's like saying, 'Okay, I'm done with this axe; let's magically put it back in my backpack.' This action not only puts the item away but also ensures that the agent's hands are now empty and ready for something else.

Action name: recall


Your answer:
","**Explanation:** Let's imagine you're playing a game similar to Minecraft. In this game, you have an action called ""recall,"" which lets you move an item you are holding directly into your backpack, making your hands empty again. To understand how this action works in the game's programming language (PDDL), let's break down the requirements and results of this action step-by-step.

1. **Precondition (What needs to be true before the action?):** 
   The precondition for the ""recall"" action is `(equipped ?var0 ?var1)`. This simply means that the item (`?var0`) must be currently held (equipped) by the player (`?var1`). Think of it as checking if you really have the axe in your hand before you can put it away.

2. **Effect (What happens after the action is done?):** 
   The effects of this action are several:
   - `(inventory ?var0)`: The item you were holding is now in your inventory. This is like saying, ""Okay, the axe is now in my backpack.""
   - `(not (equipped ?var0 ?var1))`: You are no longer holding the item. This ensures that the game knows the axe is no longer in your hand.
   - `(handsfree ?var1)`: Your hands are now empty. This part is like confirming that your hands are free, ready to grab or use something else.

By setting these preconditions and effects, the game ensures that the action of recalling an item (like teleporting your axe to your backpack) is logical and consistent with the game's rules. You need to be holding the item first to store it away, and after storing it, your hands should indeed be empty, ready for the next task. This keeps the game from getting confused, like trying to put away an axe you aren’t holding or ending up with an axe still in your hand after you've tried to store it.

In summary, the ""recall"" action in the game ensures everything happens in an orderly and expected manner, making your gameplay experience smooth and realistic within the game's world.
Parameters:
1. ?var0 - moveable
2. ?var1 - agent

Preconditions:
```
(not (equipped ?var0 ?var1))
```

Effects:
```
(and
    (inventory ?var0)
    (not (equipped ?var0 ?var1))
)
```
","(:action recall
    :parameters (?var0 - moveable ?var1 - agent)
    :precondition (equipped ?var0 ?var1)
    :effect (and (inventory ?var0) (not (equipped ?var0 ?var1)) (handsfree ?var1))
)","negate (equipped ?var0 ?var1) in preconditions
remove (handsfree ?var1) from effects
"
minecraft,recall,0.5239914059638977,Hard Negative (Manipulated Action),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: Imagine the agent (like a Minecraft player) has an ability to teleport an item they are currently using (equipped) straight into their inventory. That's what the recall action does. It's like saying, 'Okay, I'm done with this axe; let's magically put it back in my backpack.' This action not only puts the item away but also ensures that the agent's hands are now empty and ready for something else.

Action name: recall


Your answer:
","**Explanation:** Let's imagine you're playing a game similar to Minecraft. In this game, you have an action called ""recall,"" which lets you move an item you are holding directly into your backpack, making your hands empty again. To understand how this action works in the game's programming language (PDDL), let's break down the requirements and results of this action step-by-step.

1. **Precondition (What needs to be true before the action?):** 
   The precondition for the ""recall"" action is `(equipped ?var0 ?var1)`. This simply means that the item (`?var0`) must be currently held (equipped) by the player (`?var1`). Think of it as checking if you really have the axe in your hand before you can put it away.

2. **Effect (What happens after the action is done?):** 
   The effects of this action are several:
   - `(inventory ?var0)`: The item you were holding is now in your inventory. This is like saying, ""Okay, the axe is now in my backpack.""
   - `(not (equipped ?var0 ?var1))`: You are no longer holding the item. This ensures that the game knows the axe is no longer in your hand.
   - `(handsfree ?var1)`: Your hands are now empty. This part is like confirming that your hands are free, ready to grab or use something else.

By setting these preconditions and effects, the game ensures that the action of recalling an item (like teleporting your axe to your backpack) is logical and consistent with the game's rules. You need to be holding the item first to store it away, and after storing it, your hands should indeed be empty, ready for the next task. This keeps the game from getting confused, like trying to put away an axe you aren’t holding or ending up with an axe still in your hand after you've tried to store it.

In summary, the ""recall"" action in the game ensures everything happens in an orderly and expected manner, making your gameplay experience smooth and realistic within the game's world.
Parameters:
1. ?var0 - moveable
2. ?var1 - agent

Preconditions:
```
(not (equipped ?var0 ?var1))
```

Effects:
```
(and
    (inventory ?var0)
    (handsfree ?var1)
)
```
","(:action recall
    :parameters (?var0 - moveable ?var1 - agent)
    :precondition (equipped ?var0 ?var1)
    :effect (and (inventory ?var0) (not (equipped ?var0 ?var1)) (handsfree ?var1))
)","negate (equipped ?var0 ?var1) in preconditions
remove (not (equipped ?var0 ?var1)) from effects
"
minecraft,recall,0.5239914059638977,Hard Negative (Manipulated Action),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: Imagine the agent (like a Minecraft player) has an ability to teleport an item they are currently using (equipped) straight into their inventory. That's what the recall action does. It's like saying, 'Okay, I'm done with this axe; let's magically put it back in my backpack.' This action not only puts the item away but also ensures that the agent's hands are now empty and ready for something else.

Action name: recall


Your answer:
","**Explanation:** Let's imagine you're playing a game similar to Minecraft. In this game, you have an action called ""recall,"" which lets you move an item you are holding directly into your backpack, making your hands empty again. To understand how this action works in the game's programming language (PDDL), let's break down the requirements and results of this action step-by-step.

1. **Precondition (What needs to be true before the action?):** 
   The precondition for the ""recall"" action is `(equipped ?var0 ?var1)`. This simply means that the item (`?var0`) must be currently held (equipped) by the player (`?var1`). Think of it as checking if you really have the axe in your hand before you can put it away.

2. **Effect (What happens after the action is done?):** 
   The effects of this action are several:
   - `(inventory ?var0)`: The item you were holding is now in your inventory. This is like saying, ""Okay, the axe is now in my backpack.""
   - `(not (equipped ?var0 ?var1))`: You are no longer holding the item. This ensures that the game knows the axe is no longer in your hand.
   - `(handsfree ?var1)`: Your hands are now empty. This part is like confirming that your hands are free, ready to grab or use something else.

By setting these preconditions and effects, the game ensures that the action of recalling an item (like teleporting your axe to your backpack) is logical and consistent with the game's rules. You need to be holding the item first to store it away, and after storing it, your hands should indeed be empty, ready for the next task. This keeps the game from getting confused, like trying to put away an axe you aren’t holding or ending up with an axe still in your hand after you've tried to store it.

In summary, the ""recall"" action in the game ensures everything happens in an orderly and expected manner, making your gameplay experience smooth and realistic within the game's world.
Parameters:
1. ?var0 - moveable
2. ?var1 - agent

Preconditions:
```
(equipped ?var0 ?var1)
```

Effects:
```
(and
    (inventory ?var0)
)
```
","(:action recall
    :parameters (?var0 - moveable ?var1 - agent)
    :precondition (equipped ?var0 ?var1)
    :effect (and (inventory ?var0) (not (equipped ?var0 ?var1)) (handsfree ?var1))
)","remove (not (equipped ?var0 ?var1)) from effects
remove (handsfree ?var1) from effects
"
minecraft,recall,0.5239914059638977,Hard Negative (Manipulated Action),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: Imagine the agent (like a Minecraft player) has an ability to teleport an item they are currently using (equipped) straight into their inventory. That's what the recall action does. It's like saying, 'Okay, I'm done with this axe; let's magically put it back in my backpack.' This action not only puts the item away but also ensures that the agent's hands are now empty and ready for something else.

Action name: recall


Your answer:
","**Explanation:** Let's imagine you're playing a game similar to Minecraft. In this game, you have an action called ""recall,"" which lets you move an item you are holding directly into your backpack, making your hands empty again. To understand how this action works in the game's programming language (PDDL), let's break down the requirements and results of this action step-by-step.

1. **Precondition (What needs to be true before the action?):** 
   The precondition for the ""recall"" action is `(equipped ?var0 ?var1)`. This simply means that the item (`?var0`) must be currently held (equipped) by the player (`?var1`). Think of it as checking if you really have the axe in your hand before you can put it away.

2. **Effect (What happens after the action is done?):** 
   The effects of this action are several:
   - `(inventory ?var0)`: The item you were holding is now in your inventory. This is like saying, ""Okay, the axe is now in my backpack.""
   - `(not (equipped ?var0 ?var1))`: You are no longer holding the item. This ensures that the game knows the axe is no longer in your hand.
   - `(handsfree ?var1)`: Your hands are now empty. This part is like confirming that your hands are free, ready to grab or use something else.

By setting these preconditions and effects, the game ensures that the action of recalling an item (like teleporting your axe to your backpack) is logical and consistent with the game's rules. You need to be holding the item first to store it away, and after storing it, your hands should indeed be empty, ready for the next task. This keeps the game from getting confused, like trying to put away an axe you aren’t holding or ending up with an axe still in your hand after you've tried to store it.

In summary, the ""recall"" action in the game ensures everything happens in an orderly and expected manner, making your gameplay experience smooth and realistic within the game's world.
Parameters:
1. ?var0 - moveable
2. ?var1 - agent

Preconditions:
```
(not (equipped ?var0 ?var1))
```

Effects:
```
(and
    (not (handsfree ?var1))
    (equipped ?var0 ?var1)
    (inventory ?var0)
)
```
","(:action recall
    :parameters (?var0 - moveable ?var1 - agent)
    :precondition (equipped ?var0 ?var1)
    :effect (and (inventory ?var0) (not (equipped ?var0 ?var1)) (handsfree ?var1))
)","negate (handsfree ?var1) in effects
swap (equipped ?var0 ?var1) with (not (equipped ?var0 ?var1))
"
minecraft,recall,0.5239914059638977,Hard Negative (Manipulated Action),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: Imagine the agent (like a Minecraft player) has an ability to teleport an item they are currently using (equipped) straight into their inventory. That's what the recall action does. It's like saying, 'Okay, I'm done with this axe; let's magically put it back in my backpack.' This action not only puts the item away but also ensures that the agent's hands are now empty and ready for something else.

Action name: recall


Your answer:
","**Explanation:** Let's imagine you're playing a game similar to Minecraft. In this game, you have an action called ""recall,"" which lets you move an item you are holding directly into your backpack, making your hands empty again. To understand how this action works in the game's programming language (PDDL), let's break down the requirements and results of this action step-by-step.

1. **Precondition (What needs to be true before the action?):** 
   The precondition for the ""recall"" action is `(equipped ?var0 ?var1)`. This simply means that the item (`?var0`) must be currently held (equipped) by the player (`?var1`). Think of it as checking if you really have the axe in your hand before you can put it away.

2. **Effect (What happens after the action is done?):** 
   The effects of this action are several:
   - `(inventory ?var0)`: The item you were holding is now in your inventory. This is like saying, ""Okay, the axe is now in my backpack.""
   - `(not (equipped ?var0 ?var1))`: You are no longer holding the item. This ensures that the game knows the axe is no longer in your hand.
   - `(handsfree ?var1)`: Your hands are now empty. This part is like confirming that your hands are free, ready to grab or use something else.

By setting these preconditions and effects, the game ensures that the action of recalling an item (like teleporting your axe to your backpack) is logical and consistent with the game's rules. You need to be holding the item first to store it away, and after storing it, your hands should indeed be empty, ready for the next task. This keeps the game from getting confused, like trying to put away an axe you aren’t holding or ending up with an axe still in your hand after you've tried to store it.

In summary, the ""recall"" action in the game ensures everything happens in an orderly and expected manner, making your gameplay experience smooth and realistic within the game's world.
Parameters:
1. ?var0 - moveable
2. ?var1 - agent

Preconditions:
```
(equipped ?var0 ?var1)
```

Effects:
```
(and
    (inventory ?var0)
)
```
","(:action recall
    :parameters (?var0 - moveable ?var1 - agent)
    :precondition (equipped ?var0 ?var1)
    :effect (and (inventory ?var0) (not (equipped ?var0 ?var1)) (handsfree ?var1))
)","remove (handsfree ?var1) from effects
remove (not (equipped ?var0 ?var1)) from effects
"
minecraft,recall,0.5239914059638977,Hard Negative (Manipulated Action),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: Imagine the agent (like a Minecraft player) has an ability to teleport an item they are currently using (equipped) straight into their inventory. That's what the recall action does. It's like saying, 'Okay, I'm done with this axe; let's magically put it back in my backpack.' This action not only puts the item away but also ensures that the agent's hands are now empty and ready for something else.

Action name: recall


Your answer:
","**Explanation:** Let's imagine you're playing a game similar to Minecraft. In this game, you have an action called ""recall,"" which lets you move an item you are holding directly into your backpack, making your hands empty again. To understand how this action works in the game's programming language (PDDL), let's break down the requirements and results of this action step-by-step.

1. **Precondition (What needs to be true before the action?):** 
   The precondition for the ""recall"" action is `(equipped ?var0 ?var1)`. This simply means that the item (`?var0`) must be currently held (equipped) by the player (`?var1`). Think of it as checking if you really have the axe in your hand before you can put it away.

2. **Effect (What happens after the action is done?):** 
   The effects of this action are several:
   - `(inventory ?var0)`: The item you were holding is now in your inventory. This is like saying, ""Okay, the axe is now in my backpack.""
   - `(not (equipped ?var0 ?var1))`: You are no longer holding the item. This ensures that the game knows the axe is no longer in your hand.
   - `(handsfree ?var1)`: Your hands are now empty. This part is like confirming that your hands are free, ready to grab or use something else.

By setting these preconditions and effects, the game ensures that the action of recalling an item (like teleporting your axe to your backpack) is logical and consistent with the game's rules. You need to be holding the item first to store it away, and after storing it, your hands should indeed be empty, ready for the next task. This keeps the game from getting confused, like trying to put away an axe you aren’t holding or ending up with an axe still in your hand after you've tried to store it.

In summary, the ""recall"" action in the game ensures everything happens in an orderly and expected manner, making your gameplay experience smooth and realistic within the game's world.
Parameters:
1. ?var0 - moveable
2. ?var1 - agent

Preconditions:
```
(equipped ?var0 ?var1)
```

Effects:
```
(and
    (inventory ?var0)
    (handsfree ?var1)
)
```
","(:action recall
    :parameters (?var0 - moveable ?var1 - agent)
    :precondition (equipped ?var0 ?var1)
    :effect (and (inventory ?var0) (not (equipped ?var0 ?var1)) (handsfree ?var1))
)","remove (not (equipped ?var0 ?var1)) from effects
"
minecraft,recall,0.5239914059638977,Hard Negative (Manipulated Action),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: Imagine the agent (like a Minecraft player) has an ability to teleport an item they are currently using (equipped) straight into their inventory. That's what the recall action does. It's like saying, 'Okay, I'm done with this axe; let's magically put it back in my backpack.' This action not only puts the item away but also ensures that the agent's hands are now empty and ready for something else.

Action name: recall


Your answer:
","**Explanation:** Let's imagine you're playing a game similar to Minecraft. In this game, you have an action called ""recall,"" which lets you move an item you are holding directly into your backpack, making your hands empty again. To understand how this action works in the game's programming language (PDDL), let's break down the requirements and results of this action step-by-step.

1. **Precondition (What needs to be true before the action?):** 
   The precondition for the ""recall"" action is `(equipped ?var0 ?var1)`. This simply means that the item (`?var0`) must be currently held (equipped) by the player (`?var1`). Think of it as checking if you really have the axe in your hand before you can put it away.

2. **Effect (What happens after the action is done?):** 
   The effects of this action are several:
   - `(inventory ?var0)`: The item you were holding is now in your inventory. This is like saying, ""Okay, the axe is now in my backpack.""
   - `(not (equipped ?var0 ?var1))`: You are no longer holding the item. This ensures that the game knows the axe is no longer in your hand.
   - `(handsfree ?var1)`: Your hands are now empty. This part is like confirming that your hands are free, ready to grab or use something else.

By setting these preconditions and effects, the game ensures that the action of recalling an item (like teleporting your axe to your backpack) is logical and consistent with the game's rules. You need to be holding the item first to store it away, and after storing it, your hands should indeed be empty, ready for the next task. This keeps the game from getting confused, like trying to put away an axe you aren’t holding or ending up with an axe still in your hand after you've tried to store it.

In summary, the ""recall"" action in the game ensures everything happens in an orderly and expected manner, making your gameplay experience smooth and realistic within the game's world.
Parameters:
1. ?var0 - moveable
2. ?var1 - agent

Preconditions:
```
(equipped ?var0 ?var1)
```

Effects:
```
(and
    (inventory ?var0)
    (handsfree ?var1)
)
```
","(:action recall
    :parameters (?var0 - moveable ?var1 - agent)
    :precondition (equipped ?var0 ?var1)
    :effect (and (inventory ?var0) (not (equipped ?var0 ?var1)) (handsfree ?var1))
)","remove (not (equipped ?var0 ?var1)) from effects
"
minecraft,recall,0.5239914059638977,Hard Negative (Manipulated Action),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: Imagine the agent (like a Minecraft player) has an ability to teleport an item they are currently using (equipped) straight into their inventory. That's what the recall action does. It's like saying, 'Okay, I'm done with this axe; let's magically put it back in my backpack.' This action not only puts the item away but also ensures that the agent's hands are now empty and ready for something else.

Action name: recall


Your answer:
","**Explanation:** Let's imagine you're playing a game similar to Minecraft. In this game, you have an action called ""recall,"" which lets you move an item you are holding directly into your backpack, making your hands empty again. To understand how this action works in the game's programming language (PDDL), let's break down the requirements and results of this action step-by-step.

1. **Precondition (What needs to be true before the action?):** 
   The precondition for the ""recall"" action is `(equipped ?var0 ?var1)`. This simply means that the item (`?var0`) must be currently held (equipped) by the player (`?var1`). Think of it as checking if you really have the axe in your hand before you can put it away.

2. **Effect (What happens after the action is done?):** 
   The effects of this action are several:
   - `(inventory ?var0)`: The item you were holding is now in your inventory. This is like saying, ""Okay, the axe is now in my backpack.""
   - `(not (equipped ?var0 ?var1))`: You are no longer holding the item. This ensures that the game knows the axe is no longer in your hand.
   - `(handsfree ?var1)`: Your hands are now empty. This part is like confirming that your hands are free, ready to grab or use something else.

By setting these preconditions and effects, the game ensures that the action of recalling an item (like teleporting your axe to your backpack) is logical and consistent with the game's rules. You need to be holding the item first to store it away, and after storing it, your hands should indeed be empty, ready for the next task. This keeps the game from getting confused, like trying to put away an axe you aren’t holding or ending up with an axe still in your hand after you've tried to store it.

In summary, the ""recall"" action in the game ensures everything happens in an orderly and expected manner, making your gameplay experience smooth and realistic within the game's world.
Parameters:
1. ?var0 - moveable
2. ?var1 - agent

Preconditions:
```
(inventory ?var0)
```

Effects:
```
(and
    (equipped ?var0 ?var1)
    (not (equipped ?var0 ?var1))
    (handsfree ?var1)
)
```
","(:action recall
    :parameters (?var0 - moveable ?var1 - agent)
    :precondition (equipped ?var0 ?var1)
    :effect (and (inventory ?var0) (not (equipped ?var0 ?var1)) (handsfree ?var1))
)","swap (equipped ?var0 ?var1) with (inventory ?var0)
"
minecraft,recall,0.5239914059638977,Hard Negative (Manipulated Action),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: Imagine the agent (like a Minecraft player) has an ability to teleport an item they are currently using (equipped) straight into their inventory. That's what the recall action does. It's like saying, 'Okay, I'm done with this axe; let's magically put it back in my backpack.' This action not only puts the item away but also ensures that the agent's hands are now empty and ready for something else.

Action name: recall


Your answer:
","**Explanation:** Let's imagine you're playing a game similar to Minecraft. In this game, you have an action called ""recall,"" which lets you move an item you are holding directly into your backpack, making your hands empty again. To understand how this action works in the game's programming language (PDDL), let's break down the requirements and results of this action step-by-step.

1. **Precondition (What needs to be true before the action?):** 
   The precondition for the ""recall"" action is `(equipped ?var0 ?var1)`. This simply means that the item (`?var0`) must be currently held (equipped) by the player (`?var1`). Think of it as checking if you really have the axe in your hand before you can put it away.

2. **Effect (What happens after the action is done?):** 
   The effects of this action are several:
   - `(inventory ?var0)`: The item you were holding is now in your inventory. This is like saying, ""Okay, the axe is now in my backpack.""
   - `(not (equipped ?var0 ?var1))`: You are no longer holding the item. This ensures that the game knows the axe is no longer in your hand.
   - `(handsfree ?var1)`: Your hands are now empty. This part is like confirming that your hands are free, ready to grab or use something else.

By setting these preconditions and effects, the game ensures that the action of recalling an item (like teleporting your axe to your backpack) is logical and consistent with the game's rules. You need to be holding the item first to store it away, and after storing it, your hands should indeed be empty, ready for the next task. This keeps the game from getting confused, like trying to put away an axe you aren’t holding or ending up with an axe still in your hand after you've tried to store it.

In summary, the ""recall"" action in the game ensures everything happens in an orderly and expected manner, making your gameplay experience smooth and realistic within the game's world.
Parameters:
1. ?var0 - moveable
2. ?var1 - agent

Preconditions:
```
(inventory ?var0)
```

Effects:
```
(and
    (equipped ?var0 ?var1)
    (handsfree ?var1)
)
```
","(:action recall
    :parameters (?var0 - moveable ?var1 - agent)
    :precondition (equipped ?var0 ?var1)
    :effect (and (inventory ?var0) (not (equipped ?var0 ?var1)) (handsfree ?var1))
)","swap (equipped ?var0 ?var1) with (inventory ?var0)
remove (not (equipped ?var0 ?var1)) from effects
"
minecraft,recall,0.5239914059638977,Hard Negative (Manipulated Action),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: Imagine the agent (like a Minecraft player) has an ability to teleport an item they are currently using (equipped) straight into their inventory. That's what the recall action does. It's like saying, 'Okay, I'm done with this axe; let's magically put it back in my backpack.' This action not only puts the item away but also ensures that the agent's hands are now empty and ready for something else.

Action name: recall


Your answer:
","**Explanation:** Let's imagine you're playing a game similar to Minecraft. In this game, you have an action called ""recall,"" which lets you move an item you are holding directly into your backpack, making your hands empty again. To understand how this action works in the game's programming language (PDDL), let's break down the requirements and results of this action step-by-step.

1. **Precondition (What needs to be true before the action?):** 
   The precondition for the ""recall"" action is `(equipped ?var0 ?var1)`. This simply means that the item (`?var0`) must be currently held (equipped) by the player (`?var1`). Think of it as checking if you really have the axe in your hand before you can put it away.

2. **Effect (What happens after the action is done?):** 
   The effects of this action are several:
   - `(inventory ?var0)`: The item you were holding is now in your inventory. This is like saying, ""Okay, the axe is now in my backpack.""
   - `(not (equipped ?var0 ?var1))`: You are no longer holding the item. This ensures that the game knows the axe is no longer in your hand.
   - `(handsfree ?var1)`: Your hands are now empty. This part is like confirming that your hands are free, ready to grab or use something else.

By setting these preconditions and effects, the game ensures that the action of recalling an item (like teleporting your axe to your backpack) is logical and consistent with the game's rules. You need to be holding the item first to store it away, and after storing it, your hands should indeed be empty, ready for the next task. This keeps the game from getting confused, like trying to put away an axe you aren’t holding or ending up with an axe still in your hand after you've tried to store it.

In summary, the ""recall"" action in the game ensures everything happens in an orderly and expected manner, making your gameplay experience smooth and realistic within the game's world.
Parameters:
1. ?var0 - moveable
2. ?var1 - agent

Preconditions:
```
(inventory ?var0)
```

Effects:
```
(and
    (equipped ?var0 ?var1)
    (handsfree ?var1)
)
```
","(:action recall
    :parameters (?var0 - moveable ?var1 - agent)
    :precondition (equipped ?var0 ?var1)
    :effect (and (inventory ?var0) (not (equipped ?var0 ?var1)) (handsfree ?var1))
)","swap (equipped ?var0 ?var1) with (inventory ?var0)
remove (not (equipped ?var0 ?var1)) from effects
"
minecraft,craft_plank,0.7756762504577637,Positive (Correct Match),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: In the world of Minecraft, crafting is a key skill, and here, the agent can turn a log into planks. It's a bit like a magic trick: the agent takes a log, which they have to be holding, and transforms it into planks. These planks then appear in their inventory, ready to be used for building or crafting other items. The log, of course, is used up in this process.

Action name: craft_plank


Your answer:
","Parameters:
1. ?var0 - moveable
2. ?var1 - agent
3. ?var2 - moveable

Preconditions:
```
(and
    (hypothetical ?var0)
    (is_log ?var2)
    (equipped ?var2 ?var1)
)
```

Effects:
```
(and
    (inventory ?var0)
    (is_planks ?var0)
    (handsfree ?var1)
    (not (equipped ?var2 ?var1))
    (not (hypothetical ?var0))
    (not (is_log ?var2))
)
```
","(:action craft_plank
    :parameters (?var0 - moveable ?var1 - agent ?var2 - moveable)
    :precondition (and (hypothetical ?var0) (is_log ?var2) (equipped ?var2 ?var1))
    :effect (and (inventory ?var0) (is_planks ?var0) (handsfree ?var1) (not (equipped ?var2 ?var1)) (not (hypothetical ?var0)) (not (is_log ?var2)))
)",
minecraft,craft_plank,0.7756762504577637,Positive (Correct Match),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: In the world of Minecraft, crafting is a key skill, and here, the agent can turn a log into planks. It's a bit like a magic trick: the agent takes a log, which they have to be holding, and transforms it into planks. These planks then appear in their inventory, ready to be used for building or crafting other items. The log, of course, is used up in this process.

Action name: craft_plank


Your answer:

**Explanation:**
Let's imagine that in the world of Minecraft, the agent (like a player) wants to craft planks from a log. Think of it like a cook needing specific ingredients and tools to make a meal.

In our PDDL model, the action named ""craft_plank"" follows a similar thought process. Here's how the description of the world leads to the rules in our model:

1. **Preconditions**: Before crafting, certain conditions must be met:
   - The agent must have a log that they are actually holding. This is represented by `(equipped ?var2 ?var1)` meaning the log (`?var2`) is equipped by the agent (`?var1`).
   - The log must be a real log, confirmed by `(is_log ?var2)`.
   - We also see `(hypothetical ?var0)`. Here, the planks that will be created are initially just an idea (hypothetical) before they become real.

2. **Effects**: After the action is performed, we expect changes:
   - The hypothetical planks become real, shown by `(inventory ?var0)` which means the planks (`?var0`) are now in the agent's inventory.
   - They are identified as planks with `(is_planks ?var0)`.
   - The agent's hands become free `(handsfree ?var1)` because the log they were holding is now transformed into planks.
   - The log is no longer equipped or identified as a log, shown by `(not (equipped ?var2 ?var1))` and `(not (is_log ?var2))`. This indicates the log has been used up.

This schema carefully makes sure that the agent can only craft planks if they have a log to start with, and it accounts for what happens to the log and the newly created planks. It's much like ensuring you have flour before you bake a cake, and then, once the cake is baked, you no longer have just flour but a delicious cake instead!","Parameters:
1. ?var0 - moveable
2. ?var1 - agent
3. ?var2 - moveable

Preconditions:
```
(and
    (hypothetical ?var0)
    (is_log ?var2)
    (equipped ?var2 ?var1)
)
```

Effects:
```
(and
    (inventory ?var0)
    (is_planks ?var0)
    (handsfree ?var1)
    (not (equipped ?var2 ?var1))
    (not (hypothetical ?var0))
    (not (is_log ?var2))
)
```
","(:action craft_plank
    :parameters (?var0 - moveable ?var1 - agent ?var2 - moveable)
    :precondition (and (hypothetical ?var0) (is_log ?var2) (equipped ?var2 ?var1))
    :effect (and (inventory ?var0) (is_planks ?var0) (handsfree ?var1) (not (equipped ?var2 ?var1)) (not (hypothetical ?var0)) (not (is_log ?var2)))
)",
minecraft,craft_plank,0.6813176870346069,Positive (Correct Match),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: In the world of Minecraft, crafting is a key skill, and here, the agent can turn a log into planks. It's a bit like a magic trick: the agent takes a log, which they have to be holding, and transforms it into planks. These planks then appear in their inventory, ready to be used for building or crafting other items. The log, of course, is used up in this process.

Action name: craft_plank


Your answer:
","**Explanation:**
Let's imagine that in the world of Minecraft, the agent (like a player) wants to craft planks from a log. Think of it like a cook needing specific ingredients and tools to make a meal.

In our PDDL model, the action named ""craft_plank"" follows a similar thought process. Here's how the description of the world leads to the rules in our model:

1. **Preconditions**: Before crafting, certain conditions must be met:
   - The agent must have a log that they are actually holding. This is represented by `(equipped ?var2 ?var1)` meaning the log (`?var2`) is equipped by the agent (`?var1`).
   - The log must be a real log, confirmed by `(is_log ?var2)`.
   - We also see `(hypothetical ?var0)`. Here, the planks that will be created are initially just an idea (hypothetical) before they become real.

2. **Effects**: After the action is performed, we expect changes:
   - The hypothetical planks become real, shown by `(inventory ?var0)` which means the planks (`?var0`) are now in the agent's inventory.
   - They are identified as planks with `(is_planks ?var0)`.
   - The agent's hands become free `(handsfree ?var1)` because the log they were holding is now transformed into planks.
   - The log is no longer equipped or identified as a log, shown by `(not (equipped ?var2 ?var1))` and `(not (is_log ?var2))`. This indicates the log has been used up.

This schema carefully makes sure that the agent can only craft planks if they have a log to start with, and it accounts for what happens to the log and the newly created planks. It's much like ensuring you have flour before you bake a cake, and then, once the cake is baked, you no longer have just flour but a delicious cake instead!
Parameters:
1. ?var0 - moveable
2. ?var1 - agent
3. ?var2 - moveable

Preconditions:
```
(and
    (hypothetical ?var0)
    (is_log ?var2)
    (equipped ?var2 ?var1)
)
```

Effects:
```
(and
    (inventory ?var0)
    (is_planks ?var0)
    (handsfree ?var1)
    (not (equipped ?var2 ?var1))
    (not (hypothetical ?var0))
    (not (is_log ?var2))
)
```
","(:action craft_plank
    :parameters (?var0 - moveable ?var1 - agent ?var2 - moveable)
    :precondition (and (hypothetical ?var0) (is_log ?var2) (equipped ?var2 ?var1))
    :effect (and (inventory ?var0) (is_planks ?var0) (handsfree ?var1) (not (equipped ?var2 ?var1)) (not (hypothetical ?var0)) (not (is_log ?var2)))
)",
minecraft,craft_plank,0.1438380926847458,Easy Negative (Inter-Domain Mismatch),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: In the world of Minecraft, crafting is a key skill, and here, the agent can turn a log into planks. It's a bit like a magic trick: the agent takes a log, which they have to be holding, and transforms it into planks. These planks then appear in their inventory, ready to be used for building or crafting other items. The log, of course, is used up in this process.

Action name: craft_plank


Your answer:
","Parameters:
1. ?x - book
2. ?y - book
3. ?cat - category

Preconditions:
```
(and
    (on-shelf ?x ?y)
    (accessible ?x)
    (hands-free)
    (belongs-to-category ?x ?cat)
)
```

Effects:
```
(and
    (holding ?x)
    (accessible ?y)
    (not (accessible ?x))
    (not (hands-free))
    (not (on-shelf ?x ?y))
    (shelf-empty ?cat)
)
```
","(:action craft_plank
    :parameters (?var0 - moveable ?var1 - agent ?var2 - moveable)
    :precondition (and (hypothetical ?var0) (is_log ?var2) (equipped ?var2 ?var1))
    :effect (and (inventory ?var0) (is_planks ?var0) (handsfree ?var1) (not (equipped ?var2 ?var1)) (not (hypothetical ?var0)) (not (is_log ?var2)))
)",
minecraft,craft_plank,0.024976003915071487,Easy Negative (Inter-Domain Mismatch),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: In the world of Minecraft, crafting is a key skill, and here, the agent can turn a log into planks. It's a bit like a magic trick: the agent takes a log, which they have to be holding, and transforms it into planks. These planks then appear in their inventory, ready to be used for building or crafting other items. The log, of course, is used up in this process.

Action name: craft_plank


Your answer:
","Parameters:
1. ?x - book

Preconditions:
```
(holding ?x)
```

Effects:
```
(and
    (not (holding ?x))
    (accessible ?x)
    (hands-free)
    (on-table ?x)
)
```
","(:action craft_plank
    :parameters (?var0 - moveable ?var1 - agent ?var2 - moveable)
    :precondition (and (hypothetical ?var0) (is_log ?var2) (equipped ?var2 ?var1))
    :effect (and (inventory ?var0) (is_planks ?var0) (handsfree ?var1) (not (equipped ?var2 ?var1)) (not (hypothetical ?var0)) (not (is_log ?var2)))
)",
minecraft,craft_plank,0.1462501734495163,Easy Negative (Inter-Domain Mismatch),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: In the world of Minecraft, crafting is a key skill, and here, the agent can turn a log into planks. It's a bit like a magic trick: the agent takes a log, which they have to be holding, and transforms it into planks. These planks then appear in their inventory, ready to be used for building or crafting other items. The log, of course, is used up in this process.

Action name: craft_plank


Your answer:
","Parameters:
1. ?x - book

Preconditions:
```
(and
    (accessible ?x)
    (not (checked-out ?x))
)
```

Effects:
```
(and
    (checked-out ?x)
    (not (accessible ?x))
    (book-request ?x)
    (return-due ?x)
)
```
","(:action craft_plank
    :parameters (?var0 - moveable ?var1 - agent ?var2 - moveable)
    :precondition (and (hypothetical ?var0) (is_log ?var2) (equipped ?var2 ?var1))
    :effect (and (inventory ?var0) (is_planks ?var0) (handsfree ?var1) (not (equipped ?var2 ?var1)) (not (hypothetical ?var0)) (not (is_log ?var2)))
)",
minecraft,craft_plank,0.021671444177627563,Easy Negative (Inter-Domain Mismatch),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: In the world of Minecraft, crafting is a key skill, and here, the agent can turn a log into planks. It's a bit like a magic trick: the agent takes a log, which they have to be holding, and transforms it into planks. These planks then appear in their inventory, ready to be used for building or crafting other items. The log, of course, is used up in this process.

Action name: craft_plank


Your answer:
","Parameters:
1. ?x - book

Preconditions:
```
(and
    (checked-out ?x)
    (holding ?x)
)
```

Effects:
```
(and
    (not (checked-out ?x))
    (not (holding ?x))
    (not (book-request ?x))
    (not (return-due ?x))
    (accessible ?x)
    (hands-free)
)
```
","(:action craft_plank
    :parameters (?var0 - moveable ?var1 - agent ?var2 - moveable)
    :precondition (and (hypothetical ?var0) (is_log ?var2) (equipped ?var2 ?var1))
    :effect (and (inventory ?var0) (is_planks ?var0) (handsfree ?var1) (not (equipped ?var2 ?var1)) (not (hypothetical ?var0)) (not (is_log ?var2)))
)",
minecraft,craft_plank,0.13315889239311218,Easy Negative (Inter-Domain Mismatch),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: In the world of Minecraft, crafting is a key skill, and here, the agent can turn a log into planks. It's a bit like a magic trick: the agent takes a log, which they have to be holding, and transforms it into planks. These planks then appear in their inventory, ready to be used for building or crafting other items. The log, of course, is used up in this process.

Action name: craft_plank


Your answer:
","Parameters:
1. ?x - book

Preconditions:
```
(and
    (accessible ?x)
    (on-table ?x)
    (hands-free)
)
```

Effects:
```
(and
    (not (on-table ?x))
    (not (accessible ?x))
    (not (hands-free))
    (holding ?x)
)
```
","(:action craft_plank
    :parameters (?var0 - moveable ?var1 - agent ?var2 - moveable)
    :precondition (and (hypothetical ?var0) (is_log ?var2) (equipped ?var2 ?var1))
    :effect (and (inventory ?var0) (is_planks ?var0) (handsfree ?var1) (not (equipped ?var2 ?var1)) (not (hypothetical ?var0)) (not (is_log ?var2)))
)",
minecraft,craft_plank,0.16687951982021332,Easy Negative (Inter-Domain Mismatch),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: In the world of Minecraft, crafting is a key skill, and here, the agent can turn a log into planks. It's a bit like a magic trick: the agent takes a log, which they have to be holding, and transforms it into planks. These planks then appear in their inventory, ready to be used for building or crafting other items. The log, of course, is used up in this process.

Action name: craft_plank


Your answer:
","Parameters:
1. ?x - book
2. ?y - book
3. ?cat - category

Preconditions:
```
(and
    (holding ?x)
    (accessible ?y)
    (belongs-to-category ?x ?cat)
    (not (shelf-overflow ?cat))
)
```

Effects:
```
(and
    (not (holding ?x))
    (not (accessible ?y))
    (accessible ?x)
    (hands-free)
    (on-shelf ?x ?y)
    (shelf-empty ?cat)
)
```
","(:action craft_plank
    :parameters (?var0 - moveable ?var1 - agent ?var2 - moveable)
    :precondition (and (hypothetical ?var0) (is_log ?var2) (equipped ?var2 ?var1))
    :effect (and (inventory ?var0) (is_planks ?var0) (handsfree ?var1) (not (equipped ?var2 ?var1)) (not (hypothetical ?var0)) (not (is_log ?var2)))
)",
minecraft,craft_plank,0.17881816625595093,Easy Negative (Inter-Domain Mismatch),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: In the world of Minecraft, crafting is a key skill, and here, the agent can turn a log into planks. It's a bit like a magic trick: the agent takes a log, which they have to be holding, and transforms it into planks. These planks then appear in their inventory, ready to be used for building or crafting other items. The log, of course, is used up in this process.

Action name: craft_plank


Your answer:

**Explanation:**
Let's imagine that in the world of Minecraft, the agent (like a player) wants to craft planks from a log. Think of it like a cook needing specific ingredients and tools to make a meal.

In our PDDL model, the action named ""craft_plank"" follows a similar thought process. Here's how the description of the world leads to the rules in our model:

1. **Preconditions**: Before crafting, certain conditions must be met:
   - The agent must have a log that they are actually holding. This is represented by `(equipped ?var2 ?var1)` meaning the log (`?var2`) is equipped by the agent (`?var1`).
   - The log must be a real log, confirmed by `(is_log ?var2)`.
   - We also see `(hypothetical ?var0)`. Here, the planks that will be created are initially just an idea (hypothetical) before they become real.

2. **Effects**: After the action is performed, we expect changes:
   - The hypothetical planks become real, shown by `(inventory ?var0)` which means the planks (`?var0`) are now in the agent's inventory.
   - They are identified as planks with `(is_planks ?var0)`.
   - The agent's hands become free `(handsfree ?var1)` because the log they were holding is now transformed into planks.
   - The log is no longer equipped or identified as a log, shown by `(not (equipped ?var2 ?var1))` and `(not (is_log ?var2))`. This indicates the log has been used up.

This schema carefully makes sure that the agent can only craft planks if they have a log to start with, and it accounts for what happens to the log and the newly created planks. It's much like ensuring you have flour before you bake a cake, and then, once the cake is baked, you no longer have just flour but a delicious cake instead!","Parameters:
1. ?from - cells
2. ?to - cells

Preconditions:
```
(and
    (connected ?from ?to)
    (at-hero ?from)
    (not (is-destroyed ?to))
    (not (has-trap ?from))
    (has-trap ?to)
    (arm-free)
)
```

Effects:
```
(and
    (at-hero ?to)
    (is-destroyed ?from)
    (not (at-hero ?from))
)
```
","(:action craft_plank
    :parameters (?var0 - moveable ?var1 - agent ?var2 - moveable)
    :precondition (and (hypothetical ?var0) (is_log ?var2) (equipped ?var2 ?var1))
    :effect (and (inventory ?var0) (is_planks ?var0) (handsfree ?var1) (not (equipped ?var2 ?var1)) (not (hypothetical ?var0)) (not (is_log ?var2)))
)",
minecraft,craft_plank,0.22251534461975098,Easy Negative (Inter-Domain Mismatch),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: In the world of Minecraft, crafting is a key skill, and here, the agent can turn a log into planks. It's a bit like a magic trick: the agent takes a log, which they have to be holding, and transforms it into planks. These planks then appear in their inventory, ready to be used for building or crafting other items. The log, of course, is used up in this process.

Action name: craft_plank


Your answer:

**Explanation:**
Let's imagine that in the world of Minecraft, the agent (like a player) wants to craft planks from a log. Think of it like a cook needing specific ingredients and tools to make a meal.

In our PDDL model, the action named ""craft_plank"" follows a similar thought process. Here's how the description of the world leads to the rules in our model:

1. **Preconditions**: Before crafting, certain conditions must be met:
   - The agent must have a log that they are actually holding. This is represented by `(equipped ?var2 ?var1)` meaning the log (`?var2`) is equipped by the agent (`?var1`).
   - The log must be a real log, confirmed by `(is_log ?var2)`.
   - We also see `(hypothetical ?var0)`. Here, the planks that will be created are initially just an idea (hypothetical) before they become real.

2. **Effects**: After the action is performed, we expect changes:
   - The hypothetical planks become real, shown by `(inventory ?var0)` which means the planks (`?var0`) are now in the agent's inventory.
   - They are identified as planks with `(is_planks ?var0)`.
   - The agent's hands become free `(handsfree ?var1)` because the log they were holding is now transformed into planks.
   - The log is no longer equipped or identified as a log, shown by `(not (equipped ?var2 ?var1))` and `(not (is_log ?var2))`. This indicates the log has been used up.

This schema carefully makes sure that the agent can only craft planks if they have a log to start with, and it accounts for what happens to the log and the newly created planks. It's much like ensuring you have flour before you bake a cake, and then, once the cake is baked, you no longer have just flour but a delicious cake instead!","Parameters:
1. ?from - cells
2. ?to - cells

Preconditions:
```
(and
    (connected ?from ?to)
    (at-hero ?from)
    (not (has-trap ?from))
    (not (is-destroyed ?to))
    (not (has-trap ?to))
    (not (has-monster ?to))
)
```

Effects:
```
(and
    (at-hero ?to)
    (is-destroyed ?from)
    (not (at-hero ?from))
)
```
","(:action craft_plank
    :parameters (?var0 - moveable ?var1 - agent ?var2 - moveable)
    :precondition (and (hypothetical ?var0) (is_log ?var2) (equipped ?var2 ?var1))
    :effect (and (inventory ?var0) (is_planks ?var0) (handsfree ?var1) (not (equipped ?var2 ?var1)) (not (hypothetical ?var0)) (not (is_log ?var2)))
)",
minecraft,craft_plank,0.15997400879859924,Easy Negative (Inter-Domain Mismatch),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: In the world of Minecraft, crafting is a key skill, and here, the agent can turn a log into planks. It's a bit like a magic trick: the agent takes a log, which they have to be holding, and transforms it into planks. These planks then appear in their inventory, ready to be used for building or crafting other items. The log, of course, is used up in this process.

Action name: craft_plank


Your answer:

**Explanation:**
Let's imagine that in the world of Minecraft, the agent (like a player) wants to craft planks from a log. Think of it like a cook needing specific ingredients and tools to make a meal.

In our PDDL model, the action named ""craft_plank"" follows a similar thought process. Here's how the description of the world leads to the rules in our model:

1. **Preconditions**: Before crafting, certain conditions must be met:
   - The agent must have a log that they are actually holding. This is represented by `(equipped ?var2 ?var1)` meaning the log (`?var2`) is equipped by the agent (`?var1`).
   - The log must be a real log, confirmed by `(is_log ?var2)`.
   - We also see `(hypothetical ?var0)`. Here, the planks that will be created are initially just an idea (hypothetical) before they become real.

2. **Effects**: After the action is performed, we expect changes:
   - The hypothetical planks become real, shown by `(inventory ?var0)` which means the planks (`?var0`) are now in the agent's inventory.
   - They are identified as planks with `(is_planks ?var0)`.
   - The agent's hands become free `(handsfree ?var1)` because the log they were holding is now transformed into planks.
   - The log is no longer equipped or identified as a log, shown by `(not (equipped ?var2 ?var1))` and `(not (is_log ?var2))`. This indicates the log has been used up.

This schema carefully makes sure that the agent can only craft planks if they have a log to start with, and it accounts for what happens to the log and the newly created planks. It's much like ensuring you have flour before you bake a cake, and then, once the cake is baked, you no longer have just flour but a delicious cake instead!","Parameters:
1. ?loc - cells
2. ?s - swords

Preconditions:
```
(and
    (at-hero ?loc)
    (at-sword ?s ?loc)
    (arm-free)
)
```

Effects:
```
(and
    (holding ?s)
    (not (at-sword ?s ?loc))
    (not (arm-free))
)
```
","(:action craft_plank
    :parameters (?var0 - moveable ?var1 - agent ?var2 - moveable)
    :precondition (and (hypothetical ?var0) (is_log ?var2) (equipped ?var2 ?var1))
    :effect (and (inventory ?var0) (is_planks ?var0) (handsfree ?var1) (not (equipped ?var2 ?var1)) (not (hypothetical ?var0)) (not (is_log ?var2)))
)",
minecraft,craft_plank,0.30057987570762634,Easy Negative (Inter-Domain Mismatch),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: In the world of Minecraft, crafting is a key skill, and here, the agent can turn a log into planks. It's a bit like a magic trick: the agent takes a log, which they have to be holding, and transforms it into planks. These planks then appear in their inventory, ready to be used for building or crafting other items. The log, of course, is used up in this process.

Action name: craft_plank


Your answer:

**Explanation:**
Let's imagine that in the world of Minecraft, the agent (like a player) wants to craft planks from a log. Think of it like a cook needing specific ingredients and tools to make a meal.

In our PDDL model, the action named ""craft_plank"" follows a similar thought process. Here's how the description of the world leads to the rules in our model:

1. **Preconditions**: Before crafting, certain conditions must be met:
   - The agent must have a log that they are actually holding. This is represented by `(equipped ?var2 ?var1)` meaning the log (`?var2`) is equipped by the agent (`?var1`).
   - The log must be a real log, confirmed by `(is_log ?var2)`.
   - We also see `(hypothetical ?var0)`. Here, the planks that will be created are initially just an idea (hypothetical) before they become real.

2. **Effects**: After the action is performed, we expect changes:
   - The hypothetical planks become real, shown by `(inventory ?var0)` which means the planks (`?var0`) are now in the agent's inventory.
   - They are identified as planks with `(is_planks ?var0)`.
   - The agent's hands become free `(handsfree ?var1)` because the log they were holding is now transformed into planks.
   - The log is no longer equipped or identified as a log, shown by `(not (equipped ?var2 ?var1))` and `(not (is_log ?var2))`. This indicates the log has been used up.

This schema carefully makes sure that the agent can only craft planks if they have a log to start with, and it accounts for what happens to the log and the newly created planks. It's much like ensuring you have flour before you bake a cake, and then, once the cake is baked, you no longer have just flour but a delicious cake instead!","Parameters:
1. ?loc - cells

Preconditions:
```
(and
    (at-hero ?loc)
    (arm-free)
    (has-trap ?loc)
)
```

Effects:
```
(and
    (trap-disarmed ?loc)
    (not (has-trap ?loc))
)
```
","(:action craft_plank
    :parameters (?var0 - moveable ?var1 - agent ?var2 - moveable)
    :precondition (and (hypothetical ?var0) (is_log ?var2) (equipped ?var2 ?var1))
    :effect (and (inventory ?var0) (is_planks ?var0) (handsfree ?var1) (not (equipped ?var2 ?var1)) (not (hypothetical ?var0)) (not (is_log ?var2)))
)",
minecraft,craft_plank,0.2988182306289673,Easy Negative (Inter-Domain Mismatch),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: In the world of Minecraft, crafting is a key skill, and here, the agent can turn a log into planks. It's a bit like a magic trick: the agent takes a log, which they have to be holding, and transforms it into planks. These planks then appear in their inventory, ready to be used for building or crafting other items. The log, of course, is used up in this process.

Action name: craft_plank


Your answer:

**Explanation:**
Let's imagine that in the world of Minecraft, the agent (like a player) wants to craft planks from a log. Think of it like a cook needing specific ingredients and tools to make a meal.

In our PDDL model, the action named ""craft_plank"" follows a similar thought process. Here's how the description of the world leads to the rules in our model:

1. **Preconditions**: Before crafting, certain conditions must be met:
   - The agent must have a log that they are actually holding. This is represented by `(equipped ?var2 ?var1)` meaning the log (`?var2`) is equipped by the agent (`?var1`).
   - The log must be a real log, confirmed by `(is_log ?var2)`.
   - We also see `(hypothetical ?var0)`. Here, the planks that will be created are initially just an idea (hypothetical) before they become real.

2. **Effects**: After the action is performed, we expect changes:
   - The hypothetical planks become real, shown by `(inventory ?var0)` which means the planks (`?var0`) are now in the agent's inventory.
   - They are identified as planks with `(is_planks ?var0)`.
   - The agent's hands become free `(handsfree ?var1)` because the log they were holding is now transformed into planks.
   - The log is no longer equipped or identified as a log, shown by `(not (equipped ?var2 ?var1))` and `(not (is_log ?var2))`. This indicates the log has been used up.

This schema carefully makes sure that the agent can only craft planks if they have a log to start with, and it accounts for what happens to the log and the newly created planks. It's much like ensuring you have flour before you bake a cake, and then, once the cake is baked, you no longer have just flour but a delicious cake instead!","Parameters:
1. ?from - cells
2. ?to - cells
3. ?s - swords

Preconditions:
```
(and
    (connected ?from ?to)
    (at-hero ?from)
    (has-monster ?to)
    (not (is-destroyed ?to))
    (not (has-trap ?from))
    (holding ?s)
)
```

Effects:
```
(and
    (at-hero ?to)
    (is-destroyed ?from)
    (not (at-hero ?from))
)
```
","(:action craft_plank
    :parameters (?var0 - moveable ?var1 - agent ?var2 - moveable)
    :precondition (and (hypothetical ?var0) (is_log ?var2) (equipped ?var2 ?var1))
    :effect (and (inventory ?var0) (is_planks ?var0) (handsfree ?var1) (not (equipped ?var2 ?var1)) (not (hypothetical ?var0)) (not (is_log ?var2)))
)",
minecraft,craft_plank,0.2034735381603241,Easy Negative (Inter-Domain Mismatch),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: In the world of Minecraft, crafting is a key skill, and here, the agent can turn a log into planks. It's a bit like a magic trick: the agent takes a log, which they have to be holding, and transforms it into planks. These planks then appear in their inventory, ready to be used for building or crafting other items. The log, of course, is used up in this process.

Action name: craft_plank


Your answer:

**Explanation:**
Let's imagine that in the world of Minecraft, the agent (like a player) wants to craft planks from a log. Think of it like a cook needing specific ingredients and tools to make a meal.

In our PDDL model, the action named ""craft_plank"" follows a similar thought process. Here's how the description of the world leads to the rules in our model:

1. **Preconditions**: Before crafting, certain conditions must be met:
   - The agent must have a log that they are actually holding. This is represented by `(equipped ?var2 ?var1)` meaning the log (`?var2`) is equipped by the agent (`?var1`).
   - The log must be a real log, confirmed by `(is_log ?var2)`.
   - We also see `(hypothetical ?var0)`. Here, the planks that will be created are initially just an idea (hypothetical) before they become real.

2. **Effects**: After the action is performed, we expect changes:
   - The hypothetical planks become real, shown by `(inventory ?var0)` which means the planks (`?var0`) are now in the agent's inventory.
   - They are identified as planks with `(is_planks ?var0)`.
   - The agent's hands become free `(handsfree ?var1)` because the log they were holding is now transformed into planks.
   - The log is no longer equipped or identified as a log, shown by `(not (equipped ?var2 ?var1))` and `(not (is_log ?var2))`. This indicates the log has been used up.

This schema carefully makes sure that the agent can only craft planks if they have a log to start with, and it accounts for what happens to the log and the newly created planks. It's much like ensuring you have flour before you bake a cake, and then, once the cake is baked, you no longer have just flour but a delicious cake instead!","Parameters:
1. ?loc - cells
2. ?s - swords

Preconditions:
```
(and
    (at-hero ?loc)
    (holding ?s)
    (not (has-trap ?loc))
    (not (has-monster ?loc))
)
```

Effects:
```
(and
    (arm-free)
    (is-destroyed ?s)
    (not (holding ?s))
)
```
","(:action craft_plank
    :parameters (?var0 - moveable ?var1 - agent ?var2 - moveable)
    :precondition (and (hypothetical ?var0) (is_log ?var2) (equipped ?var2 ?var1))
    :effect (and (inventory ?var0) (is_planks ?var0) (handsfree ?var1) (not (equipped ?var2 ?var1)) (not (hypothetical ?var0)) (not (is_log ?var2)))
)",
minecraft,craft_plank,0.28263044357299805,Easy Negative (Inter-Domain Mismatch),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: In the world of Minecraft, crafting is a key skill, and here, the agent can turn a log into planks. It's a bit like a magic trick: the agent takes a log, which they have to be holding, and transforms it into planks. These planks then appear in their inventory, ready to be used for building or crafting other items. The log, of course, is used up in this process.

Action name: craft_plank


Your answer:
","**Explanation:**

Imagine you're guiding a hero who just woke up in a mysterious dungeon. Each room can have different things: some are empty, others have monsters, some have traps, and a few might have swords. There's also a special room with an exit—our hero's goal.

Now, let's talk about the action called **move-to-trap**. This action involves our hero moving from one room (we'll call it ""Room A"") to another room (""Room B""), where, unfortunately, there's a trap waiting. Here's why each part of the plan (or action schema) makes sense:

1. **Connected Rooms**: Our hero can only move to a room directly connected to the one they're currently in. This is like being in your house and only being able to walk into rooms that have doors leading from where you are now.

2. **Hero's Current Location**: The hero must start in Room A to move to Room B. You can't move from a place if you're not actually there, right?

3. **Room B Not Destroyed**: The room our hero is moving to mustn't be already destroyed (or in ruins). It's like making sure the bridge you want to cross hasn't collapsed.

4. **Room A Doesn't Have a Trap**: It’s safer if the room our hero is leaving doesn't have a trap. Imagine trying to leave a room with a trap; it could activate and cause trouble!

5. **Room B Has a Trap**: Since the action is called **move-to-trap**, it specifically involves moving to a room with a trap, almost like knowing there's a puddle ahead but stepping into it anyway because it's the only path forward.

6. **Hero's Arm is Free**: This indicates that the hero isn’t holding anything like a sword. It’s important because handling traps might require free hands—think about needing your hands free to disarm or avoid a trap carefully.

When our hero completes this action, several things happen:
- **Hero is now in Room B**: Just like when you walk into another room, you’re no longer in the first room.
- **Room A is destroyed**: This could mean the hero leaves it in a way that no one can follow—maybe they close a heavy door that locks automatically.
- **Hero is no longer in Room A**: It confirms that the hero has completely left Room A.

This action is designed for specific situations in the dungeon where the hero might need to move strategically, even into risky areas, to navigate through the dungeon and eventually find the exit.
Parameters:
1. ?from - cells
2. ?to - cells

Preconditions:
```
(and
    (connected ?from ?to)
    (at-hero ?from)
    (not (is-destroyed ?to))
    (not (has-trap ?from))
    (has-trap ?to)
    (arm-free)
)
```

Effects:
```
(and
    (at-hero ?to)
    (is-destroyed ?from)
    (not (at-hero ?from))
)
```
","(:action craft_plank
    :parameters (?var0 - moveable ?var1 - agent ?var2 - moveable)
    :precondition (and (hypothetical ?var0) (is_log ?var2) (equipped ?var2 ?var1))
    :effect (and (inventory ?var0) (is_planks ?var0) (handsfree ?var1) (not (equipped ?var2 ?var1)) (not (hypothetical ?var0)) (not (is_log ?var2)))
)",
minecraft,craft_plank,0.28654181957244873,Easy Negative (Inter-Domain Mismatch),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: In the world of Minecraft, crafting is a key skill, and here, the agent can turn a log into planks. It's a bit like a magic trick: the agent takes a log, which they have to be holding, and transforms it into planks. These planks then appear in their inventory, ready to be used for building or crafting other items. The log, of course, is used up in this process.

Action name: craft_plank


Your answer:
","**Explanation:**

Imagine our hero in a big, scary dungeon, just like a character from a fairy tale or a video game. The dungeon has several rooms, and some rooms are safe while others have monsters or traps. The hero's goal is to escape from this dungeon, moving from one room to another until he finds the exit.

Now, let's talk about the action called ""move"" that our hero can take. The action ""move"" lets the hero go from one room (we'll call this the ""current room"") to a connected room (let's call this the ""next room""). Think of the dungeon like a big house with many doors connecting the rooms; the hero can only move through a door if it’s open and the room on the other side is safe.

In the PDDL (a kind of programming language for planning what actions to take), the action ""move"" needs some conditions to be met before the hero can move:
1. **The rooms must be connected:** Just like you can't walk through a wall at home, the hero can only move to a room if there's a direct connection (like a doorway or a corridor).
2. **The hero must be in the current room:** The hero can only leave a room if he's actually in it.
3. **The current room shouldn’t have a trap that could hurt him.**
4. **The next room shouldn’t be destroyed:** The hero can't go into a room if it’s already been collapsed or destroyed (maybe from a previous adventure!).
5. **The next room shouldn’t have a trap or a monster:** This makes sure our hero doesn’t walk into new danger.

When the hero moves:
- **He is now in the next room:** Just like if you walk to another room in your house, you're then in that new room.
- **The room he left gets destroyed:** This might sound strange, but imagine if every time he left a room, the door magically closed and locked forever, so he can’t go back the same way.
- **He is no longer in the current room:** This is just confirming that he has moved on from the previous room.

These rules help our hero make smart moves through the dungeon, avoiding danger and making progress towards escape. This way of setting up the hero's actions makes sure he can navigate through the dungeon safely and eventually find his way out.
Parameters:
1. ?from - cells
2. ?to - cells

Preconditions:
```
(and
    (connected ?from ?to)
    (at-hero ?from)
    (not (has-trap ?from))
    (not (is-destroyed ?to))
    (not (has-trap ?to))
    (not (has-monster ?to))
)
```

Effects:
```
(and
    (at-hero ?to)
    (is-destroyed ?from)
    (not (at-hero ?from))
)
```
","(:action craft_plank
    :parameters (?var0 - moveable ?var1 - agent ?var2 - moveable)
    :precondition (and (hypothetical ?var0) (is_log ?var2) (equipped ?var2 ?var1))
    :effect (and (inventory ?var0) (is_planks ?var0) (handsfree ?var1) (not (equipped ?var2 ?var1)) (not (hypothetical ?var0)) (not (is_log ?var2)))
)",
minecraft,craft_plank,0.30158182978630066,Easy Negative (Inter-Domain Mismatch),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: In the world of Minecraft, crafting is a key skill, and here, the agent can turn a log into planks. It's a bit like a magic trick: the agent takes a log, which they have to be holding, and transforms it into planks. These planks then appear in their inventory, ready to be used for building or crafting other items. The log, of course, is used up in this process.

Action name: craft_plank


Your answer:
","**Explanation:**

Imagine you're helping a hero navigate through a tricky dungeon filled with different challenges. The hero's objective is to escape, but along the way, they might find useful items like swords that can help protect against monsters.

In our scenario, the action of picking up a sword is crucial. Let's think of it like this: if you enter a room and see a sword on the floor while your hands are free, you can pick it up. The action schema in PDDL, which is a way to represent planning problems, explains this in a structured format.

The preconditions for our action ""pick-sword"" are:
1. **The hero must be in the same room as the sword** (represented as `(at-hero ?loc)` and `(at-sword ?s ?loc)`). This makes sense because you can't pick up something that's not in the same room as you.
2. **The hero's hand must be free** (`(arm-free)`). Just like you can't hold two grocery bags in one hand easily, our hero needs a free hand to pick up the sword.

The effects after the hero picks up the sword are:
1. **The hero is now holding the sword** (`(holding ?s)`). This indicates that the hero has successfully picked up the sword.
2. **The sword is no longer in its original place** (`(not (at-sword ?s ?loc))`). Just like if you take an apple from a basket, the apple isn't in the basket anymore.
3. **The hero's hand is no longer free** (`(not (arm-free))`). Holding the sword means the hand that was free is now occupied.

This action schema is a simple way to model the interaction between the hero and the sword in the dungeon. It helps ensure that all necessary conditions are met before the action takes place, making the hero's journey through the dungeon logical and structured. This way, the hero doesn't magically have a sword without picking it up or has two items in one hand, which keeps our dungeon adventure realistic and understandable.
Parameters:
1. ?loc - cells
2. ?s - swords

Preconditions:
```
(and
    (at-hero ?loc)
    (at-sword ?s ?loc)
    (arm-free)
)
```

Effects:
```
(and
    (holding ?s)
    (not (at-sword ?s ?loc))
    (not (arm-free))
)
```
","(:action craft_plank
    :parameters (?var0 - moveable ?var1 - agent ?var2 - moveable)
    :precondition (and (hypothetical ?var0) (is_log ?var2) (equipped ?var2 ?var1))
    :effect (and (inventory ?var0) (is_planks ?var0) (handsfree ?var1) (not (equipped ?var2 ?var1)) (not (hypothetical ?var0)) (not (is_log ?var2)))
)",
minecraft,craft_plank,0.20672237873077393,Easy Negative (Inter-Domain Mismatch),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: In the world of Minecraft, crafting is a key skill, and here, the agent can turn a log into planks. It's a bit like a magic trick: the agent takes a log, which they have to be holding, and transforms it into planks. These planks then appear in their inventory, ready to be used for building or crafting other items. The log, of course, is used up in this process.

Action name: craft_plank


Your answer:
","**Explanation:**

Imagine our hero in a dungeon, a place with rooms connected like a spider web. Each room can be just an empty space, or it might have something like a monster, a trap, or even a sword. Somewhere in this maze, there's a special room that has an exit—the ultimate goal for our hero.

Now, let's focus on a specific action our hero might need to take: **disarming a trap**. In our scenario, the hero finds themselves in a room with a trap. The action to disarm this trap is what we need to understand.

The action is named `disarm-trap`. This action, like any other, has specific requirements (preconditions) that must be met before the hero can perform it. These preconditions are:
1. **The hero must be in the same room as the trap.** This makes sense because you can't disarm a trap from another room. It's like needing to be in the kitchen to turn off a stove.
2. **The hero's hand must be free.** This means the hero can’t be holding anything, like a sword. It's a bit like needing both hands free to tie your shoes properly.
3. **There must actually be a trap in the room.** Obviously, the hero can't disarm a trap if there isn't one there!

If all these conditions are met, then the hero can go ahead and disarm the trap. The results (effects) of this action are:
1. **The trap in the room is disarmed.** This means the room is now safe from that trap.
2. **The trap is no longer considered to be in the room.** It's like cleaning up a spill; once it's cleaned, it's not there anymore.

By breaking down the action like this, we see how each condition helps ensure the action can be carried out safely and effectively. It’s just like following a recipe—each ingredient needs to be added at the right time for the dish to come out right!
Parameters:
1. ?loc - cells

Preconditions:
```
(and
    (at-hero ?loc)
    (arm-free)
    (has-trap ?loc)
)
```

Effects:
```
(and
    (trap-disarmed ?loc)
    (not (has-trap ?loc))
)
```
","(:action craft_plank
    :parameters (?var0 - moveable ?var1 - agent ?var2 - moveable)
    :precondition (and (hypothetical ?var0) (is_log ?var2) (equipped ?var2 ?var1))
    :effect (and (inventory ?var0) (is_planks ?var0) (handsfree ?var1) (not (equipped ?var2 ?var1)) (not (hypothetical ?var0)) (not (is_log ?var2)))
)",
minecraft,craft_plank,0.3918250799179077,Easy Negative (Inter-Domain Mismatch),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: In the world of Minecraft, crafting is a key skill, and here, the agent can turn a log into planks. It's a bit like a magic trick: the agent takes a log, which they have to be holding, and transforms it into planks. These planks then appear in their inventory, ready to be used for building or crafting other items. The log, of course, is used up in this process.

Action name: craft_plank


Your answer:
","**Explanation:**

Let's imagine our hero in the dungeon scenario. The hero wakes up and finds themselves in a room, wanting to move to an adjacent room where, unfortunately, there's a monster. Here's how we translate this scenario into a set of instructions, or a 'domain model,' in planning language.

The action we're talking about is called ""move-to-monster."" This means our hero is trying to move from one room (let’s call it Room A) to another room (Room B) where there is a monster. To ensure this action can happen, there are certain conditions that need to be met (these are called 'preconditions') and certain outcomes that will happen as a result of the action (these are called 'effects').

1. **Preconditions**:
   - **Connected Rooms**: Room A and Room B must be connected by a corridor. This makes sense because our hero can't magically jump from one room to another; there must be a path.
   - **Hero's Current Location**: The hero must currently be in Room A. If the hero isn't there, they can't start moving from it!
   - **Monster Presence**: Room B must have a monster. After all, the action is specifically about moving to a room with a monster.
   - **Room Integrity**: Room B should not be destroyed. A destroyed room might mean it’s collapsed or inaccessible, so it's logical our hero can’t move into it.
   - **Safety in Room A**: Room A should not have a trap. This makes sure our hero is safe and able to move without getting caught in a trap.
   - **Armed Hero**: The hero must be holding a sword. It’s a dangerous task to move into a room with a monster, so having a sword means the hero is prepared for a fight.

2. **Effects**:
   - **Hero's New Location**: After the action, the hero will be in Room B. They've successfully moved.
   - **Change in Room A's Status**: Room A becomes 'destroyed.' This might represent that the room is no longer safe or viable after the hero leaves, maybe because of the haste in escaping or some mechanism triggered by the departure.
   - **Update Hero's Old Location**: The fact that the hero was in Room A is no longer true, which is updated in our model to reflect the hero’s new position.

This planning helps organize our thoughts and actions logically, ensuring every step is clear and all necessary precautions are taken. Think of it like giving someone directions with a checklist: ""Before you go there, make sure this, this, and this are true, and once you do, this and this will happen."" This ensures everyone knows what to expect and how to prepare! 
Parameters:
1. ?from - cells
2. ?to - cells
3. ?s - swords

Preconditions:
```
(and
    (connected ?from ?to)
    (at-hero ?from)
    (has-monster ?to)
    (not (is-destroyed ?to))
    (not (has-trap ?from))
    (holding ?s)
)
```

Effects:
```
(and
    (at-hero ?to)
    (is-destroyed ?from)
    (not (at-hero ?from))
)
```
","(:action craft_plank
    :parameters (?var0 - moveable ?var1 - agent ?var2 - moveable)
    :precondition (and (hypothetical ?var0) (is_log ?var2) (equipped ?var2 ?var1))
    :effect (and (inventory ?var0) (is_planks ?var0) (handsfree ?var1) (not (equipped ?var2 ?var1)) (not (hypothetical ?var0)) (not (is_log ?var2)))
)",
minecraft,craft_plank,0.26161399483680725,Easy Negative (Inter-Domain Mismatch),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: In the world of Minecraft, crafting is a key skill, and here, the agent can turn a log into planks. It's a bit like a magic trick: the agent takes a log, which they have to be holding, and transforms it into planks. These planks then appear in their inventory, ready to be used for building or crafting other items. The log, of course, is used up in this process.

Action name: craft_plank


Your answer:
","**Explanation:**

Imagine you're helping a hero navigate a dungeon full of monsters and traps, a bit like playing a video game. Now, the hero has a sword, but in this part of the game, the hero decides to destroy the sword. To understand why certain conditions are checked before the hero can destroy the sword safely, let's break it down using the action ""destroy-sword"" from the game's rules (or in technical terms, the PDDL action schema).

Firstly, the hero needs to be in the same location as the sword. This makes sense, right? You can't throw something away or break it if it's not with you. So, the condition `(at-hero ?loc)` ensures that the hero is at the right spot to perform the action.

Secondly, the hero must be holding the sword. It’s similar to needing both hands on a bat to swing it; here, the hero needs to have the sword in hand to destroy it, checked by `(holding ?s)`.

But why check for no traps or monsters in the room? Think of it like trying to do something delicate, like assembling a model airplane, in a room with a loose tiger. Not a great idea, right? If there’s a monster in the room, destroying the sword might make the hero vulnerable to attack. Similarly, a trap could be triggered by the noise or movement, putting the hero in danger. So, `(not (has-trap ?loc))` and `(not (has-monster ?loc))` ensure that the environment is safe for the hero to break the sword without turning the situation worse.

Now, what happens after the sword is destroyed? The effect is that the hero’s hand is now free (`arm-free`), the sword is confirmed as destroyed (`is-destroyed ?s`), and the hero is no longer holding it (`not (holding ?s)`). It’s like cleaning up after finishing a task: put away the tools, clean up the mess, and free up your hands for the next task.

In simple terms, this action schema is like a set of instructions to make sure the hero does something risky (like destroying a sword) safely and responsibly, without making the dangerous dungeon situation even worse.
Parameters:
1. ?loc - cells
2. ?s - swords

Preconditions:
```
(and
    (at-hero ?loc)
    (holding ?s)
    (not (has-trap ?loc))
    (not (has-monster ?loc))
)
```

Effects:
```
(and
    (arm-free)
    (is-destroyed ?s)
    (not (holding ?s))
)
```
","(:action craft_plank
    :parameters (?var0 - moveable ?var1 - agent ?var2 - moveable)
    :precondition (and (hypothetical ?var0) (is_log ?var2) (equipped ?var2 ?var1))
    :effect (and (inventory ?var0) (is_planks ?var0) (handsfree ?var1) (not (equipped ?var2 ?var1)) (not (hypothetical ?var0)) (not (is_log ?var2)))
)",
minecraft,craft_plank,0.48663032054901123,Semi-Hard Negative (Intra-Domain Mismatch),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: In the world of Minecraft, crafting is a key skill, and here, the agent can turn a log into planks. It's a bit like a magic trick: the agent takes a log, which they have to be holding, and transforms it into planks. These planks then appear in their inventory, ready to be used for building or crafting other items. The log, of course, is used up in this process.

Action name: craft_plank


Your answer:
","Parameters:
1. ?var0 - moveable
2. ?var1 - agent

Preconditions:
```
(equipped ?var0 ?var1)
```

Effects:
```
(and
    (inventory ?var0)
    (not (equipped ?var0 ?var1))
    (handsfree ?var1)
)
```
","(:action craft_plank
    :parameters (?var0 - moveable ?var1 - agent ?var2 - moveable)
    :precondition (and (hypothetical ?var0) (is_log ?var2) (equipped ?var2 ?var1))
    :effect (and (inventory ?var0) (is_planks ?var0) (handsfree ?var1) (not (equipped ?var2 ?var1)) (not (hypothetical ?var0)) (not (is_log ?var2)))
)",
minecraft,craft_plank,0.410630464553833,Semi-Hard Negative (Intra-Domain Mismatch),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: In the world of Minecraft, crafting is a key skill, and here, the agent can turn a log into planks. It's a bit like a magic trick: the agent takes a log, which they have to be holding, and transforms it into planks. These planks then appear in their inventory, ready to be used for building or crafting other items. The log, of course, is used up in this process.

Action name: craft_plank


Your answer:
","Parameters:
1. ?var0 - static
2. ?var1 - static

Preconditions:
```
(agent_at ?var1)
```

Effects:
```
(and
    (agent_at ?var0)
    (not (agent_at ?var1))
)
```
","(:action craft_plank
    :parameters (?var0 - moveable ?var1 - agent ?var2 - moveable)
    :precondition (and (hypothetical ?var0) (is_log ?var2) (equipped ?var2 ?var1))
    :effect (and (inventory ?var0) (is_planks ?var0) (handsfree ?var1) (not (equipped ?var2 ?var1)) (not (hypothetical ?var0)) (not (is_log ?var2)))
)",
minecraft,craft_plank,0.7020046710968018,Semi-Hard Negative (Intra-Domain Mismatch),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: In the world of Minecraft, crafting is a key skill, and here, the agent can turn a log into planks. It's a bit like a magic trick: the agent takes a log, which they have to be holding, and transforms it into planks. These planks then appear in their inventory, ready to be used for building or crafting other items. The log, of course, is used up in this process.

Action name: craft_plank


Your answer:
","Parameters:
1. ?var0 - moveable
2. ?var1 - agent

Preconditions:
```
(and
    (inventory ?var0)
    (handsfree ?var1)
)
```

Effects:
```
(and
    (equipped ?var0 ?var1)
    (not (handsfree ?var1))
    (not (inventory ?var0))
)
```
","(:action craft_plank
    :parameters (?var0 - moveable ?var1 - agent ?var2 - moveable)
    :precondition (and (hypothetical ?var0) (is_log ?var2) (equipped ?var2 ?var1))
    :effect (and (inventory ?var0) (is_planks ?var0) (handsfree ?var1) (not (equipped ?var2 ?var1)) (not (hypothetical ?var0)) (not (is_log ?var2)))
)",
minecraft,craft_plank,0.6227985620498657,Semi-Hard Negative (Intra-Domain Mismatch),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: In the world of Minecraft, crafting is a key skill, and here, the agent can turn a log into planks. It's a bit like a magic trick: the agent takes a log, which they have to be holding, and transforms it into planks. These planks then appear in their inventory, ready to be used for building or crafting other items. The log, of course, is used up in this process.

Action name: craft_plank


Your answer:
","Parameters:
1. ?var0 - moveable
2. ?var1 - static

Preconditions:
```
(and
    (at ?var0 ?var1)
    (agent_at ?var1)
)
```

Effects:
```
(and
    (inventory ?var0)
    (not (at ?var0 ?var1))
)
```
","(:action craft_plank
    :parameters (?var0 - moveable ?var1 - agent ?var2 - moveable)
    :precondition (and (hypothetical ?var0) (is_log ?var2) (equipped ?var2 ?var1))
    :effect (and (inventory ?var0) (is_planks ?var0) (handsfree ?var1) (not (equipped ?var2 ?var1)) (not (hypothetical ?var0)) (not (is_log ?var2)))
)",
minecraft,craft_plank,0.48663032054901123,Semi-Hard Negative (Intra-Domain Mismatch),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: In the world of Minecraft, crafting is a key skill, and here, the agent can turn a log into planks. It's a bit like a magic trick: the agent takes a log, which they have to be holding, and transforms it into planks. These planks then appear in their inventory, ready to be used for building or crafting other items. The log, of course, is used up in this process.

Action name: craft_plank


Your answer:

**Explanation:**
Let's imagine that in the world of Minecraft, the agent (like a player) wants to craft planks from a log. Think of it like a cook needing specific ingredients and tools to make a meal.

In our PDDL model, the action named ""craft_plank"" follows a similar thought process. Here's how the description of the world leads to the rules in our model:

1. **Preconditions**: Before crafting, certain conditions must be met:
   - The agent must have a log that they are actually holding. This is represented by `(equipped ?var2 ?var1)` meaning the log (`?var2`) is equipped by the agent (`?var1`).
   - The log must be a real log, confirmed by `(is_log ?var2)`.
   - We also see `(hypothetical ?var0)`. Here, the planks that will be created are initially just an idea (hypothetical) before they become real.

2. **Effects**: After the action is performed, we expect changes:
   - The hypothetical planks become real, shown by `(inventory ?var0)` which means the planks (`?var0`) are now in the agent's inventory.
   - They are identified as planks with `(is_planks ?var0)`.
   - The agent's hands become free `(handsfree ?var1)` because the log they were holding is now transformed into planks.
   - The log is no longer equipped or identified as a log, shown by `(not (equipped ?var2 ?var1))` and `(not (is_log ?var2))`. This indicates the log has been used up.

This schema carefully makes sure that the agent can only craft planks if they have a log to start with, and it accounts for what happens to the log and the newly created planks. It's much like ensuring you have flour before you bake a cake, and then, once the cake is baked, you no longer have just flour but a delicious cake instead!","Parameters:
1. ?var0 - moveable
2. ?var1 - agent

Preconditions:
```
(equipped ?var0 ?var1)
```

Effects:
```
(and
    (inventory ?var0)
    (not (equipped ?var0 ?var1))
    (handsfree ?var1)
)
```
","(:action craft_plank
    :parameters (?var0 - moveable ?var1 - agent ?var2 - moveable)
    :precondition (and (hypothetical ?var0) (is_log ?var2) (equipped ?var2 ?var1))
    :effect (and (inventory ?var0) (is_planks ?var0) (handsfree ?var1) (not (equipped ?var2 ?var1)) (not (hypothetical ?var0)) (not (is_log ?var2)))
)",
minecraft,craft_plank,0.410630464553833,Semi-Hard Negative (Intra-Domain Mismatch),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: In the world of Minecraft, crafting is a key skill, and here, the agent can turn a log into planks. It's a bit like a magic trick: the agent takes a log, which they have to be holding, and transforms it into planks. These planks then appear in their inventory, ready to be used for building or crafting other items. The log, of course, is used up in this process.

Action name: craft_plank


Your answer:

**Explanation:**
Let's imagine that in the world of Minecraft, the agent (like a player) wants to craft planks from a log. Think of it like a cook needing specific ingredients and tools to make a meal.

In our PDDL model, the action named ""craft_plank"" follows a similar thought process. Here's how the description of the world leads to the rules in our model:

1. **Preconditions**: Before crafting, certain conditions must be met:
   - The agent must have a log that they are actually holding. This is represented by `(equipped ?var2 ?var1)` meaning the log (`?var2`) is equipped by the agent (`?var1`).
   - The log must be a real log, confirmed by `(is_log ?var2)`.
   - We also see `(hypothetical ?var0)`. Here, the planks that will be created are initially just an idea (hypothetical) before they become real.

2. **Effects**: After the action is performed, we expect changes:
   - The hypothetical planks become real, shown by `(inventory ?var0)` which means the planks (`?var0`) are now in the agent's inventory.
   - They are identified as planks with `(is_planks ?var0)`.
   - The agent's hands become free `(handsfree ?var1)` because the log they were holding is now transformed into planks.
   - The log is no longer equipped or identified as a log, shown by `(not (equipped ?var2 ?var1))` and `(not (is_log ?var2))`. This indicates the log has been used up.

This schema carefully makes sure that the agent can only craft planks if they have a log to start with, and it accounts for what happens to the log and the newly created planks. It's much like ensuring you have flour before you bake a cake, and then, once the cake is baked, you no longer have just flour but a delicious cake instead!","Parameters:
1. ?var0 - static
2. ?var1 - static

Preconditions:
```
(agent_at ?var1)
```

Effects:
```
(and
    (agent_at ?var0)
    (not (agent_at ?var1))
)
```
","(:action craft_plank
    :parameters (?var0 - moveable ?var1 - agent ?var2 - moveable)
    :precondition (and (hypothetical ?var0) (is_log ?var2) (equipped ?var2 ?var1))
    :effect (and (inventory ?var0) (is_planks ?var0) (handsfree ?var1) (not (equipped ?var2 ?var1)) (not (hypothetical ?var0)) (not (is_log ?var2)))
)",
minecraft,craft_plank,0.7020046710968018,Semi-Hard Negative (Intra-Domain Mismatch),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: In the world of Minecraft, crafting is a key skill, and here, the agent can turn a log into planks. It's a bit like a magic trick: the agent takes a log, which they have to be holding, and transforms it into planks. These planks then appear in their inventory, ready to be used for building or crafting other items. The log, of course, is used up in this process.

Action name: craft_plank


Your answer:

**Explanation:**
Let's imagine that in the world of Minecraft, the agent (like a player) wants to craft planks from a log. Think of it like a cook needing specific ingredients and tools to make a meal.

In our PDDL model, the action named ""craft_plank"" follows a similar thought process. Here's how the description of the world leads to the rules in our model:

1. **Preconditions**: Before crafting, certain conditions must be met:
   - The agent must have a log that they are actually holding. This is represented by `(equipped ?var2 ?var1)` meaning the log (`?var2`) is equipped by the agent (`?var1`).
   - The log must be a real log, confirmed by `(is_log ?var2)`.
   - We also see `(hypothetical ?var0)`. Here, the planks that will be created are initially just an idea (hypothetical) before they become real.

2. **Effects**: After the action is performed, we expect changes:
   - The hypothetical planks become real, shown by `(inventory ?var0)` which means the planks (`?var0`) are now in the agent's inventory.
   - They are identified as planks with `(is_planks ?var0)`.
   - The agent's hands become free `(handsfree ?var1)` because the log they were holding is now transformed into planks.
   - The log is no longer equipped or identified as a log, shown by `(not (equipped ?var2 ?var1))` and `(not (is_log ?var2))`. This indicates the log has been used up.

This schema carefully makes sure that the agent can only craft planks if they have a log to start with, and it accounts for what happens to the log and the newly created planks. It's much like ensuring you have flour before you bake a cake, and then, once the cake is baked, you no longer have just flour but a delicious cake instead!","Parameters:
1. ?var0 - moveable
2. ?var1 - agent

Preconditions:
```
(and
    (inventory ?var0)
    (handsfree ?var1)
)
```

Effects:
```
(and
    (equipped ?var0 ?var1)
    (not (handsfree ?var1))
    (not (inventory ?var0))
)
```
","(:action craft_plank
    :parameters (?var0 - moveable ?var1 - agent ?var2 - moveable)
    :precondition (and (hypothetical ?var0) (is_log ?var2) (equipped ?var2 ?var1))
    :effect (and (inventory ?var0) (is_planks ?var0) (handsfree ?var1) (not (equipped ?var2 ?var1)) (not (hypothetical ?var0)) (not (is_log ?var2)))
)",
minecraft,craft_plank,0.6227985620498657,Semi-Hard Negative (Intra-Domain Mismatch),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: In the world of Minecraft, crafting is a key skill, and here, the agent can turn a log into planks. It's a bit like a magic trick: the agent takes a log, which they have to be holding, and transforms it into planks. These planks then appear in their inventory, ready to be used for building or crafting other items. The log, of course, is used up in this process.

Action name: craft_plank


Your answer:

**Explanation:**
Let's imagine that in the world of Minecraft, the agent (like a player) wants to craft planks from a log. Think of it like a cook needing specific ingredients and tools to make a meal.

In our PDDL model, the action named ""craft_plank"" follows a similar thought process. Here's how the description of the world leads to the rules in our model:

1. **Preconditions**: Before crafting, certain conditions must be met:
   - The agent must have a log that they are actually holding. This is represented by `(equipped ?var2 ?var1)` meaning the log (`?var2`) is equipped by the agent (`?var1`).
   - The log must be a real log, confirmed by `(is_log ?var2)`.
   - We also see `(hypothetical ?var0)`. Here, the planks that will be created are initially just an idea (hypothetical) before they become real.

2. **Effects**: After the action is performed, we expect changes:
   - The hypothetical planks become real, shown by `(inventory ?var0)` which means the planks (`?var0`) are now in the agent's inventory.
   - They are identified as planks with `(is_planks ?var0)`.
   - The agent's hands become free `(handsfree ?var1)` because the log they were holding is now transformed into planks.
   - The log is no longer equipped or identified as a log, shown by `(not (equipped ?var2 ?var1))` and `(not (is_log ?var2))`. This indicates the log has been used up.

This schema carefully makes sure that the agent can only craft planks if they have a log to start with, and it accounts for what happens to the log and the newly created planks. It's much like ensuring you have flour before you bake a cake, and then, once the cake is baked, you no longer have just flour but a delicious cake instead!","Parameters:
1. ?var0 - moveable
2. ?var1 - static

Preconditions:
```
(and
    (at ?var0 ?var1)
    (agent_at ?var1)
)
```

Effects:
```
(and
    (inventory ?var0)
    (not (at ?var0 ?var1))
)
```
","(:action craft_plank
    :parameters (?var0 - moveable ?var1 - agent ?var2 - moveable)
    :precondition (and (hypothetical ?var0) (is_log ?var2) (equipped ?var2 ?var1))
    :effect (and (inventory ?var0) (is_planks ?var0) (handsfree ?var1) (not (equipped ?var2 ?var1)) (not (hypothetical ?var0)) (not (is_log ?var2)))
)",
minecraft,craft_plank,0.5239914655685425,Semi-Hard Negative (Intra-Domain Mismatch),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: In the world of Minecraft, crafting is a key skill, and here, the agent can turn a log into planks. It's a bit like a magic trick: the agent takes a log, which they have to be holding, and transforms it into planks. These planks then appear in their inventory, ready to be used for building or crafting other items. The log, of course, is used up in this process.

Action name: craft_plank


Your answer:
","**Explanation:** Let's imagine you're playing a game similar to Minecraft. In this game, you have an action called ""recall,"" which lets you move an item you are holding directly into your backpack, making your hands empty again. To understand how this action works in the game's programming language (PDDL), let's break down the requirements and results of this action step-by-step.

1. **Precondition (What needs to be true before the action?):** 
   The precondition for the ""recall"" action is `(equipped ?var0 ?var1)`. This simply means that the item (`?var0`) must be currently held (equipped) by the player (`?var1`). Think of it as checking if you really have the axe in your hand before you can put it away.

2. **Effect (What happens after the action is done?):** 
   The effects of this action are several:
   - `(inventory ?var0)`: The item you were holding is now in your inventory. This is like saying, ""Okay, the axe is now in my backpack.""
   - `(not (equipped ?var0 ?var1))`: You are no longer holding the item. This ensures that the game knows the axe is no longer in your hand.
   - `(handsfree ?var1)`: Your hands are now empty. This part is like confirming that your hands are free, ready to grab or use something else.

By setting these preconditions and effects, the game ensures that the action of recalling an item (like teleporting your axe to your backpack) is logical and consistent with the game's rules. You need to be holding the item first to store it away, and after storing it, your hands should indeed be empty, ready for the next task. This keeps the game from getting confused, like trying to put away an axe you aren’t holding or ending up with an axe still in your hand after you've tried to store it.

In summary, the ""recall"" action in the game ensures everything happens in an orderly and expected manner, making your gameplay experience smooth and realistic within the game's world.
Parameters:
1. ?var0 - moveable
2. ?var1 - agent

Preconditions:
```
(equipped ?var0 ?var1)
```

Effects:
```
(and
    (inventory ?var0)
    (not (equipped ?var0 ?var1))
    (handsfree ?var1)
)
```
","(:action craft_plank
    :parameters (?var0 - moveable ?var1 - agent ?var2 - moveable)
    :precondition (and (hypothetical ?var0) (is_log ?var2) (equipped ?var2 ?var1))
    :effect (and (inventory ?var0) (is_planks ?var0) (handsfree ?var1) (not (equipped ?var2 ?var1)) (not (hypothetical ?var0)) (not (is_log ?var2)))
)",
minecraft,craft_plank,0.57680344581604,Semi-Hard Negative (Intra-Domain Mismatch),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: In the world of Minecraft, crafting is a key skill, and here, the agent can turn a log into planks. It's a bit like a magic trick: the agent takes a log, which they have to be holding, and transforms it into planks. These planks then appear in their inventory, ready to be used for building or crafting other items. The log, of course, is used up in this process.

Action name: craft_plank


Your answer:
","**Explanation:**
Let's think about the action called ""move"" in a Minecraft-like game, where the goal is to get an agent (like a player) from one place to another. The PDDL action schema you're asking about is designed to handle this simple yet crucial task.

In the action schema, we have two parameters: `?var0` and `?var1`, which are both locations. You can think of `?var0` as the new location where the agent wants to go, and `?var1` as the current location where the agent is starting from.

**Preconditions:** The precondition for the ""move"" action is `(agent_at ?var1)`. This just means that before the agent can move, it must be verified that the agent is actually at the starting location (`?var1`). It’s similar to checking if you are really at home before you walk to the park.

**Effects:** After the agent moves, we need to update the agent's location in the game. This is what the effects in the action schema do:
- `(agent_at ?var0)` says that the agent is now at the new location (`?var0`), like saying, ""Now, I’m at the park.""
- `(not (agent_at ?var1))` means that the agent is no longer at the starting location (`?var1`), similar to saying, ""I'm no longer at home.""

This change in the agent's location is crucial for the game to keep track of where the agent is at any moment, which affects what the agent can interact with or what actions they can perform next. The effect ensures the game world is accurately updated following the agent's movement, and no confusion arises about where the agent is located. 

So, in simple terms, the action ""move"" in this game ensures that when the agent moves from one spot to another, the game correctly recognizes this change and updates the world accordingly.
Parameters:
1. ?var0 - static
2. ?var1 - static

Preconditions:
```
(agent_at ?var1)
```

Effects:
```
(and
    (agent_at ?var0)
    (not (agent_at ?var1))
)
```
","(:action craft_plank
    :parameters (?var0 - moveable ?var1 - agent ?var2 - moveable)
    :precondition (and (hypothetical ?var0) (is_log ?var2) (equipped ?var2 ?var1))
    :effect (and (inventory ?var0) (is_planks ?var0) (handsfree ?var1) (not (equipped ?var2 ?var1)) (not (hypothetical ?var0)) (not (is_log ?var2)))
)",
minecraft,craft_plank,0.4719609022140503,Semi-Hard Negative (Intra-Domain Mismatch),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: In the world of Minecraft, crafting is a key skill, and here, the agent can turn a log into planks. It's a bit like a magic trick: the agent takes a log, which they have to be holding, and transforms it into planks. These planks then appear in their inventory, ready to be used for building or crafting other items. The log, of course, is used up in this process.

Action name: craft_plank


Your answer:
","**Explanation:**
Let's think of the action called ""equip"" like someone getting ready to use something from their backpack. Imagine you're planning to paint a picture. First, you need to make sure you have a paintbrush in your backpack (this is similar to the ""inventory"" in our scenario). You also need to make sure your hand is free to hold the paintbrush (like the ""handsfree"" condition).

In the ""equip"" action in this Minecraft-like environment, two main things need to happen before the action can take place:
1. **The item is in the inventory** - This is just like making sure the paintbrush is in your backpack. The precondition `(inventory ?var0)` confirms that the item you want to use is actually with you, stored safely in your inventory.
2. **The agent's hands are free** - This means you aren't holding anything else. The precondition `(handsfree ?var1)` checks that your hands (or the agent's hands, in this case) are empty and ready to hold something new.

When you decide to ""equip"" or start using the item, several things change:
- **The item is now equipped** - This means the item is in your hand and ready to use, similar to how you would hold a paintbrush when you're ready to paint. This is shown by the effect `(equipped ?var0 ?var1)`.
- **Your hand is no longer free** - Just like when you pick up the paintbrush, your hand isn't empty anymore. This is why the effect includes `(not (handsfree ?var1))`.
- **The item is no longer just in the inventory** - Since you're now holding the item, it's not just sitting in your backpack. This change is represented by `(not (inventory ?var0))`.

These changes ensure that the action of equipping something is logical and makes sense in the environment, just like how you'd logically take a paintbrush out of your backpack to use it.
Parameters:
1. ?var0 - moveable
2. ?var1 - agent

Preconditions:
```
(and
    (inventory ?var0)
    (handsfree ?var1)
)
```

Effects:
```
(and
    (equipped ?var0 ?var1)
    (not (handsfree ?var1))
    (not (inventory ?var0))
)
```
","(:action craft_plank
    :parameters (?var0 - moveable ?var1 - agent ?var2 - moveable)
    :precondition (and (hypothetical ?var0) (is_log ?var2) (equipped ?var2 ?var1))
    :effect (and (inventory ?var0) (is_planks ?var0) (handsfree ?var1) (not (equipped ?var2 ?var1)) (not (hypothetical ?var0)) (not (is_log ?var2)))
)",
minecraft,craft_plank,0.5246511101722717,Semi-Hard Negative (Intra-Domain Mismatch),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: In the world of Minecraft, crafting is a key skill, and here, the agent can turn a log into planks. It's a bit like a magic trick: the agent takes a log, which they have to be holding, and transforms it into planks. These planks then appear in their inventory, ready to be used for building or crafting other items. The log, of course, is used up in this process.

Action name: craft_plank


Your answer:
","**Explanation:**

Let's imagine you're in a simplified game environment similar to Minecraft, where your goal is to gather resources like fruits or tools. In this game, to collect an item, you'd first need to be at the same location as the item. This ensures you can actually reach it to pick it up.

So, in the PDDL (which is a planning language used to describe tasks and environments in a structured way), the `pick` action is defined to help you collect these items. Here's why the action is set up this way:

1. **Preconditions (the must-haves before acting)**:
   - `(at ?var0 ?var1)`: This means the item (`?var0`) must be at your current location (`?var1`). Think of it as seeing a piece of fruit right at your feet. You need to be where the fruit is to pick it up.
   - `(agent_at ?var1)`: This specifies that you (the agent) must also be at that specific location (`?var1`). Just like in real life, you can't pick up something if you're not right there with it.

2. **Effects (what happens after the action)**:
   - `(inventory ?var0)`: Once you pick up the item, it moves into your inventory. This is like putting the fruit into your backpack.
   - `(not (at ?var0 ?var1))`: This indicates that the item is no longer lying on the ground at that location. It’s like saying, now that the fruit is in your backpack, it's not on the ground anymore.

This setup ensures that you can only pick up items that are within your immediate reach and that collecting an item changes its status from being 'on the ground' to being 'in your inventory'. It's a simple but effective way to manage resources in the game, making sure everything happens in a logical and realistic manner.
Parameters:
1. ?var0 - moveable
2. ?var1 - static

Preconditions:
```
(and
    (at ?var0 ?var1)
    (agent_at ?var1)
)
```

Effects:
```
(and
    (inventory ?var0)
    (not (at ?var0 ?var1))
)
```
","(:action craft_plank
    :parameters (?var0 - moveable ?var1 - agent ?var2 - moveable)
    :precondition (and (hypothetical ?var0) (is_log ?var2) (equipped ?var2 ?var1))
    :effect (and (inventory ?var0) (is_planks ?var0) (handsfree ?var1) (not (equipped ?var2 ?var1)) (not (hypothetical ?var0)) (not (is_log ?var2)))
)",
minecraft,craft_plank,0.6190977692604065,Hard Negative (Manipulated Action),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: In the world of Minecraft, crafting is a key skill, and here, the agent can turn a log into planks. It's a bit like a magic trick: the agent takes a log, which they have to be holding, and transforms it into planks. These planks then appear in their inventory, ready to be used for building or crafting other items. The log, of course, is used up in this process.

Action name: craft_plank


Your answer:
","Parameters:
1. ?var0 - moveable
2. ?var1 - agent
3. ?var2 - moveable

Preconditions:
```
(and
    (hypothetical ?var0)
    (equipped ?var2 ?var1)
)
```

Effects:
```
(and
    (inventory ?var0)
    (handsfree ?var1)
    (not (equipped ?var2 ?var1))
    (not (hypothetical ?var0))
    (not (is_log ?var2))
)
```
","(:action craft_plank
    :parameters (?var0 - moveable ?var1 - agent ?var2 - moveable)
    :precondition (and (hypothetical ?var0) (is_log ?var2) (equipped ?var2 ?var1))
    :effect (and (inventory ?var0) (is_planks ?var0) (handsfree ?var1) (not (equipped ?var2 ?var1)) (not (hypothetical ?var0)) (not (is_log ?var2)))
)","remove (is_planks ?var0) from effects
remove (is_log ?var2) from preconditions
"
minecraft,craft_plank,0.5356446504592896,Hard Negative (Manipulated Action),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: In the world of Minecraft, crafting is a key skill, and here, the agent can turn a log into planks. It's a bit like a magic trick: the agent takes a log, which they have to be holding, and transforms it into planks. These planks then appear in their inventory, ready to be used for building or crafting other items. The log, of course, is used up in this process.

Action name: craft_plank


Your answer:
","Parameters:
1. ?var0 - moveable
2. ?var1 - agent
3. ?var2 - moveable

Preconditions:
```
(and
    (handsfree ?var1)
    (hypothetical ?var0)
    (equipped ?var2 ?var1)
)
```

Effects:
```
(and
    (is_log ?var2)
    (inventory ?var0)
    (is_planks ?var0)
    (not (equipped ?var2 ?var1))
    (not (hypothetical ?var0))
    (not (is_log ?var2))
)
```
","(:action craft_plank
    :parameters (?var0 - moveable ?var1 - agent ?var2 - moveable)
    :precondition (and (hypothetical ?var0) (is_log ?var2) (equipped ?var2 ?var1))
    :effect (and (inventory ?var0) (is_planks ?var0) (handsfree ?var1) (not (equipped ?var2 ?var1)) (not (hypothetical ?var0)) (not (is_log ?var2)))
)","swap (is_log ?var2) with (handsfree ?var1)
"
minecraft,craft_plank,0.6653459072113037,Hard Negative (Manipulated Action),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: In the world of Minecraft, crafting is a key skill, and here, the agent can turn a log into planks. It's a bit like a magic trick: the agent takes a log, which they have to be holding, and transforms it into planks. These planks then appear in their inventory, ready to be used for building or crafting other items. The log, of course, is used up in this process.

Action name: craft_plank


Your answer:
","Parameters:
1. ?var0 - moveable
2. ?var1 - agent
3. ?var2 - moveable

Preconditions:
```
(and
    (hypothetical ?var0)
    (equipped ?var2 ?var1)
)
```

Effects:
```
(and
    (inventory ?var0)
    (is_planks ?var0)
    (handsfree ?var1)
    (not (equipped ?var2 ?var1))
    (not (is_log ?var2))
)
```
","(:action craft_plank
    :parameters (?var0 - moveable ?var1 - agent ?var2 - moveable)
    :precondition (and (hypothetical ?var0) (is_log ?var2) (equipped ?var2 ?var1))
    :effect (and (inventory ?var0) (is_planks ?var0) (handsfree ?var1) (not (equipped ?var2 ?var1)) (not (hypothetical ?var0)) (not (is_log ?var2)))
)","remove (is_log ?var2) from preconditions
remove (not (hypothetical ?var0)) from effects
"
minecraft,craft_plank,0.4063217043876648,Hard Negative (Manipulated Action),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: In the world of Minecraft, crafting is a key skill, and here, the agent can turn a log into planks. It's a bit like a magic trick: the agent takes a log, which they have to be holding, and transforms it into planks. These planks then appear in their inventory, ready to be used for building or crafting other items. The log, of course, is used up in this process.

Action name: craft_plank


Your answer:
","Parameters:
1. ?var0 - moveable
2. ?var1 - agent
3. ?var2 - moveable

Preconditions:
```
(and
    (not (is_log ?var2))
    (is_log ?var2)
    (equipped ?var2 ?var1)
)
```

Effects:
```
(and
    (hypothetical ?var0)
    (inventory ?var0)
    (is_planks ?var0)
    (handsfree ?var1)
    (not (equipped ?var2 ?var1))
    (not (hypothetical ?var0))
)
```
","(:action craft_plank
    :parameters (?var0 - moveable ?var1 - agent ?var2 - moveable)
    :precondition (and (hypothetical ?var0) (is_log ?var2) (equipped ?var2 ?var1))
    :effect (and (inventory ?var0) (is_planks ?var0) (handsfree ?var1) (not (equipped ?var2 ?var1)) (not (hypothetical ?var0)) (not (is_log ?var2)))
)","swap (hypothetical ?var0) with (not (is_log ?var2))
"
minecraft,craft_plank,0.4919823110103607,Hard Negative (Manipulated Action),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: In the world of Minecraft, crafting is a key skill, and here, the agent can turn a log into planks. It's a bit like a magic trick: the agent takes a log, which they have to be holding, and transforms it into planks. These planks then appear in their inventory, ready to be used for building or crafting other items. The log, of course, is used up in this process.

Action name: craft_plank


Your answer:
","Parameters:
1. ?var0 - moveable
2. ?var1 - agent
3. ?var2 - moveable

Preconditions:
```
(and
    (not (hypothetical ?var0))
    (is_planks ?var0)
    (equipped ?var2 ?var1)
)
```

Effects:
```
(and
    (is_log ?var2)
    (hypothetical ?var0)
    (inventory ?var0)
    (handsfree ?var1)
    (not (equipped ?var2 ?var1))
    (not (is_log ?var2))
)
```
","(:action craft_plank
    :parameters (?var0 - moveable ?var1 - agent ?var2 - moveable)
    :precondition (and (hypothetical ?var0) (is_log ?var2) (equipped ?var2 ?var1))
    :effect (and (inventory ?var0) (is_planks ?var0) (handsfree ?var1) (not (equipped ?var2 ?var1)) (not (hypothetical ?var0)) (not (is_log ?var2)))
)","swap (is_log ?var2) with (not (hypothetical ?var0))
swap (hypothetical ?var0) with (is_planks ?var0)
"
minecraft,craft_plank,0.7167616486549377,Hard Negative (Manipulated Action),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: In the world of Minecraft, crafting is a key skill, and here, the agent can turn a log into planks. It's a bit like a magic trick: the agent takes a log, which they have to be holding, and transforms it into planks. These planks then appear in their inventory, ready to be used for building or crafting other items. The log, of course, is used up in this process.

Action name: craft_plank


Your answer:
","Parameters:
1. ?var0 - moveable
2. ?var1 - agent
3. ?var2 - moveable

Preconditions:
```
(and
    (hypothetical ?var0)
    (equipped ?var2 ?var1)
)
```

Effects:
```
(and
    (inventory ?var0)
    (is_planks ?var0)
    (not (equipped ?var2 ?var1))
    (not (hypothetical ?var0))
    (not (is_log ?var2))
)
```
","(:action craft_plank
    :parameters (?var0 - moveable ?var1 - agent ?var2 - moveable)
    :precondition (and (hypothetical ?var0) (is_log ?var2) (equipped ?var2 ?var1))
    :effect (and (inventory ?var0) (is_planks ?var0) (handsfree ?var1) (not (equipped ?var2 ?var1)) (not (hypothetical ?var0)) (not (is_log ?var2)))
)","remove (is_log ?var2) from preconditions
remove (handsfree ?var1) from effects
"
minecraft,craft_plank,0.42733994126319885,Hard Negative (Manipulated Action),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: In the world of Minecraft, crafting is a key skill, and here, the agent can turn a log into planks. It's a bit like a magic trick: the agent takes a log, which they have to be holding, and transforms it into planks. These planks then appear in their inventory, ready to be used for building or crafting other items. The log, of course, is used up in this process.

Action name: craft_plank


Your answer:
","Parameters:
1. ?var0 - moveable
2. ?var1 - agent
3. ?var2 - moveable

Preconditions:
```
(and
    (not (is_log ?var2))
    (hypothetical ?var0)
    (equipped ?var2 ?var1)
)
```

Effects:
```
(and
    (is_log ?var2)
    (inventory ?var0)
    (is_planks ?var0)
    (handsfree ?var1)
    (not (equipped ?var2 ?var1))
    (not (hypothetical ?var0))
)
```
","(:action craft_plank
    :parameters (?var0 - moveable ?var1 - agent ?var2 - moveable)
    :precondition (and (hypothetical ?var0) (is_log ?var2) (equipped ?var2 ?var1))
    :effect (and (inventory ?var0) (is_planks ?var0) (handsfree ?var1) (not (equipped ?var2 ?var1)) (not (hypothetical ?var0)) (not (is_log ?var2)))
)","swap (is_log ?var2) with (not (is_log ?var2))
"
minecraft,craft_plank,0.3553324043750763,Hard Negative (Manipulated Action),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: In the world of Minecraft, crafting is a key skill, and here, the agent can turn a log into planks. It's a bit like a magic trick: the agent takes a log, which they have to be holding, and transforms it into planks. These planks then appear in their inventory, ready to be used for building or crafting other items. The log, of course, is used up in this process.

Action name: craft_plank


Your answer:
","Parameters:
1. ?var0 - moveable
2. ?var1 - agent
3. ?var2 - moveable

Preconditions:
```
(and
    (not (is_log ?var2))
    (handsfree ?var1)
    (is_log ?var2)
)
```

Effects:
```
(and
    (equipped ?var2 ?var1)
    (hypothetical ?var0)
    (inventory ?var0)
    (is_planks ?var0)
    (not (equipped ?var2 ?var1))
    (not (hypothetical ?var0))
)
```
","(:action craft_plank
    :parameters (?var0 - moveable ?var1 - agent ?var2 - moveable)
    :precondition (and (hypothetical ?var0) (is_log ?var2) (equipped ?var2 ?var1))
    :effect (and (inventory ?var0) (is_planks ?var0) (handsfree ?var1) (not (equipped ?var2 ?var1)) (not (hypothetical ?var0)) (not (is_log ?var2)))
)","swap (equipped ?var2 ?var1) with (not (is_log ?var2))
swap (hypothetical ?var0) with (handsfree ?var1)
"
minecraft,craft_plank,0.39340412616729736,Hard Negative (Manipulated Action),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: In the world of Minecraft, crafting is a key skill, and here, the agent can turn a log into planks. It's a bit like a magic trick: the agent takes a log, which they have to be holding, and transforms it into planks. These planks then appear in their inventory, ready to be used for building or crafting other items. The log, of course, is used up in this process.

Action name: craft_plank


Your answer:
","Parameters:
1. ?var0 - moveable
2. ?var1 - agent
3. ?var2 - moveable

Preconditions:
```
(and
    (not (is_log ?var2))
    (hypothetical ?var0)
    (is_log ?var2)
)
```

Effects:
```
(and
    (equipped ?var2 ?var1)
    (hypothetical ?var0)
    (inventory ?var0)
    (is_planks ?var0)
    (handsfree ?var1)
    (not (equipped ?var2 ?var1))
)
```
","(:action craft_plank
    :parameters (?var0 - moveable ?var1 - agent ?var2 - moveable)
    :precondition (and (hypothetical ?var0) (is_log ?var2) (equipped ?var2 ?var1))
    :effect (and (inventory ?var0) (is_planks ?var0) (handsfree ?var1) (not (equipped ?var2 ?var1)) (not (hypothetical ?var0)) (not (is_log ?var2)))
)","swap (equipped ?var2 ?var1) with (not (is_log ?var2))
negate (not (hypothetical ?var0)) in effects
"
minecraft,craft_plank,0.42638444900512695,Hard Negative (Manipulated Action),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: In the world of Minecraft, crafting is a key skill, and here, the agent can turn a log into planks. It's a bit like a magic trick: the agent takes a log, which they have to be holding, and transforms it into planks. These planks then appear in their inventory, ready to be used for building or crafting other items. The log, of course, is used up in this process.

Action name: craft_plank


Your answer:
","Parameters:
1. ?var0 - moveable
2. ?var1 - agent
3. ?var2 - moveable

Preconditions:
```
(and
    (not (is_log ?var2))
    (equipped ?var2 ?var1)
)
```

Effects:
```
(and
    (inventory ?var0)
    (is_planks ?var0)
    (handsfree ?var1)
    (not (equipped ?var2 ?var1))
    (not (hypothetical ?var0))
    (not (is_log ?var2))
)
```
","(:action craft_plank
    :parameters (?var0 - moveable ?var1 - agent ?var2 - moveable)
    :precondition (and (hypothetical ?var0) (is_log ?var2) (equipped ?var2 ?var1))
    :effect (and (inventory ?var0) (is_planks ?var0) (handsfree ?var1) (not (equipped ?var2 ?var1)) (not (hypothetical ?var0)) (not (is_log ?var2)))
)","negate (is_log ?var2) in preconditions
remove (hypothetical ?var0) from preconditions
"
minecraft,craft_plank,0.4038408100605011,Hard Negative (Manipulated Action),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: In the world of Minecraft, crafting is a key skill, and here, the agent can turn a log into planks. It's a bit like a magic trick: the agent takes a log, which they have to be holding, and transforms it into planks. These planks then appear in their inventory, ready to be used for building or crafting other items. The log, of course, is used up in this process.

Action name: craft_plank


Your answer:

**Explanation:**
Let's imagine that in the world of Minecraft, the agent (like a player) wants to craft planks from a log. Think of it like a cook needing specific ingredients and tools to make a meal.

In our PDDL model, the action named ""craft_plank"" follows a similar thought process. Here's how the description of the world leads to the rules in our model:

1. **Preconditions**: Before crafting, certain conditions must be met:
   - The agent must have a log that they are actually holding. This is represented by `(equipped ?var2 ?var1)` meaning the log (`?var2`) is equipped by the agent (`?var1`).
   - The log must be a real log, confirmed by `(is_log ?var2)`.
   - We also see `(hypothetical ?var0)`. Here, the planks that will be created are initially just an idea (hypothetical) before they become real.

2. **Effects**: After the action is performed, we expect changes:
   - The hypothetical planks become real, shown by `(inventory ?var0)` which means the planks (`?var0`) are now in the agent's inventory.
   - They are identified as planks with `(is_planks ?var0)`.
   - The agent's hands become free `(handsfree ?var1)` because the log they were holding is now transformed into planks.
   - The log is no longer equipped or identified as a log, shown by `(not (equipped ?var2 ?var1))` and `(not (is_log ?var2))`. This indicates the log has been used up.

This schema carefully makes sure that the agent can only craft planks if they have a log to start with, and it accounts for what happens to the log and the newly created planks. It's much like ensuring you have flour before you bake a cake, and then, once the cake is baked, you no longer have just flour but a delicious cake instead!","Parameters:
1. ?var0 - moveable
2. ?var1 - agent
3. ?var2 - moveable

Preconditions:
```
(and
    (not (is_log ?var2))
    (hypothetical ?var0)
    (equipped ?var2 ?var1)
)
```

Effects:
```
(and
    (is_log ?var2)
    (inventory ?var0)
    (handsfree ?var1)
    (not (equipped ?var2 ?var1))
    (not (hypothetical ?var0))
)
```
","(:action craft_plank
    :parameters (?var0 - moveable ?var1 - agent ?var2 - moveable)
    :precondition (and (hypothetical ?var0) (is_log ?var2) (equipped ?var2 ?var1))
    :effect (and (inventory ?var0) (is_planks ?var0) (handsfree ?var1) (not (equipped ?var2 ?var1)) (not (hypothetical ?var0)) (not (is_log ?var2)))
)","remove (is_planks ?var0) from effects
swap (is_log ?var2) with (not (is_log ?var2))
"
minecraft,craft_plank,0.7000923156738281,Hard Negative (Manipulated Action),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: In the world of Minecraft, crafting is a key skill, and here, the agent can turn a log into planks. It's a bit like a magic trick: the agent takes a log, which they have to be holding, and transforms it into planks. These planks then appear in their inventory, ready to be used for building or crafting other items. The log, of course, is used up in this process.

Action name: craft_plank


Your answer:

**Explanation:**
Let's imagine that in the world of Minecraft, the agent (like a player) wants to craft planks from a log. Think of it like a cook needing specific ingredients and tools to make a meal.

In our PDDL model, the action named ""craft_plank"" follows a similar thought process. Here's how the description of the world leads to the rules in our model:

1. **Preconditions**: Before crafting, certain conditions must be met:
   - The agent must have a log that they are actually holding. This is represented by `(equipped ?var2 ?var1)` meaning the log (`?var2`) is equipped by the agent (`?var1`).
   - The log must be a real log, confirmed by `(is_log ?var2)`.
   - We also see `(hypothetical ?var0)`. Here, the planks that will be created are initially just an idea (hypothetical) before they become real.

2. **Effects**: After the action is performed, we expect changes:
   - The hypothetical planks become real, shown by `(inventory ?var0)` which means the planks (`?var0`) are now in the agent's inventory.
   - They are identified as planks with `(is_planks ?var0)`.
   - The agent's hands become free `(handsfree ?var1)` because the log they were holding is now transformed into planks.
   - The log is no longer equipped or identified as a log, shown by `(not (equipped ?var2 ?var1))` and `(not (is_log ?var2))`. This indicates the log has been used up.

This schema carefully makes sure that the agent can only craft planks if they have a log to start with, and it accounts for what happens to the log and the newly created planks. It's much like ensuring you have flour before you bake a cake, and then, once the cake is baked, you no longer have just flour but a delicious cake instead!","Parameters:
1. ?var0 - moveable
2. ?var1 - agent
3. ?var2 - moveable

Preconditions:
```
(and
    (hypothetical ?var0)
    (is_log ?var2)
    (equipped ?var2 ?var1)
)
```

Effects:
```
(and
    (inventory ?var0)
    (is_planks ?var0)
    (handsfree ?var1)
    (not (equipped ?var2 ?var1))
    (not (hypothetical ?var0))
)
```
","(:action craft_plank
    :parameters (?var0 - moveable ?var1 - agent ?var2 - moveable)
    :precondition (and (hypothetical ?var0) (is_log ?var2) (equipped ?var2 ?var1))
    :effect (and (inventory ?var0) (is_planks ?var0) (handsfree ?var1) (not (equipped ?var2 ?var1)) (not (hypothetical ?var0)) (not (is_log ?var2)))
)","remove (not (is_log ?var2)) from effects
"
minecraft,craft_plank,0.4464828372001648,Hard Negative (Manipulated Action),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: In the world of Minecraft, crafting is a key skill, and here, the agent can turn a log into planks. It's a bit like a magic trick: the agent takes a log, which they have to be holding, and transforms it into planks. These planks then appear in their inventory, ready to be used for building or crafting other items. The log, of course, is used up in this process.

Action name: craft_plank


Your answer:

**Explanation:**
Let's imagine that in the world of Minecraft, the agent (like a player) wants to craft planks from a log. Think of it like a cook needing specific ingredients and tools to make a meal.

In our PDDL model, the action named ""craft_plank"" follows a similar thought process. Here's how the description of the world leads to the rules in our model:

1. **Preconditions**: Before crafting, certain conditions must be met:
   - The agent must have a log that they are actually holding. This is represented by `(equipped ?var2 ?var1)` meaning the log (`?var2`) is equipped by the agent (`?var1`).
   - The log must be a real log, confirmed by `(is_log ?var2)`.
   - We also see `(hypothetical ?var0)`. Here, the planks that will be created are initially just an idea (hypothetical) before they become real.

2. **Effects**: After the action is performed, we expect changes:
   - The hypothetical planks become real, shown by `(inventory ?var0)` which means the planks (`?var0`) are now in the agent's inventory.
   - They are identified as planks with `(is_planks ?var0)`.
   - The agent's hands become free `(handsfree ?var1)` because the log they were holding is now transformed into planks.
   - The log is no longer equipped or identified as a log, shown by `(not (equipped ?var2 ?var1))` and `(not (is_log ?var2))`. This indicates the log has been used up.

This schema carefully makes sure that the agent can only craft planks if they have a log to start with, and it accounts for what happens to the log and the newly created planks. It's much like ensuring you have flour before you bake a cake, and then, once the cake is baked, you no longer have just flour but a delicious cake instead!","Parameters:
1. ?var0 - moveable
2. ?var1 - agent
3. ?var2 - moveable

Preconditions:
```
(and
    (hypothetical ?var0)
    (is_log ?var2)
    (equipped ?var2 ?var1)
)
```

Effects:
```
(and
    (not (is_planks ?var0))
    (inventory ?var0)
    (handsfree ?var1)
    (not (equipped ?var2 ?var1))
    (not (hypothetical ?var0))
    (not (is_log ?var2))
)
```
","(:action craft_plank
    :parameters (?var0 - moveable ?var1 - agent ?var2 - moveable)
    :precondition (and (hypothetical ?var0) (is_log ?var2) (equipped ?var2 ?var1))
    :effect (and (inventory ?var0) (is_planks ?var0) (handsfree ?var1) (not (equipped ?var2 ?var1)) (not (hypothetical ?var0)) (not (is_log ?var2)))
)","negate (is_planks ?var0) in effects
"
minecraft,craft_plank,0.685175895690918,Hard Negative (Manipulated Action),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: In the world of Minecraft, crafting is a key skill, and here, the agent can turn a log into planks. It's a bit like a magic trick: the agent takes a log, which they have to be holding, and transforms it into planks. These planks then appear in their inventory, ready to be used for building or crafting other items. The log, of course, is used up in this process.

Action name: craft_plank


Your answer:

**Explanation:**
Let's imagine that in the world of Minecraft, the agent (like a player) wants to craft planks from a log. Think of it like a cook needing specific ingredients and tools to make a meal.

In our PDDL model, the action named ""craft_plank"" follows a similar thought process. Here's how the description of the world leads to the rules in our model:

1. **Preconditions**: Before crafting, certain conditions must be met:
   - The agent must have a log that they are actually holding. This is represented by `(equipped ?var2 ?var1)` meaning the log (`?var2`) is equipped by the agent (`?var1`).
   - The log must be a real log, confirmed by `(is_log ?var2)`.
   - We also see `(hypothetical ?var0)`. Here, the planks that will be created are initially just an idea (hypothetical) before they become real.

2. **Effects**: After the action is performed, we expect changes:
   - The hypothetical planks become real, shown by `(inventory ?var0)` which means the planks (`?var0`) are now in the agent's inventory.
   - They are identified as planks with `(is_planks ?var0)`.
   - The agent's hands become free `(handsfree ?var1)` because the log they were holding is now transformed into planks.
   - The log is no longer equipped or identified as a log, shown by `(not (equipped ?var2 ?var1))` and `(not (is_log ?var2))`. This indicates the log has been used up.

This schema carefully makes sure that the agent can only craft planks if they have a log to start with, and it accounts for what happens to the log and the newly created planks. It's much like ensuring you have flour before you bake a cake, and then, once the cake is baked, you no longer have just flour but a delicious cake instead!","Parameters:
1. ?var0 - moveable
2. ?var1 - agent
3. ?var2 - moveable

Preconditions:
```
(and
    (hypothetical ?var0)
    (is_log ?var2)
    (equipped ?var2 ?var1)
)
```

Effects:
```
(and
    (inventory ?var0)
    (is_planks ?var0)
    (handsfree ?var1)
    (not (equipped ?var2 ?var1))
    (not (is_log ?var2))
)
```
","(:action craft_plank
    :parameters (?var0 - moveable ?var1 - agent ?var2 - moveable)
    :precondition (and (hypothetical ?var0) (is_log ?var2) (equipped ?var2 ?var1))
    :effect (and (inventory ?var0) (is_planks ?var0) (handsfree ?var1) (not (equipped ?var2 ?var1)) (not (hypothetical ?var0)) (not (is_log ?var2)))
)","remove (not (hypothetical ?var0)) from effects
"
minecraft,craft_plank,0.7091506719589233,Hard Negative (Manipulated Action),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: In the world of Minecraft, crafting is a key skill, and here, the agent can turn a log into planks. It's a bit like a magic trick: the agent takes a log, which they have to be holding, and transforms it into planks. These planks then appear in their inventory, ready to be used for building or crafting other items. The log, of course, is used up in this process.

Action name: craft_plank


Your answer:

**Explanation:**
Let's imagine that in the world of Minecraft, the agent (like a player) wants to craft planks from a log. Think of it like a cook needing specific ingredients and tools to make a meal.

In our PDDL model, the action named ""craft_plank"" follows a similar thought process. Here's how the description of the world leads to the rules in our model:

1. **Preconditions**: Before crafting, certain conditions must be met:
   - The agent must have a log that they are actually holding. This is represented by `(equipped ?var2 ?var1)` meaning the log (`?var2`) is equipped by the agent (`?var1`).
   - The log must be a real log, confirmed by `(is_log ?var2)`.
   - We also see `(hypothetical ?var0)`. Here, the planks that will be created are initially just an idea (hypothetical) before they become real.

2. **Effects**: After the action is performed, we expect changes:
   - The hypothetical planks become real, shown by `(inventory ?var0)` which means the planks (`?var0`) are now in the agent's inventory.
   - They are identified as planks with `(is_planks ?var0)`.
   - The agent's hands become free `(handsfree ?var1)` because the log they were holding is now transformed into planks.
   - The log is no longer equipped or identified as a log, shown by `(not (equipped ?var2 ?var1))` and `(not (is_log ?var2))`. This indicates the log has been used up.

This schema carefully makes sure that the agent can only craft planks if they have a log to start with, and it accounts for what happens to the log and the newly created planks. It's much like ensuring you have flour before you bake a cake, and then, once the cake is baked, you no longer have just flour but a delicious cake instead!","Parameters:
1. ?var0 - moveable
2. ?var1 - agent
3. ?var2 - moveable

Preconditions:
```
(and
    (hypothetical ?var0)
    (equipped ?var2 ?var1)
)
```

Effects:
```
(and
    (hypothetical ?var0)
    (inventory ?var0)
    (is_planks ?var0)
    (handsfree ?var1)
    (not (equipped ?var2 ?var1))
    (not (is_log ?var2))
)
```
","(:action craft_plank
    :parameters (?var0 - moveable ?var1 - agent ?var2 - moveable)
    :precondition (and (hypothetical ?var0) (is_log ?var2) (equipped ?var2 ?var1))
    :effect (and (inventory ?var0) (is_planks ?var0) (handsfree ?var1) (not (equipped ?var2 ?var1)) (not (hypothetical ?var0)) (not (is_log ?var2)))
)","remove (is_log ?var2) from preconditions
negate (not (hypothetical ?var0)) in effects
"
minecraft,craft_plank,0.4647178649902344,Hard Negative (Manipulated Action),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: In the world of Minecraft, crafting is a key skill, and here, the agent can turn a log into planks. It's a bit like a magic trick: the agent takes a log, which they have to be holding, and transforms it into planks. These planks then appear in their inventory, ready to be used for building or crafting other items. The log, of course, is used up in this process.

Action name: craft_plank


Your answer:

**Explanation:**
Let's imagine that in the world of Minecraft, the agent (like a player) wants to craft planks from a log. Think of it like a cook needing specific ingredients and tools to make a meal.

In our PDDL model, the action named ""craft_plank"" follows a similar thought process. Here's how the description of the world leads to the rules in our model:

1. **Preconditions**: Before crafting, certain conditions must be met:
   - The agent must have a log that they are actually holding. This is represented by `(equipped ?var2 ?var1)` meaning the log (`?var2`) is equipped by the agent (`?var1`).
   - The log must be a real log, confirmed by `(is_log ?var2)`.
   - We also see `(hypothetical ?var0)`. Here, the planks that will be created are initially just an idea (hypothetical) before they become real.

2. **Effects**: After the action is performed, we expect changes:
   - The hypothetical planks become real, shown by `(inventory ?var0)` which means the planks (`?var0`) are now in the agent's inventory.
   - They are identified as planks with `(is_planks ?var0)`.
   - The agent's hands become free `(handsfree ?var1)` because the log they were holding is now transformed into planks.
   - The log is no longer equipped or identified as a log, shown by `(not (equipped ?var2 ?var1))` and `(not (is_log ?var2))`. This indicates the log has been used up.

This schema carefully makes sure that the agent can only craft planks if they have a log to start with, and it accounts for what happens to the log and the newly created planks. It's much like ensuring you have flour before you bake a cake, and then, once the cake is baked, you no longer have just flour but a delicious cake instead!","Parameters:
1. ?var0 - moveable
2. ?var1 - agent
3. ?var2 - moveable

Preconditions:
```
(and
    (not (hypothetical ?var0))
    (is_log ?var2)
    (equipped ?var2 ?var1)
)
```

Effects:
```
(and
    (hypothetical ?var0)
    (is_planks ?var0)
    (handsfree ?var1)
    (not (equipped ?var2 ?var1))
    (not (is_log ?var2))
)
```
","(:action craft_plank
    :parameters (?var0 - moveable ?var1 - agent ?var2 - moveable)
    :precondition (and (hypothetical ?var0) (is_log ?var2) (equipped ?var2 ?var1))
    :effect (and (inventory ?var0) (is_planks ?var0) (handsfree ?var1) (not (equipped ?var2 ?var1)) (not (hypothetical ?var0)) (not (is_log ?var2)))
)","swap (hypothetical ?var0) with (not (hypothetical ?var0))
remove (inventory ?var0) from effects
"
minecraft,craft_plank,0.5337101221084595,Hard Negative (Manipulated Action),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: In the world of Minecraft, crafting is a key skill, and here, the agent can turn a log into planks. It's a bit like a magic trick: the agent takes a log, which they have to be holding, and transforms it into planks. These planks then appear in their inventory, ready to be used for building or crafting other items. The log, of course, is used up in this process.

Action name: craft_plank


Your answer:

**Explanation:**
Let's imagine that in the world of Minecraft, the agent (like a player) wants to craft planks from a log. Think of it like a cook needing specific ingredients and tools to make a meal.

In our PDDL model, the action named ""craft_plank"" follows a similar thought process. Here's how the description of the world leads to the rules in our model:

1. **Preconditions**: Before crafting, certain conditions must be met:
   - The agent must have a log that they are actually holding. This is represented by `(equipped ?var2 ?var1)` meaning the log (`?var2`) is equipped by the agent (`?var1`).
   - The log must be a real log, confirmed by `(is_log ?var2)`.
   - We also see `(hypothetical ?var0)`. Here, the planks that will be created are initially just an idea (hypothetical) before they become real.

2. **Effects**: After the action is performed, we expect changes:
   - The hypothetical planks become real, shown by `(inventory ?var0)` which means the planks (`?var0`) are now in the agent's inventory.
   - They are identified as planks with `(is_planks ?var0)`.
   - The agent's hands become free `(handsfree ?var1)` because the log they were holding is now transformed into planks.
   - The log is no longer equipped or identified as a log, shown by `(not (equipped ?var2 ?var1))` and `(not (is_log ?var2))`. This indicates the log has been used up.

This schema carefully makes sure that the agent can only craft planks if they have a log to start with, and it accounts for what happens to the log and the newly created planks. It's much like ensuring you have flour before you bake a cake, and then, once the cake is baked, you no longer have just flour but a delicious cake instead!","Parameters:
1. ?var0 - moveable
2. ?var1 - agent
3. ?var2 - moveable

Preconditions:
```
(and
    (not (hypothetical ?var0))
    (is_log ?var2)
    (equipped ?var2 ?var1)
)
```

Effects:
```
(and
    (inventory ?var0)
    (is_planks ?var0)
    (handsfree ?var1)
    (not (equipped ?var2 ?var1))
    (not (hypothetical ?var0))
    (not (is_log ?var2))
)
```
","(:action craft_plank
    :parameters (?var0 - moveable ?var1 - agent ?var2 - moveable)
    :precondition (and (hypothetical ?var0) (is_log ?var2) (equipped ?var2 ?var1))
    :effect (and (inventory ?var0) (is_planks ?var0) (handsfree ?var1) (not (equipped ?var2 ?var1)) (not (hypothetical ?var0)) (not (is_log ?var2)))
)","negate (hypothetical ?var0) in preconditions
"
minecraft,craft_plank,0.6189648509025574,Hard Negative (Manipulated Action),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: In the world of Minecraft, crafting is a key skill, and here, the agent can turn a log into planks. It's a bit like a magic trick: the agent takes a log, which they have to be holding, and transforms it into planks. These planks then appear in their inventory, ready to be used for building or crafting other items. The log, of course, is used up in this process.

Action name: craft_plank


Your answer:

**Explanation:**
Let's imagine that in the world of Minecraft, the agent (like a player) wants to craft planks from a log. Think of it like a cook needing specific ingredients and tools to make a meal.

In our PDDL model, the action named ""craft_plank"" follows a similar thought process. Here's how the description of the world leads to the rules in our model:

1. **Preconditions**: Before crafting, certain conditions must be met:
   - The agent must have a log that they are actually holding. This is represented by `(equipped ?var2 ?var1)` meaning the log (`?var2`) is equipped by the agent (`?var1`).
   - The log must be a real log, confirmed by `(is_log ?var2)`.
   - We also see `(hypothetical ?var0)`. Here, the planks that will be created are initially just an idea (hypothetical) before they become real.

2. **Effects**: After the action is performed, we expect changes:
   - The hypothetical planks become real, shown by `(inventory ?var0)` which means the planks (`?var0`) are now in the agent's inventory.
   - They are identified as planks with `(is_planks ?var0)`.
   - The agent's hands become free `(handsfree ?var1)` because the log they were holding is now transformed into planks.
   - The log is no longer equipped or identified as a log, shown by `(not (equipped ?var2 ?var1))` and `(not (is_log ?var2))`. This indicates the log has been used up.

This schema carefully makes sure that the agent can only craft planks if they have a log to start with, and it accounts for what happens to the log and the newly created planks. It's much like ensuring you have flour before you bake a cake, and then, once the cake is baked, you no longer have just flour but a delicious cake instead!","Parameters:
1. ?var0 - moveable
2. ?var1 - agent
3. ?var2 - moveable

Preconditions:
```
(and
    (is_log ?var2)
    (equipped ?var2 ?var1)
)
```

Effects:
```
(and
    (inventory ?var0)
    (is_planks ?var0)
    (handsfree ?var1)
    (not (equipped ?var2 ?var1))
    (not (hypothetical ?var0))
    (not (is_log ?var2))
)
```
","(:action craft_plank
    :parameters (?var0 - moveable ?var1 - agent ?var2 - moveable)
    :precondition (and (hypothetical ?var0) (is_log ?var2) (equipped ?var2 ?var1))
    :effect (and (inventory ?var0) (is_planks ?var0) (handsfree ?var1) (not (equipped ?var2 ?var1)) (not (hypothetical ?var0)) (not (is_log ?var2)))
)","remove (hypothetical ?var0) from preconditions
"
minecraft,craft_plank,0.5229307413101196,Hard Negative (Manipulated Action),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: In the world of Minecraft, crafting is a key skill, and here, the agent can turn a log into planks. It's a bit like a magic trick: the agent takes a log, which they have to be holding, and transforms it into planks. These planks then appear in their inventory, ready to be used for building or crafting other items. The log, of course, is used up in this process.

Action name: craft_plank


Your answer:

**Explanation:**
Let's imagine that in the world of Minecraft, the agent (like a player) wants to craft planks from a log. Think of it like a cook needing specific ingredients and tools to make a meal.

In our PDDL model, the action named ""craft_plank"" follows a similar thought process. Here's how the description of the world leads to the rules in our model:

1. **Preconditions**: Before crafting, certain conditions must be met:
   - The agent must have a log that they are actually holding. This is represented by `(equipped ?var2 ?var1)` meaning the log (`?var2`) is equipped by the agent (`?var1`).
   - The log must be a real log, confirmed by `(is_log ?var2)`.
   - We also see `(hypothetical ?var0)`. Here, the planks that will be created are initially just an idea (hypothetical) before they become real.

2. **Effects**: After the action is performed, we expect changes:
   - The hypothetical planks become real, shown by `(inventory ?var0)` which means the planks (`?var0`) are now in the agent's inventory.
   - They are identified as planks with `(is_planks ?var0)`.
   - The agent's hands become free `(handsfree ?var1)` because the log they were holding is now transformed into planks.
   - The log is no longer equipped or identified as a log, shown by `(not (equipped ?var2 ?var1))` and `(not (is_log ?var2))`. This indicates the log has been used up.

This schema carefully makes sure that the agent can only craft planks if they have a log to start with, and it accounts for what happens to the log and the newly created planks. It's much like ensuring you have flour before you bake a cake, and then, once the cake is baked, you no longer have just flour but a delicious cake instead!","Parameters:
1. ?var0 - moveable
2. ?var1 - agent
3. ?var2 - moveable

Preconditions:
```
(and
    (not (hypothetical ?var0))
    (is_log ?var2)
    (equipped ?var2 ?var1)
)
```

Effects:
```
(and
    (hypothetical ?var0)
    (inventory ?var0)
    (is_planks ?var0)
    (handsfree ?var1)
    (not (equipped ?var2 ?var1))
    (not (is_log ?var2))
)
```
","(:action craft_plank
    :parameters (?var0 - moveable ?var1 - agent ?var2 - moveable)
    :precondition (and (hypothetical ?var0) (is_log ?var2) (equipped ?var2 ?var1))
    :effect (and (inventory ?var0) (is_planks ?var0) (handsfree ?var1) (not (equipped ?var2 ?var1)) (not (hypothetical ?var0)) (not (is_log ?var2)))
)","swap (hypothetical ?var0) with (not (hypothetical ?var0))
"
minecraft,craft_plank,0.4112374186515808,Hard Negative (Manipulated Action),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: In the world of Minecraft, crafting is a key skill, and here, the agent can turn a log into planks. It's a bit like a magic trick: the agent takes a log, which they have to be holding, and transforms it into planks. These planks then appear in their inventory, ready to be used for building or crafting other items. The log, of course, is used up in this process.

Action name: craft_plank


Your answer:

**Explanation:**
Let's imagine that in the world of Minecraft, the agent (like a player) wants to craft planks from a log. Think of it like a cook needing specific ingredients and tools to make a meal.

In our PDDL model, the action named ""craft_plank"" follows a similar thought process. Here's how the description of the world leads to the rules in our model:

1. **Preconditions**: Before crafting, certain conditions must be met:
   - The agent must have a log that they are actually holding. This is represented by `(equipped ?var2 ?var1)` meaning the log (`?var2`) is equipped by the agent (`?var1`).
   - The log must be a real log, confirmed by `(is_log ?var2)`.
   - We also see `(hypothetical ?var0)`. Here, the planks that will be created are initially just an idea (hypothetical) before they become real.

2. **Effects**: After the action is performed, we expect changes:
   - The hypothetical planks become real, shown by `(inventory ?var0)` which means the planks (`?var0`) are now in the agent's inventory.
   - They are identified as planks with `(is_planks ?var0)`.
   - The agent's hands become free `(handsfree ?var1)` because the log they were holding is now transformed into planks.
   - The log is no longer equipped or identified as a log, shown by `(not (equipped ?var2 ?var1))` and `(not (is_log ?var2))`. This indicates the log has been used up.

This schema carefully makes sure that the agent can only craft planks if they have a log to start with, and it accounts for what happens to the log and the newly created planks. It's much like ensuring you have flour before you bake a cake, and then, once the cake is baked, you no longer have just flour but a delicious cake instead!","Parameters:
1. ?var0 - moveable
2. ?var1 - agent
3. ?var2 - moveable

Preconditions:
```
(and
    (not (equipped ?var2 ?var1))
    (hypothetical ?var0)
    (equipped ?var2 ?var1)
)
```

Effects:
```
(and
    (is_log ?var2)
    (inventory ?var0)
    (is_planks ?var0)
    (handsfree ?var1)
    (not (hypothetical ?var0))
    (not (is_log ?var2))
)
```
","(:action craft_plank
    :parameters (?var0 - moveable ?var1 - agent ?var2 - moveable)
    :precondition (and (hypothetical ?var0) (is_log ?var2) (equipped ?var2 ?var1))
    :effect (and (inventory ?var0) (is_planks ?var0) (handsfree ?var1) (not (equipped ?var2 ?var1)) (not (hypothetical ?var0)) (not (is_log ?var2)))
)","swap (is_log ?var2) with (not (equipped ?var2 ?var1))
"
minecraft,craft_plank,0.6813178062438965,Hard Negative (Manipulated Action),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: In the world of Minecraft, crafting is a key skill, and here, the agent can turn a log into planks. It's a bit like a magic trick: the agent takes a log, which they have to be holding, and transforms it into planks. These planks then appear in their inventory, ready to be used for building or crafting other items. The log, of course, is used up in this process.

Action name: craft_plank


Your answer:
","**Explanation:**
Let's imagine that in the world of Minecraft, the agent (like a player) wants to craft planks from a log. Think of it like a cook needing specific ingredients and tools to make a meal.

In our PDDL model, the action named ""craft_plank"" follows a similar thought process. Here's how the description of the world leads to the rules in our model:

1. **Preconditions**: Before crafting, certain conditions must be met:
   - The agent must have a log that they are actually holding. This is represented by `(equipped ?var2 ?var1)` meaning the log (`?var2`) is equipped by the agent (`?var1`).
   - The log must be a real log, confirmed by `(is_log ?var2)`.
   - We also see `(hypothetical ?var0)`. Here, the planks that will be created are initially just an idea (hypothetical) before they become real.

2. **Effects**: After the action is performed, we expect changes:
   - The hypothetical planks become real, shown by `(inventory ?var0)` which means the planks (`?var0`) are now in the agent's inventory.
   - They are identified as planks with `(is_planks ?var0)`.
   - The agent's hands become free `(handsfree ?var1)` because the log they were holding is now transformed into planks.
   - The log is no longer equipped or identified as a log, shown by `(not (equipped ?var2 ?var1))` and `(not (is_log ?var2))`. This indicates the log has been used up.

This schema carefully makes sure that the agent can only craft planks if they have a log to start with, and it accounts for what happens to the log and the newly created planks. It's much like ensuring you have flour before you bake a cake, and then, once the cake is baked, you no longer have just flour but a delicious cake instead!
Parameters:
1. ?var0 - moveable
2. ?var1 - agent
3. ?var2 - moveable

Preconditions:
```
(is_log ?var2)
```

Effects:
```
(and
    (inventory ?var0)
    (is_planks ?var0)
    (handsfree ?var1)
    (not (equipped ?var2 ?var1))
    (not (hypothetical ?var0))
    (not (is_log ?var2))
)
```
","(:action craft_plank
    :parameters (?var0 - moveable ?var1 - agent ?var2 - moveable)
    :precondition (and (hypothetical ?var0) (is_log ?var2) (equipped ?var2 ?var1))
    :effect (and (inventory ?var0) (is_planks ?var0) (handsfree ?var1) (not (equipped ?var2 ?var1)) (not (hypothetical ?var0)) (not (is_log ?var2)))
)","remove (hypothetical ?var0) from preconditions
remove (equipped ?var2 ?var1) from preconditions
"
minecraft,craft_plank,0.6813178062438965,Hard Negative (Manipulated Action),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: In the world of Minecraft, crafting is a key skill, and here, the agent can turn a log into planks. It's a bit like a magic trick: the agent takes a log, which they have to be holding, and transforms it into planks. These planks then appear in their inventory, ready to be used for building or crafting other items. The log, of course, is used up in this process.

Action name: craft_plank


Your answer:
","**Explanation:**
Let's imagine that in the world of Minecraft, the agent (like a player) wants to craft planks from a log. Think of it like a cook needing specific ingredients and tools to make a meal.

In our PDDL model, the action named ""craft_plank"" follows a similar thought process. Here's how the description of the world leads to the rules in our model:

1. **Preconditions**: Before crafting, certain conditions must be met:
   - The agent must have a log that they are actually holding. This is represented by `(equipped ?var2 ?var1)` meaning the log (`?var2`) is equipped by the agent (`?var1`).
   - The log must be a real log, confirmed by `(is_log ?var2)`.
   - We also see `(hypothetical ?var0)`. Here, the planks that will be created are initially just an idea (hypothetical) before they become real.

2. **Effects**: After the action is performed, we expect changes:
   - The hypothetical planks become real, shown by `(inventory ?var0)` which means the planks (`?var0`) are now in the agent's inventory.
   - They are identified as planks with `(is_planks ?var0)`.
   - The agent's hands become free `(handsfree ?var1)` because the log they were holding is now transformed into planks.
   - The log is no longer equipped or identified as a log, shown by `(not (equipped ?var2 ?var1))` and `(not (is_log ?var2))`. This indicates the log has been used up.

This schema carefully makes sure that the agent can only craft planks if they have a log to start with, and it accounts for what happens to the log and the newly created planks. It's much like ensuring you have flour before you bake a cake, and then, once the cake is baked, you no longer have just flour but a delicious cake instead!
Parameters:
1. ?var0 - moveable
2. ?var1 - agent
3. ?var2 - moveable

Preconditions:
```
(and
    (hypothetical ?var0)
    (is_log ?var2)
    (equipped ?var2 ?var1)
)
```

Effects:
```
(and
    (equipped ?var2 ?var1)
    (inventory ?var0)
    (is_planks ?var0)
    (handsfree ?var1)
    (not (hypothetical ?var0))
    (not (is_log ?var2))
)
```
","(:action craft_plank
    :parameters (?var0 - moveable ?var1 - agent ?var2 - moveable)
    :precondition (and (hypothetical ?var0) (is_log ?var2) (equipped ?var2 ?var1))
    :effect (and (inventory ?var0) (is_planks ?var0) (handsfree ?var1) (not (equipped ?var2 ?var1)) (not (hypothetical ?var0)) (not (is_log ?var2)))
)","negate (not (equipped ?var2 ?var1)) in effects
"
minecraft,craft_plank,0.6813178062438965,Hard Negative (Manipulated Action),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: In the world of Minecraft, crafting is a key skill, and here, the agent can turn a log into planks. It's a bit like a magic trick: the agent takes a log, which they have to be holding, and transforms it into planks. These planks then appear in their inventory, ready to be used for building or crafting other items. The log, of course, is used up in this process.

Action name: craft_plank


Your answer:
","**Explanation:**
Let's imagine that in the world of Minecraft, the agent (like a player) wants to craft planks from a log. Think of it like a cook needing specific ingredients and tools to make a meal.

In our PDDL model, the action named ""craft_plank"" follows a similar thought process. Here's how the description of the world leads to the rules in our model:

1. **Preconditions**: Before crafting, certain conditions must be met:
   - The agent must have a log that they are actually holding. This is represented by `(equipped ?var2 ?var1)` meaning the log (`?var2`) is equipped by the agent (`?var1`).
   - The log must be a real log, confirmed by `(is_log ?var2)`.
   - We also see `(hypothetical ?var0)`. Here, the planks that will be created are initially just an idea (hypothetical) before they become real.

2. **Effects**: After the action is performed, we expect changes:
   - The hypothetical planks become real, shown by `(inventory ?var0)` which means the planks (`?var0`) are now in the agent's inventory.
   - They are identified as planks with `(is_planks ?var0)`.
   - The agent's hands become free `(handsfree ?var1)` because the log they were holding is now transformed into planks.
   - The log is no longer equipped or identified as a log, shown by `(not (equipped ?var2 ?var1))` and `(not (is_log ?var2))`. This indicates the log has been used up.

This schema carefully makes sure that the agent can only craft planks if they have a log to start with, and it accounts for what happens to the log and the newly created planks. It's much like ensuring you have flour before you bake a cake, and then, once the cake is baked, you no longer have just flour but a delicious cake instead!
Parameters:
1. ?var0 - moveable
2. ?var1 - agent
3. ?var2 - moveable

Preconditions:
```
(and
    (not (equipped ?var2 ?var1))
    (hypothetical ?var0)
    (is_log ?var2)
)
```

Effects:
```
(and
    (inventory ?var0)
    (is_planks ?var0)
    (handsfree ?var1)
    (not (equipped ?var2 ?var1))
    (not (hypothetical ?var0))
    (not (is_log ?var2))
)
```
","(:action craft_plank
    :parameters (?var0 - moveable ?var1 - agent ?var2 - moveable)
    :precondition (and (hypothetical ?var0) (is_log ?var2) (equipped ?var2 ?var1))
    :effect (and (inventory ?var0) (is_planks ?var0) (handsfree ?var1) (not (equipped ?var2 ?var1)) (not (hypothetical ?var0)) (not (is_log ?var2)))
)","negate (equipped ?var2 ?var1) in preconditions
"
minecraft,craft_plank,0.6813178062438965,Hard Negative (Manipulated Action),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: In the world of Minecraft, crafting is a key skill, and here, the agent can turn a log into planks. It's a bit like a magic trick: the agent takes a log, which they have to be holding, and transforms it into planks. These planks then appear in their inventory, ready to be used for building or crafting other items. The log, of course, is used up in this process.

Action name: craft_plank


Your answer:
","**Explanation:**
Let's imagine that in the world of Minecraft, the agent (like a player) wants to craft planks from a log. Think of it like a cook needing specific ingredients and tools to make a meal.

In our PDDL model, the action named ""craft_plank"" follows a similar thought process. Here's how the description of the world leads to the rules in our model:

1. **Preconditions**: Before crafting, certain conditions must be met:
   - The agent must have a log that they are actually holding. This is represented by `(equipped ?var2 ?var1)` meaning the log (`?var2`) is equipped by the agent (`?var1`).
   - The log must be a real log, confirmed by `(is_log ?var2)`.
   - We also see `(hypothetical ?var0)`. Here, the planks that will be created are initially just an idea (hypothetical) before they become real.

2. **Effects**: After the action is performed, we expect changes:
   - The hypothetical planks become real, shown by `(inventory ?var0)` which means the planks (`?var0`) are now in the agent's inventory.
   - They are identified as planks with `(is_planks ?var0)`.
   - The agent's hands become free `(handsfree ?var1)` because the log they were holding is now transformed into planks.
   - The log is no longer equipped or identified as a log, shown by `(not (equipped ?var2 ?var1))` and `(not (is_log ?var2))`. This indicates the log has been used up.

This schema carefully makes sure that the agent can only craft planks if they have a log to start with, and it accounts for what happens to the log and the newly created planks. It's much like ensuring you have flour before you bake a cake, and then, once the cake is baked, you no longer have just flour but a delicious cake instead!
Parameters:
1. ?var0 - moveable
2. ?var1 - agent
3. ?var2 - moveable

Preconditions:
```
(and
    (is_log ?var2)
    (equipped ?var2 ?var1)
)
```

Effects:
```
(and
    (inventory ?var0)
    (is_planks ?var0)
    (handsfree ?var1)
    (not (equipped ?var2 ?var1))
    (not (hypothetical ?var0))
    (not (is_log ?var2))
)
```
","(:action craft_plank
    :parameters (?var0 - moveable ?var1 - agent ?var2 - moveable)
    :precondition (and (hypothetical ?var0) (is_log ?var2) (equipped ?var2 ?var1))
    :effect (and (inventory ?var0) (is_planks ?var0) (handsfree ?var1) (not (equipped ?var2 ?var1)) (not (hypothetical ?var0)) (not (is_log ?var2)))
)","remove (hypothetical ?var0) from preconditions
"
minecraft,craft_plank,0.6813178062438965,Hard Negative (Manipulated Action),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: In the world of Minecraft, crafting is a key skill, and here, the agent can turn a log into planks. It's a bit like a magic trick: the agent takes a log, which they have to be holding, and transforms it into planks. These planks then appear in their inventory, ready to be used for building or crafting other items. The log, of course, is used up in this process.

Action name: craft_plank


Your answer:
","**Explanation:**
Let's imagine that in the world of Minecraft, the agent (like a player) wants to craft planks from a log. Think of it like a cook needing specific ingredients and tools to make a meal.

In our PDDL model, the action named ""craft_plank"" follows a similar thought process. Here's how the description of the world leads to the rules in our model:

1. **Preconditions**: Before crafting, certain conditions must be met:
   - The agent must have a log that they are actually holding. This is represented by `(equipped ?var2 ?var1)` meaning the log (`?var2`) is equipped by the agent (`?var1`).
   - The log must be a real log, confirmed by `(is_log ?var2)`.
   - We also see `(hypothetical ?var0)`. Here, the planks that will be created are initially just an idea (hypothetical) before they become real.

2. **Effects**: After the action is performed, we expect changes:
   - The hypothetical planks become real, shown by `(inventory ?var0)` which means the planks (`?var0`) are now in the agent's inventory.
   - They are identified as planks with `(is_planks ?var0)`.
   - The agent's hands become free `(handsfree ?var1)` because the log they were holding is now transformed into planks.
   - The log is no longer equipped or identified as a log, shown by `(not (equipped ?var2 ?var1))` and `(not (is_log ?var2))`. This indicates the log has been used up.

This schema carefully makes sure that the agent can only craft planks if they have a log to start with, and it accounts for what happens to the log and the newly created planks. It's much like ensuring you have flour before you bake a cake, and then, once the cake is baked, you no longer have just flour but a delicious cake instead!
Parameters:
1. ?var0 - moveable
2. ?var1 - agent
3. ?var2 - moveable

Preconditions:
```
(and
    (handsfree ?var1)
    (not (is_log ?var2))
    (is_log ?var2)
)
```

Effects:
```
(and
    (equipped ?var2 ?var1)
    (hypothetical ?var0)
    (inventory ?var0)
    (is_planks ?var0)
    (not (equipped ?var2 ?var1))
    (not (hypothetical ?var0))
)
```
","(:action craft_plank
    :parameters (?var0 - moveable ?var1 - agent ?var2 - moveable)
    :precondition (and (hypothetical ?var0) (is_log ?var2) (equipped ?var2 ?var1))
    :effect (and (inventory ?var0) (is_planks ?var0) (handsfree ?var1) (not (equipped ?var2 ?var1)) (not (hypothetical ?var0)) (not (is_log ?var2)))
)","swap (equipped ?var2 ?var1) with (handsfree ?var1)
swap (hypothetical ?var0) with (not (is_log ?var2))
"
minecraft,craft_plank,0.6813178062438965,Hard Negative (Manipulated Action),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: In the world of Minecraft, crafting is a key skill, and here, the agent can turn a log into planks. It's a bit like a magic trick: the agent takes a log, which they have to be holding, and transforms it into planks. These planks then appear in their inventory, ready to be used for building or crafting other items. The log, of course, is used up in this process.

Action name: craft_plank


Your answer:
","**Explanation:**
Let's imagine that in the world of Minecraft, the agent (like a player) wants to craft planks from a log. Think of it like a cook needing specific ingredients and tools to make a meal.

In our PDDL model, the action named ""craft_plank"" follows a similar thought process. Here's how the description of the world leads to the rules in our model:

1. **Preconditions**: Before crafting, certain conditions must be met:
   - The agent must have a log that they are actually holding. This is represented by `(equipped ?var2 ?var1)` meaning the log (`?var2`) is equipped by the agent (`?var1`).
   - The log must be a real log, confirmed by `(is_log ?var2)`.
   - We also see `(hypothetical ?var0)`. Here, the planks that will be created are initially just an idea (hypothetical) before they become real.

2. **Effects**: After the action is performed, we expect changes:
   - The hypothetical planks become real, shown by `(inventory ?var0)` which means the planks (`?var0`) are now in the agent's inventory.
   - They are identified as planks with `(is_planks ?var0)`.
   - The agent's hands become free `(handsfree ?var1)` because the log they were holding is now transformed into planks.
   - The log is no longer equipped or identified as a log, shown by `(not (equipped ?var2 ?var1))` and `(not (is_log ?var2))`. This indicates the log has been used up.

This schema carefully makes sure that the agent can only craft planks if they have a log to start with, and it accounts for what happens to the log and the newly created planks. It's much like ensuring you have flour before you bake a cake, and then, once the cake is baked, you no longer have just flour but a delicious cake instead!
Parameters:
1. ?var0 - moveable
2. ?var1 - agent
3. ?var2 - moveable

Preconditions:
```
(and
    (not (equipped ?var2 ?var1))
    (hypothetical ?var0)
    (is_log ?var2)
)
```

Effects:
```
(and
    (inventory ?var0)
    (is_planks ?var0)
    (handsfree ?var1)
    (not (equipped ?var2 ?var1))
    (not (is_log ?var2))
)
```
","(:action craft_plank
    :parameters (?var0 - moveable ?var1 - agent ?var2 - moveable)
    :precondition (and (hypothetical ?var0) (is_log ?var2) (equipped ?var2 ?var1))
    :effect (and (inventory ?var0) (is_planks ?var0) (handsfree ?var1) (not (equipped ?var2 ?var1)) (not (hypothetical ?var0)) (not (is_log ?var2)))
)","negate (equipped ?var2 ?var1) in preconditions
remove (not (hypothetical ?var0)) from effects
"
minecraft,craft_plank,0.6813178062438965,Hard Negative (Manipulated Action),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: In the world of Minecraft, crafting is a key skill, and here, the agent can turn a log into planks. It's a bit like a magic trick: the agent takes a log, which they have to be holding, and transforms it into planks. These planks then appear in their inventory, ready to be used for building or crafting other items. The log, of course, is used up in this process.

Action name: craft_plank


Your answer:
","**Explanation:**
Let's imagine that in the world of Minecraft, the agent (like a player) wants to craft planks from a log. Think of it like a cook needing specific ingredients and tools to make a meal.

In our PDDL model, the action named ""craft_plank"" follows a similar thought process. Here's how the description of the world leads to the rules in our model:

1. **Preconditions**: Before crafting, certain conditions must be met:
   - The agent must have a log that they are actually holding. This is represented by `(equipped ?var2 ?var1)` meaning the log (`?var2`) is equipped by the agent (`?var1`).
   - The log must be a real log, confirmed by `(is_log ?var2)`.
   - We also see `(hypothetical ?var0)`. Here, the planks that will be created are initially just an idea (hypothetical) before they become real.

2. **Effects**: After the action is performed, we expect changes:
   - The hypothetical planks become real, shown by `(inventory ?var0)` which means the planks (`?var0`) are now in the agent's inventory.
   - They are identified as planks with `(is_planks ?var0)`.
   - The agent's hands become free `(handsfree ?var1)` because the log they were holding is now transformed into planks.
   - The log is no longer equipped or identified as a log, shown by `(not (equipped ?var2 ?var1))` and `(not (is_log ?var2))`. This indicates the log has been used up.

This schema carefully makes sure that the agent can only craft planks if they have a log to start with, and it accounts for what happens to the log and the newly created planks. It's much like ensuring you have flour before you bake a cake, and then, once the cake is baked, you no longer have just flour but a delicious cake instead!
Parameters:
1. ?var0 - moveable
2. ?var1 - agent
3. ?var2 - moveable

Preconditions:
```
(and
    (not (is_log ?var2))
    (hypothetical ?var0)
)
```

Effects:
```
(and
    (is_log ?var2)
    (inventory ?var0)
    (is_planks ?var0)
    (handsfree ?var1)
    (not (equipped ?var2 ?var1))
    (not (hypothetical ?var0))
)
```
","(:action craft_plank
    :parameters (?var0 - moveable ?var1 - agent ?var2 - moveable)
    :precondition (and (hypothetical ?var0) (is_log ?var2) (equipped ?var2 ?var1))
    :effect (and (inventory ?var0) (is_planks ?var0) (handsfree ?var1) (not (equipped ?var2 ?var1)) (not (hypothetical ?var0)) (not (is_log ?var2)))
)","remove (equipped ?var2 ?var1) from preconditions
swap (is_log ?var2) with (not (is_log ?var2))
"
minecraft,craft_plank,0.6813178062438965,Hard Negative (Manipulated Action),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: In the world of Minecraft, crafting is a key skill, and here, the agent can turn a log into planks. It's a bit like a magic trick: the agent takes a log, which they have to be holding, and transforms it into planks. These planks then appear in their inventory, ready to be used for building or crafting other items. The log, of course, is used up in this process.

Action name: craft_plank


Your answer:
","**Explanation:**
Let's imagine that in the world of Minecraft, the agent (like a player) wants to craft planks from a log. Think of it like a cook needing specific ingredients and tools to make a meal.

In our PDDL model, the action named ""craft_plank"" follows a similar thought process. Here's how the description of the world leads to the rules in our model:

1. **Preconditions**: Before crafting, certain conditions must be met:
   - The agent must have a log that they are actually holding. This is represented by `(equipped ?var2 ?var1)` meaning the log (`?var2`) is equipped by the agent (`?var1`).
   - The log must be a real log, confirmed by `(is_log ?var2)`.
   - We also see `(hypothetical ?var0)`. Here, the planks that will be created are initially just an idea (hypothetical) before they become real.

2. **Effects**: After the action is performed, we expect changes:
   - The hypothetical planks become real, shown by `(inventory ?var0)` which means the planks (`?var0`) are now in the agent's inventory.
   - They are identified as planks with `(is_planks ?var0)`.
   - The agent's hands become free `(handsfree ?var1)` because the log they were holding is now transformed into planks.
   - The log is no longer equipped or identified as a log, shown by `(not (equipped ?var2 ?var1))` and `(not (is_log ?var2))`. This indicates the log has been used up.

This schema carefully makes sure that the agent can only craft planks if they have a log to start with, and it accounts for what happens to the log and the newly created planks. It's much like ensuring you have flour before you bake a cake, and then, once the cake is baked, you no longer have just flour but a delicious cake instead!
Parameters:
1. ?var0 - moveable
2. ?var1 - agent
3. ?var2 - moveable

Preconditions:
```
(and
    (is_planks ?var0)
    (not (equipped ?var2 ?var1))
    (hypothetical ?var0)
)
```

Effects:
```
(and
    (equipped ?var2 ?var1)
    (is_log ?var2)
    (inventory ?var0)
    (handsfree ?var1)
    (not (hypothetical ?var0))
    (not (is_log ?var2))
)
```
","(:action craft_plank
    :parameters (?var0 - moveable ?var1 - agent ?var2 - moveable)
    :precondition (and (hypothetical ?var0) (is_log ?var2) (equipped ?var2 ?var1))
    :effect (and (inventory ?var0) (is_planks ?var0) (handsfree ?var1) (not (equipped ?var2 ?var1)) (not (hypothetical ?var0)) (not (is_log ?var2)))
)","swap (equipped ?var2 ?var1) with (is_planks ?var0)
swap (is_log ?var2) with (not (equipped ?var2 ?var1))
"
minecraft,craft_plank,0.6813178062438965,Hard Negative (Manipulated Action),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: In the world of Minecraft, crafting is a key skill, and here, the agent can turn a log into planks. It's a bit like a magic trick: the agent takes a log, which they have to be holding, and transforms it into planks. These planks then appear in their inventory, ready to be used for building or crafting other items. The log, of course, is used up in this process.

Action name: craft_plank


Your answer:
","**Explanation:**
Let's imagine that in the world of Minecraft, the agent (like a player) wants to craft planks from a log. Think of it like a cook needing specific ingredients and tools to make a meal.

In our PDDL model, the action named ""craft_plank"" follows a similar thought process. Here's how the description of the world leads to the rules in our model:

1. **Preconditions**: Before crafting, certain conditions must be met:
   - The agent must have a log that they are actually holding. This is represented by `(equipped ?var2 ?var1)` meaning the log (`?var2`) is equipped by the agent (`?var1`).
   - The log must be a real log, confirmed by `(is_log ?var2)`.
   - We also see `(hypothetical ?var0)`. Here, the planks that will be created are initially just an idea (hypothetical) before they become real.

2. **Effects**: After the action is performed, we expect changes:
   - The hypothetical planks become real, shown by `(inventory ?var0)` which means the planks (`?var0`) are now in the agent's inventory.
   - They are identified as planks with `(is_planks ?var0)`.
   - The agent's hands become free `(handsfree ?var1)` because the log they were holding is now transformed into planks.
   - The log is no longer equipped or identified as a log, shown by `(not (equipped ?var2 ?var1))` and `(not (is_log ?var2))`. This indicates the log has been used up.

This schema carefully makes sure that the agent can only craft planks if they have a log to start with, and it accounts for what happens to the log and the newly created planks. It's much like ensuring you have flour before you bake a cake, and then, once the cake is baked, you no longer have just flour but a delicious cake instead!
Parameters:
1. ?var0 - moveable
2. ?var1 - agent
3. ?var2 - moveable

Preconditions:
```
(and
    (not (equipped ?var2 ?var1))
    (hypothetical ?var0)
    (is_log ?var2)
)
```

Effects:
```
(and
    (inventory ?var0)
    (is_planks ?var0)
    (handsfree ?var1)
    (not (equipped ?var2 ?var1))
    (not (hypothetical ?var0))
    (not (is_log ?var2))
)
```
","(:action craft_plank
    :parameters (?var0 - moveable ?var1 - agent ?var2 - moveable)
    :precondition (and (hypothetical ?var0) (is_log ?var2) (equipped ?var2 ?var1))
    :effect (and (inventory ?var0) (is_planks ?var0) (handsfree ?var1) (not (equipped ?var2 ?var1)) (not (hypothetical ?var0)) (not (is_log ?var2)))
)","negate (equipped ?var2 ?var1) in preconditions
"
minecraft,craft_plank,0.6813178062438965,Hard Negative (Manipulated Action),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: In the world of Minecraft, crafting is a key skill, and here, the agent can turn a log into planks. It's a bit like a magic trick: the agent takes a log, which they have to be holding, and transforms it into planks. These planks then appear in their inventory, ready to be used for building or crafting other items. The log, of course, is used up in this process.

Action name: craft_plank


Your answer:
","**Explanation:**
Let's imagine that in the world of Minecraft, the agent (like a player) wants to craft planks from a log. Think of it like a cook needing specific ingredients and tools to make a meal.

In our PDDL model, the action named ""craft_plank"" follows a similar thought process. Here's how the description of the world leads to the rules in our model:

1. **Preconditions**: Before crafting, certain conditions must be met:
   - The agent must have a log that they are actually holding. This is represented by `(equipped ?var2 ?var1)` meaning the log (`?var2`) is equipped by the agent (`?var1`).
   - The log must be a real log, confirmed by `(is_log ?var2)`.
   - We also see `(hypothetical ?var0)`. Here, the planks that will be created are initially just an idea (hypothetical) before they become real.

2. **Effects**: After the action is performed, we expect changes:
   - The hypothetical planks become real, shown by `(inventory ?var0)` which means the planks (`?var0`) are now in the agent's inventory.
   - They are identified as planks with `(is_planks ?var0)`.
   - The agent's hands become free `(handsfree ?var1)` because the log they were holding is now transformed into planks.
   - The log is no longer equipped or identified as a log, shown by `(not (equipped ?var2 ?var1))` and `(not (is_log ?var2))`. This indicates the log has been used up.

This schema carefully makes sure that the agent can only craft planks if they have a log to start with, and it accounts for what happens to the log and the newly created planks. It's much like ensuring you have flour before you bake a cake, and then, once the cake is baked, you no longer have just flour but a delicious cake instead!
Parameters:
1. ?var0 - moveable
2. ?var1 - agent
3. ?var2 - moveable

Preconditions:
```
(and
    (handsfree ?var1)
    (is_log ?var2)
    (equipped ?var2 ?var1)
)
```

Effects:
```
(and
    (hypothetical ?var0)
    (inventory ?var0)
    (not (equipped ?var2 ?var1))
    (not (hypothetical ?var0))
    (not (is_log ?var2))
)
```
","(:action craft_plank
    :parameters (?var0 - moveable ?var1 - agent ?var2 - moveable)
    :precondition (and (hypothetical ?var0) (is_log ?var2) (equipped ?var2 ?var1))
    :effect (and (inventory ?var0) (is_planks ?var0) (handsfree ?var1) (not (equipped ?var2 ?var1)) (not (hypothetical ?var0)) (not (is_log ?var2)))
)","swap (hypothetical ?var0) with (handsfree ?var1)
remove (is_planks ?var0) from effects
"
minecraft,move,0.4106304943561554,Positive (Correct Match),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: This is the agent's way of getting from one spot to another. Think of it as walking, running, or hopping across the Minecraft world. When the agent decides to move, they leave their current spot and end up at a new location. It's a simple action but essential for exploring the world and getting to different resources or areas.

Action name: move


Your answer:
","Parameters:
1. ?var0 - static
2. ?var1 - static

Preconditions:
```
(agent_at ?var1)
```

Effects:
```
(and
    (agent_at ?var0)
    (not (agent_at ?var1))
)
```
","(:action move
    :parameters (?var0 - static ?var1 - static)
    :precondition (agent_at ?var1)
    :effect (and (agent_at ?var0) (not (agent_at ?var1)))
)",
minecraft,move,0.4106304943561554,Positive (Correct Match),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: This is the agent's way of getting from one spot to another. Think of it as walking, running, or hopping across the Minecraft world. When the agent decides to move, they leave their current spot and end up at a new location. It's a simple action but essential for exploring the world and getting to different resources or areas.

Action name: move


Your answer:

**Explanation:**
Let's think about the action called ""move"" in a Minecraft-like game, where the goal is to get an agent (like a player) from one place to another. The PDDL action schema you're asking about is designed to handle this simple yet crucial task.

In the action schema, we have two parameters: `?var0` and `?var1`, which are both locations. You can think of `?var0` as the new location where the agent wants to go, and `?var1` as the current location where the agent is starting from.

**Preconditions:** The precondition for the ""move"" action is `(agent_at ?var1)`. This just means that before the agent can move, it must be verified that the agent is actually at the starting location (`?var1`). It’s similar to checking if you are really at home before you walk to the park.

**Effects:** After the agent moves, we need to update the agent's location in the game. This is what the effects in the action schema do:
- `(agent_at ?var0)` says that the agent is now at the new location (`?var0`), like saying, ""Now, I’m at the park.""
- `(not (agent_at ?var1))` means that the agent is no longer at the starting location (`?var1`), similar to saying, ""I'm no longer at home.""

This change in the agent's location is crucial for the game to keep track of where the agent is at any moment, which affects what the agent can interact with or what actions they can perform next. The effect ensures the game world is accurately updated following the agent's movement, and no confusion arises about where the agent is located. 

So, in simple terms, the action ""move"" in this game ensures that when the agent moves from one spot to another, the game correctly recognizes this change and updates the world accordingly.","Parameters:
1. ?var0 - static
2. ?var1 - static

Preconditions:
```
(agent_at ?var1)
```

Effects:
```
(and
    (agent_at ?var0)
    (not (agent_at ?var1))
)
```
","(:action move
    :parameters (?var0 - static ?var1 - static)
    :precondition (agent_at ?var1)
    :effect (and (agent_at ?var0) (not (agent_at ?var1)))
)",
minecraft,move,0.57680344581604,Positive (Correct Match),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: This is the agent's way of getting from one spot to another. Think of it as walking, running, or hopping across the Minecraft world. When the agent decides to move, they leave their current spot and end up at a new location. It's a simple action but essential for exploring the world and getting to different resources or areas.

Action name: move


Your answer:
","**Explanation:**
Let's think about the action called ""move"" in a Minecraft-like game, where the goal is to get an agent (like a player) from one place to another. The PDDL action schema you're asking about is designed to handle this simple yet crucial task.

In the action schema, we have two parameters: `?var0` and `?var1`, which are both locations. You can think of `?var0` as the new location where the agent wants to go, and `?var1` as the current location where the agent is starting from.

**Preconditions:** The precondition for the ""move"" action is `(agent_at ?var1)`. This just means that before the agent can move, it must be verified that the agent is actually at the starting location (`?var1`). It’s similar to checking if you are really at home before you walk to the park.

**Effects:** After the agent moves, we need to update the agent's location in the game. This is what the effects in the action schema do:
- `(agent_at ?var0)` says that the agent is now at the new location (`?var0`), like saying, ""Now, I’m at the park.""
- `(not (agent_at ?var1))` means that the agent is no longer at the starting location (`?var1`), similar to saying, ""I'm no longer at home.""

This change in the agent's location is crucial for the game to keep track of where the agent is at any moment, which affects what the agent can interact with or what actions they can perform next. The effect ensures the game world is accurately updated following the agent's movement, and no confusion arises about where the agent is located. 

So, in simple terms, the action ""move"" in this game ensures that when the agent moves from one spot to another, the game correctly recognizes this change and updates the world accordingly.
Parameters:
1. ?var0 - static
2. ?var1 - static

Preconditions:
```
(agent_at ?var1)
```

Effects:
```
(and
    (agent_at ?var0)
    (not (agent_at ?var1))
)
```
","(:action move
    :parameters (?var0 - static ?var1 - static)
    :precondition (agent_at ?var1)
    :effect (and (agent_at ?var0) (not (agent_at ?var1)))
)",
minecraft,move,0.17881816625595093,Easy Negative (Inter-Domain Mismatch),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: This is the agent's way of getting from one spot to another. Think of it as walking, running, or hopping across the Minecraft world. When the agent decides to move, they leave their current spot and end up at a new location. It's a simple action but essential for exploring the world and getting to different resources or areas.

Action name: move


Your answer:
","Parameters:
1. ?from - cells
2. ?to - cells

Preconditions:
```
(and
    (connected ?from ?to)
    (at-hero ?from)
    (not (is-destroyed ?to))
    (not (has-trap ?from))
    (has-trap ?to)
    (arm-free)
)
```

Effects:
```
(and
    (at-hero ?to)
    (is-destroyed ?from)
    (not (at-hero ?from))
)
```
","(:action move
    :parameters (?var0 - static ?var1 - static)
    :precondition (agent_at ?var1)
    :effect (and (agent_at ?var0) (not (agent_at ?var1)))
)",
minecraft,move,0.22251534461975098,Easy Negative (Inter-Domain Mismatch),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: This is the agent's way of getting from one spot to another. Think of it as walking, running, or hopping across the Minecraft world. When the agent decides to move, they leave their current spot and end up at a new location. It's a simple action but essential for exploring the world and getting to different resources or areas.

Action name: move


Your answer:
","Parameters:
1. ?from - cells
2. ?to - cells

Preconditions:
```
(and
    (connected ?from ?to)
    (at-hero ?from)
    (not (has-trap ?from))
    (not (is-destroyed ?to))
    (not (has-trap ?to))
    (not (has-monster ?to))
)
```

Effects:
```
(and
    (at-hero ?to)
    (is-destroyed ?from)
    (not (at-hero ?from))
)
```
","(:action move
    :parameters (?var0 - static ?var1 - static)
    :precondition (agent_at ?var1)
    :effect (and (agent_at ?var0) (not (agent_at ?var1)))
)",
minecraft,move,0.15997400879859924,Easy Negative (Inter-Domain Mismatch),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: This is the agent's way of getting from one spot to another. Think of it as walking, running, or hopping across the Minecraft world. When the agent decides to move, they leave their current spot and end up at a new location. It's a simple action but essential for exploring the world and getting to different resources or areas.

Action name: move


Your answer:
","Parameters:
1. ?loc - cells
2. ?s - swords

Preconditions:
```
(and
    (at-hero ?loc)
    (at-sword ?s ?loc)
    (arm-free)
)
```

Effects:
```
(and
    (holding ?s)
    (not (at-sword ?s ?loc))
    (not (arm-free))
)
```
","(:action move
    :parameters (?var0 - static ?var1 - static)
    :precondition (agent_at ?var1)
    :effect (and (agent_at ?var0) (not (agent_at ?var1)))
)",
minecraft,move,0.30057987570762634,Easy Negative (Inter-Domain Mismatch),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: This is the agent's way of getting from one spot to another. Think of it as walking, running, or hopping across the Minecraft world. When the agent decides to move, they leave their current spot and end up at a new location. It's a simple action but essential for exploring the world and getting to different resources or areas.

Action name: move


Your answer:
","Parameters:
1. ?loc - cells

Preconditions:
```
(and
    (at-hero ?loc)
    (arm-free)
    (has-trap ?loc)
)
```

Effects:
```
(and
    (trap-disarmed ?loc)
    (not (has-trap ?loc))
)
```
","(:action move
    :parameters (?var0 - static ?var1 - static)
    :precondition (agent_at ?var1)
    :effect (and (agent_at ?var0) (not (agent_at ?var1)))
)",
minecraft,move,0.2988182306289673,Easy Negative (Inter-Domain Mismatch),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: This is the agent's way of getting from one spot to another. Think of it as walking, running, or hopping across the Minecraft world. When the agent decides to move, they leave their current spot and end up at a new location. It's a simple action but essential for exploring the world and getting to different resources or areas.

Action name: move


Your answer:
","Parameters:
1. ?from - cells
2. ?to - cells
3. ?s - swords

Preconditions:
```
(and
    (connected ?from ?to)
    (at-hero ?from)
    (has-monster ?to)
    (not (is-destroyed ?to))
    (not (has-trap ?from))
    (holding ?s)
)
```

Effects:
```
(and
    (at-hero ?to)
    (is-destroyed ?from)
    (not (at-hero ?from))
)
```
","(:action move
    :parameters (?var0 - static ?var1 - static)
    :precondition (agent_at ?var1)
    :effect (and (agent_at ?var0) (not (agent_at ?var1)))
)",
minecraft,move,0.2034735381603241,Easy Negative (Inter-Domain Mismatch),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: This is the agent's way of getting from one spot to another. Think of it as walking, running, or hopping across the Minecraft world. When the agent decides to move, they leave their current spot and end up at a new location. It's a simple action but essential for exploring the world and getting to different resources or areas.

Action name: move


Your answer:
","Parameters:
1. ?loc - cells
2. ?s - swords

Preconditions:
```
(and
    (at-hero ?loc)
    (holding ?s)
    (not (has-trap ?loc))
    (not (has-monster ?loc))
)
```

Effects:
```
(and
    (arm-free)
    (is-destroyed ?s)
    (not (holding ?s))
)
```
","(:action move
    :parameters (?var0 - static ?var1 - static)
    :precondition (agent_at ?var1)
    :effect (and (agent_at ?var0) (not (agent_at ?var1)))
)",
minecraft,move,0.1438380926847458,Easy Negative (Inter-Domain Mismatch),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: This is the agent's way of getting from one spot to another. Think of it as walking, running, or hopping across the Minecraft world. When the agent decides to move, they leave their current spot and end up at a new location. It's a simple action but essential for exploring the world and getting to different resources or areas.

Action name: move


Your answer:

**Explanation:**
Let's think about the action called ""move"" in a Minecraft-like game, where the goal is to get an agent (like a player) from one place to another. The PDDL action schema you're asking about is designed to handle this simple yet crucial task.

In the action schema, we have two parameters: `?var0` and `?var1`, which are both locations. You can think of `?var0` as the new location where the agent wants to go, and `?var1` as the current location where the agent is starting from.

**Preconditions:** The precondition for the ""move"" action is `(agent_at ?var1)`. This just means that before the agent can move, it must be verified that the agent is actually at the starting location (`?var1`). It’s similar to checking if you are really at home before you walk to the park.

**Effects:** After the agent moves, we need to update the agent's location in the game. This is what the effects in the action schema do:
- `(agent_at ?var0)` says that the agent is now at the new location (`?var0`), like saying, ""Now, I’m at the park.""
- `(not (agent_at ?var1))` means that the agent is no longer at the starting location (`?var1`), similar to saying, ""I'm no longer at home.""

This change in the agent's location is crucial for the game to keep track of where the agent is at any moment, which affects what the agent can interact with or what actions they can perform next. The effect ensures the game world is accurately updated following the agent's movement, and no confusion arises about where the agent is located. 

So, in simple terms, the action ""move"" in this game ensures that when the agent moves from one spot to another, the game correctly recognizes this change and updates the world accordingly.","Parameters:
1. ?x - book
2. ?y - book
3. ?cat - category

Preconditions:
```
(and
    (on-shelf ?x ?y)
    (accessible ?x)
    (hands-free)
    (belongs-to-category ?x ?cat)
)
```

Effects:
```
(and
    (holding ?x)
    (accessible ?y)
    (not (accessible ?x))
    (not (hands-free))
    (not (on-shelf ?x ?y))
    (shelf-empty ?cat)
)
```
","(:action move
    :parameters (?var0 - static ?var1 - static)
    :precondition (agent_at ?var1)
    :effect (and (agent_at ?var0) (not (agent_at ?var1)))
)",
minecraft,move,0.024976003915071487,Easy Negative (Inter-Domain Mismatch),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: This is the agent's way of getting from one spot to another. Think of it as walking, running, or hopping across the Minecraft world. When the agent decides to move, they leave their current spot and end up at a new location. It's a simple action but essential for exploring the world and getting to different resources or areas.

Action name: move


Your answer:

**Explanation:**
Let's think about the action called ""move"" in a Minecraft-like game, where the goal is to get an agent (like a player) from one place to another. The PDDL action schema you're asking about is designed to handle this simple yet crucial task.

In the action schema, we have two parameters: `?var0` and `?var1`, which are both locations. You can think of `?var0` as the new location where the agent wants to go, and `?var1` as the current location where the agent is starting from.

**Preconditions:** The precondition for the ""move"" action is `(agent_at ?var1)`. This just means that before the agent can move, it must be verified that the agent is actually at the starting location (`?var1`). It’s similar to checking if you are really at home before you walk to the park.

**Effects:** After the agent moves, we need to update the agent's location in the game. This is what the effects in the action schema do:
- `(agent_at ?var0)` says that the agent is now at the new location (`?var0`), like saying, ""Now, I’m at the park.""
- `(not (agent_at ?var1))` means that the agent is no longer at the starting location (`?var1`), similar to saying, ""I'm no longer at home.""

This change in the agent's location is crucial for the game to keep track of where the agent is at any moment, which affects what the agent can interact with or what actions they can perform next. The effect ensures the game world is accurately updated following the agent's movement, and no confusion arises about where the agent is located. 

So, in simple terms, the action ""move"" in this game ensures that when the agent moves from one spot to another, the game correctly recognizes this change and updates the world accordingly.","Parameters:
1. ?x - book

Preconditions:
```
(holding ?x)
```

Effects:
```
(and
    (not (holding ?x))
    (accessible ?x)
    (hands-free)
    (on-table ?x)
)
```
","(:action move
    :parameters (?var0 - static ?var1 - static)
    :precondition (agent_at ?var1)
    :effect (and (agent_at ?var0) (not (agent_at ?var1)))
)",
minecraft,move,0.1462501734495163,Easy Negative (Inter-Domain Mismatch),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: This is the agent's way of getting from one spot to another. Think of it as walking, running, or hopping across the Minecraft world. When the agent decides to move, they leave their current spot and end up at a new location. It's a simple action but essential for exploring the world and getting to different resources or areas.

Action name: move


Your answer:

**Explanation:**
Let's think about the action called ""move"" in a Minecraft-like game, where the goal is to get an agent (like a player) from one place to another. The PDDL action schema you're asking about is designed to handle this simple yet crucial task.

In the action schema, we have two parameters: `?var0` and `?var1`, which are both locations. You can think of `?var0` as the new location where the agent wants to go, and `?var1` as the current location where the agent is starting from.

**Preconditions:** The precondition for the ""move"" action is `(agent_at ?var1)`. This just means that before the agent can move, it must be verified that the agent is actually at the starting location (`?var1`). It’s similar to checking if you are really at home before you walk to the park.

**Effects:** After the agent moves, we need to update the agent's location in the game. This is what the effects in the action schema do:
- `(agent_at ?var0)` says that the agent is now at the new location (`?var0`), like saying, ""Now, I’m at the park.""
- `(not (agent_at ?var1))` means that the agent is no longer at the starting location (`?var1`), similar to saying, ""I'm no longer at home.""

This change in the agent's location is crucial for the game to keep track of where the agent is at any moment, which affects what the agent can interact with or what actions they can perform next. The effect ensures the game world is accurately updated following the agent's movement, and no confusion arises about where the agent is located. 

So, in simple terms, the action ""move"" in this game ensures that when the agent moves from one spot to another, the game correctly recognizes this change and updates the world accordingly.","Parameters:
1. ?x - book

Preconditions:
```
(and
    (accessible ?x)
    (not (checked-out ?x))
)
```

Effects:
```
(and
    (checked-out ?x)
    (not (accessible ?x))
    (book-request ?x)
    (return-due ?x)
)
```
","(:action move
    :parameters (?var0 - static ?var1 - static)
    :precondition (agent_at ?var1)
    :effect (and (agent_at ?var0) (not (agent_at ?var1)))
)",
minecraft,move,0.021671444177627563,Easy Negative (Inter-Domain Mismatch),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: This is the agent's way of getting from one spot to another. Think of it as walking, running, or hopping across the Minecraft world. When the agent decides to move, they leave their current spot and end up at a new location. It's a simple action but essential for exploring the world and getting to different resources or areas.

Action name: move


Your answer:

**Explanation:**
Let's think about the action called ""move"" in a Minecraft-like game, where the goal is to get an agent (like a player) from one place to another. The PDDL action schema you're asking about is designed to handle this simple yet crucial task.

In the action schema, we have two parameters: `?var0` and `?var1`, which are both locations. You can think of `?var0` as the new location where the agent wants to go, and `?var1` as the current location where the agent is starting from.

**Preconditions:** The precondition for the ""move"" action is `(agent_at ?var1)`. This just means that before the agent can move, it must be verified that the agent is actually at the starting location (`?var1`). It’s similar to checking if you are really at home before you walk to the park.

**Effects:** After the agent moves, we need to update the agent's location in the game. This is what the effects in the action schema do:
- `(agent_at ?var0)` says that the agent is now at the new location (`?var0`), like saying, ""Now, I’m at the park.""
- `(not (agent_at ?var1))` means that the agent is no longer at the starting location (`?var1`), similar to saying, ""I'm no longer at home.""

This change in the agent's location is crucial for the game to keep track of where the agent is at any moment, which affects what the agent can interact with or what actions they can perform next. The effect ensures the game world is accurately updated following the agent's movement, and no confusion arises about where the agent is located. 

So, in simple terms, the action ""move"" in this game ensures that when the agent moves from one spot to another, the game correctly recognizes this change and updates the world accordingly.","Parameters:
1. ?x - book

Preconditions:
```
(and
    (checked-out ?x)
    (holding ?x)
)
```

Effects:
```
(and
    (not (checked-out ?x))
    (not (holding ?x))
    (not (book-request ?x))
    (not (return-due ?x))
    (accessible ?x)
    (hands-free)
)
```
","(:action move
    :parameters (?var0 - static ?var1 - static)
    :precondition (agent_at ?var1)
    :effect (and (agent_at ?var0) (not (agent_at ?var1)))
)",
minecraft,move,0.13315889239311218,Easy Negative (Inter-Domain Mismatch),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: This is the agent's way of getting from one spot to another. Think of it as walking, running, or hopping across the Minecraft world. When the agent decides to move, they leave their current spot and end up at a new location. It's a simple action but essential for exploring the world and getting to different resources or areas.

Action name: move


Your answer:

**Explanation:**
Let's think about the action called ""move"" in a Minecraft-like game, where the goal is to get an agent (like a player) from one place to another. The PDDL action schema you're asking about is designed to handle this simple yet crucial task.

In the action schema, we have two parameters: `?var0` and `?var1`, which are both locations. You can think of `?var0` as the new location where the agent wants to go, and `?var1` as the current location where the agent is starting from.

**Preconditions:** The precondition for the ""move"" action is `(agent_at ?var1)`. This just means that before the agent can move, it must be verified that the agent is actually at the starting location (`?var1`). It’s similar to checking if you are really at home before you walk to the park.

**Effects:** After the agent moves, we need to update the agent's location in the game. This is what the effects in the action schema do:
- `(agent_at ?var0)` says that the agent is now at the new location (`?var0`), like saying, ""Now, I’m at the park.""
- `(not (agent_at ?var1))` means that the agent is no longer at the starting location (`?var1`), similar to saying, ""I'm no longer at home.""

This change in the agent's location is crucial for the game to keep track of where the agent is at any moment, which affects what the agent can interact with or what actions they can perform next. The effect ensures the game world is accurately updated following the agent's movement, and no confusion arises about where the agent is located. 

So, in simple terms, the action ""move"" in this game ensures that when the agent moves from one spot to another, the game correctly recognizes this change and updates the world accordingly.","Parameters:
1. ?x - book

Preconditions:
```
(and
    (accessible ?x)
    (on-table ?x)
    (hands-free)
)
```

Effects:
```
(and
    (not (on-table ?x))
    (not (accessible ?x))
    (not (hands-free))
    (holding ?x)
)
```
","(:action move
    :parameters (?var0 - static ?var1 - static)
    :precondition (agent_at ?var1)
    :effect (and (agent_at ?var0) (not (agent_at ?var1)))
)",
minecraft,move,0.16687951982021332,Easy Negative (Inter-Domain Mismatch),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: This is the agent's way of getting from one spot to another. Think of it as walking, running, or hopping across the Minecraft world. When the agent decides to move, they leave their current spot and end up at a new location. It's a simple action but essential for exploring the world and getting to different resources or areas.

Action name: move


Your answer:

**Explanation:**
Let's think about the action called ""move"" in a Minecraft-like game, where the goal is to get an agent (like a player) from one place to another. The PDDL action schema you're asking about is designed to handle this simple yet crucial task.

In the action schema, we have two parameters: `?var0` and `?var1`, which are both locations. You can think of `?var0` as the new location where the agent wants to go, and `?var1` as the current location where the agent is starting from.

**Preconditions:** The precondition for the ""move"" action is `(agent_at ?var1)`. This just means that before the agent can move, it must be verified that the agent is actually at the starting location (`?var1`). It’s similar to checking if you are really at home before you walk to the park.

**Effects:** After the agent moves, we need to update the agent's location in the game. This is what the effects in the action schema do:
- `(agent_at ?var0)` says that the agent is now at the new location (`?var0`), like saying, ""Now, I’m at the park.""
- `(not (agent_at ?var1))` means that the agent is no longer at the starting location (`?var1`), similar to saying, ""I'm no longer at home.""

This change in the agent's location is crucial for the game to keep track of where the agent is at any moment, which affects what the agent can interact with or what actions they can perform next. The effect ensures the game world is accurately updated following the agent's movement, and no confusion arises about where the agent is located. 

So, in simple terms, the action ""move"" in this game ensures that when the agent moves from one spot to another, the game correctly recognizes this change and updates the world accordingly.","Parameters:
1. ?x - book
2. ?y - book
3. ?cat - category

Preconditions:
```
(and
    (holding ?x)
    (accessible ?y)
    (belongs-to-category ?x ?cat)
    (not (shelf-overflow ?cat))
)
```

Effects:
```
(and
    (not (holding ?x))
    (not (accessible ?y))
    (accessible ?x)
    (hands-free)
    (on-shelf ?x ?y)
    (shelf-empty ?cat)
)
```
","(:action move
    :parameters (?var0 - static ?var1 - static)
    :precondition (agent_at ?var1)
    :effect (and (agent_at ?var0) (not (agent_at ?var1)))
)",
minecraft,move,0.28263044357299805,Easy Negative (Inter-Domain Mismatch),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: This is the agent's way of getting from one spot to another. Think of it as walking, running, or hopping across the Minecraft world. When the agent decides to move, they leave their current spot and end up at a new location. It's a simple action but essential for exploring the world and getting to different resources or areas.

Action name: move


Your answer:
","**Explanation:**

Imagine you're guiding a hero who just woke up in a mysterious dungeon. Each room can have different things: some are empty, others have monsters, some have traps, and a few might have swords. There's also a special room with an exit—our hero's goal.

Now, let's talk about the action called **move-to-trap**. This action involves our hero moving from one room (we'll call it ""Room A"") to another room (""Room B""), where, unfortunately, there's a trap waiting. Here's why each part of the plan (or action schema) makes sense:

1. **Connected Rooms**: Our hero can only move to a room directly connected to the one they're currently in. This is like being in your house and only being able to walk into rooms that have doors leading from where you are now.

2. **Hero's Current Location**: The hero must start in Room A to move to Room B. You can't move from a place if you're not actually there, right?

3. **Room B Not Destroyed**: The room our hero is moving to mustn't be already destroyed (or in ruins). It's like making sure the bridge you want to cross hasn't collapsed.

4. **Room A Doesn't Have a Trap**: It’s safer if the room our hero is leaving doesn't have a trap. Imagine trying to leave a room with a trap; it could activate and cause trouble!

5. **Room B Has a Trap**: Since the action is called **move-to-trap**, it specifically involves moving to a room with a trap, almost like knowing there's a puddle ahead but stepping into it anyway because it's the only path forward.

6. **Hero's Arm is Free**: This indicates that the hero isn’t holding anything like a sword. It’s important because handling traps might require free hands—think about needing your hands free to disarm or avoid a trap carefully.

When our hero completes this action, several things happen:
- **Hero is now in Room B**: Just like when you walk into another room, you’re no longer in the first room.
- **Room A is destroyed**: This could mean the hero leaves it in a way that no one can follow—maybe they close a heavy door that locks automatically.
- **Hero is no longer in Room A**: It confirms that the hero has completely left Room A.

This action is designed for specific situations in the dungeon where the hero might need to move strategically, even into risky areas, to navigate through the dungeon and eventually find the exit.
Parameters:
1. ?from - cells
2. ?to - cells

Preconditions:
```
(and
    (connected ?from ?to)
    (at-hero ?from)
    (not (is-destroyed ?to))
    (not (has-trap ?from))
    (has-trap ?to)
    (arm-free)
)
```

Effects:
```
(and
    (at-hero ?to)
    (is-destroyed ?from)
    (not (at-hero ?from))
)
```
","(:action move
    :parameters (?var0 - static ?var1 - static)
    :precondition (agent_at ?var1)
    :effect (and (agent_at ?var0) (not (agent_at ?var1)))
)",
minecraft,move,0.28654181957244873,Easy Negative (Inter-Domain Mismatch),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: This is the agent's way of getting from one spot to another. Think of it as walking, running, or hopping across the Minecraft world. When the agent decides to move, they leave their current spot and end up at a new location. It's a simple action but essential for exploring the world and getting to different resources or areas.

Action name: move


Your answer:
","**Explanation:**

Imagine our hero in a big, scary dungeon, just like a character from a fairy tale or a video game. The dungeon has several rooms, and some rooms are safe while others have monsters or traps. The hero's goal is to escape from this dungeon, moving from one room to another until he finds the exit.

Now, let's talk about the action called ""move"" that our hero can take. The action ""move"" lets the hero go from one room (we'll call this the ""current room"") to a connected room (let's call this the ""next room""). Think of the dungeon like a big house with many doors connecting the rooms; the hero can only move through a door if it’s open and the room on the other side is safe.

In the PDDL (a kind of programming language for planning what actions to take), the action ""move"" needs some conditions to be met before the hero can move:
1. **The rooms must be connected:** Just like you can't walk through a wall at home, the hero can only move to a room if there's a direct connection (like a doorway or a corridor).
2. **The hero must be in the current room:** The hero can only leave a room if he's actually in it.
3. **The current room shouldn’t have a trap that could hurt him.**
4. **The next room shouldn’t be destroyed:** The hero can't go into a room if it’s already been collapsed or destroyed (maybe from a previous adventure!).
5. **The next room shouldn’t have a trap or a monster:** This makes sure our hero doesn’t walk into new danger.

When the hero moves:
- **He is now in the next room:** Just like if you walk to another room in your house, you're then in that new room.
- **The room he left gets destroyed:** This might sound strange, but imagine if every time he left a room, the door magically closed and locked forever, so he can’t go back the same way.
- **He is no longer in the current room:** This is just confirming that he has moved on from the previous room.

These rules help our hero make smart moves through the dungeon, avoiding danger and making progress towards escape. This way of setting up the hero's actions makes sure he can navigate through the dungeon safely and eventually find his way out.
Parameters:
1. ?from - cells
2. ?to - cells

Preconditions:
```
(and
    (connected ?from ?to)
    (at-hero ?from)
    (not (has-trap ?from))
    (not (is-destroyed ?to))
    (not (has-trap ?to))
    (not (has-monster ?to))
)
```

Effects:
```
(and
    (at-hero ?to)
    (is-destroyed ?from)
    (not (at-hero ?from))
)
```
","(:action move
    :parameters (?var0 - static ?var1 - static)
    :precondition (agent_at ?var1)
    :effect (and (agent_at ?var0) (not (agent_at ?var1)))
)",
minecraft,move,0.30158182978630066,Easy Negative (Inter-Domain Mismatch),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: This is the agent's way of getting from one spot to another. Think of it as walking, running, or hopping across the Minecraft world. When the agent decides to move, they leave their current spot and end up at a new location. It's a simple action but essential for exploring the world and getting to different resources or areas.

Action name: move


Your answer:
","**Explanation:**

Imagine you're helping a hero navigate through a tricky dungeon filled with different challenges. The hero's objective is to escape, but along the way, they might find useful items like swords that can help protect against monsters.

In our scenario, the action of picking up a sword is crucial. Let's think of it like this: if you enter a room and see a sword on the floor while your hands are free, you can pick it up. The action schema in PDDL, which is a way to represent planning problems, explains this in a structured format.

The preconditions for our action ""pick-sword"" are:
1. **The hero must be in the same room as the sword** (represented as `(at-hero ?loc)` and `(at-sword ?s ?loc)`). This makes sense because you can't pick up something that's not in the same room as you.
2. **The hero's hand must be free** (`(arm-free)`). Just like you can't hold two grocery bags in one hand easily, our hero needs a free hand to pick up the sword.

The effects after the hero picks up the sword are:
1. **The hero is now holding the sword** (`(holding ?s)`). This indicates that the hero has successfully picked up the sword.
2. **The sword is no longer in its original place** (`(not (at-sword ?s ?loc))`). Just like if you take an apple from a basket, the apple isn't in the basket anymore.
3. **The hero's hand is no longer free** (`(not (arm-free))`). Holding the sword means the hand that was free is now occupied.

This action schema is a simple way to model the interaction between the hero and the sword in the dungeon. It helps ensure that all necessary conditions are met before the action takes place, making the hero's journey through the dungeon logical and structured. This way, the hero doesn't magically have a sword without picking it up or has two items in one hand, which keeps our dungeon adventure realistic and understandable.
Parameters:
1. ?loc - cells
2. ?s - swords

Preconditions:
```
(and
    (at-hero ?loc)
    (at-sword ?s ?loc)
    (arm-free)
)
```

Effects:
```
(and
    (holding ?s)
    (not (at-sword ?s ?loc))
    (not (arm-free))
)
```
","(:action move
    :parameters (?var0 - static ?var1 - static)
    :precondition (agent_at ?var1)
    :effect (and (agent_at ?var0) (not (agent_at ?var1)))
)",
minecraft,move,0.20672237873077393,Easy Negative (Inter-Domain Mismatch),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: This is the agent's way of getting from one spot to another. Think of it as walking, running, or hopping across the Minecraft world. When the agent decides to move, they leave their current spot and end up at a new location. It's a simple action but essential for exploring the world and getting to different resources or areas.

Action name: move


Your answer:
","**Explanation:**

Imagine our hero in a dungeon, a place with rooms connected like a spider web. Each room can be just an empty space, or it might have something like a monster, a trap, or even a sword. Somewhere in this maze, there's a special room that has an exit—the ultimate goal for our hero.

Now, let's focus on a specific action our hero might need to take: **disarming a trap**. In our scenario, the hero finds themselves in a room with a trap. The action to disarm this trap is what we need to understand.

The action is named `disarm-trap`. This action, like any other, has specific requirements (preconditions) that must be met before the hero can perform it. These preconditions are:
1. **The hero must be in the same room as the trap.** This makes sense because you can't disarm a trap from another room. It's like needing to be in the kitchen to turn off a stove.
2. **The hero's hand must be free.** This means the hero can’t be holding anything, like a sword. It's a bit like needing both hands free to tie your shoes properly.
3. **There must actually be a trap in the room.** Obviously, the hero can't disarm a trap if there isn't one there!

If all these conditions are met, then the hero can go ahead and disarm the trap. The results (effects) of this action are:
1. **The trap in the room is disarmed.** This means the room is now safe from that trap.
2. **The trap is no longer considered to be in the room.** It's like cleaning up a spill; once it's cleaned, it's not there anymore.

By breaking down the action like this, we see how each condition helps ensure the action can be carried out safely and effectively. It’s just like following a recipe—each ingredient needs to be added at the right time for the dish to come out right!
Parameters:
1. ?loc - cells

Preconditions:
```
(and
    (at-hero ?loc)
    (arm-free)
    (has-trap ?loc)
)
```

Effects:
```
(and
    (trap-disarmed ?loc)
    (not (has-trap ?loc))
)
```
","(:action move
    :parameters (?var0 - static ?var1 - static)
    :precondition (agent_at ?var1)
    :effect (and (agent_at ?var0) (not (agent_at ?var1)))
)",
minecraft,move,0.3918250799179077,Easy Negative (Inter-Domain Mismatch),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: This is the agent's way of getting from one spot to another. Think of it as walking, running, or hopping across the Minecraft world. When the agent decides to move, they leave their current spot and end up at a new location. It's a simple action but essential for exploring the world and getting to different resources or areas.

Action name: move


Your answer:
","**Explanation:**

Let's imagine our hero in the dungeon scenario. The hero wakes up and finds themselves in a room, wanting to move to an adjacent room where, unfortunately, there's a monster. Here's how we translate this scenario into a set of instructions, or a 'domain model,' in planning language.

The action we're talking about is called ""move-to-monster."" This means our hero is trying to move from one room (let’s call it Room A) to another room (Room B) where there is a monster. To ensure this action can happen, there are certain conditions that need to be met (these are called 'preconditions') and certain outcomes that will happen as a result of the action (these are called 'effects').

1. **Preconditions**:
   - **Connected Rooms**: Room A and Room B must be connected by a corridor. This makes sense because our hero can't magically jump from one room to another; there must be a path.
   - **Hero's Current Location**: The hero must currently be in Room A. If the hero isn't there, they can't start moving from it!
   - **Monster Presence**: Room B must have a monster. After all, the action is specifically about moving to a room with a monster.
   - **Room Integrity**: Room B should not be destroyed. A destroyed room might mean it’s collapsed or inaccessible, so it's logical our hero can’t move into it.
   - **Safety in Room A**: Room A should not have a trap. This makes sure our hero is safe and able to move without getting caught in a trap.
   - **Armed Hero**: The hero must be holding a sword. It’s a dangerous task to move into a room with a monster, so having a sword means the hero is prepared for a fight.

2. **Effects**:
   - **Hero's New Location**: After the action, the hero will be in Room B. They've successfully moved.
   - **Change in Room A's Status**: Room A becomes 'destroyed.' This might represent that the room is no longer safe or viable after the hero leaves, maybe because of the haste in escaping or some mechanism triggered by the departure.
   - **Update Hero's Old Location**: The fact that the hero was in Room A is no longer true, which is updated in our model to reflect the hero’s new position.

This planning helps organize our thoughts and actions logically, ensuring every step is clear and all necessary precautions are taken. Think of it like giving someone directions with a checklist: ""Before you go there, make sure this, this, and this are true, and once you do, this and this will happen."" This ensures everyone knows what to expect and how to prepare! 
Parameters:
1. ?from - cells
2. ?to - cells
3. ?s - swords

Preconditions:
```
(and
    (connected ?from ?to)
    (at-hero ?from)
    (has-monster ?to)
    (not (is-destroyed ?to))
    (not (has-trap ?from))
    (holding ?s)
)
```

Effects:
```
(and
    (at-hero ?to)
    (is-destroyed ?from)
    (not (at-hero ?from))
)
```
","(:action move
    :parameters (?var0 - static ?var1 - static)
    :precondition (agent_at ?var1)
    :effect (and (agent_at ?var0) (not (agent_at ?var1)))
)",
minecraft,move,0.26161399483680725,Easy Negative (Inter-Domain Mismatch),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: This is the agent's way of getting from one spot to another. Think of it as walking, running, or hopping across the Minecraft world. When the agent decides to move, they leave their current spot and end up at a new location. It's a simple action but essential for exploring the world and getting to different resources or areas.

Action name: move


Your answer:
","**Explanation:**

Imagine you're helping a hero navigate a dungeon full of monsters and traps, a bit like playing a video game. Now, the hero has a sword, but in this part of the game, the hero decides to destroy the sword. To understand why certain conditions are checked before the hero can destroy the sword safely, let's break it down using the action ""destroy-sword"" from the game's rules (or in technical terms, the PDDL action schema).

Firstly, the hero needs to be in the same location as the sword. This makes sense, right? You can't throw something away or break it if it's not with you. So, the condition `(at-hero ?loc)` ensures that the hero is at the right spot to perform the action.

Secondly, the hero must be holding the sword. It’s similar to needing both hands on a bat to swing it; here, the hero needs to have the sword in hand to destroy it, checked by `(holding ?s)`.

But why check for no traps or monsters in the room? Think of it like trying to do something delicate, like assembling a model airplane, in a room with a loose tiger. Not a great idea, right? If there’s a monster in the room, destroying the sword might make the hero vulnerable to attack. Similarly, a trap could be triggered by the noise or movement, putting the hero in danger. So, `(not (has-trap ?loc))` and `(not (has-monster ?loc))` ensure that the environment is safe for the hero to break the sword without turning the situation worse.

Now, what happens after the sword is destroyed? The effect is that the hero’s hand is now free (`arm-free`), the sword is confirmed as destroyed (`is-destroyed ?s`), and the hero is no longer holding it (`not (holding ?s)`). It’s like cleaning up after finishing a task: put away the tools, clean up the mess, and free up your hands for the next task.

In simple terms, this action schema is like a set of instructions to make sure the hero does something risky (like destroying a sword) safely and responsibly, without making the dangerous dungeon situation even worse.
Parameters:
1. ?loc - cells
2. ?s - swords

Preconditions:
```
(and
    (at-hero ?loc)
    (holding ?s)
    (not (has-trap ?loc))
    (not (has-monster ?loc))
)
```

Effects:
```
(and
    (arm-free)
    (is-destroyed ?s)
    (not (holding ?s))
)
```
","(:action move
    :parameters (?var0 - static ?var1 - static)
    :precondition (agent_at ?var1)
    :effect (and (agent_at ?var0) (not (agent_at ?var1)))
)",
minecraft,move,0.48663032054901123,Semi-Hard Negative (Intra-Domain Mismatch),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: This is the agent's way of getting from one spot to another. Think of it as walking, running, or hopping across the Minecraft world. When the agent decides to move, they leave their current spot and end up at a new location. It's a simple action but essential for exploring the world and getting to different resources or areas.

Action name: move


Your answer:
","Parameters:
1. ?var0 - moveable
2. ?var1 - agent

Preconditions:
```
(equipped ?var0 ?var1)
```

Effects:
```
(and
    (inventory ?var0)
    (not (equipped ?var0 ?var1))
    (handsfree ?var1)
)
```
","(:action move
    :parameters (?var0 - static ?var1 - static)
    :precondition (agent_at ?var1)
    :effect (and (agent_at ?var0) (not (agent_at ?var1)))
)",
minecraft,move,0.7756763100624084,Semi-Hard Negative (Intra-Domain Mismatch),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: This is the agent's way of getting from one spot to another. Think of it as walking, running, or hopping across the Minecraft world. When the agent decides to move, they leave their current spot and end up at a new location. It's a simple action but essential for exploring the world and getting to different resources or areas.

Action name: move


Your answer:
","Parameters:
1. ?var0 - moveable
2. ?var1 - agent
3. ?var2 - moveable

Preconditions:
```
(and
    (hypothetical ?var0)
    (is_log ?var2)
    (equipped ?var2 ?var1)
)
```

Effects:
```
(and
    (inventory ?var0)
    (is_planks ?var0)
    (handsfree ?var1)
    (not (equipped ?var2 ?var1))
    (not (hypothetical ?var0))
    (not (is_log ?var2))
)
```
","(:action move
    :parameters (?var0 - static ?var1 - static)
    :precondition (agent_at ?var1)
    :effect (and (agent_at ?var0) (not (agent_at ?var1)))
)",
minecraft,move,0.7020046710968018,Semi-Hard Negative (Intra-Domain Mismatch),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: This is the agent's way of getting from one spot to another. Think of it as walking, running, or hopping across the Minecraft world. When the agent decides to move, they leave their current spot and end up at a new location. It's a simple action but essential for exploring the world and getting to different resources or areas.

Action name: move


Your answer:
","Parameters:
1. ?var0 - moveable
2. ?var1 - agent

Preconditions:
```
(and
    (inventory ?var0)
    (handsfree ?var1)
)
```

Effects:
```
(and
    (equipped ?var0 ?var1)
    (not (handsfree ?var1))
    (not (inventory ?var0))
)
```
","(:action move
    :parameters (?var0 - static ?var1 - static)
    :precondition (agent_at ?var1)
    :effect (and (agent_at ?var0) (not (agent_at ?var1)))
)",
minecraft,move,0.6227985620498657,Semi-Hard Negative (Intra-Domain Mismatch),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: This is the agent's way of getting from one spot to another. Think of it as walking, running, or hopping across the Minecraft world. When the agent decides to move, they leave their current spot and end up at a new location. It's a simple action but essential for exploring the world and getting to different resources or areas.

Action name: move


Your answer:
","Parameters:
1. ?var0 - moveable
2. ?var1 - static

Preconditions:
```
(and
    (at ?var0 ?var1)
    (agent_at ?var1)
)
```

Effects:
```
(and
    (inventory ?var0)
    (not (at ?var0 ?var1))
)
```
","(:action move
    :parameters (?var0 - static ?var1 - static)
    :precondition (agent_at ?var1)
    :effect (and (agent_at ?var0) (not (agent_at ?var1)))
)",
minecraft,move,0.48663032054901123,Semi-Hard Negative (Intra-Domain Mismatch),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: This is the agent's way of getting from one spot to another. Think of it as walking, running, or hopping across the Minecraft world. When the agent decides to move, they leave their current spot and end up at a new location. It's a simple action but essential for exploring the world and getting to different resources or areas.

Action name: move


Your answer:

**Explanation:**
Let's think about the action called ""move"" in a Minecraft-like game, where the goal is to get an agent (like a player) from one place to another. The PDDL action schema you're asking about is designed to handle this simple yet crucial task.

In the action schema, we have two parameters: `?var0` and `?var1`, which are both locations. You can think of `?var0` as the new location where the agent wants to go, and `?var1` as the current location where the agent is starting from.

**Preconditions:** The precondition for the ""move"" action is `(agent_at ?var1)`. This just means that before the agent can move, it must be verified that the agent is actually at the starting location (`?var1`). It’s similar to checking if you are really at home before you walk to the park.

**Effects:** After the agent moves, we need to update the agent's location in the game. This is what the effects in the action schema do:
- `(agent_at ?var0)` says that the agent is now at the new location (`?var0`), like saying, ""Now, I’m at the park.""
- `(not (agent_at ?var1))` means that the agent is no longer at the starting location (`?var1`), similar to saying, ""I'm no longer at home.""

This change in the agent's location is crucial for the game to keep track of where the agent is at any moment, which affects what the agent can interact with or what actions they can perform next. The effect ensures the game world is accurately updated following the agent's movement, and no confusion arises about where the agent is located. 

So, in simple terms, the action ""move"" in this game ensures that when the agent moves from one spot to another, the game correctly recognizes this change and updates the world accordingly.","Parameters:
1. ?var0 - moveable
2. ?var1 - agent

Preconditions:
```
(equipped ?var0 ?var1)
```

Effects:
```
(and
    (inventory ?var0)
    (not (equipped ?var0 ?var1))
    (handsfree ?var1)
)
```
","(:action move
    :parameters (?var0 - static ?var1 - static)
    :precondition (agent_at ?var1)
    :effect (and (agent_at ?var0) (not (agent_at ?var1)))
)",
minecraft,move,0.7756763100624084,Semi-Hard Negative (Intra-Domain Mismatch),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: This is the agent's way of getting from one spot to another. Think of it as walking, running, or hopping across the Minecraft world. When the agent decides to move, they leave their current spot and end up at a new location. It's a simple action but essential for exploring the world and getting to different resources or areas.

Action name: move


Your answer:

**Explanation:**
Let's think about the action called ""move"" in a Minecraft-like game, where the goal is to get an agent (like a player) from one place to another. The PDDL action schema you're asking about is designed to handle this simple yet crucial task.

In the action schema, we have two parameters: `?var0` and `?var1`, which are both locations. You can think of `?var0` as the new location where the agent wants to go, and `?var1` as the current location where the agent is starting from.

**Preconditions:** The precondition for the ""move"" action is `(agent_at ?var1)`. This just means that before the agent can move, it must be verified that the agent is actually at the starting location (`?var1`). It’s similar to checking if you are really at home before you walk to the park.

**Effects:** After the agent moves, we need to update the agent's location in the game. This is what the effects in the action schema do:
- `(agent_at ?var0)` says that the agent is now at the new location (`?var0`), like saying, ""Now, I’m at the park.""
- `(not (agent_at ?var1))` means that the agent is no longer at the starting location (`?var1`), similar to saying, ""I'm no longer at home.""

This change in the agent's location is crucial for the game to keep track of where the agent is at any moment, which affects what the agent can interact with or what actions they can perform next. The effect ensures the game world is accurately updated following the agent's movement, and no confusion arises about where the agent is located. 

So, in simple terms, the action ""move"" in this game ensures that when the agent moves from one spot to another, the game correctly recognizes this change and updates the world accordingly.","Parameters:
1. ?var0 - moveable
2. ?var1 - agent
3. ?var2 - moveable

Preconditions:
```
(and
    (hypothetical ?var0)
    (is_log ?var2)
    (equipped ?var2 ?var1)
)
```

Effects:
```
(and
    (inventory ?var0)
    (is_planks ?var0)
    (handsfree ?var1)
    (not (equipped ?var2 ?var1))
    (not (hypothetical ?var0))
    (not (is_log ?var2))
)
```
","(:action move
    :parameters (?var0 - static ?var1 - static)
    :precondition (agent_at ?var1)
    :effect (and (agent_at ?var0) (not (agent_at ?var1)))
)",
minecraft,move,0.7020046710968018,Semi-Hard Negative (Intra-Domain Mismatch),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: This is the agent's way of getting from one spot to another. Think of it as walking, running, or hopping across the Minecraft world. When the agent decides to move, they leave their current spot and end up at a new location. It's a simple action but essential for exploring the world and getting to different resources or areas.

Action name: move


Your answer:

**Explanation:**
Let's think about the action called ""move"" in a Minecraft-like game, where the goal is to get an agent (like a player) from one place to another. The PDDL action schema you're asking about is designed to handle this simple yet crucial task.

In the action schema, we have two parameters: `?var0` and `?var1`, which are both locations. You can think of `?var0` as the new location where the agent wants to go, and `?var1` as the current location where the agent is starting from.

**Preconditions:** The precondition for the ""move"" action is `(agent_at ?var1)`. This just means that before the agent can move, it must be verified that the agent is actually at the starting location (`?var1`). It’s similar to checking if you are really at home before you walk to the park.

**Effects:** After the agent moves, we need to update the agent's location in the game. This is what the effects in the action schema do:
- `(agent_at ?var0)` says that the agent is now at the new location (`?var0`), like saying, ""Now, I’m at the park.""
- `(not (agent_at ?var1))` means that the agent is no longer at the starting location (`?var1`), similar to saying, ""I'm no longer at home.""

This change in the agent's location is crucial for the game to keep track of where the agent is at any moment, which affects what the agent can interact with or what actions they can perform next. The effect ensures the game world is accurately updated following the agent's movement, and no confusion arises about where the agent is located. 

So, in simple terms, the action ""move"" in this game ensures that when the agent moves from one spot to another, the game correctly recognizes this change and updates the world accordingly.","Parameters:
1. ?var0 - moveable
2. ?var1 - agent

Preconditions:
```
(and
    (inventory ?var0)
    (handsfree ?var1)
)
```

Effects:
```
(and
    (equipped ?var0 ?var1)
    (not (handsfree ?var1))
    (not (inventory ?var0))
)
```
","(:action move
    :parameters (?var0 - static ?var1 - static)
    :precondition (agent_at ?var1)
    :effect (and (agent_at ?var0) (not (agent_at ?var1)))
)",
minecraft,move,0.6227985620498657,Semi-Hard Negative (Intra-Domain Mismatch),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: This is the agent's way of getting from one spot to another. Think of it as walking, running, or hopping across the Minecraft world. When the agent decides to move, they leave their current spot and end up at a new location. It's a simple action but essential for exploring the world and getting to different resources or areas.

Action name: move


Your answer:

**Explanation:**
Let's think about the action called ""move"" in a Minecraft-like game, where the goal is to get an agent (like a player) from one place to another. The PDDL action schema you're asking about is designed to handle this simple yet crucial task.

In the action schema, we have two parameters: `?var0` and `?var1`, which are both locations. You can think of `?var0` as the new location where the agent wants to go, and `?var1` as the current location where the agent is starting from.

**Preconditions:** The precondition for the ""move"" action is `(agent_at ?var1)`. This just means that before the agent can move, it must be verified that the agent is actually at the starting location (`?var1`). It’s similar to checking if you are really at home before you walk to the park.

**Effects:** After the agent moves, we need to update the agent's location in the game. This is what the effects in the action schema do:
- `(agent_at ?var0)` says that the agent is now at the new location (`?var0`), like saying, ""Now, I’m at the park.""
- `(not (agent_at ?var1))` means that the agent is no longer at the starting location (`?var1`), similar to saying, ""I'm no longer at home.""

This change in the agent's location is crucial for the game to keep track of where the agent is at any moment, which affects what the agent can interact with or what actions they can perform next. The effect ensures the game world is accurately updated following the agent's movement, and no confusion arises about where the agent is located. 

So, in simple terms, the action ""move"" in this game ensures that when the agent moves from one spot to another, the game correctly recognizes this change and updates the world accordingly.","Parameters:
1. ?var0 - moveable
2. ?var1 - static

Preconditions:
```
(and
    (at ?var0 ?var1)
    (agent_at ?var1)
)
```

Effects:
```
(and
    (inventory ?var0)
    (not (at ?var0 ?var1))
)
```
","(:action move
    :parameters (?var0 - static ?var1 - static)
    :precondition (agent_at ?var1)
    :effect (and (agent_at ?var0) (not (agent_at ?var1)))
)",
minecraft,move,0.5239914655685425,Semi-Hard Negative (Intra-Domain Mismatch),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: This is the agent's way of getting from one spot to another. Think of it as walking, running, or hopping across the Minecraft world. When the agent decides to move, they leave their current spot and end up at a new location. It's a simple action but essential for exploring the world and getting to different resources or areas.

Action name: move


Your answer:
","**Explanation:** Let's imagine you're playing a game similar to Minecraft. In this game, you have an action called ""recall,"" which lets you move an item you are holding directly into your backpack, making your hands empty again. To understand how this action works in the game's programming language (PDDL), let's break down the requirements and results of this action step-by-step.

1. **Precondition (What needs to be true before the action?):** 
   The precondition for the ""recall"" action is `(equipped ?var0 ?var1)`. This simply means that the item (`?var0`) must be currently held (equipped) by the player (`?var1`). Think of it as checking if you really have the axe in your hand before you can put it away.

2. **Effect (What happens after the action is done?):** 
   The effects of this action are several:
   - `(inventory ?var0)`: The item you were holding is now in your inventory. This is like saying, ""Okay, the axe is now in my backpack.""
   - `(not (equipped ?var0 ?var1))`: You are no longer holding the item. This ensures that the game knows the axe is no longer in your hand.
   - `(handsfree ?var1)`: Your hands are now empty. This part is like confirming that your hands are free, ready to grab or use something else.

By setting these preconditions and effects, the game ensures that the action of recalling an item (like teleporting your axe to your backpack) is logical and consistent with the game's rules. You need to be holding the item first to store it away, and after storing it, your hands should indeed be empty, ready for the next task. This keeps the game from getting confused, like trying to put away an axe you aren’t holding or ending up with an axe still in your hand after you've tried to store it.

In summary, the ""recall"" action in the game ensures everything happens in an orderly and expected manner, making your gameplay experience smooth and realistic within the game's world.
Parameters:
1. ?var0 - moveable
2. ?var1 - agent

Preconditions:
```
(equipped ?var0 ?var1)
```

Effects:
```
(and
    (inventory ?var0)
    (not (equipped ?var0 ?var1))
    (handsfree ?var1)
)
```
","(:action move
    :parameters (?var0 - static ?var1 - static)
    :precondition (agent_at ?var1)
    :effect (and (agent_at ?var0) (not (agent_at ?var1)))
)",
minecraft,move,0.6813176870346069,Semi-Hard Negative (Intra-Domain Mismatch),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: This is the agent's way of getting from one spot to another. Think of it as walking, running, or hopping across the Minecraft world. When the agent decides to move, they leave their current spot and end up at a new location. It's a simple action but essential for exploring the world and getting to different resources or areas.

Action name: move


Your answer:
","**Explanation:**
Let's imagine that in the world of Minecraft, the agent (like a player) wants to craft planks from a log. Think of it like a cook needing specific ingredients and tools to make a meal.

In our PDDL model, the action named ""craft_plank"" follows a similar thought process. Here's how the description of the world leads to the rules in our model:

1. **Preconditions**: Before crafting, certain conditions must be met:
   - The agent must have a log that they are actually holding. This is represented by `(equipped ?var2 ?var1)` meaning the log (`?var2`) is equipped by the agent (`?var1`).
   - The log must be a real log, confirmed by `(is_log ?var2)`.
   - We also see `(hypothetical ?var0)`. Here, the planks that will be created are initially just an idea (hypothetical) before they become real.

2. **Effects**: After the action is performed, we expect changes:
   - The hypothetical planks become real, shown by `(inventory ?var0)` which means the planks (`?var0`) are now in the agent's inventory.
   - They are identified as planks with `(is_planks ?var0)`.
   - The agent's hands become free `(handsfree ?var1)` because the log they were holding is now transformed into planks.
   - The log is no longer equipped or identified as a log, shown by `(not (equipped ?var2 ?var1))` and `(not (is_log ?var2))`. This indicates the log has been used up.

This schema carefully makes sure that the agent can only craft planks if they have a log to start with, and it accounts for what happens to the log and the newly created planks. It's much like ensuring you have flour before you bake a cake, and then, once the cake is baked, you no longer have just flour but a delicious cake instead!
Parameters:
1. ?var0 - moveable
2. ?var1 - agent
3. ?var2 - moveable

Preconditions:
```
(and
    (hypothetical ?var0)
    (is_log ?var2)
    (equipped ?var2 ?var1)
)
```

Effects:
```
(and
    (inventory ?var0)
    (is_planks ?var0)
    (handsfree ?var1)
    (not (equipped ?var2 ?var1))
    (not (hypothetical ?var0))
    (not (is_log ?var2))
)
```
","(:action move
    :parameters (?var0 - static ?var1 - static)
    :precondition (agent_at ?var1)
    :effect (and (agent_at ?var0) (not (agent_at ?var1)))
)",
minecraft,move,0.4719609022140503,Semi-Hard Negative (Intra-Domain Mismatch),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: This is the agent's way of getting from one spot to another. Think of it as walking, running, or hopping across the Minecraft world. When the agent decides to move, they leave their current spot and end up at a new location. It's a simple action but essential for exploring the world and getting to different resources or areas.

Action name: move


Your answer:
","**Explanation:**
Let's think of the action called ""equip"" like someone getting ready to use something from their backpack. Imagine you're planning to paint a picture. First, you need to make sure you have a paintbrush in your backpack (this is similar to the ""inventory"" in our scenario). You also need to make sure your hand is free to hold the paintbrush (like the ""handsfree"" condition).

In the ""equip"" action in this Minecraft-like environment, two main things need to happen before the action can take place:
1. **The item is in the inventory** - This is just like making sure the paintbrush is in your backpack. The precondition `(inventory ?var0)` confirms that the item you want to use is actually with you, stored safely in your inventory.
2. **The agent's hands are free** - This means you aren't holding anything else. The precondition `(handsfree ?var1)` checks that your hands (or the agent's hands, in this case) are empty and ready to hold something new.

When you decide to ""equip"" or start using the item, several things change:
- **The item is now equipped** - This means the item is in your hand and ready to use, similar to how you would hold a paintbrush when you're ready to paint. This is shown by the effect `(equipped ?var0 ?var1)`.
- **Your hand is no longer free** - Just like when you pick up the paintbrush, your hand isn't empty anymore. This is why the effect includes `(not (handsfree ?var1))`.
- **The item is no longer just in the inventory** - Since you're now holding the item, it's not just sitting in your backpack. This change is represented by `(not (inventory ?var0))`.

These changes ensure that the action of equipping something is logical and makes sense in the environment, just like how you'd logically take a paintbrush out of your backpack to use it.
Parameters:
1. ?var0 - moveable
2. ?var1 - agent

Preconditions:
```
(and
    (inventory ?var0)
    (handsfree ?var1)
)
```

Effects:
```
(and
    (equipped ?var0 ?var1)
    (not (handsfree ?var1))
    (not (inventory ?var0))
)
```
","(:action move
    :parameters (?var0 - static ?var1 - static)
    :precondition (agent_at ?var1)
    :effect (and (agent_at ?var0) (not (agent_at ?var1)))
)",
minecraft,move,0.5246511101722717,Semi-Hard Negative (Intra-Domain Mismatch),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: This is the agent's way of getting from one spot to another. Think of it as walking, running, or hopping across the Minecraft world. When the agent decides to move, they leave their current spot and end up at a new location. It's a simple action but essential for exploring the world and getting to different resources or areas.

Action name: move


Your answer:
","**Explanation:**

Let's imagine you're in a simplified game environment similar to Minecraft, where your goal is to gather resources like fruits or tools. In this game, to collect an item, you'd first need to be at the same location as the item. This ensures you can actually reach it to pick it up.

So, in the PDDL (which is a planning language used to describe tasks and environments in a structured way), the `pick` action is defined to help you collect these items. Here's why the action is set up this way:

1. **Preconditions (the must-haves before acting)**:
   - `(at ?var0 ?var1)`: This means the item (`?var0`) must be at your current location (`?var1`). Think of it as seeing a piece of fruit right at your feet. You need to be where the fruit is to pick it up.
   - `(agent_at ?var1)`: This specifies that you (the agent) must also be at that specific location (`?var1`). Just like in real life, you can't pick up something if you're not right there with it.

2. **Effects (what happens after the action)**:
   - `(inventory ?var0)`: Once you pick up the item, it moves into your inventory. This is like putting the fruit into your backpack.
   - `(not (at ?var0 ?var1))`: This indicates that the item is no longer lying on the ground at that location. It’s like saying, now that the fruit is in your backpack, it's not on the ground anymore.

This setup ensures that you can only pick up items that are within your immediate reach and that collecting an item changes its status from being 'on the ground' to being 'in your inventory'. It's a simple but effective way to manage resources in the game, making sure everything happens in a logical and realistic manner.
Parameters:
1. ?var0 - moveable
2. ?var1 - static

Preconditions:
```
(and
    (at ?var0 ?var1)
    (agent_at ?var1)
)
```

Effects:
```
(and
    (inventory ?var0)
    (not (at ?var0 ?var1))
)
```
","(:action move
    :parameters (?var0 - static ?var1 - static)
    :precondition (agent_at ?var1)
    :effect (and (agent_at ?var0) (not (agent_at ?var1)))
)",
minecraft,move,0.3427034914493561,Hard Negative (Manipulated Action),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: This is the agent's way of getting from one spot to another. Think of it as walking, running, or hopping across the Minecraft world. When the agent decides to move, they leave their current spot and end up at a new location. It's a simple action but essential for exploring the world and getting to different resources or areas.

Action name: move


Your answer:
","Parameters:
1. ?var0 - static
2. ?var1 - static

Preconditions:
```
(agent_at ?var1)
```

Effects:
```
(and
    (not (agent_at ?var0))
)
```
","(:action move
    :parameters (?var0 - static ?var1 - static)
    :precondition (agent_at ?var1)
    :effect (and (agent_at ?var0) (not (agent_at ?var1)))
)","remove (not (agent_at ?var1)) from effects
negate (agent_at ?var0) in effects
"
minecraft,move,0.3825058937072754,Hard Negative (Manipulated Action),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: This is the agent's way of getting from one spot to another. Think of it as walking, running, or hopping across the Minecraft world. When the agent decides to move, they leave their current spot and end up at a new location. It's a simple action but essential for exploring the world and getting to different resources or areas.

Action name: move


Your answer:
","Parameters:
1. ?var0 - static
2. ?var1 - static

Preconditions:
```
(agent_at ?var1)
```

Effects:
```
(and
    (agent_at ?var1)
    (agent_at ?var0)
)
```
","(:action move
    :parameters (?var0 - static ?var1 - static)
    :precondition (agent_at ?var1)
    :effect (and (agent_at ?var0) (not (agent_at ?var1)))
)","negate (not (agent_at ?var1)) in effects
"
minecraft,move,0.3427034914493561,Hard Negative (Manipulated Action),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: This is the agent's way of getting from one spot to another. Think of it as walking, running, or hopping across the Minecraft world. When the agent decides to move, they leave their current spot and end up at a new location. It's a simple action but essential for exploring the world and getting to different resources or areas.

Action name: move


Your answer:
","Parameters:
1. ?var0 - static
2. ?var1 - static

Preconditions:
```
(agent_at ?var1)
```

Effects:
```
(and
    (not (agent_at ?var0))
)
```
","(:action move
    :parameters (?var0 - static ?var1 - static)
    :precondition (agent_at ?var1)
    :effect (and (agent_at ?var0) (not (agent_at ?var1)))
)","remove (not (agent_at ?var1)) from effects
negate (agent_at ?var0) in effects
"
minecraft,move,0.3985178470611572,Hard Negative (Manipulated Action),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: This is the agent's way of getting from one spot to another. Think of it as walking, running, or hopping across the Minecraft world. When the agent decides to move, they leave their current spot and end up at a new location. It's a simple action but essential for exploring the world and getting to different resources or areas.

Action name: move


Your answer:
","Parameters:
1. ?var0 - static
2. ?var1 - static

Preconditions:
```
(agent_at ?var0)
```

Effects:
```
(and
    (agent_at ?var1)
    (not (agent_at ?var1))
)
```
","(:action move
    :parameters (?var0 - static ?var1 - static)
    :precondition (agent_at ?var1)
    :effect (and (agent_at ?var0) (not (agent_at ?var1)))
)","swap (agent_at ?var1) with (agent_at ?var0)
"
minecraft,move,0.3430973291397095,Hard Negative (Manipulated Action),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: This is the agent's way of getting from one spot to another. Think of it as walking, running, or hopping across the Minecraft world. When the agent decides to move, they leave their current spot and end up at a new location. It's a simple action but essential for exploring the world and getting to different resources or areas.

Action name: move


Your answer:
","Parameters:
1. ?var0 - static
2. ?var1 - static

Preconditions:
```
(agent_at ?var1)
```

Effects:
```
(and
    (not (agent_at ?var1))
)
```
","(:action move
    :parameters (?var0 - static ?var1 - static)
    :precondition (agent_at ?var1)
    :effect (and (agent_at ?var0) (not (agent_at ?var1)))
)","remove (agent_at ?var0) from effects
"
minecraft,move,0.23816533386707306,Hard Negative (Manipulated Action),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: This is the agent's way of getting from one spot to another. Think of it as walking, running, or hopping across the Minecraft world. When the agent decides to move, they leave their current spot and end up at a new location. It's a simple action but essential for exploring the world and getting to different resources or areas.

Action name: move


Your answer:
","Parameters:
1. ?var0 - static
2. ?var1 - static

Preconditions:
```
(not (agent_at ?var1))
```

Effects:
```
(and
    (agent_at ?var0)
    (not (agent_at ?var1))
)
```
","(:action move
    :parameters (?var0 - static ?var1 - static)
    :precondition (agent_at ?var1)
    :effect (and (agent_at ?var0) (not (agent_at ?var1)))
)","negate (agent_at ?var1) in preconditions
"
minecraft,move,0.314635306596756,Hard Negative (Manipulated Action),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: This is the agent's way of getting from one spot to another. Think of it as walking, running, or hopping across the Minecraft world. When the agent decides to move, they leave their current spot and end up at a new location. It's a simple action but essential for exploring the world and getting to different resources or areas.

Action name: move


Your answer:
","Parameters:
1. ?var0 - static
2. ?var1 - static

Preconditions:
```
(agent_at ?var0)
```

Effects:
```
(and
    (agent_at ?var1)
)
```
","(:action move
    :parameters (?var0 - static ?var1 - static)
    :precondition (agent_at ?var1)
    :effect (and (agent_at ?var0) (not (agent_at ?var1)))
)","remove (not (agent_at ?var1)) from effects
swap (agent_at ?var1) with (agent_at ?var0)
"
minecraft,move,0.21605972945690155,Hard Negative (Manipulated Action),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: This is the agent's way of getting from one spot to another. Think of it as walking, running, or hopping across the Minecraft world. When the agent decides to move, they leave their current spot and end up at a new location. It's a simple action but essential for exploring the world and getting to different resources or areas.

Action name: move


Your answer:
","Parameters:
1. ?var0 - static
2. ?var1 - static

Preconditions:
```
(not (agent_at ?var1))
```

Effects:
```
(and
    (agent_at ?var0)
)
```
","(:action move
    :parameters (?var0 - static ?var1 - static)
    :precondition (agent_at ?var1)
    :effect (and (agent_at ?var0) (not (agent_at ?var1)))
)","remove (not (agent_at ?var1)) from effects
negate (agent_at ?var1) in preconditions
"
minecraft,move,0.26998740434646606,Hard Negative (Manipulated Action),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: This is the agent's way of getting from one spot to another. Think of it as walking, running, or hopping across the Minecraft world. When the agent decides to move, they leave their current spot and end up at a new location. It's a simple action but essential for exploring the world and getting to different resources or areas.

Action name: move


Your answer:
","Parameters:
1. ?var0 - static
2. ?var1 - static

Preconditions:
```
(not (agent_at ?var1))
```

Effects:
```
(and
    (agent_at ?var1)
    (agent_at ?var0)
)
```
","(:action move
    :parameters (?var0 - static ?var1 - static)
    :precondition (agent_at ?var1)
    :effect (and (agent_at ?var0) (not (agent_at ?var1)))
)","swap (agent_at ?var1) with (not (agent_at ?var1))
"
minecraft,move,0.3430973291397095,Hard Negative (Manipulated Action),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: This is the agent's way of getting from one spot to another. Think of it as walking, running, or hopping across the Minecraft world. When the agent decides to move, they leave their current spot and end up at a new location. It's a simple action but essential for exploring the world and getting to different resources or areas.

Action name: move


Your answer:
","Parameters:
1. ?var0 - static
2. ?var1 - static

Preconditions:
```
(agent_at ?var1)
```

Effects:
```
(and
    (not (agent_at ?var1))
)
```
","(:action move
    :parameters (?var0 - static ?var1 - static)
    :precondition (agent_at ?var1)
    :effect (and (agent_at ?var0) (not (agent_at ?var1)))
)","remove (agent_at ?var0) from effects
"
minecraft,move,0.24387431144714355,Hard Negative (Manipulated Action),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: This is the agent's way of getting from one spot to another. Think of it as walking, running, or hopping across the Minecraft world. When the agent decides to move, they leave their current spot and end up at a new location. It's a simple action but essential for exploring the world and getting to different resources or areas.

Action name: move


Your answer:

**Explanation:**
Let's think about the action called ""move"" in a Minecraft-like game, where the goal is to get an agent (like a player) from one place to another. The PDDL action schema you're asking about is designed to handle this simple yet crucial task.

In the action schema, we have two parameters: `?var0` and `?var1`, which are both locations. You can think of `?var0` as the new location where the agent wants to go, and `?var1` as the current location where the agent is starting from.

**Preconditions:** The precondition for the ""move"" action is `(agent_at ?var1)`. This just means that before the agent can move, it must be verified that the agent is actually at the starting location (`?var1`). It’s similar to checking if you are really at home before you walk to the park.

**Effects:** After the agent moves, we need to update the agent's location in the game. This is what the effects in the action schema do:
- `(agent_at ?var0)` says that the agent is now at the new location (`?var0`), like saying, ""Now, I’m at the park.""
- `(not (agent_at ?var1))` means that the agent is no longer at the starting location (`?var1`), similar to saying, ""I'm no longer at home.""

This change in the agent's location is crucial for the game to keep track of where the agent is at any moment, which affects what the agent can interact with or what actions they can perform next. The effect ensures the game world is accurately updated following the agent's movement, and no confusion arises about where the agent is located. 

So, in simple terms, the action ""move"" in this game ensures that when the agent moves from one spot to another, the game correctly recognizes this change and updates the world accordingly.","Parameters:
1. ?var0 - static
2. ?var1 - static

Preconditions:
```
(not (agent_at ?var1))
```

Effects:
```
(and
    (not (agent_at ?var0))
    (agent_at ?var1)
)
```
","(:action move
    :parameters (?var0 - static ?var1 - static)
    :precondition (agent_at ?var1)
    :effect (and (agent_at ?var0) (not (agent_at ?var1)))
)","negate (agent_at ?var0) in effects
swap (agent_at ?var1) with (not (agent_at ?var1))
"
minecraft,move,0.26998740434646606,Hard Negative (Manipulated Action),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: This is the agent's way of getting from one spot to another. Think of it as walking, running, or hopping across the Minecraft world. When the agent decides to move, they leave their current spot and end up at a new location. It's a simple action but essential for exploring the world and getting to different resources or areas.

Action name: move


Your answer:

**Explanation:**
Let's think about the action called ""move"" in a Minecraft-like game, where the goal is to get an agent (like a player) from one place to another. The PDDL action schema you're asking about is designed to handle this simple yet crucial task.

In the action schema, we have two parameters: `?var0` and `?var1`, which are both locations. You can think of `?var0` as the new location where the agent wants to go, and `?var1` as the current location where the agent is starting from.

**Preconditions:** The precondition for the ""move"" action is `(agent_at ?var1)`. This just means that before the agent can move, it must be verified that the agent is actually at the starting location (`?var1`). It’s similar to checking if you are really at home before you walk to the park.

**Effects:** After the agent moves, we need to update the agent's location in the game. This is what the effects in the action schema do:
- `(agent_at ?var0)` says that the agent is now at the new location (`?var0`), like saying, ""Now, I’m at the park.""
- `(not (agent_at ?var1))` means that the agent is no longer at the starting location (`?var1`), similar to saying, ""I'm no longer at home.""

This change in the agent's location is crucial for the game to keep track of where the agent is at any moment, which affects what the agent can interact with or what actions they can perform next. The effect ensures the game world is accurately updated following the agent's movement, and no confusion arises about where the agent is located. 

So, in simple terms, the action ""move"" in this game ensures that when the agent moves from one spot to another, the game correctly recognizes this change and updates the world accordingly.","Parameters:
1. ?var0 - static
2. ?var1 - static

Preconditions:
```
(not (agent_at ?var1))
```

Effects:
```
(and
    (agent_at ?var1)
    (agent_at ?var0)
)
```
","(:action move
    :parameters (?var0 - static ?var1 - static)
    :precondition (agent_at ?var1)
    :effect (and (agent_at ?var0) (not (agent_at ?var1)))
)","negate (agent_at ?var1) in preconditions
negate (not (agent_at ?var1)) in effects
"
minecraft,move,0.314635306596756,Hard Negative (Manipulated Action),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: This is the agent's way of getting from one spot to another. Think of it as walking, running, or hopping across the Minecraft world. When the agent decides to move, they leave their current spot and end up at a new location. It's a simple action but essential for exploring the world and getting to different resources or areas.

Action name: move


Your answer:

**Explanation:**
Let's think about the action called ""move"" in a Minecraft-like game, where the goal is to get an agent (like a player) from one place to another. The PDDL action schema you're asking about is designed to handle this simple yet crucial task.

In the action schema, we have two parameters: `?var0` and `?var1`, which are both locations. You can think of `?var0` as the new location where the agent wants to go, and `?var1` as the current location where the agent is starting from.

**Preconditions:** The precondition for the ""move"" action is `(agent_at ?var1)`. This just means that before the agent can move, it must be verified that the agent is actually at the starting location (`?var1`). It’s similar to checking if you are really at home before you walk to the park.

**Effects:** After the agent moves, we need to update the agent's location in the game. This is what the effects in the action schema do:
- `(agent_at ?var0)` says that the agent is now at the new location (`?var0`), like saying, ""Now, I’m at the park.""
- `(not (agent_at ?var1))` means that the agent is no longer at the starting location (`?var1`), similar to saying, ""I'm no longer at home.""

This change in the agent's location is crucial for the game to keep track of where the agent is at any moment, which affects what the agent can interact with or what actions they can perform next. The effect ensures the game world is accurately updated following the agent's movement, and no confusion arises about where the agent is located. 

So, in simple terms, the action ""move"" in this game ensures that when the agent moves from one spot to another, the game correctly recognizes this change and updates the world accordingly.","Parameters:
1. ?var0 - static
2. ?var1 - static

Preconditions:
```
(agent_at ?var0)
```

Effects:
```
(and
    (agent_at ?var1)
)
```
","(:action move
    :parameters (?var0 - static ?var1 - static)
    :precondition (agent_at ?var1)
    :effect (and (agent_at ?var0) (not (agent_at ?var1)))
)","remove (not (agent_at ?var1)) from effects
swap (agent_at ?var1) with (agent_at ?var0)
"
minecraft,move,0.23816533386707306,Hard Negative (Manipulated Action),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: This is the agent's way of getting from one spot to another. Think of it as walking, running, or hopping across the Minecraft world. When the agent decides to move, they leave their current spot and end up at a new location. It's a simple action but essential for exploring the world and getting to different resources or areas.

Action name: move


Your answer:

**Explanation:**
Let's think about the action called ""move"" in a Minecraft-like game, where the goal is to get an agent (like a player) from one place to another. The PDDL action schema you're asking about is designed to handle this simple yet crucial task.

In the action schema, we have two parameters: `?var0` and `?var1`, which are both locations. You can think of `?var0` as the new location where the agent wants to go, and `?var1` as the current location where the agent is starting from.

**Preconditions:** The precondition for the ""move"" action is `(agent_at ?var1)`. This just means that before the agent can move, it must be verified that the agent is actually at the starting location (`?var1`). It’s similar to checking if you are really at home before you walk to the park.

**Effects:** After the agent moves, we need to update the agent's location in the game. This is what the effects in the action schema do:
- `(agent_at ?var0)` says that the agent is now at the new location (`?var0`), like saying, ""Now, I’m at the park.""
- `(not (agent_at ?var1))` means that the agent is no longer at the starting location (`?var1`), similar to saying, ""I'm no longer at home.""

This change in the agent's location is crucial for the game to keep track of where the agent is at any moment, which affects what the agent can interact with or what actions they can perform next. The effect ensures the game world is accurately updated following the agent's movement, and no confusion arises about where the agent is located. 

So, in simple terms, the action ""move"" in this game ensures that when the agent moves from one spot to another, the game correctly recognizes this change and updates the world accordingly.","Parameters:
1. ?var0 - static
2. ?var1 - static

Preconditions:
```
(not (agent_at ?var1))
```

Effects:
```
(and
    (agent_at ?var0)
    (not (agent_at ?var1))
)
```
","(:action move
    :parameters (?var0 - static ?var1 - static)
    :precondition (agent_at ?var1)
    :effect (and (agent_at ?var0) (not (agent_at ?var1)))
)","negate (agent_at ?var1) in preconditions
"
minecraft,move,0.31323736906051636,Hard Negative (Manipulated Action),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: This is the agent's way of getting from one spot to another. Think of it as walking, running, or hopping across the Minecraft world. When the agent decides to move, they leave their current spot and end up at a new location. It's a simple action but essential for exploring the world and getting to different resources or areas.

Action name: move


Your answer:

**Explanation:**
Let's think about the action called ""move"" in a Minecraft-like game, where the goal is to get an agent (like a player) from one place to another. The PDDL action schema you're asking about is designed to handle this simple yet crucial task.

In the action schema, we have two parameters: `?var0` and `?var1`, which are both locations. You can think of `?var0` as the new location where the agent wants to go, and `?var1` as the current location where the agent is starting from.

**Preconditions:** The precondition for the ""move"" action is `(agent_at ?var1)`. This just means that before the agent can move, it must be verified that the agent is actually at the starting location (`?var1`). It’s similar to checking if you are really at home before you walk to the park.

**Effects:** After the agent moves, we need to update the agent's location in the game. This is what the effects in the action schema do:
- `(agent_at ?var0)` says that the agent is now at the new location (`?var0`), like saying, ""Now, I’m at the park.""
- `(not (agent_at ?var1))` means that the agent is no longer at the starting location (`?var1`), similar to saying, ""I'm no longer at home.""

This change in the agent's location is crucial for the game to keep track of where the agent is at any moment, which affects what the agent can interact with or what actions they can perform next. The effect ensures the game world is accurately updated following the agent's movement, and no confusion arises about where the agent is located. 

So, in simple terms, the action ""move"" in this game ensures that when the agent moves from one spot to another, the game correctly recognizes this change and updates the world accordingly.","Parameters:
1. ?var0 - static
2. ?var1 - static

Preconditions:
```
(agent_at ?var1)
```

Effects:
```
(and
    (agent_at ?var0)
)
```
","(:action move
    :parameters (?var0 - static ?var1 - static)
    :precondition (agent_at ?var1)
    :effect (and (agent_at ?var0) (not (agent_at ?var1)))
)","remove (not (agent_at ?var1)) from effects
"
minecraft,move,0.2410067766904831,Hard Negative (Manipulated Action),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: This is the agent's way of getting from one spot to another. Think of it as walking, running, or hopping across the Minecraft world. When the agent decides to move, they leave their current spot and end up at a new location. It's a simple action but essential for exploring the world and getting to different resources or areas.

Action name: move


Your answer:

**Explanation:**
Let's think about the action called ""move"" in a Minecraft-like game, where the goal is to get an agent (like a player) from one place to another. The PDDL action schema you're asking about is designed to handle this simple yet crucial task.

In the action schema, we have two parameters: `?var0` and `?var1`, which are both locations. You can think of `?var0` as the new location where the agent wants to go, and `?var1` as the current location where the agent is starting from.

**Preconditions:** The precondition for the ""move"" action is `(agent_at ?var1)`. This just means that before the agent can move, it must be verified that the agent is actually at the starting location (`?var1`). It’s similar to checking if you are really at home before you walk to the park.

**Effects:** After the agent moves, we need to update the agent's location in the game. This is what the effects in the action schema do:
- `(agent_at ?var0)` says that the agent is now at the new location (`?var0`), like saying, ""Now, I’m at the park.""
- `(not (agent_at ?var1))` means that the agent is no longer at the starting location (`?var1`), similar to saying, ""I'm no longer at home.""

This change in the agent's location is crucial for the game to keep track of where the agent is at any moment, which affects what the agent can interact with or what actions they can perform next. The effect ensures the game world is accurately updated following the agent's movement, and no confusion arises about where the agent is located. 

So, in simple terms, the action ""move"" in this game ensures that when the agent moves from one spot to another, the game correctly recognizes this change and updates the world accordingly.","Parameters:
1. ?var0 - static
2. ?var1 - static

Preconditions:
```
(not (agent_at ?var1))
```

Effects:
```
(and
    (agent_at ?var1)
    (not (agent_at ?var0))
)
```
","(:action move
    :parameters (?var0 - static ?var1 - static)
    :precondition (agent_at ?var1)
    :effect (and (agent_at ?var0) (not (agent_at ?var1)))
)","swap (agent_at ?var1) with (not (agent_at ?var1))
negate (agent_at ?var0) in effects
"
minecraft,move,0.22265173494815826,Hard Negative (Manipulated Action),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: This is the agent's way of getting from one spot to another. Think of it as walking, running, or hopping across the Minecraft world. When the agent decides to move, they leave their current spot and end up at a new location. It's a simple action but essential for exploring the world and getting to different resources or areas.

Action name: move


Your answer:

**Explanation:**
Let's think about the action called ""move"" in a Minecraft-like game, where the goal is to get an agent (like a player) from one place to another. The PDDL action schema you're asking about is designed to handle this simple yet crucial task.

In the action schema, we have two parameters: `?var0` and `?var1`, which are both locations. You can think of `?var0` as the new location where the agent wants to go, and `?var1` as the current location where the agent is starting from.

**Preconditions:** The precondition for the ""move"" action is `(agent_at ?var1)`. This just means that before the agent can move, it must be verified that the agent is actually at the starting location (`?var1`). It’s similar to checking if you are really at home before you walk to the park.

**Effects:** After the agent moves, we need to update the agent's location in the game. This is what the effects in the action schema do:
- `(agent_at ?var0)` says that the agent is now at the new location (`?var0`), like saying, ""Now, I’m at the park.""
- `(not (agent_at ?var1))` means that the agent is no longer at the starting location (`?var1`), similar to saying, ""I'm no longer at home.""

This change in the agent's location is crucial for the game to keep track of where the agent is at any moment, which affects what the agent can interact with or what actions they can perform next. The effect ensures the game world is accurately updated following the agent's movement, and no confusion arises about where the agent is located. 

So, in simple terms, the action ""move"" in this game ensures that when the agent moves from one spot to another, the game correctly recognizes this change and updates the world accordingly.","Parameters:
1. ?var0 - static
2. ?var1 - static

Preconditions:
```
(not (agent_at ?var1))
```

Effects:
```
(and
    (not (agent_at ?var0))
    (not (agent_at ?var1))
)
```
","(:action move
    :parameters (?var0 - static ?var1 - static)
    :precondition (agent_at ?var1)
    :effect (and (agent_at ?var0) (not (agent_at ?var1)))
)","negate (agent_at ?var0) in effects
negate (agent_at ?var1) in preconditions
"
minecraft,move,0.23816533386707306,Hard Negative (Manipulated Action),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: This is the agent's way of getting from one spot to another. Think of it as walking, running, or hopping across the Minecraft world. When the agent decides to move, they leave their current spot and end up at a new location. It's a simple action but essential for exploring the world and getting to different resources or areas.

Action name: move


Your answer:

**Explanation:**
Let's think about the action called ""move"" in a Minecraft-like game, where the goal is to get an agent (like a player) from one place to another. The PDDL action schema you're asking about is designed to handle this simple yet crucial task.

In the action schema, we have two parameters: `?var0` and `?var1`, which are both locations. You can think of `?var0` as the new location where the agent wants to go, and `?var1` as the current location where the agent is starting from.

**Preconditions:** The precondition for the ""move"" action is `(agent_at ?var1)`. This just means that before the agent can move, it must be verified that the agent is actually at the starting location (`?var1`). It’s similar to checking if you are really at home before you walk to the park.

**Effects:** After the agent moves, we need to update the agent's location in the game. This is what the effects in the action schema do:
- `(agent_at ?var0)` says that the agent is now at the new location (`?var0`), like saying, ""Now, I’m at the park.""
- `(not (agent_at ?var1))` means that the agent is no longer at the starting location (`?var1`), similar to saying, ""I'm no longer at home.""

This change in the agent's location is crucial for the game to keep track of where the agent is at any moment, which affects what the agent can interact with or what actions they can perform next. The effect ensures the game world is accurately updated following the agent's movement, and no confusion arises about where the agent is located. 

So, in simple terms, the action ""move"" in this game ensures that when the agent moves from one spot to another, the game correctly recognizes this change and updates the world accordingly.","Parameters:
1. ?var0 - static
2. ?var1 - static

Preconditions:
```
(not (agent_at ?var1))
```

Effects:
```
(and
    (agent_at ?var0)
    (not (agent_at ?var1))
)
```
","(:action move
    :parameters (?var0 - static ?var1 - static)
    :precondition (agent_at ?var1)
    :effect (and (agent_at ?var0) (not (agent_at ?var1)))
)","negate (agent_at ?var1) in preconditions
"
minecraft,move,0.23816533386707306,Hard Negative (Manipulated Action),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: This is the agent's way of getting from one spot to another. Think of it as walking, running, or hopping across the Minecraft world. When the agent decides to move, they leave their current spot and end up at a new location. It's a simple action but essential for exploring the world and getting to different resources or areas.

Action name: move


Your answer:

**Explanation:**
Let's think about the action called ""move"" in a Minecraft-like game, where the goal is to get an agent (like a player) from one place to another. The PDDL action schema you're asking about is designed to handle this simple yet crucial task.

In the action schema, we have two parameters: `?var0` and `?var1`, which are both locations. You can think of `?var0` as the new location where the agent wants to go, and `?var1` as the current location where the agent is starting from.

**Preconditions:** The precondition for the ""move"" action is `(agent_at ?var1)`. This just means that before the agent can move, it must be verified that the agent is actually at the starting location (`?var1`). It’s similar to checking if you are really at home before you walk to the park.

**Effects:** After the agent moves, we need to update the agent's location in the game. This is what the effects in the action schema do:
- `(agent_at ?var0)` says that the agent is now at the new location (`?var0`), like saying, ""Now, I’m at the park.""
- `(not (agent_at ?var1))` means that the agent is no longer at the starting location (`?var1`), similar to saying, ""I'm no longer at home.""

This change in the agent's location is crucial for the game to keep track of where the agent is at any moment, which affects what the agent can interact with or what actions they can perform next. The effect ensures the game world is accurately updated following the agent's movement, and no confusion arises about where the agent is located. 

So, in simple terms, the action ""move"" in this game ensures that when the agent moves from one spot to another, the game correctly recognizes this change and updates the world accordingly.","Parameters:
1. ?var0 - static
2. ?var1 - static

Preconditions:
```
(not (agent_at ?var1))
```

Effects:
```
(and
    (agent_at ?var0)
    (not (agent_at ?var1))
)
```
","(:action move
    :parameters (?var0 - static ?var1 - static)
    :precondition (agent_at ?var1)
    :effect (and (agent_at ?var0) (not (agent_at ?var1)))
)","negate (agent_at ?var1) in preconditions
"
minecraft,move,0.31323736906051636,Hard Negative (Manipulated Action),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: This is the agent's way of getting from one spot to another. Think of it as walking, running, or hopping across the Minecraft world. When the agent decides to move, they leave their current spot and end up at a new location. It's a simple action but essential for exploring the world and getting to different resources or areas.

Action name: move


Your answer:

**Explanation:**
Let's think about the action called ""move"" in a Minecraft-like game, where the goal is to get an agent (like a player) from one place to another. The PDDL action schema you're asking about is designed to handle this simple yet crucial task.

In the action schema, we have two parameters: `?var0` and `?var1`, which are both locations. You can think of `?var0` as the new location where the agent wants to go, and `?var1` as the current location where the agent is starting from.

**Preconditions:** The precondition for the ""move"" action is `(agent_at ?var1)`. This just means that before the agent can move, it must be verified that the agent is actually at the starting location (`?var1`). It’s similar to checking if you are really at home before you walk to the park.

**Effects:** After the agent moves, we need to update the agent's location in the game. This is what the effects in the action schema do:
- `(agent_at ?var0)` says that the agent is now at the new location (`?var0`), like saying, ""Now, I’m at the park.""
- `(not (agent_at ?var1))` means that the agent is no longer at the starting location (`?var1`), similar to saying, ""I'm no longer at home.""

This change in the agent's location is crucial for the game to keep track of where the agent is at any moment, which affects what the agent can interact with or what actions they can perform next. The effect ensures the game world is accurately updated following the agent's movement, and no confusion arises about where the agent is located. 

So, in simple terms, the action ""move"" in this game ensures that when the agent moves from one spot to another, the game correctly recognizes this change and updates the world accordingly.","Parameters:
1. ?var0 - static
2. ?var1 - static

Preconditions:
```
(agent_at ?var1)
```

Effects:
```
(and
    (agent_at ?var0)
)
```
","(:action move
    :parameters (?var0 - static ?var1 - static)
    :precondition (agent_at ?var1)
    :effect (and (agent_at ?var0) (not (agent_at ?var1)))
)","remove (not (agent_at ?var1)) from effects
"
minecraft,move,0.5768035650253296,Hard Negative (Manipulated Action),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: This is the agent's way of getting from one spot to another. Think of it as walking, running, or hopping across the Minecraft world. When the agent decides to move, they leave their current spot and end up at a new location. It's a simple action but essential for exploring the world and getting to different resources or areas.

Action name: move


Your answer:
","**Explanation:**
Let's think about the action called ""move"" in a Minecraft-like game, where the goal is to get an agent (like a player) from one place to another. The PDDL action schema you're asking about is designed to handle this simple yet crucial task.

In the action schema, we have two parameters: `?var0` and `?var1`, which are both locations. You can think of `?var0` as the new location where the agent wants to go, and `?var1` as the current location where the agent is starting from.

**Preconditions:** The precondition for the ""move"" action is `(agent_at ?var1)`. This just means that before the agent can move, it must be verified that the agent is actually at the starting location (`?var1`). It’s similar to checking if you are really at home before you walk to the park.

**Effects:** After the agent moves, we need to update the agent's location in the game. This is what the effects in the action schema do:
- `(agent_at ?var0)` says that the agent is now at the new location (`?var0`), like saying, ""Now, I’m at the park.""
- `(not (agent_at ?var1))` means that the agent is no longer at the starting location (`?var1`), similar to saying, ""I'm no longer at home.""

This change in the agent's location is crucial for the game to keep track of where the agent is at any moment, which affects what the agent can interact with or what actions they can perform next. The effect ensures the game world is accurately updated following the agent's movement, and no confusion arises about where the agent is located. 

So, in simple terms, the action ""move"" in this game ensures that when the agent moves from one spot to another, the game correctly recognizes this change and updates the world accordingly.
Parameters:
1. ?var0 - static
2. ?var1 - static

Preconditions:
```
(agent_at ?var1)
```

Effects:
```
(and
    (agent_at ?var0)
)
```
","(:action move
    :parameters (?var0 - static ?var1 - static)
    :precondition (agent_at ?var1)
    :effect (and (agent_at ?var0) (not (agent_at ?var1)))
)","remove (not (agent_at ?var1)) from effects
"
minecraft,move,0.5768035650253296,Hard Negative (Manipulated Action),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: This is the agent's way of getting from one spot to another. Think of it as walking, running, or hopping across the Minecraft world. When the agent decides to move, they leave their current spot and end up at a new location. It's a simple action but essential for exploring the world and getting to different resources or areas.

Action name: move


Your answer:
","**Explanation:**
Let's think about the action called ""move"" in a Minecraft-like game, where the goal is to get an agent (like a player) from one place to another. The PDDL action schema you're asking about is designed to handle this simple yet crucial task.

In the action schema, we have two parameters: `?var0` and `?var1`, which are both locations. You can think of `?var0` as the new location where the agent wants to go, and `?var1` as the current location where the agent is starting from.

**Preconditions:** The precondition for the ""move"" action is `(agent_at ?var1)`. This just means that before the agent can move, it must be verified that the agent is actually at the starting location (`?var1`). It’s similar to checking if you are really at home before you walk to the park.

**Effects:** After the agent moves, we need to update the agent's location in the game. This is what the effects in the action schema do:
- `(agent_at ?var0)` says that the agent is now at the new location (`?var0`), like saying, ""Now, I’m at the park.""
- `(not (agent_at ?var1))` means that the agent is no longer at the starting location (`?var1`), similar to saying, ""I'm no longer at home.""

This change in the agent's location is crucial for the game to keep track of where the agent is at any moment, which affects what the agent can interact with or what actions they can perform next. The effect ensures the game world is accurately updated following the agent's movement, and no confusion arises about where the agent is located. 

So, in simple terms, the action ""move"" in this game ensures that when the agent moves from one spot to another, the game correctly recognizes this change and updates the world accordingly.
Parameters:
1. ?var0 - static
2. ?var1 - static

Preconditions:
```
(agent_at ?var1)
```

Effects:
```
(and
    (not (agent_at ?var1))
)
```
","(:action move
    :parameters (?var0 - static ?var1 - static)
    :precondition (agent_at ?var1)
    :effect (and (agent_at ?var0) (not (agent_at ?var1)))
)","remove (agent_at ?var0) from effects
"
minecraft,move,0.5768035650253296,Hard Negative (Manipulated Action),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: This is the agent's way of getting from one spot to another. Think of it as walking, running, or hopping across the Minecraft world. When the agent decides to move, they leave their current spot and end up at a new location. It's a simple action but essential for exploring the world and getting to different resources or areas.

Action name: move


Your answer:
","**Explanation:**
Let's think about the action called ""move"" in a Minecraft-like game, where the goal is to get an agent (like a player) from one place to another. The PDDL action schema you're asking about is designed to handle this simple yet crucial task.

In the action schema, we have two parameters: `?var0` and `?var1`, which are both locations. You can think of `?var0` as the new location where the agent wants to go, and `?var1` as the current location where the agent is starting from.

**Preconditions:** The precondition for the ""move"" action is `(agent_at ?var1)`. This just means that before the agent can move, it must be verified that the agent is actually at the starting location (`?var1`). It’s similar to checking if you are really at home before you walk to the park.

**Effects:** After the agent moves, we need to update the agent's location in the game. This is what the effects in the action schema do:
- `(agent_at ?var0)` says that the agent is now at the new location (`?var0`), like saying, ""Now, I’m at the park.""
- `(not (agent_at ?var1))` means that the agent is no longer at the starting location (`?var1`), similar to saying, ""I'm no longer at home.""

This change in the agent's location is crucial for the game to keep track of where the agent is at any moment, which affects what the agent can interact with or what actions they can perform next. The effect ensures the game world is accurately updated following the agent's movement, and no confusion arises about where the agent is located. 

So, in simple terms, the action ""move"" in this game ensures that when the agent moves from one spot to another, the game correctly recognizes this change and updates the world accordingly.
Parameters:
1. ?var0 - static
2. ?var1 - static

Preconditions:
```
(not (agent_at ?var1))
```

Effects:
```
(and
    (agent_at ?var0)
)
```
","(:action move
    :parameters (?var0 - static ?var1 - static)
    :precondition (agent_at ?var1)
    :effect (and (agent_at ?var0) (not (agent_at ?var1)))
)","remove (not (agent_at ?var1)) from effects
negate (agent_at ?var1) in preconditions
"
minecraft,move,0.5768035650253296,Hard Negative (Manipulated Action),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: This is the agent's way of getting from one spot to another. Think of it as walking, running, or hopping across the Minecraft world. When the agent decides to move, they leave their current spot and end up at a new location. It's a simple action but essential for exploring the world and getting to different resources or areas.

Action name: move


Your answer:
","**Explanation:**
Let's think about the action called ""move"" in a Minecraft-like game, where the goal is to get an agent (like a player) from one place to another. The PDDL action schema you're asking about is designed to handle this simple yet crucial task.

In the action schema, we have two parameters: `?var0` and `?var1`, which are both locations. You can think of `?var0` as the new location where the agent wants to go, and `?var1` as the current location where the agent is starting from.

**Preconditions:** The precondition for the ""move"" action is `(agent_at ?var1)`. This just means that before the agent can move, it must be verified that the agent is actually at the starting location (`?var1`). It’s similar to checking if you are really at home before you walk to the park.

**Effects:** After the agent moves, we need to update the agent's location in the game. This is what the effects in the action schema do:
- `(agent_at ?var0)` says that the agent is now at the new location (`?var0`), like saying, ""Now, I’m at the park.""
- `(not (agent_at ?var1))` means that the agent is no longer at the starting location (`?var1`), similar to saying, ""I'm no longer at home.""

This change in the agent's location is crucial for the game to keep track of where the agent is at any moment, which affects what the agent can interact with or what actions they can perform next. The effect ensures the game world is accurately updated following the agent's movement, and no confusion arises about where the agent is located. 

So, in simple terms, the action ""move"" in this game ensures that when the agent moves from one spot to another, the game correctly recognizes this change and updates the world accordingly.
Parameters:
1. ?var0 - static
2. ?var1 - static

Preconditions:
```
(not (agent_at ?var1))
```

Effects:
```
(and
    (agent_at ?var0)
)
```
","(:action move
    :parameters (?var0 - static ?var1 - static)
    :precondition (agent_at ?var1)
    :effect (and (agent_at ?var0) (not (agent_at ?var1)))
)","negate (agent_at ?var1) in preconditions
remove (not (agent_at ?var1)) from effects
"
minecraft,move,0.5768035650253296,Hard Negative (Manipulated Action),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: This is the agent's way of getting from one spot to another. Think of it as walking, running, or hopping across the Minecraft world. When the agent decides to move, they leave their current spot and end up at a new location. It's a simple action but essential for exploring the world and getting to different resources or areas.

Action name: move


Your answer:
","**Explanation:**
Let's think about the action called ""move"" in a Minecraft-like game, where the goal is to get an agent (like a player) from one place to another. The PDDL action schema you're asking about is designed to handle this simple yet crucial task.

In the action schema, we have two parameters: `?var0` and `?var1`, which are both locations. You can think of `?var0` as the new location where the agent wants to go, and `?var1` as the current location where the agent is starting from.

**Preconditions:** The precondition for the ""move"" action is `(agent_at ?var1)`. This just means that before the agent can move, it must be verified that the agent is actually at the starting location (`?var1`). It’s similar to checking if you are really at home before you walk to the park.

**Effects:** After the agent moves, we need to update the agent's location in the game. This is what the effects in the action schema do:
- `(agent_at ?var0)` says that the agent is now at the new location (`?var0`), like saying, ""Now, I’m at the park.""
- `(not (agent_at ?var1))` means that the agent is no longer at the starting location (`?var1`), similar to saying, ""I'm no longer at home.""

This change in the agent's location is crucial for the game to keep track of where the agent is at any moment, which affects what the agent can interact with or what actions they can perform next. The effect ensures the game world is accurately updated following the agent's movement, and no confusion arises about where the agent is located. 

So, in simple terms, the action ""move"" in this game ensures that when the agent moves from one spot to another, the game correctly recognizes this change and updates the world accordingly.
Parameters:
1. ?var0 - static
2. ?var1 - static

Preconditions:
```
(agent_at ?var1)
```

Effects:
```
(and
    (not (agent_at ?var1))
)
```
","(:action move
    :parameters (?var0 - static ?var1 - static)
    :precondition (agent_at ?var1)
    :effect (and (agent_at ?var0) (not (agent_at ?var1)))
)","remove (agent_at ?var0) from effects
"
minecraft,move,0.5768035650253296,Hard Negative (Manipulated Action),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: This is the agent's way of getting from one spot to another. Think of it as walking, running, or hopping across the Minecraft world. When the agent decides to move, they leave their current spot and end up at a new location. It's a simple action but essential for exploring the world and getting to different resources or areas.

Action name: move


Your answer:
","**Explanation:**
Let's think about the action called ""move"" in a Minecraft-like game, where the goal is to get an agent (like a player) from one place to another. The PDDL action schema you're asking about is designed to handle this simple yet crucial task.

In the action schema, we have two parameters: `?var0` and `?var1`, which are both locations. You can think of `?var0` as the new location where the agent wants to go, and `?var1` as the current location where the agent is starting from.

**Preconditions:** The precondition for the ""move"" action is `(agent_at ?var1)`. This just means that before the agent can move, it must be verified that the agent is actually at the starting location (`?var1`). It’s similar to checking if you are really at home before you walk to the park.

**Effects:** After the agent moves, we need to update the agent's location in the game. This is what the effects in the action schema do:
- `(agent_at ?var0)` says that the agent is now at the new location (`?var0`), like saying, ""Now, I’m at the park.""
- `(not (agent_at ?var1))` means that the agent is no longer at the starting location (`?var1`), similar to saying, ""I'm no longer at home.""

This change in the agent's location is crucial for the game to keep track of where the agent is at any moment, which affects what the agent can interact with or what actions they can perform next. The effect ensures the game world is accurately updated following the agent's movement, and no confusion arises about where the agent is located. 

So, in simple terms, the action ""move"" in this game ensures that when the agent moves from one spot to another, the game correctly recognizes this change and updates the world accordingly.
Parameters:
1. ?var0 - static
2. ?var1 - static

Preconditions:
```
(agent_at ?var1)
```

Effects:
```
(and
    (not (agent_at ?var1))
)
```
","(:action move
    :parameters (?var0 - static ?var1 - static)
    :precondition (agent_at ?var1)
    :effect (and (agent_at ?var0) (not (agent_at ?var1)))
)","remove (agent_at ?var0) from effects
"
minecraft,move,0.5768035650253296,Hard Negative (Manipulated Action),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: This is the agent's way of getting from one spot to another. Think of it as walking, running, or hopping across the Minecraft world. When the agent decides to move, they leave their current spot and end up at a new location. It's a simple action but essential for exploring the world and getting to different resources or areas.

Action name: move


Your answer:
","**Explanation:**
Let's think about the action called ""move"" in a Minecraft-like game, where the goal is to get an agent (like a player) from one place to another. The PDDL action schema you're asking about is designed to handle this simple yet crucial task.

In the action schema, we have two parameters: `?var0` and `?var1`, which are both locations. You can think of `?var0` as the new location where the agent wants to go, and `?var1` as the current location where the agent is starting from.

**Preconditions:** The precondition for the ""move"" action is `(agent_at ?var1)`. This just means that before the agent can move, it must be verified that the agent is actually at the starting location (`?var1`). It’s similar to checking if you are really at home before you walk to the park.

**Effects:** After the agent moves, we need to update the agent's location in the game. This is what the effects in the action schema do:
- `(agent_at ?var0)` says that the agent is now at the new location (`?var0`), like saying, ""Now, I’m at the park.""
- `(not (agent_at ?var1))` means that the agent is no longer at the starting location (`?var1`), similar to saying, ""I'm no longer at home.""

This change in the agent's location is crucial for the game to keep track of where the agent is at any moment, which affects what the agent can interact with or what actions they can perform next. The effect ensures the game world is accurately updated following the agent's movement, and no confusion arises about where the agent is located. 

So, in simple terms, the action ""move"" in this game ensures that when the agent moves from one spot to another, the game correctly recognizes this change and updates the world accordingly.
Parameters:
1. ?var0 - static
2. ?var1 - static

Preconditions:
```
(agent_at ?var1)
```

Effects:
```
(and
    (agent_at ?var1)
    (agent_at ?var0)
)
```
","(:action move
    :parameters (?var0 - static ?var1 - static)
    :precondition (agent_at ?var1)
    :effect (and (agent_at ?var0) (not (agent_at ?var1)))
)","negate (not (agent_at ?var1)) in effects
"
minecraft,move,0.5768035650253296,Hard Negative (Manipulated Action),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: This is the agent's way of getting from one spot to another. Think of it as walking, running, or hopping across the Minecraft world. When the agent decides to move, they leave their current spot and end up at a new location. It's a simple action but essential for exploring the world and getting to different resources or areas.

Action name: move


Your answer:
","**Explanation:**
Let's think about the action called ""move"" in a Minecraft-like game, where the goal is to get an agent (like a player) from one place to another. The PDDL action schema you're asking about is designed to handle this simple yet crucial task.

In the action schema, we have two parameters: `?var0` and `?var1`, which are both locations. You can think of `?var0` as the new location where the agent wants to go, and `?var1` as the current location where the agent is starting from.

**Preconditions:** The precondition for the ""move"" action is `(agent_at ?var1)`. This just means that before the agent can move, it must be verified that the agent is actually at the starting location (`?var1`). It’s similar to checking if you are really at home before you walk to the park.

**Effects:** After the agent moves, we need to update the agent's location in the game. This is what the effects in the action schema do:
- `(agent_at ?var0)` says that the agent is now at the new location (`?var0`), like saying, ""Now, I’m at the park.""
- `(not (agent_at ?var1))` means that the agent is no longer at the starting location (`?var1`), similar to saying, ""I'm no longer at home.""

This change in the agent's location is crucial for the game to keep track of where the agent is at any moment, which affects what the agent can interact with or what actions they can perform next. The effect ensures the game world is accurately updated following the agent's movement, and no confusion arises about where the agent is located. 

So, in simple terms, the action ""move"" in this game ensures that when the agent moves from one spot to another, the game correctly recognizes this change and updates the world accordingly.
Parameters:
1. ?var0 - static
2. ?var1 - static

Preconditions:
```
(agent_at ?var1)
```

Effects:
```
(and
    (not (agent_at ?var1))
)
```
","(:action move
    :parameters (?var0 - static ?var1 - static)
    :precondition (agent_at ?var1)
    :effect (and (agent_at ?var0) (not (agent_at ?var1)))
)","remove (agent_at ?var0) from effects
"
minecraft,move,0.5768035650253296,Hard Negative (Manipulated Action),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: This is the agent's way of getting from one spot to another. Think of it as walking, running, or hopping across the Minecraft world. When the agent decides to move, they leave their current spot and end up at a new location. It's a simple action but essential for exploring the world and getting to different resources or areas.

Action name: move


Your answer:
","**Explanation:**
Let's think about the action called ""move"" in a Minecraft-like game, where the goal is to get an agent (like a player) from one place to another. The PDDL action schema you're asking about is designed to handle this simple yet crucial task.

In the action schema, we have two parameters: `?var0` and `?var1`, which are both locations. You can think of `?var0` as the new location where the agent wants to go, and `?var1` as the current location where the agent is starting from.

**Preconditions:** The precondition for the ""move"" action is `(agent_at ?var1)`. This just means that before the agent can move, it must be verified that the agent is actually at the starting location (`?var1`). It’s similar to checking if you are really at home before you walk to the park.

**Effects:** After the agent moves, we need to update the agent's location in the game. This is what the effects in the action schema do:
- `(agent_at ?var0)` says that the agent is now at the new location (`?var0`), like saying, ""Now, I’m at the park.""
- `(not (agent_at ?var1))` means that the agent is no longer at the starting location (`?var1`), similar to saying, ""I'm no longer at home.""

This change in the agent's location is crucial for the game to keep track of where the agent is at any moment, which affects what the agent can interact with or what actions they can perform next. The effect ensures the game world is accurately updated following the agent's movement, and no confusion arises about where the agent is located. 

So, in simple terms, the action ""move"" in this game ensures that when the agent moves from one spot to another, the game correctly recognizes this change and updates the world accordingly.
Parameters:
1. ?var0 - static
2. ?var1 - static

Preconditions:
```
(not (agent_at ?var1))
```

Effects:
```
(and
    (not (agent_at ?var0))
    (agent_at ?var1)
)
```
","(:action move
    :parameters (?var0 - static ?var1 - static)
    :precondition (agent_at ?var1)
    :effect (and (agent_at ?var0) (not (agent_at ?var1)))
)","negate (agent_at ?var0) in effects
swap (agent_at ?var1) with (not (agent_at ?var1))
"
minecraft,move,0.5768035650253296,Hard Negative (Manipulated Action),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: This is the agent's way of getting from one spot to another. Think of it as walking, running, or hopping across the Minecraft world. When the agent decides to move, they leave their current spot and end up at a new location. It's a simple action but essential for exploring the world and getting to different resources or areas.

Action name: move


Your answer:
","**Explanation:**
Let's think about the action called ""move"" in a Minecraft-like game, where the goal is to get an agent (like a player) from one place to another. The PDDL action schema you're asking about is designed to handle this simple yet crucial task.

In the action schema, we have two parameters: `?var0` and `?var1`, which are both locations. You can think of `?var0` as the new location where the agent wants to go, and `?var1` as the current location where the agent is starting from.

**Preconditions:** The precondition for the ""move"" action is `(agent_at ?var1)`. This just means that before the agent can move, it must be verified that the agent is actually at the starting location (`?var1`). It’s similar to checking if you are really at home before you walk to the park.

**Effects:** After the agent moves, we need to update the agent's location in the game. This is what the effects in the action schema do:
- `(agent_at ?var0)` says that the agent is now at the new location (`?var0`), like saying, ""Now, I’m at the park.""
- `(not (agent_at ?var1))` means that the agent is no longer at the starting location (`?var1`), similar to saying, ""I'm no longer at home.""

This change in the agent's location is crucial for the game to keep track of where the agent is at any moment, which affects what the agent can interact with or what actions they can perform next. The effect ensures the game world is accurately updated following the agent's movement, and no confusion arises about where the agent is located. 

So, in simple terms, the action ""move"" in this game ensures that when the agent moves from one spot to another, the game correctly recognizes this change and updates the world accordingly.
Parameters:
1. ?var0 - static
2. ?var1 - static

Preconditions:
```
(agent_at ?var1)
```

Effects:
```
(and
    (agent_at ?var1)
)
```
","(:action move
    :parameters (?var0 - static ?var1 - static)
    :precondition (agent_at ?var1)
    :effect (and (agent_at ?var0) (not (agent_at ?var1)))
)","remove (agent_at ?var0) from effects
negate (not (agent_at ?var1)) in effects
"
minecraft,equip,0.7020046710968018,Positive (Correct Match),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: This is when the agent decides to take something out of their inventory and hold it in their hands, ready for use. It could be picking up a tool for chopping or a weapon for defense. Once they equip an item, their hands are no longer empty - they're now holding this item, ready to use it for whatever task they have in mind.

Action name: equip


Your answer:
","Parameters:
1. ?var0 - moveable
2. ?var1 - agent

Preconditions:
```
(and
    (inventory ?var0)
    (handsfree ?var1)
)
```

Effects:
```
(and
    (equipped ?var0 ?var1)
    (not (handsfree ?var1))
    (not (inventory ?var0))
)
```
","(:action equip
    :parameters (?var0 - moveable ?var1 - agent)
    :precondition (and (inventory ?var0) (handsfree ?var1))
    :effect (and (equipped ?var0 ?var1) (not (handsfree ?var1)) (not (inventory ?var0)))
)",
minecraft,equip,0.7020046710968018,Positive (Correct Match),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: This is when the agent decides to take something out of their inventory and hold it in their hands, ready for use. It could be picking up a tool for chopping or a weapon for defense. Once they equip an item, their hands are no longer empty - they're now holding this item, ready to use it for whatever task they have in mind.

Action name: equip


Your answer:

**Explanation:**
Let's think of the action called ""equip"" like someone getting ready to use something from their backpack. Imagine you're planning to paint a picture. First, you need to make sure you have a paintbrush in your backpack (this is similar to the ""inventory"" in our scenario). You also need to make sure your hand is free to hold the paintbrush (like the ""handsfree"" condition).

In the ""equip"" action in this Minecraft-like environment, two main things need to happen before the action can take place:
1. **The item is in the inventory** - This is just like making sure the paintbrush is in your backpack. The precondition `(inventory ?var0)` confirms that the item you want to use is actually with you, stored safely in your inventory.
2. **The agent's hands are free** - This means you aren't holding anything else. The precondition `(handsfree ?var1)` checks that your hands (or the agent's hands, in this case) are empty and ready to hold something new.

When you decide to ""equip"" or start using the item, several things change:
- **The item is now equipped** - This means the item is in your hand and ready to use, similar to how you would hold a paintbrush when you're ready to paint. This is shown by the effect `(equipped ?var0 ?var1)`.
- **Your hand is no longer free** - Just like when you pick up the paintbrush, your hand isn't empty anymore. This is why the effect includes `(not (handsfree ?var1))`.
- **The item is no longer just in the inventory** - Since you're now holding the item, it's not just sitting in your backpack. This change is represented by `(not (inventory ?var0))`.

These changes ensure that the action of equipping something is logical and makes sense in the environment, just like how you'd logically take a paintbrush out of your backpack to use it.","Parameters:
1. ?var0 - moveable
2. ?var1 - agent

Preconditions:
```
(and
    (inventory ?var0)
    (handsfree ?var1)
)
```

Effects:
```
(and
    (equipped ?var0 ?var1)
    (not (handsfree ?var1))
    (not (inventory ?var0))
)
```
","(:action equip
    :parameters (?var0 - moveable ?var1 - agent)
    :precondition (and (inventory ?var0) (handsfree ?var1))
    :effect (and (equipped ?var0 ?var1) (not (handsfree ?var1)) (not (inventory ?var0)))
)",
minecraft,equip,0.47196096181869507,Positive (Correct Match),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: This is when the agent decides to take something out of their inventory and hold it in their hands, ready for use. It could be picking up a tool for chopping or a weapon for defense. Once they equip an item, their hands are no longer empty - they're now holding this item, ready to use it for whatever task they have in mind.

Action name: equip


Your answer:
","**Explanation:**
Let's think of the action called ""equip"" like someone getting ready to use something from their backpack. Imagine you're planning to paint a picture. First, you need to make sure you have a paintbrush in your backpack (this is similar to the ""inventory"" in our scenario). You also need to make sure your hand is free to hold the paintbrush (like the ""handsfree"" condition).

In the ""equip"" action in this Minecraft-like environment, two main things need to happen before the action can take place:
1. **The item is in the inventory** - This is just like making sure the paintbrush is in your backpack. The precondition `(inventory ?var0)` confirms that the item you want to use is actually with you, stored safely in your inventory.
2. **The agent's hands are free** - This means you aren't holding anything else. The precondition `(handsfree ?var1)` checks that your hands (or the agent's hands, in this case) are empty and ready to hold something new.

When you decide to ""equip"" or start using the item, several things change:
- **The item is now equipped** - This means the item is in your hand and ready to use, similar to how you would hold a paintbrush when you're ready to paint. This is shown by the effect `(equipped ?var0 ?var1)`.
- **Your hand is no longer free** - Just like when you pick up the paintbrush, your hand isn't empty anymore. This is why the effect includes `(not (handsfree ?var1))`.
- **The item is no longer just in the inventory** - Since you're now holding the item, it's not just sitting in your backpack. This change is represented by `(not (inventory ?var0))`.

These changes ensure that the action of equipping something is logical and makes sense in the environment, just like how you'd logically take a paintbrush out of your backpack to use it.
Parameters:
1. ?var0 - moveable
2. ?var1 - agent

Preconditions:
```
(and
    (inventory ?var0)
    (handsfree ?var1)
)
```

Effects:
```
(and
    (equipped ?var0 ?var1)
    (not (handsfree ?var1))
    (not (inventory ?var0))
)
```
","(:action equip
    :parameters (?var0 - moveable ?var1 - agent)
    :precondition (and (inventory ?var0) (handsfree ?var1))
    :effect (and (equipped ?var0 ?var1) (not (handsfree ?var1)) (not (inventory ?var0)))
)",
minecraft,equip,0.17881816625595093,Easy Negative (Inter-Domain Mismatch),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: This is when the agent decides to take something out of their inventory and hold it in their hands, ready for use. It could be picking up a tool for chopping or a weapon for defense. Once they equip an item, their hands are no longer empty - they're now holding this item, ready to use it for whatever task they have in mind.

Action name: equip


Your answer:
","Parameters:
1. ?from - cells
2. ?to - cells

Preconditions:
```
(and
    (connected ?from ?to)
    (at-hero ?from)
    (not (is-destroyed ?to))
    (not (has-trap ?from))
    (has-trap ?to)
    (arm-free)
)
```

Effects:
```
(and
    (at-hero ?to)
    (is-destroyed ?from)
    (not (at-hero ?from))
)
```
","(:action equip
    :parameters (?var0 - moveable ?var1 - agent)
    :precondition (and (inventory ?var0) (handsfree ?var1))
    :effect (and (equipped ?var0 ?var1) (not (handsfree ?var1)) (not (inventory ?var0)))
)",
minecraft,equip,0.22251534461975098,Easy Negative (Inter-Domain Mismatch),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: This is when the agent decides to take something out of their inventory and hold it in their hands, ready for use. It could be picking up a tool for chopping or a weapon for defense. Once they equip an item, their hands are no longer empty - they're now holding this item, ready to use it for whatever task they have in mind.

Action name: equip


Your answer:
","Parameters:
1. ?from - cells
2. ?to - cells

Preconditions:
```
(and
    (connected ?from ?to)
    (at-hero ?from)
    (not (has-trap ?from))
    (not (is-destroyed ?to))
    (not (has-trap ?to))
    (not (has-monster ?to))
)
```

Effects:
```
(and
    (at-hero ?to)
    (is-destroyed ?from)
    (not (at-hero ?from))
)
```
","(:action equip
    :parameters (?var0 - moveable ?var1 - agent)
    :precondition (and (inventory ?var0) (handsfree ?var1))
    :effect (and (equipped ?var0 ?var1) (not (handsfree ?var1)) (not (inventory ?var0)))
)",
minecraft,equip,0.15997400879859924,Easy Negative (Inter-Domain Mismatch),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: This is when the agent decides to take something out of their inventory and hold it in their hands, ready for use. It could be picking up a tool for chopping or a weapon for defense. Once they equip an item, their hands are no longer empty - they're now holding this item, ready to use it for whatever task they have in mind.

Action name: equip


Your answer:
","Parameters:
1. ?loc - cells
2. ?s - swords

Preconditions:
```
(and
    (at-hero ?loc)
    (at-sword ?s ?loc)
    (arm-free)
)
```

Effects:
```
(and
    (holding ?s)
    (not (at-sword ?s ?loc))
    (not (arm-free))
)
```
","(:action equip
    :parameters (?var0 - moveable ?var1 - agent)
    :precondition (and (inventory ?var0) (handsfree ?var1))
    :effect (and (equipped ?var0 ?var1) (not (handsfree ?var1)) (not (inventory ?var0)))
)",
minecraft,equip,0.30057987570762634,Easy Negative (Inter-Domain Mismatch),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: This is when the agent decides to take something out of their inventory and hold it in their hands, ready for use. It could be picking up a tool for chopping or a weapon for defense. Once they equip an item, their hands are no longer empty - they're now holding this item, ready to use it for whatever task they have in mind.

Action name: equip


Your answer:
","Parameters:
1. ?loc - cells

Preconditions:
```
(and
    (at-hero ?loc)
    (arm-free)
    (has-trap ?loc)
)
```

Effects:
```
(and
    (trap-disarmed ?loc)
    (not (has-trap ?loc))
)
```
","(:action equip
    :parameters (?var0 - moveable ?var1 - agent)
    :precondition (and (inventory ?var0) (handsfree ?var1))
    :effect (and (equipped ?var0 ?var1) (not (handsfree ?var1)) (not (inventory ?var0)))
)",
minecraft,equip,0.2988182306289673,Easy Negative (Inter-Domain Mismatch),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: This is when the agent decides to take something out of their inventory and hold it in their hands, ready for use. It could be picking up a tool for chopping or a weapon for defense. Once they equip an item, their hands are no longer empty - they're now holding this item, ready to use it for whatever task they have in mind.

Action name: equip


Your answer:
","Parameters:
1. ?from - cells
2. ?to - cells
3. ?s - swords

Preconditions:
```
(and
    (connected ?from ?to)
    (at-hero ?from)
    (has-monster ?to)
    (not (is-destroyed ?to))
    (not (has-trap ?from))
    (holding ?s)
)
```

Effects:
```
(and
    (at-hero ?to)
    (is-destroyed ?from)
    (not (at-hero ?from))
)
```
","(:action equip
    :parameters (?var0 - moveable ?var1 - agent)
    :precondition (and (inventory ?var0) (handsfree ?var1))
    :effect (and (equipped ?var0 ?var1) (not (handsfree ?var1)) (not (inventory ?var0)))
)",
minecraft,equip,0.2034735381603241,Easy Negative (Inter-Domain Mismatch),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: This is when the agent decides to take something out of their inventory and hold it in their hands, ready for use. It could be picking up a tool for chopping or a weapon for defense. Once they equip an item, their hands are no longer empty - they're now holding this item, ready to use it for whatever task they have in mind.

Action name: equip


Your answer:
","Parameters:
1. ?loc - cells
2. ?s - swords

Preconditions:
```
(and
    (at-hero ?loc)
    (holding ?s)
    (not (has-trap ?loc))
    (not (has-monster ?loc))
)
```

Effects:
```
(and
    (arm-free)
    (is-destroyed ?s)
    (not (holding ?s))
)
```
","(:action equip
    :parameters (?var0 - moveable ?var1 - agent)
    :precondition (and (inventory ?var0) (handsfree ?var1))
    :effect (and (equipped ?var0 ?var1) (not (handsfree ?var1)) (not (inventory ?var0)))
)",
minecraft,equip,0.17881816625595093,Easy Negative (Inter-Domain Mismatch),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: This is when the agent decides to take something out of their inventory and hold it in their hands, ready for use. It could be picking up a tool for chopping or a weapon for defense. Once they equip an item, their hands are no longer empty - they're now holding this item, ready to use it for whatever task they have in mind.

Action name: equip


Your answer:

**Explanation:**
Let's think of the action called ""equip"" like someone getting ready to use something from their backpack. Imagine you're planning to paint a picture. First, you need to make sure you have a paintbrush in your backpack (this is similar to the ""inventory"" in our scenario). You also need to make sure your hand is free to hold the paintbrush (like the ""handsfree"" condition).

In the ""equip"" action in this Minecraft-like environment, two main things need to happen before the action can take place:
1. **The item is in the inventory** - This is just like making sure the paintbrush is in your backpack. The precondition `(inventory ?var0)` confirms that the item you want to use is actually with you, stored safely in your inventory.
2. **The agent's hands are free** - This means you aren't holding anything else. The precondition `(handsfree ?var1)` checks that your hands (or the agent's hands, in this case) are empty and ready to hold something new.

When you decide to ""equip"" or start using the item, several things change:
- **The item is now equipped** - This means the item is in your hand and ready to use, similar to how you would hold a paintbrush when you're ready to paint. This is shown by the effect `(equipped ?var0 ?var1)`.
- **Your hand is no longer free** - Just like when you pick up the paintbrush, your hand isn't empty anymore. This is why the effect includes `(not (handsfree ?var1))`.
- **The item is no longer just in the inventory** - Since you're now holding the item, it's not just sitting in your backpack. This change is represented by `(not (inventory ?var0))`.

These changes ensure that the action of equipping something is logical and makes sense in the environment, just like how you'd logically take a paintbrush out of your backpack to use it.","Parameters:
1. ?from - cells
2. ?to - cells

Preconditions:
```
(and
    (connected ?from ?to)
    (at-hero ?from)
    (not (is-destroyed ?to))
    (not (has-trap ?from))
    (has-trap ?to)
    (arm-free)
)
```

Effects:
```
(and
    (at-hero ?to)
    (is-destroyed ?from)
    (not (at-hero ?from))
)
```
","(:action equip
    :parameters (?var0 - moveable ?var1 - agent)
    :precondition (and (inventory ?var0) (handsfree ?var1))
    :effect (and (equipped ?var0 ?var1) (not (handsfree ?var1)) (not (inventory ?var0)))
)",
minecraft,equip,0.22251534461975098,Easy Negative (Inter-Domain Mismatch),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: This is when the agent decides to take something out of their inventory and hold it in their hands, ready for use. It could be picking up a tool for chopping or a weapon for defense. Once they equip an item, their hands are no longer empty - they're now holding this item, ready to use it for whatever task they have in mind.

Action name: equip


Your answer:

**Explanation:**
Let's think of the action called ""equip"" like someone getting ready to use something from their backpack. Imagine you're planning to paint a picture. First, you need to make sure you have a paintbrush in your backpack (this is similar to the ""inventory"" in our scenario). You also need to make sure your hand is free to hold the paintbrush (like the ""handsfree"" condition).

In the ""equip"" action in this Minecraft-like environment, two main things need to happen before the action can take place:
1. **The item is in the inventory** - This is just like making sure the paintbrush is in your backpack. The precondition `(inventory ?var0)` confirms that the item you want to use is actually with you, stored safely in your inventory.
2. **The agent's hands are free** - This means you aren't holding anything else. The precondition `(handsfree ?var1)` checks that your hands (or the agent's hands, in this case) are empty and ready to hold something new.

When you decide to ""equip"" or start using the item, several things change:
- **The item is now equipped** - This means the item is in your hand and ready to use, similar to how you would hold a paintbrush when you're ready to paint. This is shown by the effect `(equipped ?var0 ?var1)`.
- **Your hand is no longer free** - Just like when you pick up the paintbrush, your hand isn't empty anymore. This is why the effect includes `(not (handsfree ?var1))`.
- **The item is no longer just in the inventory** - Since you're now holding the item, it's not just sitting in your backpack. This change is represented by `(not (inventory ?var0))`.

These changes ensure that the action of equipping something is logical and makes sense in the environment, just like how you'd logically take a paintbrush out of your backpack to use it.","Parameters:
1. ?from - cells
2. ?to - cells

Preconditions:
```
(and
    (connected ?from ?to)
    (at-hero ?from)
    (not (has-trap ?from))
    (not (is-destroyed ?to))
    (not (has-trap ?to))
    (not (has-monster ?to))
)
```

Effects:
```
(and
    (at-hero ?to)
    (is-destroyed ?from)
    (not (at-hero ?from))
)
```
","(:action equip
    :parameters (?var0 - moveable ?var1 - agent)
    :precondition (and (inventory ?var0) (handsfree ?var1))
    :effect (and (equipped ?var0 ?var1) (not (handsfree ?var1)) (not (inventory ?var0)))
)",
minecraft,equip,0.15997400879859924,Easy Negative (Inter-Domain Mismatch),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: This is when the agent decides to take something out of their inventory and hold it in their hands, ready for use. It could be picking up a tool for chopping or a weapon for defense. Once they equip an item, their hands are no longer empty - they're now holding this item, ready to use it for whatever task they have in mind.

Action name: equip


Your answer:

**Explanation:**
Let's think of the action called ""equip"" like someone getting ready to use something from their backpack. Imagine you're planning to paint a picture. First, you need to make sure you have a paintbrush in your backpack (this is similar to the ""inventory"" in our scenario). You also need to make sure your hand is free to hold the paintbrush (like the ""handsfree"" condition).

In the ""equip"" action in this Minecraft-like environment, two main things need to happen before the action can take place:
1. **The item is in the inventory** - This is just like making sure the paintbrush is in your backpack. The precondition `(inventory ?var0)` confirms that the item you want to use is actually with you, stored safely in your inventory.
2. **The agent's hands are free** - This means you aren't holding anything else. The precondition `(handsfree ?var1)` checks that your hands (or the agent's hands, in this case) are empty and ready to hold something new.

When you decide to ""equip"" or start using the item, several things change:
- **The item is now equipped** - This means the item is in your hand and ready to use, similar to how you would hold a paintbrush when you're ready to paint. This is shown by the effect `(equipped ?var0 ?var1)`.
- **Your hand is no longer free** - Just like when you pick up the paintbrush, your hand isn't empty anymore. This is why the effect includes `(not (handsfree ?var1))`.
- **The item is no longer just in the inventory** - Since you're now holding the item, it's not just sitting in your backpack. This change is represented by `(not (inventory ?var0))`.

These changes ensure that the action of equipping something is logical and makes sense in the environment, just like how you'd logically take a paintbrush out of your backpack to use it.","Parameters:
1. ?loc - cells
2. ?s - swords

Preconditions:
```
(and
    (at-hero ?loc)
    (at-sword ?s ?loc)
    (arm-free)
)
```

Effects:
```
(and
    (holding ?s)
    (not (at-sword ?s ?loc))
    (not (arm-free))
)
```
","(:action equip
    :parameters (?var0 - moveable ?var1 - agent)
    :precondition (and (inventory ?var0) (handsfree ?var1))
    :effect (and (equipped ?var0 ?var1) (not (handsfree ?var1)) (not (inventory ?var0)))
)",
minecraft,equip,0.30057987570762634,Easy Negative (Inter-Domain Mismatch),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: This is when the agent decides to take something out of their inventory and hold it in their hands, ready for use. It could be picking up a tool for chopping or a weapon for defense. Once they equip an item, their hands are no longer empty - they're now holding this item, ready to use it for whatever task they have in mind.

Action name: equip


Your answer:

**Explanation:**
Let's think of the action called ""equip"" like someone getting ready to use something from their backpack. Imagine you're planning to paint a picture. First, you need to make sure you have a paintbrush in your backpack (this is similar to the ""inventory"" in our scenario). You also need to make sure your hand is free to hold the paintbrush (like the ""handsfree"" condition).

In the ""equip"" action in this Minecraft-like environment, two main things need to happen before the action can take place:
1. **The item is in the inventory** - This is just like making sure the paintbrush is in your backpack. The precondition `(inventory ?var0)` confirms that the item you want to use is actually with you, stored safely in your inventory.
2. **The agent's hands are free** - This means you aren't holding anything else. The precondition `(handsfree ?var1)` checks that your hands (or the agent's hands, in this case) are empty and ready to hold something new.

When you decide to ""equip"" or start using the item, several things change:
- **The item is now equipped** - This means the item is in your hand and ready to use, similar to how you would hold a paintbrush when you're ready to paint. This is shown by the effect `(equipped ?var0 ?var1)`.
- **Your hand is no longer free** - Just like when you pick up the paintbrush, your hand isn't empty anymore. This is why the effect includes `(not (handsfree ?var1))`.
- **The item is no longer just in the inventory** - Since you're now holding the item, it's not just sitting in your backpack. This change is represented by `(not (inventory ?var0))`.

These changes ensure that the action of equipping something is logical and makes sense in the environment, just like how you'd logically take a paintbrush out of your backpack to use it.","Parameters:
1. ?loc - cells

Preconditions:
```
(and
    (at-hero ?loc)
    (arm-free)
    (has-trap ?loc)
)
```

Effects:
```
(and
    (trap-disarmed ?loc)
    (not (has-trap ?loc))
)
```
","(:action equip
    :parameters (?var0 - moveable ?var1 - agent)
    :precondition (and (inventory ?var0) (handsfree ?var1))
    :effect (and (equipped ?var0 ?var1) (not (handsfree ?var1)) (not (inventory ?var0)))
)",
minecraft,equip,0.2988182306289673,Easy Negative (Inter-Domain Mismatch),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: This is when the agent decides to take something out of their inventory and hold it in their hands, ready for use. It could be picking up a tool for chopping or a weapon for defense. Once they equip an item, their hands are no longer empty - they're now holding this item, ready to use it for whatever task they have in mind.

Action name: equip


Your answer:

**Explanation:**
Let's think of the action called ""equip"" like someone getting ready to use something from their backpack. Imagine you're planning to paint a picture. First, you need to make sure you have a paintbrush in your backpack (this is similar to the ""inventory"" in our scenario). You also need to make sure your hand is free to hold the paintbrush (like the ""handsfree"" condition).

In the ""equip"" action in this Minecraft-like environment, two main things need to happen before the action can take place:
1. **The item is in the inventory** - This is just like making sure the paintbrush is in your backpack. The precondition `(inventory ?var0)` confirms that the item you want to use is actually with you, stored safely in your inventory.
2. **The agent's hands are free** - This means you aren't holding anything else. The precondition `(handsfree ?var1)` checks that your hands (or the agent's hands, in this case) are empty and ready to hold something new.

When you decide to ""equip"" or start using the item, several things change:
- **The item is now equipped** - This means the item is in your hand and ready to use, similar to how you would hold a paintbrush when you're ready to paint. This is shown by the effect `(equipped ?var0 ?var1)`.
- **Your hand is no longer free** - Just like when you pick up the paintbrush, your hand isn't empty anymore. This is why the effect includes `(not (handsfree ?var1))`.
- **The item is no longer just in the inventory** - Since you're now holding the item, it's not just sitting in your backpack. This change is represented by `(not (inventory ?var0))`.

These changes ensure that the action of equipping something is logical and makes sense in the environment, just like how you'd logically take a paintbrush out of your backpack to use it.","Parameters:
1. ?from - cells
2. ?to - cells
3. ?s - swords

Preconditions:
```
(and
    (connected ?from ?to)
    (at-hero ?from)
    (has-monster ?to)
    (not (is-destroyed ?to))
    (not (has-trap ?from))
    (holding ?s)
)
```

Effects:
```
(and
    (at-hero ?to)
    (is-destroyed ?from)
    (not (at-hero ?from))
)
```
","(:action equip
    :parameters (?var0 - moveable ?var1 - agent)
    :precondition (and (inventory ?var0) (handsfree ?var1))
    :effect (and (equipped ?var0 ?var1) (not (handsfree ?var1)) (not (inventory ?var0)))
)",
minecraft,equip,0.2034735381603241,Easy Negative (Inter-Domain Mismatch),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: This is when the agent decides to take something out of their inventory and hold it in their hands, ready for use. It could be picking up a tool for chopping or a weapon for defense. Once they equip an item, their hands are no longer empty - they're now holding this item, ready to use it for whatever task they have in mind.

Action name: equip


Your answer:

**Explanation:**
Let's think of the action called ""equip"" like someone getting ready to use something from their backpack. Imagine you're planning to paint a picture. First, you need to make sure you have a paintbrush in your backpack (this is similar to the ""inventory"" in our scenario). You also need to make sure your hand is free to hold the paintbrush (like the ""handsfree"" condition).

In the ""equip"" action in this Minecraft-like environment, two main things need to happen before the action can take place:
1. **The item is in the inventory** - This is just like making sure the paintbrush is in your backpack. The precondition `(inventory ?var0)` confirms that the item you want to use is actually with you, stored safely in your inventory.
2. **The agent's hands are free** - This means you aren't holding anything else. The precondition `(handsfree ?var1)` checks that your hands (or the agent's hands, in this case) are empty and ready to hold something new.

When you decide to ""equip"" or start using the item, several things change:
- **The item is now equipped** - This means the item is in your hand and ready to use, similar to how you would hold a paintbrush when you're ready to paint. This is shown by the effect `(equipped ?var0 ?var1)`.
- **Your hand is no longer free** - Just like when you pick up the paintbrush, your hand isn't empty anymore. This is why the effect includes `(not (handsfree ?var1))`.
- **The item is no longer just in the inventory** - Since you're now holding the item, it's not just sitting in your backpack. This change is represented by `(not (inventory ?var0))`.

These changes ensure that the action of equipping something is logical and makes sense in the environment, just like how you'd logically take a paintbrush out of your backpack to use it.","Parameters:
1. ?loc - cells
2. ?s - swords

Preconditions:
```
(and
    (at-hero ?loc)
    (holding ?s)
    (not (has-trap ?loc))
    (not (has-monster ?loc))
)
```

Effects:
```
(and
    (arm-free)
    (is-destroyed ?s)
    (not (holding ?s))
)
```
","(:action equip
    :parameters (?var0 - moveable ?var1 - agent)
    :precondition (and (inventory ?var0) (handsfree ?var1))
    :effect (and (equipped ?var0 ?var1) (not (handsfree ?var1)) (not (inventory ?var0)))
)",
minecraft,equip,0.1170363575220108,Easy Negative (Inter-Domain Mismatch),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: This is when the agent decides to take something out of their inventory and hold it in their hands, ready for use. It could be picking up a tool for chopping or a weapon for defense. Once they equip an item, their hands are no longer empty - they're now holding this item, ready to use it for whatever task they have in mind.

Action name: equip


Your answer:
","**Explanation:** 

Imagine you are a librarian in a library, and you need to take a book off the shelf. This book is placed on top of another book. The action ""remove-from-shelf"" lets you take the top book off the shelf. To do this, certain conditions, called ""preconditions,"" must be met to make sure you can successfully take the book.

For the action ""remove-from-shelf,"" let's break down what needs to be true before you can take the book off the shelf:

1. **The book must be on the shelf:** This means the book you want to take is on top of another book on the shelf.
2. **The book must be accessible:** This means the book isn't covered by other books or objects, so you can easily reach it.
3. **Your hands must be free:** You need to have empty hands to pick up the book, meaning you aren't already holding something else.
4. **The book must belong to a certain category:** This helps you know which book you are taking and ensures you are organizing the books properly.

Once these preconditions are met, you can proceed with the ""remove-from-shelf"" action. This action results in several changes, called ""effects,"" that update the status of the books and your hands:

1. **You are now holding the book:** This indicates you have picked up the book from the shelf.
2. **The book underneath becomes accessible:** Since you have removed the top book, the book underneath is now easy to reach.
3. **The book you removed is no longer accessible:** Because you are holding the book, it's not available on the shelf anymore.
4. **Your hands are no longer free:** Since you are now holding the book, your hands are occupied.
5. **The book is no longer on the shelf:** This shows that the book has been taken off the shelf.
6. **The shelf is now empty for that category:** This helps keep track of the shelf space and organization.

To summarize, the preconditions ensure the book is on the shelf, accessible, your hands are free, and you know which category the book belongs to. The effects update the situation to show you are holding the book, the book underneath is now accessible, and the shelf is empty for that category.
Parameters:
1. ?x - book
2. ?y - book
3. ?cat - category

Preconditions:
```
(and
    (on-shelf ?x ?y)
    (accessible ?x)
    (hands-free)
    (belongs-to-category ?x ?cat)
)
```

Effects:
```
(and
    (holding ?x)
    (accessible ?y)
    (not (accessible ?x))
    (not (hands-free))
    (not (on-shelf ?x ?y))
    (shelf-empty ?cat)
)
```
","(:action equip
    :parameters (?var0 - moveable ?var1 - agent)
    :precondition (and (inventory ?var0) (handsfree ?var1))
    :effect (and (equipped ?var0 ?var1) (not (handsfree ?var1)) (not (inventory ?var0)))
)",
minecraft,equip,0.20188868045806885,Easy Negative (Inter-Domain Mismatch),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: This is when the agent decides to take something out of their inventory and hold it in their hands, ready for use. It could be picking up a tool for chopping or a weapon for defense. Once they equip an item, their hands are no longer empty - they're now holding this item, ready to use it for whatever task they have in mind.

Action name: equip


Your answer:
","**Explanation:** 

Imagine you are a librarian holding a book in your hands, and you want to place it on a nearby table. The action ""place-on-table"" lets you do this. To make sure everything goes smoothly, there is a condition, called a ""precondition,"" that must be met before you can place the book on the table.

For the action ""place-on-table,"" let's break down what needs to be true before you can place the book on the table:

1. **You must be holding the book:** This means you have the book in your hands, ready to place it on the table.

Once this precondition is met, you can proceed with the ""place-on-table"" action. This action results in several changes, called ""effects,"" that update the status of the book and your hands:

1. **You are no longer holding the book:** This shows that you have placed the book on the table.
2. **The book becomes accessible:** Now that the book is on the table, it is easy to reach and pick up again if needed.
3. **Your hands are now free:** Since you have placed the book on the table, your hands are empty again.
4. **The book is on the table:** This indicates the new location of the book.

To summarize, the precondition ensures you are holding the book, making sure you are ready to place it on the table. The effects update the situation to show that you have placed the book on the table, it is now accessible, and your hands are free again.
Parameters:
1. ?x - book

Preconditions:
```
(holding ?x)
```

Effects:
```
(and
    (not (holding ?x))
    (accessible ?x)
    (hands-free)
    (on-table ?x)
)
```
","(:action equip
    :parameters (?var0 - moveable ?var1 - agent)
    :precondition (and (inventory ?var0) (handsfree ?var1))
    :effect (and (equipped ?var0 ?var1) (not (handsfree ?var1)) (not (inventory ?var0)))
)",
minecraft,equip,0.17585483193397522,Easy Negative (Inter-Domain Mismatch),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: This is when the agent decides to take something out of their inventory and hold it in their hands, ready for use. It could be picking up a tool for chopping or a weapon for defense. Once they equip an item, their hands are no longer empty - they're now holding this item, ready to use it for whatever task they have in mind.

Action name: equip


Your answer:
","**Explanation:** 

Imagine a librarian in a library who helps patrons borrow books. When a patron wants to borrow a book, the librarian needs to make sure certain conditions are met before they can check the book out. These conditions are called ""preconditions.""

For the action ""check-out,"" let's think about what needs to be true before the librarian can let the patron borrow the book:

1. **The book must be accessible:** This means the book is not covered by other books or objects, making it easy for the librarian to pick up. If the book isn't accessible, the librarian can't reach it to check it out.
2. **The book must not be already checked out:** If the book is already checked out to someone else, it can't be borrowed by another patron until it's returned.

Once these preconditions are met, the librarian can proceed with the check-out action. The action results in several changes, called ""effects,"" that update the status of the book:

1. **The book is marked as checked out:** This indicates that the book is now borrowed and can't be checked out by another patron until it's returned.
2. **The book is no longer accessible:** Since the book is borrowed, it's no longer available on the shelf for others to take.
3. **There is a request for the book:** This keeps track of the borrowing transaction.
4. **A return due date is set:** This helps the library know when to expect the book back.

To summarize, the preconditions ensure the librarian can access the book and that it isn't already borrowed. The effects update the system to show the book is now checked out, not accessible, and has a return due date.
Parameters:
1. ?x - book

Preconditions:
```
(and
    (accessible ?x)
    (not (checked-out ?x))
)
```

Effects:
```
(and
    (checked-out ?x)
    (not (accessible ?x))
    (book-request ?x)
    (return-due ?x)
)
```
","(:action equip
    :parameters (?var0 - moveable ?var1 - agent)
    :precondition (and (inventory ?var0) (handsfree ?var1))
    :effect (and (equipped ?var0 ?var1) (not (handsfree ?var1)) (not (inventory ?var0)))
)",
minecraft,equip,0.18635134398937225,Easy Negative (Inter-Domain Mismatch),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: This is when the agent decides to take something out of their inventory and hold it in their hands, ready for use. It could be picking up a tool for chopping or a weapon for defense. Once they equip an item, their hands are no longer empty - they're now holding this item, ready to use it for whatever task they have in mind.

Action name: equip


Your answer:
","**Explanation:** 

Imagine a patron is returning a borrowed book to the library. The librarian needs to process this return to update the book's status and remove any return due date. The action ""return-book"" describes how the librarian can do this. There are specific conditions, called ""preconditions,"" that must be met to ensure the return can be processed correctly.

For the action ""return-book,"" let's break down what needs to be true before the librarian can return the book:

1. **The book must be checked out:** This means the book is currently borrowed by someone and needs to be returned.
2. **The librarian must be holding the book:** This indicates the librarian has the book in their hands, ready to process the return.

Once these preconditions are met, the librarian can proceed with the ""return-book"" action. This action results in several changes, called ""effects,"" that update the status of the book and the librarian's hands:

1. **The book is no longer checked out:** This shows that the book has been returned and is available for borrowing again.
2. **The librarian is no longer holding the book:** This indicates the librarian has processed the return and placed the book back in its proper place.
3. **Any request for the book is removed:** If there was a request for this book, it is no longer needed since the book is now available.
4. **The return due date is removed:** This updates the system to show that the book is no longer due for return.
5. **The book becomes accessible:** Now that the book is back in the library, it is easy to find and borrow again.
6. **The librarian's hands are now free:** Since the librarian has finished processing the return, their hands are empty and ready for the next task.

To summarize, the preconditions ensure the book is currently borrowed and the librarian has it in their hands, ready to return. The effects update the situation to show that the book is no longer checked out, any requests and due dates are removed, the book is accessible again, and the librarian's hands are free.
Parameters:
1. ?x - book

Preconditions:
```
(and
    (checked-out ?x)
    (holding ?x)
)
```

Effects:
```
(and
    (not (checked-out ?x))
    (not (holding ?x))
    (not (book-request ?x))
    (not (return-due ?x))
    (accessible ?x)
    (hands-free)
)
```
","(:action equip
    :parameters (?var0 - moveable ?var1 - agent)
    :precondition (and (inventory ?var0) (handsfree ?var1))
    :effect (and (equipped ?var0 ?var1) (not (handsfree ?var1)) (not (inventory ?var0)))
)",
minecraft,equip,0.1193358302116394,Easy Negative (Inter-Domain Mismatch),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: This is when the agent decides to take something out of their inventory and hold it in their hands, ready for use. It could be picking up a tool for chopping or a weapon for defense. Once they equip an item, their hands are no longer empty - they're now holding this item, ready to use it for whatever task they have in mind.

Action name: equip


Your answer:
","**Explanation:** 

Imagine you're a librarian in a library, and there's a table full of books that need to be sorted. You want to pick up one of these books. To do this, certain conditions, called ""preconditions,"" must be met to ensure you can successfully pick up the book.

For the action ""take-from-table,"" let's break down what needs to be true before you can pick up a book:

1. **The book must be accessible:** This means the book isn't covered by other books or objects, so you can easily reach it.
2. **The book must be on the table:** This indicates the book is physically located on the table, not somewhere else like a shelf.
3. **Your hands must be free:** You need to have empty hands to pick up the book, meaning you aren't already holding something else.

Once these preconditions are met, you can proceed with the ""take-from-table"" action. This action results in several changes, called ""effects,"" that update the status of the book and your hands:

1. **The book is no longer on the table:** This indicates you've picked up the book from the table.
2. **The book is no longer accessible:** Since you're holding the book, it's not available for someone else to pick up from the table.
3. **Your hands are no longer free:** Because you're now holding the book, your hands are occupied.
4. **You are holding the book:** This shows that the book is now in your hands.

To summarize, the preconditions ensure you can reach the book, it's on the table, and your hands are free to pick it up. The effects update the situation to reflect that the book is now in your hands and no longer on the table or accessible to others.
Parameters:
1. ?x - book

Preconditions:
```
(and
    (accessible ?x)
    (on-table ?x)
    (hands-free)
)
```

Effects:
```
(and
    (not (on-table ?x))
    (not (accessible ?x))
    (not (hands-free))
    (holding ?x)
)
```
","(:action equip
    :parameters (?var0 - moveable ?var1 - agent)
    :precondition (and (inventory ?var0) (handsfree ?var1))
    :effect (and (equipped ?var0 ?var1) (not (handsfree ?var1)) (not (inventory ?var0)))
)",
minecraft,equip,0.16592147946357727,Easy Negative (Inter-Domain Mismatch),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: This is when the agent decides to take something out of their inventory and hold it in their hands, ready for use. It could be picking up a tool for chopping or a weapon for defense. Once they equip an item, their hands are no longer empty - they're now holding this item, ready to use it for whatever task they have in mind.

Action name: equip


Your answer:
","**Explanation:** 

Imagine you are a librarian standing near a shelf, holding a book in your hands. You want to place this book on top of another book that is already on the shelf. This action, called ""place-on-shelf,"" needs to follow certain rules, called ""preconditions,"" to make sure everything goes smoothly.

For the action ""place-on-shelf,"" let's break down what needs to be true before you can place the book on the shelf:

1. **You must be holding the book:** This means you have the book in your hands, ready to place it on the shelf.
2. **The book on the shelf must be accessible:** The book already on the shelf should not be covered by other books or objects, so you can easily place your book on top of it.
3. **The book you are holding must belong to a certain category:** This helps in organizing the books properly according to their categories.
4. **The shelf should not be overflowing:** There should be enough space on the shelf to place another book.

Once these preconditions are met, you can proceed with the ""place-on-shelf"" action. This action results in several changes, called ""effects,"" that update the status of the books and your hands:

1. **You are no longer holding the book:** This shows that you have placed the book on the shelf.
2. **The book on the shelf is no longer accessible:** Because the new book is now on top of it, making it covered.
3. **The book you placed is now accessible:** This indicates the book you just placed is easy to reach.
4. **Your hands are now free:** Since you have placed the book on the shelf, your hands are empty again.
5. **The new book is on the shelf on top of the other book:** This shows the new book's position.
6. **The shelf is now considered empty for that category:** This helps in tracking the organization and availability of shelf space for that category.

To summarize, the preconditions ensure you are holding the book, the shelf has space, and the book on the shelf is accessible. The effects update the situation to show that you have placed the book on the shelf, the new book is accessible, and your hands are free again.
Parameters:
1. ?x - book
2. ?y - book
3. ?cat - category

Preconditions:
```
(and
    (holding ?x)
    (accessible ?y)
    (belongs-to-category ?x ?cat)
    (not (shelf-overflow ?cat))
)
```

Effects:
```
(and
    (not (holding ?x))
    (not (accessible ?y))
    (accessible ?x)
    (hands-free)
    (on-shelf ?x ?y)
    (shelf-empty ?cat)
)
```
","(:action equip
    :parameters (?var0 - moveable ?var1 - agent)
    :precondition (and (inventory ?var0) (handsfree ?var1))
    :effect (and (equipped ?var0 ?var1) (not (handsfree ?var1)) (not (inventory ?var0)))
)",
minecraft,equip,0.48663032054901123,Semi-Hard Negative (Intra-Domain Mismatch),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: This is when the agent decides to take something out of their inventory and hold it in their hands, ready for use. It could be picking up a tool for chopping or a weapon for defense. Once they equip an item, their hands are no longer empty - they're now holding this item, ready to use it for whatever task they have in mind.

Action name: equip


Your answer:
","Parameters:
1. ?var0 - moveable
2. ?var1 - agent

Preconditions:
```
(equipped ?var0 ?var1)
```

Effects:
```
(and
    (inventory ?var0)
    (not (equipped ?var0 ?var1))
    (handsfree ?var1)
)
```
","(:action equip
    :parameters (?var0 - moveable ?var1 - agent)
    :precondition (and (inventory ?var0) (handsfree ?var1))
    :effect (and (equipped ?var0 ?var1) (not (handsfree ?var1)) (not (inventory ?var0)))
)",
minecraft,equip,0.7756763100624084,Semi-Hard Negative (Intra-Domain Mismatch),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: This is when the agent decides to take something out of their inventory and hold it in their hands, ready for use. It could be picking up a tool for chopping or a weapon for defense. Once they equip an item, their hands are no longer empty - they're now holding this item, ready to use it for whatever task they have in mind.

Action name: equip


Your answer:
","Parameters:
1. ?var0 - moveable
2. ?var1 - agent
3. ?var2 - moveable

Preconditions:
```
(and
    (hypothetical ?var0)
    (is_log ?var2)
    (equipped ?var2 ?var1)
)
```

Effects:
```
(and
    (inventory ?var0)
    (is_planks ?var0)
    (handsfree ?var1)
    (not (equipped ?var2 ?var1))
    (not (hypothetical ?var0))
    (not (is_log ?var2))
)
```
","(:action equip
    :parameters (?var0 - moveable ?var1 - agent)
    :precondition (and (inventory ?var0) (handsfree ?var1))
    :effect (and (equipped ?var0 ?var1) (not (handsfree ?var1)) (not (inventory ?var0)))
)",
minecraft,equip,0.410630464553833,Semi-Hard Negative (Intra-Domain Mismatch),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: This is when the agent decides to take something out of their inventory and hold it in their hands, ready for use. It could be picking up a tool for chopping or a weapon for defense. Once they equip an item, their hands are no longer empty - they're now holding this item, ready to use it for whatever task they have in mind.

Action name: equip


Your answer:
","Parameters:
1. ?var0 - static
2. ?var1 - static

Preconditions:
```
(agent_at ?var1)
```

Effects:
```
(and
    (agent_at ?var0)
    (not (agent_at ?var1))
)
```
","(:action equip
    :parameters (?var0 - moveable ?var1 - agent)
    :precondition (and (inventory ?var0) (handsfree ?var1))
    :effect (and (equipped ?var0 ?var1) (not (handsfree ?var1)) (not (inventory ?var0)))
)",
minecraft,equip,0.6227985620498657,Semi-Hard Negative (Intra-Domain Mismatch),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: This is when the agent decides to take something out of their inventory and hold it in their hands, ready for use. It could be picking up a tool for chopping or a weapon for defense. Once they equip an item, their hands are no longer empty - they're now holding this item, ready to use it for whatever task they have in mind.

Action name: equip


Your answer:
","Parameters:
1. ?var0 - moveable
2. ?var1 - static

Preconditions:
```
(and
    (at ?var0 ?var1)
    (agent_at ?var1)
)
```

Effects:
```
(and
    (inventory ?var0)
    (not (at ?var0 ?var1))
)
```
","(:action equip
    :parameters (?var0 - moveable ?var1 - agent)
    :precondition (and (inventory ?var0) (handsfree ?var1))
    :effect (and (equipped ?var0 ?var1) (not (handsfree ?var1)) (not (inventory ?var0)))
)",
minecraft,equip,0.48663032054901123,Semi-Hard Negative (Intra-Domain Mismatch),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: This is when the agent decides to take something out of their inventory and hold it in their hands, ready for use. It could be picking up a tool for chopping or a weapon for defense. Once they equip an item, their hands are no longer empty - they're now holding this item, ready to use it for whatever task they have in mind.

Action name: equip


Your answer:

**Explanation:**
Let's think of the action called ""equip"" like someone getting ready to use something from their backpack. Imagine you're planning to paint a picture. First, you need to make sure you have a paintbrush in your backpack (this is similar to the ""inventory"" in our scenario). You also need to make sure your hand is free to hold the paintbrush (like the ""handsfree"" condition).

In the ""equip"" action in this Minecraft-like environment, two main things need to happen before the action can take place:
1. **The item is in the inventory** - This is just like making sure the paintbrush is in your backpack. The precondition `(inventory ?var0)` confirms that the item you want to use is actually with you, stored safely in your inventory.
2. **The agent's hands are free** - This means you aren't holding anything else. The precondition `(handsfree ?var1)` checks that your hands (or the agent's hands, in this case) are empty and ready to hold something new.

When you decide to ""equip"" or start using the item, several things change:
- **The item is now equipped** - This means the item is in your hand and ready to use, similar to how you would hold a paintbrush when you're ready to paint. This is shown by the effect `(equipped ?var0 ?var1)`.
- **Your hand is no longer free** - Just like when you pick up the paintbrush, your hand isn't empty anymore. This is why the effect includes `(not (handsfree ?var1))`.
- **The item is no longer just in the inventory** - Since you're now holding the item, it's not just sitting in your backpack. This change is represented by `(not (inventory ?var0))`.

These changes ensure that the action of equipping something is logical and makes sense in the environment, just like how you'd logically take a paintbrush out of your backpack to use it.","Parameters:
1. ?var0 - moveable
2. ?var1 - agent

Preconditions:
```
(equipped ?var0 ?var1)
```

Effects:
```
(and
    (inventory ?var0)
    (not (equipped ?var0 ?var1))
    (handsfree ?var1)
)
```
","(:action equip
    :parameters (?var0 - moveable ?var1 - agent)
    :precondition (and (inventory ?var0) (handsfree ?var1))
    :effect (and (equipped ?var0 ?var1) (not (handsfree ?var1)) (not (inventory ?var0)))
)",
minecraft,equip,0.7756763100624084,Semi-Hard Negative (Intra-Domain Mismatch),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: This is when the agent decides to take something out of their inventory and hold it in their hands, ready for use. It could be picking up a tool for chopping or a weapon for defense. Once they equip an item, their hands are no longer empty - they're now holding this item, ready to use it for whatever task they have in mind.

Action name: equip


Your answer:

**Explanation:**
Let's think of the action called ""equip"" like someone getting ready to use something from their backpack. Imagine you're planning to paint a picture. First, you need to make sure you have a paintbrush in your backpack (this is similar to the ""inventory"" in our scenario). You also need to make sure your hand is free to hold the paintbrush (like the ""handsfree"" condition).

In the ""equip"" action in this Minecraft-like environment, two main things need to happen before the action can take place:
1. **The item is in the inventory** - This is just like making sure the paintbrush is in your backpack. The precondition `(inventory ?var0)` confirms that the item you want to use is actually with you, stored safely in your inventory.
2. **The agent's hands are free** - This means you aren't holding anything else. The precondition `(handsfree ?var1)` checks that your hands (or the agent's hands, in this case) are empty and ready to hold something new.

When you decide to ""equip"" or start using the item, several things change:
- **The item is now equipped** - This means the item is in your hand and ready to use, similar to how you would hold a paintbrush when you're ready to paint. This is shown by the effect `(equipped ?var0 ?var1)`.
- **Your hand is no longer free** - Just like when you pick up the paintbrush, your hand isn't empty anymore. This is why the effect includes `(not (handsfree ?var1))`.
- **The item is no longer just in the inventory** - Since you're now holding the item, it's not just sitting in your backpack. This change is represented by `(not (inventory ?var0))`.

These changes ensure that the action of equipping something is logical and makes sense in the environment, just like how you'd logically take a paintbrush out of your backpack to use it.","Parameters:
1. ?var0 - moveable
2. ?var1 - agent
3. ?var2 - moveable

Preconditions:
```
(and
    (hypothetical ?var0)
    (is_log ?var2)
    (equipped ?var2 ?var1)
)
```

Effects:
```
(and
    (inventory ?var0)
    (is_planks ?var0)
    (handsfree ?var1)
    (not (equipped ?var2 ?var1))
    (not (hypothetical ?var0))
    (not (is_log ?var2))
)
```
","(:action equip
    :parameters (?var0 - moveable ?var1 - agent)
    :precondition (and (inventory ?var0) (handsfree ?var1))
    :effect (and (equipped ?var0 ?var1) (not (handsfree ?var1)) (not (inventory ?var0)))
)",
minecraft,equip,0.410630464553833,Semi-Hard Negative (Intra-Domain Mismatch),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: This is when the agent decides to take something out of their inventory and hold it in their hands, ready for use. It could be picking up a tool for chopping or a weapon for defense. Once they equip an item, their hands are no longer empty - they're now holding this item, ready to use it for whatever task they have in mind.

Action name: equip


Your answer:

**Explanation:**
Let's think of the action called ""equip"" like someone getting ready to use something from their backpack. Imagine you're planning to paint a picture. First, you need to make sure you have a paintbrush in your backpack (this is similar to the ""inventory"" in our scenario). You also need to make sure your hand is free to hold the paintbrush (like the ""handsfree"" condition).

In the ""equip"" action in this Minecraft-like environment, two main things need to happen before the action can take place:
1. **The item is in the inventory** - This is just like making sure the paintbrush is in your backpack. The precondition `(inventory ?var0)` confirms that the item you want to use is actually with you, stored safely in your inventory.
2. **The agent's hands are free** - This means you aren't holding anything else. The precondition `(handsfree ?var1)` checks that your hands (or the agent's hands, in this case) are empty and ready to hold something new.

When you decide to ""equip"" or start using the item, several things change:
- **The item is now equipped** - This means the item is in your hand and ready to use, similar to how you would hold a paintbrush when you're ready to paint. This is shown by the effect `(equipped ?var0 ?var1)`.
- **Your hand is no longer free** - Just like when you pick up the paintbrush, your hand isn't empty anymore. This is why the effect includes `(not (handsfree ?var1))`.
- **The item is no longer just in the inventory** - Since you're now holding the item, it's not just sitting in your backpack. This change is represented by `(not (inventory ?var0))`.

These changes ensure that the action of equipping something is logical and makes sense in the environment, just like how you'd logically take a paintbrush out of your backpack to use it.","Parameters:
1. ?var0 - static
2. ?var1 - static

Preconditions:
```
(agent_at ?var1)
```

Effects:
```
(and
    (agent_at ?var0)
    (not (agent_at ?var1))
)
```
","(:action equip
    :parameters (?var0 - moveable ?var1 - agent)
    :precondition (and (inventory ?var0) (handsfree ?var1))
    :effect (and (equipped ?var0 ?var1) (not (handsfree ?var1)) (not (inventory ?var0)))
)",
minecraft,equip,0.6227985620498657,Semi-Hard Negative (Intra-Domain Mismatch),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: This is when the agent decides to take something out of their inventory and hold it in their hands, ready for use. It could be picking up a tool for chopping or a weapon for defense. Once they equip an item, their hands are no longer empty - they're now holding this item, ready to use it for whatever task they have in mind.

Action name: equip


Your answer:

**Explanation:**
Let's think of the action called ""equip"" like someone getting ready to use something from their backpack. Imagine you're planning to paint a picture. First, you need to make sure you have a paintbrush in your backpack (this is similar to the ""inventory"" in our scenario). You also need to make sure your hand is free to hold the paintbrush (like the ""handsfree"" condition).

In the ""equip"" action in this Minecraft-like environment, two main things need to happen before the action can take place:
1. **The item is in the inventory** - This is just like making sure the paintbrush is in your backpack. The precondition `(inventory ?var0)` confirms that the item you want to use is actually with you, stored safely in your inventory.
2. **The agent's hands are free** - This means you aren't holding anything else. The precondition `(handsfree ?var1)` checks that your hands (or the agent's hands, in this case) are empty and ready to hold something new.

When you decide to ""equip"" or start using the item, several things change:
- **The item is now equipped** - This means the item is in your hand and ready to use, similar to how you would hold a paintbrush when you're ready to paint. This is shown by the effect `(equipped ?var0 ?var1)`.
- **Your hand is no longer free** - Just like when you pick up the paintbrush, your hand isn't empty anymore. This is why the effect includes `(not (handsfree ?var1))`.
- **The item is no longer just in the inventory** - Since you're now holding the item, it's not just sitting in your backpack. This change is represented by `(not (inventory ?var0))`.

These changes ensure that the action of equipping something is logical and makes sense in the environment, just like how you'd logically take a paintbrush out of your backpack to use it.","Parameters:
1. ?var0 - moveable
2. ?var1 - static

Preconditions:
```
(and
    (at ?var0 ?var1)
    (agent_at ?var1)
)
```

Effects:
```
(and
    (inventory ?var0)
    (not (at ?var0 ?var1))
)
```
","(:action equip
    :parameters (?var0 - moveable ?var1 - agent)
    :precondition (and (inventory ?var0) (handsfree ?var1))
    :effect (and (equipped ?var0 ?var1) (not (handsfree ?var1)) (not (inventory ?var0)))
)",
minecraft,equip,0.5239914655685425,Semi-Hard Negative (Intra-Domain Mismatch),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: This is when the agent decides to take something out of their inventory and hold it in their hands, ready for use. It could be picking up a tool for chopping or a weapon for defense. Once they equip an item, their hands are no longer empty - they're now holding this item, ready to use it for whatever task they have in mind.

Action name: equip


Your answer:
","**Explanation:** Let's imagine you're playing a game similar to Minecraft. In this game, you have an action called ""recall,"" which lets you move an item you are holding directly into your backpack, making your hands empty again. To understand how this action works in the game's programming language (PDDL), let's break down the requirements and results of this action step-by-step.

1. **Precondition (What needs to be true before the action?):** 
   The precondition for the ""recall"" action is `(equipped ?var0 ?var1)`. This simply means that the item (`?var0`) must be currently held (equipped) by the player (`?var1`). Think of it as checking if you really have the axe in your hand before you can put it away.

2. **Effect (What happens after the action is done?):** 
   The effects of this action are several:
   - `(inventory ?var0)`: The item you were holding is now in your inventory. This is like saying, ""Okay, the axe is now in my backpack.""
   - `(not (equipped ?var0 ?var1))`: You are no longer holding the item. This ensures that the game knows the axe is no longer in your hand.
   - `(handsfree ?var1)`: Your hands are now empty. This part is like confirming that your hands are free, ready to grab or use something else.

By setting these preconditions and effects, the game ensures that the action of recalling an item (like teleporting your axe to your backpack) is logical and consistent with the game's rules. You need to be holding the item first to store it away, and after storing it, your hands should indeed be empty, ready for the next task. This keeps the game from getting confused, like trying to put away an axe you aren’t holding or ending up with an axe still in your hand after you've tried to store it.

In summary, the ""recall"" action in the game ensures everything happens in an orderly and expected manner, making your gameplay experience smooth and realistic within the game's world.
Parameters:
1. ?var0 - moveable
2. ?var1 - agent

Preconditions:
```
(equipped ?var0 ?var1)
```

Effects:
```
(and
    (inventory ?var0)
    (not (equipped ?var0 ?var1))
    (handsfree ?var1)
)
```
","(:action equip
    :parameters (?var0 - moveable ?var1 - agent)
    :precondition (and (inventory ?var0) (handsfree ?var1))
    :effect (and (equipped ?var0 ?var1) (not (handsfree ?var1)) (not (inventory ?var0)))
)",
minecraft,equip,0.6813176870346069,Semi-Hard Negative (Intra-Domain Mismatch),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: This is when the agent decides to take something out of their inventory and hold it in their hands, ready for use. It could be picking up a tool for chopping or a weapon for defense. Once they equip an item, their hands are no longer empty - they're now holding this item, ready to use it for whatever task they have in mind.

Action name: equip


Your answer:
","**Explanation:**
Let's imagine that in the world of Minecraft, the agent (like a player) wants to craft planks from a log. Think of it like a cook needing specific ingredients and tools to make a meal.

In our PDDL model, the action named ""craft_plank"" follows a similar thought process. Here's how the description of the world leads to the rules in our model:

1. **Preconditions**: Before crafting, certain conditions must be met:
   - The agent must have a log that they are actually holding. This is represented by `(equipped ?var2 ?var1)` meaning the log (`?var2`) is equipped by the agent (`?var1`).
   - The log must be a real log, confirmed by `(is_log ?var2)`.
   - We also see `(hypothetical ?var0)`. Here, the planks that will be created are initially just an idea (hypothetical) before they become real.

2. **Effects**: After the action is performed, we expect changes:
   - The hypothetical planks become real, shown by `(inventory ?var0)` which means the planks (`?var0`) are now in the agent's inventory.
   - They are identified as planks with `(is_planks ?var0)`.
   - The agent's hands become free `(handsfree ?var1)` because the log they were holding is now transformed into planks.
   - The log is no longer equipped or identified as a log, shown by `(not (equipped ?var2 ?var1))` and `(not (is_log ?var2))`. This indicates the log has been used up.

This schema carefully makes sure that the agent can only craft planks if they have a log to start with, and it accounts for what happens to the log and the newly created planks. It's much like ensuring you have flour before you bake a cake, and then, once the cake is baked, you no longer have just flour but a delicious cake instead!
Parameters:
1. ?var0 - moveable
2. ?var1 - agent
3. ?var2 - moveable

Preconditions:
```
(and
    (hypothetical ?var0)
    (is_log ?var2)
    (equipped ?var2 ?var1)
)
```

Effects:
```
(and
    (inventory ?var0)
    (is_planks ?var0)
    (handsfree ?var1)
    (not (equipped ?var2 ?var1))
    (not (hypothetical ?var0))
    (not (is_log ?var2))
)
```
","(:action equip
    :parameters (?var0 - moveable ?var1 - agent)
    :precondition (and (inventory ?var0) (handsfree ?var1))
    :effect (and (equipped ?var0 ?var1) (not (handsfree ?var1)) (not (inventory ?var0)))
)",
minecraft,equip,0.57680344581604,Semi-Hard Negative (Intra-Domain Mismatch),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: This is when the agent decides to take something out of their inventory and hold it in their hands, ready for use. It could be picking up a tool for chopping or a weapon for defense. Once they equip an item, their hands are no longer empty - they're now holding this item, ready to use it for whatever task they have in mind.

Action name: equip


Your answer:
","**Explanation:**
Let's think about the action called ""move"" in a Minecraft-like game, where the goal is to get an agent (like a player) from one place to another. The PDDL action schema you're asking about is designed to handle this simple yet crucial task.

In the action schema, we have two parameters: `?var0` and `?var1`, which are both locations. You can think of `?var0` as the new location where the agent wants to go, and `?var1` as the current location where the agent is starting from.

**Preconditions:** The precondition for the ""move"" action is `(agent_at ?var1)`. This just means that before the agent can move, it must be verified that the agent is actually at the starting location (`?var1`). It’s similar to checking if you are really at home before you walk to the park.

**Effects:** After the agent moves, we need to update the agent's location in the game. This is what the effects in the action schema do:
- `(agent_at ?var0)` says that the agent is now at the new location (`?var0`), like saying, ""Now, I’m at the park.""
- `(not (agent_at ?var1))` means that the agent is no longer at the starting location (`?var1`), similar to saying, ""I'm no longer at home.""

This change in the agent's location is crucial for the game to keep track of where the agent is at any moment, which affects what the agent can interact with or what actions they can perform next. The effect ensures the game world is accurately updated following the agent's movement, and no confusion arises about where the agent is located. 

So, in simple terms, the action ""move"" in this game ensures that when the agent moves from one spot to another, the game correctly recognizes this change and updates the world accordingly.
Parameters:
1. ?var0 - static
2. ?var1 - static

Preconditions:
```
(agent_at ?var1)
```

Effects:
```
(and
    (agent_at ?var0)
    (not (agent_at ?var1))
)
```
","(:action equip
    :parameters (?var0 - moveable ?var1 - agent)
    :precondition (and (inventory ?var0) (handsfree ?var1))
    :effect (and (equipped ?var0 ?var1) (not (handsfree ?var1)) (not (inventory ?var0)))
)",
minecraft,equip,0.5246511101722717,Semi-Hard Negative (Intra-Domain Mismatch),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: This is when the agent decides to take something out of their inventory and hold it in their hands, ready for use. It could be picking up a tool for chopping or a weapon for defense. Once they equip an item, their hands are no longer empty - they're now holding this item, ready to use it for whatever task they have in mind.

Action name: equip


Your answer:
","**Explanation:**

Let's imagine you're in a simplified game environment similar to Minecraft, where your goal is to gather resources like fruits or tools. In this game, to collect an item, you'd first need to be at the same location as the item. This ensures you can actually reach it to pick it up.

So, in the PDDL (which is a planning language used to describe tasks and environments in a structured way), the `pick` action is defined to help you collect these items. Here's why the action is set up this way:

1. **Preconditions (the must-haves before acting)**:
   - `(at ?var0 ?var1)`: This means the item (`?var0`) must be at your current location (`?var1`). Think of it as seeing a piece of fruit right at your feet. You need to be where the fruit is to pick it up.
   - `(agent_at ?var1)`: This specifies that you (the agent) must also be at that specific location (`?var1`). Just like in real life, you can't pick up something if you're not right there with it.

2. **Effects (what happens after the action)**:
   - `(inventory ?var0)`: Once you pick up the item, it moves into your inventory. This is like putting the fruit into your backpack.
   - `(not (at ?var0 ?var1))`: This indicates that the item is no longer lying on the ground at that location. It’s like saying, now that the fruit is in your backpack, it's not on the ground anymore.

This setup ensures that you can only pick up items that are within your immediate reach and that collecting an item changes its status from being 'on the ground' to being 'in your inventory'. It's a simple but effective way to manage resources in the game, making sure everything happens in a logical and realistic manner.
Parameters:
1. ?var0 - moveable
2. ?var1 - static

Preconditions:
```
(and
    (at ?var0 ?var1)
    (agent_at ?var1)
)
```

Effects:
```
(and
    (inventory ?var0)
    (not (at ?var0 ?var1))
)
```
","(:action equip
    :parameters (?var0 - moveable ?var1 - agent)
    :precondition (and (inventory ?var0) (handsfree ?var1))
    :effect (and (equipped ?var0 ?var1) (not (handsfree ?var1)) (not (inventory ?var0)))
)",
minecraft,equip,0.34249353408813477,Hard Negative (Manipulated Action),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: This is when the agent decides to take something out of their inventory and hold it in their hands, ready for use. It could be picking up a tool for chopping or a weapon for defense. Once they equip an item, their hands are no longer empty - they're now holding this item, ready to use it for whatever task they have in mind.

Action name: equip


Your answer:
","Parameters:
1. ?var0 - moveable
2. ?var1 - agent

Preconditions:
```
(and
    (equipped ?var0 ?var1)
    (not (handsfree ?var1))
)
```

Effects:
```
(and
    (handsfree ?var1)
    (inventory ?var0)
    (not (inventory ?var0))
)
```
","(:action equip
    :parameters (?var0 - moveable ?var1 - agent)
    :precondition (and (inventory ?var0) (handsfree ?var1))
    :effect (and (equipped ?var0 ?var1) (not (handsfree ?var1)) (not (inventory ?var0)))
)","swap (handsfree ?var1) with (equipped ?var0 ?var1)
swap (inventory ?var0) with (not (handsfree ?var1))
"
minecraft,equip,0.3869786262512207,Hard Negative (Manipulated Action),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: This is when the agent decides to take something out of their inventory and hold it in their hands, ready for use. It could be picking up a tool for chopping or a weapon for defense. Once they equip an item, their hands are no longer empty - they're now holding this item, ready to use it for whatever task they have in mind.

Action name: equip


Your answer:
","Parameters:
1. ?var0 - moveable
2. ?var1 - agent

Preconditions:
```
(and
    (equipped ?var0 ?var1)
    (handsfree ?var1)
)
```

Effects:
```
(and
    (inventory ?var0)
    (not (inventory ?var0))
)
```
","(:action equip
    :parameters (?var0 - moveable ?var1 - agent)
    :precondition (and (inventory ?var0) (handsfree ?var1))
    :effect (and (equipped ?var0 ?var1) (not (handsfree ?var1)) (not (inventory ?var0)))
)","swap (inventory ?var0) with (equipped ?var0 ?var1)
remove (not (handsfree ?var1)) from effects
"
minecraft,equip,0.6308014392852783,Hard Negative (Manipulated Action),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: This is when the agent decides to take something out of their inventory and hold it in their hands, ready for use. It could be picking up a tool for chopping or a weapon for defense. Once they equip an item, their hands are no longer empty - they're now holding this item, ready to use it for whatever task they have in mind.

Action name: equip


Your answer:
","Parameters:
1. ?var0 - moveable
2. ?var1 - agent

Preconditions:
```
(and
    (inventory ?var0)
    (handsfree ?var1)
)
```

Effects:
```
(and
    (handsfree ?var1)
    (equipped ?var0 ?var1)
    (not (inventory ?var0))
)
```
","(:action equip
    :parameters (?var0 - moveable ?var1 - agent)
    :precondition (and (inventory ?var0) (handsfree ?var1))
    :effect (and (equipped ?var0 ?var1) (not (handsfree ?var1)) (not (inventory ?var0)))
)","negate (not (handsfree ?var1)) in effects
"
minecraft,equip,0.23837918043136597,Hard Negative (Manipulated Action),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: This is when the agent decides to take something out of their inventory and hold it in their hands, ready for use. It could be picking up a tool for chopping or a weapon for defense. Once they equip an item, their hands are no longer empty - they're now holding this item, ready to use it for whatever task they have in mind.

Action name: equip


Your answer:
","Parameters:
1. ?var0 - moveable
2. ?var1 - agent

Preconditions:
```
(and
    (not (inventory ?var0))
    (inventory ?var0)
)
```

Effects:
```
(and
    (handsfree ?var1)
    (equipped ?var0 ?var1)
    (not (handsfree ?var1))
)
```
","(:action equip
    :parameters (?var0 - moveable ?var1 - agent)
    :precondition (and (inventory ?var0) (handsfree ?var1))
    :effect (and (equipped ?var0 ?var1) (not (handsfree ?var1)) (not (inventory ?var0)))
)","swap (handsfree ?var1) with (not (inventory ?var0))
"
minecraft,equip,0.20948392152786255,Hard Negative (Manipulated Action),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: This is when the agent decides to take something out of their inventory and hold it in their hands, ready for use. It could be picking up a tool for chopping or a weapon for defense. Once they equip an item, their hands are no longer empty - they're now holding this item, ready to use it for whatever task they have in mind.

Action name: equip


Your answer:
","Parameters:
1. ?var0 - moveable
2. ?var1 - agent

Preconditions:
```
(handsfree ?var1)
```

Effects:
```
(and
    (equipped ?var0 ?var1)
    (not (handsfree ?var1))
    (not (inventory ?var0))
)
```
","(:action equip
    :parameters (?var0 - moveable ?var1 - agent)
    :precondition (and (inventory ?var0) (handsfree ?var1))
    :effect (and (equipped ?var0 ?var1) (not (handsfree ?var1)) (not (inventory ?var0)))
)","remove (inventory ?var0) from preconditions
"
minecraft,equip,0.15646865963935852,Hard Negative (Manipulated Action),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: This is when the agent decides to take something out of their inventory and hold it in their hands, ready for use. It could be picking up a tool for chopping or a weapon for defense. Once they equip an item, their hands are no longer empty - they're now holding this item, ready to use it for whatever task they have in mind.

Action name: equip


Your answer:
","Parameters:
1. ?var0 - moveable
2. ?var1 - agent

Preconditions:
```
(not (inventory ?var0))
```

Effects:
```
(and
    (handsfree ?var1)
    (equipped ?var0 ?var1)
    (not (handsfree ?var1))
)
```
","(:action equip
    :parameters (?var0 - moveable ?var1 - agent)
    :precondition (and (inventory ?var0) (handsfree ?var1))
    :effect (and (equipped ?var0 ?var1) (not (handsfree ?var1)) (not (inventory ?var0)))
)","swap (handsfree ?var1) with (not (inventory ?var0))
negate (inventory ?var0) in preconditions
"
minecraft,equip,0.3251018226146698,Hard Negative (Manipulated Action),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: This is when the agent decides to take something out of their inventory and hold it in their hands, ready for use. It could be picking up a tool for chopping or a weapon for defense. Once they equip an item, their hands are no longer empty - they're now holding this item, ready to use it for whatever task they have in mind.

Action name: equip


Your answer:
","Parameters:
1. ?var0 - moveable
2. ?var1 - agent

Preconditions:
```
(and
    (inventory ?var0)
    (handsfree ?var1)
)
```

Effects:
```
(and
    (not (equipped ?var0 ?var1))
    (not (handsfree ?var1))
    (not (inventory ?var0))
)
```
","(:action equip
    :parameters (?var0 - moveable ?var1 - agent)
    :precondition (and (inventory ?var0) (handsfree ?var1))
    :effect (and (equipped ?var0 ?var1) (not (handsfree ?var1)) (not (inventory ?var0)))
)","negate (equipped ?var0 ?var1) in effects
"
minecraft,equip,0.3251018226146698,Hard Negative (Manipulated Action),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: This is when the agent decides to take something out of their inventory and hold it in their hands, ready for use. It could be picking up a tool for chopping or a weapon for defense. Once they equip an item, their hands are no longer empty - they're now holding this item, ready to use it for whatever task they have in mind.

Action name: equip


Your answer:
","Parameters:
1. ?var0 - moveable
2. ?var1 - agent

Preconditions:
```
(and
    (inventory ?var0)
    (handsfree ?var1)
)
```

Effects:
```
(and
    (not (equipped ?var0 ?var1))
    (not (handsfree ?var1))
    (not (inventory ?var0))
)
```
","(:action equip
    :parameters (?var0 - moveable ?var1 - agent)
    :precondition (and (inventory ?var0) (handsfree ?var1))
    :effect (and (equipped ?var0 ?var1) (not (handsfree ?var1)) (not (inventory ?var0)))
)","negate (equipped ?var0 ?var1) in effects
"
minecraft,equip,0.3363533616065979,Hard Negative (Manipulated Action),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: This is when the agent decides to take something out of their inventory and hold it in their hands, ready for use. It could be picking up a tool for chopping or a weapon for defense. Once they equip an item, their hands are no longer empty - they're now holding this item, ready to use it for whatever task they have in mind.

Action name: equip


Your answer:
","Parameters:
1. ?var0 - moveable
2. ?var1 - agent

Preconditions:
```
(and
    (not (handsfree ?var1))
    (inventory ?var0)
)
```

Effects:
```
(and
    (equipped ?var0 ?var1)
    (not (handsfree ?var1))
    (not (inventory ?var0))
)
```
","(:action equip
    :parameters (?var0 - moveable ?var1 - agent)
    :precondition (and (inventory ?var0) (handsfree ?var1))
    :effect (and (equipped ?var0 ?var1) (not (handsfree ?var1)) (not (inventory ?var0)))
)","negate (handsfree ?var1) in preconditions
"
minecraft,equip,0.23545698821544647,Hard Negative (Manipulated Action),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: This is when the agent decides to take something out of their inventory and hold it in their hands, ready for use. It could be picking up a tool for chopping or a weapon for defense. Once they equip an item, their hands are no longer empty - they're now holding this item, ready to use it for whatever task they have in mind.

Action name: equip


Your answer:
","Parameters:
1. ?var0 - moveable
2. ?var1 - agent

Preconditions:
```
(inventory ?var0)
```

Effects:
```
(and
    (equipped ?var0 ?var1)
    (not (handsfree ?var1))
    (not (inventory ?var0))
)
```
","(:action equip
    :parameters (?var0 - moveable ?var1 - agent)
    :precondition (and (inventory ?var0) (handsfree ?var1))
    :effect (and (equipped ?var0 ?var1) (not (handsfree ?var1)) (not (inventory ?var0)))
)","remove (handsfree ?var1) from preconditions
"
minecraft,equip,0.22491732239723206,Hard Negative (Manipulated Action),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: This is when the agent decides to take something out of their inventory and hold it in their hands, ready for use. It could be picking up a tool for chopping or a weapon for defense. Once they equip an item, their hands are no longer empty - they're now holding this item, ready to use it for whatever task they have in mind.

Action name: equip


Your answer:

**Explanation:**
Let's think of the action called ""equip"" like someone getting ready to use something from their backpack. Imagine you're planning to paint a picture. First, you need to make sure you have a paintbrush in your backpack (this is similar to the ""inventory"" in our scenario). You also need to make sure your hand is free to hold the paintbrush (like the ""handsfree"" condition).

In the ""equip"" action in this Minecraft-like environment, two main things need to happen before the action can take place:
1. **The item is in the inventory** - This is just like making sure the paintbrush is in your backpack. The precondition `(inventory ?var0)` confirms that the item you want to use is actually with you, stored safely in your inventory.
2. **The agent's hands are free** - This means you aren't holding anything else. The precondition `(handsfree ?var1)` checks that your hands (or the agent's hands, in this case) are empty and ready to hold something new.

When you decide to ""equip"" or start using the item, several things change:
- **The item is now equipped** - This means the item is in your hand and ready to use, similar to how you would hold a paintbrush when you're ready to paint. This is shown by the effect `(equipped ?var0 ?var1)`.
- **Your hand is no longer free** - Just like when you pick up the paintbrush, your hand isn't empty anymore. This is why the effect includes `(not (handsfree ?var1))`.
- **The item is no longer just in the inventory** - Since you're now holding the item, it's not just sitting in your backpack. This change is represented by `(not (inventory ?var0))`.

These changes ensure that the action of equipping something is logical and makes sense in the environment, just like how you'd logically take a paintbrush out of your backpack to use it.","Parameters:
1. ?var0 - moveable
2. ?var1 - agent

Preconditions:
```
(and
    (not (handsfree ?var1))
    (inventory ?var0)
)
```

Effects:
```
(and
    (handsfree ?var1)
    (not (inventory ?var0))
)
```
","(:action equip
    :parameters (?var0 - moveable ?var1 - agent)
    :precondition (and (inventory ?var0) (handsfree ?var1))
    :effect (and (equipped ?var0 ?var1) (not (handsfree ?var1)) (not (inventory ?var0)))
)","swap (handsfree ?var1) with (not (handsfree ?var1))
remove (equipped ?var0 ?var1) from effects
"
minecraft,equip,0.3277295231819153,Hard Negative (Manipulated Action),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: This is when the agent decides to take something out of their inventory and hold it in their hands, ready for use. It could be picking up a tool for chopping or a weapon for defense. Once they equip an item, their hands are no longer empty - they're now holding this item, ready to use it for whatever task they have in mind.

Action name: equip


Your answer:

**Explanation:**
Let's think of the action called ""equip"" like someone getting ready to use something from their backpack. Imagine you're planning to paint a picture. First, you need to make sure you have a paintbrush in your backpack (this is similar to the ""inventory"" in our scenario). You also need to make sure your hand is free to hold the paintbrush (like the ""handsfree"" condition).

In the ""equip"" action in this Minecraft-like environment, two main things need to happen before the action can take place:
1. **The item is in the inventory** - This is just like making sure the paintbrush is in your backpack. The precondition `(inventory ?var0)` confirms that the item you want to use is actually with you, stored safely in your inventory.
2. **The agent's hands are free** - This means you aren't holding anything else. The precondition `(handsfree ?var1)` checks that your hands (or the agent's hands, in this case) are empty and ready to hold something new.

When you decide to ""equip"" or start using the item, several things change:
- **The item is now equipped** - This means the item is in your hand and ready to use, similar to how you would hold a paintbrush when you're ready to paint. This is shown by the effect `(equipped ?var0 ?var1)`.
- **Your hand is no longer free** - Just like when you pick up the paintbrush, your hand isn't empty anymore. This is why the effect includes `(not (handsfree ?var1))`.
- **The item is no longer just in the inventory** - Since you're now holding the item, it's not just sitting in your backpack. This change is represented by `(not (inventory ?var0))`.

These changes ensure that the action of equipping something is logical and makes sense in the environment, just like how you'd logically take a paintbrush out of your backpack to use it.","Parameters:
1. ?var0 - moveable
2. ?var1 - agent

Preconditions:
```
(inventory ?var0)
```

Effects:
```
(and
    (handsfree ?var1)
    (equipped ?var0 ?var1)
    (not (inventory ?var0))
)
```
","(:action equip
    :parameters (?var0 - moveable ?var1 - agent)
    :precondition (and (inventory ?var0) (handsfree ?var1))
    :effect (and (equipped ?var0 ?var1) (not (handsfree ?var1)) (not (inventory ?var0)))
)","negate (not (handsfree ?var1)) in effects
remove (handsfree ?var1) from preconditions
"
minecraft,equip,0.26524123549461365,Hard Negative (Manipulated Action),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: This is when the agent decides to take something out of their inventory and hold it in their hands, ready for use. It could be picking up a tool for chopping or a weapon for defense. Once they equip an item, their hands are no longer empty - they're now holding this item, ready to use it for whatever task they have in mind.

Action name: equip


Your answer:

**Explanation:**
Let's think of the action called ""equip"" like someone getting ready to use something from their backpack. Imagine you're planning to paint a picture. First, you need to make sure you have a paintbrush in your backpack (this is similar to the ""inventory"" in our scenario). You also need to make sure your hand is free to hold the paintbrush (like the ""handsfree"" condition).

In the ""equip"" action in this Minecraft-like environment, two main things need to happen before the action can take place:
1. **The item is in the inventory** - This is just like making sure the paintbrush is in your backpack. The precondition `(inventory ?var0)` confirms that the item you want to use is actually with you, stored safely in your inventory.
2. **The agent's hands are free** - This means you aren't holding anything else. The precondition `(handsfree ?var1)` checks that your hands (or the agent's hands, in this case) are empty and ready to hold something new.

When you decide to ""equip"" or start using the item, several things change:
- **The item is now equipped** - This means the item is in your hand and ready to use, similar to how you would hold a paintbrush when you're ready to paint. This is shown by the effect `(equipped ?var0 ?var1)`.
- **Your hand is no longer free** - Just like when you pick up the paintbrush, your hand isn't empty anymore. This is why the effect includes `(not (handsfree ?var1))`.
- **The item is no longer just in the inventory** - Since you're now holding the item, it's not just sitting in your backpack. This change is represented by `(not (inventory ?var0))`.

These changes ensure that the action of equipping something is logical and makes sense in the environment, just like how you'd logically take a paintbrush out of your backpack to use it.","Parameters:
1. ?var0 - moveable
2. ?var1 - agent

Preconditions:
```
(and
    (not (handsfree ?var1))
    (handsfree ?var1)
)
```

Effects:
```
(and
    (inventory ?var0)
    (inventory ?var0)
    (equipped ?var0 ?var1)
)
```
","(:action equip
    :parameters (?var0 - moveable ?var1 - agent)
    :precondition (and (inventory ?var0) (handsfree ?var1))
    :effect (and (equipped ?var0 ?var1) (not (handsfree ?var1)) (not (inventory ?var0)))
)","negate (not (inventory ?var0)) in effects
swap (inventory ?var0) with (not (handsfree ?var1))
"
minecraft,equip,0.33514752984046936,Hard Negative (Manipulated Action),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: This is when the agent decides to take something out of their inventory and hold it in their hands, ready for use. It could be picking up a tool for chopping or a weapon for defense. Once they equip an item, their hands are no longer empty - they're now holding this item, ready to use it for whatever task they have in mind.

Action name: equip


Your answer:

**Explanation:**
Let's think of the action called ""equip"" like someone getting ready to use something from their backpack. Imagine you're planning to paint a picture. First, you need to make sure you have a paintbrush in your backpack (this is similar to the ""inventory"" in our scenario). You also need to make sure your hand is free to hold the paintbrush (like the ""handsfree"" condition).

In the ""equip"" action in this Minecraft-like environment, two main things need to happen before the action can take place:
1. **The item is in the inventory** - This is just like making sure the paintbrush is in your backpack. The precondition `(inventory ?var0)` confirms that the item you want to use is actually with you, stored safely in your inventory.
2. **The agent's hands are free** - This means you aren't holding anything else. The precondition `(handsfree ?var1)` checks that your hands (or the agent's hands, in this case) are empty and ready to hold something new.

When you decide to ""equip"" or start using the item, several things change:
- **The item is now equipped** - This means the item is in your hand and ready to use, similar to how you would hold a paintbrush when you're ready to paint. This is shown by the effect `(equipped ?var0 ?var1)`.
- **Your hand is no longer free** - Just like when you pick up the paintbrush, your hand isn't empty anymore. This is why the effect includes `(not (handsfree ?var1))`.
- **The item is no longer just in the inventory** - Since you're now holding the item, it's not just sitting in your backpack. This change is represented by `(not (inventory ?var0))`.

These changes ensure that the action of equipping something is logical and makes sense in the environment, just like how you'd logically take a paintbrush out of your backpack to use it.","Parameters:
1. ?var0 - moveable
2. ?var1 - agent

Preconditions:
```
(and
    (equipped ?var0 ?var1)
    (not (inventory ?var0))
)
```

Effects:
```
(and
    (inventory ?var0)
    (handsfree ?var1)
    (not (handsfree ?var1))
)
```
","(:action equip
    :parameters (?var0 - moveable ?var1 - agent)
    :precondition (and (inventory ?var0) (handsfree ?var1))
    :effect (and (equipped ?var0 ?var1) (not (handsfree ?var1)) (not (inventory ?var0)))
)","swap (inventory ?var0) with (equipped ?var0 ?var1)
swap (handsfree ?var1) with (not (inventory ?var0))
"
minecraft,equip,0.5108113884925842,Hard Negative (Manipulated Action),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: This is when the agent decides to take something out of their inventory and hold it in their hands, ready for use. It could be picking up a tool for chopping or a weapon for defense. Once they equip an item, their hands are no longer empty - they're now holding this item, ready to use it for whatever task they have in mind.

Action name: equip


Your answer:

**Explanation:**
Let's think of the action called ""equip"" like someone getting ready to use something from their backpack. Imagine you're planning to paint a picture. First, you need to make sure you have a paintbrush in your backpack (this is similar to the ""inventory"" in our scenario). You also need to make sure your hand is free to hold the paintbrush (like the ""handsfree"" condition).

In the ""equip"" action in this Minecraft-like environment, two main things need to happen before the action can take place:
1. **The item is in the inventory** - This is just like making sure the paintbrush is in your backpack. The precondition `(inventory ?var0)` confirms that the item you want to use is actually with you, stored safely in your inventory.
2. **The agent's hands are free** - This means you aren't holding anything else. The precondition `(handsfree ?var1)` checks that your hands (or the agent's hands, in this case) are empty and ready to hold something new.

When you decide to ""equip"" or start using the item, several things change:
- **The item is now equipped** - This means the item is in your hand and ready to use, similar to how you would hold a paintbrush when you're ready to paint. This is shown by the effect `(equipped ?var0 ?var1)`.
- **Your hand is no longer free** - Just like when you pick up the paintbrush, your hand isn't empty anymore. This is why the effect includes `(not (handsfree ?var1))`.
- **The item is no longer just in the inventory** - Since you're now holding the item, it's not just sitting in your backpack. This change is represented by `(not (inventory ?var0))`.

These changes ensure that the action of equipping something is logical and makes sense in the environment, just like how you'd logically take a paintbrush out of your backpack to use it.","Parameters:
1. ?var0 - moveable
2. ?var1 - agent

Preconditions:
```
(and
    (equipped ?var0 ?var1)
    (handsfree ?var1)
)
```

Effects:
```
(and
    (handsfree ?var1)
    (inventory ?var0)
    (not (inventory ?var0))
)
```
","(:action equip
    :parameters (?var0 - moveable ?var1 - agent)
    :precondition (and (inventory ?var0) (handsfree ?var1))
    :effect (and (equipped ?var0 ?var1) (not (handsfree ?var1)) (not (inventory ?var0)))
)","negate (not (handsfree ?var1)) in effects
swap (inventory ?var0) with (equipped ?var0 ?var1)
"
minecraft,equip,0.6173192858695984,Hard Negative (Manipulated Action),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: This is when the agent decides to take something out of their inventory and hold it in their hands, ready for use. It could be picking up a tool for chopping or a weapon for defense. Once they equip an item, their hands are no longer empty - they're now holding this item, ready to use it for whatever task they have in mind.

Action name: equip


Your answer:

**Explanation:**
Let's think of the action called ""equip"" like someone getting ready to use something from their backpack. Imagine you're planning to paint a picture. First, you need to make sure you have a paintbrush in your backpack (this is similar to the ""inventory"" in our scenario). You also need to make sure your hand is free to hold the paintbrush (like the ""handsfree"" condition).

In the ""equip"" action in this Minecraft-like environment, two main things need to happen before the action can take place:
1. **The item is in the inventory** - This is just like making sure the paintbrush is in your backpack. The precondition `(inventory ?var0)` confirms that the item you want to use is actually with you, stored safely in your inventory.
2. **The agent's hands are free** - This means you aren't holding anything else. The precondition `(handsfree ?var1)` checks that your hands (or the agent's hands, in this case) are empty and ready to hold something new.

When you decide to ""equip"" or start using the item, several things change:
- **The item is now equipped** - This means the item is in your hand and ready to use, similar to how you would hold a paintbrush when you're ready to paint. This is shown by the effect `(equipped ?var0 ?var1)`.
- **Your hand is no longer free** - Just like when you pick up the paintbrush, your hand isn't empty anymore. This is why the effect includes `(not (handsfree ?var1))`.
- **The item is no longer just in the inventory** - Since you're now holding the item, it's not just sitting in your backpack. This change is represented by `(not (inventory ?var0))`.

These changes ensure that the action of equipping something is logical and makes sense in the environment, just like how you'd logically take a paintbrush out of your backpack to use it.","Parameters:
1. ?var0 - moveable
2. ?var1 - agent

Preconditions:
```
(and
    (inventory ?var0)
    (handsfree ?var1)
)
```

Effects:
```
(and
    (not (handsfree ?var1))
    (not (inventory ?var0))
)
```
","(:action equip
    :parameters (?var0 - moveable ?var1 - agent)
    :precondition (and (inventory ?var0) (handsfree ?var1))
    :effect (and (equipped ?var0 ?var1) (not (handsfree ?var1)) (not (inventory ?var0)))
)","remove (equipped ?var0 ?var1) from effects
"
minecraft,equip,0.4318602383136749,Hard Negative (Manipulated Action),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: This is when the agent decides to take something out of their inventory and hold it in their hands, ready for use. It could be picking up a tool for chopping or a weapon for defense. Once they equip an item, their hands are no longer empty - they're now holding this item, ready to use it for whatever task they have in mind.

Action name: equip


Your answer:

**Explanation:**
Let's think of the action called ""equip"" like someone getting ready to use something from their backpack. Imagine you're planning to paint a picture. First, you need to make sure you have a paintbrush in your backpack (this is similar to the ""inventory"" in our scenario). You also need to make sure your hand is free to hold the paintbrush (like the ""handsfree"" condition).

In the ""equip"" action in this Minecraft-like environment, two main things need to happen before the action can take place:
1. **The item is in the inventory** - This is just like making sure the paintbrush is in your backpack. The precondition `(inventory ?var0)` confirms that the item you want to use is actually with you, stored safely in your inventory.
2. **The agent's hands are free** - This means you aren't holding anything else. The precondition `(handsfree ?var1)` checks that your hands (or the agent's hands, in this case) are empty and ready to hold something new.

When you decide to ""equip"" or start using the item, several things change:
- **The item is now equipped** - This means the item is in your hand and ready to use, similar to how you would hold a paintbrush when you're ready to paint. This is shown by the effect `(equipped ?var0 ?var1)`.
- **Your hand is no longer free** - Just like when you pick up the paintbrush, your hand isn't empty anymore. This is why the effect includes `(not (handsfree ?var1))`.
- **The item is no longer just in the inventory** - Since you're now holding the item, it's not just sitting in your backpack. This change is represented by `(not (inventory ?var0))`.

These changes ensure that the action of equipping something is logical and makes sense in the environment, just like how you'd logically take a paintbrush out of your backpack to use it.","Parameters:
1. ?var0 - moveable
2. ?var1 - agent

Preconditions:
```
(and
    (inventory ?var0)
    (handsfree ?var1)
)
```

Effects:
```
(and
    (inventory ?var0)
    (equipped ?var0 ?var1)
)
```
","(:action equip
    :parameters (?var0 - moveable ?var1 - agent)
    :precondition (and (inventory ?var0) (handsfree ?var1))
    :effect (and (equipped ?var0 ?var1) (not (handsfree ?var1)) (not (inventory ?var0)))
)","negate (not (inventory ?var0)) in effects
remove (not (handsfree ?var1)) from effects
"
minecraft,equip,0.44240444898605347,Hard Negative (Manipulated Action),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: This is when the agent decides to take something out of their inventory and hold it in their hands, ready for use. It could be picking up a tool for chopping or a weapon for defense. Once they equip an item, their hands are no longer empty - they're now holding this item, ready to use it for whatever task they have in mind.

Action name: equip


Your answer:

**Explanation:**
Let's think of the action called ""equip"" like someone getting ready to use something from their backpack. Imagine you're planning to paint a picture. First, you need to make sure you have a paintbrush in your backpack (this is similar to the ""inventory"" in our scenario). You also need to make sure your hand is free to hold the paintbrush (like the ""handsfree"" condition).

In the ""equip"" action in this Minecraft-like environment, two main things need to happen before the action can take place:
1. **The item is in the inventory** - This is just like making sure the paintbrush is in your backpack. The precondition `(inventory ?var0)` confirms that the item you want to use is actually with you, stored safely in your inventory.
2. **The agent's hands are free** - This means you aren't holding anything else. The precondition `(handsfree ?var1)` checks that your hands (or the agent's hands, in this case) are empty and ready to hold something new.

When you decide to ""equip"" or start using the item, several things change:
- **The item is now equipped** - This means the item is in your hand and ready to use, similar to how you would hold a paintbrush when you're ready to paint. This is shown by the effect `(equipped ?var0 ?var1)`.
- **Your hand is no longer free** - Just like when you pick up the paintbrush, your hand isn't empty anymore. This is why the effect includes `(not (handsfree ?var1))`.
- **The item is no longer just in the inventory** - Since you're now holding the item, it's not just sitting in your backpack. This change is represented by `(not (inventory ?var0))`.

These changes ensure that the action of equipping something is logical and makes sense in the environment, just like how you'd logically take a paintbrush out of your backpack to use it.","Parameters:
1. ?var0 - moveable
2. ?var1 - agent

Preconditions:
```
(and
    (equipped ?var0 ?var1)
    (inventory ?var0)
)
```

Effects:
```
(and
    (handsfree ?var1)
    (not (handsfree ?var1))
    (not (inventory ?var0))
)
```
","(:action equip
    :parameters (?var0 - moveable ?var1 - agent)
    :precondition (and (inventory ?var0) (handsfree ?var1))
    :effect (and (equipped ?var0 ?var1) (not (handsfree ?var1)) (not (inventory ?var0)))
)","swap (handsfree ?var1) with (equipped ?var0 ?var1)
"
minecraft,equip,0.6308014392852783,Hard Negative (Manipulated Action),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: This is when the agent decides to take something out of their inventory and hold it in their hands, ready for use. It could be picking up a tool for chopping or a weapon for defense. Once they equip an item, their hands are no longer empty - they're now holding this item, ready to use it for whatever task they have in mind.

Action name: equip


Your answer:

**Explanation:**
Let's think of the action called ""equip"" like someone getting ready to use something from their backpack. Imagine you're planning to paint a picture. First, you need to make sure you have a paintbrush in your backpack (this is similar to the ""inventory"" in our scenario). You also need to make sure your hand is free to hold the paintbrush (like the ""handsfree"" condition).

In the ""equip"" action in this Minecraft-like environment, two main things need to happen before the action can take place:
1. **The item is in the inventory** - This is just like making sure the paintbrush is in your backpack. The precondition `(inventory ?var0)` confirms that the item you want to use is actually with you, stored safely in your inventory.
2. **The agent's hands are free** - This means you aren't holding anything else. The precondition `(handsfree ?var1)` checks that your hands (or the agent's hands, in this case) are empty and ready to hold something new.

When you decide to ""equip"" or start using the item, several things change:
- **The item is now equipped** - This means the item is in your hand and ready to use, similar to how you would hold a paintbrush when you're ready to paint. This is shown by the effect `(equipped ?var0 ?var1)`.
- **Your hand is no longer free** - Just like when you pick up the paintbrush, your hand isn't empty anymore. This is why the effect includes `(not (handsfree ?var1))`.
- **The item is no longer just in the inventory** - Since you're now holding the item, it's not just sitting in your backpack. This change is represented by `(not (inventory ?var0))`.

These changes ensure that the action of equipping something is logical and makes sense in the environment, just like how you'd logically take a paintbrush out of your backpack to use it.","Parameters:
1. ?var0 - moveable
2. ?var1 - agent

Preconditions:
```
(and
    (inventory ?var0)
    (handsfree ?var1)
)
```

Effects:
```
(and
    (handsfree ?var1)
    (equipped ?var0 ?var1)
    (not (inventory ?var0))
)
```
","(:action equip
    :parameters (?var0 - moveable ?var1 - agent)
    :precondition (and (inventory ?var0) (handsfree ?var1))
    :effect (and (equipped ?var0 ?var1) (not (handsfree ?var1)) (not (inventory ?var0)))
)","negate (not (handsfree ?var1)) in effects
"
minecraft,equip,0.20948392152786255,Hard Negative (Manipulated Action),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: This is when the agent decides to take something out of their inventory and hold it in their hands, ready for use. It could be picking up a tool for chopping or a weapon for defense. Once they equip an item, their hands are no longer empty - they're now holding this item, ready to use it for whatever task they have in mind.

Action name: equip


Your answer:

**Explanation:**
Let's think of the action called ""equip"" like someone getting ready to use something from their backpack. Imagine you're planning to paint a picture. First, you need to make sure you have a paintbrush in your backpack (this is similar to the ""inventory"" in our scenario). You also need to make sure your hand is free to hold the paintbrush (like the ""handsfree"" condition).

In the ""equip"" action in this Minecraft-like environment, two main things need to happen before the action can take place:
1. **The item is in the inventory** - This is just like making sure the paintbrush is in your backpack. The precondition `(inventory ?var0)` confirms that the item you want to use is actually with you, stored safely in your inventory.
2. **The agent's hands are free** - This means you aren't holding anything else. The precondition `(handsfree ?var1)` checks that your hands (or the agent's hands, in this case) are empty and ready to hold something new.

When you decide to ""equip"" or start using the item, several things change:
- **The item is now equipped** - This means the item is in your hand and ready to use, similar to how you would hold a paintbrush when you're ready to paint. This is shown by the effect `(equipped ?var0 ?var1)`.
- **Your hand is no longer free** - Just like when you pick up the paintbrush, your hand isn't empty anymore. This is why the effect includes `(not (handsfree ?var1))`.
- **The item is no longer just in the inventory** - Since you're now holding the item, it's not just sitting in your backpack. This change is represented by `(not (inventory ?var0))`.

These changes ensure that the action of equipping something is logical and makes sense in the environment, just like how you'd logically take a paintbrush out of your backpack to use it.","Parameters:
1. ?var0 - moveable
2. ?var1 - agent

Preconditions:
```
(handsfree ?var1)
```

Effects:
```
(and
    (equipped ?var0 ?var1)
    (not (handsfree ?var1))
    (not (inventory ?var0))
)
```
","(:action equip
    :parameters (?var0 - moveable ?var1 - agent)
    :precondition (and (inventory ?var0) (handsfree ?var1))
    :effect (and (equipped ?var0 ?var1) (not (handsfree ?var1)) (not (inventory ?var0)))
)","remove (inventory ?var0) from preconditions
"
minecraft,equip,0.4719610810279846,Hard Negative (Manipulated Action),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: This is when the agent decides to take something out of their inventory and hold it in their hands, ready for use. It could be picking up a tool for chopping or a weapon for defense. Once they equip an item, their hands are no longer empty - they're now holding this item, ready to use it for whatever task they have in mind.

Action name: equip


Your answer:
","**Explanation:**
Let's think of the action called ""equip"" like someone getting ready to use something from their backpack. Imagine you're planning to paint a picture. First, you need to make sure you have a paintbrush in your backpack (this is similar to the ""inventory"" in our scenario). You also need to make sure your hand is free to hold the paintbrush (like the ""handsfree"" condition).

In the ""equip"" action in this Minecraft-like environment, two main things need to happen before the action can take place:
1. **The item is in the inventory** - This is just like making sure the paintbrush is in your backpack. The precondition `(inventory ?var0)` confirms that the item you want to use is actually with you, stored safely in your inventory.
2. **The agent's hands are free** - This means you aren't holding anything else. The precondition `(handsfree ?var1)` checks that your hands (or the agent's hands, in this case) are empty and ready to hold something new.

When you decide to ""equip"" or start using the item, several things change:
- **The item is now equipped** - This means the item is in your hand and ready to use, similar to how you would hold a paintbrush when you're ready to paint. This is shown by the effect `(equipped ?var0 ?var1)`.
- **Your hand is no longer free** - Just like when you pick up the paintbrush, your hand isn't empty anymore. This is why the effect includes `(not (handsfree ?var1))`.
- **The item is no longer just in the inventory** - Since you're now holding the item, it's not just sitting in your backpack. This change is represented by `(not (inventory ?var0))`.

These changes ensure that the action of equipping something is logical and makes sense in the environment, just like how you'd logically take a paintbrush out of your backpack to use it.
Parameters:
1. ?var0 - moveable
2. ?var1 - agent

Preconditions:
```
(and
    (equipped ?var0 ?var1)
    (not (handsfree ?var1))
)
```

Effects:
```
(and
    (inventory ?var0)
    (not (handsfree ?var1))
    (not (inventory ?var0))
)
```
","(:action equip
    :parameters (?var0 - moveable ?var1 - agent)
    :precondition (and (inventory ?var0) (handsfree ?var1))
    :effect (and (equipped ?var0 ?var1) (not (handsfree ?var1)) (not (inventory ?var0)))
)","swap (inventory ?var0) with (equipped ?var0 ?var1)
negate (handsfree ?var1) in preconditions
"
minecraft,equip,0.4719610810279846,Hard Negative (Manipulated Action),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: This is when the agent decides to take something out of their inventory and hold it in their hands, ready for use. It could be picking up a tool for chopping or a weapon for defense. Once they equip an item, their hands are no longer empty - they're now holding this item, ready to use it for whatever task they have in mind.

Action name: equip


Your answer:
","**Explanation:**
Let's think of the action called ""equip"" like someone getting ready to use something from their backpack. Imagine you're planning to paint a picture. First, you need to make sure you have a paintbrush in your backpack (this is similar to the ""inventory"" in our scenario). You also need to make sure your hand is free to hold the paintbrush (like the ""handsfree"" condition).

In the ""equip"" action in this Minecraft-like environment, two main things need to happen before the action can take place:
1. **The item is in the inventory** - This is just like making sure the paintbrush is in your backpack. The precondition `(inventory ?var0)` confirms that the item you want to use is actually with you, stored safely in your inventory.
2. **The agent's hands are free** - This means you aren't holding anything else. The precondition `(handsfree ?var1)` checks that your hands (or the agent's hands, in this case) are empty and ready to hold something new.

When you decide to ""equip"" or start using the item, several things change:
- **The item is now equipped** - This means the item is in your hand and ready to use, similar to how you would hold a paintbrush when you're ready to paint. This is shown by the effect `(equipped ?var0 ?var1)`.
- **Your hand is no longer free** - Just like when you pick up the paintbrush, your hand isn't empty anymore. This is why the effect includes `(not (handsfree ?var1))`.
- **The item is no longer just in the inventory** - Since you're now holding the item, it's not just sitting in your backpack. This change is represented by `(not (inventory ?var0))`.

These changes ensure that the action of equipping something is logical and makes sense in the environment, just like how you'd logically take a paintbrush out of your backpack to use it.
Parameters:
1. ?var0 - moveable
2. ?var1 - agent

Preconditions:
```
(inventory ?var0)
```

Effects:
```
(and
    (equipped ?var0 ?var1)
    (not (handsfree ?var1))
    (not (inventory ?var0))
)
```
","(:action equip
    :parameters (?var0 - moveable ?var1 - agent)
    :precondition (and (inventory ?var0) (handsfree ?var1))
    :effect (and (equipped ?var0 ?var1) (not (handsfree ?var1)) (not (inventory ?var0)))
)","remove (handsfree ?var1) from preconditions
"
minecraft,equip,0.4719610810279846,Hard Negative (Manipulated Action),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: This is when the agent decides to take something out of their inventory and hold it in their hands, ready for use. It could be picking up a tool for chopping or a weapon for defense. Once they equip an item, their hands are no longer empty - they're now holding this item, ready to use it for whatever task they have in mind.

Action name: equip


Your answer:
","**Explanation:**
Let's think of the action called ""equip"" like someone getting ready to use something from their backpack. Imagine you're planning to paint a picture. First, you need to make sure you have a paintbrush in your backpack (this is similar to the ""inventory"" in our scenario). You also need to make sure your hand is free to hold the paintbrush (like the ""handsfree"" condition).

In the ""equip"" action in this Minecraft-like environment, two main things need to happen before the action can take place:
1. **The item is in the inventory** - This is just like making sure the paintbrush is in your backpack. The precondition `(inventory ?var0)` confirms that the item you want to use is actually with you, stored safely in your inventory.
2. **The agent's hands are free** - This means you aren't holding anything else. The precondition `(handsfree ?var1)` checks that your hands (or the agent's hands, in this case) are empty and ready to hold something new.

When you decide to ""equip"" or start using the item, several things change:
- **The item is now equipped** - This means the item is in your hand and ready to use, similar to how you would hold a paintbrush when you're ready to paint. This is shown by the effect `(equipped ?var0 ?var1)`.
- **Your hand is no longer free** - Just like when you pick up the paintbrush, your hand isn't empty anymore. This is why the effect includes `(not (handsfree ?var1))`.
- **The item is no longer just in the inventory** - Since you're now holding the item, it's not just sitting in your backpack. This change is represented by `(not (inventory ?var0))`.

These changes ensure that the action of equipping something is logical and makes sense in the environment, just like how you'd logically take a paintbrush out of your backpack to use it.
Parameters:
1. ?var0 - moveable
2. ?var1 - agent

Preconditions:
```
(not (inventory ?var0))
```

Effects:
```
(and
    (handsfree ?var1)
    (equipped ?var0 ?var1)
    (not (handsfree ?var1))
)
```
","(:action equip
    :parameters (?var0 - moveable ?var1 - agent)
    :precondition (and (inventory ?var0) (handsfree ?var1))
    :effect (and (equipped ?var0 ?var1) (not (handsfree ?var1)) (not (inventory ?var0)))
)","swap (handsfree ?var1) with (not (inventory ?var0))
negate (inventory ?var0) in preconditions
"
minecraft,equip,0.4719610810279846,Hard Negative (Manipulated Action),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: This is when the agent decides to take something out of their inventory and hold it in their hands, ready for use. It could be picking up a tool for chopping or a weapon for defense. Once they equip an item, their hands are no longer empty - they're now holding this item, ready to use it for whatever task they have in mind.

Action name: equip


Your answer:
","**Explanation:**
Let's think of the action called ""equip"" like someone getting ready to use something from their backpack. Imagine you're planning to paint a picture. First, you need to make sure you have a paintbrush in your backpack (this is similar to the ""inventory"" in our scenario). You also need to make sure your hand is free to hold the paintbrush (like the ""handsfree"" condition).

In the ""equip"" action in this Minecraft-like environment, two main things need to happen before the action can take place:
1. **The item is in the inventory** - This is just like making sure the paintbrush is in your backpack. The precondition `(inventory ?var0)` confirms that the item you want to use is actually with you, stored safely in your inventory.
2. **The agent's hands are free** - This means you aren't holding anything else. The precondition `(handsfree ?var1)` checks that your hands (or the agent's hands, in this case) are empty and ready to hold something new.

When you decide to ""equip"" or start using the item, several things change:
- **The item is now equipped** - This means the item is in your hand and ready to use, similar to how you would hold a paintbrush when you're ready to paint. This is shown by the effect `(equipped ?var0 ?var1)`.
- **Your hand is no longer free** - Just like when you pick up the paintbrush, your hand isn't empty anymore. This is why the effect includes `(not (handsfree ?var1))`.
- **The item is no longer just in the inventory** - Since you're now holding the item, it's not just sitting in your backpack. This change is represented by `(not (inventory ?var0))`.

These changes ensure that the action of equipping something is logical and makes sense in the environment, just like how you'd logically take a paintbrush out of your backpack to use it.
Parameters:
1. ?var0 - moveable
2. ?var1 - agent

Preconditions:
```
(and
    (inventory ?var0)
    (handsfree ?var1)
)
```

Effects:
```
(and
    (not (handsfree ?var1))
    (not (inventory ?var0))
)
```
","(:action equip
    :parameters (?var0 - moveable ?var1 - agent)
    :precondition (and (inventory ?var0) (handsfree ?var1))
    :effect (and (equipped ?var0 ?var1) (not (handsfree ?var1)) (not (inventory ?var0)))
)","remove (equipped ?var0 ?var1) from effects
"
minecraft,equip,0.4719610810279846,Hard Negative (Manipulated Action),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: This is when the agent decides to take something out of their inventory and hold it in their hands, ready for use. It could be picking up a tool for chopping or a weapon for defense. Once they equip an item, their hands are no longer empty - they're now holding this item, ready to use it for whatever task they have in mind.

Action name: equip


Your answer:
","**Explanation:**
Let's think of the action called ""equip"" like someone getting ready to use something from their backpack. Imagine you're planning to paint a picture. First, you need to make sure you have a paintbrush in your backpack (this is similar to the ""inventory"" in our scenario). You also need to make sure your hand is free to hold the paintbrush (like the ""handsfree"" condition).

In the ""equip"" action in this Minecraft-like environment, two main things need to happen before the action can take place:
1. **The item is in the inventory** - This is just like making sure the paintbrush is in your backpack. The precondition `(inventory ?var0)` confirms that the item you want to use is actually with you, stored safely in your inventory.
2. **The agent's hands are free** - This means you aren't holding anything else. The precondition `(handsfree ?var1)` checks that your hands (or the agent's hands, in this case) are empty and ready to hold something new.

When you decide to ""equip"" or start using the item, several things change:
- **The item is now equipped** - This means the item is in your hand and ready to use, similar to how you would hold a paintbrush when you're ready to paint. This is shown by the effect `(equipped ?var0 ?var1)`.
- **Your hand is no longer free** - Just like when you pick up the paintbrush, your hand isn't empty anymore. This is why the effect includes `(not (handsfree ?var1))`.
- **The item is no longer just in the inventory** - Since you're now holding the item, it's not just sitting in your backpack. This change is represented by `(not (inventory ?var0))`.

These changes ensure that the action of equipping something is logical and makes sense in the environment, just like how you'd logically take a paintbrush out of your backpack to use it.
Parameters:
1. ?var0 - moveable
2. ?var1 - agent

Preconditions:
```
(and
    (not (handsfree ?var1))
    (inventory ?var0)
)
```

Effects:
```
(and
    (handsfree ?var1)
    (equipped ?var0 ?var1)
    (not (inventory ?var0))
)
```
","(:action equip
    :parameters (?var0 - moveable ?var1 - agent)
    :precondition (and (inventory ?var0) (handsfree ?var1))
    :effect (and (equipped ?var0 ?var1) (not (handsfree ?var1)) (not (inventory ?var0)))
)","swap (handsfree ?var1) with (not (handsfree ?var1))
"
minecraft,equip,0.4719610810279846,Hard Negative (Manipulated Action),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: This is when the agent decides to take something out of their inventory and hold it in their hands, ready for use. It could be picking up a tool for chopping or a weapon for defense. Once they equip an item, their hands are no longer empty - they're now holding this item, ready to use it for whatever task they have in mind.

Action name: equip


Your answer:
","**Explanation:**
Let's think of the action called ""equip"" like someone getting ready to use something from their backpack. Imagine you're planning to paint a picture. First, you need to make sure you have a paintbrush in your backpack (this is similar to the ""inventory"" in our scenario). You also need to make sure your hand is free to hold the paintbrush (like the ""handsfree"" condition).

In the ""equip"" action in this Minecraft-like environment, two main things need to happen before the action can take place:
1. **The item is in the inventory** - This is just like making sure the paintbrush is in your backpack. The precondition `(inventory ?var0)` confirms that the item you want to use is actually with you, stored safely in your inventory.
2. **The agent's hands are free** - This means you aren't holding anything else. The precondition `(handsfree ?var1)` checks that your hands (or the agent's hands, in this case) are empty and ready to hold something new.

When you decide to ""equip"" or start using the item, several things change:
- **The item is now equipped** - This means the item is in your hand and ready to use, similar to how you would hold a paintbrush when you're ready to paint. This is shown by the effect `(equipped ?var0 ?var1)`.
- **Your hand is no longer free** - Just like when you pick up the paintbrush, your hand isn't empty anymore. This is why the effect includes `(not (handsfree ?var1))`.
- **The item is no longer just in the inventory** - Since you're now holding the item, it's not just sitting in your backpack. This change is represented by `(not (inventory ?var0))`.

These changes ensure that the action of equipping something is logical and makes sense in the environment, just like how you'd logically take a paintbrush out of your backpack to use it.
Parameters:
1. ?var0 - moveable
2. ?var1 - agent

Preconditions:
```
(not (handsfree ?var1))
```

Effects:
```
(and
    (equipped ?var0 ?var1)
    (not (handsfree ?var1))
    (not (inventory ?var0))
)
```
","(:action equip
    :parameters (?var0 - moveable ?var1 - agent)
    :precondition (and (inventory ?var0) (handsfree ?var1))
    :effect (and (equipped ?var0 ?var1) (not (handsfree ?var1)) (not (inventory ?var0)))
)","remove (inventory ?var0) from preconditions
negate (handsfree ?var1) in preconditions
"
minecraft,equip,0.4719610810279846,Hard Negative (Manipulated Action),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: This is when the agent decides to take something out of their inventory and hold it in their hands, ready for use. It could be picking up a tool for chopping or a weapon for defense. Once they equip an item, their hands are no longer empty - they're now holding this item, ready to use it for whatever task they have in mind.

Action name: equip


Your answer:
","**Explanation:**
Let's think of the action called ""equip"" like someone getting ready to use something from their backpack. Imagine you're planning to paint a picture. First, you need to make sure you have a paintbrush in your backpack (this is similar to the ""inventory"" in our scenario). You also need to make sure your hand is free to hold the paintbrush (like the ""handsfree"" condition).

In the ""equip"" action in this Minecraft-like environment, two main things need to happen before the action can take place:
1. **The item is in the inventory** - This is just like making sure the paintbrush is in your backpack. The precondition `(inventory ?var0)` confirms that the item you want to use is actually with you, stored safely in your inventory.
2. **The agent's hands are free** - This means you aren't holding anything else. The precondition `(handsfree ?var1)` checks that your hands (or the agent's hands, in this case) are empty and ready to hold something new.

When you decide to ""equip"" or start using the item, several things change:
- **The item is now equipped** - This means the item is in your hand and ready to use, similar to how you would hold a paintbrush when you're ready to paint. This is shown by the effect `(equipped ?var0 ?var1)`.
- **Your hand is no longer free** - Just like when you pick up the paintbrush, your hand isn't empty anymore. This is why the effect includes `(not (handsfree ?var1))`.
- **The item is no longer just in the inventory** - Since you're now holding the item, it's not just sitting in your backpack. This change is represented by `(not (inventory ?var0))`.

These changes ensure that the action of equipping something is logical and makes sense in the environment, just like how you'd logically take a paintbrush out of your backpack to use it.
Parameters:
1. ?var0 - moveable
2. ?var1 - agent

Preconditions:
```
(and
    (not (inventory ?var0))
    (inventory ?var0)
)
```

Effects:
```
(and
    (handsfree ?var1)
    (equipped ?var0 ?var1)
    (not (handsfree ?var1))
)
```
","(:action equip
    :parameters (?var0 - moveable ?var1 - agent)
    :precondition (and (inventory ?var0) (handsfree ?var1))
    :effect (and (equipped ?var0 ?var1) (not (handsfree ?var1)) (not (inventory ?var0)))
)","swap (handsfree ?var1) with (not (inventory ?var0))
"
minecraft,equip,0.4719610810279846,Hard Negative (Manipulated Action),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: This is when the agent decides to take something out of their inventory and hold it in their hands, ready for use. It could be picking up a tool for chopping or a weapon for defense. Once they equip an item, their hands are no longer empty - they're now holding this item, ready to use it for whatever task they have in mind.

Action name: equip


Your answer:
","**Explanation:**
Let's think of the action called ""equip"" like someone getting ready to use something from their backpack. Imagine you're planning to paint a picture. First, you need to make sure you have a paintbrush in your backpack (this is similar to the ""inventory"" in our scenario). You also need to make sure your hand is free to hold the paintbrush (like the ""handsfree"" condition).

In the ""equip"" action in this Minecraft-like environment, two main things need to happen before the action can take place:
1. **The item is in the inventory** - This is just like making sure the paintbrush is in your backpack. The precondition `(inventory ?var0)` confirms that the item you want to use is actually with you, stored safely in your inventory.
2. **The agent's hands are free** - This means you aren't holding anything else. The precondition `(handsfree ?var1)` checks that your hands (or the agent's hands, in this case) are empty and ready to hold something new.

When you decide to ""equip"" or start using the item, several things change:
- **The item is now equipped** - This means the item is in your hand and ready to use, similar to how you would hold a paintbrush when you're ready to paint. This is shown by the effect `(equipped ?var0 ?var1)`.
- **Your hand is no longer free** - Just like when you pick up the paintbrush, your hand isn't empty anymore. This is why the effect includes `(not (handsfree ?var1))`.
- **The item is no longer just in the inventory** - Since you're now holding the item, it's not just sitting in your backpack. This change is represented by `(not (inventory ?var0))`.

These changes ensure that the action of equipping something is logical and makes sense in the environment, just like how you'd logically take a paintbrush out of your backpack to use it.
Parameters:
1. ?var0 - moveable
2. ?var1 - agent

Preconditions:
```
(and
    (inventory ?var0)
    (handsfree ?var1)
)
```

Effects:
```
(and
    (equipped ?var0 ?var1)
    (not (handsfree ?var1))
)
```
","(:action equip
    :parameters (?var0 - moveable ?var1 - agent)
    :precondition (and (inventory ?var0) (handsfree ?var1))
    :effect (and (equipped ?var0 ?var1) (not (handsfree ?var1)) (not (inventory ?var0)))
)","remove (not (inventory ?var0)) from effects
"
minecraft,equip,0.4719610810279846,Hard Negative (Manipulated Action),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: This is when the agent decides to take something out of their inventory and hold it in their hands, ready for use. It could be picking up a tool for chopping or a weapon for defense. Once they equip an item, their hands are no longer empty - they're now holding this item, ready to use it for whatever task they have in mind.

Action name: equip


Your answer:
","**Explanation:**
Let's think of the action called ""equip"" like someone getting ready to use something from their backpack. Imagine you're planning to paint a picture. First, you need to make sure you have a paintbrush in your backpack (this is similar to the ""inventory"" in our scenario). You also need to make sure your hand is free to hold the paintbrush (like the ""handsfree"" condition).

In the ""equip"" action in this Minecraft-like environment, two main things need to happen before the action can take place:
1. **The item is in the inventory** - This is just like making sure the paintbrush is in your backpack. The precondition `(inventory ?var0)` confirms that the item you want to use is actually with you, stored safely in your inventory.
2. **The agent's hands are free** - This means you aren't holding anything else. The precondition `(handsfree ?var1)` checks that your hands (or the agent's hands, in this case) are empty and ready to hold something new.

When you decide to ""equip"" or start using the item, several things change:
- **The item is now equipped** - This means the item is in your hand and ready to use, similar to how you would hold a paintbrush when you're ready to paint. This is shown by the effect `(equipped ?var0 ?var1)`.
- **Your hand is no longer free** - Just like when you pick up the paintbrush, your hand isn't empty anymore. This is why the effect includes `(not (handsfree ?var1))`.
- **The item is no longer just in the inventory** - Since you're now holding the item, it's not just sitting in your backpack. This change is represented by `(not (inventory ?var0))`.

These changes ensure that the action of equipping something is logical and makes sense in the environment, just like how you'd logically take a paintbrush out of your backpack to use it.
Parameters:
1. ?var0 - moveable
2. ?var1 - agent

Preconditions:
```
(handsfree ?var1)
```

Effects:
```
(and
    (not (equipped ?var0 ?var1))
    (not (handsfree ?var1))
    (not (inventory ?var0))
)
```
","(:action equip
    :parameters (?var0 - moveable ?var1 - agent)
    :precondition (and (inventory ?var0) (handsfree ?var1))
    :effect (and (equipped ?var0 ?var1) (not (handsfree ?var1)) (not (inventory ?var0)))
)","remove (inventory ?var0) from preconditions
negate (equipped ?var0 ?var1) in effects
"
minecraft,equip,0.4719610810279846,Hard Negative (Manipulated Action),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: This is when the agent decides to take something out of their inventory and hold it in their hands, ready for use. It could be picking up a tool for chopping or a weapon for defense. Once they equip an item, their hands are no longer empty - they're now holding this item, ready to use it for whatever task they have in mind.

Action name: equip


Your answer:
","**Explanation:**
Let's think of the action called ""equip"" like someone getting ready to use something from their backpack. Imagine you're planning to paint a picture. First, you need to make sure you have a paintbrush in your backpack (this is similar to the ""inventory"" in our scenario). You also need to make sure your hand is free to hold the paintbrush (like the ""handsfree"" condition).

In the ""equip"" action in this Minecraft-like environment, two main things need to happen before the action can take place:
1. **The item is in the inventory** - This is just like making sure the paintbrush is in your backpack. The precondition `(inventory ?var0)` confirms that the item you want to use is actually with you, stored safely in your inventory.
2. **The agent's hands are free** - This means you aren't holding anything else. The precondition `(handsfree ?var1)` checks that your hands (or the agent's hands, in this case) are empty and ready to hold something new.

When you decide to ""equip"" or start using the item, several things change:
- **The item is now equipped** - This means the item is in your hand and ready to use, similar to how you would hold a paintbrush when you're ready to paint. This is shown by the effect `(equipped ?var0 ?var1)`.
- **Your hand is no longer free** - Just like when you pick up the paintbrush, your hand isn't empty anymore. This is why the effect includes `(not (handsfree ?var1))`.
- **The item is no longer just in the inventory** - Since you're now holding the item, it's not just sitting in your backpack. This change is represented by `(not (inventory ?var0))`.

These changes ensure that the action of equipping something is logical and makes sense in the environment, just like how you'd logically take a paintbrush out of your backpack to use it.
Parameters:
1. ?var0 - moveable
2. ?var1 - agent

Preconditions:
```
(and
    (inventory ?var0)
    (handsfree ?var1)
)
```

Effects:
```
(and
    (not (handsfree ?var1))
    (not (inventory ?var0))
)
```
","(:action equip
    :parameters (?var0 - moveable ?var1 - agent)
    :precondition (and (inventory ?var0) (handsfree ?var1))
    :effect (and (equipped ?var0 ?var1) (not (handsfree ?var1)) (not (inventory ?var0)))
)","remove (equipped ?var0 ?var1) from effects
"
minecraft,pick,0.6227985620498657,Positive (Correct Match),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: Picture the agent spotting something valuable or useful on the ground, like a piece of fruit or a tool. The pick action is them bending down and picking up this item, adding it to their inventory. It's a fundamental action for gathering resources as they explore the Minecraft environment. Once picked, the item is no longer lying around; it's safely stored in the agent's inventory.

Action name: pick


Your answer:
","Parameters:
1. ?var0 - moveable
2. ?var1 - static

Preconditions:
```
(and
    (at ?var0 ?var1)
    (agent_at ?var1)
)
```

Effects:
```
(and
    (inventory ?var0)
    (not (at ?var0 ?var1))
)
```
","(:action pick
    :parameters (?var0 - moveable ?var1 - static)
    :precondition (and (at ?var0 ?var1) (agent_at ?var1))
    :effect (and (inventory ?var0) (not (at ?var0 ?var1)))
)",
minecraft,pick,0.6227985620498657,Positive (Correct Match),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: Picture the agent spotting something valuable or useful on the ground, like a piece of fruit or a tool. The pick action is them bending down and picking up this item, adding it to their inventory. It's a fundamental action for gathering resources as they explore the Minecraft environment. Once picked, the item is no longer lying around; it's safely stored in the agent's inventory.

Action name: pick


Your answer:

**Explanation:**

Let's imagine you're in a simplified game environment similar to Minecraft, where your goal is to gather resources like fruits or tools. In this game, to collect an item, you'd first need to be at the same location as the item. This ensures you can actually reach it to pick it up.

So, in the PDDL (which is a planning language used to describe tasks and environments in a structured way), the `pick` action is defined to help you collect these items. Here's why the action is set up this way:

1. **Preconditions (the must-haves before acting)**:
   - `(at ?var0 ?var1)`: This means the item (`?var0`) must be at your current location (`?var1`). Think of it as seeing a piece of fruit right at your feet. You need to be where the fruit is to pick it up.
   - `(agent_at ?var1)`: This specifies that you (the agent) must also be at that specific location (`?var1`). Just like in real life, you can't pick up something if you're not right there with it.

2. **Effects (what happens after the action)**:
   - `(inventory ?var0)`: Once you pick up the item, it moves into your inventory. This is like putting the fruit into your backpack.
   - `(not (at ?var0 ?var1))`: This indicates that the item is no longer lying on the ground at that location. It’s like saying, now that the fruit is in your backpack, it's not on the ground anymore.

This setup ensures that you can only pick up items that are within your immediate reach and that collecting an item changes its status from being 'on the ground' to being 'in your inventory'. It's a simple but effective way to manage resources in the game, making sure everything happens in a logical and realistic manner.","Parameters:
1. ?var0 - moveable
2. ?var1 - static

Preconditions:
```
(and
    (at ?var0 ?var1)
    (agent_at ?var1)
)
```

Effects:
```
(and
    (inventory ?var0)
    (not (at ?var0 ?var1))
)
```
","(:action pick
    :parameters (?var0 - moveable ?var1 - static)
    :precondition (and (at ?var0 ?var1) (agent_at ?var1))
    :effect (and (inventory ?var0) (not (at ?var0 ?var1)))
)",
minecraft,pick,0.524651050567627,Positive (Correct Match),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: Picture the agent spotting something valuable or useful on the ground, like a piece of fruit or a tool. The pick action is them bending down and picking up this item, adding it to their inventory. It's a fundamental action for gathering resources as they explore the Minecraft environment. Once picked, the item is no longer lying around; it's safely stored in the agent's inventory.

Action name: pick


Your answer:
","**Explanation:**

Let's imagine you're in a simplified game environment similar to Minecraft, where your goal is to gather resources like fruits or tools. In this game, to collect an item, you'd first need to be at the same location as the item. This ensures you can actually reach it to pick it up.

So, in the PDDL (which is a planning language used to describe tasks and environments in a structured way), the `pick` action is defined to help you collect these items. Here's why the action is set up this way:

1. **Preconditions (the must-haves before acting)**:
   - `(at ?var0 ?var1)`: This means the item (`?var0`) must be at your current location (`?var1`). Think of it as seeing a piece of fruit right at your feet. You need to be where the fruit is to pick it up.
   - `(agent_at ?var1)`: This specifies that you (the agent) must also be at that specific location (`?var1`). Just like in real life, you can't pick up something if you're not right there with it.

2. **Effects (what happens after the action)**:
   - `(inventory ?var0)`: Once you pick up the item, it moves into your inventory. This is like putting the fruit into your backpack.
   - `(not (at ?var0 ?var1))`: This indicates that the item is no longer lying on the ground at that location. It’s like saying, now that the fruit is in your backpack, it's not on the ground anymore.

This setup ensures that you can only pick up items that are within your immediate reach and that collecting an item changes its status from being 'on the ground' to being 'in your inventory'. It's a simple but effective way to manage resources in the game, making sure everything happens in a logical and realistic manner.
Parameters:
1. ?var0 - moveable
2. ?var1 - static

Preconditions:
```
(and
    (at ?var0 ?var1)
    (agent_at ?var1)
)
```

Effects:
```
(and
    (inventory ?var0)
    (not (at ?var0 ?var1))
)
```
","(:action pick
    :parameters (?var0 - moveable ?var1 - static)
    :precondition (and (at ?var0 ?var1) (agent_at ?var1))
    :effect (and (inventory ?var0) (not (at ?var0 ?var1)))
)",
minecraft,pick,0.1438380926847458,Easy Negative (Inter-Domain Mismatch),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: Picture the agent spotting something valuable or useful on the ground, like a piece of fruit or a tool. The pick action is them bending down and picking up this item, adding it to their inventory. It's a fundamental action for gathering resources as they explore the Minecraft environment. Once picked, the item is no longer lying around; it's safely stored in the agent's inventory.

Action name: pick


Your answer:
","Parameters:
1. ?x - book
2. ?y - book
3. ?cat - category

Preconditions:
```
(and
    (on-shelf ?x ?y)
    (accessible ?x)
    (hands-free)
    (belongs-to-category ?x ?cat)
)
```

Effects:
```
(and
    (holding ?x)
    (accessible ?y)
    (not (accessible ?x))
    (not (hands-free))
    (not (on-shelf ?x ?y))
    (shelf-empty ?cat)
)
```
","(:action pick
    :parameters (?var0 - moveable ?var1 - static)
    :precondition (and (at ?var0 ?var1) (agent_at ?var1))
    :effect (and (inventory ?var0) (not (at ?var0 ?var1)))
)",
minecraft,pick,0.024976003915071487,Easy Negative (Inter-Domain Mismatch),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: Picture the agent spotting something valuable or useful on the ground, like a piece of fruit or a tool. The pick action is them bending down and picking up this item, adding it to their inventory. It's a fundamental action for gathering resources as they explore the Minecraft environment. Once picked, the item is no longer lying around; it's safely stored in the agent's inventory.

Action name: pick


Your answer:
","Parameters:
1. ?x - book

Preconditions:
```
(holding ?x)
```

Effects:
```
(and
    (not (holding ?x))
    (accessible ?x)
    (hands-free)
    (on-table ?x)
)
```
","(:action pick
    :parameters (?var0 - moveable ?var1 - static)
    :precondition (and (at ?var0 ?var1) (agent_at ?var1))
    :effect (and (inventory ?var0) (not (at ?var0 ?var1)))
)",
minecraft,pick,0.1462501734495163,Easy Negative (Inter-Domain Mismatch),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: Picture the agent spotting something valuable or useful on the ground, like a piece of fruit or a tool. The pick action is them bending down and picking up this item, adding it to their inventory. It's a fundamental action for gathering resources as they explore the Minecraft environment. Once picked, the item is no longer lying around; it's safely stored in the agent's inventory.

Action name: pick


Your answer:
","Parameters:
1. ?x - book

Preconditions:
```
(and
    (accessible ?x)
    (not (checked-out ?x))
)
```

Effects:
```
(and
    (checked-out ?x)
    (not (accessible ?x))
    (book-request ?x)
    (return-due ?x)
)
```
","(:action pick
    :parameters (?var0 - moveable ?var1 - static)
    :precondition (and (at ?var0 ?var1) (agent_at ?var1))
    :effect (and (inventory ?var0) (not (at ?var0 ?var1)))
)",
minecraft,pick,0.021671444177627563,Easy Negative (Inter-Domain Mismatch),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: Picture the agent spotting something valuable or useful on the ground, like a piece of fruit or a tool. The pick action is them bending down and picking up this item, adding it to their inventory. It's a fundamental action for gathering resources as they explore the Minecraft environment. Once picked, the item is no longer lying around; it's safely stored in the agent's inventory.

Action name: pick


Your answer:
","Parameters:
1. ?x - book

Preconditions:
```
(and
    (checked-out ?x)
    (holding ?x)
)
```

Effects:
```
(and
    (not (checked-out ?x))
    (not (holding ?x))
    (not (book-request ?x))
    (not (return-due ?x))
    (accessible ?x)
    (hands-free)
)
```
","(:action pick
    :parameters (?var0 - moveable ?var1 - static)
    :precondition (and (at ?var0 ?var1) (agent_at ?var1))
    :effect (and (inventory ?var0) (not (at ?var0 ?var1)))
)",
minecraft,pick,0.13315889239311218,Easy Negative (Inter-Domain Mismatch),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: Picture the agent spotting something valuable or useful on the ground, like a piece of fruit or a tool. The pick action is them bending down and picking up this item, adding it to their inventory. It's a fundamental action for gathering resources as they explore the Minecraft environment. Once picked, the item is no longer lying around; it's safely stored in the agent's inventory.

Action name: pick


Your answer:
","Parameters:
1. ?x - book

Preconditions:
```
(and
    (accessible ?x)
    (on-table ?x)
    (hands-free)
)
```

Effects:
```
(and
    (not (on-table ?x))
    (not (accessible ?x))
    (not (hands-free))
    (holding ?x)
)
```
","(:action pick
    :parameters (?var0 - moveable ?var1 - static)
    :precondition (and (at ?var0 ?var1) (agent_at ?var1))
    :effect (and (inventory ?var0) (not (at ?var0 ?var1)))
)",
minecraft,pick,0.16687951982021332,Easy Negative (Inter-Domain Mismatch),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: Picture the agent spotting something valuable or useful on the ground, like a piece of fruit or a tool. The pick action is them bending down and picking up this item, adding it to their inventory. It's a fundamental action for gathering resources as they explore the Minecraft environment. Once picked, the item is no longer lying around; it's safely stored in the agent's inventory.

Action name: pick


Your answer:
","Parameters:
1. ?x - book
2. ?y - book
3. ?cat - category

Preconditions:
```
(and
    (holding ?x)
    (accessible ?y)
    (belongs-to-category ?x ?cat)
    (not (shelf-overflow ?cat))
)
```

Effects:
```
(and
    (not (holding ?x))
    (not (accessible ?y))
    (accessible ?x)
    (hands-free)
    (on-shelf ?x ?y)
    (shelf-empty ?cat)
)
```
","(:action pick
    :parameters (?var0 - moveable ?var1 - static)
    :precondition (and (at ?var0 ?var1) (agent_at ?var1))
    :effect (and (inventory ?var0) (not (at ?var0 ?var1)))
)",
minecraft,pick,0.1438380926847458,Easy Negative (Inter-Domain Mismatch),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: Picture the agent spotting something valuable or useful on the ground, like a piece of fruit or a tool. The pick action is them bending down and picking up this item, adding it to their inventory. It's a fundamental action for gathering resources as they explore the Minecraft environment. Once picked, the item is no longer lying around; it's safely stored in the agent's inventory.

Action name: pick


Your answer:

**Explanation:**

Let's imagine you're in a simplified game environment similar to Minecraft, where your goal is to gather resources like fruits or tools. In this game, to collect an item, you'd first need to be at the same location as the item. This ensures you can actually reach it to pick it up.

So, in the PDDL (which is a planning language used to describe tasks and environments in a structured way), the `pick` action is defined to help you collect these items. Here's why the action is set up this way:

1. **Preconditions (the must-haves before acting)**:
   - `(at ?var0 ?var1)`: This means the item (`?var0`) must be at your current location (`?var1`). Think of it as seeing a piece of fruit right at your feet. You need to be where the fruit is to pick it up.
   - `(agent_at ?var1)`: This specifies that you (the agent) must also be at that specific location (`?var1`). Just like in real life, you can't pick up something if you're not right there with it.

2. **Effects (what happens after the action)**:
   - `(inventory ?var0)`: Once you pick up the item, it moves into your inventory. This is like putting the fruit into your backpack.
   - `(not (at ?var0 ?var1))`: This indicates that the item is no longer lying on the ground at that location. It’s like saying, now that the fruit is in your backpack, it's not on the ground anymore.

This setup ensures that you can only pick up items that are within your immediate reach and that collecting an item changes its status from being 'on the ground' to being 'in your inventory'. It's a simple but effective way to manage resources in the game, making sure everything happens in a logical and realistic manner.","Parameters:
1. ?x - book
2. ?y - book
3. ?cat - category

Preconditions:
```
(and
    (on-shelf ?x ?y)
    (accessible ?x)
    (hands-free)
    (belongs-to-category ?x ?cat)
)
```

Effects:
```
(and
    (holding ?x)
    (accessible ?y)
    (not (accessible ?x))
    (not (hands-free))
    (not (on-shelf ?x ?y))
    (shelf-empty ?cat)
)
```
","(:action pick
    :parameters (?var0 - moveable ?var1 - static)
    :precondition (and (at ?var0 ?var1) (agent_at ?var1))
    :effect (and (inventory ?var0) (not (at ?var0 ?var1)))
)",
minecraft,pick,0.024976003915071487,Easy Negative (Inter-Domain Mismatch),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: Picture the agent spotting something valuable or useful on the ground, like a piece of fruit or a tool. The pick action is them bending down and picking up this item, adding it to their inventory. It's a fundamental action for gathering resources as they explore the Minecraft environment. Once picked, the item is no longer lying around; it's safely stored in the agent's inventory.

Action name: pick


Your answer:

**Explanation:**

Let's imagine you're in a simplified game environment similar to Minecraft, where your goal is to gather resources like fruits or tools. In this game, to collect an item, you'd first need to be at the same location as the item. This ensures you can actually reach it to pick it up.

So, in the PDDL (which is a planning language used to describe tasks and environments in a structured way), the `pick` action is defined to help you collect these items. Here's why the action is set up this way:

1. **Preconditions (the must-haves before acting)**:
   - `(at ?var0 ?var1)`: This means the item (`?var0`) must be at your current location (`?var1`). Think of it as seeing a piece of fruit right at your feet. You need to be where the fruit is to pick it up.
   - `(agent_at ?var1)`: This specifies that you (the agent) must also be at that specific location (`?var1`). Just like in real life, you can't pick up something if you're not right there with it.

2. **Effects (what happens after the action)**:
   - `(inventory ?var0)`: Once you pick up the item, it moves into your inventory. This is like putting the fruit into your backpack.
   - `(not (at ?var0 ?var1))`: This indicates that the item is no longer lying on the ground at that location. It’s like saying, now that the fruit is in your backpack, it's not on the ground anymore.

This setup ensures that you can only pick up items that are within your immediate reach and that collecting an item changes its status from being 'on the ground' to being 'in your inventory'. It's a simple but effective way to manage resources in the game, making sure everything happens in a logical and realistic manner.","Parameters:
1. ?x - book

Preconditions:
```
(holding ?x)
```

Effects:
```
(and
    (not (holding ?x))
    (accessible ?x)
    (hands-free)
    (on-table ?x)
)
```
","(:action pick
    :parameters (?var0 - moveable ?var1 - static)
    :precondition (and (at ?var0 ?var1) (agent_at ?var1))
    :effect (and (inventory ?var0) (not (at ?var0 ?var1)))
)",
minecraft,pick,0.1462501734495163,Easy Negative (Inter-Domain Mismatch),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: Picture the agent spotting something valuable or useful on the ground, like a piece of fruit or a tool. The pick action is them bending down and picking up this item, adding it to their inventory. It's a fundamental action for gathering resources as they explore the Minecraft environment. Once picked, the item is no longer lying around; it's safely stored in the agent's inventory.

Action name: pick


Your answer:

**Explanation:**

Let's imagine you're in a simplified game environment similar to Minecraft, where your goal is to gather resources like fruits or tools. In this game, to collect an item, you'd first need to be at the same location as the item. This ensures you can actually reach it to pick it up.

So, in the PDDL (which is a planning language used to describe tasks and environments in a structured way), the `pick` action is defined to help you collect these items. Here's why the action is set up this way:

1. **Preconditions (the must-haves before acting)**:
   - `(at ?var0 ?var1)`: This means the item (`?var0`) must be at your current location (`?var1`). Think of it as seeing a piece of fruit right at your feet. You need to be where the fruit is to pick it up.
   - `(agent_at ?var1)`: This specifies that you (the agent) must also be at that specific location (`?var1`). Just like in real life, you can't pick up something if you're not right there with it.

2. **Effects (what happens after the action)**:
   - `(inventory ?var0)`: Once you pick up the item, it moves into your inventory. This is like putting the fruit into your backpack.
   - `(not (at ?var0 ?var1))`: This indicates that the item is no longer lying on the ground at that location. It’s like saying, now that the fruit is in your backpack, it's not on the ground anymore.

This setup ensures that you can only pick up items that are within your immediate reach and that collecting an item changes its status from being 'on the ground' to being 'in your inventory'. It's a simple but effective way to manage resources in the game, making sure everything happens in a logical and realistic manner.","Parameters:
1. ?x - book

Preconditions:
```
(and
    (accessible ?x)
    (not (checked-out ?x))
)
```

Effects:
```
(and
    (checked-out ?x)
    (not (accessible ?x))
    (book-request ?x)
    (return-due ?x)
)
```
","(:action pick
    :parameters (?var0 - moveable ?var1 - static)
    :precondition (and (at ?var0 ?var1) (agent_at ?var1))
    :effect (and (inventory ?var0) (not (at ?var0 ?var1)))
)",
minecraft,pick,0.021671444177627563,Easy Negative (Inter-Domain Mismatch),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: Picture the agent spotting something valuable or useful on the ground, like a piece of fruit or a tool. The pick action is them bending down and picking up this item, adding it to their inventory. It's a fundamental action for gathering resources as they explore the Minecraft environment. Once picked, the item is no longer lying around; it's safely stored in the agent's inventory.

Action name: pick


Your answer:

**Explanation:**

Let's imagine you're in a simplified game environment similar to Minecraft, where your goal is to gather resources like fruits or tools. In this game, to collect an item, you'd first need to be at the same location as the item. This ensures you can actually reach it to pick it up.

So, in the PDDL (which is a planning language used to describe tasks and environments in a structured way), the `pick` action is defined to help you collect these items. Here's why the action is set up this way:

1. **Preconditions (the must-haves before acting)**:
   - `(at ?var0 ?var1)`: This means the item (`?var0`) must be at your current location (`?var1`). Think of it as seeing a piece of fruit right at your feet. You need to be where the fruit is to pick it up.
   - `(agent_at ?var1)`: This specifies that you (the agent) must also be at that specific location (`?var1`). Just like in real life, you can't pick up something if you're not right there with it.

2. **Effects (what happens after the action)**:
   - `(inventory ?var0)`: Once you pick up the item, it moves into your inventory. This is like putting the fruit into your backpack.
   - `(not (at ?var0 ?var1))`: This indicates that the item is no longer lying on the ground at that location. It’s like saying, now that the fruit is in your backpack, it's not on the ground anymore.

This setup ensures that you can only pick up items that are within your immediate reach and that collecting an item changes its status from being 'on the ground' to being 'in your inventory'. It's a simple but effective way to manage resources in the game, making sure everything happens in a logical and realistic manner.","Parameters:
1. ?x - book

Preconditions:
```
(and
    (checked-out ?x)
    (holding ?x)
)
```

Effects:
```
(and
    (not (checked-out ?x))
    (not (holding ?x))
    (not (book-request ?x))
    (not (return-due ?x))
    (accessible ?x)
    (hands-free)
)
```
","(:action pick
    :parameters (?var0 - moveable ?var1 - static)
    :precondition (and (at ?var0 ?var1) (agent_at ?var1))
    :effect (and (inventory ?var0) (not (at ?var0 ?var1)))
)",
minecraft,pick,0.13315889239311218,Easy Negative (Inter-Domain Mismatch),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: Picture the agent spotting something valuable or useful on the ground, like a piece of fruit or a tool. The pick action is them bending down and picking up this item, adding it to their inventory. It's a fundamental action for gathering resources as they explore the Minecraft environment. Once picked, the item is no longer lying around; it's safely stored in the agent's inventory.

Action name: pick


Your answer:

**Explanation:**

Let's imagine you're in a simplified game environment similar to Minecraft, where your goal is to gather resources like fruits or tools. In this game, to collect an item, you'd first need to be at the same location as the item. This ensures you can actually reach it to pick it up.

So, in the PDDL (which is a planning language used to describe tasks and environments in a structured way), the `pick` action is defined to help you collect these items. Here's why the action is set up this way:

1. **Preconditions (the must-haves before acting)**:
   - `(at ?var0 ?var1)`: This means the item (`?var0`) must be at your current location (`?var1`). Think of it as seeing a piece of fruit right at your feet. You need to be where the fruit is to pick it up.
   - `(agent_at ?var1)`: This specifies that you (the agent) must also be at that specific location (`?var1`). Just like in real life, you can't pick up something if you're not right there with it.

2. **Effects (what happens after the action)**:
   - `(inventory ?var0)`: Once you pick up the item, it moves into your inventory. This is like putting the fruit into your backpack.
   - `(not (at ?var0 ?var1))`: This indicates that the item is no longer lying on the ground at that location. It’s like saying, now that the fruit is in your backpack, it's not on the ground anymore.

This setup ensures that you can only pick up items that are within your immediate reach and that collecting an item changes its status from being 'on the ground' to being 'in your inventory'. It's a simple but effective way to manage resources in the game, making sure everything happens in a logical and realistic manner.","Parameters:
1. ?x - book

Preconditions:
```
(and
    (accessible ?x)
    (on-table ?x)
    (hands-free)
)
```

Effects:
```
(and
    (not (on-table ?x))
    (not (accessible ?x))
    (not (hands-free))
    (holding ?x)
)
```
","(:action pick
    :parameters (?var0 - moveable ?var1 - static)
    :precondition (and (at ?var0 ?var1) (agent_at ?var1))
    :effect (and (inventory ?var0) (not (at ?var0 ?var1)))
)",
minecraft,pick,0.16687951982021332,Easy Negative (Inter-Domain Mismatch),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: Picture the agent spotting something valuable or useful on the ground, like a piece of fruit or a tool. The pick action is them bending down and picking up this item, adding it to their inventory. It's a fundamental action for gathering resources as they explore the Minecraft environment. Once picked, the item is no longer lying around; it's safely stored in the agent's inventory.

Action name: pick


Your answer:

**Explanation:**

Let's imagine you're in a simplified game environment similar to Minecraft, where your goal is to gather resources like fruits or tools. In this game, to collect an item, you'd first need to be at the same location as the item. This ensures you can actually reach it to pick it up.

So, in the PDDL (which is a planning language used to describe tasks and environments in a structured way), the `pick` action is defined to help you collect these items. Here's why the action is set up this way:

1. **Preconditions (the must-haves before acting)**:
   - `(at ?var0 ?var1)`: This means the item (`?var0`) must be at your current location (`?var1`). Think of it as seeing a piece of fruit right at your feet. You need to be where the fruit is to pick it up.
   - `(agent_at ?var1)`: This specifies that you (the agent) must also be at that specific location (`?var1`). Just like in real life, you can't pick up something if you're not right there with it.

2. **Effects (what happens after the action)**:
   - `(inventory ?var0)`: Once you pick up the item, it moves into your inventory. This is like putting the fruit into your backpack.
   - `(not (at ?var0 ?var1))`: This indicates that the item is no longer lying on the ground at that location. It’s like saying, now that the fruit is in your backpack, it's not on the ground anymore.

This setup ensures that you can only pick up items that are within your immediate reach and that collecting an item changes its status from being 'on the ground' to being 'in your inventory'. It's a simple but effective way to manage resources in the game, making sure everything happens in a logical and realistic manner.","Parameters:
1. ?x - book
2. ?y - book
3. ?cat - category

Preconditions:
```
(and
    (holding ?x)
    (accessible ?y)
    (belongs-to-category ?x ?cat)
    (not (shelf-overflow ?cat))
)
```

Effects:
```
(and
    (not (holding ?x))
    (not (accessible ?y))
    (accessible ?x)
    (hands-free)
    (on-shelf ?x ?y)
    (shelf-empty ?cat)
)
```
","(:action pick
    :parameters (?var0 - moveable ?var1 - static)
    :precondition (and (at ?var0 ?var1) (agent_at ?var1))
    :effect (and (inventory ?var0) (not (at ?var0 ?var1)))
)",
minecraft,pick,0.28263044357299805,Easy Negative (Inter-Domain Mismatch),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: Picture the agent spotting something valuable or useful on the ground, like a piece of fruit or a tool. The pick action is them bending down and picking up this item, adding it to their inventory. It's a fundamental action for gathering resources as they explore the Minecraft environment. Once picked, the item is no longer lying around; it's safely stored in the agent's inventory.

Action name: pick


Your answer:
","**Explanation:**

Imagine you're guiding a hero who just woke up in a mysterious dungeon. Each room can have different things: some are empty, others have monsters, some have traps, and a few might have swords. There's also a special room with an exit—our hero's goal.

Now, let's talk about the action called **move-to-trap**. This action involves our hero moving from one room (we'll call it ""Room A"") to another room (""Room B""), where, unfortunately, there's a trap waiting. Here's why each part of the plan (or action schema) makes sense:

1. **Connected Rooms**: Our hero can only move to a room directly connected to the one they're currently in. This is like being in your house and only being able to walk into rooms that have doors leading from where you are now.

2. **Hero's Current Location**: The hero must start in Room A to move to Room B. You can't move from a place if you're not actually there, right?

3. **Room B Not Destroyed**: The room our hero is moving to mustn't be already destroyed (or in ruins). It's like making sure the bridge you want to cross hasn't collapsed.

4. **Room A Doesn't Have a Trap**: It’s safer if the room our hero is leaving doesn't have a trap. Imagine trying to leave a room with a trap; it could activate and cause trouble!

5. **Room B Has a Trap**: Since the action is called **move-to-trap**, it specifically involves moving to a room with a trap, almost like knowing there's a puddle ahead but stepping into it anyway because it's the only path forward.

6. **Hero's Arm is Free**: This indicates that the hero isn’t holding anything like a sword. It’s important because handling traps might require free hands—think about needing your hands free to disarm or avoid a trap carefully.

When our hero completes this action, several things happen:
- **Hero is now in Room B**: Just like when you walk into another room, you’re no longer in the first room.
- **Room A is destroyed**: This could mean the hero leaves it in a way that no one can follow—maybe they close a heavy door that locks automatically.
- **Hero is no longer in Room A**: It confirms that the hero has completely left Room A.

This action is designed for specific situations in the dungeon where the hero might need to move strategically, even into risky areas, to navigate through the dungeon and eventually find the exit.
Parameters:
1. ?from - cells
2. ?to - cells

Preconditions:
```
(and
    (connected ?from ?to)
    (at-hero ?from)
    (not (is-destroyed ?to))
    (not (has-trap ?from))
    (has-trap ?to)
    (arm-free)
)
```

Effects:
```
(and
    (at-hero ?to)
    (is-destroyed ?from)
    (not (at-hero ?from))
)
```
","(:action pick
    :parameters (?var0 - moveable ?var1 - static)
    :precondition (and (at ?var0 ?var1) (agent_at ?var1))
    :effect (and (inventory ?var0) (not (at ?var0 ?var1)))
)",
minecraft,pick,0.28654181957244873,Easy Negative (Inter-Domain Mismatch),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: Picture the agent spotting something valuable or useful on the ground, like a piece of fruit or a tool. The pick action is them bending down and picking up this item, adding it to their inventory. It's a fundamental action for gathering resources as they explore the Minecraft environment. Once picked, the item is no longer lying around; it's safely stored in the agent's inventory.

Action name: pick


Your answer:
","**Explanation:**

Imagine our hero in a big, scary dungeon, just like a character from a fairy tale or a video game. The dungeon has several rooms, and some rooms are safe while others have monsters or traps. The hero's goal is to escape from this dungeon, moving from one room to another until he finds the exit.

Now, let's talk about the action called ""move"" that our hero can take. The action ""move"" lets the hero go from one room (we'll call this the ""current room"") to a connected room (let's call this the ""next room""). Think of the dungeon like a big house with many doors connecting the rooms; the hero can only move through a door if it’s open and the room on the other side is safe.

In the PDDL (a kind of programming language for planning what actions to take), the action ""move"" needs some conditions to be met before the hero can move:
1. **The rooms must be connected:** Just like you can't walk through a wall at home, the hero can only move to a room if there's a direct connection (like a doorway or a corridor).
2. **The hero must be in the current room:** The hero can only leave a room if he's actually in it.
3. **The current room shouldn’t have a trap that could hurt him.**
4. **The next room shouldn’t be destroyed:** The hero can't go into a room if it’s already been collapsed or destroyed (maybe from a previous adventure!).
5. **The next room shouldn’t have a trap or a monster:** This makes sure our hero doesn’t walk into new danger.

When the hero moves:
- **He is now in the next room:** Just like if you walk to another room in your house, you're then in that new room.
- **The room he left gets destroyed:** This might sound strange, but imagine if every time he left a room, the door magically closed and locked forever, so he can’t go back the same way.
- **He is no longer in the current room:** This is just confirming that he has moved on from the previous room.

These rules help our hero make smart moves through the dungeon, avoiding danger and making progress towards escape. This way of setting up the hero's actions makes sure he can navigate through the dungeon safely and eventually find his way out.
Parameters:
1. ?from - cells
2. ?to - cells

Preconditions:
```
(and
    (connected ?from ?to)
    (at-hero ?from)
    (not (has-trap ?from))
    (not (is-destroyed ?to))
    (not (has-trap ?to))
    (not (has-monster ?to))
)
```

Effects:
```
(and
    (at-hero ?to)
    (is-destroyed ?from)
    (not (at-hero ?from))
)
```
","(:action pick
    :parameters (?var0 - moveable ?var1 - static)
    :precondition (and (at ?var0 ?var1) (agent_at ?var1))
    :effect (and (inventory ?var0) (not (at ?var0 ?var1)))
)",
minecraft,pick,0.30158182978630066,Easy Negative (Inter-Domain Mismatch),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: Picture the agent spotting something valuable or useful on the ground, like a piece of fruit or a tool. The pick action is them bending down and picking up this item, adding it to their inventory. It's a fundamental action for gathering resources as they explore the Minecraft environment. Once picked, the item is no longer lying around; it's safely stored in the agent's inventory.

Action name: pick


Your answer:
","**Explanation:**

Imagine you're helping a hero navigate through a tricky dungeon filled with different challenges. The hero's objective is to escape, but along the way, they might find useful items like swords that can help protect against monsters.

In our scenario, the action of picking up a sword is crucial. Let's think of it like this: if you enter a room and see a sword on the floor while your hands are free, you can pick it up. The action schema in PDDL, which is a way to represent planning problems, explains this in a structured format.

The preconditions for our action ""pick-sword"" are:
1. **The hero must be in the same room as the sword** (represented as `(at-hero ?loc)` and `(at-sword ?s ?loc)`). This makes sense because you can't pick up something that's not in the same room as you.
2. **The hero's hand must be free** (`(arm-free)`). Just like you can't hold two grocery bags in one hand easily, our hero needs a free hand to pick up the sword.

The effects after the hero picks up the sword are:
1. **The hero is now holding the sword** (`(holding ?s)`). This indicates that the hero has successfully picked up the sword.
2. **The sword is no longer in its original place** (`(not (at-sword ?s ?loc))`). Just like if you take an apple from a basket, the apple isn't in the basket anymore.
3. **The hero's hand is no longer free** (`(not (arm-free))`). Holding the sword means the hand that was free is now occupied.

This action schema is a simple way to model the interaction between the hero and the sword in the dungeon. It helps ensure that all necessary conditions are met before the action takes place, making the hero's journey through the dungeon logical and structured. This way, the hero doesn't magically have a sword without picking it up or has two items in one hand, which keeps our dungeon adventure realistic and understandable.
Parameters:
1. ?loc - cells
2. ?s - swords

Preconditions:
```
(and
    (at-hero ?loc)
    (at-sword ?s ?loc)
    (arm-free)
)
```

Effects:
```
(and
    (holding ?s)
    (not (at-sword ?s ?loc))
    (not (arm-free))
)
```
","(:action pick
    :parameters (?var0 - moveable ?var1 - static)
    :precondition (and (at ?var0 ?var1) (agent_at ?var1))
    :effect (and (inventory ?var0) (not (at ?var0 ?var1)))
)",
minecraft,pick,0.20672237873077393,Easy Negative (Inter-Domain Mismatch),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: Picture the agent spotting something valuable or useful on the ground, like a piece of fruit or a tool. The pick action is them bending down and picking up this item, adding it to their inventory. It's a fundamental action for gathering resources as they explore the Minecraft environment. Once picked, the item is no longer lying around; it's safely stored in the agent's inventory.

Action name: pick


Your answer:
","**Explanation:**

Imagine our hero in a dungeon, a place with rooms connected like a spider web. Each room can be just an empty space, or it might have something like a monster, a trap, or even a sword. Somewhere in this maze, there's a special room that has an exit—the ultimate goal for our hero.

Now, let's focus on a specific action our hero might need to take: **disarming a trap**. In our scenario, the hero finds themselves in a room with a trap. The action to disarm this trap is what we need to understand.

The action is named `disarm-trap`. This action, like any other, has specific requirements (preconditions) that must be met before the hero can perform it. These preconditions are:
1. **The hero must be in the same room as the trap.** This makes sense because you can't disarm a trap from another room. It's like needing to be in the kitchen to turn off a stove.
2. **The hero's hand must be free.** This means the hero can’t be holding anything, like a sword. It's a bit like needing both hands free to tie your shoes properly.
3. **There must actually be a trap in the room.** Obviously, the hero can't disarm a trap if there isn't one there!

If all these conditions are met, then the hero can go ahead and disarm the trap. The results (effects) of this action are:
1. **The trap in the room is disarmed.** This means the room is now safe from that trap.
2. **The trap is no longer considered to be in the room.** It's like cleaning up a spill; once it's cleaned, it's not there anymore.

By breaking down the action like this, we see how each condition helps ensure the action can be carried out safely and effectively. It’s just like following a recipe—each ingredient needs to be added at the right time for the dish to come out right!
Parameters:
1. ?loc - cells

Preconditions:
```
(and
    (at-hero ?loc)
    (arm-free)
    (has-trap ?loc)
)
```

Effects:
```
(and
    (trap-disarmed ?loc)
    (not (has-trap ?loc))
)
```
","(:action pick
    :parameters (?var0 - moveable ?var1 - static)
    :precondition (and (at ?var0 ?var1) (agent_at ?var1))
    :effect (and (inventory ?var0) (not (at ?var0 ?var1)))
)",
minecraft,pick,0.3918250799179077,Easy Negative (Inter-Domain Mismatch),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: Picture the agent spotting something valuable or useful on the ground, like a piece of fruit or a tool. The pick action is them bending down and picking up this item, adding it to their inventory. It's a fundamental action for gathering resources as they explore the Minecraft environment. Once picked, the item is no longer lying around; it's safely stored in the agent's inventory.

Action name: pick


Your answer:
","**Explanation:**

Let's imagine our hero in the dungeon scenario. The hero wakes up and finds themselves in a room, wanting to move to an adjacent room where, unfortunately, there's a monster. Here's how we translate this scenario into a set of instructions, or a 'domain model,' in planning language.

The action we're talking about is called ""move-to-monster."" This means our hero is trying to move from one room (let’s call it Room A) to another room (Room B) where there is a monster. To ensure this action can happen, there are certain conditions that need to be met (these are called 'preconditions') and certain outcomes that will happen as a result of the action (these are called 'effects').

1. **Preconditions**:
   - **Connected Rooms**: Room A and Room B must be connected by a corridor. This makes sense because our hero can't magically jump from one room to another; there must be a path.
   - **Hero's Current Location**: The hero must currently be in Room A. If the hero isn't there, they can't start moving from it!
   - **Monster Presence**: Room B must have a monster. After all, the action is specifically about moving to a room with a monster.
   - **Room Integrity**: Room B should not be destroyed. A destroyed room might mean it’s collapsed or inaccessible, so it's logical our hero can’t move into it.
   - **Safety in Room A**: Room A should not have a trap. This makes sure our hero is safe and able to move without getting caught in a trap.
   - **Armed Hero**: The hero must be holding a sword. It’s a dangerous task to move into a room with a monster, so having a sword means the hero is prepared for a fight.

2. **Effects**:
   - **Hero's New Location**: After the action, the hero will be in Room B. They've successfully moved.
   - **Change in Room A's Status**: Room A becomes 'destroyed.' This might represent that the room is no longer safe or viable after the hero leaves, maybe because of the haste in escaping or some mechanism triggered by the departure.
   - **Update Hero's Old Location**: The fact that the hero was in Room A is no longer true, which is updated in our model to reflect the hero’s new position.

This planning helps organize our thoughts and actions logically, ensuring every step is clear and all necessary precautions are taken. Think of it like giving someone directions with a checklist: ""Before you go there, make sure this, this, and this are true, and once you do, this and this will happen."" This ensures everyone knows what to expect and how to prepare! 
Parameters:
1. ?from - cells
2. ?to - cells
3. ?s - swords

Preconditions:
```
(and
    (connected ?from ?to)
    (at-hero ?from)
    (has-monster ?to)
    (not (is-destroyed ?to))
    (not (has-trap ?from))
    (holding ?s)
)
```

Effects:
```
(and
    (at-hero ?to)
    (is-destroyed ?from)
    (not (at-hero ?from))
)
```
","(:action pick
    :parameters (?var0 - moveable ?var1 - static)
    :precondition (and (at ?var0 ?var1) (agent_at ?var1))
    :effect (and (inventory ?var0) (not (at ?var0 ?var1)))
)",
minecraft,pick,0.26161399483680725,Easy Negative (Inter-Domain Mismatch),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: Picture the agent spotting something valuable or useful on the ground, like a piece of fruit or a tool. The pick action is them bending down and picking up this item, adding it to their inventory. It's a fundamental action for gathering resources as they explore the Minecraft environment. Once picked, the item is no longer lying around; it's safely stored in the agent's inventory.

Action name: pick


Your answer:
","**Explanation:**

Imagine you're helping a hero navigate a dungeon full of monsters and traps, a bit like playing a video game. Now, the hero has a sword, but in this part of the game, the hero decides to destroy the sword. To understand why certain conditions are checked before the hero can destroy the sword safely, let's break it down using the action ""destroy-sword"" from the game's rules (or in technical terms, the PDDL action schema).

Firstly, the hero needs to be in the same location as the sword. This makes sense, right? You can't throw something away or break it if it's not with you. So, the condition `(at-hero ?loc)` ensures that the hero is at the right spot to perform the action.

Secondly, the hero must be holding the sword. It’s similar to needing both hands on a bat to swing it; here, the hero needs to have the sword in hand to destroy it, checked by `(holding ?s)`.

But why check for no traps or monsters in the room? Think of it like trying to do something delicate, like assembling a model airplane, in a room with a loose tiger. Not a great idea, right? If there’s a monster in the room, destroying the sword might make the hero vulnerable to attack. Similarly, a trap could be triggered by the noise or movement, putting the hero in danger. So, `(not (has-trap ?loc))` and `(not (has-monster ?loc))` ensure that the environment is safe for the hero to break the sword without turning the situation worse.

Now, what happens after the sword is destroyed? The effect is that the hero’s hand is now free (`arm-free`), the sword is confirmed as destroyed (`is-destroyed ?s`), and the hero is no longer holding it (`not (holding ?s)`). It’s like cleaning up after finishing a task: put away the tools, clean up the mess, and free up your hands for the next task.

In simple terms, this action schema is like a set of instructions to make sure the hero does something risky (like destroying a sword) safely and responsibly, without making the dangerous dungeon situation even worse.
Parameters:
1. ?loc - cells
2. ?s - swords

Preconditions:
```
(and
    (at-hero ?loc)
    (holding ?s)
    (not (has-trap ?loc))
    (not (has-monster ?loc))
)
```

Effects:
```
(and
    (arm-free)
    (is-destroyed ?s)
    (not (holding ?s))
)
```
","(:action pick
    :parameters (?var0 - moveable ?var1 - static)
    :precondition (and (at ?var0 ?var1) (agent_at ?var1))
    :effect (and (inventory ?var0) (not (at ?var0 ?var1)))
)",
minecraft,pick,0.48663032054901123,Semi-Hard Negative (Intra-Domain Mismatch),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: Picture the agent spotting something valuable or useful on the ground, like a piece of fruit or a tool. The pick action is them bending down and picking up this item, adding it to their inventory. It's a fundamental action for gathering resources as they explore the Minecraft environment. Once picked, the item is no longer lying around; it's safely stored in the agent's inventory.

Action name: pick


Your answer:
","Parameters:
1. ?var0 - moveable
2. ?var1 - agent

Preconditions:
```
(equipped ?var0 ?var1)
```

Effects:
```
(and
    (inventory ?var0)
    (not (equipped ?var0 ?var1))
    (handsfree ?var1)
)
```
","(:action pick
    :parameters (?var0 - moveable ?var1 - static)
    :precondition (and (at ?var0 ?var1) (agent_at ?var1))
    :effect (and (inventory ?var0) (not (at ?var0 ?var1)))
)",
minecraft,pick,0.7756763100624084,Semi-Hard Negative (Intra-Domain Mismatch),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: Picture the agent spotting something valuable or useful on the ground, like a piece of fruit or a tool. The pick action is them bending down and picking up this item, adding it to their inventory. It's a fundamental action for gathering resources as they explore the Minecraft environment. Once picked, the item is no longer lying around; it's safely stored in the agent's inventory.

Action name: pick


Your answer:
","Parameters:
1. ?var0 - moveable
2. ?var1 - agent
3. ?var2 - moveable

Preconditions:
```
(and
    (hypothetical ?var0)
    (is_log ?var2)
    (equipped ?var2 ?var1)
)
```

Effects:
```
(and
    (inventory ?var0)
    (is_planks ?var0)
    (handsfree ?var1)
    (not (equipped ?var2 ?var1))
    (not (hypothetical ?var0))
    (not (is_log ?var2))
)
```
","(:action pick
    :parameters (?var0 - moveable ?var1 - static)
    :precondition (and (at ?var0 ?var1) (agent_at ?var1))
    :effect (and (inventory ?var0) (not (at ?var0 ?var1)))
)",
minecraft,pick,0.410630464553833,Semi-Hard Negative (Intra-Domain Mismatch),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: Picture the agent spotting something valuable or useful on the ground, like a piece of fruit or a tool. The pick action is them bending down and picking up this item, adding it to their inventory. It's a fundamental action for gathering resources as they explore the Minecraft environment. Once picked, the item is no longer lying around; it's safely stored in the agent's inventory.

Action name: pick


Your answer:
","Parameters:
1. ?var0 - static
2. ?var1 - static

Preconditions:
```
(agent_at ?var1)
```

Effects:
```
(and
    (agent_at ?var0)
    (not (agent_at ?var1))
)
```
","(:action pick
    :parameters (?var0 - moveable ?var1 - static)
    :precondition (and (at ?var0 ?var1) (agent_at ?var1))
    :effect (and (inventory ?var0) (not (at ?var0 ?var1)))
)",
minecraft,pick,0.7020046710968018,Semi-Hard Negative (Intra-Domain Mismatch),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: Picture the agent spotting something valuable or useful on the ground, like a piece of fruit or a tool. The pick action is them bending down and picking up this item, adding it to their inventory. It's a fundamental action for gathering resources as they explore the Minecraft environment. Once picked, the item is no longer lying around; it's safely stored in the agent's inventory.

Action name: pick


Your answer:
","Parameters:
1. ?var0 - moveable
2. ?var1 - agent

Preconditions:
```
(and
    (inventory ?var0)
    (handsfree ?var1)
)
```

Effects:
```
(and
    (equipped ?var0 ?var1)
    (not (handsfree ?var1))
    (not (inventory ?var0))
)
```
","(:action pick
    :parameters (?var0 - moveable ?var1 - static)
    :precondition (and (at ?var0 ?var1) (agent_at ?var1))
    :effect (and (inventory ?var0) (not (at ?var0 ?var1)))
)",
minecraft,pick,0.48663032054901123,Semi-Hard Negative (Intra-Domain Mismatch),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: Picture the agent spotting something valuable or useful on the ground, like a piece of fruit or a tool. The pick action is them bending down and picking up this item, adding it to their inventory. It's a fundamental action for gathering resources as they explore the Minecraft environment. Once picked, the item is no longer lying around; it's safely stored in the agent's inventory.

Action name: pick


Your answer:

**Explanation:**

Let's imagine you're in a simplified game environment similar to Minecraft, where your goal is to gather resources like fruits or tools. In this game, to collect an item, you'd first need to be at the same location as the item. This ensures you can actually reach it to pick it up.

So, in the PDDL (which is a planning language used to describe tasks and environments in a structured way), the `pick` action is defined to help you collect these items. Here's why the action is set up this way:

1. **Preconditions (the must-haves before acting)**:
   - `(at ?var0 ?var1)`: This means the item (`?var0`) must be at your current location (`?var1`). Think of it as seeing a piece of fruit right at your feet. You need to be where the fruit is to pick it up.
   - `(agent_at ?var1)`: This specifies that you (the agent) must also be at that specific location (`?var1`). Just like in real life, you can't pick up something if you're not right there with it.

2. **Effects (what happens after the action)**:
   - `(inventory ?var0)`: Once you pick up the item, it moves into your inventory. This is like putting the fruit into your backpack.
   - `(not (at ?var0 ?var1))`: This indicates that the item is no longer lying on the ground at that location. It’s like saying, now that the fruit is in your backpack, it's not on the ground anymore.

This setup ensures that you can only pick up items that are within your immediate reach and that collecting an item changes its status from being 'on the ground' to being 'in your inventory'. It's a simple but effective way to manage resources in the game, making sure everything happens in a logical and realistic manner.","Parameters:
1. ?var0 - moveable
2. ?var1 - agent

Preconditions:
```
(equipped ?var0 ?var1)
```

Effects:
```
(and
    (inventory ?var0)
    (not (equipped ?var0 ?var1))
    (handsfree ?var1)
)
```
","(:action pick
    :parameters (?var0 - moveable ?var1 - static)
    :precondition (and (at ?var0 ?var1) (agent_at ?var1))
    :effect (and (inventory ?var0) (not (at ?var0 ?var1)))
)",
minecraft,pick,0.7756763100624084,Semi-Hard Negative (Intra-Domain Mismatch),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: Picture the agent spotting something valuable or useful on the ground, like a piece of fruit or a tool. The pick action is them bending down and picking up this item, adding it to their inventory. It's a fundamental action for gathering resources as they explore the Minecraft environment. Once picked, the item is no longer lying around; it's safely stored in the agent's inventory.

Action name: pick


Your answer:

**Explanation:**

Let's imagine you're in a simplified game environment similar to Minecraft, where your goal is to gather resources like fruits or tools. In this game, to collect an item, you'd first need to be at the same location as the item. This ensures you can actually reach it to pick it up.

So, in the PDDL (which is a planning language used to describe tasks and environments in a structured way), the `pick` action is defined to help you collect these items. Here's why the action is set up this way:

1. **Preconditions (the must-haves before acting)**:
   - `(at ?var0 ?var1)`: This means the item (`?var0`) must be at your current location (`?var1`). Think of it as seeing a piece of fruit right at your feet. You need to be where the fruit is to pick it up.
   - `(agent_at ?var1)`: This specifies that you (the agent) must also be at that specific location (`?var1`). Just like in real life, you can't pick up something if you're not right there with it.

2. **Effects (what happens after the action)**:
   - `(inventory ?var0)`: Once you pick up the item, it moves into your inventory. This is like putting the fruit into your backpack.
   - `(not (at ?var0 ?var1))`: This indicates that the item is no longer lying on the ground at that location. It’s like saying, now that the fruit is in your backpack, it's not on the ground anymore.

This setup ensures that you can only pick up items that are within your immediate reach and that collecting an item changes its status from being 'on the ground' to being 'in your inventory'. It's a simple but effective way to manage resources in the game, making sure everything happens in a logical and realistic manner.","Parameters:
1. ?var0 - moveable
2. ?var1 - agent
3. ?var2 - moveable

Preconditions:
```
(and
    (hypothetical ?var0)
    (is_log ?var2)
    (equipped ?var2 ?var1)
)
```

Effects:
```
(and
    (inventory ?var0)
    (is_planks ?var0)
    (handsfree ?var1)
    (not (equipped ?var2 ?var1))
    (not (hypothetical ?var0))
    (not (is_log ?var2))
)
```
","(:action pick
    :parameters (?var0 - moveable ?var1 - static)
    :precondition (and (at ?var0 ?var1) (agent_at ?var1))
    :effect (and (inventory ?var0) (not (at ?var0 ?var1)))
)",
minecraft,pick,0.410630464553833,Semi-Hard Negative (Intra-Domain Mismatch),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: Picture the agent spotting something valuable or useful on the ground, like a piece of fruit or a tool. The pick action is them bending down and picking up this item, adding it to their inventory. It's a fundamental action for gathering resources as they explore the Minecraft environment. Once picked, the item is no longer lying around; it's safely stored in the agent's inventory.

Action name: pick


Your answer:

**Explanation:**

Let's imagine you're in a simplified game environment similar to Minecraft, where your goal is to gather resources like fruits or tools. In this game, to collect an item, you'd first need to be at the same location as the item. This ensures you can actually reach it to pick it up.

So, in the PDDL (which is a planning language used to describe tasks and environments in a structured way), the `pick` action is defined to help you collect these items. Here's why the action is set up this way:

1. **Preconditions (the must-haves before acting)**:
   - `(at ?var0 ?var1)`: This means the item (`?var0`) must be at your current location (`?var1`). Think of it as seeing a piece of fruit right at your feet. You need to be where the fruit is to pick it up.
   - `(agent_at ?var1)`: This specifies that you (the agent) must also be at that specific location (`?var1`). Just like in real life, you can't pick up something if you're not right there with it.

2. **Effects (what happens after the action)**:
   - `(inventory ?var0)`: Once you pick up the item, it moves into your inventory. This is like putting the fruit into your backpack.
   - `(not (at ?var0 ?var1))`: This indicates that the item is no longer lying on the ground at that location. It’s like saying, now that the fruit is in your backpack, it's not on the ground anymore.

This setup ensures that you can only pick up items that are within your immediate reach and that collecting an item changes its status from being 'on the ground' to being 'in your inventory'. It's a simple but effective way to manage resources in the game, making sure everything happens in a logical and realistic manner.","Parameters:
1. ?var0 - static
2. ?var1 - static

Preconditions:
```
(agent_at ?var1)
```

Effects:
```
(and
    (agent_at ?var0)
    (not (agent_at ?var1))
)
```
","(:action pick
    :parameters (?var0 - moveable ?var1 - static)
    :precondition (and (at ?var0 ?var1) (agent_at ?var1))
    :effect (and (inventory ?var0) (not (at ?var0 ?var1)))
)",
minecraft,pick,0.7020046710968018,Semi-Hard Negative (Intra-Domain Mismatch),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: Picture the agent spotting something valuable or useful on the ground, like a piece of fruit or a tool. The pick action is them bending down and picking up this item, adding it to their inventory. It's a fundamental action for gathering resources as they explore the Minecraft environment. Once picked, the item is no longer lying around; it's safely stored in the agent's inventory.

Action name: pick


Your answer:

**Explanation:**

Let's imagine you're in a simplified game environment similar to Minecraft, where your goal is to gather resources like fruits or tools. In this game, to collect an item, you'd first need to be at the same location as the item. This ensures you can actually reach it to pick it up.

So, in the PDDL (which is a planning language used to describe tasks and environments in a structured way), the `pick` action is defined to help you collect these items. Here's why the action is set up this way:

1. **Preconditions (the must-haves before acting)**:
   - `(at ?var0 ?var1)`: This means the item (`?var0`) must be at your current location (`?var1`). Think of it as seeing a piece of fruit right at your feet. You need to be where the fruit is to pick it up.
   - `(agent_at ?var1)`: This specifies that you (the agent) must also be at that specific location (`?var1`). Just like in real life, you can't pick up something if you're not right there with it.

2. **Effects (what happens after the action)**:
   - `(inventory ?var0)`: Once you pick up the item, it moves into your inventory. This is like putting the fruit into your backpack.
   - `(not (at ?var0 ?var1))`: This indicates that the item is no longer lying on the ground at that location. It’s like saying, now that the fruit is in your backpack, it's not on the ground anymore.

This setup ensures that you can only pick up items that are within your immediate reach and that collecting an item changes its status from being 'on the ground' to being 'in your inventory'. It's a simple but effective way to manage resources in the game, making sure everything happens in a logical and realistic manner.","Parameters:
1. ?var0 - moveable
2. ?var1 - agent

Preconditions:
```
(and
    (inventory ?var0)
    (handsfree ?var1)
)
```

Effects:
```
(and
    (equipped ?var0 ?var1)
    (not (handsfree ?var1))
    (not (inventory ?var0))
)
```
","(:action pick
    :parameters (?var0 - moveable ?var1 - static)
    :precondition (and (at ?var0 ?var1) (agent_at ?var1))
    :effect (and (inventory ?var0) (not (at ?var0 ?var1)))
)",
minecraft,pick,0.5239914655685425,Semi-Hard Negative (Intra-Domain Mismatch),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: Picture the agent spotting something valuable or useful on the ground, like a piece of fruit or a tool. The pick action is them bending down and picking up this item, adding it to their inventory. It's a fundamental action for gathering resources as they explore the Minecraft environment. Once picked, the item is no longer lying around; it's safely stored in the agent's inventory.

Action name: pick


Your answer:
","**Explanation:** Let's imagine you're playing a game similar to Minecraft. In this game, you have an action called ""recall,"" which lets you move an item you are holding directly into your backpack, making your hands empty again. To understand how this action works in the game's programming language (PDDL), let's break down the requirements and results of this action step-by-step.

1. **Precondition (What needs to be true before the action?):** 
   The precondition for the ""recall"" action is `(equipped ?var0 ?var1)`. This simply means that the item (`?var0`) must be currently held (equipped) by the player (`?var1`). Think of it as checking if you really have the axe in your hand before you can put it away.

2. **Effect (What happens after the action is done?):** 
   The effects of this action are several:
   - `(inventory ?var0)`: The item you were holding is now in your inventory. This is like saying, ""Okay, the axe is now in my backpack.""
   - `(not (equipped ?var0 ?var1))`: You are no longer holding the item. This ensures that the game knows the axe is no longer in your hand.
   - `(handsfree ?var1)`: Your hands are now empty. This part is like confirming that your hands are free, ready to grab or use something else.

By setting these preconditions and effects, the game ensures that the action of recalling an item (like teleporting your axe to your backpack) is logical and consistent with the game's rules. You need to be holding the item first to store it away, and after storing it, your hands should indeed be empty, ready for the next task. This keeps the game from getting confused, like trying to put away an axe you aren’t holding or ending up with an axe still in your hand after you've tried to store it.

In summary, the ""recall"" action in the game ensures everything happens in an orderly and expected manner, making your gameplay experience smooth and realistic within the game's world.
Parameters:
1. ?var0 - moveable
2. ?var1 - agent

Preconditions:
```
(equipped ?var0 ?var1)
```

Effects:
```
(and
    (inventory ?var0)
    (not (equipped ?var0 ?var1))
    (handsfree ?var1)
)
```
","(:action pick
    :parameters (?var0 - moveable ?var1 - static)
    :precondition (and (at ?var0 ?var1) (agent_at ?var1))
    :effect (and (inventory ?var0) (not (at ?var0 ?var1)))
)",
minecraft,pick,0.6813176870346069,Semi-Hard Negative (Intra-Domain Mismatch),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: Picture the agent spotting something valuable or useful on the ground, like a piece of fruit or a tool. The pick action is them bending down and picking up this item, adding it to their inventory. It's a fundamental action for gathering resources as they explore the Minecraft environment. Once picked, the item is no longer lying around; it's safely stored in the agent's inventory.

Action name: pick


Your answer:
","**Explanation:**
Let's imagine that in the world of Minecraft, the agent (like a player) wants to craft planks from a log. Think of it like a cook needing specific ingredients and tools to make a meal.

In our PDDL model, the action named ""craft_plank"" follows a similar thought process. Here's how the description of the world leads to the rules in our model:

1. **Preconditions**: Before crafting, certain conditions must be met:
   - The agent must have a log that they are actually holding. This is represented by `(equipped ?var2 ?var1)` meaning the log (`?var2`) is equipped by the agent (`?var1`).
   - The log must be a real log, confirmed by `(is_log ?var2)`.
   - We also see `(hypothetical ?var0)`. Here, the planks that will be created are initially just an idea (hypothetical) before they become real.

2. **Effects**: After the action is performed, we expect changes:
   - The hypothetical planks become real, shown by `(inventory ?var0)` which means the planks (`?var0`) are now in the agent's inventory.
   - They are identified as planks with `(is_planks ?var0)`.
   - The agent's hands become free `(handsfree ?var1)` because the log they were holding is now transformed into planks.
   - The log is no longer equipped or identified as a log, shown by `(not (equipped ?var2 ?var1))` and `(not (is_log ?var2))`. This indicates the log has been used up.

This schema carefully makes sure that the agent can only craft planks if they have a log to start with, and it accounts for what happens to the log and the newly created planks. It's much like ensuring you have flour before you bake a cake, and then, once the cake is baked, you no longer have just flour but a delicious cake instead!
Parameters:
1. ?var0 - moveable
2. ?var1 - agent
3. ?var2 - moveable

Preconditions:
```
(and
    (hypothetical ?var0)
    (is_log ?var2)
    (equipped ?var2 ?var1)
)
```

Effects:
```
(and
    (inventory ?var0)
    (is_planks ?var0)
    (handsfree ?var1)
    (not (equipped ?var2 ?var1))
    (not (hypothetical ?var0))
    (not (is_log ?var2))
)
```
","(:action pick
    :parameters (?var0 - moveable ?var1 - static)
    :precondition (and (at ?var0 ?var1) (agent_at ?var1))
    :effect (and (inventory ?var0) (not (at ?var0 ?var1)))
)",
minecraft,pick,0.57680344581604,Semi-Hard Negative (Intra-Domain Mismatch),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: Picture the agent spotting something valuable or useful on the ground, like a piece of fruit or a tool. The pick action is them bending down and picking up this item, adding it to their inventory. It's a fundamental action for gathering resources as they explore the Minecraft environment. Once picked, the item is no longer lying around; it's safely stored in the agent's inventory.

Action name: pick


Your answer:
","**Explanation:**
Let's think about the action called ""move"" in a Minecraft-like game, where the goal is to get an agent (like a player) from one place to another. The PDDL action schema you're asking about is designed to handle this simple yet crucial task.

In the action schema, we have two parameters: `?var0` and `?var1`, which are both locations. You can think of `?var0` as the new location where the agent wants to go, and `?var1` as the current location where the agent is starting from.

**Preconditions:** The precondition for the ""move"" action is `(agent_at ?var1)`. This just means that before the agent can move, it must be verified that the agent is actually at the starting location (`?var1`). It’s similar to checking if you are really at home before you walk to the park.

**Effects:** After the agent moves, we need to update the agent's location in the game. This is what the effects in the action schema do:
- `(agent_at ?var0)` says that the agent is now at the new location (`?var0`), like saying, ""Now, I’m at the park.""
- `(not (agent_at ?var1))` means that the agent is no longer at the starting location (`?var1`), similar to saying, ""I'm no longer at home.""

This change in the agent's location is crucial for the game to keep track of where the agent is at any moment, which affects what the agent can interact with or what actions they can perform next. The effect ensures the game world is accurately updated following the agent's movement, and no confusion arises about where the agent is located. 

So, in simple terms, the action ""move"" in this game ensures that when the agent moves from one spot to another, the game correctly recognizes this change and updates the world accordingly.
Parameters:
1. ?var0 - static
2. ?var1 - static

Preconditions:
```
(agent_at ?var1)
```

Effects:
```
(and
    (agent_at ?var0)
    (not (agent_at ?var1))
)
```
","(:action pick
    :parameters (?var0 - moveable ?var1 - static)
    :precondition (and (at ?var0 ?var1) (agent_at ?var1))
    :effect (and (inventory ?var0) (not (at ?var0 ?var1)))
)",
minecraft,pick,0.4719609022140503,Semi-Hard Negative (Intra-Domain Mismatch),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: Picture the agent spotting something valuable or useful on the ground, like a piece of fruit or a tool. The pick action is them bending down and picking up this item, adding it to their inventory. It's a fundamental action for gathering resources as they explore the Minecraft environment. Once picked, the item is no longer lying around; it's safely stored in the agent's inventory.

Action name: pick


Your answer:
","**Explanation:**
Let's think of the action called ""equip"" like someone getting ready to use something from their backpack. Imagine you're planning to paint a picture. First, you need to make sure you have a paintbrush in your backpack (this is similar to the ""inventory"" in our scenario). You also need to make sure your hand is free to hold the paintbrush (like the ""handsfree"" condition).

In the ""equip"" action in this Minecraft-like environment, two main things need to happen before the action can take place:
1. **The item is in the inventory** - This is just like making sure the paintbrush is in your backpack. The precondition `(inventory ?var0)` confirms that the item you want to use is actually with you, stored safely in your inventory.
2. **The agent's hands are free** - This means you aren't holding anything else. The precondition `(handsfree ?var1)` checks that your hands (or the agent's hands, in this case) are empty and ready to hold something new.

When you decide to ""equip"" or start using the item, several things change:
- **The item is now equipped** - This means the item is in your hand and ready to use, similar to how you would hold a paintbrush when you're ready to paint. This is shown by the effect `(equipped ?var0 ?var1)`.
- **Your hand is no longer free** - Just like when you pick up the paintbrush, your hand isn't empty anymore. This is why the effect includes `(not (handsfree ?var1))`.
- **The item is no longer just in the inventory** - Since you're now holding the item, it's not just sitting in your backpack. This change is represented by `(not (inventory ?var0))`.

These changes ensure that the action of equipping something is logical and makes sense in the environment, just like how you'd logically take a paintbrush out of your backpack to use it.
Parameters:
1. ?var0 - moveable
2. ?var1 - agent

Preconditions:
```
(and
    (inventory ?var0)
    (handsfree ?var1)
)
```

Effects:
```
(and
    (equipped ?var0 ?var1)
    (not (handsfree ?var1))
    (not (inventory ?var0))
)
```
","(:action pick
    :parameters (?var0 - moveable ?var1 - static)
    :precondition (and (at ?var0 ?var1) (agent_at ?var1))
    :effect (and (inventory ?var0) (not (at ?var0 ?var1)))
)",
minecraft,pick,0.2259889543056488,Hard Negative (Manipulated Action),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: Picture the agent spotting something valuable or useful on the ground, like a piece of fruit or a tool. The pick action is them bending down and picking up this item, adding it to their inventory. It's a fundamental action for gathering resources as they explore the Minecraft environment. Once picked, the item is no longer lying around; it's safely stored in the agent's inventory.

Action name: pick


Your answer:
","Parameters:
1. ?var0 - moveable
2. ?var1 - static

Preconditions:
```
(and
    (not (agent_at ?var1))
    (at ?var0 ?var1)
)
```

Effects:
```
(and
    (not (at ?var0 ?var1))
)
```
","(:action pick
    :parameters (?var0 - moveable ?var1 - static)
    :precondition (and (at ?var0 ?var1) (agent_at ?var1))
    :effect (and (inventory ?var0) (not (at ?var0 ?var1)))
)","negate (agent_at ?var1) in preconditions
remove (inventory ?var0) from effects
"
minecraft,pick,0.393624484539032,Hard Negative (Manipulated Action),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: Picture the agent spotting something valuable or useful on the ground, like a piece of fruit or a tool. The pick action is them bending down and picking up this item, adding it to their inventory. It's a fundamental action for gathering resources as they explore the Minecraft environment. Once picked, the item is no longer lying around; it's safely stored in the agent's inventory.

Action name: pick


Your answer:
","Parameters:
1. ?var0 - moveable
2. ?var1 - static

Preconditions:
```
(and
    (not (at ?var0 ?var1))
    (inventory ?var0)
)
```

Effects:
```
(and
    (at ?var0 ?var1)
    (agent_at ?var1)
)
```
","(:action pick
    :parameters (?var0 - moveable ?var1 - static)
    :precondition (and (at ?var0 ?var1) (agent_at ?var1))
    :effect (and (inventory ?var0) (not (at ?var0 ?var1)))
)","swap (at ?var0 ?var1) with (not (at ?var0 ?var1))
swap (agent_at ?var1) with (inventory ?var0)
"
minecraft,pick,0.31848934292793274,Hard Negative (Manipulated Action),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: Picture the agent spotting something valuable or useful on the ground, like a piece of fruit or a tool. The pick action is them bending down and picking up this item, adding it to their inventory. It's a fundamental action for gathering resources as they explore the Minecraft environment. Once picked, the item is no longer lying around; it's safely stored in the agent's inventory.

Action name: pick


Your answer:
","Parameters:
1. ?var0 - moveable
2. ?var1 - static

Preconditions:
```
(at ?var0 ?var1)
```

Effects:
```
(and
    (inventory ?var0)
    (not (at ?var0 ?var1))
)
```
","(:action pick
    :parameters (?var0 - moveable ?var1 - static)
    :precondition (and (at ?var0 ?var1) (agent_at ?var1))
    :effect (and (inventory ?var0) (not (at ?var0 ?var1)))
)","remove (agent_at ?var1) from preconditions
"
minecraft,pick,0.36211588978767395,Hard Negative (Manipulated Action),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: Picture the agent spotting something valuable or useful on the ground, like a piece of fruit or a tool. The pick action is them bending down and picking up this item, adding it to their inventory. It's a fundamental action for gathering resources as they explore the Minecraft environment. Once picked, the item is no longer lying around; it's safely stored in the agent's inventory.

Action name: pick


Your answer:
","Parameters:
1. ?var0 - moveable
2. ?var1 - static

Preconditions:
```
(and
    (not (at ?var0 ?var1))
    (inventory ?var0)
)
```

Effects:
```
(and
    (agent_at ?var1)
    (at ?var0 ?var1)
)
```
","(:action pick
    :parameters (?var0 - moveable ?var1 - static)
    :precondition (and (at ?var0 ?var1) (agent_at ?var1))
    :effect (and (inventory ?var0) (not (at ?var0 ?var1)))
)","swap (agent_at ?var1) with (not (at ?var0 ?var1))
swap (at ?var0 ?var1) with (inventory ?var0)
"
minecraft,pick,0.2543798089027405,Hard Negative (Manipulated Action),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: Picture the agent spotting something valuable or useful on the ground, like a piece of fruit or a tool. The pick action is them bending down and picking up this item, adding it to their inventory. It's a fundamental action for gathering resources as they explore the Minecraft environment. Once picked, the item is no longer lying around; it's safely stored in the agent's inventory.

Action name: pick


Your answer:
","Parameters:
1. ?var0 - moveable
2. ?var1 - static

Preconditions:
```
(inventory ?var0)
```

Effects:
```
(and
    (at ?var0 ?var1)
    (not (at ?var0 ?var1))
)
```
","(:action pick
    :parameters (?var0 - moveable ?var1 - static)
    :precondition (and (at ?var0 ?var1) (agent_at ?var1))
    :effect (and (inventory ?var0) (not (at ?var0 ?var1)))
)","remove (agent_at ?var1) from preconditions
swap (at ?var0 ?var1) with (inventory ?var0)
"
minecraft,pick,0.18096154928207397,Hard Negative (Manipulated Action),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: Picture the agent spotting something valuable or useful on the ground, like a piece of fruit or a tool. The pick action is them bending down and picking up this item, adding it to their inventory. It's a fundamental action for gathering resources as they explore the Minecraft environment. Once picked, the item is no longer lying around; it's safely stored in the agent's inventory.

Action name: pick


Your answer:
","Parameters:
1. ?var0 - moveable
2. ?var1 - static

Preconditions:
```
(at ?var0 ?var1)
```

Effects:
```
(and
    (not (inventory ?var0))
    (not (at ?var0 ?var1))
)
```
","(:action pick
    :parameters (?var0 - moveable ?var1 - static)
    :precondition (and (at ?var0 ?var1) (agent_at ?var1))
    :effect (and (inventory ?var0) (not (at ?var0 ?var1)))
)","negate (inventory ?var0) in effects
remove (agent_at ?var1) from preconditions
"
minecraft,pick,0.5546449422836304,Hard Negative (Manipulated Action),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: Picture the agent spotting something valuable or useful on the ground, like a piece of fruit or a tool. The pick action is them bending down and picking up this item, adding it to their inventory. It's a fundamental action for gathering resources as they explore the Minecraft environment. Once picked, the item is no longer lying around; it's safely stored in the agent's inventory.

Action name: pick


Your answer:
","Parameters:
1. ?var0 - moveable
2. ?var1 - static

Preconditions:
```
(and
    (inventory ?var0)
    (agent_at ?var1)
)
```

Effects:
```
(and
    (at ?var0 ?var1)
    (at ?var0 ?var1)
)
```
","(:action pick
    :parameters (?var0 - moveable ?var1 - static)
    :precondition (and (at ?var0 ?var1) (agent_at ?var1))
    :effect (and (inventory ?var0) (not (at ?var0 ?var1)))
)","negate (not (at ?var0 ?var1)) in effects
swap (at ?var0 ?var1) with (inventory ?var0)
"
minecraft,pick,0.393624484539032,Hard Negative (Manipulated Action),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: Picture the agent spotting something valuable or useful on the ground, like a piece of fruit or a tool. The pick action is them bending down and picking up this item, adding it to their inventory. It's a fundamental action for gathering resources as they explore the Minecraft environment. Once picked, the item is no longer lying around; it's safely stored in the agent's inventory.

Action name: pick


Your answer:
","Parameters:
1. ?var0 - moveable
2. ?var1 - static

Preconditions:
```
(and
    (not (at ?var0 ?var1))
    (inventory ?var0)
)
```

Effects:
```
(and
    (at ?var0 ?var1)
    (agent_at ?var1)
)
```
","(:action pick
    :parameters (?var0 - moveable ?var1 - static)
    :precondition (and (at ?var0 ?var1) (agent_at ?var1))
    :effect (and (inventory ?var0) (not (at ?var0 ?var1)))
)","swap (at ?var0 ?var1) with (not (at ?var0 ?var1))
swap (agent_at ?var1) with (inventory ?var0)
"
minecraft,pick,0.31848934292793274,Hard Negative (Manipulated Action),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: Picture the agent spotting something valuable or useful on the ground, like a piece of fruit or a tool. The pick action is them bending down and picking up this item, adding it to their inventory. It's a fundamental action for gathering resources as they explore the Minecraft environment. Once picked, the item is no longer lying around; it's safely stored in the agent's inventory.

Action name: pick


Your answer:
","Parameters:
1. ?var0 - moveable
2. ?var1 - static

Preconditions:
```
(at ?var0 ?var1)
```

Effects:
```
(and
    (inventory ?var0)
    (not (at ?var0 ?var1))
)
```
","(:action pick
    :parameters (?var0 - moveable ?var1 - static)
    :precondition (and (at ?var0 ?var1) (agent_at ?var1))
    :effect (and (inventory ?var0) (not (at ?var0 ?var1)))
)","remove (agent_at ?var1) from preconditions
"
minecraft,pick,0.32128262519836426,Hard Negative (Manipulated Action),NL Desc vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: Picture the agent spotting something valuable or useful on the ground, like a piece of fruit or a tool. The pick action is them bending down and picking up this item, adding it to their inventory. It's a fundamental action for gathering resources as they explore the Minecraft environment. Once picked, the item is no longer lying around; it's safely stored in the agent's inventory.

Action name: pick


Your answer:
","Parameters:
1. ?var0 - moveable
2. ?var1 - static

Preconditions:
```
(and
    (not (at ?var0 ?var1))
    (agent_at ?var1)
)
```

Effects:
```
(and
    (at ?var0 ?var1)
    (not (inventory ?var0))
)
```
","(:action pick
    :parameters (?var0 - moveable ?var1 - static)
    :precondition (and (at ?var0 ?var1) (agent_at ?var1))
    :effect (and (inventory ?var0) (not (at ?var0 ?var1)))
)","swap (at ?var0 ?var1) with (not (at ?var0 ?var1))
negate (inventory ?var0) in effects
"
minecraft,pick,0.49980446696281433,Hard Negative (Manipulated Action),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: Picture the agent spotting something valuable or useful on the ground, like a piece of fruit or a tool. The pick action is them bending down and picking up this item, adding it to their inventory. It's a fundamental action for gathering resources as they explore the Minecraft environment. Once picked, the item is no longer lying around; it's safely stored in the agent's inventory.

Action name: pick


Your answer:

**Explanation:**

Let's imagine you're in a simplified game environment similar to Minecraft, where your goal is to gather resources like fruits or tools. In this game, to collect an item, you'd first need to be at the same location as the item. This ensures you can actually reach it to pick it up.

So, in the PDDL (which is a planning language used to describe tasks and environments in a structured way), the `pick` action is defined to help you collect these items. Here's why the action is set up this way:

1. **Preconditions (the must-haves before acting)**:
   - `(at ?var0 ?var1)`: This means the item (`?var0`) must be at your current location (`?var1`). Think of it as seeing a piece of fruit right at your feet. You need to be where the fruit is to pick it up.
   - `(agent_at ?var1)`: This specifies that you (the agent) must also be at that specific location (`?var1`). Just like in real life, you can't pick up something if you're not right there with it.

2. **Effects (what happens after the action)**:
   - `(inventory ?var0)`: Once you pick up the item, it moves into your inventory. This is like putting the fruit into your backpack.
   - `(not (at ?var0 ?var1))`: This indicates that the item is no longer lying on the ground at that location. It’s like saying, now that the fruit is in your backpack, it's not on the ground anymore.

This setup ensures that you can only pick up items that are within your immediate reach and that collecting an item changes its status from being 'on the ground' to being 'in your inventory'. It's a simple but effective way to manage resources in the game, making sure everything happens in a logical and realistic manner.","Parameters:
1. ?var0 - moveable
2. ?var1 - static

Preconditions:
```
(agent_at ?var1)
```

Effects:
```
(and
    (inventory ?var0)
    (not (at ?var0 ?var1))
)
```
","(:action pick
    :parameters (?var0 - moveable ?var1 - static)
    :precondition (and (at ?var0 ?var1) (agent_at ?var1))
    :effect (and (inventory ?var0) (not (at ?var0 ?var1)))
)","remove (at ?var0 ?var1) from preconditions
"
minecraft,pick,0.5720183849334717,Hard Negative (Manipulated Action),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: Picture the agent spotting something valuable or useful on the ground, like a piece of fruit or a tool. The pick action is them bending down and picking up this item, adding it to their inventory. It's a fundamental action for gathering resources as they explore the Minecraft environment. Once picked, the item is no longer lying around; it's safely stored in the agent's inventory.

Action name: pick


Your answer:

**Explanation:**

Let's imagine you're in a simplified game environment similar to Minecraft, where your goal is to gather resources like fruits or tools. In this game, to collect an item, you'd first need to be at the same location as the item. This ensures you can actually reach it to pick it up.

So, in the PDDL (which is a planning language used to describe tasks and environments in a structured way), the `pick` action is defined to help you collect these items. Here's why the action is set up this way:

1. **Preconditions (the must-haves before acting)**:
   - `(at ?var0 ?var1)`: This means the item (`?var0`) must be at your current location (`?var1`). Think of it as seeing a piece of fruit right at your feet. You need to be where the fruit is to pick it up.
   - `(agent_at ?var1)`: This specifies that you (the agent) must also be at that specific location (`?var1`). Just like in real life, you can't pick up something if you're not right there with it.

2. **Effects (what happens after the action)**:
   - `(inventory ?var0)`: Once you pick up the item, it moves into your inventory. This is like putting the fruit into your backpack.
   - `(not (at ?var0 ?var1))`: This indicates that the item is no longer lying on the ground at that location. It’s like saying, now that the fruit is in your backpack, it's not on the ground anymore.

This setup ensures that you can only pick up items that are within your immediate reach and that collecting an item changes its status from being 'on the ground' to being 'in your inventory'. It's a simple but effective way to manage resources in the game, making sure everything happens in a logical and realistic manner.","Parameters:
1. ?var0 - moveable
2. ?var1 - static

Preconditions:
```
(and
    (inventory ?var0)
    (at ?var0 ?var1)
)
```

Effects:
```
(and
    (at ?var0 ?var1)
    (agent_at ?var1)
)
```
","(:action pick
    :parameters (?var0 - moveable ?var1 - static)
    :precondition (and (at ?var0 ?var1) (agent_at ?var1))
    :effect (and (inventory ?var0) (not (at ?var0 ?var1)))
)","negate (not (at ?var0 ?var1)) in effects
swap (agent_at ?var1) with (inventory ?var0)
"
minecraft,pick,0.5639294385910034,Hard Negative (Manipulated Action),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: Picture the agent spotting something valuable or useful on the ground, like a piece of fruit or a tool. The pick action is them bending down and picking up this item, adding it to their inventory. It's a fundamental action for gathering resources as they explore the Minecraft environment. Once picked, the item is no longer lying around; it's safely stored in the agent's inventory.

Action name: pick


Your answer:

**Explanation:**

Let's imagine you're in a simplified game environment similar to Minecraft, where your goal is to gather resources like fruits or tools. In this game, to collect an item, you'd first need to be at the same location as the item. This ensures you can actually reach it to pick it up.

So, in the PDDL (which is a planning language used to describe tasks and environments in a structured way), the `pick` action is defined to help you collect these items. Here's why the action is set up this way:

1. **Preconditions (the must-haves before acting)**:
   - `(at ?var0 ?var1)`: This means the item (`?var0`) must be at your current location (`?var1`). Think of it as seeing a piece of fruit right at your feet. You need to be where the fruit is to pick it up.
   - `(agent_at ?var1)`: This specifies that you (the agent) must also be at that specific location (`?var1`). Just like in real life, you can't pick up something if you're not right there with it.

2. **Effects (what happens after the action)**:
   - `(inventory ?var0)`: Once you pick up the item, it moves into your inventory. This is like putting the fruit into your backpack.
   - `(not (at ?var0 ?var1))`: This indicates that the item is no longer lying on the ground at that location. It’s like saying, now that the fruit is in your backpack, it's not on the ground anymore.

This setup ensures that you can only pick up items that are within your immediate reach and that collecting an item changes its status from being 'on the ground' to being 'in your inventory'. It's a simple but effective way to manage resources in the game, making sure everything happens in a logical and realistic manner.","Parameters:
1. ?var0 - moveable
2. ?var1 - static

Preconditions:
```
(and
    (at ?var0 ?var1)
    (agent_at ?var1)
)
```

Effects:
```
(and
    (at ?var0 ?var1)
    (inventory ?var0)
)
```
","(:action pick
    :parameters (?var0 - moveable ?var1 - static)
    :precondition (and (at ?var0 ?var1) (agent_at ?var1))
    :effect (and (inventory ?var0) (not (at ?var0 ?var1)))
)","negate (not (at ?var0 ?var1)) in effects
"
minecraft,pick,0.43271303176879883,Hard Negative (Manipulated Action),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: Picture the agent spotting something valuable or useful on the ground, like a piece of fruit or a tool. The pick action is them bending down and picking up this item, adding it to their inventory. It's a fundamental action for gathering resources as they explore the Minecraft environment. Once picked, the item is no longer lying around; it's safely stored in the agent's inventory.

Action name: pick


Your answer:

**Explanation:**

Let's imagine you're in a simplified game environment similar to Minecraft, where your goal is to gather resources like fruits or tools. In this game, to collect an item, you'd first need to be at the same location as the item. This ensures you can actually reach it to pick it up.

So, in the PDDL (which is a planning language used to describe tasks and environments in a structured way), the `pick` action is defined to help you collect these items. Here's why the action is set up this way:

1. **Preconditions (the must-haves before acting)**:
   - `(at ?var0 ?var1)`: This means the item (`?var0`) must be at your current location (`?var1`). Think of it as seeing a piece of fruit right at your feet. You need to be where the fruit is to pick it up.
   - `(agent_at ?var1)`: This specifies that you (the agent) must also be at that specific location (`?var1`). Just like in real life, you can't pick up something if you're not right there with it.

2. **Effects (what happens after the action)**:
   - `(inventory ?var0)`: Once you pick up the item, it moves into your inventory. This is like putting the fruit into your backpack.
   - `(not (at ?var0 ?var1))`: This indicates that the item is no longer lying on the ground at that location. It’s like saying, now that the fruit is in your backpack, it's not on the ground anymore.

This setup ensures that you can only pick up items that are within your immediate reach and that collecting an item changes its status from being 'on the ground' to being 'in your inventory'. It's a simple but effective way to manage resources in the game, making sure everything happens in a logical and realistic manner.","Parameters:
1. ?var0 - moveable
2. ?var1 - static

Preconditions:
```
(agent_at ?var1)
```

Effects:
```
(and
    (inventory ?var0)
)
```
","(:action pick
    :parameters (?var0 - moveable ?var1 - static)
    :precondition (and (at ?var0 ?var1) (agent_at ?var1))
    :effect (and (inventory ?var0) (not (at ?var0 ?var1)))
)","remove (not (at ?var0 ?var1)) from effects
remove (at ?var0 ?var1) from preconditions
"
minecraft,pick,0.42721161246299744,Hard Negative (Manipulated Action),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: Picture the agent spotting something valuable or useful on the ground, like a piece of fruit or a tool. The pick action is them bending down and picking up this item, adding it to their inventory. It's a fundamental action for gathering resources as they explore the Minecraft environment. Once picked, the item is no longer lying around; it's safely stored in the agent's inventory.

Action name: pick


Your answer:

**Explanation:**

Let's imagine you're in a simplified game environment similar to Minecraft, where your goal is to gather resources like fruits or tools. In this game, to collect an item, you'd first need to be at the same location as the item. This ensures you can actually reach it to pick it up.

So, in the PDDL (which is a planning language used to describe tasks and environments in a structured way), the `pick` action is defined to help you collect these items. Here's why the action is set up this way:

1. **Preconditions (the must-haves before acting)**:
   - `(at ?var0 ?var1)`: This means the item (`?var0`) must be at your current location (`?var1`). Think of it as seeing a piece of fruit right at your feet. You need to be where the fruit is to pick it up.
   - `(agent_at ?var1)`: This specifies that you (the agent) must also be at that specific location (`?var1`). Just like in real life, you can't pick up something if you're not right there with it.

2. **Effects (what happens after the action)**:
   - `(inventory ?var0)`: Once you pick up the item, it moves into your inventory. This is like putting the fruit into your backpack.
   - `(not (at ?var0 ?var1))`: This indicates that the item is no longer lying on the ground at that location. It’s like saying, now that the fruit is in your backpack, it's not on the ground anymore.

This setup ensures that you can only pick up items that are within your immediate reach and that collecting an item changes its status from being 'on the ground' to being 'in your inventory'. It's a simple but effective way to manage resources in the game, making sure everything happens in a logical and realistic manner.","Parameters:
1. ?var0 - moveable
2. ?var1 - static

Preconditions:
```
(and
    (not (at ?var0 ?var1))
    (agent_at ?var1)
)
```

Effects:
```
(and
    (at ?var0 ?var1)
    (inventory ?var0)
)
```
","(:action pick
    :parameters (?var0 - moveable ?var1 - static)
    :precondition (and (at ?var0 ?var1) (agent_at ?var1))
    :effect (and (inventory ?var0) (not (at ?var0 ?var1)))
)","swap (at ?var0 ?var1) with (not (at ?var0 ?var1))
"
minecraft,pick,0.5639294385910034,Hard Negative (Manipulated Action),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: Picture the agent spotting something valuable or useful on the ground, like a piece of fruit or a tool. The pick action is them bending down and picking up this item, adding it to their inventory. It's a fundamental action for gathering resources as they explore the Minecraft environment. Once picked, the item is no longer lying around; it's safely stored in the agent's inventory.

Action name: pick


Your answer:

**Explanation:**

Let's imagine you're in a simplified game environment similar to Minecraft, where your goal is to gather resources like fruits or tools. In this game, to collect an item, you'd first need to be at the same location as the item. This ensures you can actually reach it to pick it up.

So, in the PDDL (which is a planning language used to describe tasks and environments in a structured way), the `pick` action is defined to help you collect these items. Here's why the action is set up this way:

1. **Preconditions (the must-haves before acting)**:
   - `(at ?var0 ?var1)`: This means the item (`?var0`) must be at your current location (`?var1`). Think of it as seeing a piece of fruit right at your feet. You need to be where the fruit is to pick it up.
   - `(agent_at ?var1)`: This specifies that you (the agent) must also be at that specific location (`?var1`). Just like in real life, you can't pick up something if you're not right there with it.

2. **Effects (what happens after the action)**:
   - `(inventory ?var0)`: Once you pick up the item, it moves into your inventory. This is like putting the fruit into your backpack.
   - `(not (at ?var0 ?var1))`: This indicates that the item is no longer lying on the ground at that location. It’s like saying, now that the fruit is in your backpack, it's not on the ground anymore.

This setup ensures that you can only pick up items that are within your immediate reach and that collecting an item changes its status from being 'on the ground' to being 'in your inventory'. It's a simple but effective way to manage resources in the game, making sure everything happens in a logical and realistic manner.","Parameters:
1. ?var0 - moveable
2. ?var1 - static

Preconditions:
```
(and
    (at ?var0 ?var1)
    (agent_at ?var1)
)
```

Effects:
```
(and
    (at ?var0 ?var1)
    (inventory ?var0)
)
```
","(:action pick
    :parameters (?var0 - moveable ?var1 - static)
    :precondition (and (at ?var0 ?var1) (agent_at ?var1))
    :effect (and (inventory ?var0) (not (at ?var0 ?var1)))
)","negate (not (at ?var0 ?var1)) in effects
"
minecraft,pick,0.10843660682439804,Hard Negative (Manipulated Action),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: Picture the agent spotting something valuable or useful on the ground, like a piece of fruit or a tool. The pick action is them bending down and picking up this item, adding it to their inventory. It's a fundamental action for gathering resources as they explore the Minecraft environment. Once picked, the item is no longer lying around; it's safely stored in the agent's inventory.

Action name: pick


Your answer:

**Explanation:**

Let's imagine you're in a simplified game environment similar to Minecraft, where your goal is to gather resources like fruits or tools. In this game, to collect an item, you'd first need to be at the same location as the item. This ensures you can actually reach it to pick it up.

So, in the PDDL (which is a planning language used to describe tasks and environments in a structured way), the `pick` action is defined to help you collect these items. Here's why the action is set up this way:

1. **Preconditions (the must-haves before acting)**:
   - `(at ?var0 ?var1)`: This means the item (`?var0`) must be at your current location (`?var1`). Think of it as seeing a piece of fruit right at your feet. You need to be where the fruit is to pick it up.
   - `(agent_at ?var1)`: This specifies that you (the agent) must also be at that specific location (`?var1`). Just like in real life, you can't pick up something if you're not right there with it.

2. **Effects (what happens after the action)**:
   - `(inventory ?var0)`: Once you pick up the item, it moves into your inventory. This is like putting the fruit into your backpack.
   - `(not (at ?var0 ?var1))`: This indicates that the item is no longer lying on the ground at that location. It’s like saying, now that the fruit is in your backpack, it's not on the ground anymore.

This setup ensures that you can only pick up items that are within your immediate reach and that collecting an item changes its status from being 'on the ground' to being 'in your inventory'. It's a simple but effective way to manage resources in the game, making sure everything happens in a logical and realistic manner.","Parameters:
1. ?var0 - moveable
2. ?var1 - static

Preconditions:
```
(at ?var0 ?var1)
```

Effects:
```
(and
    (not (at ?var0 ?var1))
)
```
","(:action pick
    :parameters (?var0 - moveable ?var1 - static)
    :precondition (and (at ?var0 ?var1) (agent_at ?var1))
    :effect (and (inventory ?var0) (not (at ?var0 ?var1)))
)","remove (agent_at ?var1) from preconditions
remove (inventory ?var0) from effects
"
minecraft,pick,0.5639294385910034,Hard Negative (Manipulated Action),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: Picture the agent spotting something valuable or useful on the ground, like a piece of fruit or a tool. The pick action is them bending down and picking up this item, adding it to their inventory. It's a fundamental action for gathering resources as they explore the Minecraft environment. Once picked, the item is no longer lying around; it's safely stored in the agent's inventory.

Action name: pick


Your answer:

**Explanation:**

Let's imagine you're in a simplified game environment similar to Minecraft, where your goal is to gather resources like fruits or tools. In this game, to collect an item, you'd first need to be at the same location as the item. This ensures you can actually reach it to pick it up.

So, in the PDDL (which is a planning language used to describe tasks and environments in a structured way), the `pick` action is defined to help you collect these items. Here's why the action is set up this way:

1. **Preconditions (the must-haves before acting)**:
   - `(at ?var0 ?var1)`: This means the item (`?var0`) must be at your current location (`?var1`). Think of it as seeing a piece of fruit right at your feet. You need to be where the fruit is to pick it up.
   - `(agent_at ?var1)`: This specifies that you (the agent) must also be at that specific location (`?var1`). Just like in real life, you can't pick up something if you're not right there with it.

2. **Effects (what happens after the action)**:
   - `(inventory ?var0)`: Once you pick up the item, it moves into your inventory. This is like putting the fruit into your backpack.
   - `(not (at ?var0 ?var1))`: This indicates that the item is no longer lying on the ground at that location. It’s like saying, now that the fruit is in your backpack, it's not on the ground anymore.

This setup ensures that you can only pick up items that are within your immediate reach and that collecting an item changes its status from being 'on the ground' to being 'in your inventory'. It's a simple but effective way to manage resources in the game, making sure everything happens in a logical and realistic manner.","Parameters:
1. ?var0 - moveable
2. ?var1 - static

Preconditions:
```
(and
    (at ?var0 ?var1)
    (agent_at ?var1)
)
```

Effects:
```
(and
    (at ?var0 ?var1)
    (inventory ?var0)
)
```
","(:action pick
    :parameters (?var0 - moveable ?var1 - static)
    :precondition (and (at ?var0 ?var1) (agent_at ?var1))
    :effect (and (inventory ?var0) (not (at ?var0 ?var1)))
)","negate (not (at ?var0 ?var1)) in effects
"
minecraft,pick,0.32128262519836426,Hard Negative (Manipulated Action),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: Picture the agent spotting something valuable or useful on the ground, like a piece of fruit or a tool. The pick action is them bending down and picking up this item, adding it to their inventory. It's a fundamental action for gathering resources as they explore the Minecraft environment. Once picked, the item is no longer lying around; it's safely stored in the agent's inventory.

Action name: pick


Your answer:

**Explanation:**

Let's imagine you're in a simplified game environment similar to Minecraft, where your goal is to gather resources like fruits or tools. In this game, to collect an item, you'd first need to be at the same location as the item. This ensures you can actually reach it to pick it up.

So, in the PDDL (which is a planning language used to describe tasks and environments in a structured way), the `pick` action is defined to help you collect these items. Here's why the action is set up this way:

1. **Preconditions (the must-haves before acting)**:
   - `(at ?var0 ?var1)`: This means the item (`?var0`) must be at your current location (`?var1`). Think of it as seeing a piece of fruit right at your feet. You need to be where the fruit is to pick it up.
   - `(agent_at ?var1)`: This specifies that you (the agent) must also be at that specific location (`?var1`). Just like in real life, you can't pick up something if you're not right there with it.

2. **Effects (what happens after the action)**:
   - `(inventory ?var0)`: Once you pick up the item, it moves into your inventory. This is like putting the fruit into your backpack.
   - `(not (at ?var0 ?var1))`: This indicates that the item is no longer lying on the ground at that location. It’s like saying, now that the fruit is in your backpack, it's not on the ground anymore.

This setup ensures that you can only pick up items that are within your immediate reach and that collecting an item changes its status from being 'on the ground' to being 'in your inventory'. It's a simple but effective way to manage resources in the game, making sure everything happens in a logical and realistic manner.","Parameters:
1. ?var0 - moveable
2. ?var1 - static

Preconditions:
```
(and
    (not (at ?var0 ?var1))
    (agent_at ?var1)
)
```

Effects:
```
(and
    (at ?var0 ?var1)
    (not (inventory ?var0))
)
```
","(:action pick
    :parameters (?var0 - moveable ?var1 - static)
    :precondition (and (at ?var0 ?var1) (agent_at ?var1))
    :effect (and (inventory ?var0) (not (at ?var0 ?var1)))
)","swap (at ?var0 ?var1) with (not (at ?var0 ?var1))
negate (inventory ?var0) in effects
"
minecraft,pick,0.25534588098526,Hard Negative (Manipulated Action),Explanation vs. Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: Picture the agent spotting something valuable or useful on the ground, like a piece of fruit or a tool. The pick action is them bending down and picking up this item, adding it to their inventory. It's a fundamental action for gathering resources as they explore the Minecraft environment. Once picked, the item is no longer lying around; it's safely stored in the agent's inventory.

Action name: pick


Your answer:

**Explanation:**

Let's imagine you're in a simplified game environment similar to Minecraft, where your goal is to gather resources like fruits or tools. In this game, to collect an item, you'd first need to be at the same location as the item. This ensures you can actually reach it to pick it up.

So, in the PDDL (which is a planning language used to describe tasks and environments in a structured way), the `pick` action is defined to help you collect these items. Here's why the action is set up this way:

1. **Preconditions (the must-haves before acting)**:
   - `(at ?var0 ?var1)`: This means the item (`?var0`) must be at your current location (`?var1`). Think of it as seeing a piece of fruit right at your feet. You need to be where the fruit is to pick it up.
   - `(agent_at ?var1)`: This specifies that you (the agent) must also be at that specific location (`?var1`). Just like in real life, you can't pick up something if you're not right there with it.

2. **Effects (what happens after the action)**:
   - `(inventory ?var0)`: Once you pick up the item, it moves into your inventory. This is like putting the fruit into your backpack.
   - `(not (at ?var0 ?var1))`: This indicates that the item is no longer lying on the ground at that location. It’s like saying, now that the fruit is in your backpack, it's not on the ground anymore.

This setup ensures that you can only pick up items that are within your immediate reach and that collecting an item changes its status from being 'on the ground' to being 'in your inventory'. It's a simple but effective way to manage resources in the game, making sure everything happens in a logical and realistic manner.","Parameters:
1. ?var0 - moveable
2. ?var1 - static

Preconditions:
```
(at ?var0 ?var1)
```

Effects:
```
(and
    (at ?var0 ?var1)
    (inventory ?var0)
)
```
","(:action pick
    :parameters (?var0 - moveable ?var1 - static)
    :precondition (and (at ?var0 ?var1) (agent_at ?var1))
    :effect (and (inventory ?var0) (not (at ?var0 ?var1)))
)","remove (agent_at ?var1) from preconditions
negate (not (at ?var0 ?var1)) in effects
"
minecraft,pick,0.524651050567627,Hard Negative (Manipulated Action),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: Picture the agent spotting something valuable or useful on the ground, like a piece of fruit or a tool. The pick action is them bending down and picking up this item, adding it to their inventory. It's a fundamental action for gathering resources as they explore the Minecraft environment. Once picked, the item is no longer lying around; it's safely stored in the agent's inventory.

Action name: pick


Your answer:
","**Explanation:**

Let's imagine you're in a simplified game environment similar to Minecraft, where your goal is to gather resources like fruits or tools. In this game, to collect an item, you'd first need to be at the same location as the item. This ensures you can actually reach it to pick it up.

So, in the PDDL (which is a planning language used to describe tasks and environments in a structured way), the `pick` action is defined to help you collect these items. Here's why the action is set up this way:

1. **Preconditions (the must-haves before acting)**:
   - `(at ?var0 ?var1)`: This means the item (`?var0`) must be at your current location (`?var1`). Think of it as seeing a piece of fruit right at your feet. You need to be where the fruit is to pick it up.
   - `(agent_at ?var1)`: This specifies that you (the agent) must also be at that specific location (`?var1`). Just like in real life, you can't pick up something if you're not right there with it.

2. **Effects (what happens after the action)**:
   - `(inventory ?var0)`: Once you pick up the item, it moves into your inventory. This is like putting the fruit into your backpack.
   - `(not (at ?var0 ?var1))`: This indicates that the item is no longer lying on the ground at that location. It’s like saying, now that the fruit is in your backpack, it's not on the ground anymore.

This setup ensures that you can only pick up items that are within your immediate reach and that collecting an item changes its status from being 'on the ground' to being 'in your inventory'. It's a simple but effective way to manage resources in the game, making sure everything happens in a logical and realistic manner.
Parameters:
1. ?var0 - moveable
2. ?var1 - static

Preconditions:
```
(inventory ?var0)
```

Effects:
```
(and
    (at ?var0 ?var1)
    (not (at ?var0 ?var1))
)
```
","(:action pick
    :parameters (?var0 - moveable ?var1 - static)
    :precondition (and (at ?var0 ?var1) (agent_at ?var1))
    :effect (and (inventory ?var0) (not (at ?var0 ?var1)))
)","remove (agent_at ?var1) from preconditions
swap (at ?var0 ?var1) with (inventory ?var0)
"
minecraft,pick,0.524651050567627,Hard Negative (Manipulated Action),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: Picture the agent spotting something valuable or useful on the ground, like a piece of fruit or a tool. The pick action is them bending down and picking up this item, adding it to their inventory. It's a fundamental action for gathering resources as they explore the Minecraft environment. Once picked, the item is no longer lying around; it's safely stored in the agent's inventory.

Action name: pick


Your answer:
","**Explanation:**

Let's imagine you're in a simplified game environment similar to Minecraft, where your goal is to gather resources like fruits or tools. In this game, to collect an item, you'd first need to be at the same location as the item. This ensures you can actually reach it to pick it up.

So, in the PDDL (which is a planning language used to describe tasks and environments in a structured way), the `pick` action is defined to help you collect these items. Here's why the action is set up this way:

1. **Preconditions (the must-haves before acting)**:
   - `(at ?var0 ?var1)`: This means the item (`?var0`) must be at your current location (`?var1`). Think of it as seeing a piece of fruit right at your feet. You need to be where the fruit is to pick it up.
   - `(agent_at ?var1)`: This specifies that you (the agent) must also be at that specific location (`?var1`). Just like in real life, you can't pick up something if you're not right there with it.

2. **Effects (what happens after the action)**:
   - `(inventory ?var0)`: Once you pick up the item, it moves into your inventory. This is like putting the fruit into your backpack.
   - `(not (at ?var0 ?var1))`: This indicates that the item is no longer lying on the ground at that location. It’s like saying, now that the fruit is in your backpack, it's not on the ground anymore.

This setup ensures that you can only pick up items that are within your immediate reach and that collecting an item changes its status from being 'on the ground' to being 'in your inventory'. It's a simple but effective way to manage resources in the game, making sure everything happens in a logical and realistic manner.
Parameters:
1. ?var0 - moveable
2. ?var1 - static

Preconditions:
```
(at ?var0 ?var1)
```

Effects:
```
(and
    (inventory ?var0)
    (not (at ?var0 ?var1))
)
```
","(:action pick
    :parameters (?var0 - moveable ?var1 - static)
    :precondition (and (at ?var0 ?var1) (agent_at ?var1))
    :effect (and (inventory ?var0) (not (at ?var0 ?var1)))
)","remove (agent_at ?var1) from preconditions
"
minecraft,pick,0.524651050567627,Hard Negative (Manipulated Action),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: Picture the agent spotting something valuable or useful on the ground, like a piece of fruit or a tool. The pick action is them bending down and picking up this item, adding it to their inventory. It's a fundamental action for gathering resources as they explore the Minecraft environment. Once picked, the item is no longer lying around; it's safely stored in the agent's inventory.

Action name: pick


Your answer:
","**Explanation:**

Let's imagine you're in a simplified game environment similar to Minecraft, where your goal is to gather resources like fruits or tools. In this game, to collect an item, you'd first need to be at the same location as the item. This ensures you can actually reach it to pick it up.

So, in the PDDL (which is a planning language used to describe tasks and environments in a structured way), the `pick` action is defined to help you collect these items. Here's why the action is set up this way:

1. **Preconditions (the must-haves before acting)**:
   - `(at ?var0 ?var1)`: This means the item (`?var0`) must be at your current location (`?var1`). Think of it as seeing a piece of fruit right at your feet. You need to be where the fruit is to pick it up.
   - `(agent_at ?var1)`: This specifies that you (the agent) must also be at that specific location (`?var1`). Just like in real life, you can't pick up something if you're not right there with it.

2. **Effects (what happens after the action)**:
   - `(inventory ?var0)`: Once you pick up the item, it moves into your inventory. This is like putting the fruit into your backpack.
   - `(not (at ?var0 ?var1))`: This indicates that the item is no longer lying on the ground at that location. It’s like saying, now that the fruit is in your backpack, it's not on the ground anymore.

This setup ensures that you can only pick up items that are within your immediate reach and that collecting an item changes its status from being 'on the ground' to being 'in your inventory'. It's a simple but effective way to manage resources in the game, making sure everything happens in a logical and realistic manner.
Parameters:
1. ?var0 - moveable
2. ?var1 - static

Preconditions:
```
(and
    (inventory ?var0)
    (at ?var0 ?var1)
)
```

Effects:
```
(and
    (agent_at ?var1)
)
```
","(:action pick
    :parameters (?var0 - moveable ?var1 - static)
    :precondition (and (at ?var0 ?var1) (agent_at ?var1))
    :effect (and (inventory ?var0) (not (at ?var0 ?var1)))
)","remove (not (at ?var0 ?var1)) from effects
swap (agent_at ?var1) with (inventory ?var0)
"
minecraft,pick,0.524651050567627,Hard Negative (Manipulated Action),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: Picture the agent spotting something valuable or useful on the ground, like a piece of fruit or a tool. The pick action is them bending down and picking up this item, adding it to their inventory. It's a fundamental action for gathering resources as they explore the Minecraft environment. Once picked, the item is no longer lying around; it's safely stored in the agent's inventory.

Action name: pick


Your answer:
","**Explanation:**

Let's imagine you're in a simplified game environment similar to Minecraft, where your goal is to gather resources like fruits or tools. In this game, to collect an item, you'd first need to be at the same location as the item. This ensures you can actually reach it to pick it up.

So, in the PDDL (which is a planning language used to describe tasks and environments in a structured way), the `pick` action is defined to help you collect these items. Here's why the action is set up this way:

1. **Preconditions (the must-haves before acting)**:
   - `(at ?var0 ?var1)`: This means the item (`?var0`) must be at your current location (`?var1`). Think of it as seeing a piece of fruit right at your feet. You need to be where the fruit is to pick it up.
   - `(agent_at ?var1)`: This specifies that you (the agent) must also be at that specific location (`?var1`). Just like in real life, you can't pick up something if you're not right there with it.

2. **Effects (what happens after the action)**:
   - `(inventory ?var0)`: Once you pick up the item, it moves into your inventory. This is like putting the fruit into your backpack.
   - `(not (at ?var0 ?var1))`: This indicates that the item is no longer lying on the ground at that location. It’s like saying, now that the fruit is in your backpack, it's not on the ground anymore.

This setup ensures that you can only pick up items that are within your immediate reach and that collecting an item changes its status from being 'on the ground' to being 'in your inventory'. It's a simple but effective way to manage resources in the game, making sure everything happens in a logical and realistic manner.
Parameters:
1. ?var0 - moveable
2. ?var1 - static

Preconditions:
```
(agent_at ?var1)
```

Effects:
```
(and
    (inventory ?var0)
)
```
","(:action pick
    :parameters (?var0 - moveable ?var1 - static)
    :precondition (and (at ?var0 ?var1) (agent_at ?var1))
    :effect (and (inventory ?var0) (not (at ?var0 ?var1)))
)","remove (not (at ?var0 ?var1)) from effects
remove (at ?var0 ?var1) from preconditions
"
minecraft,pick,0.524651050567627,Hard Negative (Manipulated Action),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: Picture the agent spotting something valuable or useful on the ground, like a piece of fruit or a tool. The pick action is them bending down and picking up this item, adding it to their inventory. It's a fundamental action for gathering resources as they explore the Minecraft environment. Once picked, the item is no longer lying around; it's safely stored in the agent's inventory.

Action name: pick


Your answer:
","**Explanation:**

Let's imagine you're in a simplified game environment similar to Minecraft, where your goal is to gather resources like fruits or tools. In this game, to collect an item, you'd first need to be at the same location as the item. This ensures you can actually reach it to pick it up.

So, in the PDDL (which is a planning language used to describe tasks and environments in a structured way), the `pick` action is defined to help you collect these items. Here's why the action is set up this way:

1. **Preconditions (the must-haves before acting)**:
   - `(at ?var0 ?var1)`: This means the item (`?var0`) must be at your current location (`?var1`). Think of it as seeing a piece of fruit right at your feet. You need to be where the fruit is to pick it up.
   - `(agent_at ?var1)`: This specifies that you (the agent) must also be at that specific location (`?var1`). Just like in real life, you can't pick up something if you're not right there with it.

2. **Effects (what happens after the action)**:
   - `(inventory ?var0)`: Once you pick up the item, it moves into your inventory. This is like putting the fruit into your backpack.
   - `(not (at ?var0 ?var1))`: This indicates that the item is no longer lying on the ground at that location. It’s like saying, now that the fruit is in your backpack, it's not on the ground anymore.

This setup ensures that you can only pick up items that are within your immediate reach and that collecting an item changes its status from being 'on the ground' to being 'in your inventory'. It's a simple but effective way to manage resources in the game, making sure everything happens in a logical and realistic manner.
Parameters:
1. ?var0 - moveable
2. ?var1 - static

Preconditions:
```
(and
    (not (at ?var0 ?var1))
    (agent_at ?var1)
)
```

Effects:
```
(and
    (inventory ?var0)
    (not (at ?var0 ?var1))
)
```
","(:action pick
    :parameters (?var0 - moveable ?var1 - static)
    :precondition (and (at ?var0 ?var1) (agent_at ?var1))
    :effect (and (inventory ?var0) (not (at ?var0 ?var1)))
)","negate (at ?var0 ?var1) in preconditions
"
minecraft,pick,0.524651050567627,Hard Negative (Manipulated Action),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: Picture the agent spotting something valuable or useful on the ground, like a piece of fruit or a tool. The pick action is them bending down and picking up this item, adding it to their inventory. It's a fundamental action for gathering resources as they explore the Minecraft environment. Once picked, the item is no longer lying around; it's safely stored in the agent's inventory.

Action name: pick


Your answer:
","**Explanation:**

Let's imagine you're in a simplified game environment similar to Minecraft, where your goal is to gather resources like fruits or tools. In this game, to collect an item, you'd first need to be at the same location as the item. This ensures you can actually reach it to pick it up.

So, in the PDDL (which is a planning language used to describe tasks and environments in a structured way), the `pick` action is defined to help you collect these items. Here's why the action is set up this way:

1. **Preconditions (the must-haves before acting)**:
   - `(at ?var0 ?var1)`: This means the item (`?var0`) must be at your current location (`?var1`). Think of it as seeing a piece of fruit right at your feet. You need to be where the fruit is to pick it up.
   - `(agent_at ?var1)`: This specifies that you (the agent) must also be at that specific location (`?var1`). Just like in real life, you can't pick up something if you're not right there with it.

2. **Effects (what happens after the action)**:
   - `(inventory ?var0)`: Once you pick up the item, it moves into your inventory. This is like putting the fruit into your backpack.
   - `(not (at ?var0 ?var1))`: This indicates that the item is no longer lying on the ground at that location. It’s like saying, now that the fruit is in your backpack, it's not on the ground anymore.

This setup ensures that you can only pick up items that are within your immediate reach and that collecting an item changes its status from being 'on the ground' to being 'in your inventory'. It's a simple but effective way to manage resources in the game, making sure everything happens in a logical and realistic manner.
Parameters:
1. ?var0 - moveable
2. ?var1 - static

Preconditions:
```
(and
    (not (at ?var0 ?var1))
    (at ?var0 ?var1)
)
```

Effects:
```
(and
    (agent_at ?var1)
)
```
","(:action pick
    :parameters (?var0 - moveable ?var1 - static)
    :precondition (and (at ?var0 ?var1) (agent_at ?var1))
    :effect (and (inventory ?var0) (not (at ?var0 ?var1)))
)","remove (inventory ?var0) from effects
swap (agent_at ?var1) with (not (at ?var0 ?var1))
"
minecraft,pick,0.524651050567627,Hard Negative (Manipulated Action),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: Picture the agent spotting something valuable or useful on the ground, like a piece of fruit or a tool. The pick action is them bending down and picking up this item, adding it to their inventory. It's a fundamental action for gathering resources as they explore the Minecraft environment. Once picked, the item is no longer lying around; it's safely stored in the agent's inventory.

Action name: pick


Your answer:
","**Explanation:**

Let's imagine you're in a simplified game environment similar to Minecraft, where your goal is to gather resources like fruits or tools. In this game, to collect an item, you'd first need to be at the same location as the item. This ensures you can actually reach it to pick it up.

So, in the PDDL (which is a planning language used to describe tasks and environments in a structured way), the `pick` action is defined to help you collect these items. Here's why the action is set up this way:

1. **Preconditions (the must-haves before acting)**:
   - `(at ?var0 ?var1)`: This means the item (`?var0`) must be at your current location (`?var1`). Think of it as seeing a piece of fruit right at your feet. You need to be where the fruit is to pick it up.
   - `(agent_at ?var1)`: This specifies that you (the agent) must also be at that specific location (`?var1`). Just like in real life, you can't pick up something if you're not right there with it.

2. **Effects (what happens after the action)**:
   - `(inventory ?var0)`: Once you pick up the item, it moves into your inventory. This is like putting the fruit into your backpack.
   - `(not (at ?var0 ?var1))`: This indicates that the item is no longer lying on the ground at that location. It’s like saying, now that the fruit is in your backpack, it's not on the ground anymore.

This setup ensures that you can only pick up items that are within your immediate reach and that collecting an item changes its status from being 'on the ground' to being 'in your inventory'. It's a simple but effective way to manage resources in the game, making sure everything happens in a logical and realistic manner.
Parameters:
1. ?var0 - moveable
2. ?var1 - static

Preconditions:
```
(agent_at ?var1)
```

Effects:
```
(and
    (not (at ?var0 ?var1))
)
```
","(:action pick
    :parameters (?var0 - moveable ?var1 - static)
    :precondition (and (at ?var0 ?var1) (agent_at ?var1))
    :effect (and (inventory ?var0) (not (at ?var0 ?var1)))
)","remove (inventory ?var0) from effects
remove (at ?var0 ?var1) from preconditions
"
minecraft,pick,0.524651050567627,Hard Negative (Manipulated Action),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: Picture the agent spotting something valuable or useful on the ground, like a piece of fruit or a tool. The pick action is them bending down and picking up this item, adding it to their inventory. It's a fundamental action for gathering resources as they explore the Minecraft environment. Once picked, the item is no longer lying around; it's safely stored in the agent's inventory.

Action name: pick


Your answer:
","**Explanation:**

Let's imagine you're in a simplified game environment similar to Minecraft, where your goal is to gather resources like fruits or tools. In this game, to collect an item, you'd first need to be at the same location as the item. This ensures you can actually reach it to pick it up.

So, in the PDDL (which is a planning language used to describe tasks and environments in a structured way), the `pick` action is defined to help you collect these items. Here's why the action is set up this way:

1. **Preconditions (the must-haves before acting)**:
   - `(at ?var0 ?var1)`: This means the item (`?var0`) must be at your current location (`?var1`). Think of it as seeing a piece of fruit right at your feet. You need to be where the fruit is to pick it up.
   - `(agent_at ?var1)`: This specifies that you (the agent) must also be at that specific location (`?var1`). Just like in real life, you can't pick up something if you're not right there with it.

2. **Effects (what happens after the action)**:
   - `(inventory ?var0)`: Once you pick up the item, it moves into your inventory. This is like putting the fruit into your backpack.
   - `(not (at ?var0 ?var1))`: This indicates that the item is no longer lying on the ground at that location. It’s like saying, now that the fruit is in your backpack, it's not on the ground anymore.

This setup ensures that you can only pick up items that are within your immediate reach and that collecting an item changes its status from being 'on the ground' to being 'in your inventory'. It's a simple but effective way to manage resources in the game, making sure everything happens in a logical and realistic manner.
Parameters:
1. ?var0 - moveable
2. ?var1 - static

Preconditions:
```
(and
    (not (at ?var0 ?var1))
    (agent_at ?var1)
)
```

Effects:
```
(and
    (not (at ?var0 ?var1))
)
```
","(:action pick
    :parameters (?var0 - moveable ?var1 - static)
    :precondition (and (at ?var0 ?var1) (agent_at ?var1))
    :effect (and (inventory ?var0) (not (at ?var0 ?var1)))
)","negate (at ?var0 ?var1) in preconditions
remove (inventory ?var0) from effects
"
minecraft,pick,0.524651050567627,Hard Negative (Manipulated Action),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: Picture the agent spotting something valuable or useful on the ground, like a piece of fruit or a tool. The pick action is them bending down and picking up this item, adding it to their inventory. It's a fundamental action for gathering resources as they explore the Minecraft environment. Once picked, the item is no longer lying around; it's safely stored in the agent's inventory.

Action name: pick


Your answer:
","**Explanation:**

Let's imagine you're in a simplified game environment similar to Minecraft, where your goal is to gather resources like fruits or tools. In this game, to collect an item, you'd first need to be at the same location as the item. This ensures you can actually reach it to pick it up.

So, in the PDDL (which is a planning language used to describe tasks and environments in a structured way), the `pick` action is defined to help you collect these items. Here's why the action is set up this way:

1. **Preconditions (the must-haves before acting)**:
   - `(at ?var0 ?var1)`: This means the item (`?var0`) must be at your current location (`?var1`). Think of it as seeing a piece of fruit right at your feet. You need to be where the fruit is to pick it up.
   - `(agent_at ?var1)`: This specifies that you (the agent) must also be at that specific location (`?var1`). Just like in real life, you can't pick up something if you're not right there with it.

2. **Effects (what happens after the action)**:
   - `(inventory ?var0)`: Once you pick up the item, it moves into your inventory. This is like putting the fruit into your backpack.
   - `(not (at ?var0 ?var1))`: This indicates that the item is no longer lying on the ground at that location. It’s like saying, now that the fruit is in your backpack, it's not on the ground anymore.

This setup ensures that you can only pick up items that are within your immediate reach and that collecting an item changes its status from being 'on the ground' to being 'in your inventory'. It's a simple but effective way to manage resources in the game, making sure everything happens in a logical and realistic manner.
Parameters:
1. ?var0 - moveable
2. ?var1 - static

Preconditions:
```
(and
    (not (agent_at ?var1))
    (at ?var0 ?var1)
)
```

Effects:
```
(and
    (inventory ?var0)
)
```
","(:action pick
    :parameters (?var0 - moveable ?var1 - static)
    :precondition (and (at ?var0 ?var1) (agent_at ?var1))
    :effect (and (inventory ?var0) (not (at ?var0 ?var1)))
)","negate (agent_at ?var1) in preconditions
remove (not (at ?var0 ?var1)) from effects
"
minecraft,pick,0.524651050567627,Hard Negative (Manipulated Action),NL Desc vs. Explanation + Action Schema,"Context: Translate the given natural language description into an action schema that includes the parameters, preconditions, and effects. Ensure that only the provided predicates are used to construct the preconditions and effects.
Question: Here is the task.
A natural language description of the domain
Domain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.

A list of available predicates
1. (is_grass ?arg0 - moveable) ;; the object is grass
2. (is_log ?arg0 - moveable) ;; the object is a log
3. (is_planks ?arg0 - moveable) ;; the object is a plank
4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location
5. (agent_at ?arg0 - static) ;; the agent is at a location
6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory
7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical
8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object
9. (handsfree ?arg0 - agent) ;; the agent has empty hands

Action Description: Picture the agent spotting something valuable or useful on the ground, like a piece of fruit or a tool. The pick action is them bending down and picking up this item, adding it to their inventory. It's a fundamental action for gathering resources as they explore the Minecraft environment. Once picked, the item is no longer lying around; it's safely stored in the agent's inventory.

Action name: pick


Your answer:
","**Explanation:**

Let's imagine you're in a simplified game environment similar to Minecraft, where your goal is to gather resources like fruits or tools. In this game, to collect an item, you'd first need to be at the same location as the item. This ensures you can actually reach it to pick it up.

So, in the PDDL (which is a planning language used to describe tasks and environments in a structured way), the `pick` action is defined to help you collect these items. Here's why the action is set up this way:

1. **Preconditions (the must-haves before acting)**:
   - `(at ?var0 ?var1)`: This means the item (`?var0`) must be at your current location (`?var1`). Think of it as seeing a piece of fruit right at your feet. You need to be where the fruit is to pick it up.
   - `(agent_at ?var1)`: This specifies that you (the agent) must also be at that specific location (`?var1`). Just like in real life, you can't pick up something if you're not right there with it.

2. **Effects (what happens after the action)**:
   - `(inventory ?var0)`: Once you pick up the item, it moves into your inventory. This is like putting the fruit into your backpack.
   - `(not (at ?var0 ?var1))`: This indicates that the item is no longer lying on the ground at that location. It’s like saying, now that the fruit is in your backpack, it's not on the ground anymore.

This setup ensures that you can only pick up items that are within your immediate reach and that collecting an item changes its status from being 'on the ground' to being 'in your inventory'. It's a simple but effective way to manage resources in the game, making sure everything happens in a logical and realistic manner.
Parameters:
1. ?var0 - moveable
2. ?var1 - static

Preconditions:
```
(and
    (inventory ?var0)
    (at ?var0 ?var1)
)
```

Effects:
```
(and
    (agent_at ?var1)
    (at ?var0 ?var1)
)
```
","(:action pick
    :parameters (?var0 - moveable ?var1 - static)
    :precondition (and (at ?var0 ?var1) (agent_at ?var1))
    :effect (and (inventory ?var0) (not (at ?var0 ?var1)))
)","swap (agent_at ?var1) with (inventory ?var0)
negate (not (at ?var0 ?var1)) in effects
"
