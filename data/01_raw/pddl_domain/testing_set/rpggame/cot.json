{
    "move-to-monster": "**Explanation:**\n\nLet's imagine our hero in the dungeon scenario. The hero wakes up and finds themselves in a room, wanting to move to an adjacent room where, unfortunately, there's a monster. Here's how we translate this scenario into a set of instructions, or a 'domain model,' in planning language.\n\nThe action we're talking about is called \"move-to-monster.\" This means our hero is trying to move from one room (let\u2019s call it Room A) to another room (Room B) where there is a monster. To ensure this action can happen, there are certain conditions that need to be met (these are called 'preconditions') and certain outcomes that will happen as a result of the action (these are called 'effects').\n\n1. **Preconditions**:\n   - **Connected Rooms**: Room A and Room B must be connected by a corridor. This makes sense because our hero can't magically jump from one room to another; there must be a path.\n   - **Hero's Current Location**: The hero must currently be in Room A. If the hero isn't there, they can't start moving from it!\n   - **Monster Presence**: Room B must have a monster. After all, the action is specifically about moving to a room with a monster.\n   - **Room Integrity**: Room B should not be destroyed. A destroyed room might mean it\u2019s collapsed or inaccessible, so it's logical our hero can\u2019t move into it.\n   - **Safety in Room A**: Room A should not have a trap. This makes sure our hero is safe and able to move without getting caught in a trap.\n   - **Armed Hero**: The hero must be holding a sword. It\u2019s a dangerous task to move into a room with a monster, so having a sword means the hero is prepared for a fight.\n\n2. **Effects**:\n   - **Hero's New Location**: After the action, the hero will be in Room B. They've successfully moved.\n   - **Change in Room A's Status**: Room A becomes 'destroyed.' This might represent that the room is no longer safe or viable after the hero leaves, maybe because of the haste in escaping or some mechanism triggered by the departure.\n   - **Update Hero's Old Location**: The fact that the hero was in Room A is no longer true, which is updated in our model to reflect the hero\u2019s new position.\n\nThis planning helps organize our thoughts and actions logically, ensuring every step is clear and all necessary precautions are taken. Think of it like giving someone directions with a checklist: \"Before you go there, make sure this, this, and this are true, and once you do, this and this will happen.\" This ensures everyone knows what to expect and how to prepare! ",
    "move": "**Explanation:**\n\nImagine our hero in a big, scary dungeon, just like a character from a fairy tale or a video game. The dungeon has several rooms, and some rooms are safe while others have monsters or traps. The hero's goal is to escape from this dungeon, moving from one room to another until he finds the exit.\n\nNow, let's talk about the action called \"move\" that our hero can take. The action \"move\" lets the hero go from one room (we'll call this the \"current room\") to a connected room (let's call this the \"next room\"). Think of the dungeon like a big house with many doors connecting the rooms; the hero can only move through a door if it\u2019s open and the room on the other side is safe.\n\nIn the PDDL (a kind of programming language for planning what actions to take), the action \"move\" needs some conditions to be met before the hero can move:\n1. **The rooms must be connected:** Just like you can't walk through a wall at home, the hero can only move to a room if there's a direct connection (like a doorway or a corridor).\n2. **The hero must be in the current room:** The hero can only leave a room if he's actually in it.\n3. **The current room shouldn\u2019t have a trap that could hurt him.**\n4. **The next room shouldn\u2019t be destroyed:** The hero can't go into a room if it\u2019s already been collapsed or destroyed (maybe from a previous adventure!).\n5. **The next room shouldn\u2019t have a trap or a monster:** This makes sure our hero doesn\u2019t walk into new danger.\n\nWhen the hero moves:\n- **He is now in the next room:** Just like if you walk to another room in your house, you're then in that new room.\n- **The room he left gets destroyed:** This might sound strange, but imagine if every time he left a room, the door magically closed and locked forever, so he can\u2019t go back the same way.\n- **He is no longer in the current room:** This is just confirming that he has moved on from the previous room.\n\nThese rules help our hero make smart moves through the dungeon, avoiding danger and making progress towards escape. This way of setting up the hero's actions makes sure he can navigate through the dungeon safely and eventually find his way out.",
    "move-to-trap": "**Explanation:**\n\nImagine you're guiding a hero who just woke up in a mysterious dungeon. Each room can have different things: some are empty, others have monsters, some have traps, and a few might have swords. There's also a special room with an exit\u2014our hero's goal.\n\nNow, let's talk about the action called **move-to-trap**. This action involves our hero moving from one room (we'll call it \"Room A\") to another room (\"Room B\"), where, unfortunately, there's a trap waiting. Here's why each part of the plan (or action schema) makes sense:\n\n1. **Connected Rooms**: Our hero can only move to a room directly connected to the one they're currently in. This is like being in your house and only being able to walk into rooms that have doors leading from where you are now.\n\n2. **Hero's Current Location**: The hero must start in Room A to move to Room B. You can't move from a place if you're not actually there, right?\n\n3. **Room B Not Destroyed**: The room our hero is moving to mustn't be already destroyed (or in ruins). It's like making sure the bridge you want to cross hasn't collapsed.\n\n4. **Room A Doesn't Have a Trap**: It\u2019s safer if the room our hero is leaving doesn't have a trap. Imagine trying to leave a room with a trap; it could activate and cause trouble!\n\n5. **Room B Has a Trap**: Since the action is called **move-to-trap**, it specifically involves moving to a room with a trap, almost like knowing there's a puddle ahead but stepping into it anyway because it's the only path forward.\n\n6. **Hero's Arm is Free**: This indicates that the hero isn\u2019t holding anything like a sword. It\u2019s important because handling traps might require free hands\u2014think about needing your hands free to disarm or avoid a trap carefully.\n\nWhen our hero completes this action, several things happen:\n- **Hero is now in Room B**: Just like when you walk into another room, you\u2019re no longer in the first room.\n- **Room A is destroyed**: This could mean the hero leaves it in a way that no one can follow\u2014maybe they close a heavy door that locks automatically.\n- **Hero is no longer in Room A**: It confirms that the hero has completely left Room A.\n\nThis action is designed for specific situations in the dungeon where the hero might need to move strategically, even into risky areas, to navigate through the dungeon and eventually find the exit.",
    "disarm-trap": "**Explanation:**\n\nImagine our hero in a dungeon, a place with rooms connected like a spider web. Each room can be just an empty space, or it might have something like a monster, a trap, or even a sword. Somewhere in this maze, there's a special room that has an exit\u2014the ultimate goal for our hero.\n\nNow, let's focus on a specific action our hero might need to take: **disarming a trap**. In our scenario, the hero finds themselves in a room with a trap. The action to disarm this trap is what we need to understand.\n\nThe action is named `disarm-trap`. This action, like any other, has specific requirements (preconditions) that must be met before the hero can perform it. These preconditions are:\n1. **The hero must be in the same room as the trap.** This makes sense because you can't disarm a trap from another room. It's like needing to be in the kitchen to turn off a stove.\n2. **The hero's hand must be free.** This means the hero can\u2019t be holding anything, like a sword. It's a bit like needing both hands free to tie your shoes properly.\n3. **There must actually be a trap in the room.** Obviously, the hero can't disarm a trap if there isn't one there!\n\nIf all these conditions are met, then the hero can go ahead and disarm the trap. The results (effects) of this action are:\n1. **The trap in the room is disarmed.** This means the room is now safe from that trap.\n2. **The trap is no longer considered to be in the room.** It's like cleaning up a spill; once it's cleaned, it's not there anymore.\n\nBy breaking down the action like this, we see how each condition helps ensure the action can be carried out safely and effectively. It\u2019s just like following a recipe\u2014each ingredient needs to be added at the right time for the dish to come out right!",
    "destroy-sword": "**Explanation:**\n\nImagine you're helping a hero navigate a dungeon full of monsters and traps, a bit like playing a video game. Now, the hero has a sword, but in this part of the game, the hero decides to destroy the sword. To understand why certain conditions are checked before the hero can destroy the sword safely, let's break it down using the action \"destroy-sword\" from the game's rules (or in technical terms, the PDDL action schema).\n\nFirstly, the hero needs to be in the same location as the sword. This makes sense, right? You can't throw something away or break it if it's not with you. So, the condition `(at-hero ?loc)` ensures that the hero is at the right spot to perform the action.\n\nSecondly, the hero must be holding the sword. It\u2019s similar to needing both hands on a bat to swing it; here, the hero needs to have the sword in hand to destroy it, checked by `(holding ?s)`.\n\nBut why check for no traps or monsters in the room? Think of it like trying to do something delicate, like assembling a model airplane, in a room with a loose tiger. Not a great idea, right? If there\u2019s a monster in the room, destroying the sword might make the hero vulnerable to attack. Similarly, a trap could be triggered by the noise or movement, putting the hero in danger. So, `(not (has-trap ?loc))` and `(not (has-monster ?loc))` ensure that the environment is safe for the hero to break the sword without turning the situation worse.\n\nNow, what happens after the sword is destroyed? The effect is that the hero\u2019s hand is now free (`arm-free`), the sword is confirmed as destroyed (`is-destroyed ?s`), and the hero is no longer holding it (`not (holding ?s)`). It\u2019s like cleaning up after finishing a task: put away the tools, clean up the mess, and free up your hands for the next task.\n\nIn simple terms, this action schema is like a set of instructions to make sure the hero does something risky (like destroying a sword) safely and responsibly, without making the dangerous dungeon situation even worse.",
    "pick-sword": "**Explanation:**\n\nImagine you're helping a hero navigate through a tricky dungeon filled with different challenges. The hero's objective is to escape, but along the way, they might find useful items like swords that can help protect against monsters.\n\nIn our scenario, the action of picking up a sword is crucial. Let's think of it like this: if you enter a room and see a sword on the floor while your hands are free, you can pick it up. The action schema in PDDL, which is a way to represent planning problems, explains this in a structured format.\n\nThe preconditions for our action \"pick-sword\" are:\n1. **The hero must be in the same room as the sword** (represented as `(at-hero ?loc)` and `(at-sword ?s ?loc)`). This makes sense because you can't pick up something that's not in the same room as you.\n2. **The hero's hand must be free** (`(arm-free)`). Just like you can't hold two grocery bags in one hand easily, our hero needs a free hand to pick up the sword.\n\nThe effects after the hero picks up the sword are:\n1. **The hero is now holding the sword** (`(holding ?s)`). This indicates that the hero has successfully picked up the sword.\n2. **The sword is no longer in its original place** (`(not (at-sword ?s ?loc))`). Just like if you take an apple from a basket, the apple isn't in the basket anymore.\n3. **The hero's hand is no longer free** (`(not (arm-free))`). Holding the sword means the hand that was free is now occupied.\n\nThis action schema is a simple way to model the interaction between the hero and the sword in the dungeon. It helps ensure that all necessary conditions are met before the action takes place, making the hero's journey through the dungeon logical and structured. This way, the hero doesn't magically have a sword without picking it up or has two items in one hand, which keeps our dungeon adventure realistic and understandable."
}