{"role": "system", "content": "# CONTEXT #\nYou are a tool called PDDL Modeling Assistant. You are a technical experts in constructing Planning Domain Definition Language (PDDL) models via the natural language context.\n# OBJECTIVE #\n* Construct parameters, preconditions and effects based on the domain information, action description and the action name.\n* All variables in the preconditions and effects must be listed in the action's parameters. This restriction helps maintain the action's scope and prevents ambiguity in the planning process.\n* Do not use predicates that are not defined in the available predicates list to construct the preconditions and effects.\n* When the natural language description is ambiguous or certain predicate changes are implied, make reasonable assumptions based on common sense to fill up the implicit predicate in the PDDL action.\n# STYLE #\nFollow the writing style of technical experts. The output can be parsed by a machine, so it is important to follow the structured format.\n# TONE #\nBe precise and concise in constructing the PDDL action. The PDDL action should be clear and unambiguous.\n# AUDIENCE #\nYour audience is someone who is trying to learn how to construct PDDL actions from natural language descriptions.\n# RESPONSE #\nThe response should be in the following format:\n---\n**Explanation:** [Your explanation here]\n\n**Response:**\nParameters:\n1. ?x - [type]: [parameter description]\n2. ...\n\nPreconditions:\n```\n(and\n    ([predicate_1] ?x)\n)\n```\n\nEffects:\n```\n(and\n    (not ([predicate_2] ?x))\n    ([predicate_2] ?x)\n    ...\n)\n```\n---\n", "type": "prompt"}
{"role": "user", "content": "One or two examples from other domains for illustrating the input and output formats.\nHere are two examples from the storage domain for demonstrating the output format.\n        \nDomain information: Moving and storing crates of goods by hoists from containers to depots with spatial maps. This domain deals with the movement and storage of crates of goods using hoists. It involves different locations like containers and depots, and requires managing the spatial arrangement of crates and hoists in various areas. The actions primarily focus on the lifting, moving, and placement of crates by hoists, considering the spatial and availability constraints of the areas involved.\n\nA list of available predicates\n1. (clear ?s - store_area) ;; the store area is clear\n2. (crate_in ?c - crate ?p - place) ;; the crate is in the place\n3. (store_area_in ?s - store_area ?p - place) ;; the store area is in the place\n4. (available ?h - hoist) ;; the hoist is available\n5. (lifting ?h - hoist ?c - crate) ;; the hoist is lifting the crate\n6. (at ?h - hoist ?a - area) ;; the hoist is at the area\n7. (on ?c - crate ?s - store_area) ;; the crate is on the store area\n8. (connected ?a1 ?a2 - area) ;; the area a1 is connected to the area a2\nExample 1\nAction Description: This is the reverse of Go-out, where a hoist moves from a transit_area to a store_area. Preconditions include the hoist being at the transit_area, the areas being connected, and the destination store_area being clear. The effect is similar to Go-out but in reverse.\n\nAction name: go-in\n\n\nYour answer:\n---\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:**\n\nImagine you have a small robot hoist that helps move boxes in a big warehouse. The warehouse has different areas, like a spot for loading boxes and another for storing them. The \"go-in\" action is like telling the robot to move from a loading area to a storage area.\n\nNow, why does the robot need certain conditions to be met before it can move? Here's a breakdown:\n\n1. **The robot must be at the loading area** (transit_area): This is pretty straightforward. If the robot isn't at the loading area, it can't start moving towards the storage area because it's simply not there to begin the task.\n\n2. **The loading area and storage area must be connected**: It's like making sure there's a clear path or a road between two places before you start driving. If there's no path, the robot can't move between these areas.\n\n3. **The storage area must be clear**: This ensures that there is space available for the robot to enter and place the boxes. It's similar to needing an empty parking spot to park your car.\n\nNow, what happens after the robot moves based on these conditions?\n\n- **The robot is no longer in the loading area**: Just like when you leave your house, you're not inside anymore. The robot has left the loading area, so we say it's no longer there.\n  \n- **The robot is now in the storage area**: Like arriving at a friend\u2019s house after leaving yours, the robot has moved and is now at the storage destination.\n\n- **The storage area is no longer clear**: Since the robot moves in with a box, the space it occupied is now taken. It's like the parking space being occupied once you park your car.\n\nIn summary, these conditions and results make sure the robot moves safely and efficiently from one place to another, without any surprises like arriving at a blocked or non-existent path, or finding no space to drop off the box. This careful planning helps keep everything in the warehouse running smoothly!\n                \n**Response:**\nParameters:\n1. ?h - hoist: [short description of the parameter]\n2. ?c - crate: [short description of the parameter]\n3. ?a1 - store_area: [short description of the parameter]\n4. ?a2 - area: [short description of the parameter]\n5. ?p - place: [short description of the parameter]\n\nPreconditions:\n```\n(and\n    (connected ?a1 ?a2)\n    (at ?h ?a2)\n    (lifting ?h ?c)\n    (clear ?a1)\n    (store_area_in ?a1 ?p)\n)\n```\n\nEffects:\n```\n(and\n    (not (lifting ?h ?c))\n    (available ?h)\n    (not (clear ?a1))\n    (on ?c ?a1)\n    (crate_in ?c ?p)\n)\n```\n\n---\n", "type": "prompt"}
{"role": "user", "content": "Example 2\nAction Description: This action is about a hoist dropping a crate into a store_area from an area. Preconditions are similar to 'Lift' but include the hoist lifting the crate and the destination store_area being clear. The effects involve the hoist becoming available and the crate being placed on the destination store_area.\n\nAction name: drop\n\n\nYour answer:\n---\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:**\nLet's imagine a scenario in a warehouse where a hoist is used to move crates from one area to another, like moving a box of toys from a shelf to a play area. The action we're talking about is called \"drop,\" where the hoist places a crate into a designated storage area.\n\n1. **Preconditions Explained:**\n   - **Connected Areas:** First, the hoist can only drop the crate if the area it\u2019s in (let's call it the play area) is connected to the area where the hoist is currently located (like the shelf area). This means there must be a clear path for the hoist to move the crate to its destination.\n   - **Hoist Location:** The hoist must be in the area adjacent to where the crate needs to go. If our hoist isn't next to the play area, it can't drop the crate there.\n   - **Hoist Lifting the Crate:** Before dropping, the hoist must already be lifting a crate. It's like making sure the hoist has picked up the box of toys before it can put it down.\n   - **Clear Storage Area:** The destination, where the crate will be placed, must be clear of other objects. This ensures there's space to safely place the new crate without stacking or causing a mess.\n   - **Store Area in Place:** The storage area where the crate is to be dropped needs to be part of the larger place being managed. This is like ensuring the play area is actually a part of the designated playroom.\n\n2. **Effects Explained:**\n   - **Hoist No Longer Lifting:** Once the crate is dropped, the hoist is no longer lifting it. This is like putting down the box of toys.\n   - **Hoist Becomes Available:** After dropping off the crate, the hoist is now free to take on other tasks, like picking up another box.\n   - **Storage Area Not Clear Anymore:** Since the crate has been placed there, the storage area is no longer empty.\n   - **Crate on Storage Area:** The crate is now officially in the storage area, like the box of toys now being in the play area.\n   - **Crate Location Updated:** We update the records to show that the crate is now in this new location within the place, which helps in managing space and knowing where everything is.\n\nThis action of dropping a crate involves several steps and conditions that ensure everything happens smoothly and safely, from ensuring there's a path to the hoist being ready and the space being available for the new crate. It's like making sure you have both hands free and a clear spot on the floor before you set down a heavy box.\n                \n**Response:**\nParameters:\n1. ?h - hoist: [short description of the parameter]\n2. ?from - transit_area: [short description of the parameter]\n3. ?to - store_area: [short description of the parameter]\n\nPreconditions:\n```\n(and\n    (at ?h ?from)\n    (connected ?from ?to)\n    (clear ?to)\n)\n```\n\nEffects:\n```\n(and\n    (not (at ?h ?from))\n    (at ?h ?to)\n    (not (clear ?to))\n)\n```\n\n---\n", "type": "prompt"}
{"role": "user", "content": "Here are two examples from the baking domain for demonstrating the output format.\n        \nDomain information: This describes a cooking or baking process where ingredients such as eggs and flour are used. The process of baking involves putting eggs in the pan followed by the flour, mix the two and then put the pan in the oven and then remove the pan from the oven to get the baked cake. Lastly, the pan is cleaned using a soap. Well, you can also bake a souffle but in at bit different process.\n\nA list of available predicates\n1. (is_egg ?egg - ingredient) ;; the ingredient is an egg\n2. (is_flour ?flour - ingredient) ;; the ingredient is flour\n3. (pan_has_egg ?pan - pan) ;; the pan has an egg\n4. (pan_has_flour ?pan - pan) ;; the pan has flour\n5. (pan_is_clean ?pan - pan) ;; the pan is clean\n6. (pan_in_oven ?pan - pan) ;; the pan is in the oven\n7. (in_pan ?x - ingredient ?pan - pan) ;; the ingredient is in the pan\n8. (in_oven ?pan - pan ?oven - oven) ;; the pan is in the oven\n9. (oven_is_full ?oven - oven) ;; the oven is full\n10. (hypothetical ?new - ingredient) ;; the ingredient is hypothetical\n11. (is_mixed ?pan - pan) ;; the ingredients in the pan are mixed\n12. (is_cake ?new - ingredient) ;; the ingredient is a cake\n13. (is_souffle ?new - ingredient) ;; the ingredient is a souffle\n14. (soap_consumed ?soap - soap) ;; the soap is consumed\nExample 1\nAction Description: Baking a cake involves transforming mixed ingredients in a pan into a cake. This action is possible when the ingredients in the pan are mixed, the pan is in the oven, and it involves creating a new type of ingredient, termed here as hypothetical. The end result is a cake, and the pan becomes dirty.\n\nAction name: bake_cake\n\n\nYour answer:\n---\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:** The action schema for \"bake_cake\" describes the steps needed to transform a pan of mixed ingredients into a cake. Let\u2019s break down why each part is necessary.\n\nImagine you are in the kitchen with a bowl (the pan) filled with mixed ingredients. To bake a cake, you need to follow specific steps and meet certain conditions:\n\n1. **Preconditions:** \n   - **(is_mixed ?pan):** This means that the ingredients in the pan must already be mixed. Think about it: if you don\u2019t mix the flour and eggs together, they won\u2019t turn into a cake. So, the first condition is that the mixture is ready.\n   - **(in_oven ?pan ?oven):** The pan must be inside the oven. If it\u2019s not in the oven, baking can\u2019t happen. Just like you can't bake a cake if you leave the pan on the counter.\n   - **(hypothetical ?new):** This indicates that you are about to create something new, which in this case is the cake. It\u2019s like saying we have the potential to make a cake.\n\n2. **Effects:**\n   - **(not (is_mixed ?pan)):** Once you bake the cake, the ingredients are no longer just mixed; they have transformed into a cake. So, this condition removes the state of being mixed.\n   - **(not (pan_is_clean ?pan)):** After baking, the pan becomes dirty. This effect shows that the pan is no longer clean because it was used for baking.\n   - **(not (hypothetical ?new)):** Now that the cake is baked, it\u2019s no longer a hypothetical possibility but an actual cake.\n   - **(is_cake ?new):** This confirms that what you now have is indeed a cake.\n\nIn summary, the preconditions ensure that you have mixed ingredients in the oven, ready to be baked. The effects describe the outcome: the ingredients are no longer just mixed, the pan is dirty from baking, and the hypothetical idea of a cake has turned into a real cake. This process is like following a recipe step-by-step to ensure everything is done correctly to bake a cake.\n                \n**Response:**\nParameters:\n1. ?egg - ingredient: [short description of the parameter]\n2. ?pan - pan: [short description of the parameter]\n\nPreconditions:\n```\n(and\n    (is_egg ?egg)\n    (not (pan_has_egg ?pan))\n    (not (is_mixed ?pan))\n    (pan_is_clean ?pan)\n    (not (pan_in_oven ?pan))\n)\n```\n\nEffects:\n```\n(and\n    (pan_has_egg ?pan)\n    (in_pan ?egg ?pan)\n)\n```\n\n---\n", "type": "prompt"}
{"role": "user", "content": "Example 2\nAction Description: This action involves placing an egg into a pan. It's only possible when the pan is clean, not already in the oven, does not contain an egg, and the ingredients in it are not yet mixed.\n\nAction name: put_egg_in_pan\n\n\nYour answer:\n---\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:** Let's imagine you're in the kitchen, getting ready to bake a cake. The first step is to put an egg into the pan. But before you do that, there are some important conditions that need to be met to make sure everything goes smoothly.\n\n1. **The egg must be an egg**: This might seem obvious, but you need to be sure that the ingredient you're putting into the pan is indeed an egg. This is why we have the condition `(is_egg ?egg)`.\n\n2. **The pan must not already have an egg**: If there's already an egg in the pan, you don't need to add another one just yet. This is checked with `(not (pan_has_egg ?pan))`.\n\n3. **The ingredients in the pan must not be mixed**: If the ingredients are already mixed, it means you're further along in the baking process, and adding a new egg wouldn't make sense. So, we check `(not (is_mixed ?pan))`.\n\n4. **The pan must be clean**: You wouldn't want to put an egg in a dirty pan, right? It might affect the taste and hygiene of your cake. This is ensured with `(pan_is_clean ?pan)`.\n\n5. **The pan must not be in the oven**: If the pan is already in the oven, it means the baking process has started, and you can't add more ingredients. This is checked with `(not (pan_in_oven ?pan))`.\n\nOnce all these conditions are met, you can add the egg to the pan. The effects of this action are:\n\n- **The pan now has an egg**: This is recorded with `(pan_has_egg ?pan)`.\n- **The egg is in the pan**: This is noted with `(in_pan ?egg ?pan)`.\n\nSo, in summary, before you put an egg in the pan, you need to make sure the pan is clean, doesn't already have an egg, isn't in the oven, and the ingredients aren't mixed yet. This ensures that the baking process starts correctly and everything is in the right order.\n                \n**Response:**\nParameters:\n1. ?oven - oven: [short description of the parameter]\n2. ?pan - pan: [short description of the parameter]\n3. ?new - ingredient: [short description of the parameter]\n\nPreconditions:\n```\n(and\n    (is_mixed ?pan)\n    (in_oven ?pan ?oven)\n    (hypothetical ?new)\n)\n```\n\nEffects:\n```\n(and\n    (not (is_mixed ?pan))\n    (not (pan_is_clean ?pan))\n    (not (hypothetical ?new))\n    (is_cake ?new)\n)\n```\n\n---\n", "type": "prompt"}
{"role": "user", "content": "Question: Here is the task.\nA natural language description of the domain\nDomain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape\n\nA list of available predicates\n1. (at-hero ?loc - cells) ;;  Hero's cell location\n2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location\n3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster\n4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap\n5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed\n6. (connected ?from ?to - cells) ;; connects cells\n7. (arm-free) ;; Hero's hand is free\n8. (holding ?s - swords) ;; Hero's holding a sword\n9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed\n\nAction Description: Hero can move if the - hero is at current location - cells are connected, - when this action is executed, the hero gets into a location with a monster\n\nAction name: move-to-monster\n\n\nYour answer:\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:**\n\nIn the dungeon domain, the hero needs to navigate through rooms connected by corridors to find an exit. The action \"move-to-monster\" describes the hero moving into a room with a monster. For this action to be executed, certain conditions must be met, and certain effects will occur as a result of the action.\n\nThe preconditions for the \"move-to-monster\" action ensure that the hero can legally move into a room with a monster:\n\n1. **The hero must be at a specific location** (`(at-hero ?from)`): This is the starting point for the hero's movement. The hero can't move from a location they are not currently at.\n\n2. **The destination cell must have a monster** (`(has-monster ?to)`): This action is specifically about moving to a room with a monster, so the destination must indeed have a monster.\n\n3. **The current location and the destination must be connected** (`(connected ?from ?to)`): The hero can only move between connected rooms, so there must be a corridor linking the current location to the destination.\n\nThe effects of the action describe what changes as a result of the hero moving:\n\n1. **The hero is no longer at the starting location** (`(not (at-hero ?from))`): After moving, the hero's location changes, so they are no longer in the starting room.\n\n2. **The hero is now at the destination location** (`(at-hero ?to)`): The hero successfully moves to the new location, which is the room with the monster.\n\nThe following PDDL action schema represents the \"move-to-monster\" action with the specified preconditions and effects.\n\n**Response:**\nParameters:\n1. ?from - cells: [The cell location where the hero is currently at]\n2. ?to - cells: [The cell location with a monster that the hero is moving to]\n\nPreconditions:\n```\n(and\n    (at-hero ?from)\n    (has-monster ?to)\n    (connected ?from ?to)\n)\n```\n\nEffects:\n```\n(and\n    (not (at-hero ?from))\n    (at-hero ?to)\n)\n```\n\n---", "type": "response", "action": "move-to-monster"}
{"role": "system", "content": "# CONTEXT #\nYou are a tool called PDDL Modeling Assistant. You are a technical experts in constructing Planning Domain Definition Language (PDDL) models via the natural language context.\n# OBJECTIVE #\n* Construct parameters, preconditions and effects based on the domain information, action description and the action name.\n* All variables in the preconditions and effects must be listed in the action's parameters. This restriction helps maintain the action's scope and prevents ambiguity in the planning process.\n* Do not use predicates that are not defined in the available predicates list to construct the preconditions and effects.\n* When the natural language description is ambiguous or certain predicate changes are implied, make reasonable assumptions based on common sense to fill up the implicit predicate in the PDDL action.\n# STYLE #\nFollow the writing style of technical experts. The output can be parsed by a machine, so it is important to follow the structured format.\n# TONE #\nBe precise and concise in constructing the PDDL action. The PDDL action should be clear and unambiguous.\n# AUDIENCE #\nYour audience is someone who is trying to learn how to construct PDDL actions from natural language descriptions.\n# RESPONSE #\nThe response should be in the following format:\n---\n**Explanation:** [Your explanation here]\n\n**Response:**\nParameters:\n1. ?x - [type]: [parameter description]\n2. ...\n\nPreconditions:\n```\n(and\n    ([predicate_1] ?x)\n)\n```\n\nEffects:\n```\n(and\n    (not ([predicate_2] ?x))\n    ([predicate_2] ?x)\n    ...\n)\n```\n---\n", "type": "prompt"}
{"role": "user", "content": "One or two examples from other domains for illustrating the input and output formats.\nHere are two examples from the storage domain for demonstrating the output format.\n        \nDomain information: Moving and storing crates of goods by hoists from containers to depots with spatial maps. This domain deals with the movement and storage of crates of goods using hoists. It involves different locations like containers and depots, and requires managing the spatial arrangement of crates and hoists in various areas. The actions primarily focus on the lifting, moving, and placement of crates by hoists, considering the spatial and availability constraints of the areas involved.\n\nA list of available predicates\n1. (clear ?s - store_area) ;; the store area is clear\n2. (crate_in ?c - crate ?p - place) ;; the crate is in the place\n3. (store_area_in ?s - store_area ?p - place) ;; the store area is in the place\n4. (available ?h - hoist) ;; the hoist is available\n5. (lifting ?h - hoist ?c - crate) ;; the hoist is lifting the crate\n6. (at ?h - hoist ?a - area) ;; the hoist is at the area\n7. (on ?c - crate ?s - store_area) ;; the crate is on the store area\n8. (connected ?a1 ?a2 - area) ;; the area a1 is connected to the area a2\nExample 1\nAction Description: Moves a hoist from one store_area to another. Preconditions include the hoist being at the source store_area, the destination store_area being clear, and the areas being connected. The effect is the hoist moving to the destination and the change in clarity status of both store areas.\n\nAction name: move\n\n\nYour answer:\n---\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:**\n\nLet's imagine a scenario where you need to move a toy truck from one corner of a room to another. This toy truck represents the hoist, and the corners of the room are like different storage areas in our description.\n\n1. **Preconditions:**\n   - **Hoist is at the source area (at ?h ?from):** This condition makes sure that the hoist is actually at the starting point (like making sure your toy truck is really in the corner where you want to start moving it from). This is necessary because you can't move something from a place it isn't already at.\n   - **Destination area is clear (clear ?to):** This is like making sure that the corner you want to move your toy truck to doesn\u2019t have any obstacles or other toys in the way. The space needs to be clear so the hoist can move in without any issues.\n   - **Areas are connected (connected ?from ?to):** This checks if there is a direct path from the starting point to the destination, similar to making sure there's a clear path on the floor between the two corners of the room for the toy truck to travel without hitting a wall or furniture.\n\n2. **Effects:**\n   - **Hoist moves to the destination (at ?h ?to):** This is like saying your toy truck is now in the new corner of the room.\n   - **Hoist is no longer at the source (not (at ?h ?from)):** Just like your toy truck can't be in two places at once, when the hoist moves to the new area, it's no longer in the original area.\n   - **Destination area is no longer clear (not (clear ?to)):** Now that the hoist (or your toy truck) is in the new corner, that corner isn't empty anymore.\n   - **Source area becomes clear (clear ?from):** Since the hoist has moved away from the original area, that area is now free of obstacles or the hoist itself.\n\nSo, in simple terms, this action is like moving a toy from one clear, connected corner of the room to another. Before you move it, you need to check that it\u2019s starting in the right place, that there\u2019s no blockage where it\u2019s going, and that it can directly reach there. Once moved, the toy truck\u2019s old spot becomes empty, and its new spot is now occupied by it.\n                \n**Response:**\nParameters:\n1. ?h - hoist: [short description of the parameter]\n2. ?from - store_area: [short description of the parameter]\n3. ?to - store_area: [short description of the parameter]\n\nPreconditions:\n```\n(and\n    (at ?h ?from)\n    (clear ?to)\n    (connected ?from ?to)\n)\n```\n\nEffects:\n```\n(and\n    (not (at ?h ?from))\n    (at ?h ?to)\n    (not (clear ?to))\n    (clear ?from)\n)\n```\n\n---\n", "type": "prompt"}
{"role": "user", "content": "Example 2\nAction Description: Involves a hoist lifting a crate from one store_area to another area. Preconditions include the areas being connected, the hoist being at the destination area and available, and the crate being on the source store_area. The effects are the crate being lifted and the source store_area becoming clear.\n\nAction name: lift\n\n\nYour answer:\n---\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:**\nLet's imagine you want to move a toy train (representing the hoist) from one side of your playroom (a store area) to another. Before moving it, you need to make sure of a few things:\n\n1. **The train is actually at the starting point:** Just like you need to know where your train is before you can move it, the action schema checks if the hoist is at the starting store area (`at ?h ?from`). This ensures that we are moving the right hoist from the correct location.\n\n2. **The destination is clear:** Imagine if the place you wanted to move your train to was already full of other toys. You wouldn\u2019t be able to put your train there, right? Similarly, the schema requires the destination store area to be clear (`clear ?to`) so that the hoist can move there without any issues.\n\n3. **The starting and destination points are connected:** It\u2019s like making sure there\u2019s a clear path or a track between where your train is and where you want it to go. If there\u2019s no track, you can't move the train. In the action schema, this is checked by the condition (`connected ?from ?to`).\n\nNow, when the train (hoist) moves:\n- **It is no longer at the starting point:** Just like when your train leaves one side of the room, it\u2019s not there anymore. This change is shown in the schema by removing the condition that the hoist is at the starting area (`not (at ?h ?from)`).\n  \n- **It is now at the destination:** When you move your train to the other side of the room, it\u2019s now there. This is represented in the schema by adding the condition that the hoist is now at the destination area (`at ?h ?to`).\n\n- **The destination is no longer clear:** Now that the train is at the new spot, that area isn\u2019t empty anymore. This change is reflected by removing the 'clear' condition for the destination area (`not (clear ?to)`).\n\n- **The starting point becomes clear:** Since the train left the starting area, that spot is now free. This is captured by adding a 'clear' condition for the starting area (`clear ?from`).\n\nThis whole process helps ensure that the hoist can safely and efficiently move from one area to another without confusion or conflicts.\n                \n**Response:**\nParameters:\n1. ?h - hoist: [short description of the parameter]\n2. ?c - crate: [short description of the parameter]\n3. ?a1 - store_area: [short description of the parameter]\n4. ?a2 - area: [short description of the parameter]\n5. ?p - place: [short description of the parameter]\n\nPreconditions:\n```\n(and\n    (connected ?a1 ?a2)\n    (at ?h ?a2)\n    (available ?h)\n    (on ?c ?a1)\n    (store_area_in ?a1 ?p)\n)\n```\n\nEffects:\n```\n(and\n    (not (on ?c ?a1))\n    (clear ?a1)\n    (not (available ?h))\n    (lifting ?h ?c)\n    (not (crate_in ?c ?p))\n)\n```\n\n---\n", "type": "prompt"}
{"role": "user", "content": "Here are two examples from the baking domain for demonstrating the output format.\n        \nDomain information: This describes a cooking or baking process where ingredients such as eggs and flour are used. The process of baking involves putting eggs in the pan followed by the flour, mix the two and then put the pan in the oven and then remove the pan from the oven to get the baked cake. Lastly, the pan is cleaned using a soap. Well, you can also bake a souffle but in at bit different process.\n\nA list of available predicates\n1. (is_egg ?egg - ingredient) ;; the ingredient is an egg\n2. (is_flour ?flour - ingredient) ;; the ingredient is flour\n3. (pan_has_egg ?pan - pan) ;; the pan has an egg\n4. (pan_has_flour ?pan - pan) ;; the pan has flour\n5. (pan_is_clean ?pan - pan) ;; the pan is clean\n6. (pan_in_oven ?pan - pan) ;; the pan is in the oven\n7. (in_pan ?x - ingredient ?pan - pan) ;; the ingredient is in the pan\n8. (in_oven ?pan - pan ?oven - oven) ;; the pan is in the oven\n9. (oven_is_full ?oven - oven) ;; the oven is full\n10. (hypothetical ?new - ingredient) ;; the ingredient is hypothetical\n11. (is_mixed ?pan - pan) ;; the ingredients in the pan are mixed\n12. (is_cake ?new - ingredient) ;; the ingredient is a cake\n13. (is_souffle ?new - ingredient) ;; the ingredient is a souffle\n14. (soap_consumed ?soap - soap) ;; the soap is consumed\nExample 1\nAction Description: This action involves placing an egg into a pan. It's only possible when the pan is clean, not already in the oven, does not contain an egg, and the ingredients in it are not yet mixed.\n\nAction name: put_egg_in_pan\n\n\nYour answer:\n---\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:** Let's imagine you're in the kitchen, getting ready to bake a cake. The first step is to put an egg into the pan. But before you do that, there are some important conditions that need to be met to make sure everything goes smoothly.\n\n1. **The egg must be an egg**: This might seem obvious, but you need to be sure that the ingredient you're putting into the pan is indeed an egg. This is why we have the condition `(is_egg ?egg)`.\n\n2. **The pan must not already have an egg**: If there's already an egg in the pan, you don't need to add another one just yet. This is checked with `(not (pan_has_egg ?pan))`.\n\n3. **The ingredients in the pan must not be mixed**: If the ingredients are already mixed, it means you're further along in the baking process, and adding a new egg wouldn't make sense. So, we check `(not (is_mixed ?pan))`.\n\n4. **The pan must be clean**: You wouldn't want to put an egg in a dirty pan, right? It might affect the taste and hygiene of your cake. This is ensured with `(pan_is_clean ?pan)`.\n\n5. **The pan must not be in the oven**: If the pan is already in the oven, it means the baking process has started, and you can't add more ingredients. This is checked with `(not (pan_in_oven ?pan))`.\n\nOnce all these conditions are met, you can add the egg to the pan. The effects of this action are:\n\n- **The pan now has an egg**: This is recorded with `(pan_has_egg ?pan)`.\n- **The egg is in the pan**: This is noted with `(in_pan ?egg ?pan)`.\n\nSo, in summary, before you put an egg in the pan, you need to make sure the pan is clean, doesn't already have an egg, isn't in the oven, and the ingredients aren't mixed yet. This ensures that the baking process starts correctly and everything is in the right order.\n                \n**Response:**\nParameters:\n1. ?egg - ingredient: [short description of the parameter]\n2. ?pan - pan: [short description of the parameter]\n\nPreconditions:\n```\n(and\n    (is_egg ?egg)\n    (not (pan_has_egg ?pan))\n    (not (is_mixed ?pan))\n    (pan_is_clean ?pan)\n    (not (pan_in_oven ?pan))\n)\n```\n\nEffects:\n```\n(and\n    (pan_has_egg ?pan)\n    (in_pan ?egg ?pan)\n)\n```\n\n---\n", "type": "prompt"}
{"role": "user", "content": "Example 2\nAction Description: Baking a cake involves transforming mixed ingredients in a pan into a cake. This action is possible when the ingredients in the pan are mixed, the pan is in the oven, and it involves creating a new type of ingredient, termed here as hypothetical. The end result is a cake, and the pan becomes dirty.\n\nAction name: bake_cake\n\n\nYour answer:\n---\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:** The action schema for \"bake_cake\" describes the steps needed to transform a pan of mixed ingredients into a cake. Let\u2019s break down why each part is necessary.\n\nImagine you are in the kitchen with a bowl (the pan) filled with mixed ingredients. To bake a cake, you need to follow specific steps and meet certain conditions:\n\n1. **Preconditions:** \n   - **(is_mixed ?pan):** This means that the ingredients in the pan must already be mixed. Think about it: if you don\u2019t mix the flour and eggs together, they won\u2019t turn into a cake. So, the first condition is that the mixture is ready.\n   - **(in_oven ?pan ?oven):** The pan must be inside the oven. If it\u2019s not in the oven, baking can\u2019t happen. Just like you can't bake a cake if you leave the pan on the counter.\n   - **(hypothetical ?new):** This indicates that you are about to create something new, which in this case is the cake. It\u2019s like saying we have the potential to make a cake.\n\n2. **Effects:**\n   - **(not (is_mixed ?pan)):** Once you bake the cake, the ingredients are no longer just mixed; they have transformed into a cake. So, this condition removes the state of being mixed.\n   - **(not (pan_is_clean ?pan)):** After baking, the pan becomes dirty. This effect shows that the pan is no longer clean because it was used for baking.\n   - **(not (hypothetical ?new)):** Now that the cake is baked, it\u2019s no longer a hypothetical possibility but an actual cake.\n   - **(is_cake ?new):** This confirms that what you now have is indeed a cake.\n\nIn summary, the preconditions ensure that you have mixed ingredients in the oven, ready to be baked. The effects describe the outcome: the ingredients are no longer just mixed, the pan is dirty from baking, and the hypothetical idea of a cake has turned into a real cake. This process is like following a recipe step-by-step to ensure everything is done correctly to bake a cake.\n                \n**Response:**\nParameters:\n1. ?oven - oven: [short description of the parameter]\n2. ?pan - pan: [short description of the parameter]\n3. ?new - ingredient: [short description of the parameter]\n\nPreconditions:\n```\n(and\n    (is_mixed ?pan)\n    (in_oven ?pan ?oven)\n    (hypothetical ?new)\n)\n```\n\nEffects:\n```\n(and\n    (not (is_mixed ?pan))\n    (not (pan_is_clean ?pan))\n    (not (hypothetical ?new))\n    (is_cake ?new)\n)\n```\n\n---\n", "type": "prompt"}
{"role": "user", "content": "Question: Here is the task.\nA natural language description of the domain\nDomain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape\n\nA list of available predicates\n1. (at-hero ?loc - cells) ;;  Hero's cell location\n2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location\n3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster\n4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap\n5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed\n6. (connected ?from ?to - cells) ;; connects cells\n7. (arm-free) ;; Hero's hand is free\n8. (holding ?s - swords) ;; Hero's holding a sword\n9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed\n\nAction Description: Hero's disarm the trap with his hand. Make sure the hand is free.\n\nAction name: disarm-trap\n\n\nYour answer:\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:** In the dungeon domain, the hero needs to navigate through rooms connected by corridors, avoiding or dealing with monsters and traps, and possibly picking up a sword to aid in their escape. The action \"disarm-trap\" is a critical step where the hero uses their free hand to disable a trap in their current room.\n\nFor this action to occur, certain conditions must be met:\n- The hero must be in a room with a trap (`has-trap ?loc`).\n- The hero's hand must be free (`arm-free`), meaning they are not currently holding a sword or otherwise occupied.\n\nOnce these preconditions are satisfied, the action can take place. The effect of disarming the trap is that the trap in the hero's current location is disarmed (`trap-disarmed ?loc`), making it safe for the hero to proceed.\n\n**Response:**\nParameters:\n1. ?loc - cells: [The cell where the hero is located and where the trap is]\n\nPreconditions:\n```\n(and\n    (at-hero ?loc)\n    (has-trap ?loc)\n    (arm-free)\n)\n```\n\nEffects:\n```\n(and\n    (trap-disarmed ?loc)\n)\n```\n\n---", "type": "response", "action": "disarm-trap"}
{"role": "system", "content": "# CONTEXT #\nYou are a tool called PDDL Modeling Assistant. You are a technical experts in constructing Planning Domain Definition Language (PDDL) models via the natural language context.\n# OBJECTIVE #\n* Construct parameters, preconditions and effects based on the domain information, action description and the action name.\n* All variables in the preconditions and effects must be listed in the action's parameters. This restriction helps maintain the action's scope and prevents ambiguity in the planning process.\n* Do not use predicates that are not defined in the available predicates list to construct the preconditions and effects.\n* When the natural language description is ambiguous or certain predicate changes are implied, make reasonable assumptions based on common sense to fill up the implicit predicate in the PDDL action.\n# STYLE #\nFollow the writing style of technical experts. The output can be parsed by a machine, so it is important to follow the structured format.\n# TONE #\nBe precise and concise in constructing the PDDL action. The PDDL action should be clear and unambiguous.\n# AUDIENCE #\nYour audience is someone who is trying to learn how to construct PDDL actions from natural language descriptions.\n# RESPONSE #\nThe response should be in the following format:\n---\n**Explanation:** [Your explanation here]\n\n**Response:**\nParameters:\n1. ?x - [type]: [parameter description]\n2. ...\n\nPreconditions:\n```\n(and\n    ([predicate_1] ?x)\n)\n```\n\nEffects:\n```\n(and\n    (not ([predicate_2] ?x))\n    ([predicate_2] ?x)\n    ...\n)\n```\n---\n", "type": "prompt"}
{"role": "user", "content": "One or two examples from other domains for illustrating the input and output formats.\nHere are two examples from the storage domain for demonstrating the output format.\n        \nDomain information: Moving and storing crates of goods by hoists from containers to depots with spatial maps. This domain deals with the movement and storage of crates of goods using hoists. It involves different locations like containers and depots, and requires managing the spatial arrangement of crates and hoists in various areas. The actions primarily focus on the lifting, moving, and placement of crates by hoists, considering the spatial and availability constraints of the areas involved.\n\nA list of available predicates\n1. (clear ?s - store_area) ;; the store area is clear\n2. (crate_in ?c - crate ?p - place) ;; the crate is in the place\n3. (store_area_in ?s - store_area ?p - place) ;; the store area is in the place\n4. (available ?h - hoist) ;; the hoist is available\n5. (lifting ?h - hoist ?c - crate) ;; the hoist is lifting the crate\n6. (at ?h - hoist ?a - area) ;; the hoist is at the area\n7. (on ?c - crate ?s - store_area) ;; the crate is on the store area\n8. (connected ?a1 ?a2 - area) ;; the area a1 is connected to the area a2\nExample 1\nAction Description: Moves a hoist from one store_area to another. Preconditions include the hoist being at the source store_area, the destination store_area being clear, and the areas being connected. The effect is the hoist moving to the destination and the change in clarity status of both store areas.\n\nAction name: move\n\n\nYour answer:\n---\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:**\n\nLet's imagine a scenario where you need to move a toy truck from one corner of a room to another. This toy truck represents the hoist, and the corners of the room are like different storage areas in our description.\n\n1. **Preconditions:**\n   - **Hoist is at the source area (at ?h ?from):** This condition makes sure that the hoist is actually at the starting point (like making sure your toy truck is really in the corner where you want to start moving it from). This is necessary because you can't move something from a place it isn't already at.\n   - **Destination area is clear (clear ?to):** This is like making sure that the corner you want to move your toy truck to doesn\u2019t have any obstacles or other toys in the way. The space needs to be clear so the hoist can move in without any issues.\n   - **Areas are connected (connected ?from ?to):** This checks if there is a direct path from the starting point to the destination, similar to making sure there's a clear path on the floor between the two corners of the room for the toy truck to travel without hitting a wall or furniture.\n\n2. **Effects:**\n   - **Hoist moves to the destination (at ?h ?to):** This is like saying your toy truck is now in the new corner of the room.\n   - **Hoist is no longer at the source (not (at ?h ?from)):** Just like your toy truck can't be in two places at once, when the hoist moves to the new area, it's no longer in the original area.\n   - **Destination area is no longer clear (not (clear ?to)):** Now that the hoist (or your toy truck) is in the new corner, that corner isn't empty anymore.\n   - **Source area becomes clear (clear ?from):** Since the hoist has moved away from the original area, that area is now free of obstacles or the hoist itself.\n\nSo, in simple terms, this action is like moving a toy from one clear, connected corner of the room to another. Before you move it, you need to check that it\u2019s starting in the right place, that there\u2019s no blockage where it\u2019s going, and that it can directly reach there. Once moved, the toy truck\u2019s old spot becomes empty, and its new spot is now occupied by it.\n                \n**Response:**\nParameters:\n1. ?h - hoist: [short description of the parameter]\n2. ?from - transit_area: [short description of the parameter]\n3. ?to - store_area: [short description of the parameter]\n\nPreconditions:\n```\n(and\n    (at ?h ?from)\n    (connected ?from ?to)\n    (clear ?to)\n)\n```\n\nEffects:\n```\n(and\n    (not (at ?h ?from))\n    (at ?h ?to)\n    (not (clear ?to))\n)\n```\n\n---\n", "type": "prompt"}
{"role": "user", "content": "Example 2\nAction Description: This is the reverse of Go-out, where a hoist moves from a transit_area to a store_area. Preconditions include the hoist being at the transit_area, the areas being connected, and the destination store_area being clear. The effect is similar to Go-out but in reverse.\n\nAction name: go-in\n\n\nYour answer:\n---\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:**\n\nImagine you have a small robot hoist that helps move boxes in a big warehouse. The warehouse has different areas, like a spot for loading boxes and another for storing them. The \"go-in\" action is like telling the robot to move from a loading area to a storage area.\n\nNow, why does the robot need certain conditions to be met before it can move? Here's a breakdown:\n\n1. **The robot must be at the loading area** (transit_area): This is pretty straightforward. If the robot isn't at the loading area, it can't start moving towards the storage area because it's simply not there to begin the task.\n\n2. **The loading area and storage area must be connected**: It's like making sure there's a clear path or a road between two places before you start driving. If there's no path, the robot can't move between these areas.\n\n3. **The storage area must be clear**: This ensures that there is space available for the robot to enter and place the boxes. It's similar to needing an empty parking spot to park your car.\n\nNow, what happens after the robot moves based on these conditions?\n\n- **The robot is no longer in the loading area**: Just like when you leave your house, you're not inside anymore. The robot has left the loading area, so we say it's no longer there.\n  \n- **The robot is now in the storage area**: Like arriving at a friend\u2019s house after leaving yours, the robot has moved and is now at the storage destination.\n\n- **The storage area is no longer clear**: Since the robot moves in with a box, the space it occupied is now taken. It's like the parking space being occupied once you park your car.\n\nIn summary, these conditions and results make sure the robot moves safely and efficiently from one place to another, without any surprises like arriving at a blocked or non-existent path, or finding no space to drop off the box. This careful planning helps keep everything in the warehouse running smoothly!\n                \n**Response:**\nParameters:\n1. ?h - hoist: [short description of the parameter]\n2. ?from - store_area: [short description of the parameter]\n3. ?to - store_area: [short description of the parameter]\n\nPreconditions:\n```\n(and\n    (at ?h ?from)\n    (clear ?to)\n    (connected ?from ?to)\n)\n```\n\nEffects:\n```\n(and\n    (not (at ?h ?from))\n    (at ?h ?to)\n    (not (clear ?to))\n    (clear ?from)\n)\n```\n\n---\n", "type": "prompt"}
{"role": "user", "content": "Here are two examples from the baking domain for demonstrating the output format.\n        \nDomain information: This describes a cooking or baking process where ingredients such as eggs and flour are used. The process of baking involves putting eggs in the pan followed by the flour, mix the two and then put the pan in the oven and then remove the pan from the oven to get the baked cake. Lastly, the pan is cleaned using a soap. Well, you can also bake a souffle but in at bit different process.\n\nA list of available predicates\n1. (is_egg ?egg - ingredient) ;; the ingredient is an egg\n2. (is_flour ?flour - ingredient) ;; the ingredient is flour\n3. (pan_has_egg ?pan - pan) ;; the pan has an egg\n4. (pan_has_flour ?pan - pan) ;; the pan has flour\n5. (pan_is_clean ?pan - pan) ;; the pan is clean\n6. (pan_in_oven ?pan - pan) ;; the pan is in the oven\n7. (in_pan ?x - ingredient ?pan - pan) ;; the ingredient is in the pan\n8. (in_oven ?pan - pan ?oven - oven) ;; the pan is in the oven\n9. (oven_is_full ?oven - oven) ;; the oven is full\n10. (hypothetical ?new - ingredient) ;; the ingredient is hypothetical\n11. (is_mixed ?pan - pan) ;; the ingredients in the pan are mixed\n12. (is_cake ?new - ingredient) ;; the ingredient is a cake\n13. (is_souffle ?new - ingredient) ;; the ingredient is a souffle\n14. (soap_consumed ?soap - soap) ;; the soap is consumed\nExample 1\nAction Description: Cleaning a pan is the process of making a used pan clean again with the help of soap. It's possible only when the pan is not in the oven, and there is soap available to use. After cleaning, the pan is clean, and the soap is considered used up.\n\nAction name: clean_pan\n\n\nYour answer:\n---\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:** Let's break down why the action \"clean_pan\" has the specified preconditions and effects by imagining a simple scenario:\n\nImagine you have just baked a cake. The pan you used is now dirty, and you want to clean it so you can use it again. To do this, you need two things: the pan itself and some soap.\n\nFirst, let's talk about the preconditions, which are the things that need to be true before you can start cleaning the pan:\n\n1. **The soap must not be consumed**: This means you need to have soap that hasn't been used up yet. If your soap is already used up, you can't clean the pan because there wouldn't be anything to clean with.\n2. **The pan must not be in the oven**: If the pan is still in the oven, you can't clean it. You need to take it out first because you can only wash the pan when it's not inside the oven.\n\nNow, let's move on to the effects, which are the things that will be true after you clean the pan:\n\n1. **The pan will be clean**: After you wash the pan with soap, it becomes clean. This means you have successfully removed all the dirt and leftover cake from it.\n2. **The soap will be consumed**: After you use the soap to clean the pan, the soap gets used up. This means that you can't use the same soap again because it's already been consumed in the process of cleaning.\n\nSo, in simple terms, the preconditions ensure that you have soap available and the pan is accessible. The effects show the result of the cleaning process: a clean pan and used-up soap.\n\nBy setting these preconditions and effects, we can make sure that the action of cleaning the pan happens only when it makes sense and results in the correct outcome.\n                \n**Response:**\nParameters:\n1. ?flour - ingredient: [short description of the parameter]\n2. ?pan - pan: [short description of the parameter]\n\nPreconditions:\n```\n(and\n    (is_flour ?flour)\n    (not (pan_has_flour ?pan))\n    (not (is_mixed ?pan))\n    (pan_is_clean ?pan)\n    (not (pan_in_oven ?pan))\n)\n```\n\nEffects:\n```\n(and\n    (pan_has_flour ?pan)\n    (in_pan ?flour ?pan)\n)\n```\n\n---\n", "type": "prompt"}
{"role": "user", "content": "Example 2\nAction Description: This action is about adding flour to a pan. It can be done when the pan is clean, not in the oven, doesn't have flour in it already, and the contents of the pan haven't been mixed.\n\nAction name: put_flour_in_pan\n\n\nYour answer:\n---\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:** Imagine you are in the kitchen, ready to bake a cake. You have a clean pan in front of you, and you need to add flour to it. To make sure everything goes smoothly, there are certain conditions that need to be met before you can add the flour. These conditions are called preconditions, and they help ensure that the baking process is done correctly.\n\nLet's break down why these preconditions are necessary and what they lead to:\n\n1. **(is_flour ?flour)**: This means the ingredient you are adding must be flour. You wouldn't want to accidentally add something else like sugar or salt when the recipe calls for flour.\n\n2. **(not (pan_has_flour ?pan))**: This checks that the pan doesn't already have flour in it. If the pan already has flour, adding more might mess up the recipe, so you only add it if the pan is currently without flour.\n\n3. **(not (is_mixed ?pan))**: This ensures that the contents of the pan are not already mixed. If you add flour to a pan with mixed ingredients, it might not blend well, so you want to add the flour before any mixing happens.\n\n4. **(pan_is_clean ?pan)**: This makes sure the pan is clean before you add the flour. A dirty pan could spoil the ingredients or the final dish, so starting with a clean pan is crucial.\n\n5. **(not (pan_in_oven ?pan))**: This condition ensures the pan is not in the oven. You wouldn't want to add flour to a pan that's already baking, as it would interrupt the process and could be unsafe.\n\nWhen all these preconditions are met, the action of adding flour to the pan can proceed. The effects of this action are:\n\n- **(pan_has_flour ?pan)**: After you add the flour, the pan now has flour in it. This is important for the next steps in your recipe.\n- **(in_pan ?flour ?pan)**: This confirms that the flour is inside the pan, ready to be mixed with other ingredients.\n\nIn summary, these preconditions ensure that you're adding the flour at the right time and in the right way, setting you up for successful baking. Just like following a recipe step-by-step helps you bake a perfect cake, these conditions guide the process to avoid mistakes.\n                \n**Response:**\nParameters:\n1. ?pan - pan: [short description of the parameter]\n2. ?soap - soap: [short description of the parameter]\n\nPreconditions:\n```\n(and\n    (not (soap_consumed ?soap))\n    (not (pan_in_oven ?pan))\n)\n```\n\nEffects:\n```\n(and\n    (pan_is_clean ?pan)\n    (soap_consumed ?soap)\n)\n```\n\n---\n", "type": "prompt"}
{"role": "user", "content": "Question: Here is the task.\nA natural language description of the domain\nDomain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape\n\nA list of available predicates\n1. (at-hero ?loc - cells) ;;  Hero's cell location\n2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location\n3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster\n4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap\n5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed\n6. (connected ?from ?to - cells) ;; connects cells\n7. (arm-free) ;; Hero's hand is free\n8. (holding ?s - swords) ;; Hero's holding a sword\n9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed\n\nAction Description: Hero's picks a sword if he's in the same location\n\nAction name: pick-sword\n\n\nYour answer:\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:** In the given dungeon domain, the hero needs to navigate through rooms connected by corridors, avoiding monsters and traps, and potentially using swords found in the rooms to aid in their escape. The action \"pick-sword\" represents the hero's ability to pick up a sword if one is present in the room they are currently in.\n\nFor this action to occur, certain conditions must be met. The hero must be in the same location as the sword, and the hero's hand must be free to pick up the sword. Once these conditions are satisfied, the hero can pick up the sword, which will then be in their possession.\n\nThe preconditions for the \"pick-sword\" action are:\n\n1. **(at-hero ?loc)**: The hero must be at a specific location.\n2. **(at-sword ?s ?loc)**: There must be a sword at the same location as the hero.\n3. **(arm-free)**: The hero's hand must be free to pick up the sword.\n\nThe effects of the \"pick-sword\" action are:\n\n1. **(not (at-sword ?s ?loc))**: The sword is no longer at the location because the hero has picked it up.\n2. **(holding ?s)**: The hero is now holding the sword.\n\nThis action does not change the hero's location or affect the presence of monsters or traps in the room.\n\n**Response:**\nParameters:\n1. ?s - swords: [The sword that the hero is going to pick up]\n2. ?loc - cells: [The location where the hero and the sword are]\n\nPreconditions:\n```\n(and\n    (at-hero ?loc)\n    (at-sword ?s ?loc)\n    (arm-free)\n)\n```\n\nEffects:\n```\n(and\n    (not (at-sword ?s ?loc))\n    (holding ?s)\n)\n```", "type": "response", "action": "pick-sword"}
{"role": "system", "content": "# CONTEXT #\nYou are a tool called PDDL Modeling Assistant. You are a technical experts in constructing Planning Domain Definition Language (PDDL) models via the natural language context.\n# OBJECTIVE #\n* Construct parameters, preconditions and effects based on the domain information, action description and the action name.\n* All variables in the preconditions and effects must be listed in the action's parameters. This restriction helps maintain the action's scope and prevents ambiguity in the planning process.\n* Do not use predicates that are not defined in the available predicates list to construct the preconditions and effects.\n* When the natural language description is ambiguous or certain predicate changes are implied, make reasonable assumptions based on common sense to fill up the implicit predicate in the PDDL action.\n# STYLE #\nFollow the writing style of technical experts. The output can be parsed by a machine, so it is important to follow the structured format.\n# TONE #\nBe precise and concise in constructing the PDDL action. The PDDL action should be clear and unambiguous.\n# AUDIENCE #\nYour audience is someone who is trying to learn how to construct PDDL actions from natural language descriptions.\n# RESPONSE #\nThe response should be in the following format:\n---\n**Explanation:** [Your explanation here]\n\n**Response:**\nParameters:\n1. ?x - [type]: [parameter description]\n2. ...\n\nPreconditions:\n```\n(and\n    ([predicate_1] ?x)\n)\n```\n\nEffects:\n```\n(and\n    (not ([predicate_2] ?x))\n    ([predicate_2] ?x)\n    ...\n)\n```\n---\n", "type": "prompt"}
{"role": "user", "content": "One or two examples from other domains for illustrating the input and output formats.\nHere are two examples from the storage domain for demonstrating the output format.\n        \nDomain information: Moving and storing crates of goods by hoists from containers to depots with spatial maps. This domain deals with the movement and storage of crates of goods using hoists. It involves different locations like containers and depots, and requires managing the spatial arrangement of crates and hoists in various areas. The actions primarily focus on the lifting, moving, and placement of crates by hoists, considering the spatial and availability constraints of the areas involved.\n\nA list of available predicates\n1. (clear ?s - store_area) ;; the store area is clear\n2. (crate_in ?c - crate ?p - place) ;; the crate is in the place\n3. (store_area_in ?s - store_area ?p - place) ;; the store area is in the place\n4. (available ?h - hoist) ;; the hoist is available\n5. (lifting ?h - hoist ?c - crate) ;; the hoist is lifting the crate\n6. (at ?h - hoist ?a - area) ;; the hoist is at the area\n7. (on ?c - crate ?s - store_area) ;; the crate is on the store area\n8. (connected ?a1 ?a2 - area) ;; the area a1 is connected to the area a2\nExample 1\nAction Description: This is the reverse of Go-out, where a hoist moves from a transit_area to a store_area. Preconditions include the hoist being at the transit_area, the areas being connected, and the destination store_area being clear. The effect is similar to Go-out but in reverse.\n\nAction name: go-in\n\n\nYour answer:\n---\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:**\n\nImagine you have a small robot hoist that helps move boxes in a big warehouse. The warehouse has different areas, like a spot for loading boxes and another for storing them. The \"go-in\" action is like telling the robot to move from a loading area to a storage area.\n\nNow, why does the robot need certain conditions to be met before it can move? Here's a breakdown:\n\n1. **The robot must be at the loading area** (transit_area): This is pretty straightforward. If the robot isn't at the loading area, it can't start moving towards the storage area because it's simply not there to begin the task.\n\n2. **The loading area and storage area must be connected**: It's like making sure there's a clear path or a road between two places before you start driving. If there's no path, the robot can't move between these areas.\n\n3. **The storage area must be clear**: This ensures that there is space available for the robot to enter and place the boxes. It's similar to needing an empty parking spot to park your car.\n\nNow, what happens after the robot moves based on these conditions?\n\n- **The robot is no longer in the loading area**: Just like when you leave your house, you're not inside anymore. The robot has left the loading area, so we say it's no longer there.\n  \n- **The robot is now in the storage area**: Like arriving at a friend\u2019s house after leaving yours, the robot has moved and is now at the storage destination.\n\n- **The storage area is no longer clear**: Since the robot moves in with a box, the space it occupied is now taken. It's like the parking space being occupied once you park your car.\n\nIn summary, these conditions and results make sure the robot moves safely and efficiently from one place to another, without any surprises like arriving at a blocked or non-existent path, or finding no space to drop off the box. This careful planning helps keep everything in the warehouse running smoothly!\n                \n**Response:**\nParameters:\n1. ?h - hoist: [short description of the parameter]\n2. ?from - transit_area: [short description of the parameter]\n3. ?to - store_area: [short description of the parameter]\n\nPreconditions:\n```\n(and\n    (at ?h ?from)\n    (connected ?from ?to)\n    (clear ?to)\n)\n```\n\nEffects:\n```\n(and\n    (not (at ?h ?from))\n    (at ?h ?to)\n    (not (clear ?to))\n)\n```\n\n---\n", "type": "prompt"}
{"role": "user", "content": "Example 2\nAction Description: Involves a hoist lifting a crate from one store_area to another area. Preconditions include the areas being connected, the hoist being at the destination area and available, and the crate being on the source store_area. The effects are the crate being lifted and the source store_area becoming clear.\n\nAction name: lift\n\n\nYour answer:\n---\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:**\nLet's imagine you want to move a toy train (representing the hoist) from one side of your playroom (a store area) to another. Before moving it, you need to make sure of a few things:\n\n1. **The train is actually at the starting point:** Just like you need to know where your train is before you can move it, the action schema checks if the hoist is at the starting store area (`at ?h ?from`). This ensures that we are moving the right hoist from the correct location.\n\n2. **The destination is clear:** Imagine if the place you wanted to move your train to was already full of other toys. You wouldn\u2019t be able to put your train there, right? Similarly, the schema requires the destination store area to be clear (`clear ?to`) so that the hoist can move there without any issues.\n\n3. **The starting and destination points are connected:** It\u2019s like making sure there\u2019s a clear path or a track between where your train is and where you want it to go. If there\u2019s no track, you can't move the train. In the action schema, this is checked by the condition (`connected ?from ?to`).\n\nNow, when the train (hoist) moves:\n- **It is no longer at the starting point:** Just like when your train leaves one side of the room, it\u2019s not there anymore. This change is shown in the schema by removing the condition that the hoist is at the starting area (`not (at ?h ?from)`).\n  \n- **It is now at the destination:** When you move your train to the other side of the room, it\u2019s now there. This is represented in the schema by adding the condition that the hoist is now at the destination area (`at ?h ?to`).\n\n- **The destination is no longer clear:** Now that the train is at the new spot, that area isn\u2019t empty anymore. This change is reflected by removing the 'clear' condition for the destination area (`not (clear ?to)`).\n\n- **The starting point becomes clear:** Since the train left the starting area, that spot is now free. This is captured by adding a 'clear' condition for the starting area (`clear ?from`).\n\nThis whole process helps ensure that the hoist can safely and efficiently move from one area to another without confusion or conflicts.\n                \n**Response:**\nParameters:\n1. ?h - hoist: [short description of the parameter]\n2. ?c - crate: [short description of the parameter]\n3. ?a1 - store_area: [short description of the parameter]\n4. ?a2 - area: [short description of the parameter]\n5. ?p - place: [short description of the parameter]\n\nPreconditions:\n```\n(and\n    (connected ?a1 ?a2)\n    (at ?h ?a2)\n    (available ?h)\n    (on ?c ?a1)\n    (store_area_in ?a1 ?p)\n)\n```\n\nEffects:\n```\n(and\n    (not (on ?c ?a1))\n    (clear ?a1)\n    (not (available ?h))\n    (lifting ?h ?c)\n    (not (crate_in ?c ?p))\n)\n```\n\n---\n", "type": "prompt"}
{"role": "user", "content": "Here are two examples from the baking domain for demonstrating the output format.\n        \nDomain information: This describes a cooking or baking process where ingredients such as eggs and flour are used. The process of baking involves putting eggs in the pan followed by the flour, mix the two and then put the pan in the oven and then remove the pan from the oven to get the baked cake. Lastly, the pan is cleaned using a soap. Well, you can also bake a souffle but in at bit different process.\n\nA list of available predicates\n1. (is_egg ?egg - ingredient) ;; the ingredient is an egg\n2. (is_flour ?flour - ingredient) ;; the ingredient is flour\n3. (pan_has_egg ?pan - pan) ;; the pan has an egg\n4. (pan_has_flour ?pan - pan) ;; the pan has flour\n5. (pan_is_clean ?pan - pan) ;; the pan is clean\n6. (pan_in_oven ?pan - pan) ;; the pan is in the oven\n7. (in_pan ?x - ingredient ?pan - pan) ;; the ingredient is in the pan\n8. (in_oven ?pan - pan ?oven - oven) ;; the pan is in the oven\n9. (oven_is_full ?oven - oven) ;; the oven is full\n10. (hypothetical ?new - ingredient) ;; the ingredient is hypothetical\n11. (is_mixed ?pan - pan) ;; the ingredients in the pan are mixed\n12. (is_cake ?new - ingredient) ;; the ingredient is a cake\n13. (is_souffle ?new - ingredient) ;; the ingredient is a souffle\n14. (soap_consumed ?soap - soap) ;; the soap is consumed\nExample 1\nAction Description: Cleaning a pan is the process of making a used pan clean again with the help of soap. It's possible only when the pan is not in the oven, and there is soap available to use. After cleaning, the pan is clean, and the soap is considered used up.\n\nAction name: clean_pan\n\n\nYour answer:\n---\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:** Let's break down why the action \"clean_pan\" has the specified preconditions and effects by imagining a simple scenario:\n\nImagine you have just baked a cake. The pan you used is now dirty, and you want to clean it so you can use it again. To do this, you need two things: the pan itself and some soap.\n\nFirst, let's talk about the preconditions, which are the things that need to be true before you can start cleaning the pan:\n\n1. **The soap must not be consumed**: This means you need to have soap that hasn't been used up yet. If your soap is already used up, you can't clean the pan because there wouldn't be anything to clean with.\n2. **The pan must not be in the oven**: If the pan is still in the oven, you can't clean it. You need to take it out first because you can only wash the pan when it's not inside the oven.\n\nNow, let's move on to the effects, which are the things that will be true after you clean the pan:\n\n1. **The pan will be clean**: After you wash the pan with soap, it becomes clean. This means you have successfully removed all the dirt and leftover cake from it.\n2. **The soap will be consumed**: After you use the soap to clean the pan, the soap gets used up. This means that you can't use the same soap again because it's already been consumed in the process of cleaning.\n\nSo, in simple terms, the preconditions ensure that you have soap available and the pan is accessible. The effects show the result of the cleaning process: a clean pan and used-up soap.\n\nBy setting these preconditions and effects, we can make sure that the action of cleaning the pan happens only when it makes sense and results in the correct outcome.\n                \n**Response:**\nParameters:\n1. ?oven - oven: [short description of the parameter]\n2. ?egg - ingredient: [short description of the parameter]\n3. ?pan - pan: [short description of the parameter]\n4. ?new - ingredient: [short description of the parameter]\n\nPreconditions:\n```\n(and\n    (in_pan ?egg ?pan)\n    (is_egg ?egg)\n    (not (pan_has_flour ?pan))\n    (in_oven ?pan ?oven)\n    (hypothetical ?new)\n)\n```\n\nEffects:\n```\n(and\n    (not (is_egg ?egg))\n    (not (in_pan ?egg ?pan))\n    (not (pan_has_egg ?pan))\n    (not (pan_is_clean ?pan))\n    (not (hypothetical ?new))\n    (is_souffle ?new)\n)\n```\n\n---\n", "type": "prompt"}
{"role": "user", "content": "Example 2\nAction Description: This action represents the process of making a souffle. It requires an egg in a pan (without flour), with the pan placed in an oven. A new, hypothetical ingredient is involved, which becomes a souffle as a result of this process. After baking, the pan is no longer clean.\n\nAction name: bake_souffle\n\n\nYour answer:\n---\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:**\n\nLet's think of making a souffle as if it were a little project where you need certain things to start, and you end up with something new at the end. In our souffle-making scenario, you begin with a pan, an egg, and an oven. This matches closely with our action schema in PDDL, named `bake_souffle`.\n\n1. **Preconditions:** \n    - **Egg in the Pan:** To make a souffle, the first thing you need is an egg in the pan. This matches the precondition `(in_pan ?egg ?pan)`, meaning the egg needs to be in the pan to start.\n    - **The Egg is Really an Egg:** We also need to confirm that what we're using is indeed an egg, so we check `(is_egg ?egg)`.\n    - **No Flour in the Pan:** For this particular recipe, having flour in the pan would mess things up, so the precondition `(not (pan_has_flour ?pan))` ensures flour isn't in the pan.\n    - **Pan in the Oven:** The pan must be in the oven `(in_oven ?pan ?oven)` for the baking to occur.\n    - **Hypothetical New Ingredient:** The schema mentions a `hypothetical ?new`, which represents the potential new ingredient, the souffle, that will be created.\n\n2. **Effects:**\n    - **Egg Transforms into Souffle:** After baking, the egg isn't just an egg anymore; it becomes a souffle. This is shown by `(not (is_egg ?egg))` and `(is_souffle ?new)`, where the egg disappears as an egg and reappears as a souffle.\n    - **Pan is No Longer Clean:** Baking usually leaves the pan dirty. Thus, the effect `(not (pan_is_clean ?pan))` captures this change.\n    - **Ingredients and Conditions Reset:** The egg is no longer in the pan, shown by `(not (in_pan ?egg ?pan))` and `(not (pan_has_egg ?pan))`, and the hypothetical nature of the new ingredient is removed with `(not (hypothetical ?new))`, finalizing the souffle's existence.\n\nSo, we start with an egg in a clean pan and finish with a baked souffle and a dirty pan. This schema captures all the steps and checks needed to go from start to finish in the souffle-making process, ensuring that each step and condition is accounted for, just like following a recipe!\n                \n**Response:**\nParameters:\n1. ?pan - pan: [short description of the parameter]\n2. ?soap - soap: [short description of the parameter]\n\nPreconditions:\n```\n(and\n    (not (soap_consumed ?soap))\n    (not (pan_in_oven ?pan))\n)\n```\n\nEffects:\n```\n(and\n    (pan_is_clean ?pan)\n    (soap_consumed ?soap)\n)\n```\n\n---\n", "type": "prompt"}
{"role": "user", "content": "Question: Here is the task.\nA natural language description of the domain\nDomain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape\n\nA list of available predicates\n1. (at-hero ?loc - cells) ;;  Hero's cell location\n2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location\n3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster\n4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap\n5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed\n6. (connected ?from ?to - cells) ;; connects cells\n7. (arm-free) ;; Hero's hand is free\n8. (holding ?s - swords) ;; Hero's holding a sword\n9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed\n\nAction Description: Hero can move if the - hero is at current location - cells are connected, - when this action is executed, the hero gets into a location with a trap\n\nAction name: move-to-trap\n\n\nYour answer:\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:**\n\nIn the given dungeon domain, the hero needs to navigate through rooms connected by corridors to find an exit. The action \"move-to-trap\" describes the hero moving into a room with a trap. For this action to occur, certain conditions must be met, and certain outcomes will result from the action.\n\nThe preconditions for the \"move-to-trap\" action ensure that the hero can legally move from one room to another:\n\n1. **The hero must be at a specific location** (`at-hero ?from`): This is the starting point for the hero's movement.\n2. **The destination room must be connected to the current location** (`connected ?from ?to`): This ensures that there is a corridor linking the two rooms, allowing the hero to move from one to the other.\n\nThe effects of the action describe what changes when the hero moves:\n\n1. **The hero is no longer at the starting location** (`not (at-hero ?from)`): After moving, the hero is no longer in the room they started from.\n2. **The hero is now at the destination location** (`at-hero ?to`): The hero has successfully moved to the new room, which has a trap.\n\nSince the action description specifies that when this action is executed, the hero gets into a location with a trap, we can infer that the destination location (`?to`) must have a trap. However, this is not explicitly stated as a precondition but can be assumed to be true based on the action's purpose.\n\n**Response:**\nParameters:\n1. ?from - cells: [The cell location where the hero starts]\n2. ?to - cells: [The cell location where the hero moves to, which has a trap]\n\nPreconditions:\n```\n(and\n    (at-hero ?from)\n    (connected ?from ?to)\n    (has-trap ?to)\n)\n```\n\nEffects:\n```\n(and\n    (not (at-hero ?from))\n    (at-hero ?to)\n)\n```\n\nNote: The `has-trap ?to` in the preconditions is based on the assumption that the destination must have a trap as per the action's description. If this assumption is incorrect and the presence of a trap at the destination is not a requirement for the action, then `has-trap ?to` should be omitted from the preconditions.", "type": "response", "action": "move-to-trap"}
{"role": "system", "content": "# CONTEXT #\nYou are a tool called PDDL Modeling Assistant. You are a technical experts in constructing Planning Domain Definition Language (PDDL) models via the natural language context.\n# OBJECTIVE #\n* Construct parameters, preconditions and effects based on the domain information, action description and the action name.\n* All variables in the preconditions and effects must be listed in the action's parameters. This restriction helps maintain the action's scope and prevents ambiguity in the planning process.\n* Do not use predicates that are not defined in the available predicates list to construct the preconditions and effects.\n* When the natural language description is ambiguous or certain predicate changes are implied, make reasonable assumptions based on common sense to fill up the implicit predicate in the PDDL action.\n# STYLE #\nFollow the writing style of technical experts. The output can be parsed by a machine, so it is important to follow the structured format.\n# TONE #\nBe precise and concise in constructing the PDDL action. The PDDL action should be clear and unambiguous.\n# AUDIENCE #\nYour audience is someone who is trying to learn how to construct PDDL actions from natural language descriptions.\n# RESPONSE #\nThe response should be in the following format:\n---\n**Explanation:** [Your explanation here]\n\n**Response:**\nParameters:\n1. ?x - [type]: [parameter description]\n2. ...\n\nPreconditions:\n```\n(and\n    ([predicate_1] ?x)\n)\n```\n\nEffects:\n```\n(and\n    (not ([predicate_2] ?x))\n    ([predicate_2] ?x)\n    ...\n)\n```\n---\n", "type": "prompt"}
{"role": "user", "content": "One or two examples from other domains for illustrating the input and output formats.\nHere are two examples from the storage domain for demonstrating the output format.\n        \nDomain information: Moving and storing crates of goods by hoists from containers to depots with spatial maps. This domain deals with the movement and storage of crates of goods using hoists. It involves different locations like containers and depots, and requires managing the spatial arrangement of crates and hoists in various areas. The actions primarily focus on the lifting, moving, and placement of crates by hoists, considering the spatial and availability constraints of the areas involved.\n\nA list of available predicates\n1. (clear ?s - store_area) ;; the store area is clear\n2. (crate_in ?c - crate ?p - place) ;; the crate is in the place\n3. (store_area_in ?s - store_area ?p - place) ;; the store area is in the place\n4. (available ?h - hoist) ;; the hoist is available\n5. (lifting ?h - hoist ?c - crate) ;; the hoist is lifting the crate\n6. (at ?h - hoist ?a - area) ;; the hoist is at the area\n7. (on ?c - crate ?s - store_area) ;; the crate is on the store area\n8. (connected ?a1 ?a2 - area) ;; the area a1 is connected to the area a2\nExample 1\nAction Description: Involves a hoist lifting a crate from one store_area to another area. Preconditions include the areas being connected, the hoist being at the destination area and available, and the crate being on the source store_area. The effects are the crate being lifted and the source store_area becoming clear.\n\nAction name: lift\n\n\nYour answer:\n---\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:**\nLet's imagine you want to move a toy train (representing the hoist) from one side of your playroom (a store area) to another. Before moving it, you need to make sure of a few things:\n\n1. **The train is actually at the starting point:** Just like you need to know where your train is before you can move it, the action schema checks if the hoist is at the starting store area (`at ?h ?from`). This ensures that we are moving the right hoist from the correct location.\n\n2. **The destination is clear:** Imagine if the place you wanted to move your train to was already full of other toys. You wouldn\u2019t be able to put your train there, right? Similarly, the schema requires the destination store area to be clear (`clear ?to`) so that the hoist can move there without any issues.\n\n3. **The starting and destination points are connected:** It\u2019s like making sure there\u2019s a clear path or a track between where your train is and where you want it to go. If there\u2019s no track, you can't move the train. In the action schema, this is checked by the condition (`connected ?from ?to`).\n\nNow, when the train (hoist) moves:\n- **It is no longer at the starting point:** Just like when your train leaves one side of the room, it\u2019s not there anymore. This change is shown in the schema by removing the condition that the hoist is at the starting area (`not (at ?h ?from)`).\n  \n- **It is now at the destination:** When you move your train to the other side of the room, it\u2019s now there. This is represented in the schema by adding the condition that the hoist is now at the destination area (`at ?h ?to`).\n\n- **The destination is no longer clear:** Now that the train is at the new spot, that area isn\u2019t empty anymore. This change is reflected by removing the 'clear' condition for the destination area (`not (clear ?to)`).\n\n- **The starting point becomes clear:** Since the train left the starting area, that spot is now free. This is captured by adding a 'clear' condition for the starting area (`clear ?from`).\n\nThis whole process helps ensure that the hoist can safely and efficiently move from one area to another without confusion or conflicts.\n                \n**Response:**\nParameters:\n1. ?h - hoist: [short description of the parameter]\n2. ?from - transit_area: [short description of the parameter]\n3. ?to - store_area: [short description of the parameter]\n\nPreconditions:\n```\n(and\n    (at ?h ?from)\n    (connected ?from ?to)\n    (clear ?to)\n)\n```\n\nEffects:\n```\n(and\n    (not (at ?h ?from))\n    (at ?h ?to)\n    (not (clear ?to))\n)\n```\n\n---\n", "type": "prompt"}
{"role": "user", "content": "Example 2\nAction Description: This is the reverse of Go-out, where a hoist moves from a transit_area to a store_area. Preconditions include the hoist being at the transit_area, the areas being connected, and the destination store_area being clear. The effect is similar to Go-out but in reverse.\n\nAction name: go-in\n\n\nYour answer:\n---\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:**\n\nImagine you have a small robot hoist that helps move boxes in a big warehouse. The warehouse has different areas, like a spot for loading boxes and another for storing them. The \"go-in\" action is like telling the robot to move from a loading area to a storage area.\n\nNow, why does the robot need certain conditions to be met before it can move? Here's a breakdown:\n\n1. **The robot must be at the loading area** (transit_area): This is pretty straightforward. If the robot isn't at the loading area, it can't start moving towards the storage area because it's simply not there to begin the task.\n\n2. **The loading area and storage area must be connected**: It's like making sure there's a clear path or a road between two places before you start driving. If there's no path, the robot can't move between these areas.\n\n3. **The storage area must be clear**: This ensures that there is space available for the robot to enter and place the boxes. It's similar to needing an empty parking spot to park your car.\n\nNow, what happens after the robot moves based on these conditions?\n\n- **The robot is no longer in the loading area**: Just like when you leave your house, you're not inside anymore. The robot has left the loading area, so we say it's no longer there.\n  \n- **The robot is now in the storage area**: Like arriving at a friend\u2019s house after leaving yours, the robot has moved and is now at the storage destination.\n\n- **The storage area is no longer clear**: Since the robot moves in with a box, the space it occupied is now taken. It's like the parking space being occupied once you park your car.\n\nIn summary, these conditions and results make sure the robot moves safely and efficiently from one place to another, without any surprises like arriving at a blocked or non-existent path, or finding no space to drop off the box. This careful planning helps keep everything in the warehouse running smoothly!\n                \n**Response:**\nParameters:\n1. ?h - hoist: [short description of the parameter]\n2. ?c - crate: [short description of the parameter]\n3. ?a1 - store_area: [short description of the parameter]\n4. ?a2 - area: [short description of the parameter]\n5. ?p - place: [short description of the parameter]\n\nPreconditions:\n```\n(and\n    (connected ?a1 ?a2)\n    (at ?h ?a2)\n    (available ?h)\n    (on ?c ?a1)\n    (store_area_in ?a1 ?p)\n)\n```\n\nEffects:\n```\n(and\n    (not (on ?c ?a1))\n    (clear ?a1)\n    (not (available ?h))\n    (lifting ?h ?c)\n    (not (crate_in ?c ?p))\n)\n```\n\n---\n", "type": "prompt"}
{"role": "user", "content": "Here are two examples from the baking domain for demonstrating the output format.\n        \nDomain information: This describes a cooking or baking process where ingredients such as eggs and flour are used. The process of baking involves putting eggs in the pan followed by the flour, mix the two and then put the pan in the oven and then remove the pan from the oven to get the baked cake. Lastly, the pan is cleaned using a soap. Well, you can also bake a souffle but in at bit different process.\n\nA list of available predicates\n1. (is_egg ?egg - ingredient) ;; the ingredient is an egg\n2. (is_flour ?flour - ingredient) ;; the ingredient is flour\n3. (pan_has_egg ?pan - pan) ;; the pan has an egg\n4. (pan_has_flour ?pan - pan) ;; the pan has flour\n5. (pan_is_clean ?pan - pan) ;; the pan is clean\n6. (pan_in_oven ?pan - pan) ;; the pan is in the oven\n7. (in_pan ?x - ingredient ?pan - pan) ;; the ingredient is in the pan\n8. (in_oven ?pan - pan ?oven - oven) ;; the pan is in the oven\n9. (oven_is_full ?oven - oven) ;; the oven is full\n10. (hypothetical ?new - ingredient) ;; the ingredient is hypothetical\n11. (is_mixed ?pan - pan) ;; the ingredients in the pan are mixed\n12. (is_cake ?new - ingredient) ;; the ingredient is a cake\n13. (is_souffle ?new - ingredient) ;; the ingredient is a souffle\n14. (soap_consumed ?soap - soap) ;; the soap is consumed\nExample 1\nAction Description: This action is about taking a pan out of the oven. It can only be done if the pan is actually in the oven. Once the pan is removed, the oven is no longer considered full.\n\nAction name: remove_pan_from_oven\n\n\nYour answer:\n---\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:** Let's break down this action of removing a pan from the oven in a simple way.\n\nImagine you're baking a cake and you put your pan in the oven. Now, the oven is full because the pan is inside. At some point, you need to take the pan out of the oven when the cake is done. \n\nTo do this action of removing the pan, we need to make sure that the pan is actually in the oven first. This is the \"precondition\" \u2013 it's like a rule saying, \"You can only take the pan out if it's actually in there.\" It wouldn't make sense to try to take out a pan that isn't in the oven, right?\n\nOnce you take the pan out, several things happen, which we call \"effects\":\n1. The oven is no longer full because the pan is out.\n2. The pan is no longer in the oven.\n3. We also need to specifically say that the pan is not in the oven anymore.\n\nSo, the precondition (the rule that the pan must be in the oven) makes sure we can only do this action when it's appropriate. The effects describe what changes after we do the action. In this case, the oven is no longer full, and the pan is no longer in the oven. This helps us keep track of what's happening in our cooking process in a clear and logical way.\n                \n**Response:**\nParameters:\n1. ?flour - ingredient: [short description of the parameter]\n2. ?pan - pan: [short description of the parameter]\n\nPreconditions:\n```\n(and\n    (is_flour ?flour)\n    (not (pan_has_flour ?pan))\n    (not (is_mixed ?pan))\n    (pan_is_clean ?pan)\n    (not (pan_in_oven ?pan))\n)\n```\n\nEffects:\n```\n(and\n    (pan_has_flour ?pan)\n    (in_pan ?flour ?pan)\n)\n```\n\n---\n", "type": "prompt"}
{"role": "user", "content": "Example 2\nAction Description: This action is about adding flour to a pan. It can be done when the pan is clean, not in the oven, doesn't have flour in it already, and the contents of the pan haven't been mixed.\n\nAction name: put_flour_in_pan\n\n\nYour answer:\n---\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:** Imagine you are in the kitchen, ready to bake a cake. You have a clean pan in front of you, and you need to add flour to it. To make sure everything goes smoothly, there are certain conditions that need to be met before you can add the flour. These conditions are called preconditions, and they help ensure that the baking process is done correctly.\n\nLet's break down why these preconditions are necessary and what they lead to:\n\n1. **(is_flour ?flour)**: This means the ingredient you are adding must be flour. You wouldn't want to accidentally add something else like sugar or salt when the recipe calls for flour.\n\n2. **(not (pan_has_flour ?pan))**: This checks that the pan doesn't already have flour in it. If the pan already has flour, adding more might mess up the recipe, so you only add it if the pan is currently without flour.\n\n3. **(not (is_mixed ?pan))**: This ensures that the contents of the pan are not already mixed. If you add flour to a pan with mixed ingredients, it might not blend well, so you want to add the flour before any mixing happens.\n\n4. **(pan_is_clean ?pan)**: This makes sure the pan is clean before you add the flour. A dirty pan could spoil the ingredients or the final dish, so starting with a clean pan is crucial.\n\n5. **(not (pan_in_oven ?pan))**: This condition ensures the pan is not in the oven. You wouldn't want to add flour to a pan that's already baking, as it would interrupt the process and could be unsafe.\n\nWhen all these preconditions are met, the action of adding flour to the pan can proceed. The effects of this action are:\n\n- **(pan_has_flour ?pan)**: After you add the flour, the pan now has flour in it. This is important for the next steps in your recipe.\n- **(in_pan ?flour ?pan)**: This confirms that the flour is inside the pan, ready to be mixed with other ingredients.\n\nIn summary, these preconditions ensure that you're adding the flour at the right time and in the right way, setting you up for successful baking. Just like following a recipe step-by-step helps you bake a perfect cake, these conditions guide the process to avoid mistakes.\n                \n**Response:**\nParameters:\n1. ?pan - pan: [short description of the parameter]\n2. ?oven - oven: [short description of the parameter]\n\nPreconditions:\n```\n(in_oven ?pan ?oven)\n```\n\nEffects:\n```\n(and\n    (not (oven_is_full ?oven))\n    (not (in_oven ?pan ?oven))\n    (not (pan_in_oven ?pan))\n)\n```\n\n---\n", "type": "prompt"}
{"role": "user", "content": "Question: Here is the task.\nA natural language description of the domain\nDomain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape\n\nA list of available predicates\n1. (at-hero ?loc - cells) ;;  Hero's cell location\n2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location\n3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster\n4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap\n5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed\n6. (connected ?from ?to - cells) ;; connects cells\n7. (arm-free) ;; Hero's hand is free\n8. (holding ?s - swords) ;; Hero's holding a sword\n9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed\n\nAction Description: Hero's destroys his sword. So that he is arm-free and can disarm traps in the future if required. \n\nAction name: destroy-sword\n\n\nYour answer:\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:** In the dungeon domain, the hero may find a sword that can be used to fight monsters or destroy traps. However, there might be situations where the hero needs to be \"arm-free\" to perform other actions, such as disarming traps. The action \"destroy-sword\" represents the hero intentionally destroying the sword he is holding so that his hands are free for other tasks.\n\nBefore the hero can destroy the sword, there are certain conditions that must be met. The hero must be holding a sword, which means the predicate `(holding ?s - swords)` must be true. Once the hero destroys the sword, the effects are that the hero is no longer holding a sword (`not (holding ?s)`) and the hero's arm is free (`arm-free`). Additionally, the sword itself is destroyed (`is-destroyed ?s`).\n\n**Response:**\nParameters:\n1. ?s - swords: [The sword that the hero is going to destroy]\n\nPreconditions:\n```\n(holding ?s)\n```\n\nEffects:\n```\n(and\n    (not (holding ?s))\n    (arm-free)\n    (is-destroyed ?s)\n)\n```", "type": "response", "action": "destroy-sword"}
{"role": "system", "content": "# CONTEXT #\nYou are a tool called PDDL Modeling Assistant. You are a technical experts in constructing Planning Domain Definition Language (PDDL) models via the natural language context.\n# OBJECTIVE #\n* Construct parameters, preconditions and effects based on the domain information, action description and the action name.\n* All variables in the preconditions and effects must be listed in the action's parameters. This restriction helps maintain the action's scope and prevents ambiguity in the planning process.\n* Do not use predicates that are not defined in the available predicates list to construct the preconditions and effects.\n* When the natural language description is ambiguous or certain predicate changes are implied, make reasonable assumptions based on common sense to fill up the implicit predicate in the PDDL action.\n# STYLE #\nFollow the writing style of technical experts. The output can be parsed by a machine, so it is important to follow the structured format.\n# TONE #\nBe precise and concise in constructing the PDDL action. The PDDL action should be clear and unambiguous.\n# AUDIENCE #\nYour audience is someone who is trying to learn how to construct PDDL actions from natural language descriptions.\n# RESPONSE #\nThe response should be in the following format:\n---\n**Explanation:** [Your explanation here]\n\n**Response:**\nParameters:\n1. ?x - [type]: [parameter description]\n2. ...\n\nPreconditions:\n```\n(and\n    ([predicate_1] ?x)\n)\n```\n\nEffects:\n```\n(and\n    (not ([predicate_2] ?x))\n    ([predicate_2] ?x)\n    ...\n)\n```\n---\n", "type": "prompt"}
{"role": "user", "content": "One or two examples from other domains for illustrating the input and output formats.\nHere are two examples from the storage domain for demonstrating the output format.\n        \nDomain information: Moving and storing crates of goods by hoists from containers to depots with spatial maps. This domain deals with the movement and storage of crates of goods using hoists. It involves different locations like containers and depots, and requires managing the spatial arrangement of crates and hoists in various areas. The actions primarily focus on the lifting, moving, and placement of crates by hoists, considering the spatial and availability constraints of the areas involved.\n\nA list of available predicates\n1. (clear ?s - store_area) ;; the store area is clear\n2. (crate_in ?c - crate ?p - place) ;; the crate is in the place\n3. (store_area_in ?s - store_area ?p - place) ;; the store area is in the place\n4. (available ?h - hoist) ;; the hoist is available\n5. (lifting ?h - hoist ?c - crate) ;; the hoist is lifting the crate\n6. (at ?h - hoist ?a - area) ;; the hoist is at the area\n7. (on ?c - crate ?s - store_area) ;; the crate is on the store area\n8. (connected ?a1 ?a2 - area) ;; the area a1 is connected to the area a2\nExample 1\nAction Description: This is the reverse of Go-out, where a hoist moves from a transit_area to a store_area. Preconditions include the hoist being at the transit_area, the areas being connected, and the destination store_area being clear. The effect is similar to Go-out but in reverse.\n\nAction name: go-in\n\n\nYour answer:\n---\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:**\n\nImagine you have a small robot hoist that helps move boxes in a big warehouse. The warehouse has different areas, like a spot for loading boxes and another for storing them. The \"go-in\" action is like telling the robot to move from a loading area to a storage area.\n\nNow, why does the robot need certain conditions to be met before it can move? Here's a breakdown:\n\n1. **The robot must be at the loading area** (transit_area): This is pretty straightforward. If the robot isn't at the loading area, it can't start moving towards the storage area because it's simply not there to begin the task.\n\n2. **The loading area and storage area must be connected**: It's like making sure there's a clear path or a road between two places before you start driving. If there's no path, the robot can't move between these areas.\n\n3. **The storage area must be clear**: This ensures that there is space available for the robot to enter and place the boxes. It's similar to needing an empty parking spot to park your car.\n\nNow, what happens after the robot moves based on these conditions?\n\n- **The robot is no longer in the loading area**: Just like when you leave your house, you're not inside anymore. The robot has left the loading area, so we say it's no longer there.\n  \n- **The robot is now in the storage area**: Like arriving at a friend\u2019s house after leaving yours, the robot has moved and is now at the storage destination.\n\n- **The storage area is no longer clear**: Since the robot moves in with a box, the space it occupied is now taken. It's like the parking space being occupied once you park your car.\n\nIn summary, these conditions and results make sure the robot moves safely and efficiently from one place to another, without any surprises like arriving at a blocked or non-existent path, or finding no space to drop off the box. This careful planning helps keep everything in the warehouse running smoothly!\n                \n**Response:**\nParameters:\n1. ?h - hoist: [short description of the parameter]\n2. ?from - transit_area: [short description of the parameter]\n3. ?to - store_area: [short description of the parameter]\n\nPreconditions:\n```\n(and\n    (at ?h ?from)\n    (connected ?from ?to)\n    (clear ?to)\n)\n```\n\nEffects:\n```\n(and\n    (not (at ?h ?from))\n    (at ?h ?to)\n    (not (clear ?to))\n)\n```\n\n---\n", "type": "prompt"}
{"role": "user", "content": "Example 2\nAction Description: Involves a hoist lifting a crate from one store_area to another area. Preconditions include the areas being connected, the hoist being at the destination area and available, and the crate being on the source store_area. The effects are the crate being lifted and the source store_area becoming clear.\n\nAction name: lift\n\n\nYour answer:\n---\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:**\nLet's imagine you want to move a toy train (representing the hoist) from one side of your playroom (a store area) to another. Before moving it, you need to make sure of a few things:\n\n1. **The train is actually at the starting point:** Just like you need to know where your train is before you can move it, the action schema checks if the hoist is at the starting store area (`at ?h ?from`). This ensures that we are moving the right hoist from the correct location.\n\n2. **The destination is clear:** Imagine if the place you wanted to move your train to was already full of other toys. You wouldn\u2019t be able to put your train there, right? Similarly, the schema requires the destination store area to be clear (`clear ?to`) so that the hoist can move there without any issues.\n\n3. **The starting and destination points are connected:** It\u2019s like making sure there\u2019s a clear path or a track between where your train is and where you want it to go. If there\u2019s no track, you can't move the train. In the action schema, this is checked by the condition (`connected ?from ?to`).\n\nNow, when the train (hoist) moves:\n- **It is no longer at the starting point:** Just like when your train leaves one side of the room, it\u2019s not there anymore. This change is shown in the schema by removing the condition that the hoist is at the starting area (`not (at ?h ?from)`).\n  \n- **It is now at the destination:** When you move your train to the other side of the room, it\u2019s now there. This is represented in the schema by adding the condition that the hoist is now at the destination area (`at ?h ?to`).\n\n- **The destination is no longer clear:** Now that the train is at the new spot, that area isn\u2019t empty anymore. This change is reflected by removing the 'clear' condition for the destination area (`not (clear ?to)`).\n\n- **The starting point becomes clear:** Since the train left the starting area, that spot is now free. This is captured by adding a 'clear' condition for the starting area (`clear ?from`).\n\nThis whole process helps ensure that the hoist can safely and efficiently move from one area to another without confusion or conflicts.\n                \n**Response:**\nParameters:\n1. ?h - hoist: [short description of the parameter]\n2. ?c - crate: [short description of the parameter]\n3. ?a1 - store_area: [short description of the parameter]\n4. ?a2 - area: [short description of the parameter]\n5. ?p - place: [short description of the parameter]\n\nPreconditions:\n```\n(and\n    (connected ?a1 ?a2)\n    (at ?h ?a2)\n    (available ?h)\n    (on ?c ?a1)\n    (store_area_in ?a1 ?p)\n)\n```\n\nEffects:\n```\n(and\n    (not (on ?c ?a1))\n    (clear ?a1)\n    (not (available ?h))\n    (lifting ?h ?c)\n    (not (crate_in ?c ?p))\n)\n```\n\n---\n", "type": "prompt"}
{"role": "user", "content": "Here are two examples from the baking domain for demonstrating the output format.\n        \nDomain information: This describes a cooking or baking process where ingredients such as eggs and flour are used. The process of baking involves putting eggs in the pan followed by the flour, mix the two and then put the pan in the oven and then remove the pan from the oven to get the baked cake. Lastly, the pan is cleaned using a soap. Well, you can also bake a souffle but in at bit different process.\n\nA list of available predicates\n1. (is_egg ?egg - ingredient) ;; the ingredient is an egg\n2. (is_flour ?flour - ingredient) ;; the ingredient is flour\n3. (pan_has_egg ?pan - pan) ;; the pan has an egg\n4. (pan_has_flour ?pan - pan) ;; the pan has flour\n5. (pan_is_clean ?pan - pan) ;; the pan is clean\n6. (pan_in_oven ?pan - pan) ;; the pan is in the oven\n7. (in_pan ?x - ingredient ?pan - pan) ;; the ingredient is in the pan\n8. (in_oven ?pan - pan ?oven - oven) ;; the pan is in the oven\n9. (oven_is_full ?oven - oven) ;; the oven is full\n10. (hypothetical ?new - ingredient) ;; the ingredient is hypothetical\n11. (is_mixed ?pan - pan) ;; the ingredients in the pan are mixed\n12. (is_cake ?new - ingredient) ;; the ingredient is a cake\n13. (is_souffle ?new - ingredient) ;; the ingredient is a souffle\n14. (soap_consumed ?soap - soap) ;; the soap is consumed\nExample 1\nAction Description: This action is about adding flour to a pan. It can be done when the pan is clean, not in the oven, doesn't have flour in it already, and the contents of the pan haven't been mixed.\n\nAction name: put_flour_in_pan\n\n\nYour answer:\n---\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:** Imagine you are in the kitchen, ready to bake a cake. You have a clean pan in front of you, and you need to add flour to it. To make sure everything goes smoothly, there are certain conditions that need to be met before you can add the flour. These conditions are called preconditions, and they help ensure that the baking process is done correctly.\n\nLet's break down why these preconditions are necessary and what they lead to:\n\n1. **(is_flour ?flour)**: This means the ingredient you are adding must be flour. You wouldn't want to accidentally add something else like sugar or salt when the recipe calls for flour.\n\n2. **(not (pan_has_flour ?pan))**: This checks that the pan doesn't already have flour in it. If the pan already has flour, adding more might mess up the recipe, so you only add it if the pan is currently without flour.\n\n3. **(not (is_mixed ?pan))**: This ensures that the contents of the pan are not already mixed. If you add flour to a pan with mixed ingredients, it might not blend well, so you want to add the flour before any mixing happens.\n\n4. **(pan_is_clean ?pan)**: This makes sure the pan is clean before you add the flour. A dirty pan could spoil the ingredients or the final dish, so starting with a clean pan is crucial.\n\n5. **(not (pan_in_oven ?pan))**: This condition ensures the pan is not in the oven. You wouldn't want to add flour to a pan that's already baking, as it would interrupt the process and could be unsafe.\n\nWhen all these preconditions are met, the action of adding flour to the pan can proceed. The effects of this action are:\n\n- **(pan_has_flour ?pan)**: After you add the flour, the pan now has flour in it. This is important for the next steps in your recipe.\n- **(in_pan ?flour ?pan)**: This confirms that the flour is inside the pan, ready to be mixed with other ingredients.\n\nIn summary, these preconditions ensure that you're adding the flour at the right time and in the right way, setting you up for successful baking. Just like following a recipe step-by-step helps you bake a perfect cake, these conditions guide the process to avoid mistakes.\n                \n**Response:**\nParameters:\n1. ?flour - ingredient: [short description of the parameter]\n2. ?pan - pan: [short description of the parameter]\n\nPreconditions:\n```\n(and\n    (is_flour ?flour)\n    (not (pan_has_flour ?pan))\n    (not (is_mixed ?pan))\n    (pan_is_clean ?pan)\n    (not (pan_in_oven ?pan))\n)\n```\n\nEffects:\n```\n(and\n    (pan_has_flour ?pan)\n    (in_pan ?flour ?pan)\n)\n```\n\n---\n", "type": "prompt"}
{"role": "user", "content": "Example 2\nAction Description: Cleaning a pan is the process of making a used pan clean again with the help of soap. It's possible only when the pan is not in the oven, and there is soap available to use. After cleaning, the pan is clean, and the soap is considered used up.\n\nAction name: clean_pan\n\n\nYour answer:\n---\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:** Let's break down why the action \"clean_pan\" has the specified preconditions and effects by imagining a simple scenario:\n\nImagine you have just baked a cake. The pan you used is now dirty, and you want to clean it so you can use it again. To do this, you need two things: the pan itself and some soap.\n\nFirst, let's talk about the preconditions, which are the things that need to be true before you can start cleaning the pan:\n\n1. **The soap must not be consumed**: This means you need to have soap that hasn't been used up yet. If your soap is already used up, you can't clean the pan because there wouldn't be anything to clean with.\n2. **The pan must not be in the oven**: If the pan is still in the oven, you can't clean it. You need to take it out first because you can only wash the pan when it's not inside the oven.\n\nNow, let's move on to the effects, which are the things that will be true after you clean the pan:\n\n1. **The pan will be clean**: After you wash the pan with soap, it becomes clean. This means you have successfully removed all the dirt and leftover cake from it.\n2. **The soap will be consumed**: After you use the soap to clean the pan, the soap gets used up. This means that you can't use the same soap again because it's already been consumed in the process of cleaning.\n\nSo, in simple terms, the preconditions ensure that you have soap available and the pan is accessible. The effects show the result of the cleaning process: a clean pan and used-up soap.\n\nBy setting these preconditions and effects, we can make sure that the action of cleaning the pan happens only when it makes sense and results in the correct outcome.\n                \n**Response:**\nParameters:\n1. ?pan - pan: [short description of the parameter]\n2. ?soap - soap: [short description of the parameter]\n\nPreconditions:\n```\n(and\n    (not (soap_consumed ?soap))\n    (not (pan_in_oven ?pan))\n)\n```\n\nEffects:\n```\n(and\n    (pan_is_clean ?pan)\n    (soap_consumed ?soap)\n)\n```\n\n---\n", "type": "prompt"}
{"role": "user", "content": "Question: Here is the task.\nA natural language description of the domain\nDomain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape\n\nA list of available predicates\n1. (at-hero ?loc - cells) ;;  Hero's cell location\n2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location\n3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster\n4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap\n5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed\n6. (connected ?from ?to - cells) ;; connects cells\n7. (arm-free) ;; Hero's hand is free\n8. (holding ?s - swords) ;; Hero's holding a sword\n9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed\n\nAction Description: Hero can move if the - hero is at current location - cells are connected, - there is no trap in current loc, and - destination does not have a trap/monster/has-been-destroyed Effects move the hero, and destroy the original cell. No need to destroy the sword.\n\nAction name: move\n\n\nYour answer:\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:**\n\nIn the dungeon domain, the hero needs to navigate through rooms connected by corridors to find an exit. The action \"move\" allows the hero to go from one room to another under certain conditions. The hero can only move if:\n\n1. The hero is currently at the starting location (`at-hero ?from`).\n2. The starting location and the destination are connected (`connected ?from ?to`).\n3. There is no trap in the current location (`not (has-trap ?from)`), ensuring it's safe to leave.\n4. The destination is not occupied by a monster (`not (has-monster ?to)`), is not a destroyed room (`not (is-destroyed ?to)`), and does not have a trap (`not (has-trap ?to)`), ensuring it's a viable place to move to.\n\nOnce these preconditions are met, the hero can proceed to move. The effects of this action are:\n\n- The hero is no longer at the starting location (`not (at-hero ?from)`).\n- The hero is now at the destination location (`at-hero ?to`).\n- The starting location is destroyed (`is-destroyed ?from`), which could imply that it's no longer part of the navigable dungeon or that it's no longer safe.\n\nNote that the action does not destroy the sword if there is one in the starting location; only the cell is affected.\n\n**Response:**\nParameters:\n1. ?from - cells: [The starting location of the hero]\n2. ?to - cells: [The destination location the hero wants to move to]\n\nPreconditions:\n```\n(and\n    (at-hero ?from)\n    (connected ?from ?to)\n    (not (has-trap ?from))\n    (not (has-monster ?to))\n    (not (is-destroyed ?to))\n    (not (has-trap ?to))\n)\n```\n\nEffects:\n```\n(and\n    (not (at-hero ?from))\n    (at-hero ?to)\n    (is-destroyed ?from)\n)\n```\n\n---", "type": "response", "action": "move"}
