{"role": "system", "content": "# CONTEXT #\nYou are a tool called PDDL Modeling Assistant. You are a technical experts in constructing Planning Domain Definition Language (PDDL) models via the natural language context.\n# OBJECTIVE #\n* Construct parameters, preconditions and effects based on the domain information, action description and the action name.\n* All variables in the preconditions and effects must be listed in the action's parameters. This restriction helps maintain the action's scope and prevents ambiguity in the planning process.\n* Do not use predicates that are not defined in the available predicates list to construct the preconditions and effects.\n* When the natural language description is ambiguous or certain predicate changes are implied, make reasonable assumptions based on common sense to fill up the implicit predicate in the PDDL action.\n# STYLE #\nFollow the writing style of technical experts. The output can be parsed by a machine, so it is important to follow the structured format.\n# TONE #\nBe precise and concise in constructing the PDDL action. The PDDL action should be clear and unambiguous.\n# AUDIENCE #\nYour audience is someone who is trying to learn how to construct PDDL actions from natural language descriptions.\n# RESPONSE #\nThe response should be in the following format:\n---\n**Explanation:** [Your explanation here]\n\n**Response:**\nParameters:\n1. ?x - [type]: [parameter description]\n2. ...\n\nPreconditions:\n```\n(and\n    ([predicate_1] ?x)\n)\n```\n\nEffects:\n```\n(and\n    (not ([predicate_2] ?x))\n    ([predicate_2] ?x)\n    ...\n)\n```\n---\n", "type": "prompt"}
{"role": "user", "content": "One or two examples from other domains for illustrating the input and output formats.\nHere are two examples from the barman domain for demonstrating the output format.\n        \nDomain information: In this domain there is a robot barman that manipulates drink dispensers, glasses and a shaker. The goal is to find a plan of the robots actions that serves a desired set of drinks. In this domain deletes of actions encode relevant knowledge given that robot hands can only grasp one object at a time and given that glasses need to be empty and clean to be filled.\n\nA list of available predicates\n1. (ontable ?c - container) ;; the container is on the table\n2. (holding ?h - hand ?c - container) ;; the hand is holding the container\n3. (handempty ?h - hand) ;; the hand is empty\n4. (empty ?c - container) ;; the container is empty\n5. (contains ?c - container ?b - beverage) ;; the container contains the beverage\n6. (clean ?c - container) ;; the container is clean\n7. (used ?c - container ?b - beverage) ;; the container is used for the beverage\n8. (dispenses ?d - dispenser ?i - ingredient) ;; the dispenser dispenses the ingredient\n9. (shaker-empty-level ?s - shaker ?l - level) ;; the empty level of the shaker\n10. (shaker-level ?s - shaker ?l - level) ;; the shaker currently is at the level\n11. (next ?l1 ?l2 - level) ;; l2 is the next level after l1\n12. (unshaked ?s - shaker) ;; the shaker is unshaked\n13. (shaked ?s - shaker) ;; the shaker is shaked\n14. (cocktail-part1 ?c - cocktail ?i - ingredient) ;; the ingredient is part of the cocktail\n15. (cocktail-part2 ?c - cocktail ?i - ingredient) ;; the ingredient is part of the cocktail\nExample 1\nAction Description: The robot refills a shot glass with the same ingredient it previously contained.\n\nAction name: refill-shot\n\n\nYour answer:\n---\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:**\nLet's imagine a robot bartender named Robbie. Robbie's job is to make sure everyone gets their favorite drink, using shot glasses and different drink dispensers. Now, think about Robbie having to refill a shot glass with a specific ingredient. To do this smoothly, Robbie has to follow certain steps, and that's what the PDDL action schema is showing us.\n\n1. **Preconditions (The must-haves before starting):**\n   - Robbie must already be holding the shot glass with one hand (`holding ?h1 ?s`). This means Robbie's hand (`?h1`) is not empty because it's holding the shot glass (`?s`).\n   - The other hand (`?h2`) needs to be empty (`handempty ?h2`). This is important because Robbie might need to use this hand to operate the dispenser or do something else during the process.\n   - The dispenser that Robbie is going to use must dispense the ingredient Robbie needs (`dispenses ?d ?i`). This ensures that Robbie is at the right dispenser for the drink.\n   - The shot glass must be empty (`empty ?s`) before Robbie can refill it. We can't pour more into a full glass, right?\n   - The shot glass must have been used previously for the same ingredient (`used ?s ?i`). This tells us that it's okay to use the same glass for the same drink without mixing flavors.\n\n2. **Effects (What happens after Robbie follows the steps):**\n   - The shot glass is no longer empty (`not (empty ?s)`). It means Robbie has successfully refilled it.\n   - The shot glass now contains the ingredient it was supposed to be refilled with (`contains ?s ?i`). Now, the glass is ready to be served again with the same tasty drink.\n\nThis action schema helps Robbie remember exactly what needs to be checked and done to successfully refill a shot glass.\n                \n**Response:**\nParameters:\n1. ?s - shot: [short description of the parameter]\n2. ?i - ingredient: [short description of the parameter]\n3. ?h1 - hand: [short description of the parameter]\n4. ?h2 - hand: [short description of the parameter]\n5. ?d - dispenser: [short description of the parameter]\n\nPreconditions:\n```\n(and\n    (holding ?h1 ?s)\n    (handempty ?h2)\n    (dispenses ?d ?i)\n    (empty ?s)\n    (used ?s ?i)\n)\n```\n\nEffects:\n```\n(and\n    (not (empty ?s))\n    (contains ?s ?i)\n)\n```\n\n---\n", "type": "prompt"}
{"role": "user", "content": "Example 2\nAction Description: The robot pours a beverage from a shaker into an empty, clean shot glass.\n\nAction name: pour-shaker-to-shot\n\n\nYour answer:\n---\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:**\nImagine you're teaching a robot how to serve drinks at a party. The robot is designed to perform specific tasks with clear instructions, much like following a recipe step-by-step.\n\n**Scenario:** The robot needs to pour a beverage from a shaker into a shot glass. The action it must perform is called \"pour-shaker-to-shot.\"\n\n**Why the Preconditions are Necessary:**\n1. **Holding the Shaker:** The robot must be holding the shaker to pour from it. If it's not holding it, it can't control the pouring process.\n2. **Shaker is Shaken:** The contents in the shaker need to be mixed well (shaken) before serving. This ensures the drink's quality and consistency.\n3. **The Shot Glass is Empty:** The glass must be empty because pouring into an already full or partially filled glass would cause a spill or mix drinks unintentionally.\n4. **The Shot Glass is Clean:** Hygiene and taste! No one wants a dirty glass, and leftover residues could alter the flavor of the new drink.\n5. **Shaker Contains the Beverage:** The robot needs to confirm that the right beverage is in the shaker to pour the correct drink.\n6. **Shaker Level is Correct:** Knowing the current level helps manage how much is poured, ensuring the robot doesn't try to pour more than what is available.\n7. **Next Level Indicator:** This indicates how much beverage will remain in the shaker after pouring, helping in planning the next steps or refilling.\n\n**How the Preconditions Lead to the Specified Effects:**\n- After the robot pours, the shot glass will no longer be clean and empty because it now contains the beverage.\n- The level of the beverage in the shaker decreases as it has been transferred to the glass.\n- The robot updates the shaker's level to reflect the new quantity, which is crucial for knowing how much is left for the next drink.\n\n**Simple Analogy:**\nThink of it like pouring apple juice for a kid. You need to make sure you have the juice (in a jug), a clean and empty cup to pour into, and you need to be holding the jug. After pouring, the cup will have juice, and there'll be less juice in the jug. Just like you need to check these things, so does the robot!\n\nBy setting up these instructions in the action \"pour-shaker-to-shot,\" we ensure the robot does its job correctly and efficiently, just like you'd carefully prepare a drink for a guest.\n                \n**Response:**\nParameters:\n1. ?b - beverage: [short description of the parameter]\n2. ?d - shot: [short description of the parameter]\n3. ?h - hand: [short description of the parameter]\n4. ?s - shaker: [short description of the parameter]\n5. ?l - level: [short description of the parameter]\n6. ?l1 - level: [short description of the parameter]\n\nPreconditions:\n```\n(and\n    (holding ?h ?s)\n    (shaked ?s)\n    (empty ?d)\n    (clean ?d)\n    (contains ?s ?b)\n    (shaker-level ?s ?l)\n    (next ?l1 ?l)\n)\n```\n\nEffects:\n```\n(and\n    (not (clean ?d))\n    (not (empty ?d))\n    (contains ?d ?b)\n    (shaker-level ?s ?l1)\n    (not (shaker-level ?s ?l))\n)\n```\n\n---\n", "type": "prompt"}
{"role": "user", "content": "Here are two examples from the logistics domain for demonstrating the output format.\n        \nDomain information: In this logistics domain, various objects need to be transported from one location to another. To achieve this, trucks are used for moving objects within a city, while airplanes are used for transporting objects between different cities. The domain includes different types of locations such as regular places and airports, with specific vehicles designed for each type of transport.\n\nA list of available predicates\n1. (at ?obj - object ?loc - location) ;; the object is at the location\n2. (in ?obj1 - object ?obj2 - object) ;; the obj1 is in obj2\n3. (in-city ?loc - location ?city - city) ;; the location is in the city\nExample 1\nAction Description: When you need to transport an object within a city, you can load it onto a truck. This involves placing the object inside the truck at a specific location. The object and the truck must both be at the same location for this action to take place. Once loaded, the object is ready to be moved by the truck.\n\nAction name: load-truck\n\n\nYour answer:\n---\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:**\nImagine you have a toy truck and blocks in a playroom. To move a block with the truck, you first need to make sure both the block and the truck are in the same spot in the room. Only then can you put the block onto the truck.\n\nIn our scenario, the action called \"load-truck\" represents putting an object (like a box) into a truck at a certain place (like a parking lot) within a city. Here's how it works step-by-step:\n\n1. **Preconditions (What needs to be true before the action can happen?):**\n   - The truck and the object must be at the same location. This makes sense, right? You can't load a box into a truck if they're not together.\n\n2. **Effects (What changes after the action is done?):**\n   - The object is no longer just at the location; it is now inside the truck. This is shown by two changes:\n     - We say the object is no longer 'at' the location (that\u2019s why we say `not (at ?obj ?loc)`). It's like saying, \"The box isn't just sitting in the parking lot anymore.\"\n     - We also say the object is 'in' the truck (`in ?obj ?truck`), like saying, \"The box is now securely placed inside the truck.\"\n\nThis action schema fits the natural language description because it captures the process of moving an object into a truck within a city. The preconditions make sure everything is in place for the action to occur, and the effects describe the new situation\u2014 the object is ready to be transported by the truck. It's a simple way of ensuring that everything happens where and how it's supposed to.\n                \n**Response:**\nParameters:\n1. ?airplane - airplane: [short description of the parameter]\n2. ?loc-from - airport: [short description of the parameter]\n3. ?loc-to - airport: [short description of the parameter]\n\nPreconditions:\n```\n(at ?airplane ?loc-from)\n```\n\nEffects:\n```\n(and\n    (not (at ?airplane ?loc-from))\n    (at ?airplane ?loc-to)\n)\n```\n\n---\n", "type": "prompt"}
{"role": "user", "content": "Example 2\nAction Description: Airplanes are used to fly objects between different cities. This action involves moving the airplane from one airport to another. The airplane must start at the departure airport and will end up at the destination airport, ready for unloading or further transportation of the objects inside.\n\nAction name: fly-airplane\n\n\nYour answer:\n---\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:**\n\nIn our logistics domain, we have airplanes that can move objects between different cities by flying from one airport to another. The PDDL action named \"fly-airplane\" describes how this moving process works.\n\n1. **Parameters of the Action:**\n   - The action \"fly-airplane\" involves three main components: an airplane, a departure airport (loc-from), and a destination airport (loc-to). These are specified as parameters which simply means they are the essential parts needed for this action to happen.\n\n2. **Preconditions:**\n   - The precondition for this action is `(at ?airplane ?loc-from)`. This means that for the airplane to fly from one airport to another, it must already be located at the departure airport (`loc-from`). This makes sense because an airplane can't start flying from an airport if it isn't there to begin with.\n\n3. **Effects:**\n   - The effects of this action are described by `(and (not (at ?airplane ?loc-from)) (at ?airplane ?loc-to))`. This part explains what changes occur after the action is completed.\n     - `(not (at ?airplane ?loc-from))` indicates that once the airplane has taken off, it is no longer at the departure airport. It's a way to show that the airplane has left the starting point.\n     - `(at ?airplane ?loc-to)` confirms that after flying, the airplane arrives at the destination airport (`loc-to`). This marks the successful completion of the journey from one city to another.\n\nTo summarize, the action schema for \"fly-airplane\" perfectly matches our natural language description by detailing how an airplane moves from one airport to another. It clearly explains that the airplane starts at one airport and ends at another, with the changes accurately reflected in the conditions and effects within the schema.\n                \n**Response:**\nParameters:\n1. ?obj - object: [short description of the parameter]\n2. ?truck - truck: [short description of the parameter]\n3. ?loc - location: [short description of the parameter]\n\nPreconditions:\n```\n(and\n    (at ?truck ?loc)\n    (at ?obj ?loc)\n)\n```\n\nEffects:\n```\n(and\n    (not (at ?obj ?loc))\n    (in ?obj ?truck)\n)\n```\n\n---\n", "type": "prompt"}
{"role": "user", "content": "Question: Here is the task.\nA natural language description of the domain\nDomain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape\n\nA list of available predicates\n1. (at-hero ?loc - cells) ;;  Hero's cell location\n2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location\n3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster\n4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap\n5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed\n6. (connected ?from ?to - cells) ;; connects cells\n7. (arm-free) ;; Hero's hand is free\n8. (holding ?s - swords) ;; Hero's holding a sword\n9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed\n\nAction Description: Hero can move if the - hero is at current location - cells are connected, - when this action is executed, the hero gets into a location with a monster\n\nAction name: move-to-monster\n\n\nYour answer:\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:**\n\nIn the dungeon domain, the hero needs to navigate through rooms connected by corridors to find an exit. The action \"move-to-monster\" describes the hero moving into a room with a monster. For this action to be executed, certain conditions must be met, and certain effects must occur as a result of the action.\n\n1. **Preconditions:**\n   - The hero must be at a specific location (`?from`) before moving.\n   - The destination cell (`?to`) must be connected to the current location (`?from`) of the hero. This ensures that the hero can physically move from one cell to another.\n   - The destination cell must have a monster (`has-monster ?to`), which is the reason for the move in this particular action.\n\n2. **Effects:**\n   - After the hero moves, the hero's location changes from the starting cell (`?from`) to the destination cell (`?to`). This is represented by updating the hero's location (`at-hero ?to`).\n\nThe action schema for \"move-to-monster\" captures the essence of the hero navigating towards a cell with a monster, which is a deliberate choice in this scenario. The preconditions ensure that the move is valid and the effects describe the outcome of the move.\n\n**Response:**\nParameters:\n1. ?from - cells: [The starting cell location of the hero]\n2. ?to - cells: [The destination cell location with a monster]\n\nPreconditions:\n```\n(and\n    (at-hero ?from)\n    (connected ?from ?to)\n    (has-monster ?to)\n)\n```\n\nEffects:\n```\n(and\n    (not (at-hero ?from))\n    (at-hero ?to)\n)\n```\n\nNote that the effects do not explicitly state that the hero is no longer at the previous location (`not (at-hero ?from)`), as this is implicitly understood when the hero's location is updated to the new cell (`at-hero ?to`). However, including it can make the effects more explicit and clear in some planning systems.", "type": "response", "action": "move-to-monster"}
{"role": "system", "content": "# CONTEXT #\nYou are a tool called PDDL Modeling Assistant. You are a technical experts in constructing Planning Domain Definition Language (PDDL) models via the natural language context.\n# OBJECTIVE #\n* Construct parameters, preconditions and effects based on the domain information, action description and the action name.\n* All variables in the preconditions and effects must be listed in the action's parameters. This restriction helps maintain the action's scope and prevents ambiguity in the planning process.\n* Do not use predicates that are not defined in the available predicates list to construct the preconditions and effects.\n* When the natural language description is ambiguous or certain predicate changes are implied, make reasonable assumptions based on common sense to fill up the implicit predicate in the PDDL action.\n# STYLE #\nFollow the writing style of technical experts. The output can be parsed by a machine, so it is important to follow the structured format.\n# TONE #\nBe precise and concise in constructing the PDDL action. The PDDL action should be clear and unambiguous.\n# AUDIENCE #\nYour audience is someone who is trying to learn how to construct PDDL actions from natural language descriptions.\n# RESPONSE #\nThe response should be in the following format:\n---\n**Explanation:** [Your explanation here]\n\n**Response:**\nParameters:\n1. ?x - [type]: [parameter description]\n2. ...\n\nPreconditions:\n```\n(and\n    ([predicate_1] ?x)\n)\n```\n\nEffects:\n```\n(and\n    (not ([predicate_2] ?x))\n    ([predicate_2] ?x)\n    ...\n)\n```\n---\n", "type": "prompt"}
{"role": "user", "content": "One or two examples from other domains for illustrating the input and output formats.\nHere are two examples from the barman domain for demonstrating the output format.\n        \nDomain information: In this domain there is a robot barman that manipulates drink dispensers, glasses and a shaker. The goal is to find a plan of the robots actions that serves a desired set of drinks. In this domain deletes of actions encode relevant knowledge given that robot hands can only grasp one object at a time and given that glasses need to be empty and clean to be filled.\n\nA list of available predicates\n1. (ontable ?c - container) ;; the container is on the table\n2. (holding ?h - hand ?c - container) ;; the hand is holding the container\n3. (handempty ?h - hand) ;; the hand is empty\n4. (empty ?c - container) ;; the container is empty\n5. (contains ?c - container ?b - beverage) ;; the container contains the beverage\n6. (clean ?c - container) ;; the container is clean\n7. (used ?c - container ?b - beverage) ;; the container is used for the beverage\n8. (dispenses ?d - dispenser ?i - ingredient) ;; the dispenser dispenses the ingredient\n9. (shaker-empty-level ?s - shaker ?l - level) ;; the empty level of the shaker\n10. (shaker-level ?s - shaker ?l - level) ;; the shaker currently is at the level\n11. (next ?l1 ?l2 - level) ;; l2 is the next level after l1\n12. (unshaked ?s - shaker) ;; the shaker is unshaked\n13. (shaked ?s - shaker) ;; the shaker is shaked\n14. (cocktail-part1 ?c - cocktail ?i - ingredient) ;; the ingredient is part of the cocktail\n15. (cocktail-part2 ?c - cocktail ?i - ingredient) ;; the ingredient is part of the cocktail\nExample 1\nAction Description: Similar to the previous action, but the shaker already contains ingredients and isn't clean.\n\nAction name: pour-shot-to-used-shaker\n\n\nYour answer:\n---\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:**\n\nImagine you have a robot bartender who's trying to make a drink using a shaker that already has some ingredients but hasn't been cleaned. To help the robot make the drink correctly, we need to give it a clear set of instructions. These instructions are what we call an action schema in PDDL, a planning language.\n\nLet's break down the action called \"pour-shot-to-used-shaker\":\n\n1. **Preconditions**: These are like the 'rules' or requirements that must be true before the robot can start the action.\n   - `(holding ?h1 ?s)`: The robot must be holding a shot glass (`?s`). Think of it like needing to hold a lemon before you can squeeze it.\n   - `(contains ?s ?i)`: The shot glass should have some ingredient (`?i`) in it. This is like saying the lemon needs to actually have juice.\n   - `(unshaked ?d)`: The shaker (`?d`) hasn't been shaken yet. It's like having a mixing bowl where the ingredients are still not mixed.\n   - `(shaker-level ?d ?l)`: The shaker is at a certain fullness level (`?l`), which tells us how much space is left or how full it is.\n   - `(next ?l ?l1)`: There's a next level (`?l1`) that the shaker will reach after pouring in the shot. It\u2019s similar to knowing that if you add one cup of flour to a half-full bowl, it will be three-quarters full.\n\n2. **Effects**: These are the changes that happen because of the action.\n   - `(not (contains ?s ?i))` and `(empty ?s)`: The shot glass will no longer contain the ingredient, and it will be empty. It\u2019s like pouring out all the lemon juice, leaving the lemon empty.\n   - `(contains ?d ?i)`: The shaker will now contain the ingredient from the shot glass. This is moving the lemon juice into the mixing bowl.\n   - `(not (shaker-level ?d ?l))` and `(shaker-level ?d ?l1)`: The shaker's level changes from the current level to the next. Just like adding the flour to the bowl changes its fullness.\n\nBy following these instructions, the robot knows exactly what needs to be true before starting (preconditions) and what changes to expect after it completes the action (effects). \n                \n**Response:**\nParameters:\n1. ?s - shot: [short description of the parameter]\n2. ?i - ingredient: [short description of the parameter]\n3. ?d - shaker: [short description of the parameter]\n4. ?h1 - hand: [short description of the parameter]\n5. ?l - level: [short description of the parameter]\n6. ?l1 - level: [short description of the parameter]\n\nPreconditions:\n```\n(and\n    (holding ?h1 ?s)\n    (contains ?s ?i)\n    (unshaked ?d)\n    (shaker-level ?d ?l)\n    (next ?l ?l1)\n)\n```\n\nEffects:\n```\n(and\n    (not (contains ?s ?i))\n    (contains ?d ?i)\n    (empty ?s)\n    (not (shaker-level ?d ?l))\n    (shaker-level ?d ?l1)\n)\n```\n\n---\n", "type": "prompt"}
{"role": "user", "content": "Example 2\nAction Description: The robot fills an empty, clean shot glass with an ingredient from a dispenser.\n\nAction name: fill-shot\n\n\nYour answer:\n---\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:** Imagine our robot barman in a kitchen where it needs to prepare a drink using a shot glass. The robot has two hands and can only use one hand to hold an item at a time. Here\u2019s why the robot needs to follow certain steps, called preconditions, before it can fill the shot glass, which is the goal of the \"fill-shot\" action.\n\nFirstly, the robot must be holding the shot glass with one hand, which we call ?h1. This is important because the robot can only fill something it is holding. The precondition `(holding ?h1 ?s)` ensures that the robot has a good grip on the shot glass before proceeding.\n\nSecondly, the other hand, ?h2, must be empty (`handempty ?h2`). This is because if the hand is already holding something else, the robot wouldn\u2019t be able to operate the dispenser properly or manage other tasks like adding more ingredients if needed.\n\nThe next precondition is that the dispenser identified as ?d must be capable of dispensing the ingredient ?i, as noted in `(dispenses ?d ?i)`. This ensures that the robot is at the right dispenser for the ingredient it needs to fill the shot glass with.\n\nAlso, the shot glass itself must be empty (`empty ?s`) and clean (`clean ?s`) before anything is poured into it. This is common sense, right? You wouldn\u2019t want to drink from a dirty or already filled glass! This makes sure the drink is clean and tastes as expected.\n\nAfter all these conditions are met, the robot can go ahead and fill the shot glass. The effects of this action include a few changes:\n- The shot glass is no longer empty (`not (empty ?s)`), meaning it now contains the ingredient.\n- The shot glass now contains the specific ingredient (`contains ?s ?i`), which is just like saying the glass now has, say, gin in it.\n- The glass is no longer clean (`not (clean ?s)`) because it now has something in it.\n- Lastly, the shot glass is marked as used for that particular ingredient (`used ?s ?i`), which helps the robot remember what has been done with that glass.\n                \n**Response:**\nParameters:\n1. ?s - shot: [short description of the parameter]\n2. ?i - ingredient: [short description of the parameter]\n3. ?h1 - hand: [short description of the parameter]\n4. ?h2 - hand: [short description of the parameter]\n5. ?d - dispenser: [short description of the parameter]\n\nPreconditions:\n```\n(and\n    (holding ?h1 ?s)\n    (handempty ?h2)\n    (dispenses ?d ?i)\n    (empty ?s)\n    (clean ?s)\n)\n```\n\nEffects:\n```\n(and\n    (not (empty ?s))\n    (contains ?s ?i)\n    (not (clean ?s))\n    (used ?s ?i)\n)\n```\n\n---\n", "type": "prompt"}
{"role": "user", "content": "Here are two examples from the logistics domain for demonstrating the output format.\n        \nDomain information: In this logistics domain, various objects need to be transported from one location to another. To achieve this, trucks are used for moving objects within a city, while airplanes are used for transporting objects between different cities. The domain includes different types of locations such as regular places and airports, with specific vehicles designed for each type of transport.\n\nA list of available predicates\n1. (at ?obj - object ?loc - location) ;; the object is at the location\n2. (in ?obj1 - object ?obj2 - object) ;; the obj1 is in obj2\n3. (in-city ?loc - location ?city - city) ;; the location is in the city\nExample 1\nAction Description: Similar to unloading a truck, this action involves removing an object from an airplane once it has reached its destination. The object is taken out of the airplane and placed at the airport or specified location. The airplane must be at the same location as the object for this action to happen.\n\nAction name: unload-airplane\n\n\nYour answer:\n---\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:** The action named \"unload-airplane\" described in simple terms, involves taking an object out of an airplane and placing it at a specific location, like an airport. Now, let\u2019s look at how this action matches the natural language description and why the details in the PDDL (Planning Domain Definition Language) make sense.\n\nThe action in PDDL requires some information, called parameters, which are the object, the airplane from which the object is being unloaded, and the location where the airplane is. These details help define what is involved in the action.\n\nNext, we have preconditions. These are the conditions that must be true before the action can happen:\n1. The object must be inside the airplane. This makes sense because you can\u2019t unload something that isn\u2019t already loaded.\n2. The airplane must be at the location where the object needs to be placed (like the airport). This is crucial because if the airplane isn't at the right place, you can't unload the object there.\n\nFinally, the effects describe what happens after the action is taken:\n1. The object is no longer in the airplane (represented by removing \"(in ?obj ?airplane)\"). This indicates that the object has been successfully removed.\n2. The object is now at the specific location (adding \"(at ?obj ?loc)\"). This shows that the object has been placed at the destination, completing the process of unloading.\n\nThis PDDL action schema effectively translates the natural language description into a structured format that a planning system can understand and execute, ensuring that the object is moved from the airplane to the desired location under the right conditions. It\u2019s a bit like giving a computer a recipe that it can follow step-by-step to get a task done.\n                \n**Response:**\nParameters:\n1. ?obj - object: [short description of the parameter]\n2. ?airplane - airplane: [short description of the parameter]\n3. ?loc - location: [short description of the parameter]\n\nPreconditions:\n```\n(and\n    (in ?obj ?airplane)\n    (at ?airplane ?loc)\n)\n```\n\nEffects:\n```\n(and\n    (not (in ?obj ?airplane))\n    (at ?obj ?loc)\n)\n```\n\n---\n", "type": "prompt"}
{"role": "user", "content": "Example 2\nAction Description: Trucks can drive from one location to another within the same city. To move a truck, you specify the starting location, the destination location, and the city. The truck travels from the starting point to the endpoint, making it available for loading or unloading objects at the new location.\n\nAction name: drive-truck\n\n\nYour answer:\n---\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:**\nImagine you have a toy truck that you want to move from one room to another in your house. You would check a few things first, right? You'd make sure the truck is actually in the room you think it's in (starting point), and you'd also check if both rooms are indeed in your house (not at your neighbor's!).\n\nThis is similar to what happens in the PDDL action named \"drive-truck\" in the logistics domain where objects need to be moved around a city. Here\u2019s how it matches up with what you just described in your natural language:\n\n1. **Parameters of the action:** These are like details you need to know before you can act. The parameters here are the truck you're moving (?truck), where it\u2019s starting from (?loc-from), where it's going to (?loc-to), and the city both locations are in (?city). It's like saying, \"I am moving my toy truck from the living room to the bedroom in my house.\"\n\n2. **Preconditions for the action:** These are the checks you make before you start moving the truck. The action needs to know:\n   - The truck is at the starting location (?loc-from). This is like checking if your toy truck is really in the living room.\n   - Both the starting and the destination locations are in the same city as mentioned (?city). This ensures you\u2019re not trying to move the truck to a place outside of where it should go, like trying to move it to a friend's house in another city just by pushing it.\n\n3. **Effects of the action:** This tells what happens after you move the truck. In PDDL:\n   - The truck is no longer at the starting location (not (at ?truck ?loc-from)). It's like saying, \"My truck is no longer in the living room.\"\n   - The truck is now at the new location (?loc-to). This is saying, \"My truck is now in the bedroom.\"\n\nSo, in this action, the truck moves within the same city from one location to another, and the descriptions in the schema ensure that the truck is moving correctly and realistically within its constraints. This helps in planning out how trucks move in this logistics setup, making sure they don\u2019t magically jump from one city to another or disappear from where they're supposed to be!\n\n                \n**Response:**\nParameters:\n1. ?truck - truck: [short description of the parameter]\n2. ?loc-from - location: [short description of the parameter]\n3. ?loc-to - location: [short description of the parameter]\n4. ?city - city: [short description of the parameter]\n\nPreconditions:\n```\n(and\n    (at ?truck ?loc-from)\n    (in-city ?loc-from ?city)\n    (in-city ?loc-to ?city)\n)\n```\n\nEffects:\n```\n(and\n    (not (at ?truck ?loc-from))\n    (at ?truck ?loc-to)\n)\n```\n\n---\n", "type": "prompt"}
{"role": "user", "content": "Question: Here is the task.\nA natural language description of the domain\nDomain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape\n\nA list of available predicates\n1. (at-hero ?loc - cells) ;;  Hero's cell location\n2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location\n3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster\n4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap\n5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed\n6. (connected ?from ?to - cells) ;; connects cells\n7. (arm-free) ;; Hero's hand is free\n8. (holding ?s - swords) ;; Hero's holding a sword\n9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed\n\nAction Description: Hero's disarm the trap with his hand. Make sure the hand is free.\n\nAction name: disarm-trap\n\n\nYour answer:\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:**\nIn the given dungeon domain, the hero needs to navigate through rooms connected by corridors, dealing with monsters, traps, and potentially helpful items like swords. The goal is to reach an exit room to escape. The action \"disarm-trap\" is a critical step where the hero uses their free hand to disable a trap in their current room.\n\nFor this action to occur, certain conditions must be met (preconditions), and certain outcomes must result from the action (effects).\n\nThe preconditions ensure that:\n1. The hero is in a room with a trap (`(has-trap ?loc)`).\n2. The hero's hand is free (`(arm-free)`), meaning they are not currently holding a sword or otherwise occupied.\n\nOnce these conditions are met, the action can take place. The effects of the action are:\n1. The trap in the room is disarmed (`(trap-disarmed ?loc)`), which means the hero can safely pass through the room without triggering the trap.\n\nThis action does not involve moving the hero from one room to another, nor does it involve picking up or using a sword. It is solely focused on the interaction between the hero and the trap in the room they are currently in.\n\n**Response:**\nParameters:\n1. ?loc - cells: [The cell where the hero is located and where the trap is located]\n\nPreconditions:\n```\n(and\n    (at-hero ?loc)\n    (has-trap ?loc)\n    (arm-free)\n)\n```\n\nEffects:\n```\n(and\n    (trap-disarmed ?loc)\n)\n```\n\n---", "type": "response", "action": "disarm-trap"}
{"role": "system", "content": "# CONTEXT #\nYou are a tool called PDDL Modeling Assistant. You are a technical experts in constructing Planning Domain Definition Language (PDDL) models via the natural language context.\n# OBJECTIVE #\n* Construct parameters, preconditions and effects based on the domain information, action description and the action name.\n* All variables in the preconditions and effects must be listed in the action's parameters. This restriction helps maintain the action's scope and prevents ambiguity in the planning process.\n* Do not use predicates that are not defined in the available predicates list to construct the preconditions and effects.\n* When the natural language description is ambiguous or certain predicate changes are implied, make reasonable assumptions based on common sense to fill up the implicit predicate in the PDDL action.\n# STYLE #\nFollow the writing style of technical experts. The output can be parsed by a machine, so it is important to follow the structured format.\n# TONE #\nBe precise and concise in constructing the PDDL action. The PDDL action should be clear and unambiguous.\n# AUDIENCE #\nYour audience is someone who is trying to learn how to construct PDDL actions from natural language descriptions.\n# RESPONSE #\nThe response should be in the following format:\n---\n**Explanation:** [Your explanation here]\n\n**Response:**\nParameters:\n1. ?x - [type]: [parameter description]\n2. ...\n\nPreconditions:\n```\n(and\n    ([predicate_1] ?x)\n)\n```\n\nEffects:\n```\n(and\n    (not ([predicate_2] ?x))\n    ([predicate_2] ?x)\n    ...\n)\n```\n---\n", "type": "prompt"}
{"role": "user", "content": "One or two examples from other domains for illustrating the input and output formats.\nHere are two examples from the barman domain for demonstrating the output format.\n        \nDomain information: In this domain there is a robot barman that manipulates drink dispensers, glasses and a shaker. The goal is to find a plan of the robots actions that serves a desired set of drinks. In this domain deletes of actions encode relevant knowledge given that robot hands can only grasp one object at a time and given that glasses need to be empty and clean to be filled.\n\nA list of available predicates\n1. (ontable ?c - container) ;; the container is on the table\n2. (holding ?h - hand ?c - container) ;; the hand is holding the container\n3. (handempty ?h - hand) ;; the hand is empty\n4. (empty ?c - container) ;; the container is empty\n5. (contains ?c - container ?b - beverage) ;; the container contains the beverage\n6. (clean ?c - container) ;; the container is clean\n7. (used ?c - container ?b - beverage) ;; the container is used for the beverage\n8. (dispenses ?d - dispenser ?i - ingredient) ;; the dispenser dispenses the ingredient\n9. (shaker-empty-level ?s - shaker ?l - level) ;; the empty level of the shaker\n10. (shaker-level ?s - shaker ?l - level) ;; the shaker currently is at the level\n11. (next ?l1 ?l2 - level) ;; l2 is the next level after l1\n12. (unshaked ?s - shaker) ;; the shaker is unshaked\n13. (shaked ?s - shaker) ;; the shaker is shaked\n14. (cocktail-part1 ?c - cocktail ?i - ingredient) ;; the ingredient is part of the cocktail\n15. (cocktail-part2 ?c - cocktail ?i - ingredient) ;; the ingredient is part of the cocktail\nExample 1\nAction Description: The robot empties a shot glass it's holding.\n\nAction name: empty-shot\n\n\nYour answer:\n---\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:**\nImagine a robot barman who has the job of preparing and serving drinks. Now, let\u2019s think about the action of the robot emptying a shot glass it is holding, which is named \"empty-shot\" in our planning scenario.\n\n**Why these preconditions?**\n1. The robot needs to be holding the shot glass. This is pretty straightforward: if the robot isn't holding the glass, it can\u2019t empty it. It\u2019s like you needing to hold a cup in your hand if you want to pour out its contents.\n2. The shot glass must contain a beverage. Again, this makes sense because if the glass is already empty, there's nothing to pour out!\n\n**How do these preconditions lead to the effects?**\n1. The effect that the shot glass no longer contains the beverage (`not (contains ?p ?b)`) directly follows from the action of emptying it. When you pour out a drink, the cup turns from being full to being empty.\n2. The shot glass is then marked as empty (`empty ?p`). This tells everyone (or every robot and system involved) that the glass is now ready to be used again, perhaps to be refilled or cleaned.\n\nSo, by ensuring the robot is holding a shot glass that contains a drink, and by performing the action of emptying it, the robot effectively makes the shot glass available for the next use, fulfilling its role as a bartender robot. It's like making sure a painter has a clean brush to start a new painting, ensuring the right tools are ready for the next task.\n                \n**Response:**\nParameters:\n1. ?s - shot: [short description of the parameter]\n2. ?i - ingredient: [short description of the parameter]\n3. ?h1 - hand: [short description of the parameter]\n4. ?h2 - hand: [short description of the parameter]\n5. ?d - dispenser: [short description of the parameter]\n\nPreconditions:\n```\n(and\n    (holding ?h1 ?s)\n    (handempty ?h2)\n    (dispenses ?d ?i)\n    (empty ?s)\n    (clean ?s)\n)\n```\n\nEffects:\n```\n(and\n    (not (empty ?s))\n    (contains ?s ?i)\n    (not (clean ?s))\n    (used ?s ?i)\n)\n```\n\n---\n", "type": "prompt"}
{"role": "user", "content": "Example 2\nAction Description: The robot fills an empty, clean shot glass with an ingredient from a dispenser.\n\nAction name: fill-shot\n\n\nYour answer:\n---\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:** Imagine our robot barman in a kitchen where it needs to prepare a drink using a shot glass. The robot has two hands and can only use one hand to hold an item at a time. Here\u2019s why the robot needs to follow certain steps, called preconditions, before it can fill the shot glass, which is the goal of the \"fill-shot\" action.\n\nFirstly, the robot must be holding the shot glass with one hand, which we call ?h1. This is important because the robot can only fill something it is holding. The precondition `(holding ?h1 ?s)` ensures that the robot has a good grip on the shot glass before proceeding.\n\nSecondly, the other hand, ?h2, must be empty (`handempty ?h2`). This is because if the hand is already holding something else, the robot wouldn\u2019t be able to operate the dispenser properly or manage other tasks like adding more ingredients if needed.\n\nThe next precondition is that the dispenser identified as ?d must be capable of dispensing the ingredient ?i, as noted in `(dispenses ?d ?i)`. This ensures that the robot is at the right dispenser for the ingredient it needs to fill the shot glass with.\n\nAlso, the shot glass itself must be empty (`empty ?s`) and clean (`clean ?s`) before anything is poured into it. This is common sense, right? You wouldn\u2019t want to drink from a dirty or already filled glass! This makes sure the drink is clean and tastes as expected.\n\nAfter all these conditions are met, the robot can go ahead and fill the shot glass. The effects of this action include a few changes:\n- The shot glass is no longer empty (`not (empty ?s)`), meaning it now contains the ingredient.\n- The shot glass now contains the specific ingredient (`contains ?s ?i`), which is just like saying the glass now has, say, gin in it.\n- The glass is no longer clean (`not (clean ?s)`) because it now has something in it.\n- Lastly, the shot glass is marked as used for that particular ingredient (`used ?s ?i`), which helps the robot remember what has been done with that glass.\n                \n**Response:**\nParameters:\n1. ?h - hand: [short description of the parameter]\n2. ?p - shot: [short description of the parameter]\n3. ?b - beverage: [short description of the parameter]\n\nPreconditions:\n```\n(and\n    (holding ?h ?p)\n    (contains ?p ?b)\n)\n```\n\nEffects:\n```\n(and\n    (not (contains ?p ?b))\n    (empty ?p)\n)\n```\n\n---\n", "type": "prompt"}
{"role": "user", "content": "Here are two examples from the logistics domain for demonstrating the output format.\n        \nDomain information: In this logistics domain, various objects need to be transported from one location to another. To achieve this, trucks are used for moving objects within a city, while airplanes are used for transporting objects between different cities. The domain includes different types of locations such as regular places and airports, with specific vehicles designed for each type of transport.\n\nA list of available predicates\n1. (at ?obj - object ?loc - location) ;; the object is at the location\n2. (in ?obj1 - object ?obj2 - object) ;; the obj1 is in obj2\n3. (in-city ?loc - location ?city - city) ;; the location is in the city\nExample 1\nAction Description: When you need to transport an object within a city, you can load it onto a truck. This involves placing the object inside the truck at a specific location. The object and the truck must both be at the same location for this action to take place. Once loaded, the object is ready to be moved by the truck.\n\nAction name: load-truck\n\n\nYour answer:\n---\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:**\nImagine you have a toy truck and blocks in a playroom. To move a block with the truck, you first need to make sure both the block and the truck are in the same spot in the room. Only then can you put the block onto the truck.\n\nIn our scenario, the action called \"load-truck\" represents putting an object (like a box) into a truck at a certain place (like a parking lot) within a city. Here's how it works step-by-step:\n\n1. **Preconditions (What needs to be true before the action can happen?):**\n   - The truck and the object must be at the same location. This makes sense, right? You can't load a box into a truck if they're not together.\n\n2. **Effects (What changes after the action is done?):**\n   - The object is no longer just at the location; it is now inside the truck. This is shown by two changes:\n     - We say the object is no longer 'at' the location (that\u2019s why we say `not (at ?obj ?loc)`). It's like saying, \"The box isn't just sitting in the parking lot anymore.\"\n     - We also say the object is 'in' the truck (`in ?obj ?truck`), like saying, \"The box is now securely placed inside the truck.\"\n\nThis action schema fits the natural language description because it captures the process of moving an object into a truck within a city. The preconditions make sure everything is in place for the action to occur, and the effects describe the new situation\u2014 the object is ready to be transported by the truck. It's a simple way of ensuring that everything happens where and how it's supposed to.\n                \n**Response:**\nParameters:\n1. ?obj - object: [short description of the parameter]\n2. ?airplane - airplane: [short description of the parameter]\n3. ?loc - location: [short description of the parameter]\n\nPreconditions:\n```\n(and\n    (in ?obj ?airplane)\n    (at ?airplane ?loc)\n)\n```\n\nEffects:\n```\n(and\n    (not (in ?obj ?airplane))\n    (at ?obj ?loc)\n)\n```\n\n---\n", "type": "prompt"}
{"role": "user", "content": "Example 2\nAction Description: Similar to unloading a truck, this action involves removing an object from an airplane once it has reached its destination. The object is taken out of the airplane and placed at the airport or specified location. The airplane must be at the same location as the object for this action to happen.\n\nAction name: unload-airplane\n\n\nYour answer:\n---\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:** The action named \"unload-airplane\" described in simple terms, involves taking an object out of an airplane and placing it at a specific location, like an airport. Now, let\u2019s look at how this action matches the natural language description and why the details in the PDDL (Planning Domain Definition Language) make sense.\n\nThe action in PDDL requires some information, called parameters, which are the object, the airplane from which the object is being unloaded, and the location where the airplane is. These details help define what is involved in the action.\n\nNext, we have preconditions. These are the conditions that must be true before the action can happen:\n1. The object must be inside the airplane. This makes sense because you can\u2019t unload something that isn\u2019t already loaded.\n2. The airplane must be at the location where the object needs to be placed (like the airport). This is crucial because if the airplane isn't at the right place, you can't unload the object there.\n\nFinally, the effects describe what happens after the action is taken:\n1. The object is no longer in the airplane (represented by removing \"(in ?obj ?airplane)\"). This indicates that the object has been successfully removed.\n2. The object is now at the specific location (adding \"(at ?obj ?loc)\"). This shows that the object has been placed at the destination, completing the process of unloading.\n\nThis PDDL action schema effectively translates the natural language description into a structured format that a planning system can understand and execute, ensuring that the object is moved from the airplane to the desired location under the right conditions. It\u2019s a bit like giving a computer a recipe that it can follow step-by-step to get a task done.\n                \n**Response:**\nParameters:\n1. ?obj - object: [short description of the parameter]\n2. ?truck - truck: [short description of the parameter]\n3. ?loc - location: [short description of the parameter]\n\nPreconditions:\n```\n(and\n    (at ?truck ?loc)\n    (at ?obj ?loc)\n)\n```\n\nEffects:\n```\n(and\n    (not (at ?obj ?loc))\n    (in ?obj ?truck)\n)\n```\n\n---\n", "type": "prompt"}
{"role": "user", "content": "Question: Here is the task.\nA natural language description of the domain\nDomain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape\n\nA list of available predicates\n1. (at-hero ?loc - cells) ;;  Hero's cell location\n2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location\n3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster\n4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap\n5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed\n6. (connected ?from ?to - cells) ;; connects cells\n7. (arm-free) ;; Hero's hand is free\n8. (holding ?s - swords) ;; Hero's holding a sword\n9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed\n\nAction Description: Hero's picks a sword if he's in the same location\n\nAction name: pick-sword\n\n\nYour answer:\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:** In the given dungeon domain, the hero needs to navigate through rooms connected by corridors, avoiding monsters and traps, and possibly using swords found in the rooms to aid in their escape. The action \"pick-sword\" represents the hero picking up a sword from a room they are currently in.\n\nFor this action to occur, certain conditions must be met. The hero must be in the same room as the sword, and the hero's hand must be free to pick up the sword. After the action is executed, the hero will be holding the sword, and the sword will no longer be in the room.\n\nHere's how the action translates into PDDL:\n\n- **Parameters:** The action needs to know which sword and which location are involved.\n- **Preconditions:** These are the conditions that must be true before the action can take place:\n  - The hero must be at the location where the sword is (`(at-hero ?loc)`).\n  - The sword must be at the same location (`(at-sword ?s ?loc)`).\n  - The hero's hand must be free to pick up the sword (`(arm-free)`).\n- **Effects:** These are the changes that occur as a result of the action:\n  - The hero is now holding the sword (`(holding ?s)`).\n  - The sword is no longer at the location (`(not (at-sword ?s ?loc))`).\n\nThis action schema ensures that the hero can only pick up a sword if they are in the correct location and if their hand is free, which aligns with the natural language description of the action.\n\n**Response:**\nParameters:\n1. ?s - swords: [The sword that the hero is going to pick up]\n2. ?loc - cells: [The location where the sword is]\n\nPreconditions:\n```\n(and\n    (at-hero ?loc)\n    (at-sword ?s ?loc)\n    (arm-free)\n)\n```\n\nEffects:\n```\n(and\n    (not (at-sword ?s ?loc))\n    (holding ?s)\n)\n```", "type": "response", "action": "pick-sword"}
{"role": "system", "content": "# CONTEXT #\nYou are a tool called PDDL Modeling Assistant. You are a technical experts in constructing Planning Domain Definition Language (PDDL) models via the natural language context.\n# OBJECTIVE #\n* Construct parameters, preconditions and effects based on the domain information, action description and the action name.\n* All variables in the preconditions and effects must be listed in the action's parameters. This restriction helps maintain the action's scope and prevents ambiguity in the planning process.\n* Do not use predicates that are not defined in the available predicates list to construct the preconditions and effects.\n* When the natural language description is ambiguous or certain predicate changes are implied, make reasonable assumptions based on common sense to fill up the implicit predicate in the PDDL action.\n# STYLE #\nFollow the writing style of technical experts. The output can be parsed by a machine, so it is important to follow the structured format.\n# TONE #\nBe precise and concise in constructing the PDDL action. The PDDL action should be clear and unambiguous.\n# AUDIENCE #\nYour audience is someone who is trying to learn how to construct PDDL actions from natural language descriptions.\n# RESPONSE #\nThe response should be in the following format:\n---\n**Explanation:** [Your explanation here]\n\n**Response:**\nParameters:\n1. ?x - [type]: [parameter description]\n2. ...\n\nPreconditions:\n```\n(and\n    ([predicate_1] ?x)\n)\n```\n\nEffects:\n```\n(and\n    (not ([predicate_2] ?x))\n    ([predicate_2] ?x)\n    ...\n)\n```\n---\n", "type": "prompt"}
{"role": "user", "content": "One or two examples from other domains for illustrating the input and output formats.\nHere are two examples from the barman domain for demonstrating the output format.\n        \nDomain information: In this domain there is a robot barman that manipulates drink dispensers, glasses and a shaker. The goal is to find a plan of the robots actions that serves a desired set of drinks. In this domain deletes of actions encode relevant knowledge given that robot hands can only grasp one object at a time and given that glasses need to be empty and clean to be filled.\n\nA list of available predicates\n1. (ontable ?c - container) ;; the container is on the table\n2. (holding ?h - hand ?c - container) ;; the hand is holding the container\n3. (handempty ?h - hand) ;; the hand is empty\n4. (empty ?c - container) ;; the container is empty\n5. (contains ?c - container ?b - beverage) ;; the container contains the beverage\n6. (clean ?c - container) ;; the container is clean\n7. (used ?c - container ?b - beverage) ;; the container is used for the beverage\n8. (dispenses ?d - dispenser ?i - ingredient) ;; the dispenser dispenses the ingredient\n9. (shaker-empty-level ?s - shaker ?l - level) ;; the empty level of the shaker\n10. (shaker-level ?s - shaker ?l - level) ;; the shaker currently is at the level\n11. (next ?l1 ?l2 - level) ;; l2 is the next level after l1\n12. (unshaked ?s - shaker) ;; the shaker is unshaked\n13. (shaked ?s - shaker) ;; the shaker is shaked\n14. (cocktail-part1 ?c - cocktail ?i - ingredient) ;; the ingredient is part of the cocktail\n15. (cocktail-part2 ?c - cocktail ?i - ingredient) ;; the ingredient is part of the cocktail\nExample 1\nAction Description: The robot shakes a shaker containing two ingredients to make a cocktail.\n\nAction name: shake\n\n\nYour answer:\n---\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:**\n\nLet's imagine our robot barman has been given the task of making a cocktail by mixing two ingredients in a shaker. Now, in the world of our robot, we describe this task using something called an \"action schema\" in PDDL, which is just a way to explain step-by-step what needs to happen.\n\nHere's why each part of the action schema for \"shake\" is set up the way it is:\n\n1. **Parameters**: This includes everything the robot needs to know about before starting:\n   - The cocktail it needs to make.\n   - The two ingredients it will use.\n   - The shaker where the mixing happens.\n   - The robot's two hands.\n\n2. **Preconditions**: These are the conditions that must be true before the robot can start shaking the ingredients:\n   - The robot must be holding the shaker in one hand (`holding ?h1 ?s`).\n   - The other hand needs to be free (`handempty ?h2`) so the robot can balance or do other tasks if needed.\n   - The shaker must contain the two specific ingredients (`contains ?s ?d1` and `contains ?s ?d2`).\n   - Each ingredient must be a correct part of the cocktail (`cocktail-part1 ?b ?d1` and `cocktail-part2 ?b ?d2`).\n   - The shaker must be unshaken (`unshaked ?s`), meaning the ingredients haven't been mixed yet.\n\n3. **Effects**: These are what will happen after the robot performs the action:\n   - The shaker will no longer be unshaken; it's now shaken (`not (unshaked ?s)` and `shaked ?s`).\n   - The individual ingredients will no longer be in the shaker by themselves because they've been mixed into a cocktail (`not (contains ?s ?d1)` and `not (contains ?s ?d2)`).\n   - Now, the shaker contains the cocktail (`contains ?s ?b`).\n\nImagine our robot is like a chef following a recipe. The preconditions are like checking that you have all your ingredients and tools ready, and the effects are what you expect to see in your cooking pot after you follow the steps. This action schema helps the robot understand exactly what conditions need to be in place before it starts mixing and what changes to expect after it\u2019s done.\n\nThis way, we make sure the robot can successfully make the cocktail without any hitches, like trying to mix without holding the shaker or mixing the wrong ingredients.\n                \n**Response:**\nParameters:\n1. ?b - cocktail: [short description of the parameter]\n2. ?d1 - ingredient: [short description of the parameter]\n3. ?d2 - ingredient: [short description of the parameter]\n4. ?s - shaker: [short description of the parameter]\n5. ?h1 - hand: [short description of the parameter]\n6. ?h2 - hand: [short description of the parameter]\n\nPreconditions:\n```\n(and\n    (holding ?h1 ?s)\n    (handempty ?h2)\n    (contains ?s ?d1)\n    (contains ?s ?d2)\n    (cocktail-part1 ?b ?d1)\n    (cocktail-part2 ?b ?d2)\n    (unshaked ?s)\n)\n```\n\nEffects:\n```\n(and\n    (not (unshaked ?s))\n    (not (contains ?s ?d1))\n    (not (contains ?s ?d2))\n    (shaked ?s)\n    (contains ?s ?b)\n)\n```\n\n---\n", "type": "prompt"}
{"role": "user", "content": "Example 2\nAction Description: The robot pours a beverage from a shaker into an empty, clean shot glass.\n\nAction name: pour-shaker-to-shot\n\n\nYour answer:\n---\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:**\nImagine you're teaching a robot how to serve drinks at a party. The robot is designed to perform specific tasks with clear instructions, much like following a recipe step-by-step.\n\n**Scenario:** The robot needs to pour a beverage from a shaker into a shot glass. The action it must perform is called \"pour-shaker-to-shot.\"\n\n**Why the Preconditions are Necessary:**\n1. **Holding the Shaker:** The robot must be holding the shaker to pour from it. If it's not holding it, it can't control the pouring process.\n2. **Shaker is Shaken:** The contents in the shaker need to be mixed well (shaken) before serving. This ensures the drink's quality and consistency.\n3. **The Shot Glass is Empty:** The glass must be empty because pouring into an already full or partially filled glass would cause a spill or mix drinks unintentionally.\n4. **The Shot Glass is Clean:** Hygiene and taste! No one wants a dirty glass, and leftover residues could alter the flavor of the new drink.\n5. **Shaker Contains the Beverage:** The robot needs to confirm that the right beverage is in the shaker to pour the correct drink.\n6. **Shaker Level is Correct:** Knowing the current level helps manage how much is poured, ensuring the robot doesn't try to pour more than what is available.\n7. **Next Level Indicator:** This indicates how much beverage will remain in the shaker after pouring, helping in planning the next steps or refilling.\n\n**How the Preconditions Lead to the Specified Effects:**\n- After the robot pours, the shot glass will no longer be clean and empty because it now contains the beverage.\n- The level of the beverage in the shaker decreases as it has been transferred to the glass.\n- The robot updates the shaker's level to reflect the new quantity, which is crucial for knowing how much is left for the next drink.\n\n**Simple Analogy:**\nThink of it like pouring apple juice for a kid. You need to make sure you have the juice (in a jug), a clean and empty cup to pour into, and you need to be holding the jug. After pouring, the cup will have juice, and there'll be less juice in the jug. Just like you need to check these things, so does the robot!\n\nBy setting up these instructions in the action \"pour-shaker-to-shot,\" we ensure the robot does its job correctly and efficiently, just like you'd carefully prepare a drink for a guest.\n                \n**Response:**\nParameters:\n1. ?b - beverage: [short description of the parameter]\n2. ?d - shot: [short description of the parameter]\n3. ?h - hand: [short description of the parameter]\n4. ?s - shaker: [short description of the parameter]\n5. ?l - level: [short description of the parameter]\n6. ?l1 - level: [short description of the parameter]\n\nPreconditions:\n```\n(and\n    (holding ?h ?s)\n    (shaked ?s)\n    (empty ?d)\n    (clean ?d)\n    (contains ?s ?b)\n    (shaker-level ?s ?l)\n    (next ?l1 ?l)\n)\n```\n\nEffects:\n```\n(and\n    (not (clean ?d))\n    (not (empty ?d))\n    (contains ?d ?b)\n    (shaker-level ?s ?l1)\n    (not (shaker-level ?s ?l))\n)\n```\n\n---\n", "type": "prompt"}
{"role": "user", "content": "Here are two examples from the logistics domain for demonstrating the output format.\n        \nDomain information: In this logistics domain, various objects need to be transported from one location to another. To achieve this, trucks are used for moving objects within a city, while airplanes are used for transporting objects between different cities. The domain includes different types of locations such as regular places and airports, with specific vehicles designed for each type of transport.\n\nA list of available predicates\n1. (at ?obj - object ?loc - location) ;; the object is at the location\n2. (in ?obj1 - object ?obj2 - object) ;; the obj1 is in obj2\n3. (in-city ?loc - location ?city - city) ;; the location is in the city\nExample 1\nAction Description: For long-distance transportation, objects are loaded onto airplanes. This requires that the object and the airplane are at the same location, typically an airport. Once the object is loaded into the airplane, it can be flown to another city. This action removes the object from its current location and places it inside the airplane.\n\nAction name: load-airplane\n\n\nYour answer:\n---\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:**\nImagine you have a toy airplane and several small toy objects that need to be moved from one part of your playroom to another. First, you need to make sure that both your airplane and the object are at the same starting point. This is like making sure both your toys are on the same part of the carpet before you start playing.\n\nIn the scenario described for the \"load-airplane\" action, it works similarly. First, there's a need to check (or ensure) that the object and the airplane are at the same location, which is usually an airport. This is like checking both toys are on the same part of the carpet. This check is what we call a \"precondition\" because it must be true before you can proceed with the action.\n\nIn the action schema for \"load-airplane,\" the preconditions state that both the object (`?obj`) and the airplane (`?airplane`) need to be at the same location (`?loc`). This makes sense because you can't load an object into an airplane if they're not in the same place, right?\n\nOnce the object is confirmed to be in the same location as the airplane, the next step in our play scenario would be to put the toy object into the toy airplane. Translating this into our action schema, once the preconditions are met, the object can be loaded into the airplane. This change is what we call the \"effect\" of the action. The schema says that the object is no longer just \"at\" the location (`(not (at ?obj ?loc))`), it's now \"in\" the airplane (`(in ?obj ?airplane)`). This means the object has successfully been placed inside the airplane, ready to be flown to another city.\n\nSo, simply put, the action \"load-airplane\" in the PDDL (a way of writing down the steps and rules for actions in computer language) matches perfectly with the need to get an object and an airplane together at the same place before moving the object into the airplane for its journey. This helps ensure that everything happens where and how it should, just like making sure all your toys are set up right for a fun playtime!\n                \n**Response:**\nParameters:\n1. ?obj - object: [short description of the parameter]\n2. ?truck - truck: [short description of the parameter]\n3. ?loc - location: [short description of the parameter]\n\nPreconditions:\n```\n(and\n    (at ?truck ?loc)\n    (in ?obj ?truck)\n)\n```\n\nEffects:\n```\n(and\n    (not (in ?obj ?truck))\n    (at ?obj ?loc)\n)\n```\n\n---\n", "type": "prompt"}
{"role": "user", "content": "Example 2\nAction Description: After a truck has transported an object to its destination within the city, the object needs to be unloaded. This action takes the object out of the truck and places it at the new location. The truck and the object must both be at the same location for the unloading to occur.\n\nAction name: unload-truck\n\n\nYour answer:\n---\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:**\nLet's talk about how the action \"unload-truck\" matches the description you gave and why it's designed the way it is in PDDL, which is a way to plan out tasks for programs to understand.\n\nIn your description, you mentioned that trucks in a city can transport objects to different places within the same city. Once a truck reaches its destination, the objects it was carrying need to be unloaded. This means taking the object out of the truck and putting it at the location where the truck has stopped.\n\nThe PDDL action schema for \"unload-truck\" does just this:\n\n1. **Parameters**: It starts by specifying what it needs to know:\n   - ?obj - the object that needs to be unloaded.\n   - ?truck - the truck that is carrying the object.\n   - ?loc - the location where the object needs to be placed.\n\n2. **Preconditions**: These are the conditions that must be true before the truck can unload the object. There are two conditions:\n   - The truck (?truck) must be at the destination (?loc) \u2013 this makes sense because you can't unload something if you're not at the right place.\n   - The object (?obj) must be in the truck (?truck) \u2013 obviously, the truck needs to be carrying the object to unload it.\n\n3. **Effects**: These are the things that will be true after the action is completed. Again, two things happen:\n   - The object (?obj) is no longer in the truck (?truck). This is shown as (not (in ?obj ?truck)), which means the object is no longer being carried by the truck.\n   - The object (?obj) is now at the location (?loc). This means the object has been moved from the truck to the location.\n\nThis action schema is designed exactly to match the real-world action of a truck unloading an object at a specific location. The preconditions make sure everything is in place for the action to happen, and the effects are what change in the world as a result of the action.\n\nBy ensuring that the conditions and effects logically flow from the task of unloading, this PDDL schema effectively translates a real-world activity into a format that planning software can understand and execute.\n                \n**Response:**\nParameters:\n1. ?obj - object: [short description of the parameter]\n2. ?airplane - airplane: [short description of the parameter]\n3. ?loc - location: [short description of the parameter]\n\nPreconditions:\n```\n(and\n    (at ?obj ?loc)\n    (at ?airplane ?loc)\n)\n```\n\nEffects:\n```\n(and\n    (not (at ?obj ?loc))\n    (in ?obj ?airplane)\n)\n```\n\n---\n", "type": "prompt"}
{"role": "user", "content": "Question: Here is the task.\nA natural language description of the domain\nDomain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape\n\nA list of available predicates\n1. (at-hero ?loc - cells) ;;  Hero's cell location\n2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location\n3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster\n4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap\n5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed\n6. (connected ?from ?to - cells) ;; connects cells\n7. (arm-free) ;; Hero's hand is free\n8. (holding ?s - swords) ;; Hero's holding a sword\n9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed\n\nAction Description: Hero can move if the - hero is at current location - cells are connected, - when this action is executed, the hero gets into a location with a trap\n\nAction name: move-to-trap\n\n\nYour answer:\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:**\nIn the given dungeon domain, the hero needs to navigate through rooms connected by corridors to find an exit. The action \"move-to-trap\" describes a scenario where the hero moves into a room with a trap. For this action to be executed, certain conditions must be met, and certain changes in the world state should occur as a result of the action.\n\nThe action schema for \"move-to-trap\" should ensure that:\n\n1. The hero is currently at a specific location (`?from`).\n2. The hero moves to another location (`?to`) that is directly connected to the current location.\n3. The destination location (`?to`) has a trap.\n\nAfter the hero moves to the new location with a trap, the world state should reflect this change. The hero's location will update to the new cell, and since the hero has moved into a room with a trap, the predicate `(at-hero ?to)` should become true.\n\nHere's the breakdown of the action schema components:\n\n- **Parameters**: Define the locations involved in the action (`?from` and `?to`).\n- **Preconditions**: These are the conditions that must be true before the action can take place. The hero must be at the starting location (`?from`), the two locations must be connected, and the destination must have a trap.\n- **Effects**: These are the changes that occur in the world state after the action. The hero's location changes from the starting location to the destination location with a trap.\n\n**Response:**\nParameters:\n1. ?from - cells: [The cell location where the hero is currently at]\n2. ?to - cells: [The cell location where the hero will move to]\n\nPreconditions:\n```\n(and\n    (at-hero ?from)\n    (connected ?from ?to)\n    (has-trap ?to)\n)\n```\n\nEffects:\n```\n(and\n    (not (at-hero ?from))\n    (at-hero ?to)\n)\n```\n\nNote that the action does not specify what happens to the trap after the hero moves into the room with the trap. Additional actions would be needed to describe disarming the trap or dealing with it in some other way.", "type": "response", "action": "move-to-trap"}
{"role": "system", "content": "# CONTEXT #\nYou are a tool called PDDL Modeling Assistant. You are a technical experts in constructing Planning Domain Definition Language (PDDL) models via the natural language context.\n# OBJECTIVE #\n* Construct parameters, preconditions and effects based on the domain information, action description and the action name.\n* All variables in the preconditions and effects must be listed in the action's parameters. This restriction helps maintain the action's scope and prevents ambiguity in the planning process.\n* Do not use predicates that are not defined in the available predicates list to construct the preconditions and effects.\n* When the natural language description is ambiguous or certain predicate changes are implied, make reasonable assumptions based on common sense to fill up the implicit predicate in the PDDL action.\n# STYLE #\nFollow the writing style of technical experts. The output can be parsed by a machine, so it is important to follow the structured format.\n# TONE #\nBe precise and concise in constructing the PDDL action. The PDDL action should be clear and unambiguous.\n# AUDIENCE #\nYour audience is someone who is trying to learn how to construct PDDL actions from natural language descriptions.\n# RESPONSE #\nThe response should be in the following format:\n---\n**Explanation:** [Your explanation here]\n\n**Response:**\nParameters:\n1. ?x - [type]: [parameter description]\n2. ...\n\nPreconditions:\n```\n(and\n    ([predicate_1] ?x)\n)\n```\n\nEffects:\n```\n(and\n    (not ([predicate_2] ?x))\n    ([predicate_2] ?x)\n    ...\n)\n```\n---\n", "type": "prompt"}
{"role": "user", "content": "One or two examples from other domains for illustrating the input and output formats.\nHere are two examples from the barman domain for demonstrating the output format.\n        \nDomain information: In this domain there is a robot barman that manipulates drink dispensers, glasses and a shaker. The goal is to find a plan of the robots actions that serves a desired set of drinks. In this domain deletes of actions encode relevant knowledge given that robot hands can only grasp one object at a time and given that glasses need to be empty and clean to be filled.\n\nA list of available predicates\n1. (ontable ?c - container) ;; the container is on the table\n2. (holding ?h - hand ?c - container) ;; the hand is holding the container\n3. (handempty ?h - hand) ;; the hand is empty\n4. (empty ?c - container) ;; the container is empty\n5. (contains ?c - container ?b - beverage) ;; the container contains the beverage\n6. (clean ?c - container) ;; the container is clean\n7. (used ?c - container ?b - beverage) ;; the container is used for the beverage\n8. (dispenses ?d - dispenser ?i - ingredient) ;; the dispenser dispenses the ingredient\n9. (shaker-empty-level ?s - shaker ?l - level) ;; the empty level of the shaker\n10. (shaker-level ?s - shaker ?l - level) ;; the shaker currently is at the level\n11. (next ?l1 ?l2 - level) ;; l2 is the next level after l1\n12. (unshaked ?s - shaker) ;; the shaker is unshaked\n13. (shaked ?s - shaker) ;; the shaker is shaked\n14. (cocktail-part1 ?c - cocktail ?i - ingredient) ;; the ingredient is part of the cocktail\n15. (cocktail-part2 ?c - cocktail ?i - ingredient) ;; the ingredient is part of the cocktail\nExample 1\nAction Description: The robot places a container it's holding back onto the table.\n\nAction name: leave\n\n\nYour answer:\n---\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:**\n\nImagine you're teaching a robot barman to place a glass back on the table. The robot needs clear steps to follow, just like a recipe in cooking. In this scenario, the robot's task, or \"action,\" is named \"leave.\" Here's why the specific steps (preconditions and effects) in the action make sense:\n\n1. **Precondition (holding ?h ?c):** Before the robot can place the container on the table, it must be holding it. This is just like needing to pick up a plate before you can move it to another part of the kitchen. In the robot's instructions, this is expressed as \"(holding ?h ?c),\" meaning the robot's hand (?h) is currently holding the container (?c). This step ensures the robot knows it has the container and is ready to put it down.\n\n2. **Effects of the Action:**\n   - **(not (holding ?h ?c)):** This tells the robot to stop holding the container. It's like saying, \"Okay, you can let go of the plate now.\"\n   - **(handempty ?h):** Once the robot lets go of the container, its hand is empty. This is similar to you dropping something off and having your hand free again.\n   - **(ontable ?c):** Finally, the container ends up back on the table. This part of the instruction confirms that the container should now be on the table, just like setting a cup down on a counter.\n\nThis action schema is crafted so that the robot successfully completes the task of putting the container down in a way that makes sense step-by-step. The preconditions make sure the robot is ready to perform the action (holding the container), and the effects detail exactly what happens after the action (container on table, hand empty). It's a simple, clear set of instructions for the robot to follow, ensuring it does exactly what we want without any confusion.\n                \n**Response:**\nParameters:\n1. ?b - beverage: [short description of the parameter]\n2. ?d - shot: [short description of the parameter]\n3. ?h - hand: [short description of the parameter]\n4. ?s - shaker: [short description of the parameter]\n5. ?l - level: [short description of the parameter]\n6. ?l1 - level: [short description of the parameter]\n\nPreconditions:\n```\n(and\n    (holding ?h ?s)\n    (shaked ?s)\n    (empty ?d)\n    (clean ?d)\n    (contains ?s ?b)\n    (shaker-level ?s ?l)\n    (next ?l1 ?l)\n)\n```\n\nEffects:\n```\n(and\n    (not (clean ?d))\n    (not (empty ?d))\n    (contains ?d ?b)\n    (shaker-level ?s ?l1)\n    (not (shaker-level ?s ?l))\n)\n```\n\n---\n", "type": "prompt"}
{"role": "user", "content": "Example 2\nAction Description: The robot pours a beverage from a shaker into an empty, clean shot glass.\n\nAction name: pour-shaker-to-shot\n\n\nYour answer:\n---\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:**\nImagine you're teaching a robot how to serve drinks at a party. The robot is designed to perform specific tasks with clear instructions, much like following a recipe step-by-step.\n\n**Scenario:** The robot needs to pour a beverage from a shaker into a shot glass. The action it must perform is called \"pour-shaker-to-shot.\"\n\n**Why the Preconditions are Necessary:**\n1. **Holding the Shaker:** The robot must be holding the shaker to pour from it. If it's not holding it, it can't control the pouring process.\n2. **Shaker is Shaken:** The contents in the shaker need to be mixed well (shaken) before serving. This ensures the drink's quality and consistency.\n3. **The Shot Glass is Empty:** The glass must be empty because pouring into an already full or partially filled glass would cause a spill or mix drinks unintentionally.\n4. **The Shot Glass is Clean:** Hygiene and taste! No one wants a dirty glass, and leftover residues could alter the flavor of the new drink.\n5. **Shaker Contains the Beverage:** The robot needs to confirm that the right beverage is in the shaker to pour the correct drink.\n6. **Shaker Level is Correct:** Knowing the current level helps manage how much is poured, ensuring the robot doesn't try to pour more than what is available.\n7. **Next Level Indicator:** This indicates how much beverage will remain in the shaker after pouring, helping in planning the next steps or refilling.\n\n**How the Preconditions Lead to the Specified Effects:**\n- After the robot pours, the shot glass will no longer be clean and empty because it now contains the beverage.\n- The level of the beverage in the shaker decreases as it has been transferred to the glass.\n- The robot updates the shaker's level to reflect the new quantity, which is crucial for knowing how much is left for the next drink.\n\n**Simple Analogy:**\nThink of it like pouring apple juice for a kid. You need to make sure you have the juice (in a jug), a clean and empty cup to pour into, and you need to be holding the jug. After pouring, the cup will have juice, and there'll be less juice in the jug. Just like you need to check these things, so does the robot!\n\nBy setting up these instructions in the action \"pour-shaker-to-shot,\" we ensure the robot does its job correctly and efficiently, just like you'd carefully prepare a drink for a guest.\n                \n**Response:**\nParameters:\n1. ?h - hand: [short description of the parameter]\n2. ?c - container: [short description of the parameter]\n\nPreconditions:\n```\n(holding ?h ?c)\n```\n\nEffects:\n```\n(and\n    (not (holding ?h ?c))\n    (handempty ?h)\n    (ontable ?c)\n)\n```\n\n---\n", "type": "prompt"}
{"role": "user", "content": "Here are two examples from the logistics domain for demonstrating the output format.\n        \nDomain information: In this logistics domain, various objects need to be transported from one location to another. To achieve this, trucks are used for moving objects within a city, while airplanes are used for transporting objects between different cities. The domain includes different types of locations such as regular places and airports, with specific vehicles designed for each type of transport.\n\nA list of available predicates\n1. (at ?obj - object ?loc - location) ;; the object is at the location\n2. (in ?obj1 - object ?obj2 - object) ;; the obj1 is in obj2\n3. (in-city ?loc - location ?city - city) ;; the location is in the city\nExample 1\nAction Description: Trucks can drive from one location to another within the same city. To move a truck, you specify the starting location, the destination location, and the city. The truck travels from the starting point to the endpoint, making it available for loading or unloading objects at the new location.\n\nAction name: drive-truck\n\n\nYour answer:\n---\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:**\nImagine you have a toy truck that you want to move from one room to another in your house. You would check a few things first, right? You'd make sure the truck is actually in the room you think it's in (starting point), and you'd also check if both rooms are indeed in your house (not at your neighbor's!).\n\nThis is similar to what happens in the PDDL action named \"drive-truck\" in the logistics domain where objects need to be moved around a city. Here\u2019s how it matches up with what you just described in your natural language:\n\n1. **Parameters of the action:** These are like details you need to know before you can act. The parameters here are the truck you're moving (?truck), where it\u2019s starting from (?loc-from), where it's going to (?loc-to), and the city both locations are in (?city). It's like saying, \"I am moving my toy truck from the living room to the bedroom in my house.\"\n\n2. **Preconditions for the action:** These are the checks you make before you start moving the truck. The action needs to know:\n   - The truck is at the starting location (?loc-from). This is like checking if your toy truck is really in the living room.\n   - Both the starting and the destination locations are in the same city as mentioned (?city). This ensures you\u2019re not trying to move the truck to a place outside of where it should go, like trying to move it to a friend's house in another city just by pushing it.\n\n3. **Effects of the action:** This tells what happens after you move the truck. In PDDL:\n   - The truck is no longer at the starting location (not (at ?truck ?loc-from)). It's like saying, \"My truck is no longer in the living room.\"\n   - The truck is now at the new location (?loc-to). This is saying, \"My truck is now in the bedroom.\"\n\nSo, in this action, the truck moves within the same city from one location to another, and the descriptions in the schema ensure that the truck is moving correctly and realistically within its constraints. This helps in planning out how trucks move in this logistics setup, making sure they don\u2019t magically jump from one city to another or disappear from where they're supposed to be!\n\n                \n**Response:**\nParameters:\n1. ?obj - object: [short description of the parameter]\n2. ?airplane - airplane: [short description of the parameter]\n3. ?loc - location: [short description of the parameter]\n\nPreconditions:\n```\n(and\n    (in ?obj ?airplane)\n    (at ?airplane ?loc)\n)\n```\n\nEffects:\n```\n(and\n    (not (in ?obj ?airplane))\n    (at ?obj ?loc)\n)\n```\n\n---\n", "type": "prompt"}
{"role": "user", "content": "Example 2\nAction Description: Similar to unloading a truck, this action involves removing an object from an airplane once it has reached its destination. The object is taken out of the airplane and placed at the airport or specified location. The airplane must be at the same location as the object for this action to happen.\n\nAction name: unload-airplane\n\n\nYour answer:\n---\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:** The action named \"unload-airplane\" described in simple terms, involves taking an object out of an airplane and placing it at a specific location, like an airport. Now, let\u2019s look at how this action matches the natural language description and why the details in the PDDL (Planning Domain Definition Language) make sense.\n\nThe action in PDDL requires some information, called parameters, which are the object, the airplane from which the object is being unloaded, and the location where the airplane is. These details help define what is involved in the action.\n\nNext, we have preconditions. These are the conditions that must be true before the action can happen:\n1. The object must be inside the airplane. This makes sense because you can\u2019t unload something that isn\u2019t already loaded.\n2. The airplane must be at the location where the object needs to be placed (like the airport). This is crucial because if the airplane isn't at the right place, you can't unload the object there.\n\nFinally, the effects describe what happens after the action is taken:\n1. The object is no longer in the airplane (represented by removing \"(in ?obj ?airplane)\"). This indicates that the object has been successfully removed.\n2. The object is now at the specific location (adding \"(at ?obj ?loc)\"). This shows that the object has been placed at the destination, completing the process of unloading.\n\nThis PDDL action schema effectively translates the natural language description into a structured format that a planning system can understand and execute, ensuring that the object is moved from the airplane to the desired location under the right conditions. It\u2019s a bit like giving a computer a recipe that it can follow step-by-step to get a task done.\n                \n**Response:**\nParameters:\n1. ?truck - truck: [short description of the parameter]\n2. ?loc-from - location: [short description of the parameter]\n3. ?loc-to - location: [short description of the parameter]\n4. ?city - city: [short description of the parameter]\n\nPreconditions:\n```\n(and\n    (at ?truck ?loc-from)\n    (in-city ?loc-from ?city)\n    (in-city ?loc-to ?city)\n)\n```\n\nEffects:\n```\n(and\n    (not (at ?truck ?loc-from))\n    (at ?truck ?loc-to)\n)\n```\n\n---\n", "type": "prompt"}
{"role": "user", "content": "Question: Here is the task.\nA natural language description of the domain\nDomain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape\n\nA list of available predicates\n1. (at-hero ?loc - cells) ;;  Hero's cell location\n2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location\n3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster\n4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap\n5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed\n6. (connected ?from ?to - cells) ;; connects cells\n7. (arm-free) ;; Hero's hand is free\n8. (holding ?s - swords) ;; Hero's holding a sword\n9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed\n\nAction Description: Hero's destroys his sword. So that he is arm-free and can disarm traps in the future if required. \n\nAction name: destroy-sword\n\n\nYour answer:\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:**\nIn the dungeon domain, the hero needs to be resourceful to escape. One of the actions the hero might take is to destroy a sword, which could be necessary for various reasons, such as freeing up their hands to disarm traps or because the sword is damaged and no longer useful.\n\nThe action \"destroy-sword\" implies that the hero has a sword and decides to destroy it. For this action to be logically consistent within the domain, we need to ensure that the hero is indeed holding a sword before they can destroy it. After the action is executed, the hero should no longer be holding the sword, and their arm should be free for other tasks.\n\nThe preconditions for this action are straightforward: the hero must be holding a sword. The effects of the action are that the hero is no longer holding the sword, the sword itself is destroyed, and the hero's arm is free. This action does not require a location parameter because the destruction of the sword is not dependent on the hero's location within the dungeon.\n\n**Response:**\nParameters:\n1. ?s - swords: [Identifies the sword that the hero is going to destroy]\n\nPreconditions:\n```\n(and\n    (holding ?s)\n)\n```\n\nEffects:\n```\n(and\n    (not (holding ?s))\n    (is-destroyed ?s)\n    (arm-free)\n)\n```\n\n---", "type": "response", "action": "destroy-sword"}
{"role": "system", "content": "# CONTEXT #\nYou are a tool called PDDL Modeling Assistant. You are a technical experts in constructing Planning Domain Definition Language (PDDL) models via the natural language context.\n# OBJECTIVE #\n* Construct parameters, preconditions and effects based on the domain information, action description and the action name.\n* All variables in the preconditions and effects must be listed in the action's parameters. This restriction helps maintain the action's scope and prevents ambiguity in the planning process.\n* Do not use predicates that are not defined in the available predicates list to construct the preconditions and effects.\n* When the natural language description is ambiguous or certain predicate changes are implied, make reasonable assumptions based on common sense to fill up the implicit predicate in the PDDL action.\n# STYLE #\nFollow the writing style of technical experts. The output can be parsed by a machine, so it is important to follow the structured format.\n# TONE #\nBe precise and concise in constructing the PDDL action. The PDDL action should be clear and unambiguous.\n# AUDIENCE #\nYour audience is someone who is trying to learn how to construct PDDL actions from natural language descriptions.\n# RESPONSE #\nThe response should be in the following format:\n---\n**Explanation:** [Your explanation here]\n\n**Response:**\nParameters:\n1. ?x - [type]: [parameter description]\n2. ...\n\nPreconditions:\n```\n(and\n    ([predicate_1] ?x)\n)\n```\n\nEffects:\n```\n(and\n    (not ([predicate_2] ?x))\n    ([predicate_2] ?x)\n    ...\n)\n```\n---\n", "type": "prompt"}
{"role": "user", "content": "One or two examples from other domains for illustrating the input and output formats.\nHere are two examples from the barman domain for demonstrating the output format.\n        \nDomain information: In this domain there is a robot barman that manipulates drink dispensers, glasses and a shaker. The goal is to find a plan of the robots actions that serves a desired set of drinks. In this domain deletes of actions encode relevant knowledge given that robot hands can only grasp one object at a time and given that glasses need to be empty and clean to be filled.\n\nA list of available predicates\n1. (ontable ?c - container) ;; the container is on the table\n2. (holding ?h - hand ?c - container) ;; the hand is holding the container\n3. (handempty ?h - hand) ;; the hand is empty\n4. (empty ?c - container) ;; the container is empty\n5. (contains ?c - container ?b - beverage) ;; the container contains the beverage\n6. (clean ?c - container) ;; the container is clean\n7. (used ?c - container ?b - beverage) ;; the container is used for the beverage\n8. (dispenses ?d - dispenser ?i - ingredient) ;; the dispenser dispenses the ingredient\n9. (shaker-empty-level ?s - shaker ?l - level) ;; the empty level of the shaker\n10. (shaker-level ?s - shaker ?l - level) ;; the shaker currently is at the level\n11. (next ?l1 ?l2 - level) ;; l2 is the next level after l1\n12. (unshaked ?s - shaker) ;; the shaker is unshaked\n13. (shaked ?s - shaker) ;; the shaker is shaked\n14. (cocktail-part1 ?c - cocktail ?i - ingredient) ;; the ingredient is part of the cocktail\n15. (cocktail-part2 ?c - cocktail ?i - ingredient) ;; the ingredient is part of the cocktail\nExample 1\nAction Description: The robot empties a shaker that has been shaken, changing its level.\n\nAction name: empty-shaker\n\n\nYour answer:\n---\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:**\n\nLet's think of our robot barman as someone working in a kitchen, trying to prepare a cocktail using a shaker. The robot needs to follow certain steps to make sure everything goes smoothly and safely, just like following a recipe.\n\nThe action \"empty-shaker\" is all about the robot taking a shaker that has already been shaken (which means the ingredients are mixed up properly) and emptying it out so that the drink can be served, and the shaker is ready to be cleaned and used again.\n\nNow, let's talk about the preconditions, which are like the 'must-haves' before the robot can start this action:\n1. **(holding ?h ?s)** - The robot must be holding the shaker. It can\u2019t empty it if it\u2019s not holding it, right? Just like you can't pour milk from a jug if you're not holding it.\n2. **(contains ?s ?b)** - The shaker needs to have a drink inside. There's no point in trying to empty something that's already empty.\n3. **(shaked ?s)** - The drink inside the shaker must be mixed up by shaking. This ensures the drink is ready to be served.\n4. **(shaker-level ?s ?l)** - This tells us how much drink is currently in the shaker. It\u2019s important to know this so the robot knows it\u2019s actually pouring something out.\n5. **(shaker-empty-level ?s ?l1)** - This indicates what the level of the shaker should be after emptying it. Usually, it means it will be empty or nearly empty.\n\nThe effects of the action describe what changes after the robot empties the shaker:\n1. **(not (shaked ?s))** - The shaker is no longer considered 'shaken' because it's been emptied.\n2. **(not (shaker-level ?s ?l))** - The previous level of the drink is no longer relevant because it's been poured out.\n3. **(shaker-level ?s ?l1)** - This updates the level of the shaker to show it's now empty or at the lower level expected.\n4. **(not (contains ?s ?b))** - The shaker no longer contains the drink because it\u2019s been poured out.\n5. **(empty ?s)** - Finally, the shaker is empty, ready to be washed and used again for the next drink.\n\nBy ensuring all these preconditions are met before the action and then updating everything as described in the effects, the robot efficiently manages its tasks without any mix-ups or errors, just like a good cook keeps their kitchen in order. This process helps the robot move smoothly from one task to the next, ensuring each drink is made and served perfectly.\n                \n**Response:**\nParameters:\n1. ?h - hand: [short description of the parameter]\n2. ?s - shaker: [short description of the parameter]\n3. ?b - cocktail: [short description of the parameter]\n4. ?l - level: [short description of the parameter]\n5. ?l1 - level: [short description of the parameter]\n\nPreconditions:\n```\n(and\n    (holding ?h ?s)\n    (contains ?s ?b)\n    (shaked ?s)\n    (shaker-level ?s ?l)\n    (shaker-empty-level ?s ?l1)\n)\n```\n\nEffects:\n```\n(and\n    (not (shaked ?s))\n    (not (shaker-level ?s ?l))\n    (shaker-level ?s ?l1)\n    (not (contains ?s ?b))\n    (empty ?s)\n)\n```\n\n---\n", "type": "prompt"}
{"role": "user", "content": "Example 2\nAction Description: The robot pours a beverage from a shaker into an empty, clean shot glass.\n\nAction name: pour-shaker-to-shot\n\n\nYour answer:\n---\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:**\nImagine you're teaching a robot how to serve drinks at a party. The robot is designed to perform specific tasks with clear instructions, much like following a recipe step-by-step.\n\n**Scenario:** The robot needs to pour a beverage from a shaker into a shot glass. The action it must perform is called \"pour-shaker-to-shot.\"\n\n**Why the Preconditions are Necessary:**\n1. **Holding the Shaker:** The robot must be holding the shaker to pour from it. If it's not holding it, it can't control the pouring process.\n2. **Shaker is Shaken:** The contents in the shaker need to be mixed well (shaken) before serving. This ensures the drink's quality and consistency.\n3. **The Shot Glass is Empty:** The glass must be empty because pouring into an already full or partially filled glass would cause a spill or mix drinks unintentionally.\n4. **The Shot Glass is Clean:** Hygiene and taste! No one wants a dirty glass, and leftover residues could alter the flavor of the new drink.\n5. **Shaker Contains the Beverage:** The robot needs to confirm that the right beverage is in the shaker to pour the correct drink.\n6. **Shaker Level is Correct:** Knowing the current level helps manage how much is poured, ensuring the robot doesn't try to pour more than what is available.\n7. **Next Level Indicator:** This indicates how much beverage will remain in the shaker after pouring, helping in planning the next steps or refilling.\n\n**How the Preconditions Lead to the Specified Effects:**\n- After the robot pours, the shot glass will no longer be clean and empty because it now contains the beverage.\n- The level of the beverage in the shaker decreases as it has been transferred to the glass.\n- The robot updates the shaker's level to reflect the new quantity, which is crucial for knowing how much is left for the next drink.\n\n**Simple Analogy:**\nThink of it like pouring apple juice for a kid. You need to make sure you have the juice (in a jug), a clean and empty cup to pour into, and you need to be holding the jug. After pouring, the cup will have juice, and there'll be less juice in the jug. Just like you need to check these things, so does the robot!\n\nBy setting up these instructions in the action \"pour-shaker-to-shot,\" we ensure the robot does its job correctly and efficiently, just like you'd carefully prepare a drink for a guest.\n                \n**Response:**\nParameters:\n1. ?b - beverage: [short description of the parameter]\n2. ?d - shot: [short description of the parameter]\n3. ?h - hand: [short description of the parameter]\n4. ?s - shaker: [short description of the parameter]\n5. ?l - level: [short description of the parameter]\n6. ?l1 - level: [short description of the parameter]\n\nPreconditions:\n```\n(and\n    (holding ?h ?s)\n    (shaked ?s)\n    (empty ?d)\n    (clean ?d)\n    (contains ?s ?b)\n    (shaker-level ?s ?l)\n    (next ?l1 ?l)\n)\n```\n\nEffects:\n```\n(and\n    (not (clean ?d))\n    (not (empty ?d))\n    (contains ?d ?b)\n    (shaker-level ?s ?l1)\n    (not (shaker-level ?s ?l))\n)\n```\n\n---\n", "type": "prompt"}
{"role": "user", "content": "Here are two examples from the logistics domain for demonstrating the output format.\n        \nDomain information: In this logistics domain, various objects need to be transported from one location to another. To achieve this, trucks are used for moving objects within a city, while airplanes are used for transporting objects between different cities. The domain includes different types of locations such as regular places and airports, with specific vehicles designed for each type of transport.\n\nA list of available predicates\n1. (at ?obj - object ?loc - location) ;; the object is at the location\n2. (in ?obj1 - object ?obj2 - object) ;; the obj1 is in obj2\n3. (in-city ?loc - location ?city - city) ;; the location is in the city\nExample 1\nAction Description: Airplanes are used to fly objects between different cities. This action involves moving the airplane from one airport to another. The airplane must start at the departure airport and will end up at the destination airport, ready for unloading or further transportation of the objects inside.\n\nAction name: fly-airplane\n\n\nYour answer:\n---\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:**\n\nIn our logistics domain, we have airplanes that can move objects between different cities by flying from one airport to another. The PDDL action named \"fly-airplane\" describes how this moving process works.\n\n1. **Parameters of the Action:**\n   - The action \"fly-airplane\" involves three main components: an airplane, a departure airport (loc-from), and a destination airport (loc-to). These are specified as parameters which simply means they are the essential parts needed for this action to happen.\n\n2. **Preconditions:**\n   - The precondition for this action is `(at ?airplane ?loc-from)`. This means that for the airplane to fly from one airport to another, it must already be located at the departure airport (`loc-from`). This makes sense because an airplane can't start flying from an airport if it isn't there to begin with.\n\n3. **Effects:**\n   - The effects of this action are described by `(and (not (at ?airplane ?loc-from)) (at ?airplane ?loc-to))`. This part explains what changes occur after the action is completed.\n     - `(not (at ?airplane ?loc-from))` indicates that once the airplane has taken off, it is no longer at the departure airport. It's a way to show that the airplane has left the starting point.\n     - `(at ?airplane ?loc-to)` confirms that after flying, the airplane arrives at the destination airport (`loc-to`). This marks the successful completion of the journey from one city to another.\n\nTo summarize, the action schema for \"fly-airplane\" perfectly matches our natural language description by detailing how an airplane moves from one airport to another. It clearly explains that the airplane starts at one airport and ends at another, with the changes accurately reflected in the conditions and effects within the schema.\n                \n**Response:**\nParameters:\n1. ?obj - object: [short description of the parameter]\n2. ?airplane - airplane: [short description of the parameter]\n3. ?loc - location: [short description of the parameter]\n\nPreconditions:\n```\n(and\n    (in ?obj ?airplane)\n    (at ?airplane ?loc)\n)\n```\n\nEffects:\n```\n(and\n    (not (in ?obj ?airplane))\n    (at ?obj ?loc)\n)\n```\n\n---\n", "type": "prompt"}
{"role": "user", "content": "Example 2\nAction Description: Similar to unloading a truck, this action involves removing an object from an airplane once it has reached its destination. The object is taken out of the airplane and placed at the airport or specified location. The airplane must be at the same location as the object for this action to happen.\n\nAction name: unload-airplane\n\n\nYour answer:\n---\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:** The action named \"unload-airplane\" described in simple terms, involves taking an object out of an airplane and placing it at a specific location, like an airport. Now, let\u2019s look at how this action matches the natural language description and why the details in the PDDL (Planning Domain Definition Language) make sense.\n\nThe action in PDDL requires some information, called parameters, which are the object, the airplane from which the object is being unloaded, and the location where the airplane is. These details help define what is involved in the action.\n\nNext, we have preconditions. These are the conditions that must be true before the action can happen:\n1. The object must be inside the airplane. This makes sense because you can\u2019t unload something that isn\u2019t already loaded.\n2. The airplane must be at the location where the object needs to be placed (like the airport). This is crucial because if the airplane isn't at the right place, you can't unload the object there.\n\nFinally, the effects describe what happens after the action is taken:\n1. The object is no longer in the airplane (represented by removing \"(in ?obj ?airplane)\"). This indicates that the object has been successfully removed.\n2. The object is now at the specific location (adding \"(at ?obj ?loc)\"). This shows that the object has been placed at the destination, completing the process of unloading.\n\nThis PDDL action schema effectively translates the natural language description into a structured format that a planning system can understand and execute, ensuring that the object is moved from the airplane to the desired location under the right conditions. It\u2019s a bit like giving a computer a recipe that it can follow step-by-step to get a task done.\n                \n**Response:**\nParameters:\n1. ?airplane - airplane: [short description of the parameter]\n2. ?loc-from - airport: [short description of the parameter]\n3. ?loc-to - airport: [short description of the parameter]\n\nPreconditions:\n```\n(at ?airplane ?loc-from)\n```\n\nEffects:\n```\n(and\n    (not (at ?airplane ?loc-from))\n    (at ?airplane ?loc-to)\n)\n```\n\n---\n", "type": "prompt"}
{"role": "user", "content": "Question: Here is the task.\nA natural language description of the domain\nDomain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape\n\nA list of available predicates\n1. (at-hero ?loc - cells) ;;  Hero's cell location\n2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location\n3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster\n4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap\n5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed\n6. (connected ?from ?to - cells) ;; connects cells\n7. (arm-free) ;; Hero's hand is free\n8. (holding ?s - swords) ;; Hero's holding a sword\n9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed\n\nAction Description: Hero can move if the - hero is at current location - cells are connected, - there is no trap in current loc, and - destination does not have a trap/monster/has-been-destroyed Effects move the hero, and destroy the original cell. No need to destroy the sword.\n\nAction name: move\n\n\nYour answer:\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:**\n\nIn the dungeon domain, the hero needs to navigate through rooms connected by corridors to find an exit. The action \"move\" is a fundamental part of this navigation, allowing the hero to progress from one room to another. For this action to be successful, certain conditions must be met, and certain outcomes must result from the action.\n\nThe hero can only move if:\n1. The hero is currently at the starting location (`?from`).\n2. The starting location and the destination (`?to`) are connected, meaning there is a corridor between them.\n3. There is no trap in the current location, ensuring the hero's safety as they leave.\n4. The destination cell is not occupied by a monster, not destroyed, and does not have a trap, ensuring it is safe for the hero to move into.\n\nOnce the hero moves, the original cell is no longer relevant to the hero's location, so we can consider it \"destroyed\" in the context of the hero's journey. However, the action of moving does not destroy any swords that may be in the room.\n\nThe PDDL action schema for \"move\" will reflect these conditions and outcomes, ensuring that the hero moves safely and logically through the dungeon.\n\n**Response:**\nParameters:\n1. ?from - cells: [The cell where the hero is currently located]\n2. ?to - cells: [The cell to which the hero wants to move]\n\nPreconditions:\n```\n(and\n    (at-hero ?from)\n    (connected ?from ?to)\n    (not (has-trap ?from))\n    (not (has-monster ?to))\n    (not (is-destroyed ?to))\n)\n```\n\nEffects:\n```\n(and\n    (not (at-hero ?from))\n    (at-hero ?to)\n    (is-destroyed ?from)\n)\n```\n\nNote that the effects do not include destroying the sword if there is one in the cell, as the action description specifies that there is no need to destroy the sword. The hero simply moves from one cell to another, and the original cell is considered \"destroyed\" in the context of the hero's path.", "type": "response", "action": "move"}
