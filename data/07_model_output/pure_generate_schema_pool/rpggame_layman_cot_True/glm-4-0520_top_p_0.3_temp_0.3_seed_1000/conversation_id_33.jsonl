{"role": "system", "content": "# CONTEXT #\nYou are a tool called PDDL Modeling Assistant. You are a technical experts in constructing Planning Domain Definition Language (PDDL) models via the natural language context.\n# OBJECTIVE #\n* Construct parameters, preconditions and effects based on the domain information, action description and the action name.\n* All variables in the preconditions and effects must be listed in the action's parameters. This restriction helps maintain the action's scope and prevents ambiguity in the planning process.\n* Do not use predicates that are not defined in the available predicates list to construct the preconditions and effects.\n* When the natural language description is ambiguous or certain predicate changes are implied, make reasonable assumptions based on common sense to fill up the implicit predicate in the PDDL action.\n# STYLE #\nFollow the writing style of technical experts. The output can be parsed by a machine, so it is important to follow the structured format.\n# TONE #\nBe precise and concise in constructing the PDDL action. The PDDL action should be clear and unambiguous.\n# AUDIENCE #\nYour audience is someone who is trying to learn how to construct PDDL actions from natural language descriptions.\n# RESPONSE #\nThe response should be in the following format:\n---\n**Explanation:** [Your explanation here]\n\n**Response:**\nParameters:\n1. ?x - [type]: [parameter description]\n2. ...\n\nPreconditions:\n```\n(and\n    ([predicate_1] ?x)\n)\n```\n\nEffects:\n```\n(and\n    (not ([predicate_2] ?x))\n    ([predicate_2] ?x)\n    ...\n)\n```\n---\n", "type": "prompt"}
{"role": "user", "content": "One or two examples from other domains for illustrating the input and output formats.\nHere are two examples from the barman domain for demonstrating the output format.\n        \nDomain information: In this domain there is a robot barman that manipulates drink dispensers, glasses and a shaker. The goal is to find a plan of the robots actions that serves a desired set of drinks. In this domain deletes of actions encode relevant knowledge given that robot hands can only grasp one object at a time and given that glasses need to be empty and clean to be filled.\n\nA list of available predicates\n1. (ontable ?c - container) ;; the container is on the table\n2. (holding ?h - hand ?c - container) ;; the hand is holding the container\n3. (handempty ?h - hand) ;; the hand is empty\n4. (empty ?c - container) ;; the container is empty\n5. (contains ?c - container ?b - beverage) ;; the container contains the beverage\n6. (clean ?c - container) ;; the container is clean\n7. (used ?c - container ?b - beverage) ;; the container is used for the beverage\n8. (dispenses ?d - dispenser ?i - ingredient) ;; the dispenser dispenses the ingredient\n9. (shaker-empty-level ?s - shaker ?l - level) ;; the empty level of the shaker\n10. (shaker-level ?s - shaker ?l - level) ;; the shaker currently is at the level\n11. (next ?l1 ?l2 - level) ;; l2 is the next level after l1\n12. (unshaked ?s - shaker) ;; the shaker is unshaked\n13. (shaked ?s - shaker) ;; the shaker is shaked\n14. (cocktail-part1 ?c - cocktail ?i - ingredient) ;; the ingredient is part of the cocktail\n15. (cocktail-part2 ?c - cocktail ?i - ingredient) ;; the ingredient is part of the cocktail\nExample 1\nAction Description: The robot cleans a used shot glass.\n\nAction name: clean-shot\n\n\nYour answer:\n---\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:**\n\nLet's imagine our robot barman is preparing drinks in a bar where it must handle different glasses, like a shot glass. The robot needs to clean a used shot glass to make sure it's ready for the next drink. This situation leads us to create an action called `clean-shot` in the robot's planning.\n\nFirst, the robot needs to make sure it's holding the shot glass with one hand (`holding ?h1 ?s`). This makes sense because you need to hold the glass to clean it properly.\n\nNext, the robot needs to have its other hand free (`handempty ?h2`). This is important because the robot might need to use this hand to operate cleaning tools or to stabilize the glass while cleaning.\n\nThe glass itself must be empty (`empty ?s`) before it can be cleaned. Imagine trying to clean a glass while it's still full of liquid; it would be messy and ineffective!\n\nLastly, the glass should have been used (`used ?s ?b`), indicating it was previously filled with a drink and now requires cleaning. This precondition checks whether the glass actually needs cleaning.\n\nOnce all these conditions are met, the robot can proceed with the cleaning action. The effect of this action is twofold: the shot glass is no longer 'used' for the specific beverage (`not (used ?s ?b)`), and the glass becomes clean (`clean ?s`).\n\nBy setting these preconditions and effects, we ensure that the robot performs the cleaning task effectively and prepares the glass for future use, maintaining a smooth operation in the bar scenario.\n                \n**Response:**\nParameters:\n1. ?s - shot: [short description of the parameter]\n2. ?b - beverage: [short description of the parameter]\n3. ?h1 - hand: [short description of the parameter]\n4. ?h2 - hand: [short description of the parameter]\n\nPreconditions:\n```\n(and\n    (holding ?h1 ?s)\n    (handempty ?h2)\n    (empty ?s)\n    (used ?s ?b)\n)\n```\n\nEffects:\n```\n(and\n    (not (used ?s ?b))\n    (clean ?s)\n)\n```\n\n---\n", "type": "prompt"}
{"role": "user", "content": "Example 2\nAction Description: The robot pours an ingredient from a shot glass into a clean shaker, changing its level.\n\nAction name: pour-shot-to-clean-shaker\n\n\nYour answer:\n---\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:**\n\nImagine you have a robot bartender tasked with making a special cocktail. It has a shot glass with an ingredient and needs to transfer this into a shaker to mix the drink properly. The action we're talking about is named \"pour-shot-to-clean-shaker.\"\n\nLet's break down the steps and rules (we call these \"preconditions\" and \"effects\") for this action using a simple scenario:\n\n1. **Preconditions (the rules that must be true before the action starts):**\n   - The robot must be holding the shot glass. This makes sense because it can't pour from the shot glass if it's not holding it!\n   - The shot glass must contain the ingredient it's supposed to pour. You wouldn't pour if the glass was empty, right?\n   - The shaker, where the ingredient will go, must be empty and clean. This ensures that previous contents don't mix with the new ingredient, keeping your drink as intended.\n   - The shaker must be at a certain level of fullness before pouring, and the robot knows what level comes next. This helps in measuring how much more it can add.\n\n2. **Effects (what happens after the action is performed):**\n   - The shot glass will no longer contain the ingredient because it's been poured out.\n   - The shot glass becomes empty because all its contents have been transferred.\n   - The shaker now contains the ingredient from the shot glass.\n   - The shaker is no longer empty or clean because it has something in it now.\n   - The shaker remains unshaken; just because the ingredient is added doesn't mean it's ready to drink. Mixing is a separate step!\n   - The level of the shaker changes to the next level, accounting for the added ingredient.\n\nBy setting these preconditions and effects, the robot knows exactly what to check and what changes to make in its environment to successfully make the cocktail. This careful planning ensures the drink is made correctly and efficiently, step by step.\n                \n**Response:**\nParameters:\n1. ?s - shot: [short description of the parameter]\n2. ?i - ingredient: [short description of the parameter]\n3. ?d - shaker: [short description of the parameter]\n4. ?h1 - hand: [short description of the parameter]\n5. ?l - level: [short description of the parameter]\n6. ?l1 - level: [short description of the parameter]\n\nPreconditions:\n```\n(and\n    (holding ?h1 ?s)\n    (contains ?s ?i)\n    (empty ?d)\n    (clean ?d)\n    (shaker-level ?d ?l)\n    (next ?l ?l1)\n)\n```\n\nEffects:\n```\n(and\n    (not (contains ?s ?i))\n    (empty ?s)\n    (contains ?d ?i)\n    (not (empty ?d))\n    (not (clean ?d))\n    (unshaked ?d)\n    (not (shaker-level ?d ?l))\n    (shaker-level ?d ?l1)\n)\n```\n\n---\n", "type": "prompt"}
{"role": "user", "content": "Here are two examples from the newspapers domain for demonstrating the output format.\n        \nDomain information: This domain is structured to model a simple newspaper delivery system, where the main tasks involve picking up newspapers from a home base, moving to different locations, and delivering the papers to locations that require them.\n\nA list of available predicates\n1. (at ?loc - loc) ;; the agent is at loc location\n2. (is_Home_Base ?loc - loc) ;; the location is the home base\n3. (satisfied ?loc - loc) ;; the location has received the newspaper\n4. (wants_Paper ?loc - loc) ;; the location needs a newspaper\n5. (unpacked ?paper - paper) ;; the paper is unpacked\n6. (carrying ?paper - paper) ;; the agent is carrying the paper\nExample 1\nAction Description: RoboDelivery wants to deliver the newspaper to a house (loc_house1).\nRoboDelivery performs the move action to go from loc_home to loc_house1.\n\n    Preconditions: RoboDelivery is at loc_home.\n    Effects: RoboDelivery is no longer at loc_home and is now at loc_house1.\n\nAction name: move\n\n\nYour answer:\n---\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:**\n\nImagine you're playing a game where you need to deliver newspapers to different houses in your neighborhood. Each turn in the game allows you to move from one house to another. The action of moving from one house to another in the game can be compared to an action in our newspaper delivery model.\n\nIn the scenario, the action is called \"move,\" and it involves a delivery person moving from a starting location to a destination. Let's break down why this action is modeled the way it is:\n\n1. **Parameters**: These are like placeholders or markers in our game. In the \"move\" action, the parameters are the Starting Location and the Destination. It's just like saying, \"I'm starting from my house and going to my friend's house.\"\n\n2. **Preconditions**: Before you can move from one house to another, you must be at the house you're starting from. It wouldn't make sense to say, \"I'm going from my house to my friend's house\" if you're actually at the grocery store, right? So, the precondition that the delivery person is at the starting location is crucial to make the action logical.\n\n3. **Effects**: After you move from your house to your friend's house, you are no longer at your house; you are now at your friend's house. That\u2019s what happens in our model, too. The effect of the move action is that the delivery person is no longer at the starting location and is now at the destination. This change is captured in the model by removing the state of being at the starting location (`not (at ?from)`) and adding the state of being at the destination (`(at ?to)`).\n\nSo, this action schema perfectly represents the simple yet essential task of moving from one point to another, ensuring that the game's rules are followed: you start from where you say you are, and you end up where you want to go. It's just like moving pieces on a board game, ensuring each move is valid based on where you are and where you want to be.\n                \n**Response:**\nParameters:\n1. ?from - loc: [short description of the parameter]\n2. ?to - loc: [short description of the parameter]\n\nPreconditions:\n```\n(at ?from)\n```\n\nEffects:\n```\n(and\n    (not (at ?from))\n    (at ?to)\n)\n```\n\n---\n", "type": "prompt"}
{"role": "user", "content": "Example 2\nAction Description: The house at loc_house1 wants a newspaper.\nRoboDelivery performs the deliver action to give paper1 to the house.\n\n    Preconditions: RoboDelivery is at loc_house1, the house wants a newspaper, and RoboDelivery is carrying paper1.\n    Effects: RoboDelivery is no longer carrying paper1, the house at loc_house1 no longer wants a newspaper, and the house at loc_house1 is satisfied.\n\nAction name: deliver\n\n\nYour answer:\n---\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:**\n\nLet's think of the action of delivering a newspaper like a simple task you might do every day, like delivering a letter to your neighbor. The description given helps us understand how a delivery person can complete their job of delivering newspapers effectively in a systematic way, which is where the PDDL (a planning language) comes into play.\n\n1. **Preconditions: Why are they necessary?**\n   - The delivery person must be at the right location (`at ?loc`): Just like if you were to deliver a letter to your neighbor, you need to be at their house, not yours! This ensures the newspaper is delivered to the correct place.\n   - The delivery location wants a newspaper (`wants_Paper ?loc`): This makes sure that the delivery person is not just going around giving out newspapers to places that don't need them. It\u2019s like checking if your neighbor actually needs the letter before you walk over.\n   - The delivery person must be carrying the newspaper (`carrying ?paper`): This is pretty straightforward\u2014just as you can't deliver a letter that you don't have in your hand, the delivery person needs to have the newspaper with them to deliver it.\n\n2. **Effects: How do they follow from the preconditions?**\n   - The newspaper is no longer being carried by the delivery person (`not (carrying ?paper)`): Once the delivery is done, just like handing over a letter, the newspaper is no longer with the delivery person.\n   - The delivery location no longer wants the newspaper (`not (wants_Paper ?loc)`): The need for the newspaper has been met, similar to how your neighbor no longer waits for the letter once you've delivered it.\n   - The location is satisfied (`satisfied ?loc`): This indicates that the delivery was successful. The location got what it was waiting for, just like your neighbor feeling happy receiving the letter.\n\nIn summary, the action of delivering a newspaper in this PDDL model ensures that everything needed to complete a successful delivery is in place before the delivery starts, and once done, it updates the state to reflect the successful completion of the task. It's about making sure you have what you need, going where you need to go, and ensuring the task is completed as expected!\n                \n**Response:**\nParameters:\n1. ?paper - paper: [short description of the parameter]\n2. ?loc - loc: [short description of the parameter]\n\nPreconditions:\n```\n(and\n    (at ?loc)\n    (wants_Paper ?loc)\n    (carrying ?paper)\n)\n```\n\nEffects:\n```\n(and\n    (not (carrying ?paper))\n    (not (wants_Paper ?loc))\n    (satisfied ?loc)\n)\n```\n\n---\n", "type": "prompt"}
{"role": "user", "content": "Question: Here is the task.\nA natural language description of the domain\nDomain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape\n\nA list of available predicates\n1. (at-hero ?loc - cells) ;;  Hero's cell location\n2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location\n3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster\n4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap\n5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed\n6. (connected ?from ?to - cells) ;; connects cells\n7. (arm-free) ;; Hero's hand is free\n8. (holding ?s - swords) ;; Hero's holding a sword\n9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed\n\nAction Description: Hero can move if the - hero is at current location - cells are connected, - when this action is executed, the hero gets into a location with a monster\n\nAction name: move-to-monster\n\n\nYour answer:\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:**\n\nIn the given dungeon domain, the hero needs to navigate through rooms connected by corridors to find an exit. The action described here, \"move-to-monster,\" involves the hero moving from one room to another that contains a monster. For this action to be logically consistent and meaningful within the game's rules, certain conditions must be met before the action can take place, and certain outcomes must result from the action.\n\nThe preconditions ensure that the hero is in the correct starting location and that the destination room is reachable (connected). Additionally, the action specifically requires that the destination room has a monster, which is a key aspect of the action's purpose.\n\nThe effects describe the result of the action: the hero's new location and the fact that they are no longer in their previous location. There are no effects mentioned regarding the monster, so we assume that simply moving to the room with the monster does not automatically engage the hero in combat or alter the state of the monster.\n\n**Response:**\nParameters:\n1. ?from - cells: [The cell where the hero is currently located]\n2. ?to - cells: [The cell with a monster that the hero wants to move to]\n\nPreconditions:\n```\n(and\n    (at-hero ?from)\n    (connected ?from ?to)\n    (has-monster ?to)\n)\n```\n\nEffects:\n```\n(and\n    (not (at-hero ?from))\n    (at-hero ?to)\n)\n```\n\nNote that the action does not specify what happens to the monster or any interaction with it, so we do not include any effects related to the monster in the PDDL action. If the domain rules included interaction with the monster as part of the \"move-to-monster\" action, additional preconditions and effects would be necessary to accurately represent that behavior.", "type": "response", "action": "move-to-monster"}
{"role": "system", "content": "# CONTEXT #\nYou are a tool called PDDL Modeling Assistant. You are a technical experts in constructing Planning Domain Definition Language (PDDL) models via the natural language context.\n# OBJECTIVE #\n* Construct parameters, preconditions and effects based on the domain information, action description and the action name.\n* All variables in the preconditions and effects must be listed in the action's parameters. This restriction helps maintain the action's scope and prevents ambiguity in the planning process.\n* Do not use predicates that are not defined in the available predicates list to construct the preconditions and effects.\n* When the natural language description is ambiguous or certain predicate changes are implied, make reasonable assumptions based on common sense to fill up the implicit predicate in the PDDL action.\n# STYLE #\nFollow the writing style of technical experts. The output can be parsed by a machine, so it is important to follow the structured format.\n# TONE #\nBe precise and concise in constructing the PDDL action. The PDDL action should be clear and unambiguous.\n# AUDIENCE #\nYour audience is someone who is trying to learn how to construct PDDL actions from natural language descriptions.\n# RESPONSE #\nThe response should be in the following format:\n---\n**Explanation:** [Your explanation here]\n\n**Response:**\nParameters:\n1. ?x - [type]: [parameter description]\n2. ...\n\nPreconditions:\n```\n(and\n    ([predicate_1] ?x)\n)\n```\n\nEffects:\n```\n(and\n    (not ([predicate_2] ?x))\n    ([predicate_2] ?x)\n    ...\n)\n```\n---\n", "type": "prompt"}
{"role": "user", "content": "One or two examples from other domains for illustrating the input and output formats.\nHere are two examples from the barman domain for demonstrating the output format.\n        \nDomain information: In this domain there is a robot barman that manipulates drink dispensers, glasses and a shaker. The goal is to find a plan of the robots actions that serves a desired set of drinks. In this domain deletes of actions encode relevant knowledge given that robot hands can only grasp one object at a time and given that glasses need to be empty and clean to be filled.\n\nA list of available predicates\n1. (ontable ?c - container) ;; the container is on the table\n2. (holding ?h - hand ?c - container) ;; the hand is holding the container\n3. (handempty ?h - hand) ;; the hand is empty\n4. (empty ?c - container) ;; the container is empty\n5. (contains ?c - container ?b - beverage) ;; the container contains the beverage\n6. (clean ?c - container) ;; the container is clean\n7. (used ?c - container ?b - beverage) ;; the container is used for the beverage\n8. (dispenses ?d - dispenser ?i - ingredient) ;; the dispenser dispenses the ingredient\n9. (shaker-empty-level ?s - shaker ?l - level) ;; the empty level of the shaker\n10. (shaker-level ?s - shaker ?l - level) ;; the shaker currently is at the level\n11. (next ?l1 ?l2 - level) ;; l2 is the next level after l1\n12. (unshaked ?s - shaker) ;; the shaker is unshaked\n13. (shaked ?s - shaker) ;; the shaker is shaked\n14. (cocktail-part1 ?c - cocktail ?i - ingredient) ;; the ingredient is part of the cocktail\n15. (cocktail-part2 ?c - cocktail ?i - ingredient) ;; the ingredient is part of the cocktail\nExample 1\nAction Description: The robot empties a shot glass it's holding.\n\nAction name: empty-shot\n\n\nYour answer:\n---\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:**\nImagine a robot barman who has the job of preparing and serving drinks. Now, let\u2019s think about the action of the robot emptying a shot glass it is holding, which is named \"empty-shot\" in our planning scenario.\n\n**Why these preconditions?**\n1. The robot needs to be holding the shot glass. This is pretty straightforward: if the robot isn't holding the glass, it can\u2019t empty it. It\u2019s like you needing to hold a cup in your hand if you want to pour out its contents.\n2. The shot glass must contain a beverage. Again, this makes sense because if the glass is already empty, there's nothing to pour out!\n\n**How do these preconditions lead to the effects?**\n1. The effect that the shot glass no longer contains the beverage (`not (contains ?p ?b)`) directly follows from the action of emptying it. When you pour out a drink, the cup turns from being full to being empty.\n2. The shot glass is then marked as empty (`empty ?p`). This tells everyone (or every robot and system involved) that the glass is now ready to be used again, perhaps to be refilled or cleaned.\n\nSo, by ensuring the robot is holding a shot glass that contains a drink, and by performing the action of emptying it, the robot effectively makes the shot glass available for the next use, fulfilling its role as a bartender robot. It's like making sure a painter has a clean brush to start a new painting, ensuring the right tools are ready for the next task.\n                \n**Response:**\nParameters:\n1. ?b - beverage: [short description of the parameter]\n2. ?d - shot: [short description of the parameter]\n3. ?h - hand: [short description of the parameter]\n4. ?s - shaker: [short description of the parameter]\n5. ?l - level: [short description of the parameter]\n6. ?l1 - level: [short description of the parameter]\n\nPreconditions:\n```\n(and\n    (holding ?h ?s)\n    (shaked ?s)\n    (empty ?d)\n    (clean ?d)\n    (contains ?s ?b)\n    (shaker-level ?s ?l)\n    (next ?l1 ?l)\n)\n```\n\nEffects:\n```\n(and\n    (not (clean ?d))\n    (not (empty ?d))\n    (contains ?d ?b)\n    (shaker-level ?s ?l1)\n    (not (shaker-level ?s ?l))\n)\n```\n\n---\n", "type": "prompt"}
{"role": "user", "content": "Example 2\nAction Description: The robot pours a beverage from a shaker into an empty, clean shot glass.\n\nAction name: pour-shaker-to-shot\n\n\nYour answer:\n---\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:**\nImagine you're teaching a robot how to serve drinks at a party. The robot is designed to perform specific tasks with clear instructions, much like following a recipe step-by-step.\n\n**Scenario:** The robot needs to pour a beverage from a shaker into a shot glass. The action it must perform is called \"pour-shaker-to-shot.\"\n\n**Why the Preconditions are Necessary:**\n1. **Holding the Shaker:** The robot must be holding the shaker to pour from it. If it's not holding it, it can't control the pouring process.\n2. **Shaker is Shaken:** The contents in the shaker need to be mixed well (shaken) before serving. This ensures the drink's quality and consistency.\n3. **The Shot Glass is Empty:** The glass must be empty because pouring into an already full or partially filled glass would cause a spill or mix drinks unintentionally.\n4. **The Shot Glass is Clean:** Hygiene and taste! No one wants a dirty glass, and leftover residues could alter the flavor of the new drink.\n5. **Shaker Contains the Beverage:** The robot needs to confirm that the right beverage is in the shaker to pour the correct drink.\n6. **Shaker Level is Correct:** Knowing the current level helps manage how much is poured, ensuring the robot doesn't try to pour more than what is available.\n7. **Next Level Indicator:** This indicates how much beverage will remain in the shaker after pouring, helping in planning the next steps or refilling.\n\n**How the Preconditions Lead to the Specified Effects:**\n- After the robot pours, the shot glass will no longer be clean and empty because it now contains the beverage.\n- The level of the beverage in the shaker decreases as it has been transferred to the glass.\n- The robot updates the shaker's level to reflect the new quantity, which is crucial for knowing how much is left for the next drink.\n\n**Simple Analogy:**\nThink of it like pouring apple juice for a kid. You need to make sure you have the juice (in a jug), a clean and empty cup to pour into, and you need to be holding the jug. After pouring, the cup will have juice, and there'll be less juice in the jug. Just like you need to check these things, so does the robot!\n\nBy setting up these instructions in the action \"pour-shaker-to-shot,\" we ensure the robot does its job correctly and efficiently, just like you'd carefully prepare a drink for a guest.\n                \n**Response:**\nParameters:\n1. ?h - hand: [short description of the parameter]\n2. ?p - shot: [short description of the parameter]\n3. ?b - beverage: [short description of the parameter]\n\nPreconditions:\n```\n(and\n    (holding ?h ?p)\n    (contains ?p ?b)\n)\n```\n\nEffects:\n```\n(and\n    (not (contains ?p ?b))\n    (empty ?p)\n)\n```\n\n---\n", "type": "prompt"}
{"role": "user", "content": "Here are two examples from the newspapers domain for demonstrating the output format.\n        \nDomain information: This domain is structured to model a simple newspaper delivery system, where the main tasks involve picking up newspapers from a home base, moving to different locations, and delivering the papers to locations that require them.\n\nA list of available predicates\n1. (at ?loc - loc) ;; the agent is at loc location\n2. (is_Home_Base ?loc - loc) ;; the location is the home base\n3. (satisfied ?loc - loc) ;; the location has received the newspaper\n4. (wants_Paper ?loc - loc) ;; the location needs a newspaper\n5. (unpacked ?paper - paper) ;; the paper is unpacked\n6. (carrying ?paper - paper) ;; the agent is carrying the paper\nExample 1\nAction Description: The house at loc_house1 wants a newspaper.\nRoboDelivery performs the deliver action to give paper1 to the house.\n\n    Preconditions: RoboDelivery is at loc_house1, the house wants a newspaper, and RoboDelivery is carrying paper1.\n    Effects: RoboDelivery is no longer carrying paper1, the house at loc_house1 no longer wants a newspaper, and the house at loc_house1 is satisfied.\n\nAction name: deliver\n\n\nYour answer:\n---\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:**\n\nLet's think of the action of delivering a newspaper like a simple task you might do every day, like delivering a letter to your neighbor. The description given helps us understand how a delivery person can complete their job of delivering newspapers effectively in a systematic way, which is where the PDDL (a planning language) comes into play.\n\n1. **Preconditions: Why are they necessary?**\n   - The delivery person must be at the right location (`at ?loc`): Just like if you were to deliver a letter to your neighbor, you need to be at their house, not yours! This ensures the newspaper is delivered to the correct place.\n   - The delivery location wants a newspaper (`wants_Paper ?loc`): This makes sure that the delivery person is not just going around giving out newspapers to places that don't need them. It\u2019s like checking if your neighbor actually needs the letter before you walk over.\n   - The delivery person must be carrying the newspaper (`carrying ?paper`): This is pretty straightforward\u2014just as you can't deliver a letter that you don't have in your hand, the delivery person needs to have the newspaper with them to deliver it.\n\n2. **Effects: How do they follow from the preconditions?**\n   - The newspaper is no longer being carried by the delivery person (`not (carrying ?paper)`): Once the delivery is done, just like handing over a letter, the newspaper is no longer with the delivery person.\n   - The delivery location no longer wants the newspaper (`not (wants_Paper ?loc)`): The need for the newspaper has been met, similar to how your neighbor no longer waits for the letter once you've delivered it.\n   - The location is satisfied (`satisfied ?loc`): This indicates that the delivery was successful. The location got what it was waiting for, just like your neighbor feeling happy receiving the letter.\n\nIn summary, the action of delivering a newspaper in this PDDL model ensures that everything needed to complete a successful delivery is in place before the delivery starts, and once done, it updates the state to reflect the successful completion of the task. It's about making sure you have what you need, going where you need to go, and ensuring the task is completed as expected!\n                \n**Response:**\nParameters:\n1. ?from - loc: [short description of the parameter]\n2. ?to - loc: [short description of the parameter]\n\nPreconditions:\n```\n(at ?from)\n```\n\nEffects:\n```\n(and\n    (not (at ?from))\n    (at ?to)\n)\n```\n\n---\n", "type": "prompt"}
{"role": "user", "content": "Example 2\nAction Description: RoboDelivery wants to deliver the newspaper to a house (loc_house1).\nRoboDelivery performs the move action to go from loc_home to loc_house1.\n\n    Preconditions: RoboDelivery is at loc_home.\n    Effects: RoboDelivery is no longer at loc_home and is now at loc_house1.\n\nAction name: move\n\n\nYour answer:\n---\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:**\n\nImagine you're playing a game where you need to deliver newspapers to different houses in your neighborhood. Each turn in the game allows you to move from one house to another. The action of moving from one house to another in the game can be compared to an action in our newspaper delivery model.\n\nIn the scenario, the action is called \"move,\" and it involves a delivery person moving from a starting location to a destination. Let's break down why this action is modeled the way it is:\n\n1. **Parameters**: These are like placeholders or markers in our game. In the \"move\" action, the parameters are the Starting Location and the Destination. It's just like saying, \"I'm starting from my house and going to my friend's house.\"\n\n2. **Preconditions**: Before you can move from one house to another, you must be at the house you're starting from. It wouldn't make sense to say, \"I'm going from my house to my friend's house\" if you're actually at the grocery store, right? So, the precondition that the delivery person is at the starting location is crucial to make the action logical.\n\n3. **Effects**: After you move from your house to your friend's house, you are no longer at your house; you are now at your friend's house. That\u2019s what happens in our model, too. The effect of the move action is that the delivery person is no longer at the starting location and is now at the destination. This change is captured in the model by removing the state of being at the starting location (`not (at ?from)`) and adding the state of being at the destination (`(at ?to)`).\n\nSo, this action schema perfectly represents the simple yet essential task of moving from one point to another, ensuring that the game's rules are followed: you start from where you say you are, and you end up where you want to go. It's just like moving pieces on a board game, ensuring each move is valid based on where you are and where you want to be.\n                \n**Response:**\nParameters:\n1. ?paper - paper: [short description of the parameter]\n2. ?loc - loc: [short description of the parameter]\n\nPreconditions:\n```\n(and\n    (at ?loc)\n    (wants_Paper ?loc)\n    (carrying ?paper)\n)\n```\n\nEffects:\n```\n(and\n    (not (carrying ?paper))\n    (not (wants_Paper ?loc))\n    (satisfied ?loc)\n)\n```\n\n---\n", "type": "prompt"}
{"role": "user", "content": "Question: Here is the task.\nA natural language description of the domain\nDomain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape\n\nA list of available predicates\n1. (at-hero ?loc - cells) ;;  Hero's cell location\n2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location\n3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster\n4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap\n5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed\n6. (connected ?from ?to - cells) ;; connects cells\n7. (arm-free) ;; Hero's hand is free\n8. (holding ?s - swords) ;; Hero's holding a sword\n9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed\n\nAction Description: Hero's disarm the trap with his hand. Make sure the hand is free.\n\nAction name: disarm-trap\n\n\nYour answer:\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:**\n\nIn the dungeon domain, the hero needs to navigate through various challenges to escape. One such challenge is a trap that can be disarmed. The action \"disarm-trap\" represents the hero's attempt to disable a trap in a room.\n\nFor this action to be successful, certain conditions must be met, and the outcome will change the state of the dungeon in specific ways.\n\n**Preconditions:**\n- The hero must be at the location of the trap (`at-hero ?loc`): The hero can't disarm a trap that's not in the same room as them.\n- The location must have a trap (`has-trap ?loc`): There's no point in trying to disarm a location without a trap.\n- The hero's hand must be free (`arm-free`): The hero needs their hands free to interact with the trap and disarm it.\n\n**Effects:**\n- The trap at the location is disarmed (`trap-disarmed ?loc`): This effect represents the successful outcome of the action, indicating that the trap is no longer a threat.\n- The hero's hand is no longer free (`not (arm-free)`): After disarming the trap, the hero's hand is occupied, at least temporarily, which is reflected in this effect.\n\nThis action models the interaction between the hero and the trap, ensuring that the hero can only disarm a trap if they are in the correct location, the trap exists, and they have their hands free to do so. Once disarmed, the state of the dungeon changes to reflect that the trap is no longer active.\n\n**Response:**\nParameters:\n1. ?loc - cells: [The cell where the trap is located and the hero must be to disarm it]\n\nPreconditions:\n```\n(and\n    (at-hero ?loc)\n    (has-trap ?loc)\n    (arm-free)\n)\n```\n\nEffects:\n```\n(and\n    (not (has-trap ?loc))\n    (not (arm-free))\n    (trap-disarmed ?loc)\n)\n```\n\nNote: The effect `(not (has-trap ?loc))` might be omitted depending on the desired behavior. If the trap should remain in the location but be disarmed, then we would not remove the trap but simply mark it as disarmed. If the trap is removed after being disarmed, then the effect would be appropriate.", "type": "response", "action": "disarm-trap"}
{"role": "system", "content": "# CONTEXT #\nYou are a tool called PDDL Modeling Assistant. You are a technical experts in constructing Planning Domain Definition Language (PDDL) models via the natural language context.\n# OBJECTIVE #\n* Construct parameters, preconditions and effects based on the domain information, action description and the action name.\n* All variables in the preconditions and effects must be listed in the action's parameters. This restriction helps maintain the action's scope and prevents ambiguity in the planning process.\n* Do not use predicates that are not defined in the available predicates list to construct the preconditions and effects.\n* When the natural language description is ambiguous or certain predicate changes are implied, make reasonable assumptions based on common sense to fill up the implicit predicate in the PDDL action.\n# STYLE #\nFollow the writing style of technical experts. The output can be parsed by a machine, so it is important to follow the structured format.\n# TONE #\nBe precise and concise in constructing the PDDL action. The PDDL action should be clear and unambiguous.\n# AUDIENCE #\nYour audience is someone who is trying to learn how to construct PDDL actions from natural language descriptions.\n# RESPONSE #\nThe response should be in the following format:\n---\n**Explanation:** [Your explanation here]\n\n**Response:**\nParameters:\n1. ?x - [type]: [parameter description]\n2. ...\n\nPreconditions:\n```\n(and\n    ([predicate_1] ?x)\n)\n```\n\nEffects:\n```\n(and\n    (not ([predicate_2] ?x))\n    ([predicate_2] ?x)\n    ...\n)\n```\n---\n", "type": "prompt"}
{"role": "user", "content": "One or two examples from other domains for illustrating the input and output formats.\nHere are two examples from the barman domain for demonstrating the output format.\n        \nDomain information: In this domain there is a robot barman that manipulates drink dispensers, glasses and a shaker. The goal is to find a plan of the robots actions that serves a desired set of drinks. In this domain deletes of actions encode relevant knowledge given that robot hands can only grasp one object at a time and given that glasses need to be empty and clean to be filled.\n\nA list of available predicates\n1. (ontable ?c - container) ;; the container is on the table\n2. (holding ?h - hand ?c - container) ;; the hand is holding the container\n3. (handempty ?h - hand) ;; the hand is empty\n4. (empty ?c - container) ;; the container is empty\n5. (contains ?c - container ?b - beverage) ;; the container contains the beverage\n6. (clean ?c - container) ;; the container is clean\n7. (used ?c - container ?b - beverage) ;; the container is used for the beverage\n8. (dispenses ?d - dispenser ?i - ingredient) ;; the dispenser dispenses the ingredient\n9. (shaker-empty-level ?s - shaker ?l - level) ;; the empty level of the shaker\n10. (shaker-level ?s - shaker ?l - level) ;; the shaker currently is at the level\n11. (next ?l1 ?l2 - level) ;; l2 is the next level after l1\n12. (unshaked ?s - shaker) ;; the shaker is unshaked\n13. (shaked ?s - shaker) ;; the shaker is shaked\n14. (cocktail-part1 ?c - cocktail ?i - ingredient) ;; the ingredient is part of the cocktail\n15. (cocktail-part2 ?c - cocktail ?i - ingredient) ;; the ingredient is part of the cocktail\nExample 1\nAction Description: The robot places a container it's holding back onto the table.\n\nAction name: leave\n\n\nYour answer:\n---\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:**\n\nImagine you're teaching a robot barman to place a glass back on the table. The robot needs clear steps to follow, just like a recipe in cooking. In this scenario, the robot's task, or \"action,\" is named \"leave.\" Here's why the specific steps (preconditions and effects) in the action make sense:\n\n1. **Precondition (holding ?h ?c):** Before the robot can place the container on the table, it must be holding it. This is just like needing to pick up a plate before you can move it to another part of the kitchen. In the robot's instructions, this is expressed as \"(holding ?h ?c),\" meaning the robot's hand (?h) is currently holding the container (?c). This step ensures the robot knows it has the container and is ready to put it down.\n\n2. **Effects of the Action:**\n   - **(not (holding ?h ?c)):** This tells the robot to stop holding the container. It's like saying, \"Okay, you can let go of the plate now.\"\n   - **(handempty ?h):** Once the robot lets go of the container, its hand is empty. This is similar to you dropping something off and having your hand free again.\n   - **(ontable ?c):** Finally, the container ends up back on the table. This part of the instruction confirms that the container should now be on the table, just like setting a cup down on a counter.\n\nThis action schema is crafted so that the robot successfully completes the task of putting the container down in a way that makes sense step-by-step. The preconditions make sure the robot is ready to perform the action (holding the container), and the effects detail exactly what happens after the action (container on table, hand empty). It's a simple, clear set of instructions for the robot to follow, ensuring it does exactly what we want without any confusion.\n                \n**Response:**\nParameters:\n1. ?s - shot: [short description of the parameter]\n2. ?b - beverage: [short description of the parameter]\n3. ?h1 - hand: [short description of the parameter]\n4. ?h2 - hand: [short description of the parameter]\n\nPreconditions:\n```\n(and\n    (holding ?h1 ?s)\n    (handempty ?h2)\n    (empty ?s)\n    (used ?s ?b)\n)\n```\n\nEffects:\n```\n(and\n    (not (used ?s ?b))\n    (clean ?s)\n)\n```\n\n---\n", "type": "prompt"}
{"role": "user", "content": "Example 2\nAction Description: The robot cleans a used shot glass.\n\nAction name: clean-shot\n\n\nYour answer:\n---\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:**\n\nLet's imagine our robot barman is preparing drinks in a bar where it must handle different glasses, like a shot glass. The robot needs to clean a used shot glass to make sure it's ready for the next drink. This situation leads us to create an action called `clean-shot` in the robot's planning.\n\nFirst, the robot needs to make sure it's holding the shot glass with one hand (`holding ?h1 ?s`). This makes sense because you need to hold the glass to clean it properly.\n\nNext, the robot needs to have its other hand free (`handempty ?h2`). This is important because the robot might need to use this hand to operate cleaning tools or to stabilize the glass while cleaning.\n\nThe glass itself must be empty (`empty ?s`) before it can be cleaned. Imagine trying to clean a glass while it's still full of liquid; it would be messy and ineffective!\n\nLastly, the glass should have been used (`used ?s ?b`), indicating it was previously filled with a drink and now requires cleaning. This precondition checks whether the glass actually needs cleaning.\n\nOnce all these conditions are met, the robot can proceed with the cleaning action. The effect of this action is twofold: the shot glass is no longer 'used' for the specific beverage (`not (used ?s ?b)`), and the glass becomes clean (`clean ?s`).\n\nBy setting these preconditions and effects, we ensure that the robot performs the cleaning task effectively and prepares the glass for future use, maintaining a smooth operation in the bar scenario.\n                \n**Response:**\nParameters:\n1. ?h - hand: [short description of the parameter]\n2. ?c - container: [short description of the parameter]\n\nPreconditions:\n```\n(holding ?h ?c)\n```\n\nEffects:\n```\n(and\n    (not (holding ?h ?c))\n    (handempty ?h)\n    (ontable ?c)\n)\n```\n\n---\n", "type": "prompt"}
{"role": "user", "content": "Here are two examples from the newspapers domain for demonstrating the output format.\n        \nDomain information: This domain is structured to model a simple newspaper delivery system, where the main tasks involve picking up newspapers from a home base, moving to different locations, and delivering the papers to locations that require them.\n\nA list of available predicates\n1. (at ?loc - loc) ;; the agent is at loc location\n2. (is_Home_Base ?loc - loc) ;; the location is the home base\n3. (satisfied ?loc - loc) ;; the location has received the newspaper\n4. (wants_Paper ?loc - loc) ;; the location needs a newspaper\n5. (unpacked ?paper - paper) ;; the paper is unpacked\n6. (carrying ?paper - paper) ;; the agent is carrying the paper\nExample 1\nAction Description: The house at loc_house1 wants a newspaper.\nRoboDelivery performs the deliver action to give paper1 to the house.\n\n    Preconditions: RoboDelivery is at loc_house1, the house wants a newspaper, and RoboDelivery is carrying paper1.\n    Effects: RoboDelivery is no longer carrying paper1, the house at loc_house1 no longer wants a newspaper, and the house at loc_house1 is satisfied.\n\nAction name: deliver\n\n\nYour answer:\n---\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:**\n\nLet's think of the action of delivering a newspaper like a simple task you might do every day, like delivering a letter to your neighbor. The description given helps us understand how a delivery person can complete their job of delivering newspapers effectively in a systematic way, which is where the PDDL (a planning language) comes into play.\n\n1. **Preconditions: Why are they necessary?**\n   - The delivery person must be at the right location (`at ?loc`): Just like if you were to deliver a letter to your neighbor, you need to be at their house, not yours! This ensures the newspaper is delivered to the correct place.\n   - The delivery location wants a newspaper (`wants_Paper ?loc`): This makes sure that the delivery person is not just going around giving out newspapers to places that don't need them. It\u2019s like checking if your neighbor actually needs the letter before you walk over.\n   - The delivery person must be carrying the newspaper (`carrying ?paper`): This is pretty straightforward\u2014just as you can't deliver a letter that you don't have in your hand, the delivery person needs to have the newspaper with them to deliver it.\n\n2. **Effects: How do they follow from the preconditions?**\n   - The newspaper is no longer being carried by the delivery person (`not (carrying ?paper)`): Once the delivery is done, just like handing over a letter, the newspaper is no longer with the delivery person.\n   - The delivery location no longer wants the newspaper (`not (wants_Paper ?loc)`): The need for the newspaper has been met, similar to how your neighbor no longer waits for the letter once you've delivered it.\n   - The location is satisfied (`satisfied ?loc`): This indicates that the delivery was successful. The location got what it was waiting for, just like your neighbor feeling happy receiving the letter.\n\nIn summary, the action of delivering a newspaper in this PDDL model ensures that everything needed to complete a successful delivery is in place before the delivery starts, and once done, it updates the state to reflect the successful completion of the task. It's about making sure you have what you need, going where you need to go, and ensuring the task is completed as expected!\n                \n**Response:**\nParameters:\n1. ?paper - paper: [short description of the parameter]\n2. ?loc - loc: [short description of the parameter]\n\nPreconditions:\n```\n(and\n    (at ?loc)\n    (wants_Paper ?loc)\n    (carrying ?paper)\n)\n```\n\nEffects:\n```\n(and\n    (not (carrying ?paper))\n    (not (wants_Paper ?loc))\n    (satisfied ?loc)\n)\n```\n\n---\n", "type": "prompt"}
{"role": "user", "content": "Example 2\nAction Description: RoboDelivery is at the home base (loc_home).\nThere is an unpacked newspaper (paper1) at the home base.\nRoboDelivery performs the pick-up action.\n\n    Preconditions: RoboDelivery is at loc_home (which is the home base), and paper1 is unpacked.\n    Effects: RoboDelivery is now carrying paper1, and paper1 is no longer unpacked.\n\nAction name: pick-up\n\n\nYour answer:\n---\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:**\n\nLet's imagine a situation where someone, like a delivery person, needs to pick up newspapers from a place, like a home base, and deliver them to various locations. This situation can be broken down into smaller, specific steps to make it easy for a computer to understand and execute. This is where the action schema you mentioned comes into play.\n\nThe action is called \"pick-up,\" and it involves the delivery person picking up newspapers to deliver. This action is defined in a language called PDDL, which is like giving a computer a recipe to follow.\n\n1. **Parameters**: These are like ingredients in a recipe. Here, the ingredients are any newspaper (`?paper`) and a location (`?loc`), which in this scenario is the home base.\n\n2. **Preconditions**: These are conditions that must be true before the action can start. Think of it like checking if you have all your ingredients before you start cooking.\n   - `(at ?loc)`: The delivery person must be at the location specified (`?loc`). This makes sure they are actually at the home base to pick up the newspapers.\n   - `(is_Home_Base ?loc)`: The location where they are must be the home base. This is crucial because newspapers ready to be delivered are stored here.\n   - `(unpacked ?paper)`: The newspapers need to be unpacked and ready to be picked up. It ensures the newspapers are not in boxes or still bundled up, making them easy to grab and go.\n\n3. **Effects**: These describe what happens after the action is completed.\n   - `(not (unpacked ?paper))`: The newspaper is no longer in an unpacked state at the base because it has been picked up.\n   - `(carrying ?paper)`: The newspaper is now being carried by the delivery person, ready to be delivered to someone who needs it.\n\nThis schema helps the computer understand exactly what needs to happen when the \"pick-up\" action is called in the program. By specifying preconditions, we ensure the action makes sense (you can't pick up a newspaper if you're not there or if the papers aren't ready). The effects tell the computer how the world changes after the action, like the newspaper moving from being unpacked at the base to being carried for delivery.\n\nBy breaking down tasks this way, we help the computer efficiently and correctly handle tasks that seem simple to us but are quite detailed when programmed.\n                \n**Response:**\nParameters:\n1. ?paper - paper: [short description of the parameter]\n2. ?loc - loc: [short description of the parameter]\n\nPreconditions:\n```\n(and\n    (at ?loc)\n    (is_Home_Base ?loc)\n    (unpacked ?paper)\n)\n```\n\nEffects:\n```\n(and\n    (not (unpacked ?paper))\n    (carrying ?paper)\n)\n```\n\n---\n", "type": "prompt"}
{"role": "user", "content": "Question: Here is the task.\nA natural language description of the domain\nDomain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape\n\nA list of available predicates\n1. (at-hero ?loc - cells) ;;  Hero's cell location\n2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location\n3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster\n4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap\n5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed\n6. (connected ?from ?to - cells) ;; connects cells\n7. (arm-free) ;; Hero's hand is free\n8. (holding ?s - swords) ;; Hero's holding a sword\n9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed\n\nAction Description: Hero's picks a sword if he's in the same location\n\nAction name: pick-sword\n\n\nYour answer:\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:**\n\nIn the given dungeon domain, the hero needs to navigate through rooms connected by corridors, avoiding monsters and traps, and possibly using swords found in the rooms to aid in their escape. The action \"pick-sword\" is a critical part of the hero's strategy, allowing them to arm themselves for combat or to cut through obstacles.\n\nFor the \"pick-sword\" action, we need to define the preconditions that must be met before the hero can pick up a sword and the effects that occur once the action is taken.\n\nThe preconditions ensure that:\n- The hero is in the same location as the sword (`(at-hero ?loc)` and `(at-sword ?s ?loc)`). This is a fundamental requirement because the hero can only pick up a sword if it is in the same room as they are.\n- The hero's hand is free (`arm-free`). This means the hero is not already holding another sword, which is necessary to pick up a new one.\n\nThe effects describe the changes that occur as a result of the action:\n- The hero is no longer free-handed (`not (arm-free)`), indicating that they are now holding a sword.\n- The sword is no longer in its original location (`not (at-sword ?s ?loc)`), as it is now being held by the hero.\n\nBy defining these preconditions and effects, we ensure that the action is logically consistent and that the hero's state is updated correctly after performing the action.\n\n**Response:**\nParameters:\n1. ?s - swords: [The identifier for the sword that the hero is going to pick up]\n2. ?loc - cells: [The location where the hero and the sword are]\n\nPreconditions:\n```\n(and\n    (at-hero ?loc)\n    (at-sword ?s ?loc)\n    (arm-free)\n)\n```\n\nEffects:\n```\n(and\n    (not (arm-free))\n    (not (at-sword ?s ?loc))\n    (holding ?s)\n)\n```", "type": "response", "action": "pick-sword"}
{"role": "system", "content": "# CONTEXT #\nYou are a tool called PDDL Modeling Assistant. You are a technical experts in constructing Planning Domain Definition Language (PDDL) models via the natural language context.\n# OBJECTIVE #\n* Construct parameters, preconditions and effects based on the domain information, action description and the action name.\n* All variables in the preconditions and effects must be listed in the action's parameters. This restriction helps maintain the action's scope and prevents ambiguity in the planning process.\n* Do not use predicates that are not defined in the available predicates list to construct the preconditions and effects.\n* When the natural language description is ambiguous or certain predicate changes are implied, make reasonable assumptions based on common sense to fill up the implicit predicate in the PDDL action.\n# STYLE #\nFollow the writing style of technical experts. The output can be parsed by a machine, so it is important to follow the structured format.\n# TONE #\nBe precise and concise in constructing the PDDL action. The PDDL action should be clear and unambiguous.\n# AUDIENCE #\nYour audience is someone who is trying to learn how to construct PDDL actions from natural language descriptions.\n# RESPONSE #\nThe response should be in the following format:\n---\n**Explanation:** [Your explanation here]\n\n**Response:**\nParameters:\n1. ?x - [type]: [parameter description]\n2. ...\n\nPreconditions:\n```\n(and\n    ([predicate_1] ?x)\n)\n```\n\nEffects:\n```\n(and\n    (not ([predicate_2] ?x))\n    ([predicate_2] ?x)\n    ...\n)\n```\n---\n", "type": "prompt"}
{"role": "user", "content": "One or two examples from other domains for illustrating the input and output formats.\nHere are two examples from the barman domain for demonstrating the output format.\n        \nDomain information: In this domain there is a robot barman that manipulates drink dispensers, glasses and a shaker. The goal is to find a plan of the robots actions that serves a desired set of drinks. In this domain deletes of actions encode relevant knowledge given that robot hands can only grasp one object at a time and given that glasses need to be empty and clean to be filled.\n\nA list of available predicates\n1. (ontable ?c - container) ;; the container is on the table\n2. (holding ?h - hand ?c - container) ;; the hand is holding the container\n3. (handempty ?h - hand) ;; the hand is empty\n4. (empty ?c - container) ;; the container is empty\n5. (contains ?c - container ?b - beverage) ;; the container contains the beverage\n6. (clean ?c - container) ;; the container is clean\n7. (used ?c - container ?b - beverage) ;; the container is used for the beverage\n8. (dispenses ?d - dispenser ?i - ingredient) ;; the dispenser dispenses the ingredient\n9. (shaker-empty-level ?s - shaker ?l - level) ;; the empty level of the shaker\n10. (shaker-level ?s - shaker ?l - level) ;; the shaker currently is at the level\n11. (next ?l1 ?l2 - level) ;; l2 is the next level after l1\n12. (unshaked ?s - shaker) ;; the shaker is unshaked\n13. (shaked ?s - shaker) ;; the shaker is shaked\n14. (cocktail-part1 ?c - cocktail ?i - ingredient) ;; the ingredient is part of the cocktail\n15. (cocktail-part2 ?c - cocktail ?i - ingredient) ;; the ingredient is part of the cocktail\nExample 1\nAction Description: The robot shakes a shaker containing two ingredients to make a cocktail.\n\nAction name: shake\n\n\nYour answer:\n---\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:**\n\nLet's imagine our robot barman has been given the task of making a cocktail by mixing two ingredients in a shaker. Now, in the world of our robot, we describe this task using something called an \"action schema\" in PDDL, which is just a way to explain step-by-step what needs to happen.\n\nHere's why each part of the action schema for \"shake\" is set up the way it is:\n\n1. **Parameters**: This includes everything the robot needs to know about before starting:\n   - The cocktail it needs to make.\n   - The two ingredients it will use.\n   - The shaker where the mixing happens.\n   - The robot's two hands.\n\n2. **Preconditions**: These are the conditions that must be true before the robot can start shaking the ingredients:\n   - The robot must be holding the shaker in one hand (`holding ?h1 ?s`).\n   - The other hand needs to be free (`handempty ?h2`) so the robot can balance or do other tasks if needed.\n   - The shaker must contain the two specific ingredients (`contains ?s ?d1` and `contains ?s ?d2`).\n   - Each ingredient must be a correct part of the cocktail (`cocktail-part1 ?b ?d1` and `cocktail-part2 ?b ?d2`).\n   - The shaker must be unshaken (`unshaked ?s`), meaning the ingredients haven't been mixed yet.\n\n3. **Effects**: These are what will happen after the robot performs the action:\n   - The shaker will no longer be unshaken; it's now shaken (`not (unshaked ?s)` and `shaked ?s`).\n   - The individual ingredients will no longer be in the shaker by themselves because they've been mixed into a cocktail (`not (contains ?s ?d1)` and `not (contains ?s ?d2)`).\n   - Now, the shaker contains the cocktail (`contains ?s ?b`).\n\nImagine our robot is like a chef following a recipe. The preconditions are like checking that you have all your ingredients and tools ready, and the effects are what you expect to see in your cooking pot after you follow the steps. This action schema helps the robot understand exactly what conditions need to be in place before it starts mixing and what changes to expect after it\u2019s done.\n\nThis way, we make sure the robot can successfully make the cocktail without any hitches, like trying to mix without holding the shaker or mixing the wrong ingredients.\n                \n**Response:**\nParameters:\n1. ?b - cocktail: [short description of the parameter]\n2. ?d1 - ingredient: [short description of the parameter]\n3. ?d2 - ingredient: [short description of the parameter]\n4. ?s - shaker: [short description of the parameter]\n5. ?h1 - hand: [short description of the parameter]\n6. ?h2 - hand: [short description of the parameter]\n\nPreconditions:\n```\n(and\n    (holding ?h1 ?s)\n    (handempty ?h2)\n    (contains ?s ?d1)\n    (contains ?s ?d2)\n    (cocktail-part1 ?b ?d1)\n    (cocktail-part2 ?b ?d2)\n    (unshaked ?s)\n)\n```\n\nEffects:\n```\n(and\n    (not (unshaked ?s))\n    (not (contains ?s ?d1))\n    (not (contains ?s ?d2))\n    (shaked ?s)\n    (contains ?s ?b)\n)\n```\n\n---\n", "type": "prompt"}
{"role": "user", "content": "Example 2\nAction Description: The robot uses a hand to pick up a container from the table.\n\nAction name: grasp\n\n\nYour answer:\n---\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:**\nImagine a robot bartender at a busy party, tasked with making a variety of drinks. This robot, like a human bartender, has hands that it uses to pick up things like glasses or shakers.\n\nIn the scenario we're discussing, the action we're focusing on is called \"grasp,\" where the robot uses its hand to pick up a container from a table. Let's break down why certain conditions need to be met for this action to happen successfully and what happens after the robot performs this action.\n\n**Why the preconditions are necessary:**\n1. **The container must be on the table (ontable ?c):** This makes sense because if the container isn't on the table, the robot wouldn't know where to find it. It needs to be in a predictable location that the robot can access.\n2. **The robot's hand must be empty (handempty ?h):** Before the robot can pick up something new, its hand needs to be empty. Just like you can't pick up a cup of coffee if you're already holding an apple in your hand, the robot needs a free hand to pick up a new container.\n\n**What happens after the action (effects):**\n1. **The container is no longer on the table (not (ontable ?c)):** Once the robot picks up the container, it's no longer sitting on the table. It's in the robot's hand.\n2. **The robot's hand is no longer empty (not (handempty ?h)):** With the container in its hand, the hand isn't empty anymore.\n3. **The robot's hand is holding the container (holding ?h ?c):** This describes the new status of the robot\u2019s hand\u2014it is actively holding onto the container.\n\nSo, in this action, we see the robot checking that the container is where it's supposed to be and making sure its hand is ready to pick something up. Once those conditions are met, the robot can safely pick up the container, changing both the status of the container and the status of its hand. This is very practical and logical, ensuring that the robot operates efficiently and correctly in its environment of serving drinks at the party.\n\nThis action schema helps in planning out the robot's movements in a logical sequence, ensuring it always knows what to do next, based on simple checks and changes (preconditions and effects).\n                \n**Response:**\nParameters:\n1. ?h - hand: [short description of the parameter]\n2. ?c - container: [short description of the parameter]\n\nPreconditions:\n```\n(and\n    (ontable ?c)\n    (handempty ?h)\n)\n```\n\nEffects:\n```\n(and\n    (not (ontable ?c))\n    (not (handempty ?h))\n    (holding ?h ?c)\n)\n```\n\n---\n", "type": "prompt"}
{"role": "user", "content": "Here are two examples from the newspapers domain for demonstrating the output format.\n        \nDomain information: This domain is structured to model a simple newspaper delivery system, where the main tasks involve picking up newspapers from a home base, moving to different locations, and delivering the papers to locations that require them.\n\nA list of available predicates\n1. (at ?loc - loc) ;; the agent is at loc location\n2. (is_Home_Base ?loc - loc) ;; the location is the home base\n3. (satisfied ?loc - loc) ;; the location has received the newspaper\n4. (wants_Paper ?loc - loc) ;; the location needs a newspaper\n5. (unpacked ?paper - paper) ;; the paper is unpacked\n6. (carrying ?paper - paper) ;; the agent is carrying the paper\nExample 1\nAction Description: The house at loc_house1 wants a newspaper.\nRoboDelivery performs the deliver action to give paper1 to the house.\n\n    Preconditions: RoboDelivery is at loc_house1, the house wants a newspaper, and RoboDelivery is carrying paper1.\n    Effects: RoboDelivery is no longer carrying paper1, the house at loc_house1 no longer wants a newspaper, and the house at loc_house1 is satisfied.\n\nAction name: deliver\n\n\nYour answer:\n---\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:**\n\nLet's think of the action of delivering a newspaper like a simple task you might do every day, like delivering a letter to your neighbor. The description given helps us understand how a delivery person can complete their job of delivering newspapers effectively in a systematic way, which is where the PDDL (a planning language) comes into play.\n\n1. **Preconditions: Why are they necessary?**\n   - The delivery person must be at the right location (`at ?loc`): Just like if you were to deliver a letter to your neighbor, you need to be at their house, not yours! This ensures the newspaper is delivered to the correct place.\n   - The delivery location wants a newspaper (`wants_Paper ?loc`): This makes sure that the delivery person is not just going around giving out newspapers to places that don't need them. It\u2019s like checking if your neighbor actually needs the letter before you walk over.\n   - The delivery person must be carrying the newspaper (`carrying ?paper`): This is pretty straightforward\u2014just as you can't deliver a letter that you don't have in your hand, the delivery person needs to have the newspaper with them to deliver it.\n\n2. **Effects: How do they follow from the preconditions?**\n   - The newspaper is no longer being carried by the delivery person (`not (carrying ?paper)`): Once the delivery is done, just like handing over a letter, the newspaper is no longer with the delivery person.\n   - The delivery location no longer wants the newspaper (`not (wants_Paper ?loc)`): The need for the newspaper has been met, similar to how your neighbor no longer waits for the letter once you've delivered it.\n   - The location is satisfied (`satisfied ?loc`): This indicates that the delivery was successful. The location got what it was waiting for, just like your neighbor feeling happy receiving the letter.\n\nIn summary, the action of delivering a newspaper in this PDDL model ensures that everything needed to complete a successful delivery is in place before the delivery starts, and once done, it updates the state to reflect the successful completion of the task. It's about making sure you have what you need, going where you need to go, and ensuring the task is completed as expected!\n                \n**Response:**\nParameters:\n1. ?from - loc: [short description of the parameter]\n2. ?to - loc: [short description of the parameter]\n\nPreconditions:\n```\n(at ?from)\n```\n\nEffects:\n```\n(and\n    (not (at ?from))\n    (at ?to)\n)\n```\n\n---\n", "type": "prompt"}
{"role": "user", "content": "Example 2\nAction Description: RoboDelivery wants to deliver the newspaper to a house (loc_house1).\nRoboDelivery performs the move action to go from loc_home to loc_house1.\n\n    Preconditions: RoboDelivery is at loc_home.\n    Effects: RoboDelivery is no longer at loc_home and is now at loc_house1.\n\nAction name: move\n\n\nYour answer:\n---\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:**\n\nImagine you're playing a game where you need to deliver newspapers to different houses in your neighborhood. Each turn in the game allows you to move from one house to another. The action of moving from one house to another in the game can be compared to an action in our newspaper delivery model.\n\nIn the scenario, the action is called \"move,\" and it involves a delivery person moving from a starting location to a destination. Let's break down why this action is modeled the way it is:\n\n1. **Parameters**: These are like placeholders or markers in our game. In the \"move\" action, the parameters are the Starting Location and the Destination. It's just like saying, \"I'm starting from my house and going to my friend's house.\"\n\n2. **Preconditions**: Before you can move from one house to another, you must be at the house you're starting from. It wouldn't make sense to say, \"I'm going from my house to my friend's house\" if you're actually at the grocery store, right? So, the precondition that the delivery person is at the starting location is crucial to make the action logical.\n\n3. **Effects**: After you move from your house to your friend's house, you are no longer at your house; you are now at your friend's house. That\u2019s what happens in our model, too. The effect of the move action is that the delivery person is no longer at the starting location and is now at the destination. This change is captured in the model by removing the state of being at the starting location (`not (at ?from)`) and adding the state of being at the destination (`(at ?to)`).\n\nSo, this action schema perfectly represents the simple yet essential task of moving from one point to another, ensuring that the game's rules are followed: you start from where you say you are, and you end up where you want to go. It's just like moving pieces on a board game, ensuring each move is valid based on where you are and where you want to be.\n                \n**Response:**\nParameters:\n1. ?paper - paper: [short description of the parameter]\n2. ?loc - loc: [short description of the parameter]\n\nPreconditions:\n```\n(and\n    (at ?loc)\n    (wants_Paper ?loc)\n    (carrying ?paper)\n)\n```\n\nEffects:\n```\n(and\n    (not (carrying ?paper))\n    (not (wants_Paper ?loc))\n    (satisfied ?loc)\n)\n```\n\n---\n", "type": "prompt"}
{"role": "user", "content": "Question: Here is the task.\nA natural language description of the domain\nDomain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape\n\nA list of available predicates\n1. (at-hero ?loc - cells) ;;  Hero's cell location\n2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location\n3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster\n4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap\n5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed\n6. (connected ?from ?to - cells) ;; connects cells\n7. (arm-free) ;; Hero's hand is free\n8. (holding ?s - swords) ;; Hero's holding a sword\n9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed\n\nAction Description: Hero can move if the - hero is at current location - cells are connected, - when this action is executed, the hero gets into a location with a trap\n\nAction name: move-to-trap\n\n\nYour answer:\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:**\n\nIn the given dungeon domain, the hero needs to navigate through rooms connected by corridors to find an exit. The action \"move-to-trap\" describes the hero moving into a room that contains a trap. For this action to be executed, certain conditions must be met, and certain outcomes must result from the action.\n\nThe preconditions ensure that the hero is in a position to move to another room. Specifically, the hero must be at the current location (`at-hero ?from`) and there must be a direct connection between the current location and the target location (`connected ?from ?to`). The action's effects describe the result of the hero moving into the room with a trap. The hero's location changes from the starting cell to the target cell (`at-hero ?to`).\n\nSince the action description specifies that when this action is executed, the hero gets into a location with a trap, we can infer that the target location (`?to`) has a trap (`has-trap ?to`). However, the presence of a trap in the target location is not a precondition for the action itself; it is an effect that is observed after the action is taken. This is because the hero might not know there is a trap in the next room until they move into it.\n\n**Response:**\nParameters:\n1. ?from - cells: [The cell where the hero is currently located]\n2. ?to - cells: [The cell where the hero will move to]\n\nPreconditions:\n```\n(and\n    (at-hero ?from)\n    (connected ?from ?to)\n)\n```\n\nEffects:\n```\n(and\n    (not (at-hero ?from))\n    (at-hero ?to)\n    (has-trap ?to)\n)\n```\n\nNote: The effect `(has-trap ?to)` is included here based on the action description, which specifies that the hero moves into a location with a trap. However, if the presence of a trap is not an effect of the action but rather a characteristic of the room that the hero moves into, then it should not be listed under effects. The effects should only reflect changes in the state caused by the action. If this is the case, the effects would simply be the change in the hero's location:\n\n```\n(and\n    (not (at-hero ?from))\n    (at-hero ?to)\n)\n```", "type": "response", "action": "move-to-trap"}
{"role": "system", "content": "# CONTEXT #\nYou are a tool called PDDL Modeling Assistant. You are a technical experts in constructing Planning Domain Definition Language (PDDL) models via the natural language context.\n# OBJECTIVE #\n* Construct parameters, preconditions and effects based on the domain information, action description and the action name.\n* All variables in the preconditions and effects must be listed in the action's parameters. This restriction helps maintain the action's scope and prevents ambiguity in the planning process.\n* Do not use predicates that are not defined in the available predicates list to construct the preconditions and effects.\n* When the natural language description is ambiguous or certain predicate changes are implied, make reasonable assumptions based on common sense to fill up the implicit predicate in the PDDL action.\n# STYLE #\nFollow the writing style of technical experts. The output can be parsed by a machine, so it is important to follow the structured format.\n# TONE #\nBe precise and concise in constructing the PDDL action. The PDDL action should be clear and unambiguous.\n# AUDIENCE #\nYour audience is someone who is trying to learn how to construct PDDL actions from natural language descriptions.\n# RESPONSE #\nThe response should be in the following format:\n---\n**Explanation:** [Your explanation here]\n\n**Response:**\nParameters:\n1. ?x - [type]: [parameter description]\n2. ...\n\nPreconditions:\n```\n(and\n    ([predicate_1] ?x)\n)\n```\n\nEffects:\n```\n(and\n    (not ([predicate_2] ?x))\n    ([predicate_2] ?x)\n    ...\n)\n```\n---\n", "type": "prompt"}
{"role": "user", "content": "One or two examples from other domains for illustrating the input and output formats.\nHere are two examples from the barman domain for demonstrating the output format.\n        \nDomain information: In this domain there is a robot barman that manipulates drink dispensers, glasses and a shaker. The goal is to find a plan of the robots actions that serves a desired set of drinks. In this domain deletes of actions encode relevant knowledge given that robot hands can only grasp one object at a time and given that glasses need to be empty and clean to be filled.\n\nA list of available predicates\n1. (ontable ?c - container) ;; the container is on the table\n2. (holding ?h - hand ?c - container) ;; the hand is holding the container\n3. (handempty ?h - hand) ;; the hand is empty\n4. (empty ?c - container) ;; the container is empty\n5. (contains ?c - container ?b - beverage) ;; the container contains the beverage\n6. (clean ?c - container) ;; the container is clean\n7. (used ?c - container ?b - beverage) ;; the container is used for the beverage\n8. (dispenses ?d - dispenser ?i - ingredient) ;; the dispenser dispenses the ingredient\n9. (shaker-empty-level ?s - shaker ?l - level) ;; the empty level of the shaker\n10. (shaker-level ?s - shaker ?l - level) ;; the shaker currently is at the level\n11. (next ?l1 ?l2 - level) ;; l2 is the next level after l1\n12. (unshaked ?s - shaker) ;; the shaker is unshaked\n13. (shaked ?s - shaker) ;; the shaker is shaked\n14. (cocktail-part1 ?c - cocktail ?i - ingredient) ;; the ingredient is part of the cocktail\n15. (cocktail-part2 ?c - cocktail ?i - ingredient) ;; the ingredient is part of the cocktail\nExample 1\nAction Description: The robot refills a shot glass with the same ingredient it previously contained.\n\nAction name: refill-shot\n\n\nYour answer:\n---\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:**\nLet's imagine a robot bartender named Robbie. Robbie's job is to make sure everyone gets their favorite drink, using shot glasses and different drink dispensers. Now, think about Robbie having to refill a shot glass with a specific ingredient. To do this smoothly, Robbie has to follow certain steps, and that's what the PDDL action schema is showing us.\n\n1. **Preconditions (The must-haves before starting):**\n   - Robbie must already be holding the shot glass with one hand (`holding ?h1 ?s`). This means Robbie's hand (`?h1`) is not empty because it's holding the shot glass (`?s`).\n   - The other hand (`?h2`) needs to be empty (`handempty ?h2`). This is important because Robbie might need to use this hand to operate the dispenser or do something else during the process.\n   - The dispenser that Robbie is going to use must dispense the ingredient Robbie needs (`dispenses ?d ?i`). This ensures that Robbie is at the right dispenser for the drink.\n   - The shot glass must be empty (`empty ?s`) before Robbie can refill it. We can't pour more into a full glass, right?\n   - The shot glass must have been used previously for the same ingredient (`used ?s ?i`). This tells us that it's okay to use the same glass for the same drink without mixing flavors.\n\n2. **Effects (What happens after Robbie follows the steps):**\n   - The shot glass is no longer empty (`not (empty ?s)`). It means Robbie has successfully refilled it.\n   - The shot glass now contains the ingredient it was supposed to be refilled with (`contains ?s ?i`). Now, the glass is ready to be served again with the same tasty drink.\n\nThis action schema helps Robbie remember exactly what needs to be checked and done to successfully refill a shot glass.\n                \n**Response:**\nParameters:\n1. ?s - shot: [short description of the parameter]\n2. ?i - ingredient: [short description of the parameter]\n3. ?h1 - hand: [short description of the parameter]\n4. ?h2 - hand: [short description of the parameter]\n5. ?d - dispenser: [short description of the parameter]\n\nPreconditions:\n```\n(and\n    (holding ?h1 ?s)\n    (handempty ?h2)\n    (dispenses ?d ?i)\n    (empty ?s)\n    (used ?s ?i)\n)\n```\n\nEffects:\n```\n(and\n    (not (empty ?s))\n    (contains ?s ?i)\n)\n```\n\n---\n", "type": "prompt"}
{"role": "user", "content": "Example 2\nAction Description: The robot empties a shot glass it's holding.\n\nAction name: empty-shot\n\n\nYour answer:\n---\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:**\nImagine a robot barman who has the job of preparing and serving drinks. Now, let\u2019s think about the action of the robot emptying a shot glass it is holding, which is named \"empty-shot\" in our planning scenario.\n\n**Why these preconditions?**\n1. The robot needs to be holding the shot glass. This is pretty straightforward: if the robot isn't holding the glass, it can\u2019t empty it. It\u2019s like you needing to hold a cup in your hand if you want to pour out its contents.\n2. The shot glass must contain a beverage. Again, this makes sense because if the glass is already empty, there's nothing to pour out!\n\n**How do these preconditions lead to the effects?**\n1. The effect that the shot glass no longer contains the beverage (`not (contains ?p ?b)`) directly follows from the action of emptying it. When you pour out a drink, the cup turns from being full to being empty.\n2. The shot glass is then marked as empty (`empty ?p`). This tells everyone (or every robot and system involved) that the glass is now ready to be used again, perhaps to be refilled or cleaned.\n\nSo, by ensuring the robot is holding a shot glass that contains a drink, and by performing the action of emptying it, the robot effectively makes the shot glass available for the next use, fulfilling its role as a bartender robot. It's like making sure a painter has a clean brush to start a new painting, ensuring the right tools are ready for the next task.\n                \n**Response:**\nParameters:\n1. ?h - hand: [short description of the parameter]\n2. ?p - shot: [short description of the parameter]\n3. ?b - beverage: [short description of the parameter]\n\nPreconditions:\n```\n(and\n    (holding ?h ?p)\n    (contains ?p ?b)\n)\n```\n\nEffects:\n```\n(and\n    (not (contains ?p ?b))\n    (empty ?p)\n)\n```\n\n---\n", "type": "prompt"}
{"role": "user", "content": "Here are two examples from the newspapers domain for demonstrating the output format.\n        \nDomain information: This domain is structured to model a simple newspaper delivery system, where the main tasks involve picking up newspapers from a home base, moving to different locations, and delivering the papers to locations that require them.\n\nA list of available predicates\n1. (at ?loc - loc) ;; the agent is at loc location\n2. (is_Home_Base ?loc - loc) ;; the location is the home base\n3. (satisfied ?loc - loc) ;; the location has received the newspaper\n4. (wants_Paper ?loc - loc) ;; the location needs a newspaper\n5. (unpacked ?paper - paper) ;; the paper is unpacked\n6. (carrying ?paper - paper) ;; the agent is carrying the paper\nExample 1\nAction Description: RoboDelivery is at the home base (loc_home).\nThere is an unpacked newspaper (paper1) at the home base.\nRoboDelivery performs the pick-up action.\n\n    Preconditions: RoboDelivery is at loc_home (which is the home base), and paper1 is unpacked.\n    Effects: RoboDelivery is now carrying paper1, and paper1 is no longer unpacked.\n\nAction name: pick-up\n\n\nYour answer:\n---\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:**\n\nLet's imagine a situation where someone, like a delivery person, needs to pick up newspapers from a place, like a home base, and deliver them to various locations. This situation can be broken down into smaller, specific steps to make it easy for a computer to understand and execute. This is where the action schema you mentioned comes into play.\n\nThe action is called \"pick-up,\" and it involves the delivery person picking up newspapers to deliver. This action is defined in a language called PDDL, which is like giving a computer a recipe to follow.\n\n1. **Parameters**: These are like ingredients in a recipe. Here, the ingredients are any newspaper (`?paper`) and a location (`?loc`), which in this scenario is the home base.\n\n2. **Preconditions**: These are conditions that must be true before the action can start. Think of it like checking if you have all your ingredients before you start cooking.\n   - `(at ?loc)`: The delivery person must be at the location specified (`?loc`). This makes sure they are actually at the home base to pick up the newspapers.\n   - `(is_Home_Base ?loc)`: The location where they are must be the home base. This is crucial because newspapers ready to be delivered are stored here.\n   - `(unpacked ?paper)`: The newspapers need to be unpacked and ready to be picked up. It ensures the newspapers are not in boxes or still bundled up, making them easy to grab and go.\n\n3. **Effects**: These describe what happens after the action is completed.\n   - `(not (unpacked ?paper))`: The newspaper is no longer in an unpacked state at the base because it has been picked up.\n   - `(carrying ?paper)`: The newspaper is now being carried by the delivery person, ready to be delivered to someone who needs it.\n\nThis schema helps the computer understand exactly what needs to happen when the \"pick-up\" action is called in the program. By specifying preconditions, we ensure the action makes sense (you can't pick up a newspaper if you're not there or if the papers aren't ready). The effects tell the computer how the world changes after the action, like the newspaper moving from being unpacked at the base to being carried for delivery.\n\nBy breaking down tasks this way, we help the computer efficiently and correctly handle tasks that seem simple to us but are quite detailed when programmed.\n                \n**Response:**\nParameters:\n1. ?paper - paper: [short description of the parameter]\n2. ?loc - loc: [short description of the parameter]\n\nPreconditions:\n```\n(and\n    (at ?loc)\n    (wants_Paper ?loc)\n    (carrying ?paper)\n)\n```\n\nEffects:\n```\n(and\n    (not (carrying ?paper))\n    (not (wants_Paper ?loc))\n    (satisfied ?loc)\n)\n```\n\n---\n", "type": "prompt"}
{"role": "user", "content": "Example 2\nAction Description: The house at loc_house1 wants a newspaper.\nRoboDelivery performs the deliver action to give paper1 to the house.\n\n    Preconditions: RoboDelivery is at loc_house1, the house wants a newspaper, and RoboDelivery is carrying paper1.\n    Effects: RoboDelivery is no longer carrying paper1, the house at loc_house1 no longer wants a newspaper, and the house at loc_house1 is satisfied.\n\nAction name: deliver\n\n\nYour answer:\n---\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:**\n\nLet's think of the action of delivering a newspaper like a simple task you might do every day, like delivering a letter to your neighbor. The description given helps us understand how a delivery person can complete their job of delivering newspapers effectively in a systematic way, which is where the PDDL (a planning language) comes into play.\n\n1. **Preconditions: Why are they necessary?**\n   - The delivery person must be at the right location (`at ?loc`): Just like if you were to deliver a letter to your neighbor, you need to be at their house, not yours! This ensures the newspaper is delivered to the correct place.\n   - The delivery location wants a newspaper (`wants_Paper ?loc`): This makes sure that the delivery person is not just going around giving out newspapers to places that don't need them. It\u2019s like checking if your neighbor actually needs the letter before you walk over.\n   - The delivery person must be carrying the newspaper (`carrying ?paper`): This is pretty straightforward\u2014just as you can't deliver a letter that you don't have in your hand, the delivery person needs to have the newspaper with them to deliver it.\n\n2. **Effects: How do they follow from the preconditions?**\n   - The newspaper is no longer being carried by the delivery person (`not (carrying ?paper)`): Once the delivery is done, just like handing over a letter, the newspaper is no longer with the delivery person.\n   - The delivery location no longer wants the newspaper (`not (wants_Paper ?loc)`): The need for the newspaper has been met, similar to how your neighbor no longer waits for the letter once you've delivered it.\n   - The location is satisfied (`satisfied ?loc`): This indicates that the delivery was successful. The location got what it was waiting for, just like your neighbor feeling happy receiving the letter.\n\nIn summary, the action of delivering a newspaper in this PDDL model ensures that everything needed to complete a successful delivery is in place before the delivery starts, and once done, it updates the state to reflect the successful completion of the task. It's about making sure you have what you need, going where you need to go, and ensuring the task is completed as expected!\n                \n**Response:**\nParameters:\n1. ?paper - paper: [short description of the parameter]\n2. ?loc - loc: [short description of the parameter]\n\nPreconditions:\n```\n(and\n    (at ?loc)\n    (is_Home_Base ?loc)\n    (unpacked ?paper)\n)\n```\n\nEffects:\n```\n(and\n    (not (unpacked ?paper))\n    (carrying ?paper)\n)\n```\n\n---\n", "type": "prompt"}
{"role": "user", "content": "Question: Here is the task.\nA natural language description of the domain\nDomain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape\n\nA list of available predicates\n1. (at-hero ?loc - cells) ;;  Hero's cell location\n2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location\n3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster\n4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap\n5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed\n6. (connected ?from ?to - cells) ;; connects cells\n7. (arm-free) ;; Hero's hand is free\n8. (holding ?s - swords) ;; Hero's holding a sword\n9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed\n\nAction Description: Hero's destroys his sword. So that he is arm-free and can disarm traps in the future if required. \n\nAction name: destroy-sword\n\n\nYour answer:\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:**\n\nIn the given dungeon domain, the hero needs to navigate through rooms connected by corridors, dealing with monsters, traps, and helpful items like swords. The action \"destroy-sword\" is a strategic move where the hero decides to destroy a sword they are holding, possibly to free up their hands for other tasks such as disarming traps.\n\nThe preconditions for this action are straightforward: the hero must be holding a sword. This is because you cannot destroy a sword if you are not carrying one. The effects of this action are that the sword is no longer in the hero's possession, and the hero's arm is now free, which may be necessary for other actions such as disarming traps.\n\n**Response:**\nParameters:\n1. ?s - swords: [Identifies the specific sword that the hero is going to destroy]\n\nPreconditions:\n```\n(and\n    (holding ?s)\n)\n```\n\nEffects:\n```\n(and\n    (not (holding ?s))\n    (arm-free)\n    (is-destroyed ?s)\n)\n```\n\nThis action schema ensures that the hero can only destroy a sword that they are currently holding, and once destroyed, the sword cannot be used or held anymore, and the hero's arm is free for other actions.", "type": "response", "action": "destroy-sword"}
{"role": "system", "content": "# CONTEXT #\nYou are a tool called PDDL Modeling Assistant. You are a technical experts in constructing Planning Domain Definition Language (PDDL) models via the natural language context.\n# OBJECTIVE #\n* Construct parameters, preconditions and effects based on the domain information, action description and the action name.\n* All variables in the preconditions and effects must be listed in the action's parameters. This restriction helps maintain the action's scope and prevents ambiguity in the planning process.\n* Do not use predicates that are not defined in the available predicates list to construct the preconditions and effects.\n* When the natural language description is ambiguous or certain predicate changes are implied, make reasonable assumptions based on common sense to fill up the implicit predicate in the PDDL action.\n# STYLE #\nFollow the writing style of technical experts. The output can be parsed by a machine, so it is important to follow the structured format.\n# TONE #\nBe precise and concise in constructing the PDDL action. The PDDL action should be clear and unambiguous.\n# AUDIENCE #\nYour audience is someone who is trying to learn how to construct PDDL actions from natural language descriptions.\n# RESPONSE #\nThe response should be in the following format:\n---\n**Explanation:** [Your explanation here]\n\n**Response:**\nParameters:\n1. ?x - [type]: [parameter description]\n2. ...\n\nPreconditions:\n```\n(and\n    ([predicate_1] ?x)\n)\n```\n\nEffects:\n```\n(and\n    (not ([predicate_2] ?x))\n    ([predicate_2] ?x)\n    ...\n)\n```\n---\n", "type": "prompt"}
{"role": "user", "content": "One or two examples from other domains for illustrating the input and output formats.\nHere are two examples from the barman domain for demonstrating the output format.\n        \nDomain information: In this domain there is a robot barman that manipulates drink dispensers, glasses and a shaker. The goal is to find a plan of the robots actions that serves a desired set of drinks. In this domain deletes of actions encode relevant knowledge given that robot hands can only grasp one object at a time and given that glasses need to be empty and clean to be filled.\n\nA list of available predicates\n1. (ontable ?c - container) ;; the container is on the table\n2. (holding ?h - hand ?c - container) ;; the hand is holding the container\n3. (handempty ?h - hand) ;; the hand is empty\n4. (empty ?c - container) ;; the container is empty\n5. (contains ?c - container ?b - beverage) ;; the container contains the beverage\n6. (clean ?c - container) ;; the container is clean\n7. (used ?c - container ?b - beverage) ;; the container is used for the beverage\n8. (dispenses ?d - dispenser ?i - ingredient) ;; the dispenser dispenses the ingredient\n9. (shaker-empty-level ?s - shaker ?l - level) ;; the empty level of the shaker\n10. (shaker-level ?s - shaker ?l - level) ;; the shaker currently is at the level\n11. (next ?l1 ?l2 - level) ;; l2 is the next level after l1\n12. (unshaked ?s - shaker) ;; the shaker is unshaked\n13. (shaked ?s - shaker) ;; the shaker is shaked\n14. (cocktail-part1 ?c - cocktail ?i - ingredient) ;; the ingredient is part of the cocktail\n15. (cocktail-part2 ?c - cocktail ?i - ingredient) ;; the ingredient is part of the cocktail\nExample 1\nAction Description: The robot uses a hand to pick up a container from the table.\n\nAction name: grasp\n\n\nYour answer:\n---\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:**\nImagine a robot bartender at a busy party, tasked with making a variety of drinks. This robot, like a human bartender, has hands that it uses to pick up things like glasses or shakers.\n\nIn the scenario we're discussing, the action we're focusing on is called \"grasp,\" where the robot uses its hand to pick up a container from a table. Let's break down why certain conditions need to be met for this action to happen successfully and what happens after the robot performs this action.\n\n**Why the preconditions are necessary:**\n1. **The container must be on the table (ontable ?c):** This makes sense because if the container isn't on the table, the robot wouldn't know where to find it. It needs to be in a predictable location that the robot can access.\n2. **The robot's hand must be empty (handempty ?h):** Before the robot can pick up something new, its hand needs to be empty. Just like you can't pick up a cup of coffee if you're already holding an apple in your hand, the robot needs a free hand to pick up a new container.\n\n**What happens after the action (effects):**\n1. **The container is no longer on the table (not (ontable ?c)):** Once the robot picks up the container, it's no longer sitting on the table. It's in the robot's hand.\n2. **The robot's hand is no longer empty (not (handempty ?h)):** With the container in its hand, the hand isn't empty anymore.\n3. **The robot's hand is holding the container (holding ?h ?c):** This describes the new status of the robot\u2019s hand\u2014it is actively holding onto the container.\n\nSo, in this action, we see the robot checking that the container is where it's supposed to be and making sure its hand is ready to pick something up. Once those conditions are met, the robot can safely pick up the container, changing both the status of the container and the status of its hand. This is very practical and logical, ensuring that the robot operates efficiently and correctly in its environment of serving drinks at the party.\n\nThis action schema helps in planning out the robot's movements in a logical sequence, ensuring it always knows what to do next, based on simple checks and changes (preconditions and effects).\n                \n**Response:**\nParameters:\n1. ?s - shot: [short description of the parameter]\n2. ?b - beverage: [short description of the parameter]\n3. ?h1 - hand: [short description of the parameter]\n4. ?h2 - hand: [short description of the parameter]\n\nPreconditions:\n```\n(and\n    (holding ?h1 ?s)\n    (handempty ?h2)\n    (empty ?s)\n    (used ?s ?b)\n)\n```\n\nEffects:\n```\n(and\n    (not (used ?s ?b))\n    (clean ?s)\n)\n```\n\n---\n", "type": "prompt"}
{"role": "user", "content": "Example 2\nAction Description: The robot cleans a used shot glass.\n\nAction name: clean-shot\n\n\nYour answer:\n---\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:**\n\nLet's imagine our robot barman is preparing drinks in a bar where it must handle different glasses, like a shot glass. The robot needs to clean a used shot glass to make sure it's ready for the next drink. This situation leads us to create an action called `clean-shot` in the robot's planning.\n\nFirst, the robot needs to make sure it's holding the shot glass with one hand (`holding ?h1 ?s`). This makes sense because you need to hold the glass to clean it properly.\n\nNext, the robot needs to have its other hand free (`handempty ?h2`). This is important because the robot might need to use this hand to operate cleaning tools or to stabilize the glass while cleaning.\n\nThe glass itself must be empty (`empty ?s`) before it can be cleaned. Imagine trying to clean a glass while it's still full of liquid; it would be messy and ineffective!\n\nLastly, the glass should have been used (`used ?s ?b`), indicating it was previously filled with a drink and now requires cleaning. This precondition checks whether the glass actually needs cleaning.\n\nOnce all these conditions are met, the robot can proceed with the cleaning action. The effect of this action is twofold: the shot glass is no longer 'used' for the specific beverage (`not (used ?s ?b)`), and the glass becomes clean (`clean ?s`).\n\nBy setting these preconditions and effects, we ensure that the robot performs the cleaning task effectively and prepares the glass for future use, maintaining a smooth operation in the bar scenario.\n                \n**Response:**\nParameters:\n1. ?h - hand: [short description of the parameter]\n2. ?c - container: [short description of the parameter]\n\nPreconditions:\n```\n(and\n    (ontable ?c)\n    (handempty ?h)\n)\n```\n\nEffects:\n```\n(and\n    (not (ontable ?c))\n    (not (handempty ?h))\n    (holding ?h ?c)\n)\n```\n\n---\n", "type": "prompt"}
{"role": "user", "content": "Here are two examples from the newspapers domain for demonstrating the output format.\n        \nDomain information: This domain is structured to model a simple newspaper delivery system, where the main tasks involve picking up newspapers from a home base, moving to different locations, and delivering the papers to locations that require them.\n\nA list of available predicates\n1. (at ?loc - loc) ;; the agent is at loc location\n2. (is_Home_Base ?loc - loc) ;; the location is the home base\n3. (satisfied ?loc - loc) ;; the location has received the newspaper\n4. (wants_Paper ?loc - loc) ;; the location needs a newspaper\n5. (unpacked ?paper - paper) ;; the paper is unpacked\n6. (carrying ?paper - paper) ;; the agent is carrying the paper\nExample 1\nAction Description: RoboDelivery is at the home base (loc_home).\nThere is an unpacked newspaper (paper1) at the home base.\nRoboDelivery performs the pick-up action.\n\n    Preconditions: RoboDelivery is at loc_home (which is the home base), and paper1 is unpacked.\n    Effects: RoboDelivery is now carrying paper1, and paper1 is no longer unpacked.\n\nAction name: pick-up\n\n\nYour answer:\n---\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:**\n\nLet's imagine a situation where someone, like a delivery person, needs to pick up newspapers from a place, like a home base, and deliver them to various locations. This situation can be broken down into smaller, specific steps to make it easy for a computer to understand and execute. This is where the action schema you mentioned comes into play.\n\nThe action is called \"pick-up,\" and it involves the delivery person picking up newspapers to deliver. This action is defined in a language called PDDL, which is like giving a computer a recipe to follow.\n\n1. **Parameters**: These are like ingredients in a recipe. Here, the ingredients are any newspaper (`?paper`) and a location (`?loc`), which in this scenario is the home base.\n\n2. **Preconditions**: These are conditions that must be true before the action can start. Think of it like checking if you have all your ingredients before you start cooking.\n   - `(at ?loc)`: The delivery person must be at the location specified (`?loc`). This makes sure they are actually at the home base to pick up the newspapers.\n   - `(is_Home_Base ?loc)`: The location where they are must be the home base. This is crucial because newspapers ready to be delivered are stored here.\n   - `(unpacked ?paper)`: The newspapers need to be unpacked and ready to be picked up. It ensures the newspapers are not in boxes or still bundled up, making them easy to grab and go.\n\n3. **Effects**: These describe what happens after the action is completed.\n   - `(not (unpacked ?paper))`: The newspaper is no longer in an unpacked state at the base because it has been picked up.\n   - `(carrying ?paper)`: The newspaper is now being carried by the delivery person, ready to be delivered to someone who needs it.\n\nThis schema helps the computer understand exactly what needs to happen when the \"pick-up\" action is called in the program. By specifying preconditions, we ensure the action makes sense (you can't pick up a newspaper if you're not there or if the papers aren't ready). The effects tell the computer how the world changes after the action, like the newspaper moving from being unpacked at the base to being carried for delivery.\n\nBy breaking down tasks this way, we help the computer efficiently and correctly handle tasks that seem simple to us but are quite detailed when programmed.\n                \n**Response:**\nParameters:\n1. ?paper - paper: [short description of the parameter]\n2. ?loc - loc: [short description of the parameter]\n\nPreconditions:\n```\n(and\n    (at ?loc)\n    (wants_Paper ?loc)\n    (carrying ?paper)\n)\n```\n\nEffects:\n```\n(and\n    (not (carrying ?paper))\n    (not (wants_Paper ?loc))\n    (satisfied ?loc)\n)\n```\n\n---\n", "type": "prompt"}
{"role": "user", "content": "Example 2\nAction Description: The house at loc_house1 wants a newspaper.\nRoboDelivery performs the deliver action to give paper1 to the house.\n\n    Preconditions: RoboDelivery is at loc_house1, the house wants a newspaper, and RoboDelivery is carrying paper1.\n    Effects: RoboDelivery is no longer carrying paper1, the house at loc_house1 no longer wants a newspaper, and the house at loc_house1 is satisfied.\n\nAction name: deliver\n\n\nYour answer:\n---\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:**\n\nLet's think of the action of delivering a newspaper like a simple task you might do every day, like delivering a letter to your neighbor. The description given helps us understand how a delivery person can complete their job of delivering newspapers effectively in a systematic way, which is where the PDDL (a planning language) comes into play.\n\n1. **Preconditions: Why are they necessary?**\n   - The delivery person must be at the right location (`at ?loc`): Just like if you were to deliver a letter to your neighbor, you need to be at their house, not yours! This ensures the newspaper is delivered to the correct place.\n   - The delivery location wants a newspaper (`wants_Paper ?loc`): This makes sure that the delivery person is not just going around giving out newspapers to places that don't need them. It\u2019s like checking if your neighbor actually needs the letter before you walk over.\n   - The delivery person must be carrying the newspaper (`carrying ?paper`): This is pretty straightforward\u2014just as you can't deliver a letter that you don't have in your hand, the delivery person needs to have the newspaper with them to deliver it.\n\n2. **Effects: How do they follow from the preconditions?**\n   - The newspaper is no longer being carried by the delivery person (`not (carrying ?paper)`): Once the delivery is done, just like handing over a letter, the newspaper is no longer with the delivery person.\n   - The delivery location no longer wants the newspaper (`not (wants_Paper ?loc)`): The need for the newspaper has been met, similar to how your neighbor no longer waits for the letter once you've delivered it.\n   - The location is satisfied (`satisfied ?loc`): This indicates that the delivery was successful. The location got what it was waiting for, just like your neighbor feeling happy receiving the letter.\n\nIn summary, the action of delivering a newspaper in this PDDL model ensures that everything needed to complete a successful delivery is in place before the delivery starts, and once done, it updates the state to reflect the successful completion of the task. It's about making sure you have what you need, going where you need to go, and ensuring the task is completed as expected!\n                \n**Response:**\nParameters:\n1. ?paper - paper: [short description of the parameter]\n2. ?loc - loc: [short description of the parameter]\n\nPreconditions:\n```\n(and\n    (at ?loc)\n    (is_Home_Base ?loc)\n    (unpacked ?paper)\n)\n```\n\nEffects:\n```\n(and\n    (not (unpacked ?paper))\n    (carrying ?paper)\n)\n```\n\n---\n", "type": "prompt"}
{"role": "user", "content": "Question: Here is the task.\nA natural language description of the domain\nDomain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape\n\nA list of available predicates\n1. (at-hero ?loc - cells) ;;  Hero's cell location\n2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location\n3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster\n4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap\n5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed\n6. (connected ?from ?to - cells) ;; connects cells\n7. (arm-free) ;; Hero's hand is free\n8. (holding ?s - swords) ;; Hero's holding a sword\n9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed\n\nAction Description: Hero can move if the - hero is at current location - cells are connected, - there is no trap in current loc, and - destination does not have a trap/monster/has-been-destroyed Effects move the hero, and destroy the original cell. No need to destroy the sword.\n\nAction name: move\n\n\nYour answer:\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:**\n\nIn the given dungeon domain, the hero needs to navigate through a series of rooms connected by corridors to find an exit. The action \"move\" is crucial for the hero to progress through the dungeon. This action involves the hero moving from one room to another under certain conditions.\n\nThe preconditions for the \"move\" action ensure that the hero can safely move from one room to another. The hero must be at the current location (`at-hero ?loc`), the destination room must be connected to the current room (`connected ?from ?to`), there must be no trap in the current room (`not (has-trap ?loc)`), and the destination room must not have any monsters, traps, or be destroyed (`not (has-monster ?to)`, `not (has-trap ?to)`, `not (is-destroyed ?to)`).\n\nThe effects of the action update the state of the dungeon to reflect the hero's new location and the fact that the hero has left the previous room. The hero's location changes from the current room to the destination room (`at-hero ?to`), and the current room is considered destroyed (`is-destroyed ?loc`). However, the action does not destroy the sword if there is one in the room.\n\nThis action schema allows the planning system to generate a sequence of moves that will lead the hero to the exit of the dungeon while avoiding monsters and traps.\n\n**Response:**\nParameters:\n1. ?from - cells: [The cell where the hero is currently located]\n2. ?to - cells: [The cell where the hero wants to move to]\n\nPreconditions:\n```\n(and\n    (at-hero ?from)\n    (connected ?from ?to)\n    (not (has-trap ?from))\n    (not (has-monster ?to))\n    (not (has-trap ?to))\n    (not (is-destroyed ?to))\n)\n```\n\nEffects:\n```\n(and\n    (not (at-hero ?from))\n    (at-hero ?to)\n    (is-destroyed ?from)\n)\n```\n\nNote: The effects do not include destroying the sword because the action description specifies that there is no need to destroy the sword. If the hero is holding a sword, it will remain with the hero after the move.", "type": "response", "action": "move"}
