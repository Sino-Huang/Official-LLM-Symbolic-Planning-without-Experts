{"role": "system", "content": "# CONTEXT #\nYou are a tool called PDDL Modeling Assistant. You are a technical experts in constructing Planning Domain Definition Language (PDDL) models via the natural language context.\n# OBJECTIVE #\n* Construct parameters, preconditions and effects based on the domain information, action description and the action name.\n* All variables in the preconditions and effects must be listed in the action's parameters. This restriction helps maintain the action's scope and prevents ambiguity in the planning process.\n* Do not use predicates that are not defined in the available predicates list to construct the preconditions and effects.\n* When the natural language description is ambiguous or certain predicate changes are implied, make reasonable assumptions based on common sense to fill up the implicit predicate in the PDDL action.\n# STYLE #\nFollow the writing style of technical experts. The output can be parsed by a machine, so it is important to follow the structured format.\n# TONE #\nBe precise and concise in constructing the PDDL action. The PDDL action should be clear and unambiguous.\n# AUDIENCE #\nYour audience is someone who is trying to learn how to construct PDDL actions from natural language descriptions.\n# RESPONSE #\nThe response should be in the following format:\n---\n**Explanation:** [Your explanation here]\n\n**Response:**\nParameters:\n1. ?x - [type]: [parameter description]\n2. ...\n\nPreconditions:\n```\n(and\n    ([predicate_1] ?x)\n)\n```\n\nEffects:\n```\n(and\n    (not ([predicate_2] ?x))\n    ([predicate_2] ?x)\n    ...\n)\n```\n---\n", "type": "prompt"}
{"role": "user", "content": "One or two examples from other domains for illustrating the input and output formats.\nHere are two examples from the newspapers domain for demonstrating the output format.\n        \nDomain information: This domain is structured to model a simple newspaper delivery system, where the main tasks involve picking up newspapers from a home base, moving to different locations, and delivering the papers to locations that require them.\n\nA list of available predicates\n1. (at ?loc - loc) ;; the agent is at loc location\n2. (is_Home_Base ?loc - loc) ;; the location is the home base\n3. (satisfied ?loc - loc) ;; the location has received the newspaper\n4. (wants_Paper ?loc - loc) ;; the location needs a newspaper\n5. (unpacked ?paper - paper) ;; the paper is unpacked\n6. (carrying ?paper - paper) ;; the agent is carrying the paper\nExample 1\nAction Description: RoboDelivery wants to deliver the newspaper to a house (loc_house1).\nRoboDelivery performs the move action to go from loc_home to loc_house1.\n\n    Preconditions: RoboDelivery is at loc_home.\n    Effects: RoboDelivery is no longer at loc_home and is now at loc_house1.\n\nAction name: move\n\n\nYour answer:\n---\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:**\n\nImagine you're playing a game where you need to deliver newspapers to different houses in your neighborhood. Each turn in the game allows you to move from one house to another. The action of moving from one house to another in the game can be compared to an action in our newspaper delivery model.\n\nIn the scenario, the action is called \"move,\" and it involves a delivery person moving from a starting location to a destination. Let's break down why this action is modeled the way it is:\n\n1. **Parameters**: These are like placeholders or markers in our game. In the \"move\" action, the parameters are the Starting Location and the Destination. It's just like saying, \"I'm starting from my house and going to my friend's house.\"\n\n2. **Preconditions**: Before you can move from one house to another, you must be at the house you're starting from. It wouldn't make sense to say, \"I'm going from my house to my friend's house\" if you're actually at the grocery store, right? So, the precondition that the delivery person is at the starting location is crucial to make the action logical.\n\n3. **Effects**: After you move from your house to your friend's house, you are no longer at your house; you are now at your friend's house. That\u2019s what happens in our model, too. The effect of the move action is that the delivery person is no longer at the starting location and is now at the destination. This change is captured in the model by removing the state of being at the starting location (`not (at ?from)`) and adding the state of being at the destination (`(at ?to)`).\n\nSo, this action schema perfectly represents the simple yet essential task of moving from one point to another, ensuring that the game's rules are followed: you start from where you say you are, and you end up where you want to go. It's just like moving pieces on a board game, ensuring each move is valid based on where you are and where you want to be.\n                \n**Response:**\nParameters:\n1. ?from - loc: [short description of the parameter]\n2. ?to - loc: [short description of the parameter]\n\nPreconditions:\n```\n(at ?from)\n```\n\nEffects:\n```\n(and\n    (not (at ?from))\n    (at ?to)\n)\n```\n\n---\n", "type": "prompt"}
{"role": "user", "content": "Example 2\nAction Description: RoboDelivery is at the home base (loc_home).\nThere is an unpacked newspaper (paper1) at the home base.\nRoboDelivery performs the pick-up action.\n\n    Preconditions: RoboDelivery is at loc_home (which is the home base), and paper1 is unpacked.\n    Effects: RoboDelivery is now carrying paper1, and paper1 is no longer unpacked.\n\nAction name: pick-up\n\n\nYour answer:\n---\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:**\n\nLet's imagine a situation where someone, like a delivery person, needs to pick up newspapers from a place, like a home base, and deliver them to various locations. This situation can be broken down into smaller, specific steps to make it easy for a computer to understand and execute. This is where the action schema you mentioned comes into play.\n\nThe action is called \"pick-up,\" and it involves the delivery person picking up newspapers to deliver. This action is defined in a language called PDDL, which is like giving a computer a recipe to follow.\n\n1. **Parameters**: These are like ingredients in a recipe. Here, the ingredients are any newspaper (`?paper`) and a location (`?loc`), which in this scenario is the home base.\n\n2. **Preconditions**: These are conditions that must be true before the action can start. Think of it like checking if you have all your ingredients before you start cooking.\n   - `(at ?loc)`: The delivery person must be at the location specified (`?loc`). This makes sure they are actually at the home base to pick up the newspapers.\n   - `(is_Home_Base ?loc)`: The location where they are must be the home base. This is crucial because newspapers ready to be delivered are stored here.\n   - `(unpacked ?paper)`: The newspapers need to be unpacked and ready to be picked up. It ensures the newspapers are not in boxes or still bundled up, making them easy to grab and go.\n\n3. **Effects**: These describe what happens after the action is completed.\n   - `(not (unpacked ?paper))`: The newspaper is no longer in an unpacked state at the base because it has been picked up.\n   - `(carrying ?paper)`: The newspaper is now being carried by the delivery person, ready to be delivered to someone who needs it.\n\nThis schema helps the computer understand exactly what needs to happen when the \"pick-up\" action is called in the program. By specifying preconditions, we ensure the action makes sense (you can't pick up a newspaper if you're not there or if the papers aren't ready). The effects tell the computer how the world changes after the action, like the newspaper moving from being unpacked at the base to being carried for delivery.\n\nBy breaking down tasks this way, we help the computer efficiently and correctly handle tasks that seem simple to us but are quite detailed when programmed.\n                \n**Response:**\nParameters:\n1. ?paper - paper: [short description of the parameter]\n2. ?loc - loc: [short description of the parameter]\n\nPreconditions:\n```\n(and\n    (at ?loc)\n    (is_Home_Base ?loc)\n    (unpacked ?paper)\n)\n```\n\nEffects:\n```\n(and\n    (not (unpacked ?paper))\n    (carrying ?paper)\n)\n```\n\n---\n", "type": "prompt"}
{"role": "user", "content": "Here are two examples from the childsnack domain for demonstrating the output format.\n        \nDomain information: This domain is to plan how to make and serve sandwiches for a group of children in which some are allergic to gluten. There are two actions for making sandwiches from their ingredients. The first one makes a sandwich and the second one makes a sandwich taking into account that all ingredients are gluten-free. There are also actions to put a sandwich on a tray and to serve sandwiches. Problems in this domain define the ingredients to make sandwiches at the initial state. Goals consist of having all kids served with a sandwich to which they are not allergic.\n\nA list of available predicates\n1. (at_kitchen_bread ?b - bread-portion) ;; the bread portion is at the kitchen\n2. (at_kitchen_content ?c - content-portion) ;; the content portion is at the kitchen\n3. (at_kitchen_sandwich ?s - sandwich) ;; the sandwich is at the kitchen\n4. (no_gluten_bread ?b - bread-portion) ;; the bread portion is gluten-free\n5. (no_gluten_content ?c - content-portion) ;; the content portion is gluten-free\n6. (ontray ?s - sandwich ?t - tray) ;; the sandwich is on the tray\n7. (no_gluten_sandwich ?s - sandwich) ;; the sandwich is gluten-free\n8. (allergic_gluten ?c - child) ;; the child is allergic to gluten\n9. (not_allergic_gluten ?c - child) ;; the child is not allergic to gluten\n10. (served ?c - child) ;; the child is served\n11. (waiting ?c - child ?p - place) ;; the child is waiting at the place\n12. (at ?t - tray ?p - place) ;; the tray is at the place\n13. (not_exist ?s - sandwich) ;; the sandwich does not exist\nExample 1\nAction Description: Moves a tray from one place to another.\n\nAction name: move_tray\n\n\nYour answer:\n---\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:**\n\nImagine you have a tray of sandwiches in the kitchen, and you need to move it to the dining room where the children are waiting to eat. This situation in real life is similar to what the action \"move_tray\" does in the planning domain for making and serving sandwiches.\n\nIn this action, the tray starts in one place (let's call this the kitchen, or \"place1\"). The goal is to move it to another place (say, the dining room, or \"place2\"). The action \"move_tray\" helps us describe this movement step-by-step in a computer program that plans out tasks.\n\nHere\u2019s why the parts of this action make sense:\n1. **Parameters:** The action needs to know three things:\n   - Which tray are we moving? (That's ?t - tray)\n   - Where is the tray right now? (That's ?p1 - place)\n   - Where do we want to move the tray to? (That's ?p2 - place)\n\n2. **Precondition:** Before we can move the tray, we need to make sure it's actually at the starting place (?p1). This is like checking to see if the tray is really in the kitchen before we try to take it to the dining room.\n\n3. **Effect:** After moving the tray, two things happen:\n   - The tray is no longer at the starting place (?p1). This is like saying, \"It\u2019s not in the kitchen anymore.\"\n   - The tray is now at the new place (?p2). This means, \"It\u2019s now in the dining room.\"\n\nThese steps in the action make sure that the computer program understands exactly where the tray is before and after moving it, just like how you would keep track of where you've put something important.\n\nSo, in simple terms, the \"move_tray\" action tells the computer how to move a tray from one place to another in a planned and orderly way, ensuring the tray ends up right where it needs to be for the children to get their sandwiches.\n                \n**Response:**\nParameters:\n1. ?s - sandwich: [short description of the parameter]\n2. ?c - child: [short description of the parameter]\n3. ?t - tray: [short description of the parameter]\n4. ?p - place: [short description of the parameter]\n\nPreconditions:\n```\n(and\n    (allergic_gluten ?c)\n    (ontray ?s ?t)\n    (waiting ?c ?p)\n    (no_gluten_sandwich ?s)\n    (at ?t ?p)\n)\n```\n\nEffects:\n```\n(and\n    (not (ontray ?s ?t))\n    (served ?c)\n)\n```\n\n---\n", "type": "prompt"}
{"role": "user", "content": "Example 2\nAction Description: Serves a gluten-free sandwich to a child allergic to gluten, who is waiting at a specific place. Removes the sandwich from the tray.\n\nAction name: serve_sandwich_no_gluten\n\n\nYour answer:\n---\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:**\nImagine you're at a fun picnic where some kids need special gluten-free sandwiches because they're allergic to gluten. In our plan, there's a special task called `serve_sandwich_no_gluten`, which is like a set of instructions to make sure these kids get the right sandwich safely and happily.\n\n1. **Understanding the Ingredients and the Setting**:\n   - **Child and Place**: First, we need a child who is allergic to gluten and waiting at a specific place.\n   - **Sandwich and Tray**: We also need a sandwich that is gluten-free and placed on a tray.\n   - **Tray's Location**: The tray with the sandwich needs to be at the same place where the child is waiting.\n\n2. **Action Steps (Preconditions)**:\n   - The child must be allergic to gluten (`allergic_gluten ?c`). This tells us to be extra careful with this child's food.\n   - The gluten-free sandwich should be on the tray (`ontray ?s ?t`), ready to be served.\n   - The child should be waiting at a specific spot (`waiting ?c ?p`), ready to receive their sandwich.\n   - The sandwich needs to be gluten-free (`no_gluten_sandwich ?s`), so it's safe for the child.\n   - The tray with the sandwich has to be at the same place as the waiting child (`at ?t ?p`), so it's easy to serve.\n\n3. **What Happens After the Action (Effects)**:\n   - The sandwich is taken off the tray (`not (ontray ?s ?t)`), because it's being given to the child.\n   - The child is considered served (`served ?c`), meaning they've happily received their sandwich and can start enjoying their meal.\n\nIn simple terms, this action ensures that a child who cannot eat gluten gets a safe, gluten-free sandwich right where they're waiting, and then we mark that they've been served. It's all about making sure everyone at the picnic has a good time with the right food for them!\n                \n**Response:**\nParameters:\n1. ?t - tray: [short description of the parameter]\n2. ?p1 - place: [short description of the parameter]\n3. ?p2 - place: [short description of the parameter]\n\nPreconditions:\n```\n(at ?t ?p1)\n```\n\nEffects:\n```\n(and\n    (not (at ?t ?p1))\n    (at ?t ?p2)\n)\n```\n\n---\n", "type": "prompt"}
{"role": "user", "content": "Question: Here is the task.\nA natural language description of the domain\nDomain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape\n\nA list of available predicates\n1. (at-hero ?loc - cells) ;;  Hero's cell location\n2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location\n3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster\n4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap\n5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed\n6. (connected ?from ?to - cells) ;; connects cells\n7. (arm-free) ;; Hero's hand is free\n8. (holding ?s - swords) ;; Hero's holding a sword\n9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed\n\nAction Description: The hero can **move** to an adjacent room (connected by a corridor) that has not been destroyed (i.e., the hero has not already visited the room). When this action is executed, the hero gets into a location with a monster\n\nAction name: move-to-monster\n\n\nYour answer:\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:**\n\nIn the dungeon domain, the hero needs to navigate through rooms connected by corridors to find an exit. The action `move-to-monster` describes a scenario where the hero moves into an adjacent room that has a monster in it. This action is a critical part of the planning process because it involves navigating the dungeon's structure and dealing with its inhabitants.\n\nFor this action, we need to consider the following:\n\n1. **Parameters**: These are the variables that define the action's scope. In this case, we need to know the location the hero is moving from (`?from`) and the location the hero is moving to (`?to`).\n\n2. **Preconditions**: These are the conditions that must be true before the action can take place. The hero must be at the starting location (`at-hero ?from`), the destination must be connected to the starting location (`connected ?from ?to`), the destination must not be destroyed (`not (is-destroyed ?to)`), and the destination must have a monster (`has-monster ?to`).\n\n3. **Effects**: These are the changes that occur in the world state after the action is executed. The hero will no longer be at the starting location (`not (at-hero ?from)`) and will now be at the destination location with the monster (`at-hero ?to`).\n\nThis action is important for the hero's progression through the dungeon, as it involves moving closer to the goal while encountering and dealing with monsters.\n\n**Response:**\nParameters:\n1. ?from - cells: [The cell location where the hero is currently located]\n2. ?to - cells: [The cell location where the hero will move to, which has a monster]\n\nPreconditions:\n```\n(and\n    (at-hero ?from)\n    (connected ?from ?to)\n    (not (is-destroyed ?to))\n    (has-monster ?to)\n)\n```\n\nEffects:\n```\n(and\n    (not (at-hero ?from))\n    (at-hero ?to)\n)\n```\n\n---", "type": "response", "action": "move-to-monster"}
{"role": "system", "content": "# CONTEXT #\nYou are a tool called PDDL Modeling Assistant. You are a technical experts in constructing Planning Domain Definition Language (PDDL) models via the natural language context.\n# OBJECTIVE #\n* Construct parameters, preconditions and effects based on the domain information, action description and the action name.\n* All variables in the preconditions and effects must be listed in the action's parameters. This restriction helps maintain the action's scope and prevents ambiguity in the planning process.\n* Do not use predicates that are not defined in the available predicates list to construct the preconditions and effects.\n* When the natural language description is ambiguous or certain predicate changes are implied, make reasonable assumptions based on common sense to fill up the implicit predicate in the PDDL action.\n# STYLE #\nFollow the writing style of technical experts. The output can be parsed by a machine, so it is important to follow the structured format.\n# TONE #\nBe precise and concise in constructing the PDDL action. The PDDL action should be clear and unambiguous.\n# AUDIENCE #\nYour audience is someone who is trying to learn how to construct PDDL actions from natural language descriptions.\n# RESPONSE #\nThe response should be in the following format:\n---\n**Explanation:** [Your explanation here]\n\n**Response:**\nParameters:\n1. ?x - [type]: [parameter description]\n2. ...\n\nPreconditions:\n```\n(and\n    ([predicate_1] ?x)\n)\n```\n\nEffects:\n```\n(and\n    (not ([predicate_2] ?x))\n    ([predicate_2] ?x)\n    ...\n)\n```\n---\n", "type": "prompt"}
{"role": "user", "content": "One or two examples from other domains for illustrating the input and output formats.\nHere are two examples from the newspapers domain for demonstrating the output format.\n        \nDomain information: This domain is structured to model a simple newspaper delivery system, where the main tasks involve picking up newspapers from a home base, moving to different locations, and delivering the papers to locations that require them.\n\nA list of available predicates\n1. (at ?loc - loc) ;; the agent is at loc location\n2. (is_Home_Base ?loc - loc) ;; the location is the home base\n3. (satisfied ?loc - loc) ;; the location has received the newspaper\n4. (wants_Paper ?loc - loc) ;; the location needs a newspaper\n5. (unpacked ?paper - paper) ;; the paper is unpacked\n6. (carrying ?paper - paper) ;; the agent is carrying the paper\nExample 1\nAction Description: RoboDelivery is at the home base (loc_home).\nThere is an unpacked newspaper (paper1) at the home base.\nRoboDelivery performs the pick-up action.\n\n    Preconditions: RoboDelivery is at loc_home (which is the home base), and paper1 is unpacked.\n    Effects: RoboDelivery is now carrying paper1, and paper1 is no longer unpacked.\n\nAction name: pick-up\n\n\nYour answer:\n---\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:**\n\nLet's imagine a situation where someone, like a delivery person, needs to pick up newspapers from a place, like a home base, and deliver them to various locations. This situation can be broken down into smaller, specific steps to make it easy for a computer to understand and execute. This is where the action schema you mentioned comes into play.\n\nThe action is called \"pick-up,\" and it involves the delivery person picking up newspapers to deliver. This action is defined in a language called PDDL, which is like giving a computer a recipe to follow.\n\n1. **Parameters**: These are like ingredients in a recipe. Here, the ingredients are any newspaper (`?paper`) and a location (`?loc`), which in this scenario is the home base.\n\n2. **Preconditions**: These are conditions that must be true before the action can start. Think of it like checking if you have all your ingredients before you start cooking.\n   - `(at ?loc)`: The delivery person must be at the location specified (`?loc`). This makes sure they are actually at the home base to pick up the newspapers.\n   - `(is_Home_Base ?loc)`: The location where they are must be the home base. This is crucial because newspapers ready to be delivered are stored here.\n   - `(unpacked ?paper)`: The newspapers need to be unpacked and ready to be picked up. It ensures the newspapers are not in boxes or still bundled up, making them easy to grab and go.\n\n3. **Effects**: These describe what happens after the action is completed.\n   - `(not (unpacked ?paper))`: The newspaper is no longer in an unpacked state at the base because it has been picked up.\n   - `(carrying ?paper)`: The newspaper is now being carried by the delivery person, ready to be delivered to someone who needs it.\n\nThis schema helps the computer understand exactly what needs to happen when the \"pick-up\" action is called in the program. By specifying preconditions, we ensure the action makes sense (you can't pick up a newspaper if you're not there or if the papers aren't ready). The effects tell the computer how the world changes after the action, like the newspaper moving from being unpacked at the base to being carried for delivery.\n\nBy breaking down tasks this way, we help the computer efficiently and correctly handle tasks that seem simple to us but are quite detailed when programmed.\n                \n**Response:**\nParameters:\n1. ?from - loc: [short description of the parameter]\n2. ?to - loc: [short description of the parameter]\n\nPreconditions:\n```\n(at ?from)\n```\n\nEffects:\n```\n(and\n    (not (at ?from))\n    (at ?to)\n)\n```\n\n---\n", "type": "prompt"}
{"role": "user", "content": "Example 2\nAction Description: RoboDelivery wants to deliver the newspaper to a house (loc_house1).\nRoboDelivery performs the move action to go from loc_home to loc_house1.\n\n    Preconditions: RoboDelivery is at loc_home.\n    Effects: RoboDelivery is no longer at loc_home and is now at loc_house1.\n\nAction name: move\n\n\nYour answer:\n---\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:**\n\nImagine you're playing a game where you need to deliver newspapers to different houses in your neighborhood. Each turn in the game allows you to move from one house to another. The action of moving from one house to another in the game can be compared to an action in our newspaper delivery model.\n\nIn the scenario, the action is called \"move,\" and it involves a delivery person moving from a starting location to a destination. Let's break down why this action is modeled the way it is:\n\n1. **Parameters**: These are like placeholders or markers in our game. In the \"move\" action, the parameters are the Starting Location and the Destination. It's just like saying, \"I'm starting from my house and going to my friend's house.\"\n\n2. **Preconditions**: Before you can move from one house to another, you must be at the house you're starting from. It wouldn't make sense to say, \"I'm going from my house to my friend's house\" if you're actually at the grocery store, right? So, the precondition that the delivery person is at the starting location is crucial to make the action logical.\n\n3. **Effects**: After you move from your house to your friend's house, you are no longer at your house; you are now at your friend's house. That\u2019s what happens in our model, too. The effect of the move action is that the delivery person is no longer at the starting location and is now at the destination. This change is captured in the model by removing the state of being at the starting location (`not (at ?from)`) and adding the state of being at the destination (`(at ?to)`).\n\nSo, this action schema perfectly represents the simple yet essential task of moving from one point to another, ensuring that the game's rules are followed: you start from where you say you are, and you end up where you want to go. It's just like moving pieces on a board game, ensuring each move is valid based on where you are and where you want to be.\n                \n**Response:**\nParameters:\n1. ?paper - paper: [short description of the parameter]\n2. ?loc - loc: [short description of the parameter]\n\nPreconditions:\n```\n(and\n    (at ?loc)\n    (is_Home_Base ?loc)\n    (unpacked ?paper)\n)\n```\n\nEffects:\n```\n(and\n    (not (unpacked ?paper))\n    (carrying ?paper)\n)\n```\n\n---\n", "type": "prompt"}
{"role": "user", "content": "Here are two examples from the childsnack domain for demonstrating the output format.\n        \nDomain information: This domain is to plan how to make and serve sandwiches for a group of children in which some are allergic to gluten. There are two actions for making sandwiches from their ingredients. The first one makes a sandwich and the second one makes a sandwich taking into account that all ingredients are gluten-free. There are also actions to put a sandwich on a tray and to serve sandwiches. Problems in this domain define the ingredients to make sandwiches at the initial state. Goals consist of having all kids served with a sandwich to which they are not allergic.\n\nA list of available predicates\n1. (at_kitchen_bread ?b - bread-portion) ;; the bread portion is at the kitchen\n2. (at_kitchen_content ?c - content-portion) ;; the content portion is at the kitchen\n3. (at_kitchen_sandwich ?s - sandwich) ;; the sandwich is at the kitchen\n4. (no_gluten_bread ?b - bread-portion) ;; the bread portion is gluten-free\n5. (no_gluten_content ?c - content-portion) ;; the content portion is gluten-free\n6. (ontray ?s - sandwich ?t - tray) ;; the sandwich is on the tray\n7. (no_gluten_sandwich ?s - sandwich) ;; the sandwich is gluten-free\n8. (allergic_gluten ?c - child) ;; the child is allergic to gluten\n9. (not_allergic_gluten ?c - child) ;; the child is not allergic to gluten\n10. (served ?c - child) ;; the child is served\n11. (waiting ?c - child ?p - place) ;; the child is waiting at the place\n12. (at ?t - tray ?p - place) ;; the tray is at the place\n13. (not_exist ?s - sandwich) ;; the sandwich does not exist\nExample 1\nAction Description: Moves a tray from one place to another.\n\nAction name: move_tray\n\n\nYour answer:\n---\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:**\n\nImagine you have a tray of sandwiches in the kitchen, and you need to move it to the dining room where the children are waiting to eat. This situation in real life is similar to what the action \"move_tray\" does in the planning domain for making and serving sandwiches.\n\nIn this action, the tray starts in one place (let's call this the kitchen, or \"place1\"). The goal is to move it to another place (say, the dining room, or \"place2\"). The action \"move_tray\" helps us describe this movement step-by-step in a computer program that plans out tasks.\n\nHere\u2019s why the parts of this action make sense:\n1. **Parameters:** The action needs to know three things:\n   - Which tray are we moving? (That's ?t - tray)\n   - Where is the tray right now? (That's ?p1 - place)\n   - Where do we want to move the tray to? (That's ?p2 - place)\n\n2. **Precondition:** Before we can move the tray, we need to make sure it's actually at the starting place (?p1). This is like checking to see if the tray is really in the kitchen before we try to take it to the dining room.\n\n3. **Effect:** After moving the tray, two things happen:\n   - The tray is no longer at the starting place (?p1). This is like saying, \"It\u2019s not in the kitchen anymore.\"\n   - The tray is now at the new place (?p2). This means, \"It\u2019s now in the dining room.\"\n\nThese steps in the action make sure that the computer program understands exactly where the tray is before and after moving it, just like how you would keep track of where you've put something important.\n\nSo, in simple terms, the \"move_tray\" action tells the computer how to move a tray from one place to another in a planned and orderly way, ensuring the tray ends up right where it needs to be for the children to get their sandwiches.\n                \n**Response:**\nParameters:\n1. ?s - sandwich: [short description of the parameter]\n2. ?t - tray: [short description of the parameter]\n\nPreconditions:\n```\n(and\n    (at_kitchen_sandwich ?s)\n    (at ?t kitchen)\n)\n```\n\nEffects:\n```\n(and\n    (not (at_kitchen_sandwich ?s))\n    (ontray ?s ?t)\n)\n```\n\n---\n", "type": "prompt"}
{"role": "user", "content": "Example 2\nAction Description: Places a sandwich from the kitchen onto a tray.\n\nAction name: put_on_tray\n\n\nYour answer:\n---\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:**\nLet's imagine you're helping out in a kitchen where you're preparing sandwiches for a party. Now, one of your tasks is to move a sandwich from the kitchen counter (where it was made) to a serving tray that's also in the kitchen. This simple task in real life is what the action \"put_on_tray\" represents in our planning domain.\n\nIn this specific scenario, we have two main things to check before you can put the sandwich on the tray:\n1. **The sandwich must be in the kitchen.** This is pretty straightforward, right? You need to know where the sandwich is to be able to pick it up and move it. In the domain model, this is captured by the condition `(at_kitchen_sandwich ?s)`. It just means, \"Check if the sandwich is at the kitchen.\"\n   \n2. **The tray must be in the kitchen.** Similarly, you need the tray to be in the kitchen as well. You can't put a sandwich on a tray that's not there! This condition is written as `(at ?t kitchen)` in the model. It's a way of saying, \"Make sure that the tray is at the kitchen.\"\n\nNow, once you've confirmed both conditions\u2014sandwich is in the kitchen and so is the tray\u2014you can go ahead and place the sandwich on the tray. What happens then? In the real world, the sandwich is no longer just 'sitting in the kitchen'; it's now on the tray. In the domain model, this change is described by the effects of the action:\n- **The sandwich is no longer just in the kitchen.** This is represented by `(not (at_kitchen_sandwich ?s))`. It means, \"The sandwich is no longer at the kitchen counter.\"\n- **The sandwich is now on the tray.** This is shown by `(ontray ?s ?t)`. It simply says, \"Now, the sandwich is on the tray.\"\n\nBy modeling it this way, the planning system understands exactly what conditions need to be true to perform the action (moving a sandwich onto a tray), and what changes happen after the action is taken. This helps in planning out all the steps needed to prepare and serve sandwiches efficiently, especially in a scenario where you might need to consider dietary restrictions like gluten allergies.\n\nSo, in summary, the action \"put_on_tray\" checks if both the sandwich and the tray are in the kitchen, and then updates their status to reflect that the sandwich has been moved onto the tray. This is crucial for ensuring that everything is ready and in the right place for the next steps, like serving the sandwiches to the children.\n                \n**Response:**\nParameters:\n1. ?t - tray: [short description of the parameter]\n2. ?p1 - place: [short description of the parameter]\n3. ?p2 - place: [short description of the parameter]\n\nPreconditions:\n```\n(at ?t ?p1)\n```\n\nEffects:\n```\n(and\n    (not (at ?t ?p1))\n    (at ?t ?p2)\n)\n```\n\n---\n", "type": "prompt"}
{"role": "user", "content": "Question: Here is the task.\nA natural language description of the domain\nDomain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape\n\nA list of available predicates\n1. (at-hero ?loc - cells) ;;  Hero's cell location\n2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location\n3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster\n4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap\n5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed\n6. (connected ?from ?to - cells) ;; connects cells\n7. (arm-free) ;; Hero's hand is free\n8. (holding ?s - swords) ;; Hero's holding a sword\n9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed\n\nAction Description: **Disarm a trap** \u2013 if there is a trap in the room the hero is in and the hero is empty-handed (does not hold a sword), then the hero can disarm it\n\nAction name: disarm-trap\n\n\nYour answer:\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:**\n\nIn the given dungeon domain, the hero needs to navigate through rooms connected by corridors, avoiding or dealing with monsters and traps, and possibly picking up a sword to aid in their escape. The action \"disarm-trap\" is one of the hero's possible actions when encountering a trap.\n\nTo disarm a trap, the hero must be in the same room as the trap and must not be holding a sword, as the action assumes the hero uses their hands to disarm the trap. Once the trap is disarmed, it no longer poses a threat to the hero.\n\nThe action is defined by the following components:\n\n1. **Parameters**: The parameters for this action include the location of the trap (`?loc`), which is also the location of the hero since the hero must be in the same room as the trap to disarm it.\n\n2. **Preconditions**: These are the conditions that must be met before the hero can perform the action. In this case, the hero must be at the location of the trap (`(at-hero ?loc)`), the location must have a trap (`(has-trap ?loc)`), and the hero's hands must be free (`(arm-free)`), which implies that the hero is not holding a sword.\n\n3. **Effects**: After the hero successfully disarms the trap, the trap is no longer active. This is represented by the effect `(trap-disarmed ?loc)`. The action does not specify that the trap is destroyed, only that it is disarmed and thus no longer a hazard.\n\nBy defining the action in this way, the planning system can determine when the hero is capable of disarming a trap and update the state of the dungeon accordingly after the action is performed.\n\n**Response:**\nParameters:\n1. ?loc - cells: [The cell where the hero is located and where the trap is located]\n\nPreconditions:\n```\n(and\n    (at-hero ?loc)\n    (has-trap ?loc)\n    (arm-free)\n)\n```\n\nEffects:\n```\n(and\n    (trap-disarmed ?loc)\n)\n```\n\n---", "type": "response", "action": "disarm-trap"}
{"role": "system", "content": "# CONTEXT #\nYou are a tool called PDDL Modeling Assistant. You are a technical experts in constructing Planning Domain Definition Language (PDDL) models via the natural language context.\n# OBJECTIVE #\n* Construct parameters, preconditions and effects based on the domain information, action description and the action name.\n* All variables in the preconditions and effects must be listed in the action's parameters. This restriction helps maintain the action's scope and prevents ambiguity in the planning process.\n* Do not use predicates that are not defined in the available predicates list to construct the preconditions and effects.\n* When the natural language description is ambiguous or certain predicate changes are implied, make reasonable assumptions based on common sense to fill up the implicit predicate in the PDDL action.\n# STYLE #\nFollow the writing style of technical experts. The output can be parsed by a machine, so it is important to follow the structured format.\n# TONE #\nBe precise and concise in constructing the PDDL action. The PDDL action should be clear and unambiguous.\n# AUDIENCE #\nYour audience is someone who is trying to learn how to construct PDDL actions from natural language descriptions.\n# RESPONSE #\nThe response should be in the following format:\n---\n**Explanation:** [Your explanation here]\n\n**Response:**\nParameters:\n1. ?x - [type]: [parameter description]\n2. ...\n\nPreconditions:\n```\n(and\n    ([predicate_1] ?x)\n)\n```\n\nEffects:\n```\n(and\n    (not ([predicate_2] ?x))\n    ([predicate_2] ?x)\n    ...\n)\n```\n---\n", "type": "prompt"}
{"role": "user", "content": "One or two examples from other domains for illustrating the input and output formats.\nHere are two examples from the newspapers domain for demonstrating the output format.\n        \nDomain information: This domain is structured to model a simple newspaper delivery system, where the main tasks involve picking up newspapers from a home base, moving to different locations, and delivering the papers to locations that require them.\n\nA list of available predicates\n1. (at ?loc - loc) ;; the agent is at loc location\n2. (is_Home_Base ?loc - loc) ;; the location is the home base\n3. (satisfied ?loc - loc) ;; the location has received the newspaper\n4. (wants_Paper ?loc - loc) ;; the location needs a newspaper\n5. (unpacked ?paper - paper) ;; the paper is unpacked\n6. (carrying ?paper - paper) ;; the agent is carrying the paper\nExample 1\nAction Description: RoboDelivery is at the home base (loc_home).\nThere is an unpacked newspaper (paper1) at the home base.\nRoboDelivery performs the pick-up action.\n\n    Preconditions: RoboDelivery is at loc_home (which is the home base), and paper1 is unpacked.\n    Effects: RoboDelivery is now carrying paper1, and paper1 is no longer unpacked.\n\nAction name: pick-up\n\n\nYour answer:\n---\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:**\n\nLet's imagine a situation where someone, like a delivery person, needs to pick up newspapers from a place, like a home base, and deliver them to various locations. This situation can be broken down into smaller, specific steps to make it easy for a computer to understand and execute. This is where the action schema you mentioned comes into play.\n\nThe action is called \"pick-up,\" and it involves the delivery person picking up newspapers to deliver. This action is defined in a language called PDDL, which is like giving a computer a recipe to follow.\n\n1. **Parameters**: These are like ingredients in a recipe. Here, the ingredients are any newspaper (`?paper`) and a location (`?loc`), which in this scenario is the home base.\n\n2. **Preconditions**: These are conditions that must be true before the action can start. Think of it like checking if you have all your ingredients before you start cooking.\n   - `(at ?loc)`: The delivery person must be at the location specified (`?loc`). This makes sure they are actually at the home base to pick up the newspapers.\n   - `(is_Home_Base ?loc)`: The location where they are must be the home base. This is crucial because newspapers ready to be delivered are stored here.\n   - `(unpacked ?paper)`: The newspapers need to be unpacked and ready to be picked up. It ensures the newspapers are not in boxes or still bundled up, making them easy to grab and go.\n\n3. **Effects**: These describe what happens after the action is completed.\n   - `(not (unpacked ?paper))`: The newspaper is no longer in an unpacked state at the base because it has been picked up.\n   - `(carrying ?paper)`: The newspaper is now being carried by the delivery person, ready to be delivered to someone who needs it.\n\nThis schema helps the computer understand exactly what needs to happen when the \"pick-up\" action is called in the program. By specifying preconditions, we ensure the action makes sense (you can't pick up a newspaper if you're not there or if the papers aren't ready). The effects tell the computer how the world changes after the action, like the newspaper moving from being unpacked at the base to being carried for delivery.\n\nBy breaking down tasks this way, we help the computer efficiently and correctly handle tasks that seem simple to us but are quite detailed when programmed.\n                \n**Response:**\nParameters:\n1. ?paper - paper: [short description of the parameter]\n2. ?loc - loc: [short description of the parameter]\n\nPreconditions:\n```\n(and\n    (at ?loc)\n    (wants_Paper ?loc)\n    (carrying ?paper)\n)\n```\n\nEffects:\n```\n(and\n    (not (carrying ?paper))\n    (not (wants_Paper ?loc))\n    (satisfied ?loc)\n)\n```\n\n---\n", "type": "prompt"}
{"role": "user", "content": "Example 2\nAction Description: The house at loc_house1 wants a newspaper.\nRoboDelivery performs the deliver action to give paper1 to the house.\n\n    Preconditions: RoboDelivery is at loc_house1, the house wants a newspaper, and RoboDelivery is carrying paper1.\n    Effects: RoboDelivery is no longer carrying paper1, the house at loc_house1 no longer wants a newspaper, and the house at loc_house1 is satisfied.\n\nAction name: deliver\n\n\nYour answer:\n---\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:**\n\nLet's think of the action of delivering a newspaper like a simple task you might do every day, like delivering a letter to your neighbor. The description given helps us understand how a delivery person can complete their job of delivering newspapers effectively in a systematic way, which is where the PDDL (a planning language) comes into play.\n\n1. **Preconditions: Why are they necessary?**\n   - The delivery person must be at the right location (`at ?loc`): Just like if you were to deliver a letter to your neighbor, you need to be at their house, not yours! This ensures the newspaper is delivered to the correct place.\n   - The delivery location wants a newspaper (`wants_Paper ?loc`): This makes sure that the delivery person is not just going around giving out newspapers to places that don't need them. It\u2019s like checking if your neighbor actually needs the letter before you walk over.\n   - The delivery person must be carrying the newspaper (`carrying ?paper`): This is pretty straightforward\u2014just as you can't deliver a letter that you don't have in your hand, the delivery person needs to have the newspaper with them to deliver it.\n\n2. **Effects: How do they follow from the preconditions?**\n   - The newspaper is no longer being carried by the delivery person (`not (carrying ?paper)`): Once the delivery is done, just like handing over a letter, the newspaper is no longer with the delivery person.\n   - The delivery location no longer wants the newspaper (`not (wants_Paper ?loc)`): The need for the newspaper has been met, similar to how your neighbor no longer waits for the letter once you've delivered it.\n   - The location is satisfied (`satisfied ?loc`): This indicates that the delivery was successful. The location got what it was waiting for, just like your neighbor feeling happy receiving the letter.\n\nIn summary, the action of delivering a newspaper in this PDDL model ensures that everything needed to complete a successful delivery is in place before the delivery starts, and once done, it updates the state to reflect the successful completion of the task. It's about making sure you have what you need, going where you need to go, and ensuring the task is completed as expected!\n                \n**Response:**\nParameters:\n1. ?paper - paper: [short description of the parameter]\n2. ?loc - loc: [short description of the parameter]\n\nPreconditions:\n```\n(and\n    (at ?loc)\n    (is_Home_Base ?loc)\n    (unpacked ?paper)\n)\n```\n\nEffects:\n```\n(and\n    (not (unpacked ?paper))\n    (carrying ?paper)\n)\n```\n\n---\n", "type": "prompt"}
{"role": "user", "content": "Here are two examples from the childsnack domain for demonstrating the output format.\n        \nDomain information: This domain is to plan how to make and serve sandwiches for a group of children in which some are allergic to gluten. There are two actions for making sandwiches from their ingredients. The first one makes a sandwich and the second one makes a sandwich taking into account that all ingredients are gluten-free. There are also actions to put a sandwich on a tray and to serve sandwiches. Problems in this domain define the ingredients to make sandwiches at the initial state. Goals consist of having all kids served with a sandwich to which they are not allergic.\n\nA list of available predicates\n1. (at_kitchen_bread ?b - bread-portion) ;; the bread portion is at the kitchen\n2. (at_kitchen_content ?c - content-portion) ;; the content portion is at the kitchen\n3. (at_kitchen_sandwich ?s - sandwich) ;; the sandwich is at the kitchen\n4. (no_gluten_bread ?b - bread-portion) ;; the bread portion is gluten-free\n5. (no_gluten_content ?c - content-portion) ;; the content portion is gluten-free\n6. (ontray ?s - sandwich ?t - tray) ;; the sandwich is on the tray\n7. (no_gluten_sandwich ?s - sandwich) ;; the sandwich is gluten-free\n8. (allergic_gluten ?c - child) ;; the child is allergic to gluten\n9. (not_allergic_gluten ?c - child) ;; the child is not allergic to gluten\n10. (served ?c - child) ;; the child is served\n11. (waiting ?c - child ?p - place) ;; the child is waiting at the place\n12. (at ?t - tray ?p - place) ;; the tray is at the place\n13. (not_exist ?s - sandwich) ;; the sandwich does not exist\nExample 1\nAction Description: Places a sandwich from the kitchen onto a tray.\n\nAction name: put_on_tray\n\n\nYour answer:\n---\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:**\nLet's imagine you're helping out in a kitchen where you're preparing sandwiches for a party. Now, one of your tasks is to move a sandwich from the kitchen counter (where it was made) to a serving tray that's also in the kitchen. This simple task in real life is what the action \"put_on_tray\" represents in our planning domain.\n\nIn this specific scenario, we have two main things to check before you can put the sandwich on the tray:\n1. **The sandwich must be in the kitchen.** This is pretty straightforward, right? You need to know where the sandwich is to be able to pick it up and move it. In the domain model, this is captured by the condition `(at_kitchen_sandwich ?s)`. It just means, \"Check if the sandwich is at the kitchen.\"\n   \n2. **The tray must be in the kitchen.** Similarly, you need the tray to be in the kitchen as well. You can't put a sandwich on a tray that's not there! This condition is written as `(at ?t kitchen)` in the model. It's a way of saying, \"Make sure that the tray is at the kitchen.\"\n\nNow, once you've confirmed both conditions\u2014sandwich is in the kitchen and so is the tray\u2014you can go ahead and place the sandwich on the tray. What happens then? In the real world, the sandwich is no longer just 'sitting in the kitchen'; it's now on the tray. In the domain model, this change is described by the effects of the action:\n- **The sandwich is no longer just in the kitchen.** This is represented by `(not (at_kitchen_sandwich ?s))`. It means, \"The sandwich is no longer at the kitchen counter.\"\n- **The sandwich is now on the tray.** This is shown by `(ontray ?s ?t)`. It simply says, \"Now, the sandwich is on the tray.\"\n\nBy modeling it this way, the planning system understands exactly what conditions need to be true to perform the action (moving a sandwich onto a tray), and what changes happen after the action is taken. This helps in planning out all the steps needed to prepare and serve sandwiches efficiently, especially in a scenario where you might need to consider dietary restrictions like gluten allergies.\n\nSo, in summary, the action \"put_on_tray\" checks if both the sandwich and the tray are in the kitchen, and then updates their status to reflect that the sandwich has been moved onto the tray. This is crucial for ensuring that everything is ready and in the right place for the next steps, like serving the sandwiches to the children.\n                \n**Response:**\nParameters:\n1. ?s - sandwich: [short description of the parameter]\n2. ?c - child: [short description of the parameter]\n3. ?t - tray: [short description of the parameter]\n4. ?p - place: [short description of the parameter]\n\nPreconditions:\n```\n(and\n    (allergic_gluten ?c)\n    (ontray ?s ?t)\n    (waiting ?c ?p)\n    (no_gluten_sandwich ?s)\n    (at ?t ?p)\n)\n```\n\nEffects:\n```\n(and\n    (not (ontray ?s ?t))\n    (served ?c)\n)\n```\n\n---\n", "type": "prompt"}
{"role": "user", "content": "Example 2\nAction Description: Serves a gluten-free sandwich to a child allergic to gluten, who is waiting at a specific place. Removes the sandwich from the tray.\n\nAction name: serve_sandwich_no_gluten\n\n\nYour answer:\n---\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:**\nImagine you're at a fun picnic where some kids need special gluten-free sandwiches because they're allergic to gluten. In our plan, there's a special task called `serve_sandwich_no_gluten`, which is like a set of instructions to make sure these kids get the right sandwich safely and happily.\n\n1. **Understanding the Ingredients and the Setting**:\n   - **Child and Place**: First, we need a child who is allergic to gluten and waiting at a specific place.\n   - **Sandwich and Tray**: We also need a sandwich that is gluten-free and placed on a tray.\n   - **Tray's Location**: The tray with the sandwich needs to be at the same place where the child is waiting.\n\n2. **Action Steps (Preconditions)**:\n   - The child must be allergic to gluten (`allergic_gluten ?c`). This tells us to be extra careful with this child's food.\n   - The gluten-free sandwich should be on the tray (`ontray ?s ?t`), ready to be served.\n   - The child should be waiting at a specific spot (`waiting ?c ?p`), ready to receive their sandwich.\n   - The sandwich needs to be gluten-free (`no_gluten_sandwich ?s`), so it's safe for the child.\n   - The tray with the sandwich has to be at the same place as the waiting child (`at ?t ?p`), so it's easy to serve.\n\n3. **What Happens After the Action (Effects)**:\n   - The sandwich is taken off the tray (`not (ontray ?s ?t)`), because it's being given to the child.\n   - The child is considered served (`served ?c`), meaning they've happily received their sandwich and can start enjoying their meal.\n\nIn simple terms, this action ensures that a child who cannot eat gluten gets a safe, gluten-free sandwich right where they're waiting, and then we mark that they've been served. It's all about making sure everyone at the picnic has a good time with the right food for them!\n                \n**Response:**\nParameters:\n1. ?s - sandwich: [short description of the parameter]\n2. ?t - tray: [short description of the parameter]\n\nPreconditions:\n```\n(and\n    (at_kitchen_sandwich ?s)\n    (at ?t kitchen)\n)\n```\n\nEffects:\n```\n(and\n    (not (at_kitchen_sandwich ?s))\n    (ontray ?s ?t)\n)\n```\n\n---\n", "type": "prompt"}
{"role": "user", "content": "Question: Here is the task.\nA natural language description of the domain\nDomain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape\n\nA list of available predicates\n1. (at-hero ?loc - cells) ;;  Hero's cell location\n2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location\n3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster\n4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap\n5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed\n6. (connected ?from ?to - cells) ;; connects cells\n7. (arm-free) ;; Hero's hand is free\n8. (holding ?s - swords) ;; Hero's holding a sword\n9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed\n\nAction Description: **Pickup** the sword if present in the room the hero is currently in and the hero is empty handed\n\nAction name: pick-sword\n\n\nYour answer:\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:**\nIn the given dungeon domain, the hero needs to navigate through rooms connected by corridors, avoiding monsters and traps, and possibly picking up a sword to aid in their escape. The action \"pick-sword\" is a key part of the hero's strategy, allowing them to arm themselves if they come across a sword in a room.\n\nFor the \"pick-sword\" action to occur, certain conditions must be met:\n1. The hero must be in a room that contains a sword (`at-sword ?s ?loc`).\n2. The hero must be empty-handed, meaning they are not already holding a sword (`arm-free`).\n\nOnce these conditions are satisfied, the action can be performed, which results in the hero now holding the sword and their hand no longer being free.\n\nThe effects of the action are:\n1. The hero is no longer empty-handed (`not (arm-free)`).\n2. The hero is now holding the sword that was in the room (`holding ?s`).\n\nThis action is crucial for the hero's survival, as having a sword may be necessary to fight off monsters or to disarm traps encountered in the dungeon.\n\n**Response:**\nParameters:\n1. ?s - swords: [The sword that the hero is going to pick up]\n2. ?loc - cells: [The location where the hero and the sword are]\n\nPreconditions:\n```\n(and\n    (at-hero ?loc)\n    (at-sword ?s ?loc)\n    (arm-free)\n)\n```\n\nEffects:\n```\n(and\n    (not (arm-free))\n    (holding ?s)\n)\n```", "type": "response", "action": "pick-sword"}
{"role": "system", "content": "# CONTEXT #\nYou are a tool called PDDL Modeling Assistant. You are a technical experts in constructing Planning Domain Definition Language (PDDL) models via the natural language context.\n# OBJECTIVE #\n* Construct parameters, preconditions and effects based on the domain information, action description and the action name.\n* All variables in the preconditions and effects must be listed in the action's parameters. This restriction helps maintain the action's scope and prevents ambiguity in the planning process.\n* Do not use predicates that are not defined in the available predicates list to construct the preconditions and effects.\n* When the natural language description is ambiguous or certain predicate changes are implied, make reasonable assumptions based on common sense to fill up the implicit predicate in the PDDL action.\n# STYLE #\nFollow the writing style of technical experts. The output can be parsed by a machine, so it is important to follow the structured format.\n# TONE #\nBe precise and concise in constructing the PDDL action. The PDDL action should be clear and unambiguous.\n# AUDIENCE #\nYour audience is someone who is trying to learn how to construct PDDL actions from natural language descriptions.\n# RESPONSE #\nThe response should be in the following format:\n---\n**Explanation:** [Your explanation here]\n\n**Response:**\nParameters:\n1. ?x - [type]: [parameter description]\n2. ...\n\nPreconditions:\n```\n(and\n    ([predicate_1] ?x)\n)\n```\n\nEffects:\n```\n(and\n    (not ([predicate_2] ?x))\n    ([predicate_2] ?x)\n    ...\n)\n```\n---\n", "type": "prompt"}
{"role": "user", "content": "One or two examples from other domains for illustrating the input and output formats.\nHere are two examples from the newspapers domain for demonstrating the output format.\n        \nDomain information: This domain is structured to model a simple newspaper delivery system, where the main tasks involve picking up newspapers from a home base, moving to different locations, and delivering the papers to locations that require them.\n\nA list of available predicates\n1. (at ?loc - loc) ;; the agent is at loc location\n2. (is_Home_Base ?loc - loc) ;; the location is the home base\n3. (satisfied ?loc - loc) ;; the location has received the newspaper\n4. (wants_Paper ?loc - loc) ;; the location needs a newspaper\n5. (unpacked ?paper - paper) ;; the paper is unpacked\n6. (carrying ?paper - paper) ;; the agent is carrying the paper\nExample 1\nAction Description: RoboDelivery wants to deliver the newspaper to a house (loc_house1).\nRoboDelivery performs the move action to go from loc_home to loc_house1.\n\n    Preconditions: RoboDelivery is at loc_home.\n    Effects: RoboDelivery is no longer at loc_home and is now at loc_house1.\n\nAction name: move\n\n\nYour answer:\n---\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:**\n\nImagine you're playing a game where you need to deliver newspapers to different houses in your neighborhood. Each turn in the game allows you to move from one house to another. The action of moving from one house to another in the game can be compared to an action in our newspaper delivery model.\n\nIn the scenario, the action is called \"move,\" and it involves a delivery person moving from a starting location to a destination. Let's break down why this action is modeled the way it is:\n\n1. **Parameters**: These are like placeholders or markers in our game. In the \"move\" action, the parameters are the Starting Location and the Destination. It's just like saying, \"I'm starting from my house and going to my friend's house.\"\n\n2. **Preconditions**: Before you can move from one house to another, you must be at the house you're starting from. It wouldn't make sense to say, \"I'm going from my house to my friend's house\" if you're actually at the grocery store, right? So, the precondition that the delivery person is at the starting location is crucial to make the action logical.\n\n3. **Effects**: After you move from your house to your friend's house, you are no longer at your house; you are now at your friend's house. That\u2019s what happens in our model, too. The effect of the move action is that the delivery person is no longer at the starting location and is now at the destination. This change is captured in the model by removing the state of being at the starting location (`not (at ?from)`) and adding the state of being at the destination (`(at ?to)`).\n\nSo, this action schema perfectly represents the simple yet essential task of moving from one point to another, ensuring that the game's rules are followed: you start from where you say you are, and you end up where you want to go. It's just like moving pieces on a board game, ensuring each move is valid based on where you are and where you want to be.\n                \n**Response:**\nParameters:\n1. ?from - loc: [short description of the parameter]\n2. ?to - loc: [short description of the parameter]\n\nPreconditions:\n```\n(at ?from)\n```\n\nEffects:\n```\n(and\n    (not (at ?from))\n    (at ?to)\n)\n```\n\n---\n", "type": "prompt"}
{"role": "user", "content": "Example 2\nAction Description: RoboDelivery is at the home base (loc_home).\nThere is an unpacked newspaper (paper1) at the home base.\nRoboDelivery performs the pick-up action.\n\n    Preconditions: RoboDelivery is at loc_home (which is the home base), and paper1 is unpacked.\n    Effects: RoboDelivery is now carrying paper1, and paper1 is no longer unpacked.\n\nAction name: pick-up\n\n\nYour answer:\n---\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:**\n\nLet's imagine a situation where someone, like a delivery person, needs to pick up newspapers from a place, like a home base, and deliver them to various locations. This situation can be broken down into smaller, specific steps to make it easy for a computer to understand and execute. This is where the action schema you mentioned comes into play.\n\nThe action is called \"pick-up,\" and it involves the delivery person picking up newspapers to deliver. This action is defined in a language called PDDL, which is like giving a computer a recipe to follow.\n\n1. **Parameters**: These are like ingredients in a recipe. Here, the ingredients are any newspaper (`?paper`) and a location (`?loc`), which in this scenario is the home base.\n\n2. **Preconditions**: These are conditions that must be true before the action can start. Think of it like checking if you have all your ingredients before you start cooking.\n   - `(at ?loc)`: The delivery person must be at the location specified (`?loc`). This makes sure they are actually at the home base to pick up the newspapers.\n   - `(is_Home_Base ?loc)`: The location where they are must be the home base. This is crucial because newspapers ready to be delivered are stored here.\n   - `(unpacked ?paper)`: The newspapers need to be unpacked and ready to be picked up. It ensures the newspapers are not in boxes or still bundled up, making them easy to grab and go.\n\n3. **Effects**: These describe what happens after the action is completed.\n   - `(not (unpacked ?paper))`: The newspaper is no longer in an unpacked state at the base because it has been picked up.\n   - `(carrying ?paper)`: The newspaper is now being carried by the delivery person, ready to be delivered to someone who needs it.\n\nThis schema helps the computer understand exactly what needs to happen when the \"pick-up\" action is called in the program. By specifying preconditions, we ensure the action makes sense (you can't pick up a newspaper if you're not there or if the papers aren't ready). The effects tell the computer how the world changes after the action, like the newspaper moving from being unpacked at the base to being carried for delivery.\n\nBy breaking down tasks this way, we help the computer efficiently and correctly handle tasks that seem simple to us but are quite detailed when programmed.\n                \n**Response:**\nParameters:\n1. ?paper - paper: [short description of the parameter]\n2. ?loc - loc: [short description of the parameter]\n\nPreconditions:\n```\n(and\n    (at ?loc)\n    (is_Home_Base ?loc)\n    (unpacked ?paper)\n)\n```\n\nEffects:\n```\n(and\n    (not (unpacked ?paper))\n    (carrying ?paper)\n)\n```\n\n---\n", "type": "prompt"}
{"role": "user", "content": "Here are two examples from the childsnack domain for demonstrating the output format.\n        \nDomain information: This domain is to plan how to make and serve sandwiches for a group of children in which some are allergic to gluten. There are two actions for making sandwiches from their ingredients. The first one makes a sandwich and the second one makes a sandwich taking into account that all ingredients are gluten-free. There are also actions to put a sandwich on a tray and to serve sandwiches. Problems in this domain define the ingredients to make sandwiches at the initial state. Goals consist of having all kids served with a sandwich to which they are not allergic.\n\nA list of available predicates\n1. (at_kitchen_bread ?b - bread-portion) ;; the bread portion is at the kitchen\n2. (at_kitchen_content ?c - content-portion) ;; the content portion is at the kitchen\n3. (at_kitchen_sandwich ?s - sandwich) ;; the sandwich is at the kitchen\n4. (no_gluten_bread ?b - bread-portion) ;; the bread portion is gluten-free\n5. (no_gluten_content ?c - content-portion) ;; the content portion is gluten-free\n6. (ontray ?s - sandwich ?t - tray) ;; the sandwich is on the tray\n7. (no_gluten_sandwich ?s - sandwich) ;; the sandwich is gluten-free\n8. (allergic_gluten ?c - child) ;; the child is allergic to gluten\n9. (not_allergic_gluten ?c - child) ;; the child is not allergic to gluten\n10. (served ?c - child) ;; the child is served\n11. (waiting ?c - child ?p - place) ;; the child is waiting at the place\n12. (at ?t - tray ?p - place) ;; the tray is at the place\n13. (not_exist ?s - sandwich) ;; the sandwich does not exist\nExample 1\nAction Description: Serves a gluten-free sandwich to a child allergic to gluten, who is waiting at a specific place. Removes the sandwich from the tray.\n\nAction name: serve_sandwich_no_gluten\n\n\nYour answer:\n---\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:**\nImagine you're at a fun picnic where some kids need special gluten-free sandwiches because they're allergic to gluten. In our plan, there's a special task called `serve_sandwich_no_gluten`, which is like a set of instructions to make sure these kids get the right sandwich safely and happily.\n\n1. **Understanding the Ingredients and the Setting**:\n   - **Child and Place**: First, we need a child who is allergic to gluten and waiting at a specific place.\n   - **Sandwich and Tray**: We also need a sandwich that is gluten-free and placed on a tray.\n   - **Tray's Location**: The tray with the sandwich needs to be at the same place where the child is waiting.\n\n2. **Action Steps (Preconditions)**:\n   - The child must be allergic to gluten (`allergic_gluten ?c`). This tells us to be extra careful with this child's food.\n   - The gluten-free sandwich should be on the tray (`ontray ?s ?t`), ready to be served.\n   - The child should be waiting at a specific spot (`waiting ?c ?p`), ready to receive their sandwich.\n   - The sandwich needs to be gluten-free (`no_gluten_sandwich ?s`), so it's safe for the child.\n   - The tray with the sandwich has to be at the same place as the waiting child (`at ?t ?p`), so it's easy to serve.\n\n3. **What Happens After the Action (Effects)**:\n   - The sandwich is taken off the tray (`not (ontray ?s ?t)`), because it's being given to the child.\n   - The child is considered served (`served ?c`), meaning they've happily received their sandwich and can start enjoying their meal.\n\nIn simple terms, this action ensures that a child who cannot eat gluten gets a safe, gluten-free sandwich right where they're waiting, and then we mark that they've been served. It's all about making sure everyone at the picnic has a good time with the right food for them!\n                \n**Response:**\nParameters:\n1. ?s - sandwich: [short description of the parameter]\n2. ?c - child: [short description of the parameter]\n3. ?t - tray: [short description of the parameter]\n4. ?p - place: [short description of the parameter]\n\nPreconditions:\n```\n(and\n    (not_allergic_gluten ?c)\n    (waiting ?c ?p)\n    (ontray ?s ?t)\n    (at ?t ?p)\n)\n```\n\nEffects:\n```\n(and\n    (not (ontray ?s ?t))\n    (served ?c)\n)\n```\n\n---\n", "type": "prompt"}
{"role": "user", "content": "Example 2\nAction Description: Serves a sandwich to a child not allergic to gluten, who is waiting at a specific place. Removes the sandwich from the tray.\n\nAction name: serve_sandwich\n\n\nYour answer:\n---\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:**\nThe action schema you've described, \"serve_sandwich,\" is designed to model the process of serving a sandwich to a child who is not allergic to gluten at a specific location, while also ensuring the sandwich is removed from the tray after serving. Let's break it down into simpler parts to understand how this works.\n\n1. **Parameters of the Action:**\n   - The action involves four main elements: a sandwich (`?s`), a child (`?c`), a tray (`?t`), and a place (`?p`). These elements are necessary to specify who gets the sandwich, where they get it, and how the sandwich is served.\n\n2. **Preconditions of the Action:**\n   - **Child is not allergic to gluten (`not_allergic_gluten ?c`):** Before serving the sandwich, it's crucial to make sure that the child does not have a gluten allergy. This avoids any health issues.\n   - **Child is waiting (`waiting ?c ?p`):** The child must be waiting at a specific place. This condition ensures that the child is ready to receive the sandwich.\n   - **Sandwich is on the tray (`ontray ?s ?t`):** This checks that the sandwich is available on the tray, indicating it's prepared and ready to be served.\n   - **Tray is at the same place as the child (`at ?t ?p`):** The tray with the sandwich must be in the same location as the waiting child to ensure that the sandwich can be handed over directly.\n\n3. **Effects of the Action:**\n   - **Removing the sandwich from the tray (`not (ontray ?s ?t)`):** Once the sandwich is served, this effect updates the situation by noting that the sandwich is no longer on the tray.\n   - **Child is served (`served ?c`):** This records that the child has now been served the sandwich, fulfilling part of the goal in the sandwich serving scenario.\n\nOverall, this action schema helps coordinate the task of serving sandwiches safely and efficiently, taking into account the location of the child and their dietary restrictions. It ensures that each step is validated before the sandwich is served, and it records the change in the situation once the action is completed. This systematic approach helps in planning and executing tasks without errors, especially in scenarios involving food safety and children's health.\n                \n**Response:**\nParameters:\n1. ?s - sandwich: [short description of the parameter]\n2. ?c - child: [short description of the parameter]\n3. ?t - tray: [short description of the parameter]\n4. ?p - place: [short description of the parameter]\n\nPreconditions:\n```\n(and\n    (allergic_gluten ?c)\n    (ontray ?s ?t)\n    (waiting ?c ?p)\n    (no_gluten_sandwich ?s)\n    (at ?t ?p)\n)\n```\n\nEffects:\n```\n(and\n    (not (ontray ?s ?t))\n    (served ?c)\n)\n```\n\n---\n", "type": "prompt"}
{"role": "user", "content": "Question: Here is the task.\nA natural language description of the domain\nDomain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape\n\nA list of available predicates\n1. (at-hero ?loc - cells) ;;  Hero's cell location\n2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location\n3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster\n4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap\n5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed\n6. (connected ?from ?to - cells) ;; connects cells\n7. (arm-free) ;; Hero's hand is free\n8. (holding ?s - swords) ;; Hero's holding a sword\n9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed\n\nAction Description: The hero can **move** to an adjacent room (connected by a corridor) that has not been destroyed (i.e., the hero has not already visited the room). When this action is executed, the hero gets into a location with a trap\n\nAction name: move-to-trap\n\n\nYour answer:\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:**\nIn the dungeon domain, the \"move-to-trap\" action represents the hero moving from one room to another that is directly connected by a corridor. The hero can only move to an adjacent room if it has not been destroyed, meaning it's still accessible. The action specifically describes a scenario where the hero moves into a room with a trap. Let's analyze the components of this action:\n\n1. **Parameters of the Action:**\n   - The action requires two parameters: the current location of the hero (`?from`) and the destination location (`?to`). These parameters specify the starting point and the endpoint of the movement.\n\n2. **Preconditions of the Action:**\n   - **Hero's current location (`at-hero ?from`):** The hero must be at a specific location before moving.\n   - **The destination is connected to the current location (`connected ?from ?to`):** There must be a corridor connecting the current location to the destination.\n   - **The destination is not destroyed (`not (is-destroyed ?to)`):** The hero can only move to a room that has not been destroyed.\n\n3. **Effects of the Action:**\n   - **Hero moves to the new location (`at-hero ?to`):** After the action, the hero's location is updated to the new room.\n   - **The previous location is no longer the hero's location (`not (at-hero ?from)`):** This effect ensures that the hero is no longer in the previous room after moving.\n\nThe action does not explicitly mention the trap in the effects, as the action's name \"move-to-trap\" already implies that the destination room has a trap. However, in a more detailed model, you might include an effect that checks for the presence of a trap in the destination room.\n\n**Response:**\nParameters:\n1. ?from - cells: [The current location of the hero]\n2. ?to - cells: [The destination location where the hero will move]\n\nPreconditions:\n```\n(and\n    (at-hero ?from)\n    (connected ?from ?to)\n    (not (is-destroyed ?to))\n)\n```\n\nEffects:\n```\n(and\n    (at-hero ?to)\n    (not (at-hero ?from))\n)\n```\n\nNote: The action does not include an effect for encountering a trap because the action's name \"move-to-trap\" implies that the destination room contains a trap. If the trap's presence needs to be explicitly modeled in the effects, additional predicates and effects would be necessary.", "type": "response", "action": "move-to-trap"}
{"role": "system", "content": "# CONTEXT #\nYou are a tool called PDDL Modeling Assistant. You are a technical experts in constructing Planning Domain Definition Language (PDDL) models via the natural language context.\n# OBJECTIVE #\n* Construct parameters, preconditions and effects based on the domain information, action description and the action name.\n* All variables in the preconditions and effects must be listed in the action's parameters. This restriction helps maintain the action's scope and prevents ambiguity in the planning process.\n* Do not use predicates that are not defined in the available predicates list to construct the preconditions and effects.\n* When the natural language description is ambiguous or certain predicate changes are implied, make reasonable assumptions based on common sense to fill up the implicit predicate in the PDDL action.\n# STYLE #\nFollow the writing style of technical experts. The output can be parsed by a machine, so it is important to follow the structured format.\n# TONE #\nBe precise and concise in constructing the PDDL action. The PDDL action should be clear and unambiguous.\n# AUDIENCE #\nYour audience is someone who is trying to learn how to construct PDDL actions from natural language descriptions.\n# RESPONSE #\nThe response should be in the following format:\n---\n**Explanation:** [Your explanation here]\n\n**Response:**\nParameters:\n1. ?x - [type]: [parameter description]\n2. ...\n\nPreconditions:\n```\n(and\n    ([predicate_1] ?x)\n)\n```\n\nEffects:\n```\n(and\n    (not ([predicate_2] ?x))\n    ([predicate_2] ?x)\n    ...\n)\n```\n---\n", "type": "prompt"}
{"role": "user", "content": "One or two examples from other domains for illustrating the input and output formats.\nHere are two examples from the newspapers domain for demonstrating the output format.\n        \nDomain information: This domain is structured to model a simple newspaper delivery system, where the main tasks involve picking up newspapers from a home base, moving to different locations, and delivering the papers to locations that require them.\n\nA list of available predicates\n1. (at ?loc - loc) ;; the agent is at loc location\n2. (is_Home_Base ?loc - loc) ;; the location is the home base\n3. (satisfied ?loc - loc) ;; the location has received the newspaper\n4. (wants_Paper ?loc - loc) ;; the location needs a newspaper\n5. (unpacked ?paper - paper) ;; the paper is unpacked\n6. (carrying ?paper - paper) ;; the agent is carrying the paper\nExample 1\nAction Description: RoboDelivery is at the home base (loc_home).\nThere is an unpacked newspaper (paper1) at the home base.\nRoboDelivery performs the pick-up action.\n\n    Preconditions: RoboDelivery is at loc_home (which is the home base), and paper1 is unpacked.\n    Effects: RoboDelivery is now carrying paper1, and paper1 is no longer unpacked.\n\nAction name: pick-up\n\n\nYour answer:\n---\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:**\n\nLet's imagine a situation where someone, like a delivery person, needs to pick up newspapers from a place, like a home base, and deliver them to various locations. This situation can be broken down into smaller, specific steps to make it easy for a computer to understand and execute. This is where the action schema you mentioned comes into play.\n\nThe action is called \"pick-up,\" and it involves the delivery person picking up newspapers to deliver. This action is defined in a language called PDDL, which is like giving a computer a recipe to follow.\n\n1. **Parameters**: These are like ingredients in a recipe. Here, the ingredients are any newspaper (`?paper`) and a location (`?loc`), which in this scenario is the home base.\n\n2. **Preconditions**: These are conditions that must be true before the action can start. Think of it like checking if you have all your ingredients before you start cooking.\n   - `(at ?loc)`: The delivery person must be at the location specified (`?loc`). This makes sure they are actually at the home base to pick up the newspapers.\n   - `(is_Home_Base ?loc)`: The location where they are must be the home base. This is crucial because newspapers ready to be delivered are stored here.\n   - `(unpacked ?paper)`: The newspapers need to be unpacked and ready to be picked up. It ensures the newspapers are not in boxes or still bundled up, making them easy to grab and go.\n\n3. **Effects**: These describe what happens after the action is completed.\n   - `(not (unpacked ?paper))`: The newspaper is no longer in an unpacked state at the base because it has been picked up.\n   - `(carrying ?paper)`: The newspaper is now being carried by the delivery person, ready to be delivered to someone who needs it.\n\nThis schema helps the computer understand exactly what needs to happen when the \"pick-up\" action is called in the program. By specifying preconditions, we ensure the action makes sense (you can't pick up a newspaper if you're not there or if the papers aren't ready). The effects tell the computer how the world changes after the action, like the newspaper moving from being unpacked at the base to being carried for delivery.\n\nBy breaking down tasks this way, we help the computer efficiently and correctly handle tasks that seem simple to us but are quite detailed when programmed.\n                \n**Response:**\nParameters:\n1. ?from - loc: [short description of the parameter]\n2. ?to - loc: [short description of the parameter]\n\nPreconditions:\n```\n(at ?from)\n```\n\nEffects:\n```\n(and\n    (not (at ?from))\n    (at ?to)\n)\n```\n\n---\n", "type": "prompt"}
{"role": "user", "content": "Example 2\nAction Description: RoboDelivery wants to deliver the newspaper to a house (loc_house1).\nRoboDelivery performs the move action to go from loc_home to loc_house1.\n\n    Preconditions: RoboDelivery is at loc_home.\n    Effects: RoboDelivery is no longer at loc_home and is now at loc_house1.\n\nAction name: move\n\n\nYour answer:\n---\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:**\n\nImagine you're playing a game where you need to deliver newspapers to different houses in your neighborhood. Each turn in the game allows you to move from one house to another. The action of moving from one house to another in the game can be compared to an action in our newspaper delivery model.\n\nIn the scenario, the action is called \"move,\" and it involves a delivery person moving from a starting location to a destination. Let's break down why this action is modeled the way it is:\n\n1. **Parameters**: These are like placeholders or markers in our game. In the \"move\" action, the parameters are the Starting Location and the Destination. It's just like saying, \"I'm starting from my house and going to my friend's house.\"\n\n2. **Preconditions**: Before you can move from one house to another, you must be at the house you're starting from. It wouldn't make sense to say, \"I'm going from my house to my friend's house\" if you're actually at the grocery store, right? So, the precondition that the delivery person is at the starting location is crucial to make the action logical.\n\n3. **Effects**: After you move from your house to your friend's house, you are no longer at your house; you are now at your friend's house. That\u2019s what happens in our model, too. The effect of the move action is that the delivery person is no longer at the starting location and is now at the destination. This change is captured in the model by removing the state of being at the starting location (`not (at ?from)`) and adding the state of being at the destination (`(at ?to)`).\n\nSo, this action schema perfectly represents the simple yet essential task of moving from one point to another, ensuring that the game's rules are followed: you start from where you say you are, and you end up where you want to go. It's just like moving pieces on a board game, ensuring each move is valid based on where you are and where you want to be.\n                \n**Response:**\nParameters:\n1. ?paper - paper: [short description of the parameter]\n2. ?loc - loc: [short description of the parameter]\n\nPreconditions:\n```\n(and\n    (at ?loc)\n    (is_Home_Base ?loc)\n    (unpacked ?paper)\n)\n```\n\nEffects:\n```\n(and\n    (not (unpacked ?paper))\n    (carrying ?paper)\n)\n```\n\n---\n", "type": "prompt"}
{"role": "user", "content": "Here are two examples from the childsnack domain for demonstrating the output format.\n        \nDomain information: This domain is to plan how to make and serve sandwiches for a group of children in which some are allergic to gluten. There are two actions for making sandwiches from their ingredients. The first one makes a sandwich and the second one makes a sandwich taking into account that all ingredients are gluten-free. There are also actions to put a sandwich on a tray and to serve sandwiches. Problems in this domain define the ingredients to make sandwiches at the initial state. Goals consist of having all kids served with a sandwich to which they are not allergic.\n\nA list of available predicates\n1. (at_kitchen_bread ?b - bread-portion) ;; the bread portion is at the kitchen\n2. (at_kitchen_content ?c - content-portion) ;; the content portion is at the kitchen\n3. (at_kitchen_sandwich ?s - sandwich) ;; the sandwich is at the kitchen\n4. (no_gluten_bread ?b - bread-portion) ;; the bread portion is gluten-free\n5. (no_gluten_content ?c - content-portion) ;; the content portion is gluten-free\n6. (ontray ?s - sandwich ?t - tray) ;; the sandwich is on the tray\n7. (no_gluten_sandwich ?s - sandwich) ;; the sandwich is gluten-free\n8. (allergic_gluten ?c - child) ;; the child is allergic to gluten\n9. (not_allergic_gluten ?c - child) ;; the child is not allergic to gluten\n10. (served ?c - child) ;; the child is served\n11. (waiting ?c - child ?p - place) ;; the child is waiting at the place\n12. (at ?t - tray ?p - place) ;; the tray is at the place\n13. (not_exist ?s - sandwich) ;; the sandwich does not exist\nExample 1\nAction Description: Serves a sandwich to a child not allergic to gluten, who is waiting at a specific place. Removes the sandwich from the tray.\n\nAction name: serve_sandwich\n\n\nYour answer:\n---\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:**\nThe action schema you've described, \"serve_sandwich,\" is designed to model the process of serving a sandwich to a child who is not allergic to gluten at a specific location, while also ensuring the sandwich is removed from the tray after serving. Let's break it down into simpler parts to understand how this works.\n\n1. **Parameters of the Action:**\n   - The action involves four main elements: a sandwich (`?s`), a child (`?c`), a tray (`?t`), and a place (`?p`). These elements are necessary to specify who gets the sandwich, where they get it, and how the sandwich is served.\n\n2. **Preconditions of the Action:**\n   - **Child is not allergic to gluten (`not_allergic_gluten ?c`):** Before serving the sandwich, it's crucial to make sure that the child does not have a gluten allergy. This avoids any health issues.\n   - **Child is waiting (`waiting ?c ?p`):** The child must be waiting at a specific place. This condition ensures that the child is ready to receive the sandwich.\n   - **Sandwich is on the tray (`ontray ?s ?t`):** This checks that the sandwich is available on the tray, indicating it's prepared and ready to be served.\n   - **Tray is at the same place as the child (`at ?t ?p`):** The tray with the sandwich must be in the same location as the waiting child to ensure that the sandwich can be handed over directly.\n\n3. **Effects of the Action:**\n   - **Removing the sandwich from the tray (`not (ontray ?s ?t)`):** Once the sandwich is served, this effect updates the situation by noting that the sandwich is no longer on the tray.\n   - **Child is served (`served ?c`):** This records that the child has now been served the sandwich, fulfilling part of the goal in the sandwich serving scenario.\n\nOverall, this action schema helps coordinate the task of serving sandwiches safely and efficiently, taking into account the location of the child and their dietary restrictions. It ensures that each step is validated before the sandwich is served, and it records the change in the situation once the action is completed. This systematic approach helps in planning and executing tasks without errors, especially in scenarios involving food safety and children's health.\n                \n**Response:**\nParameters:\n1. ?s - sandwich: [short description of the parameter]\n2. ?c - child: [short description of the parameter]\n3. ?t - tray: [short description of the parameter]\n4. ?p - place: [short description of the parameter]\n\nPreconditions:\n```\n(and\n    (not_allergic_gluten ?c)\n    (waiting ?c ?p)\n    (ontray ?s ?t)\n    (at ?t ?p)\n)\n```\n\nEffects:\n```\n(and\n    (not (ontray ?s ?t))\n    (served ?c)\n)\n```\n\n---\n", "type": "prompt"}
{"role": "user", "content": "Example 2\nAction Description: Creates a sandwich using bread and content portions. Removes the bread and content portions from the kitchen and adds the sandwich to the kitchen.\n\nAction name: make_sandwich\n\n\nYour answer:\n---\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:**\n\nImagine you're in a kitchen, ready to make a sandwich. You need two main things to start: a portion of bread and some filling, which we'll call the content. In the domain we're talking about, the task is to make sandwiches, ensuring that all the bread and content are there before you begin. This setup helps in organizing how sandwiches are made and ensures that ingredients are used properly.\n\nIn the action named `make_sandwich`, the goal is to create a sandwich using these ingredients. Let's break down the action into steps, much like following a recipe:\n\n1. **Parameters:** These are like the ingredients listed at the start of a recipe. For this action, the ingredients (parameters) are a sandwich (`?s`), a bread portion (`?b`), and a content portion (`?c`).\n\n2. **Preconditions:** Before you can make a sandwich, you need to make sure you have everything you need. In this case, the preconditions are that:\n   - The bread portion (`?b`) is available in the kitchen. This is checked with `(at_kitchen_bread ?b)`.\n   - The content portion (`?c`) is also available in the kitchen, checked by `(at_kitchen_content ?c)`.\n   - The sandwich you're going to make (`?s`) doesn't already exist. This prevents making duplicate sandwiches and is checked by `(not_exist ?s)`.\n\n3. **Effects:** After making the sandwich, the action results in changes, like steps in a recipe telling you what to do next:\n   - The bread portion (`?b`) used is no longer available in the kitchen. This is noted by `(not (at_kitchen_bread ?b))`, meaning the bread is now part of the sandwich.\n   - Similarly, the content (`?c`) is used up and thus not available as a separate item, noted by `(not (at_kitchen_content ?c))`.\n   - A new sandwich (`?s`) is now available in the kitchen, checked by `(at_kitchen_sandwich ?s)`.\n   - Since the sandwich is made, it now exists, changing the state from `(not_exist ?s)` to its negation, indicating the sandwich's presence.\n\nThrough these steps, the action of making a sandwich is clearly defined from start to finish, ensuring that all necessary ingredients are used appropriately and result in a final product\u2014a sandwich ready to be served!\n\nThis methodical approach ensures everything is in order before starting and reflects accurately in the finished product, much like double-checking your ingredients and steps when following a recipe.\n                \n**Response:**\nParameters:\n1. ?s - sandwich: [short description of the parameter]\n2. ?b - bread-portion: [short description of the parameter]\n3. ?c - content-portion: [short description of the parameter]\n\nPreconditions:\n```\n(and\n    (at_kitchen_bread ?b)\n    (at_kitchen_content ?c)\n    (not_exist ?s)\n)\n```\n\nEffects:\n```\n(and\n    (not (at_kitchen_bread ?b))\n    (not (at_kitchen_content ?c))\n    (at_kitchen_sandwich ?s)\n    (not (not_exist ?s))\n)\n```\n\n---\n", "type": "prompt"}
{"role": "user", "content": "Question: Here is the task.\nA natural language description of the domain\nDomain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape\n\nA list of available predicates\n1. (at-hero ?loc - cells) ;;  Hero's cell location\n2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location\n3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster\n4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap\n5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed\n6. (connected ?from ?to - cells) ;; connects cells\n7. (arm-free) ;; Hero's hand is free\n8. (holding ?s - swords) ;; Hero's holding a sword\n9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed\n\nAction Description: **Destroy** the sword that the hero currently holds. However, this can have unpleasant effects if done in a room with a trap or a monster: it triggers the trap or invites the monster to eat the hero.\n\nAction name: destroy-sword\n\n\nYour answer:\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:**\n\nIn the given dungeon domain, the hero needs to navigate through rooms connected by corridors, dealing with various elements like monsters, traps, and swords. The action \"destroy-sword\" is a critical move where the hero destroys the sword they are currently holding. This action is not without risk, as it can trigger traps or attract monsters if performed in a room with such dangers.\n\nLet's break down the action into its components:\n\n1. **Parameters:** The action involves the hero and the sword that is to be destroyed. The parameters are:\n   - ?s - swords: The identifier for the sword that the hero is going to destroy.\n\n2. **Preconditions:** Before the hero can destroy the sword, certain conditions must be met:\n   - The hero must be holding the sword (`holding ?s`). This ensures that the hero has control over the sword and is capable of destroying it.\n\n3. **Effects:** Once the sword is destroyed, the following changes occur:\n   - The sword is no longer in existence (`is-destroyed ?s`). This reflects the destruction of the sword.\n   - The hero's hand is now free (`arm-free`). This indicates that the hero is no longer holding the sword.\n   - If the hero is in a room with a trap (`has-trap ?loc`) or a monster (`has-monster ?loc`), the action of destroying the sword could have additional effects, such as triggering the trap or alerting the monster. However, since the effects of these situations are not explicitly defined in the action description, they are not included in the PDDL effects. In a more detailed model, these consequences might be modeled as additional effects or as separate actions.\n\nThe action schema for \"destroy-sword\" must be defined carefully to ensure that the hero only destroys the sword when it is safe to do so, or when there is no other choice. This action could be a strategic move to avoid the sword being taken by a monster or to disarm a trap indirectly.\n\n**Response:**\nParameters:\n1. ?s - swords: [The sword that the hero is going to destroy]\n\nPreconditions:\n```\n(and\n    (holding ?s)\n)\n```\n\nEffects:\n```\n(and\n    (is-destroyed ?s)\n    (arm-free)\n)\n```\n\nNote: The additional effects related to triggering traps or attracting monsters are not included here due to lack of specific details in the action description. If those effects were part of the domain, they would need to be modeled as additional preconditions or effects.", "type": "response", "action": "destroy-sword"}
{"role": "system", "content": "# CONTEXT #\nYou are a tool called PDDL Modeling Assistant. You are a technical experts in constructing Planning Domain Definition Language (PDDL) models via the natural language context.\n# OBJECTIVE #\n* Construct parameters, preconditions and effects based on the domain information, action description and the action name.\n* All variables in the preconditions and effects must be listed in the action's parameters. This restriction helps maintain the action's scope and prevents ambiguity in the planning process.\n* Do not use predicates that are not defined in the available predicates list to construct the preconditions and effects.\n* When the natural language description is ambiguous or certain predicate changes are implied, make reasonable assumptions based on common sense to fill up the implicit predicate in the PDDL action.\n# STYLE #\nFollow the writing style of technical experts. The output can be parsed by a machine, so it is important to follow the structured format.\n# TONE #\nBe precise and concise in constructing the PDDL action. The PDDL action should be clear and unambiguous.\n# AUDIENCE #\nYour audience is someone who is trying to learn how to construct PDDL actions from natural language descriptions.\n# RESPONSE #\nThe response should be in the following format:\n---\n**Explanation:** [Your explanation here]\n\n**Response:**\nParameters:\n1. ?x - [type]: [parameter description]\n2. ...\n\nPreconditions:\n```\n(and\n    ([predicate_1] ?x)\n)\n```\n\nEffects:\n```\n(and\n    (not ([predicate_2] ?x))\n    ([predicate_2] ?x)\n    ...\n)\n```\n---\n", "type": "prompt"}
{"role": "user", "content": "One or two examples from other domains for illustrating the input and output formats.\nHere are two examples from the newspapers domain for demonstrating the output format.\n        \nDomain information: This domain is structured to model a simple newspaper delivery system, where the main tasks involve picking up newspapers from a home base, moving to different locations, and delivering the papers to locations that require them.\n\nA list of available predicates\n1. (at ?loc - loc) ;; the agent is at loc location\n2. (is_Home_Base ?loc - loc) ;; the location is the home base\n3. (satisfied ?loc - loc) ;; the location has received the newspaper\n4. (wants_Paper ?loc - loc) ;; the location needs a newspaper\n5. (unpacked ?paper - paper) ;; the paper is unpacked\n6. (carrying ?paper - paper) ;; the agent is carrying the paper\nExample 1\nAction Description: RoboDelivery is at the home base (loc_home).\nThere is an unpacked newspaper (paper1) at the home base.\nRoboDelivery performs the pick-up action.\n\n    Preconditions: RoboDelivery is at loc_home (which is the home base), and paper1 is unpacked.\n    Effects: RoboDelivery is now carrying paper1, and paper1 is no longer unpacked.\n\nAction name: pick-up\n\n\nYour answer:\n---\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:**\n\nLet's imagine a situation where someone, like a delivery person, needs to pick up newspapers from a place, like a home base, and deliver them to various locations. This situation can be broken down into smaller, specific steps to make it easy for a computer to understand and execute. This is where the action schema you mentioned comes into play.\n\nThe action is called \"pick-up,\" and it involves the delivery person picking up newspapers to deliver. This action is defined in a language called PDDL, which is like giving a computer a recipe to follow.\n\n1. **Parameters**: These are like ingredients in a recipe. Here, the ingredients are any newspaper (`?paper`) and a location (`?loc`), which in this scenario is the home base.\n\n2. **Preconditions**: These are conditions that must be true before the action can start. Think of it like checking if you have all your ingredients before you start cooking.\n   - `(at ?loc)`: The delivery person must be at the location specified (`?loc`). This makes sure they are actually at the home base to pick up the newspapers.\n   - `(is_Home_Base ?loc)`: The location where they are must be the home base. This is crucial because newspapers ready to be delivered are stored here.\n   - `(unpacked ?paper)`: The newspapers need to be unpacked and ready to be picked up. It ensures the newspapers are not in boxes or still bundled up, making them easy to grab and go.\n\n3. **Effects**: These describe what happens after the action is completed.\n   - `(not (unpacked ?paper))`: The newspaper is no longer in an unpacked state at the base because it has been picked up.\n   - `(carrying ?paper)`: The newspaper is now being carried by the delivery person, ready to be delivered to someone who needs it.\n\nThis schema helps the computer understand exactly what needs to happen when the \"pick-up\" action is called in the program. By specifying preconditions, we ensure the action makes sense (you can't pick up a newspaper if you're not there or if the papers aren't ready). The effects tell the computer how the world changes after the action, like the newspaper moving from being unpacked at the base to being carried for delivery.\n\nBy breaking down tasks this way, we help the computer efficiently and correctly handle tasks that seem simple to us but are quite detailed when programmed.\n                \n**Response:**\nParameters:\n1. ?from - loc: [short description of the parameter]\n2. ?to - loc: [short description of the parameter]\n\nPreconditions:\n```\n(at ?from)\n```\n\nEffects:\n```\n(and\n    (not (at ?from))\n    (at ?to)\n)\n```\n\n---\n", "type": "prompt"}
{"role": "user", "content": "Example 2\nAction Description: RoboDelivery wants to deliver the newspaper to a house (loc_house1).\nRoboDelivery performs the move action to go from loc_home to loc_house1.\n\n    Preconditions: RoboDelivery is at loc_home.\n    Effects: RoboDelivery is no longer at loc_home and is now at loc_house1.\n\nAction name: move\n\n\nYour answer:\n---\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:**\n\nImagine you're playing a game where you need to deliver newspapers to different houses in your neighborhood. Each turn in the game allows you to move from one house to another. The action of moving from one house to another in the game can be compared to an action in our newspaper delivery model.\n\nIn the scenario, the action is called \"move,\" and it involves a delivery person moving from a starting location to a destination. Let's break down why this action is modeled the way it is:\n\n1. **Parameters**: These are like placeholders or markers in our game. In the \"move\" action, the parameters are the Starting Location and the Destination. It's just like saying, \"I'm starting from my house and going to my friend's house.\"\n\n2. **Preconditions**: Before you can move from one house to another, you must be at the house you're starting from. It wouldn't make sense to say, \"I'm going from my house to my friend's house\" if you're actually at the grocery store, right? So, the precondition that the delivery person is at the starting location is crucial to make the action logical.\n\n3. **Effects**: After you move from your house to your friend's house, you are no longer at your house; you are now at your friend's house. That\u2019s what happens in our model, too. The effect of the move action is that the delivery person is no longer at the starting location and is now at the destination. This change is captured in the model by removing the state of being at the starting location (`not (at ?from)`) and adding the state of being at the destination (`(at ?to)`).\n\nSo, this action schema perfectly represents the simple yet essential task of moving from one point to another, ensuring that the game's rules are followed: you start from where you say you are, and you end up where you want to go. It's just like moving pieces on a board game, ensuring each move is valid based on where you are and where you want to be.\n                \n**Response:**\nParameters:\n1. ?paper - paper: [short description of the parameter]\n2. ?loc - loc: [short description of the parameter]\n\nPreconditions:\n```\n(and\n    (at ?loc)\n    (is_Home_Base ?loc)\n    (unpacked ?paper)\n)\n```\n\nEffects:\n```\n(and\n    (not (unpacked ?paper))\n    (carrying ?paper)\n)\n```\n\n---\n", "type": "prompt"}
{"role": "user", "content": "Here are two examples from the childsnack domain for demonstrating the output format.\n        \nDomain information: This domain is to plan how to make and serve sandwiches for a group of children in which some are allergic to gluten. There are two actions for making sandwiches from their ingredients. The first one makes a sandwich and the second one makes a sandwich taking into account that all ingredients are gluten-free. There are also actions to put a sandwich on a tray and to serve sandwiches. Problems in this domain define the ingredients to make sandwiches at the initial state. Goals consist of having all kids served with a sandwich to which they are not allergic.\n\nA list of available predicates\n1. (at_kitchen_bread ?b - bread-portion) ;; the bread portion is at the kitchen\n2. (at_kitchen_content ?c - content-portion) ;; the content portion is at the kitchen\n3. (at_kitchen_sandwich ?s - sandwich) ;; the sandwich is at the kitchen\n4. (no_gluten_bread ?b - bread-portion) ;; the bread portion is gluten-free\n5. (no_gluten_content ?c - content-portion) ;; the content portion is gluten-free\n6. (ontray ?s - sandwich ?t - tray) ;; the sandwich is on the tray\n7. (no_gluten_sandwich ?s - sandwich) ;; the sandwich is gluten-free\n8. (allergic_gluten ?c - child) ;; the child is allergic to gluten\n9. (not_allergic_gluten ?c - child) ;; the child is not allergic to gluten\n10. (served ?c - child) ;; the child is served\n11. (waiting ?c - child ?p - place) ;; the child is waiting at the place\n12. (at ?t - tray ?p - place) ;; the tray is at the place\n13. (not_exist ?s - sandwich) ;; the sandwich does not exist\nExample 1\nAction Description: Moves a tray from one place to another.\n\nAction name: move_tray\n\n\nYour answer:\n---\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:**\n\nImagine you have a tray of sandwiches in the kitchen, and you need to move it to the dining room where the children are waiting to eat. This situation in real life is similar to what the action \"move_tray\" does in the planning domain for making and serving sandwiches.\n\nIn this action, the tray starts in one place (let's call this the kitchen, or \"place1\"). The goal is to move it to another place (say, the dining room, or \"place2\"). The action \"move_tray\" helps us describe this movement step-by-step in a computer program that plans out tasks.\n\nHere\u2019s why the parts of this action make sense:\n1. **Parameters:** The action needs to know three things:\n   - Which tray are we moving? (That's ?t - tray)\n   - Where is the tray right now? (That's ?p1 - place)\n   - Where do we want to move the tray to? (That's ?p2 - place)\n\n2. **Precondition:** Before we can move the tray, we need to make sure it's actually at the starting place (?p1). This is like checking to see if the tray is really in the kitchen before we try to take it to the dining room.\n\n3. **Effect:** After moving the tray, two things happen:\n   - The tray is no longer at the starting place (?p1). This is like saying, \"It\u2019s not in the kitchen anymore.\"\n   - The tray is now at the new place (?p2). This means, \"It\u2019s now in the dining room.\"\n\nThese steps in the action make sure that the computer program understands exactly where the tray is before and after moving it, just like how you would keep track of where you've put something important.\n\nSo, in simple terms, the \"move_tray\" action tells the computer how to move a tray from one place to another in a planned and orderly way, ensuring the tray ends up right where it needs to be for the children to get their sandwiches.\n                \n**Response:**\nParameters:\n1. ?s - sandwich: [short description of the parameter]\n2. ?c - child: [short description of the parameter]\n3. ?t - tray: [short description of the parameter]\n4. ?p - place: [short description of the parameter]\n\nPreconditions:\n```\n(and\n    (allergic_gluten ?c)\n    (ontray ?s ?t)\n    (waiting ?c ?p)\n    (no_gluten_sandwich ?s)\n    (at ?t ?p)\n)\n```\n\nEffects:\n```\n(and\n    (not (ontray ?s ?t))\n    (served ?c)\n)\n```\n\n---\n", "type": "prompt"}
{"role": "user", "content": "Example 2\nAction Description: Serves a gluten-free sandwich to a child allergic to gluten, who is waiting at a specific place. Removes the sandwich from the tray.\n\nAction name: serve_sandwich_no_gluten\n\n\nYour answer:\n---\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:**\nImagine you're at a fun picnic where some kids need special gluten-free sandwiches because they're allergic to gluten. In our plan, there's a special task called `serve_sandwich_no_gluten`, which is like a set of instructions to make sure these kids get the right sandwich safely and happily.\n\n1. **Understanding the Ingredients and the Setting**:\n   - **Child and Place**: First, we need a child who is allergic to gluten and waiting at a specific place.\n   - **Sandwich and Tray**: We also need a sandwich that is gluten-free and placed on a tray.\n   - **Tray's Location**: The tray with the sandwich needs to be at the same place where the child is waiting.\n\n2. **Action Steps (Preconditions)**:\n   - The child must be allergic to gluten (`allergic_gluten ?c`). This tells us to be extra careful with this child's food.\n   - The gluten-free sandwich should be on the tray (`ontray ?s ?t`), ready to be served.\n   - The child should be waiting at a specific spot (`waiting ?c ?p`), ready to receive their sandwich.\n   - The sandwich needs to be gluten-free (`no_gluten_sandwich ?s`), so it's safe for the child.\n   - The tray with the sandwich has to be at the same place as the waiting child (`at ?t ?p`), so it's easy to serve.\n\n3. **What Happens After the Action (Effects)**:\n   - The sandwich is taken off the tray (`not (ontray ?s ?t)`), because it's being given to the child.\n   - The child is considered served (`served ?c`), meaning they've happily received their sandwich and can start enjoying their meal.\n\nIn simple terms, this action ensures that a child who cannot eat gluten gets a safe, gluten-free sandwich right where they're waiting, and then we mark that they've been served. It's all about making sure everyone at the picnic has a good time with the right food for them!\n                \n**Response:**\nParameters:\n1. ?t - tray: [short description of the parameter]\n2. ?p1 - place: [short description of the parameter]\n3. ?p2 - place: [short description of the parameter]\n\nPreconditions:\n```\n(at ?t ?p1)\n```\n\nEffects:\n```\n(and\n    (not (at ?t ?p1))\n    (at ?t ?p2)\n)\n```\n\n---\n", "type": "prompt"}
{"role": "user", "content": "Question: Here is the task.\nA natural language description of the domain\nDomain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape\n\nA list of available predicates\n1. (at-hero ?loc - cells) ;;  Hero's cell location\n2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location\n3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster\n4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap\n5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed\n6. (connected ?from ?to - cells) ;; connects cells\n7. (arm-free) ;; Hero's hand is free\n8. (holding ?s - swords) ;; Hero's holding a sword\n9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed\n\nAction Description: The hero can **move** to an adjacent room (connected by a corridor) that has not been destroyed (i.e., the hero has not already visited the room). When this action is executed, the original cell get destroyed.\n\nAction name: move\n\n\nYour answer:\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:**\n\nIn the dungeon domain, the hero needs to navigate through a series of rooms connected by corridors to find an exit. The action \"move\" is a fundamental part of this navigation, allowing the hero to travel from one room to another. The hero can only move to an adjacent room if it is connected and not destroyed, ensuring that the hero is progressing through new, unvisited rooms.\n\nThe action \"move\" involves several considerations:\n1. **Location Parameters**: The hero needs to be in a starting location (`?from`) and wants to move to a destination location (`?to`), which must be directly connected to the starting location.\n\n2. **Preconditions**: Before the hero can move, certain conditions must be met:\n   - The hero must currently be at the starting location (`(at-hero ?from)`).\n   - The destination must be connected to the starting location (`(connected ?from ?to)`).\n   - The destination room must not be destroyed, indicating that the hero has not previously visited or that the room is still intact (`(not (is-destroyed ?to))`).\n\n3. **Effects**: After the hero moves, the state of the dungeon changes:\n   - The hero is no longer at the starting location (`(not (at-hero ?from))`).\n   - The hero is now at the destination location (`(at-hero ?to)`).\n   - The starting location is destroyed, possibly indicating that the hero can't return or that it's no longer part of the navigable dungeon (`(is-destroyed ?from)`).\n\nThis action ensures that the hero can progress through the dungeon by moving from one room to another until the exit is found.\n\n**Response:**\nParameters:\n1. ?from - cells: [The starting cell location of the hero]\n2. ?to - cells: [The destination cell location the hero wants to move to]\n\nPreconditions:\n```\n(and\n    (at-hero ?from)\n    (connected ?from ?to)\n    (not (is-destroyed ?to))\n)\n```\n\nEffects:\n```\n(and\n    (not (at-hero ?from))\n    (at-hero ?to)\n    (is-destroyed ?from)\n)\n```", "type": "response", "action": "move"}
