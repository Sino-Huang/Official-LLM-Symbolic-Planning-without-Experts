{"role": "system", "content": "# CONTEXT #\nYou are a tool called PDDL Modeling Assistant. You are a technical experts in constructing Planning Domain Definition Language (PDDL) models via the natural language context.\n# OBJECTIVE #\n* Construct parameters, preconditions and effects based on the domain information, action description and the action name.\n* All variables in the preconditions and effects must be listed in the action's parameters. This restriction helps maintain the action's scope and prevents ambiguity in the planning process.\n* Do not use predicates that are not defined in the available predicates list to construct the preconditions and effects.\n* When the natural language description is ambiguous or certain predicate changes are implied, make reasonable assumptions based on common sense to fill up the implicit predicate in the PDDL action.\n# STYLE #\nFollow the writing style of technical experts. The output can be parsed by a machine, so it is important to follow the structured format.\n# TONE #\nBe precise and concise in constructing the PDDL action. The PDDL action should be clear and unambiguous.\n# AUDIENCE #\nYour audience is someone who is trying to learn how to construct PDDL actions from natural language descriptions.\n# RESPONSE #\nThe response should be in the following format:\n---\n**Explanation:** [Your explanation here]\n\n**Response:**\nParameters:\n1. ?x - [type]: [parameter description]\n2. ...\n\nPreconditions:\n```\n(and\n    ([predicate_1] ?x)\n)\n```\n\nEffects:\n```\n(and\n    (not ([predicate_2] ?x))\n    ([predicate_2] ?x)\n    ...\n)\n```\n---\n", "type": "prompt"}
{"role": "user", "content": "One or two examples from other domains for illustrating the input and output formats.\nHere are two examples from the doors domain for demonstrating the output format.\n        \nDomain information: This domain is structured to allow navigation and interaction within a space comprising rooms, locations, and doors that can be unlocked with keys. The actions and predicates support movement between locations and the unlocking of rooms.\n\nA list of available predicates\n1. (at ?loc - location) ;; agent is at loc location\n2. (unlocked ?room - room) ;; the room is unlocked\n3. (loc_in_room ?loc - location ?room - room) ;; the location is in the room\n4. (key_at ?key - key ?loc - location) ;; the key is at loc location\n5. (key_for_room ?key - key ?room - room) ;; the key is for the room\nExample 1\nAction Description: The action is like embarking on a small journey from one place to another within a confined space. Imagine you're in a large house with multiple rooms. You're currently in one location, let's say the living room (your starting location). You decide to move to another spot, maybe the kitchen (your ending location). However, there's a catch. The kitchen is behind a door that needs to be unlocked (ending room). So, this action can only happen if the kitchen door is already unlocked. Once you move, you're no longer in the living room but now standing in the kitchen, contemplating what to cook!\n\nAction name: move_to\n\n\nYour answer:\n---\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:**\nImagine you're playing a game where you need to explore different rooms by finding keys that unlock them, much like a treasure hunt. The action called \"pick\" in this game allows you to pick up a key from a specific location so you can unlock a room.\n\nHere\u2019s why the action schema matches your description:\n1. **Parameters**: You have parameters like `?loc` (where the key is found), `?key` (the key you find), and `?room` (the room that the key opens). These parameters help define what the action involves\u2014picking up a key at a location that unlocks a specific room.\n\n2. **Preconditions**:\n   - `(at ?loc)`: This means that you, the player, must be at the same location as the key. It ensures you are in the right place to pick it up, like being in the hallway where the key is on the table.\n   - `(key_at ?key ?loc)`: This ensures that the key you need is indeed at your location. It checks that the key is actually there before you can pick it up.\n   - `(key_for_room ?key ?room)`: This confirms that the key you are about to pick up is the correct one for unlocking the specific room you want to enter, like the attic.\n\n3. **Effects**:\n   - `(not (key_at ?key ?loc))`: Once you pick up the key, it's no longer lying there at the location. This effect updates the game state to show the key has been moved\u2014it's now with you.\n   - `(unlocked ?room)`: The action of picking up the key leads to the room being unlocked. Now, you can enter the room you wanted, such as the attic, which was previously locked.\n\nBy combining these elements, the action of \"pick\" logically lets you find a key and use it to access new areas in the game, opening up more adventures\u2014just like in the story of finding a key to unlock the attic.\n                \n**Response:**\nParameters:\n1. ?sloc - location: [short description of the parameter]\n2. ?eloc - location: [short description of the parameter]\n3. ?eroom - room: [short description of the parameter]\n\nPreconditions:\n```\n(and\n    (at ?sloc)\n    (unlocked ?eroom)\n    (loc_in_room ?eloc ?eroom)\n)\n```\n\nEffects:\n```\n(and\n    (not (at ?sloc))\n    (at ?eloc)\n)\n```\n\n---\n", "type": "prompt"}
{"role": "user", "content": "Example 2\nAction Description: This one is akin to a classic scene in adventure games where you find a key and use it to unlock new areas. Picture yourself in the same house. You find a key lying on a table in the hallway (the key's location). This isn't just any key; it's special because it opens the door to the mysterious attic (the room the key unlocks). By picking up this key, you perform the action. The moment you have the key in your hand, the attic is no longer inaccessible. It's as if the key magically signals the attic door to unlock, waiting for you to discover its secrets.\n\nAction name: pick\n\n\nYour answer:\n---\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:**\nImagine you're playing a game where you're exploring different rooms and finding keys that can unlock new areas. The action called \"pick\" in this game lets you pick up a key that's in the same location as you, which then unlocks a room that the key is meant for. Let's break down how this works in simple terms.\n\nFirst, you need to be in the same location as the key. That's like being in a hallway where you see a key on a table. The action requires that you are right there with the key, which makes sense, right? You can't pick up a key from another room!\n\nNext, the key you find has to be the right one for a specific room. It\u2019s like having a label on the key saying \"this key is for the attic,\" ensuring that you don't try to use a kitchen key to open the attic.\n\nNow, when you pick up the key, the game checks two important things before letting you pick it up:\n1. **You are at the key's location**: You have to be right there where the key is.\n2. **The key is for the room you want to unlock**: This makes sure the key matches the room you\u2019re trying to access.\n\nOnce these conditions are met, and you pick up the key, two things happen:\n1. **The key is no longer at its original location**: Just like in real life, once you pick something up, it's not there anymore.\n2. **The room unlocks**: It\u2019s like the key told the door, \"Hey, open up!\" and now you can go into the attic and explore.\n\nThis action, \"pick,\" neatly connects your action of picking up the key with the effect of unlocking a new room, making the game or the story you're in feel real and connected. The conditions you meet before picking up the key ensure that everything makes sense and flows logically, just like in real life when you need the right key to open a specific door.\n                \n**Response:**\nParameters:\n1. ?loc - location: [short description of the parameter]\n2. ?key - key: [short description of the parameter]\n3. ?room - room: [short description of the parameter]\n\nPreconditions:\n```\n(and\n    (at ?loc)\n    (key_at ?key ?loc)\n    (key_for_room ?key ?room)\n)\n```\n\nEffects:\n```\n(and\n    (not (key_at ?key ?loc))\n    (unlocked ?room)\n)\n```\n\n---\n", "type": "prompt"}
{"role": "user", "content": "Here are two examples from the logistics domain for demonstrating the output format.\n        \nDomain information: In this logistics domain, various objects need to be transported from one location to another. To achieve this, trucks are used for moving objects within a city, while airplanes are used for transporting objects between different cities. The domain includes different types of locations such as regular places and airports, with specific vehicles designed for each type of transport.\n\nA list of available predicates\n1. (at ?obj - object ?loc - location) ;; the object is at the location\n2. (in ?obj1 - object ?obj2 - object) ;; the obj1 is in obj2\n3. (in-city ?loc - location ?city - city) ;; the location is in the city\nExample 1\nAction Description: Similar to unloading a truck, this action involves removing an object from an airplane once it has reached its destination. The object is taken out of the airplane and placed at the airport or specified location. The airplane must be at the same location as the object for this action to happen.\n\nAction name: unload-airplane\n\n\nYour answer:\n---\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:** The action named \"unload-airplane\" described in simple terms, involves taking an object out of an airplane and placing it at a specific location, like an airport. Now, let\u2019s look at how this action matches the natural language description and why the details in the PDDL (Planning Domain Definition Language) make sense.\n\nThe action in PDDL requires some information, called parameters, which are the object, the airplane from which the object is being unloaded, and the location where the airplane is. These details help define what is involved in the action.\n\nNext, we have preconditions. These are the conditions that must be true before the action can happen:\n1. The object must be inside the airplane. This makes sense because you can\u2019t unload something that isn\u2019t already loaded.\n2. The airplane must be at the location where the object needs to be placed (like the airport). This is crucial because if the airplane isn't at the right place, you can't unload the object there.\n\nFinally, the effects describe what happens after the action is taken:\n1. The object is no longer in the airplane (represented by removing \"(in ?obj ?airplane)\"). This indicates that the object has been successfully removed.\n2. The object is now at the specific location (adding \"(at ?obj ?loc)\"). This shows that the object has been placed at the destination, completing the process of unloading.\n\nThis PDDL action schema effectively translates the natural language description into a structured format that a planning system can understand and execute, ensuring that the object is moved from the airplane to the desired location under the right conditions. It\u2019s a bit like giving a computer a recipe that it can follow step-by-step to get a task done.\n                \n**Response:**\nParameters:\n1. ?obj - object: [short description of the parameter]\n2. ?airplane - airplane: [short description of the parameter]\n3. ?loc - location: [short description of the parameter]\n\nPreconditions:\n```\n(and\n    (at ?obj ?loc)\n    (at ?airplane ?loc)\n)\n```\n\nEffects:\n```\n(and\n    (not (at ?obj ?loc))\n    (in ?obj ?airplane)\n)\n```\n\n---\n", "type": "prompt"}
{"role": "user", "content": "Example 2\nAction Description: For long-distance transportation, objects are loaded onto airplanes. This requires that the object and the airplane are at the same location, typically an airport. Once the object is loaded into the airplane, it can be flown to another city. This action removes the object from its current location and places it inside the airplane.\n\nAction name: load-airplane\n\n\nYour answer:\n---\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:**\nImagine you have a toy airplane and several small toy objects that need to be moved from one part of your playroom to another. First, you need to make sure that both your airplane and the object are at the same starting point. This is like making sure both your toys are on the same part of the carpet before you start playing.\n\nIn the scenario described for the \"load-airplane\" action, it works similarly. First, there's a need to check (or ensure) that the object and the airplane are at the same location, which is usually an airport. This is like checking both toys are on the same part of the carpet. This check is what we call a \"precondition\" because it must be true before you can proceed with the action.\n\nIn the action schema for \"load-airplane,\" the preconditions state that both the object (`?obj`) and the airplane (`?airplane`) need to be at the same location (`?loc`). This makes sense because you can't load an object into an airplane if they're not in the same place, right?\n\nOnce the object is confirmed to be in the same location as the airplane, the next step in our play scenario would be to put the toy object into the toy airplane. Translating this into our action schema, once the preconditions are met, the object can be loaded into the airplane. This change is what we call the \"effect\" of the action. The schema says that the object is no longer just \"at\" the location (`(not (at ?obj ?loc))`), it's now \"in\" the airplane (`(in ?obj ?airplane)`). This means the object has successfully been placed inside the airplane, ready to be flown to another city.\n\nSo, simply put, the action \"load-airplane\" in the PDDL (a way of writing down the steps and rules for actions in computer language) matches perfectly with the need to get an object and an airplane together at the same place before moving the object into the airplane for its journey. This helps ensure that everything happens where and how it should, just like making sure all your toys are set up right for a fun playtime!\n                \n**Response:**\nParameters:\n1. ?obj - object: [short description of the parameter]\n2. ?airplane - airplane: [short description of the parameter]\n3. ?loc - location: [short description of the parameter]\n\nPreconditions:\n```\n(and\n    (in ?obj ?airplane)\n    (at ?airplane ?loc)\n)\n```\n\nEffects:\n```\n(and\n    (not (in ?obj ?airplane))\n    (at ?obj ?loc)\n)\n```\n\n---\n", "type": "prompt"}
{"role": "user", "content": "Question: Here is the task.\nA natural language description of the domain\nDomain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape\n\nA list of available predicates\n1. (at-hero ?loc - cells) ;;  Hero's cell location\n2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location\n3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster\n4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap\n5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed\n6. (connected ?from ?to - cells) ;; connects cells\n7. (arm-free) ;; Hero's hand is free\n8. (holding ?s - swords) ;; Hero's holding a sword\n9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed\n\nAction Description: The hero can **move** to an adjacent room (connected by a corridor) that has not been destroyed (i.e., the hero has not already visited the room). When this action is executed, the hero gets into a location with a monster\n\nAction name: move-to-monster\n\n\nYour answer:\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:**\nIn the dungeon domain, the hero needs to navigate through rooms connected by corridors to find an exit. The action \"move-to-monster\" involves the hero moving to an adjacent room that has not been destroyed and contains a monster. This action is significant because it represents the hero's deliberate choice to confront a monster, which is a necessary step for progressing through the dungeon.\n\nFor this action, we need to define parameters that specify the hero's current location, the destination location with the monster, and any swords that might be involved. The preconditions ensure that the hero is in the right state and the environment is set up correctly before the action can take place. The effects describe the outcome of the action, reflecting changes in the hero's state and the dungeon's state.\n\nThe preconditions for \"move-to-monster\" include:\n- The hero must be at a certain location (`(at-hero ?from)`).\n- The destination must have a monster (`(has-monster ?to)`).\n- The destination must be connected to the hero's current location (`(connected ?from ?to)`).\n- The destination must not be destroyed (`(not (is-destroyed ?to))`).\n\nThe effects of the action are:\n- The hero is no longer at the starting location (`(not (at-hero ?from))`).\n- The hero is now at the destination location with the monster (`(at-hero ?to)`).\n\nNote that we do not include any effects related to the monster's state because the action description does not specify what happens to the monster when the hero moves to the room. It is assumed that another action would be required to deal with the monster.\n\n**Response:**\nParameters:\n1. ?from - cells: [The cell location where the hero is currently located]\n2. ?to - cells: [The cell location with a monster that the hero is moving to]\n\nPreconditions:\n```\n(and\n    (at-hero ?from)\n    (has-monster ?to)\n    (connected ?from ?to)\n    (not (is-destroyed ?to))\n)\n```\n\nEffects:\n```\n(and\n    (not (at-hero ?from))\n    (at-hero ?to)\n)\n```\n\n---", "type": "response", "action": "move-to-monster"}
{"role": "system", "content": "# CONTEXT #\nYou are a tool called PDDL Modeling Assistant. You are a technical experts in constructing Planning Domain Definition Language (PDDL) models via the natural language context.\n# OBJECTIVE #\n* Construct parameters, preconditions and effects based on the domain information, action description and the action name.\n* All variables in the preconditions and effects must be listed in the action's parameters. This restriction helps maintain the action's scope and prevents ambiguity in the planning process.\n* Do not use predicates that are not defined in the available predicates list to construct the preconditions and effects.\n* When the natural language description is ambiguous or certain predicate changes are implied, make reasonable assumptions based on common sense to fill up the implicit predicate in the PDDL action.\n# STYLE #\nFollow the writing style of technical experts. The output can be parsed by a machine, so it is important to follow the structured format.\n# TONE #\nBe precise and concise in constructing the PDDL action. The PDDL action should be clear and unambiguous.\n# AUDIENCE #\nYour audience is someone who is trying to learn how to construct PDDL actions from natural language descriptions.\n# RESPONSE #\nThe response should be in the following format:\n---\n**Explanation:** [Your explanation here]\n\n**Response:**\nParameters:\n1. ?x - [type]: [parameter description]\n2. ...\n\nPreconditions:\n```\n(and\n    ([predicate_1] ?x)\n)\n```\n\nEffects:\n```\n(and\n    (not ([predicate_2] ?x))\n    ([predicate_2] ?x)\n    ...\n)\n```\n---\n", "type": "prompt"}
{"role": "user", "content": "One or two examples from other domains for illustrating the input and output formats.\nHere are two examples from the doors domain for demonstrating the output format.\n        \nDomain information: This domain is structured to allow navigation and interaction within a space comprising rooms, locations, and doors that can be unlocked with keys. The actions and predicates support movement between locations and the unlocking of rooms.\n\nA list of available predicates\n1. (at ?loc - location) ;; agent is at loc location\n2. (unlocked ?room - room) ;; the room is unlocked\n3. (loc_in_room ?loc - location ?room - room) ;; the location is in the room\n4. (key_at ?key - key ?loc - location) ;; the key is at loc location\n5. (key_for_room ?key - key ?room - room) ;; the key is for the room\nExample 1\nAction Description: The action is like embarking on a small journey from one place to another within a confined space. Imagine you're in a large house with multiple rooms. You're currently in one location, let's say the living room (your starting location). You decide to move to another spot, maybe the kitchen (your ending location). However, there's a catch. The kitchen is behind a door that needs to be unlocked (ending room). So, this action can only happen if the kitchen door is already unlocked. Once you move, you're no longer in the living room but now standing in the kitchen, contemplating what to cook!\n\nAction name: move_to\n\n\nYour answer:\n---\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:**\nImagine you're playing a game where you need to explore different rooms by finding keys that unlock them, much like a treasure hunt. The action called \"pick\" in this game allows you to pick up a key from a specific location so you can unlock a room.\n\nHere\u2019s why the action schema matches your description:\n1. **Parameters**: You have parameters like `?loc` (where the key is found), `?key` (the key you find), and `?room` (the room that the key opens). These parameters help define what the action involves\u2014picking up a key at a location that unlocks a specific room.\n\n2. **Preconditions**:\n   - `(at ?loc)`: This means that you, the player, must be at the same location as the key. It ensures you are in the right place to pick it up, like being in the hallway where the key is on the table.\n   - `(key_at ?key ?loc)`: This ensures that the key you need is indeed at your location. It checks that the key is actually there before you can pick it up.\n   - `(key_for_room ?key ?room)`: This confirms that the key you are about to pick up is the correct one for unlocking the specific room you want to enter, like the attic.\n\n3. **Effects**:\n   - `(not (key_at ?key ?loc))`: Once you pick up the key, it's no longer lying there at the location. This effect updates the game state to show the key has been moved\u2014it's now with you.\n   - `(unlocked ?room)`: The action of picking up the key leads to the room being unlocked. Now, you can enter the room you wanted, such as the attic, which was previously locked.\n\nBy combining these elements, the action of \"pick\" logically lets you find a key and use it to access new areas in the game, opening up more adventures\u2014just like in the story of finding a key to unlock the attic.\n                \n**Response:**\nParameters:\n1. ?sloc - location: [short description of the parameter]\n2. ?eloc - location: [short description of the parameter]\n3. ?eroom - room: [short description of the parameter]\n\nPreconditions:\n```\n(and\n    (at ?sloc)\n    (unlocked ?eroom)\n    (loc_in_room ?eloc ?eroom)\n)\n```\n\nEffects:\n```\n(and\n    (not (at ?sloc))\n    (at ?eloc)\n)\n```\n\n---\n", "type": "prompt"}
{"role": "user", "content": "Example 2\nAction Description: This one is akin to a classic scene in adventure games where you find a key and use it to unlock new areas. Picture yourself in the same house. You find a key lying on a table in the hallway (the key's location). This isn't just any key; it's special because it opens the door to the mysterious attic (the room the key unlocks). By picking up this key, you perform the action. The moment you have the key in your hand, the attic is no longer inaccessible. It's as if the key magically signals the attic door to unlock, waiting for you to discover its secrets.\n\nAction name: pick\n\n\nYour answer:\n---\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:**\nImagine you're playing a game where you're exploring different rooms and finding keys that can unlock new areas. The action called \"pick\" in this game lets you pick up a key that's in the same location as you, which then unlocks a room that the key is meant for. Let's break down how this works in simple terms.\n\nFirst, you need to be in the same location as the key. That's like being in a hallway where you see a key on a table. The action requires that you are right there with the key, which makes sense, right? You can't pick up a key from another room!\n\nNext, the key you find has to be the right one for a specific room. It\u2019s like having a label on the key saying \"this key is for the attic,\" ensuring that you don't try to use a kitchen key to open the attic.\n\nNow, when you pick up the key, the game checks two important things before letting you pick it up:\n1. **You are at the key's location**: You have to be right there where the key is.\n2. **The key is for the room you want to unlock**: This makes sure the key matches the room you\u2019re trying to access.\n\nOnce these conditions are met, and you pick up the key, two things happen:\n1. **The key is no longer at its original location**: Just like in real life, once you pick something up, it's not there anymore.\n2. **The room unlocks**: It\u2019s like the key told the door, \"Hey, open up!\" and now you can go into the attic and explore.\n\nThis action, \"pick,\" neatly connects your action of picking up the key with the effect of unlocking a new room, making the game or the story you're in feel real and connected. The conditions you meet before picking up the key ensure that everything makes sense and flows logically, just like in real life when you need the right key to open a specific door.\n                \n**Response:**\nParameters:\n1. ?loc - location: [short description of the parameter]\n2. ?key - key: [short description of the parameter]\n3. ?room - room: [short description of the parameter]\n\nPreconditions:\n```\n(and\n    (at ?loc)\n    (key_at ?key ?loc)\n    (key_for_room ?key ?room)\n)\n```\n\nEffects:\n```\n(and\n    (not (key_at ?key ?loc))\n    (unlocked ?room)\n)\n```\n\n---\n", "type": "prompt"}
{"role": "user", "content": "Here are two examples from the logistics domain for demonstrating the output format.\n        \nDomain information: In this logistics domain, various objects need to be transported from one location to another. To achieve this, trucks are used for moving objects within a city, while airplanes are used for transporting objects between different cities. The domain includes different types of locations such as regular places and airports, with specific vehicles designed for each type of transport.\n\nA list of available predicates\n1. (at ?obj - object ?loc - location) ;; the object is at the location\n2. (in ?obj1 - object ?obj2 - object) ;; the obj1 is in obj2\n3. (in-city ?loc - location ?city - city) ;; the location is in the city\nExample 1\nAction Description: After a truck has transported an object to its destination within the city, the object needs to be unloaded. This action takes the object out of the truck and places it at the new location. The truck and the object must both be at the same location for the unloading to occur.\n\nAction name: unload-truck\n\n\nYour answer:\n---\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:**\nLet's talk about how the action \"unload-truck\" matches the description you gave and why it's designed the way it is in PDDL, which is a way to plan out tasks for programs to understand.\n\nIn your description, you mentioned that trucks in a city can transport objects to different places within the same city. Once a truck reaches its destination, the objects it was carrying need to be unloaded. This means taking the object out of the truck and putting it at the location where the truck has stopped.\n\nThe PDDL action schema for \"unload-truck\" does just this:\n\n1. **Parameters**: It starts by specifying what it needs to know:\n   - ?obj - the object that needs to be unloaded.\n   - ?truck - the truck that is carrying the object.\n   - ?loc - the location where the object needs to be placed.\n\n2. **Preconditions**: These are the conditions that must be true before the truck can unload the object. There are two conditions:\n   - The truck (?truck) must be at the destination (?loc) \u2013 this makes sense because you can't unload something if you're not at the right place.\n   - The object (?obj) must be in the truck (?truck) \u2013 obviously, the truck needs to be carrying the object to unload it.\n\n3. **Effects**: These are the things that will be true after the action is completed. Again, two things happen:\n   - The object (?obj) is no longer in the truck (?truck). This is shown as (not (in ?obj ?truck)), which means the object is no longer being carried by the truck.\n   - The object (?obj) is now at the location (?loc). This means the object has been moved from the truck to the location.\n\nThis action schema is designed exactly to match the real-world action of a truck unloading an object at a specific location. The preconditions make sure everything is in place for the action to happen, and the effects are what change in the world as a result of the action.\n\nBy ensuring that the conditions and effects logically flow from the task of unloading, this PDDL schema effectively translates a real-world activity into a format that planning software can understand and execute.\n                \n**Response:**\nParameters:\n1. ?obj - object: [short description of the parameter]\n2. ?truck - truck: [short description of the parameter]\n3. ?loc - location: [short description of the parameter]\n\nPreconditions:\n```\n(and\n    (at ?truck ?loc)\n    (in ?obj ?truck)\n)\n```\n\nEffects:\n```\n(and\n    (not (in ?obj ?truck))\n    (at ?obj ?loc)\n)\n```\n\n---\n", "type": "prompt"}
{"role": "user", "content": "Example 2\nAction Description: Similar to unloading a truck, this action involves removing an object from an airplane once it has reached its destination. The object is taken out of the airplane and placed at the airport or specified location. The airplane must be at the same location as the object for this action to happen.\n\nAction name: unload-airplane\n\n\nYour answer:\n---\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:** The action named \"unload-airplane\" described in simple terms, involves taking an object out of an airplane and placing it at a specific location, like an airport. Now, let\u2019s look at how this action matches the natural language description and why the details in the PDDL (Planning Domain Definition Language) make sense.\n\nThe action in PDDL requires some information, called parameters, which are the object, the airplane from which the object is being unloaded, and the location where the airplane is. These details help define what is involved in the action.\n\nNext, we have preconditions. These are the conditions that must be true before the action can happen:\n1. The object must be inside the airplane. This makes sense because you can\u2019t unload something that isn\u2019t already loaded.\n2. The airplane must be at the location where the object needs to be placed (like the airport). This is crucial because if the airplane isn't at the right place, you can't unload the object there.\n\nFinally, the effects describe what happens after the action is taken:\n1. The object is no longer in the airplane (represented by removing \"(in ?obj ?airplane)\"). This indicates that the object has been successfully removed.\n2. The object is now at the specific location (adding \"(at ?obj ?loc)\"). This shows that the object has been placed at the destination, completing the process of unloading.\n\nThis PDDL action schema effectively translates the natural language description into a structured format that a planning system can understand and execute, ensuring that the object is moved from the airplane to the desired location under the right conditions. It\u2019s a bit like giving a computer a recipe that it can follow step-by-step to get a task done.\n                \n**Response:**\nParameters:\n1. ?obj - object: [short description of the parameter]\n2. ?airplane - airplane: [short description of the parameter]\n3. ?loc - location: [short description of the parameter]\n\nPreconditions:\n```\n(and\n    (in ?obj ?airplane)\n    (at ?airplane ?loc)\n)\n```\n\nEffects:\n```\n(and\n    (not (in ?obj ?airplane))\n    (at ?obj ?loc)\n)\n```\n\n---\n", "type": "prompt"}
{"role": "user", "content": "Question: Here is the task.\nA natural language description of the domain\nDomain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape\n\nA list of available predicates\n1. (at-hero ?loc - cells) ;;  Hero's cell location\n2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location\n3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster\n4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap\n5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed\n6. (connected ?from ?to - cells) ;; connects cells\n7. (arm-free) ;; Hero's hand is free\n8. (holding ?s - swords) ;; Hero's holding a sword\n9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed\n\nAction Description: **Disarm a trap** \u2013 if there is a trap in the room the hero is in and the hero is empty-handed (does not hold a sword), then the hero can disarm it\n\nAction name: disarm-trap\n\n\nYour answer:\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:**\nThe action \"disarm-trap\" is a critical move in the dungeon domain where the hero needs to navigate through various challenges to escape. In this scenario, the hero must deal with a trap that is in the same room. The hero can only disarm the trap if they are not currently holding a sword, which is represented by the \"arm-free\" predicate.\n\nThe PDDL for this action will define the parameters needed to specify the location of the trap and the hero. The preconditions will ensure that the hero is at the location of the trap and that their arm is free to perform the action. The effects will reflect the change in the state of the world once the trap is disarmed.\n\nHere's the breakdown:\n- **Parameters**: The action needs to know the location of the trap, which is also the location of the hero since the hero must be in the same room as the trap to disarm it.\n- **Preconditions**: The hero must be at the location of the trap (\"(at-hero ?loc)\"), the location must have a trap (\"(has-trap ?loc)\"), and the hero's arm must be free (\"(arm-free)\").\n- **Effects**: Once the trap is disarmed, the \"trap-disarmed\" predicate becomes true for that location, indicating that the trap is no longer a threat.\n\nThis action schema allows the planning system to understand the conditions under which the hero can disarm a trap and the outcome of performing this action, which is essential for creating a valid plan for the hero to escape the dungeon.\n\n**Response:**\nParameters:\n1. ?loc - cells: [The cell where the hero is located and where the trap is located]\n\nPreconditions:\n```\n(and\n    (at-hero ?loc)\n    (has-trap ?loc)\n    (arm-free)\n)\n```\n\nEffects:\n```\n(and\n    (trap-disarmed ?loc)\n)\n```\n\n---", "type": "response", "action": "disarm-trap"}
{"role": "system", "content": "# CONTEXT #\nYou are a tool called PDDL Modeling Assistant. You are a technical experts in constructing Planning Domain Definition Language (PDDL) models via the natural language context.\n# OBJECTIVE #\n* Construct parameters, preconditions and effects based on the domain information, action description and the action name.\n* All variables in the preconditions and effects must be listed in the action's parameters. This restriction helps maintain the action's scope and prevents ambiguity in the planning process.\n* Do not use predicates that are not defined in the available predicates list to construct the preconditions and effects.\n* When the natural language description is ambiguous or certain predicate changes are implied, make reasonable assumptions based on common sense to fill up the implicit predicate in the PDDL action.\n# STYLE #\nFollow the writing style of technical experts. The output can be parsed by a machine, so it is important to follow the structured format.\n# TONE #\nBe precise and concise in constructing the PDDL action. The PDDL action should be clear and unambiguous.\n# AUDIENCE #\nYour audience is someone who is trying to learn how to construct PDDL actions from natural language descriptions.\n# RESPONSE #\nThe response should be in the following format:\n---\n**Explanation:** [Your explanation here]\n\n**Response:**\nParameters:\n1. ?x - [type]: [parameter description]\n2. ...\n\nPreconditions:\n```\n(and\n    ([predicate_1] ?x)\n)\n```\n\nEffects:\n```\n(and\n    (not ([predicate_2] ?x))\n    ([predicate_2] ?x)\n    ...\n)\n```\n---\n", "type": "prompt"}
{"role": "user", "content": "One or two examples from other domains for illustrating the input and output formats.\nHere are two examples from the doors domain for demonstrating the output format.\n        \nDomain information: This domain is structured to allow navigation and interaction within a space comprising rooms, locations, and doors that can be unlocked with keys. The actions and predicates support movement between locations and the unlocking of rooms.\n\nA list of available predicates\n1. (at ?loc - location) ;; agent is at loc location\n2. (unlocked ?room - room) ;; the room is unlocked\n3. (loc_in_room ?loc - location ?room - room) ;; the location is in the room\n4. (key_at ?key - key ?loc - location) ;; the key is at loc location\n5. (key_for_room ?key - key ?room - room) ;; the key is for the room\nExample 1\nAction Description: The action is like embarking on a small journey from one place to another within a confined space. Imagine you're in a large house with multiple rooms. You're currently in one location, let's say the living room (your starting location). You decide to move to another spot, maybe the kitchen (your ending location). However, there's a catch. The kitchen is behind a door that needs to be unlocked (ending room). So, this action can only happen if the kitchen door is already unlocked. Once you move, you're no longer in the living room but now standing in the kitchen, contemplating what to cook!\n\nAction name: move_to\n\n\nYour answer:\n---\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:**\nImagine you're playing a game where you need to explore different rooms by finding keys that unlock them, much like a treasure hunt. The action called \"pick\" in this game allows you to pick up a key from a specific location so you can unlock a room.\n\nHere\u2019s why the action schema matches your description:\n1. **Parameters**: You have parameters like `?loc` (where the key is found), `?key` (the key you find), and `?room` (the room that the key opens). These parameters help define what the action involves\u2014picking up a key at a location that unlocks a specific room.\n\n2. **Preconditions**:\n   - `(at ?loc)`: This means that you, the player, must be at the same location as the key. It ensures you are in the right place to pick it up, like being in the hallway where the key is on the table.\n   - `(key_at ?key ?loc)`: This ensures that the key you need is indeed at your location. It checks that the key is actually there before you can pick it up.\n   - `(key_for_room ?key ?room)`: This confirms that the key you are about to pick up is the correct one for unlocking the specific room you want to enter, like the attic.\n\n3. **Effects**:\n   - `(not (key_at ?key ?loc))`: Once you pick up the key, it's no longer lying there at the location. This effect updates the game state to show the key has been moved\u2014it's now with you.\n   - `(unlocked ?room)`: The action of picking up the key leads to the room being unlocked. Now, you can enter the room you wanted, such as the attic, which was previously locked.\n\nBy combining these elements, the action of \"pick\" logically lets you find a key and use it to access new areas in the game, opening up more adventures\u2014just like in the story of finding a key to unlock the attic.\n                \n**Response:**\nParameters:\n1. ?sloc - location: [short description of the parameter]\n2. ?eloc - location: [short description of the parameter]\n3. ?eroom - room: [short description of the parameter]\n\nPreconditions:\n```\n(and\n    (at ?sloc)\n    (unlocked ?eroom)\n    (loc_in_room ?eloc ?eroom)\n)\n```\n\nEffects:\n```\n(and\n    (not (at ?sloc))\n    (at ?eloc)\n)\n```\n\n---\n", "type": "prompt"}
{"role": "user", "content": "Example 2\nAction Description: This one is akin to a classic scene in adventure games where you find a key and use it to unlock new areas. Picture yourself in the same house. You find a key lying on a table in the hallway (the key's location). This isn't just any key; it's special because it opens the door to the mysterious attic (the room the key unlocks). By picking up this key, you perform the action. The moment you have the key in your hand, the attic is no longer inaccessible. It's as if the key magically signals the attic door to unlock, waiting for you to discover its secrets.\n\nAction name: pick\n\n\nYour answer:\n---\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:**\nImagine you're playing a game where you're exploring different rooms and finding keys that can unlock new areas. The action called \"pick\" in this game lets you pick up a key that's in the same location as you, which then unlocks a room that the key is meant for. Let's break down how this works in simple terms.\n\nFirst, you need to be in the same location as the key. That's like being in a hallway where you see a key on a table. The action requires that you are right there with the key, which makes sense, right? You can't pick up a key from another room!\n\nNext, the key you find has to be the right one for a specific room. It\u2019s like having a label on the key saying \"this key is for the attic,\" ensuring that you don't try to use a kitchen key to open the attic.\n\nNow, when you pick up the key, the game checks two important things before letting you pick it up:\n1. **You are at the key's location**: You have to be right there where the key is.\n2. **The key is for the room you want to unlock**: This makes sure the key matches the room you\u2019re trying to access.\n\nOnce these conditions are met, and you pick up the key, two things happen:\n1. **The key is no longer at its original location**: Just like in real life, once you pick something up, it's not there anymore.\n2. **The room unlocks**: It\u2019s like the key told the door, \"Hey, open up!\" and now you can go into the attic and explore.\n\nThis action, \"pick,\" neatly connects your action of picking up the key with the effect of unlocking a new room, making the game or the story you're in feel real and connected. The conditions you meet before picking up the key ensure that everything makes sense and flows logically, just like in real life when you need the right key to open a specific door.\n                \n**Response:**\nParameters:\n1. ?loc - location: [short description of the parameter]\n2. ?key - key: [short description of the parameter]\n3. ?room - room: [short description of the parameter]\n\nPreconditions:\n```\n(and\n    (at ?loc)\n    (key_at ?key ?loc)\n    (key_for_room ?key ?room)\n)\n```\n\nEffects:\n```\n(and\n    (not (key_at ?key ?loc))\n    (unlocked ?room)\n)\n```\n\n---\n", "type": "prompt"}
{"role": "user", "content": "Here are two examples from the logistics domain for demonstrating the output format.\n        \nDomain information: In this logistics domain, various objects need to be transported from one location to another. To achieve this, trucks are used for moving objects within a city, while airplanes are used for transporting objects between different cities. The domain includes different types of locations such as regular places and airports, with specific vehicles designed for each type of transport.\n\nA list of available predicates\n1. (at ?obj - object ?loc - location) ;; the object is at the location\n2. (in ?obj1 - object ?obj2 - object) ;; the obj1 is in obj2\n3. (in-city ?loc - location ?city - city) ;; the location is in the city\nExample 1\nAction Description: When you need to transport an object within a city, you can load it onto a truck. This involves placing the object inside the truck at a specific location. The object and the truck must both be at the same location for this action to take place. Once loaded, the object is ready to be moved by the truck.\n\nAction name: load-truck\n\n\nYour answer:\n---\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:**\nImagine you have a toy truck and blocks in a playroom. To move a block with the truck, you first need to make sure both the block and the truck are in the same spot in the room. Only then can you put the block onto the truck.\n\nIn our scenario, the action called \"load-truck\" represents putting an object (like a box) into a truck at a certain place (like a parking lot) within a city. Here's how it works step-by-step:\n\n1. **Preconditions (What needs to be true before the action can happen?):**\n   - The truck and the object must be at the same location. This makes sense, right? You can't load a box into a truck if they're not together.\n\n2. **Effects (What changes after the action is done?):**\n   - The object is no longer just at the location; it is now inside the truck. This is shown by two changes:\n     - We say the object is no longer 'at' the location (that\u2019s why we say `not (at ?obj ?loc)`). It's like saying, \"The box isn't just sitting in the parking lot anymore.\"\n     - We also say the object is 'in' the truck (`in ?obj ?truck`), like saying, \"The box is now securely placed inside the truck.\"\n\nThis action schema fits the natural language description because it captures the process of moving an object into a truck within a city. The preconditions make sure everything is in place for the action to occur, and the effects describe the new situation\u2014 the object is ready to be transported by the truck. It's a simple way of ensuring that everything happens where and how it's supposed to.\n                \n**Response:**\nParameters:\n1. ?obj - object: [short description of the parameter]\n2. ?truck - truck: [short description of the parameter]\n3. ?loc - location: [short description of the parameter]\n\nPreconditions:\n```\n(and\n    (at ?truck ?loc)\n    (at ?obj ?loc)\n)\n```\n\nEffects:\n```\n(and\n    (not (at ?obj ?loc))\n    (in ?obj ?truck)\n)\n```\n\n---\n", "type": "prompt"}
{"role": "user", "content": "Example 2\nAction Description: Similar to unloading a truck, this action involves removing an object from an airplane once it has reached its destination. The object is taken out of the airplane and placed at the airport or specified location. The airplane must be at the same location as the object for this action to happen.\n\nAction name: unload-airplane\n\n\nYour answer:\n---\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:** The action named \"unload-airplane\" described in simple terms, involves taking an object out of an airplane and placing it at a specific location, like an airport. Now, let\u2019s look at how this action matches the natural language description and why the details in the PDDL (Planning Domain Definition Language) make sense.\n\nThe action in PDDL requires some information, called parameters, which are the object, the airplane from which the object is being unloaded, and the location where the airplane is. These details help define what is involved in the action.\n\nNext, we have preconditions. These are the conditions that must be true before the action can happen:\n1. The object must be inside the airplane. This makes sense because you can\u2019t unload something that isn\u2019t already loaded.\n2. The airplane must be at the location where the object needs to be placed (like the airport). This is crucial because if the airplane isn't at the right place, you can't unload the object there.\n\nFinally, the effects describe what happens after the action is taken:\n1. The object is no longer in the airplane (represented by removing \"(in ?obj ?airplane)\"). This indicates that the object has been successfully removed.\n2. The object is now at the specific location (adding \"(at ?obj ?loc)\"). This shows that the object has been placed at the destination, completing the process of unloading.\n\nThis PDDL action schema effectively translates the natural language description into a structured format that a planning system can understand and execute, ensuring that the object is moved from the airplane to the desired location under the right conditions. It\u2019s a bit like giving a computer a recipe that it can follow step-by-step to get a task done.\n                \n**Response:**\nParameters:\n1. ?obj - object: [short description of the parameter]\n2. ?airplane - airplane: [short description of the parameter]\n3. ?loc - location: [short description of the parameter]\n\nPreconditions:\n```\n(and\n    (in ?obj ?airplane)\n    (at ?airplane ?loc)\n)\n```\n\nEffects:\n```\n(and\n    (not (in ?obj ?airplane))\n    (at ?obj ?loc)\n)\n```\n\n---\n", "type": "prompt"}
{"role": "user", "content": "Question: Here is the task.\nA natural language description of the domain\nDomain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape\n\nA list of available predicates\n1. (at-hero ?loc - cells) ;;  Hero's cell location\n2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location\n3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster\n4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap\n5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed\n6. (connected ?from ?to - cells) ;; connects cells\n7. (arm-free) ;; Hero's hand is free\n8. (holding ?s - swords) ;; Hero's holding a sword\n9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed\n\nAction Description: **Pickup** the sword if present in the room the hero is currently in and the hero is empty handed\n\nAction name: pick-sword\n\n\nYour answer:\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:**\nIn the dungeon domain, the action \"pick-sword\" allows the hero to pick up a sword that is in the same room as the hero. This action is only possible if the hero is not already holding a sword, which is represented by the \"arm-free\" predicate. The action's purpose is to allow the hero to arm themselves for potential encounters with monsters or to use the sword to disarm traps.\n\nThe natural language description specifies that the hero can only pick up the sword if it is present in the room they are currently in and if their hands are free. This translates into the following PDDL components:\n\n- **Parameters**: The parameters include the hero's location (`?loc`) and the sword (`?s`) that the hero is attempting to pick up.\n- **Preconditions**: These are the conditions that must be met before the action can be executed. In this case, the hero must be at the location where the sword is (`(at-hero ?loc)` and `(at-sword ?s ?loc)`), and the hero's hands must be free (`(arm-free)`).\n- **Effects**: After the action is executed, the state of the world changes. The sword is no longer at its original location (`(not (at-sword ?s ?loc))`), and the hero is now holding the sword (`(holding ?s)`).\n\nThis action schema ensures that the hero can only pick up a sword if it is logically possible, maintaining the integrity of the game's rules and the hero's capabilities.\n\n**Response:**\nParameters:\n1. ?s - swords: [The sword that the hero is going to pick up]\n2. ?loc - cells: [The location where the hero and the sword are]\n\nPreconditions:\n```\n(and\n    (at-hero ?loc)\n    (at-sword ?s ?loc)\n    (arm-free)\n)\n```\n\nEffects:\n```\n(and\n    (not (at-sword ?s ?loc))\n    (holding ?s)\n)\n```", "type": "response", "action": "pick-sword"}
{"role": "system", "content": "# CONTEXT #\nYou are a tool called PDDL Modeling Assistant. You are a technical experts in constructing Planning Domain Definition Language (PDDL) models via the natural language context.\n# OBJECTIVE #\n* Construct parameters, preconditions and effects based on the domain information, action description and the action name.\n* All variables in the preconditions and effects must be listed in the action's parameters. This restriction helps maintain the action's scope and prevents ambiguity in the planning process.\n* Do not use predicates that are not defined in the available predicates list to construct the preconditions and effects.\n* When the natural language description is ambiguous or certain predicate changes are implied, make reasonable assumptions based on common sense to fill up the implicit predicate in the PDDL action.\n# STYLE #\nFollow the writing style of technical experts. The output can be parsed by a machine, so it is important to follow the structured format.\n# TONE #\nBe precise and concise in constructing the PDDL action. The PDDL action should be clear and unambiguous.\n# AUDIENCE #\nYour audience is someone who is trying to learn how to construct PDDL actions from natural language descriptions.\n# RESPONSE #\nThe response should be in the following format:\n---\n**Explanation:** [Your explanation here]\n\n**Response:**\nParameters:\n1. ?x - [type]: [parameter description]\n2. ...\n\nPreconditions:\n```\n(and\n    ([predicate_1] ?x)\n)\n```\n\nEffects:\n```\n(and\n    (not ([predicate_2] ?x))\n    ([predicate_2] ?x)\n    ...\n)\n```\n---\n", "type": "prompt"}
{"role": "user", "content": "One or two examples from other domains for illustrating the input and output formats.\nHere are two examples from the doors domain for demonstrating the output format.\n        \nDomain information: This domain is structured to allow navigation and interaction within a space comprising rooms, locations, and doors that can be unlocked with keys. The actions and predicates support movement between locations and the unlocking of rooms.\n\nA list of available predicates\n1. (at ?loc - location) ;; agent is at loc location\n2. (unlocked ?room - room) ;; the room is unlocked\n3. (loc_in_room ?loc - location ?room - room) ;; the location is in the room\n4. (key_at ?key - key ?loc - location) ;; the key is at loc location\n5. (key_for_room ?key - key ?room - room) ;; the key is for the room\nExample 1\nAction Description: This one is akin to a classic scene in adventure games where you find a key and use it to unlock new areas. Picture yourself in the same house. You find a key lying on a table in the hallway (the key's location). This isn't just any key; it's special because it opens the door to the mysterious attic (the room the key unlocks). By picking up this key, you perform the action. The moment you have the key in your hand, the attic is no longer inaccessible. It's as if the key magically signals the attic door to unlock, waiting for you to discover its secrets.\n\nAction name: pick\n\n\nYour answer:\n---\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:**\nImagine you're playing a game where you're exploring different rooms and finding keys that can unlock new areas. The action called \"pick\" in this game lets you pick up a key that's in the same location as you, which then unlocks a room that the key is meant for. Let's break down how this works in simple terms.\n\nFirst, you need to be in the same location as the key. That's like being in a hallway where you see a key on a table. The action requires that you are right there with the key, which makes sense, right? You can't pick up a key from another room!\n\nNext, the key you find has to be the right one for a specific room. It\u2019s like having a label on the key saying \"this key is for the attic,\" ensuring that you don't try to use a kitchen key to open the attic.\n\nNow, when you pick up the key, the game checks two important things before letting you pick it up:\n1. **You are at the key's location**: You have to be right there where the key is.\n2. **The key is for the room you want to unlock**: This makes sure the key matches the room you\u2019re trying to access.\n\nOnce these conditions are met, and you pick up the key, two things happen:\n1. **The key is no longer at its original location**: Just like in real life, once you pick something up, it's not there anymore.\n2. **The room unlocks**: It\u2019s like the key told the door, \"Hey, open up!\" and now you can go into the attic and explore.\n\nThis action, \"pick,\" neatly connects your action of picking up the key with the effect of unlocking a new room, making the game or the story you're in feel real and connected. The conditions you meet before picking up the key ensure that everything makes sense and flows logically, just like in real life when you need the right key to open a specific door.\n                \n**Response:**\nParameters:\n1. ?sloc - location: [short description of the parameter]\n2. ?eloc - location: [short description of the parameter]\n3. ?eroom - room: [short description of the parameter]\n\nPreconditions:\n```\n(and\n    (at ?sloc)\n    (unlocked ?eroom)\n    (loc_in_room ?eloc ?eroom)\n)\n```\n\nEffects:\n```\n(and\n    (not (at ?sloc))\n    (at ?eloc)\n)\n```\n\n---\n", "type": "prompt"}
{"role": "user", "content": "Example 2\nAction Description: The action is like embarking on a small journey from one place to another within a confined space. Imagine you're in a large house with multiple rooms. You're currently in one location, let's say the living room (your starting location). You decide to move to another spot, maybe the kitchen (your ending location). However, there's a catch. The kitchen is behind a door that needs to be unlocked (ending room). So, this action can only happen if the kitchen door is already unlocked. Once you move, you're no longer in the living room but now standing in the kitchen, contemplating what to cook!\n\nAction name: move_to\n\n\nYour answer:\n---\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:**\nImagine you're playing a game where you need to explore different rooms by finding keys that unlock them, much like a treasure hunt. The action called \"pick\" in this game allows you to pick up a key from a specific location so you can unlock a room.\n\nHere\u2019s why the action schema matches your description:\n1. **Parameters**: You have parameters like `?loc` (where the key is found), `?key` (the key you find), and `?room` (the room that the key opens). These parameters help define what the action involves\u2014picking up a key at a location that unlocks a specific room.\n\n2. **Preconditions**:\n   - `(at ?loc)`: This means that you, the player, must be at the same location as the key. It ensures you are in the right place to pick it up, like being in the hallway where the key is on the table.\n   - `(key_at ?key ?loc)`: This ensures that the key you need is indeed at your location. It checks that the key is actually there before you can pick it up.\n   - `(key_for_room ?key ?room)`: This confirms that the key you are about to pick up is the correct one for unlocking the specific room you want to enter, like the attic.\n\n3. **Effects**:\n   - `(not (key_at ?key ?loc))`: Once you pick up the key, it's no longer lying there at the location. This effect updates the game state to show the key has been moved\u2014it's now with you.\n   - `(unlocked ?room)`: The action of picking up the key leads to the room being unlocked. Now, you can enter the room you wanted, such as the attic, which was previously locked.\n\nBy combining these elements, the action of \"pick\" logically lets you find a key and use it to access new areas in the game, opening up more adventures\u2014just like in the story of finding a key to unlock the attic.\n                \n**Response:**\nParameters:\n1. ?loc - location: [short description of the parameter]\n2. ?key - key: [short description of the parameter]\n3. ?room - room: [short description of the parameter]\n\nPreconditions:\n```\n(and\n    (at ?loc)\n    (key_at ?key ?loc)\n    (key_for_room ?key ?room)\n)\n```\n\nEffects:\n```\n(and\n    (not (key_at ?key ?loc))\n    (unlocked ?room)\n)\n```\n\n---\n", "type": "prompt"}
{"role": "user", "content": "Here are two examples from the logistics domain for demonstrating the output format.\n        \nDomain information: In this logistics domain, various objects need to be transported from one location to another. To achieve this, trucks are used for moving objects within a city, while airplanes are used for transporting objects between different cities. The domain includes different types of locations such as regular places and airports, with specific vehicles designed for each type of transport.\n\nA list of available predicates\n1. (at ?obj - object ?loc - location) ;; the object is at the location\n2. (in ?obj1 - object ?obj2 - object) ;; the obj1 is in obj2\n3. (in-city ?loc - location ?city - city) ;; the location is in the city\nExample 1\nAction Description: After a truck has transported an object to its destination within the city, the object needs to be unloaded. This action takes the object out of the truck and places it at the new location. The truck and the object must both be at the same location for the unloading to occur.\n\nAction name: unload-truck\n\n\nYour answer:\n---\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:**\nLet's talk about how the action \"unload-truck\" matches the description you gave and why it's designed the way it is in PDDL, which is a way to plan out tasks for programs to understand.\n\nIn your description, you mentioned that trucks in a city can transport objects to different places within the same city. Once a truck reaches its destination, the objects it was carrying need to be unloaded. This means taking the object out of the truck and putting it at the location where the truck has stopped.\n\nThe PDDL action schema for \"unload-truck\" does just this:\n\n1. **Parameters**: It starts by specifying what it needs to know:\n   - ?obj - the object that needs to be unloaded.\n   - ?truck - the truck that is carrying the object.\n   - ?loc - the location where the object needs to be placed.\n\n2. **Preconditions**: These are the conditions that must be true before the truck can unload the object. There are two conditions:\n   - The truck (?truck) must be at the destination (?loc) \u2013 this makes sense because you can't unload something if you're not at the right place.\n   - The object (?obj) must be in the truck (?truck) \u2013 obviously, the truck needs to be carrying the object to unload it.\n\n3. **Effects**: These are the things that will be true after the action is completed. Again, two things happen:\n   - The object (?obj) is no longer in the truck (?truck). This is shown as (not (in ?obj ?truck)), which means the object is no longer being carried by the truck.\n   - The object (?obj) is now at the location (?loc). This means the object has been moved from the truck to the location.\n\nThis action schema is designed exactly to match the real-world action of a truck unloading an object at a specific location. The preconditions make sure everything is in place for the action to happen, and the effects are what change in the world as a result of the action.\n\nBy ensuring that the conditions and effects logically flow from the task of unloading, this PDDL schema effectively translates a real-world activity into a format that planning software can understand and execute.\n                \n**Response:**\nParameters:\n1. ?obj - object: [short description of the parameter]\n2. ?truck - truck: [short description of the parameter]\n3. ?loc - location: [short description of the parameter]\n\nPreconditions:\n```\n(and\n    (at ?truck ?loc)\n    (in ?obj ?truck)\n)\n```\n\nEffects:\n```\n(and\n    (not (in ?obj ?truck))\n    (at ?obj ?loc)\n)\n```\n\n---\n", "type": "prompt"}
{"role": "user", "content": "Example 2\nAction Description: Airplanes are used to fly objects between different cities. This action involves moving the airplane from one airport to another. The airplane must start at the departure airport and will end up at the destination airport, ready for unloading or further transportation of the objects inside.\n\nAction name: fly-airplane\n\n\nYour answer:\n---\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:**\n\nIn our logistics domain, we have airplanes that can move objects between different cities by flying from one airport to another. The PDDL action named \"fly-airplane\" describes how this moving process works.\n\n1. **Parameters of the Action:**\n   - The action \"fly-airplane\" involves three main components: an airplane, a departure airport (loc-from), and a destination airport (loc-to). These are specified as parameters which simply means they are the essential parts needed for this action to happen.\n\n2. **Preconditions:**\n   - The precondition for this action is `(at ?airplane ?loc-from)`. This means that for the airplane to fly from one airport to another, it must already be located at the departure airport (`loc-from`). This makes sense because an airplane can't start flying from an airport if it isn't there to begin with.\n\n3. **Effects:**\n   - The effects of this action are described by `(and (not (at ?airplane ?loc-from)) (at ?airplane ?loc-to))`. This part explains what changes occur after the action is completed.\n     - `(not (at ?airplane ?loc-from))` indicates that once the airplane has taken off, it is no longer at the departure airport. It's a way to show that the airplane has left the starting point.\n     - `(at ?airplane ?loc-to)` confirms that after flying, the airplane arrives at the destination airport (`loc-to`). This marks the successful completion of the journey from one city to another.\n\nTo summarize, the action schema for \"fly-airplane\" perfectly matches our natural language description by detailing how an airplane moves from one airport to another. It clearly explains that the airplane starts at one airport and ends at another, with the changes accurately reflected in the conditions and effects within the schema.\n                \n**Response:**\nParameters:\n1. ?airplane - airplane: [short description of the parameter]\n2. ?loc-from - airport: [short description of the parameter]\n3. ?loc-to - airport: [short description of the parameter]\n\nPreconditions:\n```\n(at ?airplane ?loc-from)\n```\n\nEffects:\n```\n(and\n    (not (at ?airplane ?loc-from))\n    (at ?airplane ?loc-to)\n)\n```\n\n---\n", "type": "prompt"}
{"role": "user", "content": "Question: Here is the task.\nA natural language description of the domain\nDomain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape\n\nA list of available predicates\n1. (at-hero ?loc - cells) ;;  Hero's cell location\n2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location\n3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster\n4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap\n5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed\n6. (connected ?from ?to - cells) ;; connects cells\n7. (arm-free) ;; Hero's hand is free\n8. (holding ?s - swords) ;; Hero's holding a sword\n9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed\n\nAction Description: The hero can **move** to an adjacent room (connected by a corridor) that has not been destroyed (i.e., the hero has not already visited the room). When this action is executed, the hero gets into a location with a trap\n\nAction name: move-to-trap\n\n\nYour answer:\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:**\n\nIn the dungeon domain, the hero needs to navigate through rooms connected by corridors to find an exit. The action \"move-to-trap\" describes the hero moving to an adjacent room that contains a trap. For this action to be executed, certain conditions must be met, and certain effects must occur once the action is completed.\n\nThe hero can only move to a room if it is connected to the current location and has not been destroyed. Upon moving to the new room, the hero's location changes, and since the action description specifies that the room has a trap, we can infer that the hero is now in a room with a trap.\n\n1. **Parameters of the Action:**\n   - ?from - The starting cell where the hero is currently located.\n   - ?to - The target cell where the hero will move, which contains a trap.\n\n2. **Preconditions:**\n   - The hero must be at the starting cell (`(at-hero ?from)`).\n   - The target cell must be connected to the starting cell (`(connected ?from ?to)`).\n   - The target cell must not be destroyed (`(not (is-destroyed ?to))`).\n\n3. **Effects:**\n   - The hero is no longer at the starting cell (`(not (at-hero ?from))`).\n   - The hero is now at the target cell (`(at-hero ?to)`).\n\nSince the action description does not specify that the trap is disarmed upon the hero's arrival, we do not include an effect for disarming the trap. The action simply involves moving to a room with a trap.\n\n**Response:**\nParameters:\n1. ?from - cells: [The starting cell where the hero is located]\n2. ?to - cells: [The target cell where the hero will move, which contains a trap]\n\nPreconditions:\n```\n(and\n    (at-hero ?from)\n    (connected ?from ?to)\n    (not (is-destroyed ?to))\n)\n```\n\nEffects:\n```\n(and\n    (not (at-hero ?from))\n    (at-hero ?to)\n)\n```\n\n---", "type": "response", "action": "move-to-trap"}
{"role": "system", "content": "# CONTEXT #\nYou are a tool called PDDL Modeling Assistant. You are a technical experts in constructing Planning Domain Definition Language (PDDL) models via the natural language context.\n# OBJECTIVE #\n* Construct parameters, preconditions and effects based on the domain information, action description and the action name.\n* All variables in the preconditions and effects must be listed in the action's parameters. This restriction helps maintain the action's scope and prevents ambiguity in the planning process.\n* Do not use predicates that are not defined in the available predicates list to construct the preconditions and effects.\n* When the natural language description is ambiguous or certain predicate changes are implied, make reasonable assumptions based on common sense to fill up the implicit predicate in the PDDL action.\n# STYLE #\nFollow the writing style of technical experts. The output can be parsed by a machine, so it is important to follow the structured format.\n# TONE #\nBe precise and concise in constructing the PDDL action. The PDDL action should be clear and unambiguous.\n# AUDIENCE #\nYour audience is someone who is trying to learn how to construct PDDL actions from natural language descriptions.\n# RESPONSE #\nThe response should be in the following format:\n---\n**Explanation:** [Your explanation here]\n\n**Response:**\nParameters:\n1. ?x - [type]: [parameter description]\n2. ...\n\nPreconditions:\n```\n(and\n    ([predicate_1] ?x)\n)\n```\n\nEffects:\n```\n(and\n    (not ([predicate_2] ?x))\n    ([predicate_2] ?x)\n    ...\n)\n```\n---\n", "type": "prompt"}
{"role": "user", "content": "One or two examples from other domains for illustrating the input and output formats.\nHere are two examples from the doors domain for demonstrating the output format.\n        \nDomain information: This domain is structured to allow navigation and interaction within a space comprising rooms, locations, and doors that can be unlocked with keys. The actions and predicates support movement between locations and the unlocking of rooms.\n\nA list of available predicates\n1. (at ?loc - location) ;; agent is at loc location\n2. (unlocked ?room - room) ;; the room is unlocked\n3. (loc_in_room ?loc - location ?room - room) ;; the location is in the room\n4. (key_at ?key - key ?loc - location) ;; the key is at loc location\n5. (key_for_room ?key - key ?room - room) ;; the key is for the room\nExample 1\nAction Description: This one is akin to a classic scene in adventure games where you find a key and use it to unlock new areas. Picture yourself in the same house. You find a key lying on a table in the hallway (the key's location). This isn't just any key; it's special because it opens the door to the mysterious attic (the room the key unlocks). By picking up this key, you perform the action. The moment you have the key in your hand, the attic is no longer inaccessible. It's as if the key magically signals the attic door to unlock, waiting for you to discover its secrets.\n\nAction name: pick\n\n\nYour answer:\n---\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:**\nImagine you're playing a game where you're exploring different rooms and finding keys that can unlock new areas. The action called \"pick\" in this game lets you pick up a key that's in the same location as you, which then unlocks a room that the key is meant for. Let's break down how this works in simple terms.\n\nFirst, you need to be in the same location as the key. That's like being in a hallway where you see a key on a table. The action requires that you are right there with the key, which makes sense, right? You can't pick up a key from another room!\n\nNext, the key you find has to be the right one for a specific room. It\u2019s like having a label on the key saying \"this key is for the attic,\" ensuring that you don't try to use a kitchen key to open the attic.\n\nNow, when you pick up the key, the game checks two important things before letting you pick it up:\n1. **You are at the key's location**: You have to be right there where the key is.\n2. **The key is for the room you want to unlock**: This makes sure the key matches the room you\u2019re trying to access.\n\nOnce these conditions are met, and you pick up the key, two things happen:\n1. **The key is no longer at its original location**: Just like in real life, once you pick something up, it's not there anymore.\n2. **The room unlocks**: It\u2019s like the key told the door, \"Hey, open up!\" and now you can go into the attic and explore.\n\nThis action, \"pick,\" neatly connects your action of picking up the key with the effect of unlocking a new room, making the game or the story you're in feel real and connected. The conditions you meet before picking up the key ensure that everything makes sense and flows logically, just like in real life when you need the right key to open a specific door.\n                \n**Response:**\nParameters:\n1. ?sloc - location: [short description of the parameter]\n2. ?eloc - location: [short description of the parameter]\n3. ?eroom - room: [short description of the parameter]\n\nPreconditions:\n```\n(and\n    (at ?sloc)\n    (unlocked ?eroom)\n    (loc_in_room ?eloc ?eroom)\n)\n```\n\nEffects:\n```\n(and\n    (not (at ?sloc))\n    (at ?eloc)\n)\n```\n\n---\n", "type": "prompt"}
{"role": "user", "content": "Example 2\nAction Description: The action is like embarking on a small journey from one place to another within a confined space. Imagine you're in a large house with multiple rooms. You're currently in one location, let's say the living room (your starting location). You decide to move to another spot, maybe the kitchen (your ending location). However, there's a catch. The kitchen is behind a door that needs to be unlocked (ending room). So, this action can only happen if the kitchen door is already unlocked. Once you move, you're no longer in the living room but now standing in the kitchen, contemplating what to cook!\n\nAction name: move_to\n\n\nYour answer:\n---\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:**\nImagine you're playing a game where you need to explore different rooms by finding keys that unlock them, much like a treasure hunt. The action called \"pick\" in this game allows you to pick up a key from a specific location so you can unlock a room.\n\nHere\u2019s why the action schema matches your description:\n1. **Parameters**: You have parameters like `?loc` (where the key is found), `?key` (the key you find), and `?room` (the room that the key opens). These parameters help define what the action involves\u2014picking up a key at a location that unlocks a specific room.\n\n2. **Preconditions**:\n   - `(at ?loc)`: This means that you, the player, must be at the same location as the key. It ensures you are in the right place to pick it up, like being in the hallway where the key is on the table.\n   - `(key_at ?key ?loc)`: This ensures that the key you need is indeed at your location. It checks that the key is actually there before you can pick it up.\n   - `(key_for_room ?key ?room)`: This confirms that the key you are about to pick up is the correct one for unlocking the specific room you want to enter, like the attic.\n\n3. **Effects**:\n   - `(not (key_at ?key ?loc))`: Once you pick up the key, it's no longer lying there at the location. This effect updates the game state to show the key has been moved\u2014it's now with you.\n   - `(unlocked ?room)`: The action of picking up the key leads to the room being unlocked. Now, you can enter the room you wanted, such as the attic, which was previously locked.\n\nBy combining these elements, the action of \"pick\" logically lets you find a key and use it to access new areas in the game, opening up more adventures\u2014just like in the story of finding a key to unlock the attic.\n                \n**Response:**\nParameters:\n1. ?loc - location: [short description of the parameter]\n2. ?key - key: [short description of the parameter]\n3. ?room - room: [short description of the parameter]\n\nPreconditions:\n```\n(and\n    (at ?loc)\n    (key_at ?key ?loc)\n    (key_for_room ?key ?room)\n)\n```\n\nEffects:\n```\n(and\n    (not (key_at ?key ?loc))\n    (unlocked ?room)\n)\n```\n\n---\n", "type": "prompt"}
{"role": "user", "content": "Here are two examples from the logistics domain for demonstrating the output format.\n        \nDomain information: In this logistics domain, various objects need to be transported from one location to another. To achieve this, trucks are used for moving objects within a city, while airplanes are used for transporting objects between different cities. The domain includes different types of locations such as regular places and airports, with specific vehicles designed for each type of transport.\n\nA list of available predicates\n1. (at ?obj - object ?loc - location) ;; the object is at the location\n2. (in ?obj1 - object ?obj2 - object) ;; the obj1 is in obj2\n3. (in-city ?loc - location ?city - city) ;; the location is in the city\nExample 1\nAction Description: After a truck has transported an object to its destination within the city, the object needs to be unloaded. This action takes the object out of the truck and places it at the new location. The truck and the object must both be at the same location for the unloading to occur.\n\nAction name: unload-truck\n\n\nYour answer:\n---\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:**\nLet's talk about how the action \"unload-truck\" matches the description you gave and why it's designed the way it is in PDDL, which is a way to plan out tasks for programs to understand.\n\nIn your description, you mentioned that trucks in a city can transport objects to different places within the same city. Once a truck reaches its destination, the objects it was carrying need to be unloaded. This means taking the object out of the truck and putting it at the location where the truck has stopped.\n\nThe PDDL action schema for \"unload-truck\" does just this:\n\n1. **Parameters**: It starts by specifying what it needs to know:\n   - ?obj - the object that needs to be unloaded.\n   - ?truck - the truck that is carrying the object.\n   - ?loc - the location where the object needs to be placed.\n\n2. **Preconditions**: These are the conditions that must be true before the truck can unload the object. There are two conditions:\n   - The truck (?truck) must be at the destination (?loc) \u2013 this makes sense because you can't unload something if you're not at the right place.\n   - The object (?obj) must be in the truck (?truck) \u2013 obviously, the truck needs to be carrying the object to unload it.\n\n3. **Effects**: These are the things that will be true after the action is completed. Again, two things happen:\n   - The object (?obj) is no longer in the truck (?truck). This is shown as (not (in ?obj ?truck)), which means the object is no longer being carried by the truck.\n   - The object (?obj) is now at the location (?loc). This means the object has been moved from the truck to the location.\n\nThis action schema is designed exactly to match the real-world action of a truck unloading an object at a specific location. The preconditions make sure everything is in place for the action to happen, and the effects are what change in the world as a result of the action.\n\nBy ensuring that the conditions and effects logically flow from the task of unloading, this PDDL schema effectively translates a real-world activity into a format that planning software can understand and execute.\n                \n**Response:**\nParameters:\n1. ?obj - object: [short description of the parameter]\n2. ?airplane - airplane: [short description of the parameter]\n3. ?loc - location: [short description of the parameter]\n\nPreconditions:\n```\n(and\n    (at ?obj ?loc)\n    (at ?airplane ?loc)\n)\n```\n\nEffects:\n```\n(and\n    (not (at ?obj ?loc))\n    (in ?obj ?airplane)\n)\n```\n\n---\n", "type": "prompt"}
{"role": "user", "content": "Example 2\nAction Description: For long-distance transportation, objects are loaded onto airplanes. This requires that the object and the airplane are at the same location, typically an airport. Once the object is loaded into the airplane, it can be flown to another city. This action removes the object from its current location and places it inside the airplane.\n\nAction name: load-airplane\n\n\nYour answer:\n---\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:**\nImagine you have a toy airplane and several small toy objects that need to be moved from one part of your playroom to another. First, you need to make sure that both your airplane and the object are at the same starting point. This is like making sure both your toys are on the same part of the carpet before you start playing.\n\nIn the scenario described for the \"load-airplane\" action, it works similarly. First, there's a need to check (or ensure) that the object and the airplane are at the same location, which is usually an airport. This is like checking both toys are on the same part of the carpet. This check is what we call a \"precondition\" because it must be true before you can proceed with the action.\n\nIn the action schema for \"load-airplane,\" the preconditions state that both the object (`?obj`) and the airplane (`?airplane`) need to be at the same location (`?loc`). This makes sense because you can't load an object into an airplane if they're not in the same place, right?\n\nOnce the object is confirmed to be in the same location as the airplane, the next step in our play scenario would be to put the toy object into the toy airplane. Translating this into our action schema, once the preconditions are met, the object can be loaded into the airplane. This change is what we call the \"effect\" of the action. The schema says that the object is no longer just \"at\" the location (`(not (at ?obj ?loc))`), it's now \"in\" the airplane (`(in ?obj ?airplane)`). This means the object has successfully been placed inside the airplane, ready to be flown to another city.\n\nSo, simply put, the action \"load-airplane\" in the PDDL (a way of writing down the steps and rules for actions in computer language) matches perfectly with the need to get an object and an airplane together at the same place before moving the object into the airplane for its journey. This helps ensure that everything happens where and how it should, just like making sure all your toys are set up right for a fun playtime!\n                \n**Response:**\nParameters:\n1. ?obj - object: [short description of the parameter]\n2. ?truck - truck: [short description of the parameter]\n3. ?loc - location: [short description of the parameter]\n\nPreconditions:\n```\n(and\n    (at ?truck ?loc)\n    (in ?obj ?truck)\n)\n```\n\nEffects:\n```\n(and\n    (not (in ?obj ?truck))\n    (at ?obj ?loc)\n)\n```\n\n---\n", "type": "prompt"}
{"role": "user", "content": "Question: Here is the task.\nA natural language description of the domain\nDomain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape\n\nA list of available predicates\n1. (at-hero ?loc - cells) ;;  Hero's cell location\n2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location\n3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster\n4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap\n5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed\n6. (connected ?from ?to - cells) ;; connects cells\n7. (arm-free) ;; Hero's hand is free\n8. (holding ?s - swords) ;; Hero's holding a sword\n9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed\n\nAction Description: **Destroy** the sword that the hero currently holds. However, this can have unpleasant effects if done in a room with a trap or a monster: it triggers the trap or invites the monster to eat the hero.\n\nAction name: destroy-sword\n\n\nYour answer:\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:**\nIn the given dungeon domain, the hero needs to navigate through rooms connected by corridors, dealing with monsters, traps, and potentially helpful items like swords. The action \"destroy-sword\" is a strategic move where the hero decides to destroy the sword they are currently holding. This action is not without risk, as it can trigger traps or attract monsters if performed in a room with such dangers.\n\nFor the \"destroy-sword\" action, we need to define the parameters, preconditions, and effects. The parameters specify what objects or locations are involved in the action. The preconditions are the conditions that must be met before the action can be executed, and the effects describe the changes that occur in the world after the action is taken.\n\nThe hero can only destroy a sword if they are currently holding it, which means the hero's hand is not free. Therefore, the preconditions must include that the hero is holding a sword. Additionally, we need to consider the potential consequences of destroying a sword in a room with a monster or a trap. However, for the purpose of this action, we will define the effects based on the action itself, without considering the subsequent outcomes in the presence of a monster or trap.\n\n**Response:**\nParameters:\n1. ?s - swords: [The sword that the hero is going to destroy]\n\nPreconditions:\n```\n(and\n    (holding ?s)\n)\n```\n\nEffects:\n```\n(and\n    (not (holding ?s))\n    (is-destroyed ?s)\n)\n```\n\nNote that the action does not explicitly include effects related to triggering traps or attracting monsters, as these would be part of a different action or a result of the state changes caused by this action. The focus here is solely on the act of destroying the sword and the immediate change in the hero's state (no longer holding the sword) and the sword's state (being destroyed).", "type": "response", "action": "destroy-sword"}
{"role": "system", "content": "# CONTEXT #\nYou are a tool called PDDL Modeling Assistant. You are a technical experts in constructing Planning Domain Definition Language (PDDL) models via the natural language context.\n# OBJECTIVE #\n* Construct parameters, preconditions and effects based on the domain information, action description and the action name.\n* All variables in the preconditions and effects must be listed in the action's parameters. This restriction helps maintain the action's scope and prevents ambiguity in the planning process.\n* Do not use predicates that are not defined in the available predicates list to construct the preconditions and effects.\n* When the natural language description is ambiguous or certain predicate changes are implied, make reasonable assumptions based on common sense to fill up the implicit predicate in the PDDL action.\n# STYLE #\nFollow the writing style of technical experts. The output can be parsed by a machine, so it is important to follow the structured format.\n# TONE #\nBe precise and concise in constructing the PDDL action. The PDDL action should be clear and unambiguous.\n# AUDIENCE #\nYour audience is someone who is trying to learn how to construct PDDL actions from natural language descriptions.\n# RESPONSE #\nThe response should be in the following format:\n---\n**Explanation:** [Your explanation here]\n\n**Response:**\nParameters:\n1. ?x - [type]: [parameter description]\n2. ...\n\nPreconditions:\n```\n(and\n    ([predicate_1] ?x)\n)\n```\n\nEffects:\n```\n(and\n    (not ([predicate_2] ?x))\n    ([predicate_2] ?x)\n    ...\n)\n```\n---\n", "type": "prompt"}
{"role": "user", "content": "One or two examples from other domains for illustrating the input and output formats.\nHere are two examples from the doors domain for demonstrating the output format.\n        \nDomain information: This domain is structured to allow navigation and interaction within a space comprising rooms, locations, and doors that can be unlocked with keys. The actions and predicates support movement between locations and the unlocking of rooms.\n\nA list of available predicates\n1. (at ?loc - location) ;; agent is at loc location\n2. (unlocked ?room - room) ;; the room is unlocked\n3. (loc_in_room ?loc - location ?room - room) ;; the location is in the room\n4. (key_at ?key - key ?loc - location) ;; the key is at loc location\n5. (key_for_room ?key - key ?room - room) ;; the key is for the room\nExample 1\nAction Description: This one is akin to a classic scene in adventure games where you find a key and use it to unlock new areas. Picture yourself in the same house. You find a key lying on a table in the hallway (the key's location). This isn't just any key; it's special because it opens the door to the mysterious attic (the room the key unlocks). By picking up this key, you perform the action. The moment you have the key in your hand, the attic is no longer inaccessible. It's as if the key magically signals the attic door to unlock, waiting for you to discover its secrets.\n\nAction name: pick\n\n\nYour answer:\n---\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:**\nImagine you're playing a game where you're exploring different rooms and finding keys that can unlock new areas. The action called \"pick\" in this game lets you pick up a key that's in the same location as you, which then unlocks a room that the key is meant for. Let's break down how this works in simple terms.\n\nFirst, you need to be in the same location as the key. That's like being in a hallway where you see a key on a table. The action requires that you are right there with the key, which makes sense, right? You can't pick up a key from another room!\n\nNext, the key you find has to be the right one for a specific room. It\u2019s like having a label on the key saying \"this key is for the attic,\" ensuring that you don't try to use a kitchen key to open the attic.\n\nNow, when you pick up the key, the game checks two important things before letting you pick it up:\n1. **You are at the key's location**: You have to be right there where the key is.\n2. **The key is for the room you want to unlock**: This makes sure the key matches the room you\u2019re trying to access.\n\nOnce these conditions are met, and you pick up the key, two things happen:\n1. **The key is no longer at its original location**: Just like in real life, once you pick something up, it's not there anymore.\n2. **The room unlocks**: It\u2019s like the key told the door, \"Hey, open up!\" and now you can go into the attic and explore.\n\nThis action, \"pick,\" neatly connects your action of picking up the key with the effect of unlocking a new room, making the game or the story you're in feel real and connected. The conditions you meet before picking up the key ensure that everything makes sense and flows logically, just like in real life when you need the right key to open a specific door.\n                \n**Response:**\nParameters:\n1. ?sloc - location: [short description of the parameter]\n2. ?eloc - location: [short description of the parameter]\n3. ?eroom - room: [short description of the parameter]\n\nPreconditions:\n```\n(and\n    (at ?sloc)\n    (unlocked ?eroom)\n    (loc_in_room ?eloc ?eroom)\n)\n```\n\nEffects:\n```\n(and\n    (not (at ?sloc))\n    (at ?eloc)\n)\n```\n\n---\n", "type": "prompt"}
{"role": "user", "content": "Example 2\nAction Description: The action is like embarking on a small journey from one place to another within a confined space. Imagine you're in a large house with multiple rooms. You're currently in one location, let's say the living room (your starting location). You decide to move to another spot, maybe the kitchen (your ending location). However, there's a catch. The kitchen is behind a door that needs to be unlocked (ending room). So, this action can only happen if the kitchen door is already unlocked. Once you move, you're no longer in the living room but now standing in the kitchen, contemplating what to cook!\n\nAction name: move_to\n\n\nYour answer:\n---\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:**\nImagine you're playing a game where you need to explore different rooms by finding keys that unlock them, much like a treasure hunt. The action called \"pick\" in this game allows you to pick up a key from a specific location so you can unlock a room.\n\nHere\u2019s why the action schema matches your description:\n1. **Parameters**: You have parameters like `?loc` (where the key is found), `?key` (the key you find), and `?room` (the room that the key opens). These parameters help define what the action involves\u2014picking up a key at a location that unlocks a specific room.\n\n2. **Preconditions**:\n   - `(at ?loc)`: This means that you, the player, must be at the same location as the key. It ensures you are in the right place to pick it up, like being in the hallway where the key is on the table.\n   - `(key_at ?key ?loc)`: This ensures that the key you need is indeed at your location. It checks that the key is actually there before you can pick it up.\n   - `(key_for_room ?key ?room)`: This confirms that the key you are about to pick up is the correct one for unlocking the specific room you want to enter, like the attic.\n\n3. **Effects**:\n   - `(not (key_at ?key ?loc))`: Once you pick up the key, it's no longer lying there at the location. This effect updates the game state to show the key has been moved\u2014it's now with you.\n   - `(unlocked ?room)`: The action of picking up the key leads to the room being unlocked. Now, you can enter the room you wanted, such as the attic, which was previously locked.\n\nBy combining these elements, the action of \"pick\" logically lets you find a key and use it to access new areas in the game, opening up more adventures\u2014just like in the story of finding a key to unlock the attic.\n                \n**Response:**\nParameters:\n1. ?loc - location: [short description of the parameter]\n2. ?key - key: [short description of the parameter]\n3. ?room - room: [short description of the parameter]\n\nPreconditions:\n```\n(and\n    (at ?loc)\n    (key_at ?key ?loc)\n    (key_for_room ?key ?room)\n)\n```\n\nEffects:\n```\n(and\n    (not (key_at ?key ?loc))\n    (unlocked ?room)\n)\n```\n\n---\n", "type": "prompt"}
{"role": "user", "content": "Here are two examples from the logistics domain for demonstrating the output format.\n        \nDomain information: In this logistics domain, various objects need to be transported from one location to another. To achieve this, trucks are used for moving objects within a city, while airplanes are used for transporting objects between different cities. The domain includes different types of locations such as regular places and airports, with specific vehicles designed for each type of transport.\n\nA list of available predicates\n1. (at ?obj - object ?loc - location) ;; the object is at the location\n2. (in ?obj1 - object ?obj2 - object) ;; the obj1 is in obj2\n3. (in-city ?loc - location ?city - city) ;; the location is in the city\nExample 1\nAction Description: For long-distance transportation, objects are loaded onto airplanes. This requires that the object and the airplane are at the same location, typically an airport. Once the object is loaded into the airplane, it can be flown to another city. This action removes the object from its current location and places it inside the airplane.\n\nAction name: load-airplane\n\n\nYour answer:\n---\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:**\nImagine you have a toy airplane and several small toy objects that need to be moved from one part of your playroom to another. First, you need to make sure that both your airplane and the object are at the same starting point. This is like making sure both your toys are on the same part of the carpet before you start playing.\n\nIn the scenario described for the \"load-airplane\" action, it works similarly. First, there's a need to check (or ensure) that the object and the airplane are at the same location, which is usually an airport. This is like checking both toys are on the same part of the carpet. This check is what we call a \"precondition\" because it must be true before you can proceed with the action.\n\nIn the action schema for \"load-airplane,\" the preconditions state that both the object (`?obj`) and the airplane (`?airplane`) need to be at the same location (`?loc`). This makes sense because you can't load an object into an airplane if they're not in the same place, right?\n\nOnce the object is confirmed to be in the same location as the airplane, the next step in our play scenario would be to put the toy object into the toy airplane. Translating this into our action schema, once the preconditions are met, the object can be loaded into the airplane. This change is what we call the \"effect\" of the action. The schema says that the object is no longer just \"at\" the location (`(not (at ?obj ?loc))`), it's now \"in\" the airplane (`(in ?obj ?airplane)`). This means the object has successfully been placed inside the airplane, ready to be flown to another city.\n\nSo, simply put, the action \"load-airplane\" in the PDDL (a way of writing down the steps and rules for actions in computer language) matches perfectly with the need to get an object and an airplane together at the same place before moving the object into the airplane for its journey. This helps ensure that everything happens where and how it should, just like making sure all your toys are set up right for a fun playtime!\n                \n**Response:**\nParameters:\n1. ?obj - object: [short description of the parameter]\n2. ?airplane - airplane: [short description of the parameter]\n3. ?loc - location: [short description of the parameter]\n\nPreconditions:\n```\n(and\n    (at ?obj ?loc)\n    (at ?airplane ?loc)\n)\n```\n\nEffects:\n```\n(and\n    (not (at ?obj ?loc))\n    (in ?obj ?airplane)\n)\n```\n\n---\n", "type": "prompt"}
{"role": "user", "content": "Example 2\nAction Description: Airplanes are used to fly objects between different cities. This action involves moving the airplane from one airport to another. The airplane must start at the departure airport and will end up at the destination airport, ready for unloading or further transportation of the objects inside.\n\nAction name: fly-airplane\n\n\nYour answer:\n---\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:**\n\nIn our logistics domain, we have airplanes that can move objects between different cities by flying from one airport to another. The PDDL action named \"fly-airplane\" describes how this moving process works.\n\n1. **Parameters of the Action:**\n   - The action \"fly-airplane\" involves three main components: an airplane, a departure airport (loc-from), and a destination airport (loc-to). These are specified as parameters which simply means they are the essential parts needed for this action to happen.\n\n2. **Preconditions:**\n   - The precondition for this action is `(at ?airplane ?loc-from)`. This means that for the airplane to fly from one airport to another, it must already be located at the departure airport (`loc-from`). This makes sense because an airplane can't start flying from an airport if it isn't there to begin with.\n\n3. **Effects:**\n   - The effects of this action are described by `(and (not (at ?airplane ?loc-from)) (at ?airplane ?loc-to))`. This part explains what changes occur after the action is completed.\n     - `(not (at ?airplane ?loc-from))` indicates that once the airplane has taken off, it is no longer at the departure airport. It's a way to show that the airplane has left the starting point.\n     - `(at ?airplane ?loc-to)` confirms that after flying, the airplane arrives at the destination airport (`loc-to`). This marks the successful completion of the journey from one city to another.\n\nTo summarize, the action schema for \"fly-airplane\" perfectly matches our natural language description by detailing how an airplane moves from one airport to another. It clearly explains that the airplane starts at one airport and ends at another, with the changes accurately reflected in the conditions and effects within the schema.\n                \n**Response:**\nParameters:\n1. ?airplane - airplane: [short description of the parameter]\n2. ?loc-from - airport: [short description of the parameter]\n3. ?loc-to - airport: [short description of the parameter]\n\nPreconditions:\n```\n(at ?airplane ?loc-from)\n```\n\nEffects:\n```\n(and\n    (not (at ?airplane ?loc-from))\n    (at ?airplane ?loc-to)\n)\n```\n\n---\n", "type": "prompt"}
{"role": "user", "content": "Question: Here is the task.\nA natural language description of the domain\nDomain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape\n\nA list of available predicates\n1. (at-hero ?loc - cells) ;;  Hero's cell location\n2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location\n3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster\n4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap\n5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed\n6. (connected ?from ?to - cells) ;; connects cells\n7. (arm-free) ;; Hero's hand is free\n8. (holding ?s - swords) ;; Hero's holding a sword\n9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed\n\nAction Description: The hero can **move** to an adjacent room (connected by a corridor) that has not been destroyed (i.e., the hero has not already visited the room). When this action is executed, the original cell get destroyed.\n\nAction name: move\n\n\nYour answer:\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:**\n\nIn the dungeon domain, the hero needs to navigate through rooms connected by corridors to find an exit. The action \"move\" allows the hero to travel from one room to another. For this action to be executed, certain conditions must be met, and certain effects must occur once the action is taken.\n\nThe hero can only move to an adjacent room if it is connected and not destroyed. This means that the hero's current location and the target location must be directly connected by a corridor, and the target location must not have been visited or altered in a way that would prevent the hero from entering (e.g., destroyed).\n\nOnce the hero moves, the original room where the hero was located is considered destroyed, which could be a mechanism to prevent the hero from revisiting the same room or to simulate the hero's progression through the dungeon.\n\n**Parameters:**\n- ?from - cells: The starting cell where the hero is currently located.\n- ?to - cells: The target cell to which the hero will move.\n\n**Preconditions:**\n- `(at-hero ?from)`: The hero must be at the starting cell.\n- `(connected ?from ?to)`: The starting cell and the target cell must be connected.\n- `(not (is-destroyed ?to))`: The target cell must not be destroyed.\n\n**Effects:**\n- `(not (at-hero ?from))`: The hero is no longer at the starting cell after moving.\n- `(at-hero ?to)`: The hero is now at the target cell.\n- `(is-destroyed ?from)`: The starting cell is destroyed after the hero moves away.\n\n**Response:**\n\nParameters:\n1. ?from - cells: [The starting cell where the hero is located]\n2. ?to - cells: [The target cell to which the hero will move]\n\nPreconditions:\n```\n(and\n    (at-hero ?from)\n    (connected ?from ?to)\n    (not (is-destroyed ?to))\n)\n```\n\nEffects:\n```\n(and\n    (not (at-hero ?from))\n    (at-hero ?to)\n    (is-destroyed ?from)\n)\n```", "type": "response", "action": "move"}
