{"role": "system", "content": "# CONTEXT #\nYou are a tool called PDDL Modeling Assistant. You are a technical experts in constructing Planning Domain Definition Language (PDDL) models via the natural language context.\n# OBJECTIVE #\n* Construct parameters, preconditions and effects based on the domain information, action description and the action name.\n* All variables in the preconditions and effects must be listed in the action's parameters. This restriction helps maintain the action's scope and prevents ambiguity in the planning process.\n* Do not use predicates that are not defined in the available predicates list to construct the preconditions and effects.\n* When the natural language description is ambiguous or certain predicate changes are implied, make reasonable assumptions based on common sense to fill up the implicit predicate in the PDDL action.\n# STYLE #\nFollow the writing style of technical experts. The output can be parsed by a machine, so it is important to follow the structured format.\n# TONE #\nBe precise and concise in constructing the PDDL action. The PDDL action should be clear and unambiguous.\n# AUDIENCE #\nYour audience is someone who is trying to learn how to construct PDDL actions from natural language descriptions.\n# RESPONSE #\nThe response should be in the following format:\n---\n**Explanation:** [Your explanation here]\n\n**Response:**\nParameters:\n1. ?x - [type]: [parameter description]\n2. ...\n\nPreconditions:\n```\n(and\n    ([predicate_1] ?x)\n)\n```\n\nEffects:\n```\n(and\n    (not ([predicate_2] ?x))\n    ([predicate_2] ?x)\n    ...\n)\n```\n---\n", "type": "prompt"}
{"role": "user", "content": "One or two examples from other domains for illustrating the input and output formats.\nHere are two examples from the doors domain for demonstrating the output format.\n        \nDomain information: This domain is structured to allow navigation and interaction within a space comprising rooms, locations, and doors that can be unlocked with keys. The actions and predicates support movement between locations and the unlocking of rooms.\n\nA list of available predicates\n1. (at ?loc - location) ;; agent is at loc location\n2. (unlocked ?room - room) ;; the room is unlocked\n3. (loc_in_room ?loc - location ?room - room) ;; the location is in the room\n4. (key_at ?key - key ?loc - location) ;; the key is at loc location\n5. (key_for_room ?key - key ?room - room) ;; the key is for the room\nExample 1\nAction Description: This one is akin to a classic scene in adventure games where you find a key and use it to unlock new areas. Picture yourself in the same house. You find a key lying on a table in the hallway (the key's location). This isn't just any key; it's special because it opens the door to the mysterious attic (the room the key unlocks). By picking up this key, you perform the action. The moment you have the key in your hand, the attic is no longer inaccessible. It's as if the key magically signals the attic door to unlock, waiting for you to discover its secrets.\n\nAction name: pick\n\n\nYour answer:\n---\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:**\nImagine you're playing a game where you're exploring different rooms and finding keys that can unlock new areas. The action called \"pick\" in this game lets you pick up a key that's in the same location as you, which then unlocks a room that the key is meant for. Let's break down how this works in simple terms.\n\nFirst, you need to be in the same location as the key. That's like being in a hallway where you see a key on a table. The action requires that you are right there with the key, which makes sense, right? You can't pick up a key from another room!\n\nNext, the key you find has to be the right one for a specific room. It\u2019s like having a label on the key saying \"this key is for the attic,\" ensuring that you don't try to use a kitchen key to open the attic.\n\nNow, when you pick up the key, the game checks two important things before letting you pick it up:\n1. **You are at the key's location**: You have to be right there where the key is.\n2. **The key is for the room you want to unlock**: This makes sure the key matches the room you\u2019re trying to access.\n\nOnce these conditions are met, and you pick up the key, two things happen:\n1. **The key is no longer at its original location**: Just like in real life, once you pick something up, it's not there anymore.\n2. **The room unlocks**: It\u2019s like the key told the door, \"Hey, open up!\" and now you can go into the attic and explore.\n\nThis action, \"pick,\" neatly connects your action of picking up the key with the effect of unlocking a new room, making the game or the story you're in feel real and connected. The conditions you meet before picking up the key ensure that everything makes sense and flows logically, just like in real life when you need the right key to open a specific door.\n                \n**Response:**\nParameters:\n1. ?sloc - location: [short description of the parameter]\n2. ?eloc - location: [short description of the parameter]\n3. ?eroom - room: [short description of the parameter]\n\nPreconditions:\n```\n(and\n    (at ?sloc)\n    (unlocked ?eroom)\n    (loc_in_room ?eloc ?eroom)\n)\n```\n\nEffects:\n```\n(and\n    (not (at ?sloc))\n    (at ?eloc)\n)\n```\n\n---\n", "type": "prompt"}
{"role": "user", "content": "Example 2\nAction Description: The action is like embarking on a small journey from one place to another within a confined space. Imagine you're in a large house with multiple rooms. You're currently in one location, let's say the living room (your starting location). You decide to move to another spot, maybe the kitchen (your ending location). However, there's a catch. The kitchen is behind a door that needs to be unlocked (ending room). So, this action can only happen if the kitchen door is already unlocked. Once you move, you're no longer in the living room but now standing in the kitchen, contemplating what to cook!\n\nAction name: move_to\n\n\nYour answer:\n---\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:**\nImagine you're playing a game where you need to explore different rooms by finding keys that unlock them, much like a treasure hunt. The action called \"pick\" in this game allows you to pick up a key from a specific location so you can unlock a room.\n\nHere\u2019s why the action schema matches your description:\n1. **Parameters**: You have parameters like `?loc` (where the key is found), `?key` (the key you find), and `?room` (the room that the key opens). These parameters help define what the action involves\u2014picking up a key at a location that unlocks a specific room.\n\n2. **Preconditions**:\n   - `(at ?loc)`: This means that you, the player, must be at the same location as the key. It ensures you are in the right place to pick it up, like being in the hallway where the key is on the table.\n   - `(key_at ?key ?loc)`: This ensures that the key you need is indeed at your location. It checks that the key is actually there before you can pick it up.\n   - `(key_for_room ?key ?room)`: This confirms that the key you are about to pick up is the correct one for unlocking the specific room you want to enter, like the attic.\n\n3. **Effects**:\n   - `(not (key_at ?key ?loc))`: Once you pick up the key, it's no longer lying there at the location. This effect updates the game state to show the key has been moved\u2014it's now with you.\n   - `(unlocked ?room)`: The action of picking up the key leads to the room being unlocked. Now, you can enter the room you wanted, such as the attic, which was previously locked.\n\nBy combining these elements, the action of \"pick\" logically lets you find a key and use it to access new areas in the game, opening up more adventures\u2014just like in the story of finding a key to unlock the attic.\n                \n**Response:**\nParameters:\n1. ?loc - location: [short description of the parameter]\n2. ?key - key: [short description of the parameter]\n3. ?room - room: [short description of the parameter]\n\nPreconditions:\n```\n(and\n    (at ?loc)\n    (key_at ?key ?loc)\n    (key_for_room ?key ?room)\n)\n```\n\nEffects:\n```\n(and\n    (not (key_at ?key ?loc))\n    (unlocked ?room)\n)\n```\n\n---\n", "type": "prompt"}
{"role": "user", "content": "Here are two examples from the storage domain for demonstrating the output format.\n        \nDomain information: Moving and storing crates of goods by hoists from containers to depots with spatial maps. This domain deals with the movement and storage of crates of goods using hoists. It involves different locations like containers and depots, and requires managing the spatial arrangement of crates and hoists in various areas. The actions primarily focus on the lifting, moving, and placement of crates by hoists, considering the spatial and availability constraints of the areas involved.\n\nA list of available predicates\n1. (clear ?s - store_area) ;; the store area is clear\n2. (crate_in ?c - crate ?p - place) ;; the crate is in the place\n3. (store_area_in ?s - store_area ?p - place) ;; the store area is in the place\n4. (available ?h - hoist) ;; the hoist is available\n5. (lifting ?h - hoist ?c - crate) ;; the hoist is lifting the crate\n6. (at ?h - hoist ?a - area) ;; the hoist is at the area\n7. (on ?c - crate ?s - store_area) ;; the crate is on the store area\n8. (connected ?a1 ?a2 - area) ;; the area a1 is connected to the area a2\nExample 1\nAction Description: Involves a hoist lifting a crate from one store_area to another area. Preconditions include the areas being connected, the hoist being at the destination area and available, and the crate being on the source store_area. The effects are the crate being lifted and the source store_area becoming clear.\n\nAction name: lift\n\n\nYour answer:\n---\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:**\nLet's imagine you want to move a toy train (representing the hoist) from one side of your playroom (a store area) to another. Before moving it, you need to make sure of a few things:\n\n1. **The train is actually at the starting point:** Just like you need to know where your train is before you can move it, the action schema checks if the hoist is at the starting store area (`at ?h ?from`). This ensures that we are moving the right hoist from the correct location.\n\n2. **The destination is clear:** Imagine if the place you wanted to move your train to was already full of other toys. You wouldn\u2019t be able to put your train there, right? Similarly, the schema requires the destination store area to be clear (`clear ?to`) so that the hoist can move there without any issues.\n\n3. **The starting and destination points are connected:** It\u2019s like making sure there\u2019s a clear path or a track between where your train is and where you want it to go. If there\u2019s no track, you can't move the train. In the action schema, this is checked by the condition (`connected ?from ?to`).\n\nNow, when the train (hoist) moves:\n- **It is no longer at the starting point:** Just like when your train leaves one side of the room, it\u2019s not there anymore. This change is shown in the schema by removing the condition that the hoist is at the starting area (`not (at ?h ?from)`).\n  \n- **It is now at the destination:** When you move your train to the other side of the room, it\u2019s now there. This is represented in the schema by adding the condition that the hoist is now at the destination area (`at ?h ?to`).\n\n- **The destination is no longer clear:** Now that the train is at the new spot, that area isn\u2019t empty anymore. This change is reflected by removing the 'clear' condition for the destination area (`not (clear ?to)`).\n\n- **The starting point becomes clear:** Since the train left the starting area, that spot is now free. This is captured by adding a 'clear' condition for the starting area (`clear ?from`).\n\nThis whole process helps ensure that the hoist can safely and efficiently move from one area to another without confusion or conflicts.\n                \n**Response:**\nParameters:\n1. ?h - hoist: [short description of the parameter]\n2. ?c - crate: [short description of the parameter]\n3. ?a1 - store_area: [short description of the parameter]\n4. ?a2 - area: [short description of the parameter]\n5. ?p - place: [short description of the parameter]\n\nPreconditions:\n```\n(and\n    (connected ?a1 ?a2)\n    (at ?h ?a2)\n    (available ?h)\n    (on ?c ?a1)\n    (store_area_in ?a1 ?p)\n)\n```\n\nEffects:\n```\n(and\n    (not (on ?c ?a1))\n    (clear ?a1)\n    (not (available ?h))\n    (lifting ?h ?c)\n    (not (crate_in ?c ?p))\n)\n```\n\n---\n", "type": "prompt"}
{"role": "user", "content": "Example 2\nAction Description: This action is about a hoist dropping a crate into a store_area from an area. Preconditions are similar to 'Lift' but include the hoist lifting the crate and the destination store_area being clear. The effects involve the hoist becoming available and the crate being placed on the destination store_area.\n\nAction name: drop\n\n\nYour answer:\n---\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:**\nLet's imagine a scenario in a warehouse where a hoist is used to move crates from one area to another, like moving a box of toys from a shelf to a play area. The action we're talking about is called \"drop,\" where the hoist places a crate into a designated storage area.\n\n1. **Preconditions Explained:**\n   - **Connected Areas:** First, the hoist can only drop the crate if the area it\u2019s in (let's call it the play area) is connected to the area where the hoist is currently located (like the shelf area). This means there must be a clear path for the hoist to move the crate to its destination.\n   - **Hoist Location:** The hoist must be in the area adjacent to where the crate needs to go. If our hoist isn't next to the play area, it can't drop the crate there.\n   - **Hoist Lifting the Crate:** Before dropping, the hoist must already be lifting a crate. It's like making sure the hoist has picked up the box of toys before it can put it down.\n   - **Clear Storage Area:** The destination, where the crate will be placed, must be clear of other objects. This ensures there's space to safely place the new crate without stacking or causing a mess.\n   - **Store Area in Place:** The storage area where the crate is to be dropped needs to be part of the larger place being managed. This is like ensuring the play area is actually a part of the designated playroom.\n\n2. **Effects Explained:**\n   - **Hoist No Longer Lifting:** Once the crate is dropped, the hoist is no longer lifting it. This is like putting down the box of toys.\n   - **Hoist Becomes Available:** After dropping off the crate, the hoist is now free to take on other tasks, like picking up another box.\n   - **Storage Area Not Clear Anymore:** Since the crate has been placed there, the storage area is no longer empty.\n   - **Crate on Storage Area:** The crate is now officially in the storage area, like the box of toys now being in the play area.\n   - **Crate Location Updated:** We update the records to show that the crate is now in this new location within the place, which helps in managing space and knowing where everything is.\n\nThis action of dropping a crate involves several steps and conditions that ensure everything happens smoothly and safely, from ensuring there's a path to the hoist being ready and the space being available for the new crate. It's like making sure you have both hands free and a clear spot on the floor before you set down a heavy box.\n                \n**Response:**\nParameters:\n1. ?h - hoist: [short description of the parameter]\n2. ?c - crate: [short description of the parameter]\n3. ?a1 - store_area: [short description of the parameter]\n4. ?a2 - area: [short description of the parameter]\n5. ?p - place: [short description of the parameter]\n\nPreconditions:\n```\n(and\n    (connected ?a1 ?a2)\n    (at ?h ?a2)\n    (lifting ?h ?c)\n    (clear ?a1)\n    (store_area_in ?a1 ?p)\n)\n```\n\nEffects:\n```\n(and\n    (not (lifting ?h ?c))\n    (available ?h)\n    (not (clear ?a1))\n    (on ?c ?a1)\n    (crate_in ?c ?p)\n)\n```\n\n---\n", "type": "prompt"}
{"role": "user", "content": "Question: Here is the task.\nA natural language description of the domain\nDomain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape\n\nA list of available predicates\n1. (at-hero ?loc - cells) ;;  Hero's cell location\n2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location\n3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster\n4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap\n5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed\n6. (connected ?from ?to - cells) ;; connects cells\n7. (arm-free) ;; Hero's hand is free\n8. (holding ?s - swords) ;; Hero's holding a sword\n9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed\n\nAction Description: The hero can **move** to an adjacent room (connected by a corridor) that has not been destroyed (i.e., the hero has not already visited the room). When this action is executed, the hero gets into a location with a monster\n\nAction name: move-to-monster\n\n\nYour answer:\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:**\nIn the dungeon domain, the hero needs to navigate through rooms connected by corridors to find an exit. The action \"move-to-monster\" describes the hero moving into an adjacent room that contains a monster. For this action to occur, certain conditions must be met, and certain effects will result from the action.\n\nThe hero must be in a location that is connected to another location with a monster. The hero can only move to a location that is not destroyed, ensuring that the hero is exploring new areas of the dungeon. After the action, the hero's location will change to the new room with the monster.\n\n**Preconditions:**\n- The hero must be at a certain location (`at-hero ?from`).\n- The destination must have a monster (`has-monster ?to`).\n- The destination must be connected to the hero's current location (`connected ?from ?to`).\n- The destination must not be destroyed, ensuring it's a valid room to move into (`not (is-destroyed ?to)`).\n\n**Effects:**\n- The hero will no longer be at the previous location (`not (at-hero ?from)`).\n- The hero will now be at the new location with the monster (`at-hero ?to`).\n\nThis action does not specify what happens to the monster when the hero moves into the room, so we do not include any effects related to the monster in the PDDL model.\n\n**Response:**\nParameters:\n1. ?from - cells: [The cell location where the hero is currently located]\n2. ?to - cells: [The cell location with a monster that the hero will move to]\n\nPreconditions:\n```\n(and\n    (at-hero ?from)\n    (has-monster ?to)\n    (connected ?from ?to)\n    (not (is-destroyed ?to))\n)\n```\n\nEffects:\n```\n(and\n    (not (at-hero ?from))\n    (at-hero ?to)\n)\n```\n\n---", "type": "response", "action": "move-to-monster"}
{"role": "system", "content": "# CONTEXT #\nYou are a tool called PDDL Modeling Assistant. You are a technical experts in constructing Planning Domain Definition Language (PDDL) models via the natural language context.\n# OBJECTIVE #\n* Construct parameters, preconditions and effects based on the domain information, action description and the action name.\n* All variables in the preconditions and effects must be listed in the action's parameters. This restriction helps maintain the action's scope and prevents ambiguity in the planning process.\n* Do not use predicates that are not defined in the available predicates list to construct the preconditions and effects.\n* When the natural language description is ambiguous or certain predicate changes are implied, make reasonable assumptions based on common sense to fill up the implicit predicate in the PDDL action.\n# STYLE #\nFollow the writing style of technical experts. The output can be parsed by a machine, so it is important to follow the structured format.\n# TONE #\nBe precise and concise in constructing the PDDL action. The PDDL action should be clear and unambiguous.\n# AUDIENCE #\nYour audience is someone who is trying to learn how to construct PDDL actions from natural language descriptions.\n# RESPONSE #\nThe response should be in the following format:\n---\n**Explanation:** [Your explanation here]\n\n**Response:**\nParameters:\n1. ?x - [type]: [parameter description]\n2. ...\n\nPreconditions:\n```\n(and\n    ([predicate_1] ?x)\n)\n```\n\nEffects:\n```\n(and\n    (not ([predicate_2] ?x))\n    ([predicate_2] ?x)\n    ...\n)\n```\n---\n", "type": "prompt"}
{"role": "user", "content": "One or two examples from other domains for illustrating the input and output formats.\nHere are two examples from the doors domain for demonstrating the output format.\n        \nDomain information: This domain is structured to allow navigation and interaction within a space comprising rooms, locations, and doors that can be unlocked with keys. The actions and predicates support movement between locations and the unlocking of rooms.\n\nA list of available predicates\n1. (at ?loc - location) ;; agent is at loc location\n2. (unlocked ?room - room) ;; the room is unlocked\n3. (loc_in_room ?loc - location ?room - room) ;; the location is in the room\n4. (key_at ?key - key ?loc - location) ;; the key is at loc location\n5. (key_for_room ?key - key ?room - room) ;; the key is for the room\nExample 1\nAction Description: The action is like embarking on a small journey from one place to another within a confined space. Imagine you're in a large house with multiple rooms. You're currently in one location, let's say the living room (your starting location). You decide to move to another spot, maybe the kitchen (your ending location). However, there's a catch. The kitchen is behind a door that needs to be unlocked (ending room). So, this action can only happen if the kitchen door is already unlocked. Once you move, you're no longer in the living room but now standing in the kitchen, contemplating what to cook!\n\nAction name: move_to\n\n\nYour answer:\n---\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:**\nImagine you're playing a game where you need to explore different rooms by finding keys that unlock them, much like a treasure hunt. The action called \"pick\" in this game allows you to pick up a key from a specific location so you can unlock a room.\n\nHere\u2019s why the action schema matches your description:\n1. **Parameters**: You have parameters like `?loc` (where the key is found), `?key` (the key you find), and `?room` (the room that the key opens). These parameters help define what the action involves\u2014picking up a key at a location that unlocks a specific room.\n\n2. **Preconditions**:\n   - `(at ?loc)`: This means that you, the player, must be at the same location as the key. It ensures you are in the right place to pick it up, like being in the hallway where the key is on the table.\n   - `(key_at ?key ?loc)`: This ensures that the key you need is indeed at your location. It checks that the key is actually there before you can pick it up.\n   - `(key_for_room ?key ?room)`: This confirms that the key you are about to pick up is the correct one for unlocking the specific room you want to enter, like the attic.\n\n3. **Effects**:\n   - `(not (key_at ?key ?loc))`: Once you pick up the key, it's no longer lying there at the location. This effect updates the game state to show the key has been moved\u2014it's now with you.\n   - `(unlocked ?room)`: The action of picking up the key leads to the room being unlocked. Now, you can enter the room you wanted, such as the attic, which was previously locked.\n\nBy combining these elements, the action of \"pick\" logically lets you find a key and use it to access new areas in the game, opening up more adventures\u2014just like in the story of finding a key to unlock the attic.\n                \n**Response:**\nParameters:\n1. ?sloc - location: [short description of the parameter]\n2. ?eloc - location: [short description of the parameter]\n3. ?eroom - room: [short description of the parameter]\n\nPreconditions:\n```\n(and\n    (at ?sloc)\n    (unlocked ?eroom)\n    (loc_in_room ?eloc ?eroom)\n)\n```\n\nEffects:\n```\n(and\n    (not (at ?sloc))\n    (at ?eloc)\n)\n```\n\n---\n", "type": "prompt"}
{"role": "user", "content": "Example 2\nAction Description: This one is akin to a classic scene in adventure games where you find a key and use it to unlock new areas. Picture yourself in the same house. You find a key lying on a table in the hallway (the key's location). This isn't just any key; it's special because it opens the door to the mysterious attic (the room the key unlocks). By picking up this key, you perform the action. The moment you have the key in your hand, the attic is no longer inaccessible. It's as if the key magically signals the attic door to unlock, waiting for you to discover its secrets.\n\nAction name: pick\n\n\nYour answer:\n---\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:**\nImagine you're playing a game where you're exploring different rooms and finding keys that can unlock new areas. The action called \"pick\" in this game lets you pick up a key that's in the same location as you, which then unlocks a room that the key is meant for. Let's break down how this works in simple terms.\n\nFirst, you need to be in the same location as the key. That's like being in a hallway where you see a key on a table. The action requires that you are right there with the key, which makes sense, right? You can't pick up a key from another room!\n\nNext, the key you find has to be the right one for a specific room. It\u2019s like having a label on the key saying \"this key is for the attic,\" ensuring that you don't try to use a kitchen key to open the attic.\n\nNow, when you pick up the key, the game checks two important things before letting you pick it up:\n1. **You are at the key's location**: You have to be right there where the key is.\n2. **The key is for the room you want to unlock**: This makes sure the key matches the room you\u2019re trying to access.\n\nOnce these conditions are met, and you pick up the key, two things happen:\n1. **The key is no longer at its original location**: Just like in real life, once you pick something up, it's not there anymore.\n2. **The room unlocks**: It\u2019s like the key told the door, \"Hey, open up!\" and now you can go into the attic and explore.\n\nThis action, \"pick,\" neatly connects your action of picking up the key with the effect of unlocking a new room, making the game or the story you're in feel real and connected. The conditions you meet before picking up the key ensure that everything makes sense and flows logically, just like in real life when you need the right key to open a specific door.\n                \n**Response:**\nParameters:\n1. ?loc - location: [short description of the parameter]\n2. ?key - key: [short description of the parameter]\n3. ?room - room: [short description of the parameter]\n\nPreconditions:\n```\n(and\n    (at ?loc)\n    (key_at ?key ?loc)\n    (key_for_room ?key ?room)\n)\n```\n\nEffects:\n```\n(and\n    (not (key_at ?key ?loc))\n    (unlocked ?room)\n)\n```\n\n---\n", "type": "prompt"}
{"role": "user", "content": "Here are two examples from the storage domain for demonstrating the output format.\n        \nDomain information: Moving and storing crates of goods by hoists from containers to depots with spatial maps. This domain deals with the movement and storage of crates of goods using hoists. It involves different locations like containers and depots, and requires managing the spatial arrangement of crates and hoists in various areas. The actions primarily focus on the lifting, moving, and placement of crates by hoists, considering the spatial and availability constraints of the areas involved.\n\nA list of available predicates\n1. (clear ?s - store_area) ;; the store area is clear\n2. (crate_in ?c - crate ?p - place) ;; the crate is in the place\n3. (store_area_in ?s - store_area ?p - place) ;; the store area is in the place\n4. (available ?h - hoist) ;; the hoist is available\n5. (lifting ?h - hoist ?c - crate) ;; the hoist is lifting the crate\n6. (at ?h - hoist ?a - area) ;; the hoist is at the area\n7. (on ?c - crate ?s - store_area) ;; the crate is on the store area\n8. (connected ?a1 ?a2 - area) ;; the area a1 is connected to the area a2\nExample 1\nAction Description: Involves a hoist moving from a store_area to a transit_area. Preconditions are the hoist being at the source store_area and the areas being connected. The effect is the hoist moving to the transit_area and the source store_area becoming clear.\n\nAction name: go-out\n\n\nYour answer:\n---\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:** Let's imagine we have a little robotic hoist in a big warehouse. Its job is to move from one specific area where it usually stores things, called a store area, to another area meant for transitioning goods, which we call a transit area. Now, this action of moving from the store area to the transit area is called \"go-out.\"\n\nTo make sure this action goes smoothly, there are a few things that need to be in place beforehand, which we call preconditions. First, our little hoist needs to be at the store area to start with\u2014if it\u2019s somewhere else, it can\u2019t start moving from the store area, right? That's like saying you need to be at home to start walking to the park. Secondly, the store area and the transit area need to be connected. If there's no path or door between them, our hoist can't get to the transit area. It's a bit like needing a road or a path to walk on.\n\nNow, when the hoist successfully moves to the transit area, we have some changes that occur, which are the effects of the action. The hoist is no longer in the store area (it has moved, after all), and it's now in the transit area. This is straightforward: the hoist was here, and now it\u2019s there. Additionally, the store area becomes 'clear' or empty because the hoist has moved out. This is like saying that once you leave your room, the room is empty.\n\nSo, in summary, the \"go-out\" action moves our hoist from one area to another and makes sure the starting area is free for other activities. This helps keep things organized and running smoothly in our warehouse scenario.\n                \n**Response:**\nParameters:\n1. ?h - hoist: [short description of the parameter]\n2. ?c - crate: [short description of the parameter]\n3. ?a1 - store_area: [short description of the parameter]\n4. ?a2 - area: [short description of the parameter]\n5. ?p - place: [short description of the parameter]\n\nPreconditions:\n```\n(and\n    (connected ?a1 ?a2)\n    (at ?h ?a2)\n    (available ?h)\n    (on ?c ?a1)\n    (store_area_in ?a1 ?p)\n)\n```\n\nEffects:\n```\n(and\n    (not (on ?c ?a1))\n    (clear ?a1)\n    (not (available ?h))\n    (lifting ?h ?c)\n    (not (crate_in ?c ?p))\n)\n```\n\n---\n", "type": "prompt"}
{"role": "user", "content": "Example 2\nAction Description: Involves a hoist lifting a crate from one store_area to another area. Preconditions include the areas being connected, the hoist being at the destination area and available, and the crate being on the source store_area. The effects are the crate being lifted and the source store_area becoming clear.\n\nAction name: lift\n\n\nYour answer:\n---\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:**\nLet's imagine you want to move a toy train (representing the hoist) from one side of your playroom (a store area) to another. Before moving it, you need to make sure of a few things:\n\n1. **The train is actually at the starting point:** Just like you need to know where your train is before you can move it, the action schema checks if the hoist is at the starting store area (`at ?h ?from`). This ensures that we are moving the right hoist from the correct location.\n\n2. **The destination is clear:** Imagine if the place you wanted to move your train to was already full of other toys. You wouldn\u2019t be able to put your train there, right? Similarly, the schema requires the destination store area to be clear (`clear ?to`) so that the hoist can move there without any issues.\n\n3. **The starting and destination points are connected:** It\u2019s like making sure there\u2019s a clear path or a track between where your train is and where you want it to go. If there\u2019s no track, you can't move the train. In the action schema, this is checked by the condition (`connected ?from ?to`).\n\nNow, when the train (hoist) moves:\n- **It is no longer at the starting point:** Just like when your train leaves one side of the room, it\u2019s not there anymore. This change is shown in the schema by removing the condition that the hoist is at the starting area (`not (at ?h ?from)`).\n  \n- **It is now at the destination:** When you move your train to the other side of the room, it\u2019s now there. This is represented in the schema by adding the condition that the hoist is now at the destination area (`at ?h ?to`).\n\n- **The destination is no longer clear:** Now that the train is at the new spot, that area isn\u2019t empty anymore. This change is reflected by removing the 'clear' condition for the destination area (`not (clear ?to)`).\n\n- **The starting point becomes clear:** Since the train left the starting area, that spot is now free. This is captured by adding a 'clear' condition for the starting area (`clear ?from`).\n\nThis whole process helps ensure that the hoist can safely and efficiently move from one area to another without confusion or conflicts.\n                \n**Response:**\nParameters:\n1. ?h - hoist: [short description of the parameter]\n2. ?from - store_area: [short description of the parameter]\n3. ?to - transit_area: [short description of the parameter]\n\nPreconditions:\n```\n(and\n    (at ?h ?from)\n    (connected ?from ?to)\n)\n```\n\nEffects:\n```\n(and\n    (not (at ?h ?from))\n    (at ?h ?to)\n    (clear ?from)\n)\n```\n\n---\n", "type": "prompt"}
{"role": "user", "content": "Question: Here is the task.\nA natural language description of the domain\nDomain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape\n\nA list of available predicates\n1. (at-hero ?loc - cells) ;;  Hero's cell location\n2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location\n3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster\n4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap\n5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed\n6. (connected ?from ?to - cells) ;; connects cells\n7. (arm-free) ;; Hero's hand is free\n8. (holding ?s - swords) ;; Hero's holding a sword\n9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed\n\nAction Description: **Disarm a trap** \u2013 if there is a trap in the room the hero is in and the hero is empty-handed (does not hold a sword), then the hero can disarm it\n\nAction name: disarm-trap\n\n\nYour answer:\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:**\nIn the given dungeon domain, the hero needs to navigate through rooms connected by corridors, avoiding or dealing with monsters and traps, and possibly picking up a sword to aid in their escape. The action \"disarm-trap\" is a critical move where the hero disarms a trap that is in the same room as them. For this action to occur, certain conditions must be met: the hero must be in a room with a trap, and the hero must not be holding a sword (their hands must be free).\n\nOnce the hero successfully disarms the trap, the state of the dungeon changes. The trap in the room is no longer active, which is represented by the predicate `(trap-disarmed ?loc)`. This action doesn't require any objects to be picked up or used, just the presence of the hero in a room with a trap and the condition that the hero's hands are free.\n\n**Response:**\nParameters:\n1. ?loc - cells: [The cell location where the hero is and where the trap is located]\n\nPreconditions:\n```\n(and\n    (at-hero ?loc)\n    (has-trap ?loc)\n    (arm-free)\n)\n```\n\nEffects:\n```\n(and\n    (trap-disarmed ?loc)\n)\n```\n\n---", "type": "response", "action": "disarm-trap"}
{"role": "system", "content": "# CONTEXT #\nYou are a tool called PDDL Modeling Assistant. You are a technical experts in constructing Planning Domain Definition Language (PDDL) models via the natural language context.\n# OBJECTIVE #\n* Construct parameters, preconditions and effects based on the domain information, action description and the action name.\n* All variables in the preconditions and effects must be listed in the action's parameters. This restriction helps maintain the action's scope and prevents ambiguity in the planning process.\n* Do not use predicates that are not defined in the available predicates list to construct the preconditions and effects.\n* When the natural language description is ambiguous or certain predicate changes are implied, make reasonable assumptions based on common sense to fill up the implicit predicate in the PDDL action.\n# STYLE #\nFollow the writing style of technical experts. The output can be parsed by a machine, so it is important to follow the structured format.\n# TONE #\nBe precise and concise in constructing the PDDL action. The PDDL action should be clear and unambiguous.\n# AUDIENCE #\nYour audience is someone who is trying to learn how to construct PDDL actions from natural language descriptions.\n# RESPONSE #\nThe response should be in the following format:\n---\n**Explanation:** [Your explanation here]\n\n**Response:**\nParameters:\n1. ?x - [type]: [parameter description]\n2. ...\n\nPreconditions:\n```\n(and\n    ([predicate_1] ?x)\n)\n```\n\nEffects:\n```\n(and\n    (not ([predicate_2] ?x))\n    ([predicate_2] ?x)\n    ...\n)\n```\n---\n", "type": "prompt"}
{"role": "user", "content": "One or two examples from other domains for illustrating the input and output formats.\nHere are two examples from the doors domain for demonstrating the output format.\n        \nDomain information: This domain is structured to allow navigation and interaction within a space comprising rooms, locations, and doors that can be unlocked with keys. The actions and predicates support movement between locations and the unlocking of rooms.\n\nA list of available predicates\n1. (at ?loc - location) ;; agent is at loc location\n2. (unlocked ?room - room) ;; the room is unlocked\n3. (loc_in_room ?loc - location ?room - room) ;; the location is in the room\n4. (key_at ?key - key ?loc - location) ;; the key is at loc location\n5. (key_for_room ?key - key ?room - room) ;; the key is for the room\nExample 1\nAction Description: This one is akin to a classic scene in adventure games where you find a key and use it to unlock new areas. Picture yourself in the same house. You find a key lying on a table in the hallway (the key's location). This isn't just any key; it's special because it opens the door to the mysterious attic (the room the key unlocks). By picking up this key, you perform the action. The moment you have the key in your hand, the attic is no longer inaccessible. It's as if the key magically signals the attic door to unlock, waiting for you to discover its secrets.\n\nAction name: pick\n\n\nYour answer:\n---\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:**\nImagine you're playing a game where you're exploring different rooms and finding keys that can unlock new areas. The action called \"pick\" in this game lets you pick up a key that's in the same location as you, which then unlocks a room that the key is meant for. Let's break down how this works in simple terms.\n\nFirst, you need to be in the same location as the key. That's like being in a hallway where you see a key on a table. The action requires that you are right there with the key, which makes sense, right? You can't pick up a key from another room!\n\nNext, the key you find has to be the right one for a specific room. It\u2019s like having a label on the key saying \"this key is for the attic,\" ensuring that you don't try to use a kitchen key to open the attic.\n\nNow, when you pick up the key, the game checks two important things before letting you pick it up:\n1. **You are at the key's location**: You have to be right there where the key is.\n2. **The key is for the room you want to unlock**: This makes sure the key matches the room you\u2019re trying to access.\n\nOnce these conditions are met, and you pick up the key, two things happen:\n1. **The key is no longer at its original location**: Just like in real life, once you pick something up, it's not there anymore.\n2. **The room unlocks**: It\u2019s like the key told the door, \"Hey, open up!\" and now you can go into the attic and explore.\n\nThis action, \"pick,\" neatly connects your action of picking up the key with the effect of unlocking a new room, making the game or the story you're in feel real and connected. The conditions you meet before picking up the key ensure that everything makes sense and flows logically, just like in real life when you need the right key to open a specific door.\n                \n**Response:**\nParameters:\n1. ?sloc - location: [short description of the parameter]\n2. ?eloc - location: [short description of the parameter]\n3. ?eroom - room: [short description of the parameter]\n\nPreconditions:\n```\n(and\n    (at ?sloc)\n    (unlocked ?eroom)\n    (loc_in_room ?eloc ?eroom)\n)\n```\n\nEffects:\n```\n(and\n    (not (at ?sloc))\n    (at ?eloc)\n)\n```\n\n---\n", "type": "prompt"}
{"role": "user", "content": "Example 2\nAction Description: The action is like embarking on a small journey from one place to another within a confined space. Imagine you're in a large house with multiple rooms. You're currently in one location, let's say the living room (your starting location). You decide to move to another spot, maybe the kitchen (your ending location). However, there's a catch. The kitchen is behind a door that needs to be unlocked (ending room). So, this action can only happen if the kitchen door is already unlocked. Once you move, you're no longer in the living room but now standing in the kitchen, contemplating what to cook!\n\nAction name: move_to\n\n\nYour answer:\n---\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:**\nImagine you're playing a game where you need to explore different rooms by finding keys that unlock them, much like a treasure hunt. The action called \"pick\" in this game allows you to pick up a key from a specific location so you can unlock a room.\n\nHere\u2019s why the action schema matches your description:\n1. **Parameters**: You have parameters like `?loc` (where the key is found), `?key` (the key you find), and `?room` (the room that the key opens). These parameters help define what the action involves\u2014picking up a key at a location that unlocks a specific room.\n\n2. **Preconditions**:\n   - `(at ?loc)`: This means that you, the player, must be at the same location as the key. It ensures you are in the right place to pick it up, like being in the hallway where the key is on the table.\n   - `(key_at ?key ?loc)`: This ensures that the key you need is indeed at your location. It checks that the key is actually there before you can pick it up.\n   - `(key_for_room ?key ?room)`: This confirms that the key you are about to pick up is the correct one for unlocking the specific room you want to enter, like the attic.\n\n3. **Effects**:\n   - `(not (key_at ?key ?loc))`: Once you pick up the key, it's no longer lying there at the location. This effect updates the game state to show the key has been moved\u2014it's now with you.\n   - `(unlocked ?room)`: The action of picking up the key leads to the room being unlocked. Now, you can enter the room you wanted, such as the attic, which was previously locked.\n\nBy combining these elements, the action of \"pick\" logically lets you find a key and use it to access new areas in the game, opening up more adventures\u2014just like in the story of finding a key to unlock the attic.\n                \n**Response:**\nParameters:\n1. ?loc - location: [short description of the parameter]\n2. ?key - key: [short description of the parameter]\n3. ?room - room: [short description of the parameter]\n\nPreconditions:\n```\n(and\n    (at ?loc)\n    (key_at ?key ?loc)\n    (key_for_room ?key ?room)\n)\n```\n\nEffects:\n```\n(and\n    (not (key_at ?key ?loc))\n    (unlocked ?room)\n)\n```\n\n---\n", "type": "prompt"}
{"role": "user", "content": "Here are two examples from the storage domain for demonstrating the output format.\n        \nDomain information: Moving and storing crates of goods by hoists from containers to depots with spatial maps. This domain deals with the movement and storage of crates of goods using hoists. It involves different locations like containers and depots, and requires managing the spatial arrangement of crates and hoists in various areas. The actions primarily focus on the lifting, moving, and placement of crates by hoists, considering the spatial and availability constraints of the areas involved.\n\nA list of available predicates\n1. (clear ?s - store_area) ;; the store area is clear\n2. (crate_in ?c - crate ?p - place) ;; the crate is in the place\n3. (store_area_in ?s - store_area ?p - place) ;; the store area is in the place\n4. (available ?h - hoist) ;; the hoist is available\n5. (lifting ?h - hoist ?c - crate) ;; the hoist is lifting the crate\n6. (at ?h - hoist ?a - area) ;; the hoist is at the area\n7. (on ?c - crate ?s - store_area) ;; the crate is on the store area\n8. (connected ?a1 ?a2 - area) ;; the area a1 is connected to the area a2\nExample 1\nAction Description: Involves a hoist moving from a store_area to a transit_area. Preconditions are the hoist being at the source store_area and the areas being connected. The effect is the hoist moving to the transit_area and the source store_area becoming clear.\n\nAction name: go-out\n\n\nYour answer:\n---\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:** Let's imagine we have a little robotic hoist in a big warehouse. Its job is to move from one specific area where it usually stores things, called a store area, to another area meant for transitioning goods, which we call a transit area. Now, this action of moving from the store area to the transit area is called \"go-out.\"\n\nTo make sure this action goes smoothly, there are a few things that need to be in place beforehand, which we call preconditions. First, our little hoist needs to be at the store area to start with\u2014if it\u2019s somewhere else, it can\u2019t start moving from the store area, right? That's like saying you need to be at home to start walking to the park. Secondly, the store area and the transit area need to be connected. If there's no path or door between them, our hoist can't get to the transit area. It's a bit like needing a road or a path to walk on.\n\nNow, when the hoist successfully moves to the transit area, we have some changes that occur, which are the effects of the action. The hoist is no longer in the store area (it has moved, after all), and it's now in the transit area. This is straightforward: the hoist was here, and now it\u2019s there. Additionally, the store area becomes 'clear' or empty because the hoist has moved out. This is like saying that once you leave your room, the room is empty.\n\nSo, in summary, the \"go-out\" action moves our hoist from one area to another and makes sure the starting area is free for other activities. This helps keep things organized and running smoothly in our warehouse scenario.\n                \n**Response:**\nParameters:\n1. ?h - hoist: [short description of the parameter]\n2. ?from - store_area: [short description of the parameter]\n3. ?to - store_area: [short description of the parameter]\n\nPreconditions:\n```\n(and\n    (at ?h ?from)\n    (clear ?to)\n    (connected ?from ?to)\n)\n```\n\nEffects:\n```\n(and\n    (not (at ?h ?from))\n    (at ?h ?to)\n    (not (clear ?to))\n    (clear ?from)\n)\n```\n\n---\n", "type": "prompt"}
{"role": "user", "content": "Example 2\nAction Description: Moves a hoist from one store_area to another. Preconditions include the hoist being at the source store_area, the destination store_area being clear, and the areas being connected. The effect is the hoist moving to the destination and the change in clarity status of both store areas.\n\nAction name: move\n\n\nYour answer:\n---\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:**\n\nLet's imagine a scenario where you need to move a toy truck from one corner of a room to another. This toy truck represents the hoist, and the corners of the room are like different storage areas in our description.\n\n1. **Preconditions:**\n   - **Hoist is at the source area (at ?h ?from):** This condition makes sure that the hoist is actually at the starting point (like making sure your toy truck is really in the corner where you want to start moving it from). This is necessary because you can't move something from a place it isn't already at.\n   - **Destination area is clear (clear ?to):** This is like making sure that the corner you want to move your toy truck to doesn\u2019t have any obstacles or other toys in the way. The space needs to be clear so the hoist can move in without any issues.\n   - **Areas are connected (connected ?from ?to):** This checks if there is a direct path from the starting point to the destination, similar to making sure there's a clear path on the floor between the two corners of the room for the toy truck to travel without hitting a wall or furniture.\n\n2. **Effects:**\n   - **Hoist moves to the destination (at ?h ?to):** This is like saying your toy truck is now in the new corner of the room.\n   - **Hoist is no longer at the source (not (at ?h ?from)):** Just like your toy truck can't be in two places at once, when the hoist moves to the new area, it's no longer in the original area.\n   - **Destination area is no longer clear (not (clear ?to)):** Now that the hoist (or your toy truck) is in the new corner, that corner isn't empty anymore.\n   - **Source area becomes clear (clear ?from):** Since the hoist has moved away from the original area, that area is now free of obstacles or the hoist itself.\n\nSo, in simple terms, this action is like moving a toy from one clear, connected corner of the room to another. Before you move it, you need to check that it\u2019s starting in the right place, that there\u2019s no blockage where it\u2019s going, and that it can directly reach there. Once moved, the toy truck\u2019s old spot becomes empty, and its new spot is now occupied by it.\n                \n**Response:**\nParameters:\n1. ?h - hoist: [short description of the parameter]\n2. ?from - store_area: [short description of the parameter]\n3. ?to - transit_area: [short description of the parameter]\n\nPreconditions:\n```\n(and\n    (at ?h ?from)\n    (connected ?from ?to)\n)\n```\n\nEffects:\n```\n(and\n    (not (at ?h ?from))\n    (at ?h ?to)\n    (clear ?from)\n)\n```\n\n---\n", "type": "prompt"}
{"role": "user", "content": "Question: Here is the task.\nA natural language description of the domain\nDomain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape\n\nA list of available predicates\n1. (at-hero ?loc - cells) ;;  Hero's cell location\n2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location\n3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster\n4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap\n5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed\n6. (connected ?from ?to - cells) ;; connects cells\n7. (arm-free) ;; Hero's hand is free\n8. (holding ?s - swords) ;; Hero's holding a sword\n9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed\n\nAction Description: **Pickup** the sword if present in the room the hero is currently in and the hero is empty handed\n\nAction name: pick-sword\n\n\nYour answer:\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:**\n\nIn our dungeon domain, the hero needs to find a way out by navigating through rooms connected by corridors. To help the hero escape, they might need to pick up a sword to fight monsters or disarm traps. The action \"pick-sword\" is designed to allow the hero to pick up a sword if they are in the same room as the sword and their hands are free.\n\nThe action has a few key components:\n- The hero must be in the same location as the sword to pick it up, which is checked by the `(at-hero ?loc)` and `(at-sword ?s ?loc)` predicates.\n- The hero's hands must be free, indicated by the `(arm-free)` predicate, to pick up the sword. If the hero is already holding a sword, they can't pick up another one.\n\nOnce the hero picks up the sword, the state of the world changes:\n- The hero is no longer empty-handed but is now holding the sword, represented by the `(holding ?s)` predicate.\n- The sword is no longer in its original location, which could be represented by the absence of `(at-sword ?s ?loc)` predicate, but since we don't have a \"not\" effect in the provided predicates, we'll assume that the sword's location is implicitly no longer relevant once it's picked up.\n\n**Response:**\nParameters:\n1. ?s - swords: [The sword that the hero is going to pick up]\n2. ?loc - cells: [The location where the hero and the sword are]\n\nPreconditions:\n```\n(and\n    (at-hero ?loc)\n    (at-sword ?s ?loc)\n    (arm-free)\n)\n```\n\nEffects:\n```\n(and\n    (holding ?s)\n    ;(not (at-sword ?s ?loc)) ; This line is commented out because it's not explicitly provided in the available predicates.\n)\n```\n\nNote: The commented-out line represents the implicit change in the sword's location. If the available predicates included a way to represent the negation of a fact, this line would be included in the effects to show that the sword is no longer in its original location.", "type": "response", "action": "pick-sword"}
{"role": "system", "content": "# CONTEXT #\nYou are a tool called PDDL Modeling Assistant. You are a technical experts in constructing Planning Domain Definition Language (PDDL) models via the natural language context.\n# OBJECTIVE #\n* Construct parameters, preconditions and effects based on the domain information, action description and the action name.\n* All variables in the preconditions and effects must be listed in the action's parameters. This restriction helps maintain the action's scope and prevents ambiguity in the planning process.\n* Do not use predicates that are not defined in the available predicates list to construct the preconditions and effects.\n* When the natural language description is ambiguous or certain predicate changes are implied, make reasonable assumptions based on common sense to fill up the implicit predicate in the PDDL action.\n# STYLE #\nFollow the writing style of technical experts. The output can be parsed by a machine, so it is important to follow the structured format.\n# TONE #\nBe precise and concise in constructing the PDDL action. The PDDL action should be clear and unambiguous.\n# AUDIENCE #\nYour audience is someone who is trying to learn how to construct PDDL actions from natural language descriptions.\n# RESPONSE #\nThe response should be in the following format:\n---\n**Explanation:** [Your explanation here]\n\n**Response:**\nParameters:\n1. ?x - [type]: [parameter description]\n2. ...\n\nPreconditions:\n```\n(and\n    ([predicate_1] ?x)\n)\n```\n\nEffects:\n```\n(and\n    (not ([predicate_2] ?x))\n    ([predicate_2] ?x)\n    ...\n)\n```\n---\n", "type": "prompt"}
{"role": "user", "content": "One or two examples from other domains for illustrating the input and output formats.\nHere are two examples from the doors domain for demonstrating the output format.\n        \nDomain information: This domain is structured to allow navigation and interaction within a space comprising rooms, locations, and doors that can be unlocked with keys. The actions and predicates support movement between locations and the unlocking of rooms.\n\nA list of available predicates\n1. (at ?loc - location) ;; agent is at loc location\n2. (unlocked ?room - room) ;; the room is unlocked\n3. (loc_in_room ?loc - location ?room - room) ;; the location is in the room\n4. (key_at ?key - key ?loc - location) ;; the key is at loc location\n5. (key_for_room ?key - key ?room - room) ;; the key is for the room\nExample 1\nAction Description: This one is akin to a classic scene in adventure games where you find a key and use it to unlock new areas. Picture yourself in the same house. You find a key lying on a table in the hallway (the key's location). This isn't just any key; it's special because it opens the door to the mysterious attic (the room the key unlocks). By picking up this key, you perform the action. The moment you have the key in your hand, the attic is no longer inaccessible. It's as if the key magically signals the attic door to unlock, waiting for you to discover its secrets.\n\nAction name: pick\n\n\nYour answer:\n---\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:**\nImagine you're playing a game where you're exploring different rooms and finding keys that can unlock new areas. The action called \"pick\" in this game lets you pick up a key that's in the same location as you, which then unlocks a room that the key is meant for. Let's break down how this works in simple terms.\n\nFirst, you need to be in the same location as the key. That's like being in a hallway where you see a key on a table. The action requires that you are right there with the key, which makes sense, right? You can't pick up a key from another room!\n\nNext, the key you find has to be the right one for a specific room. It\u2019s like having a label on the key saying \"this key is for the attic,\" ensuring that you don't try to use a kitchen key to open the attic.\n\nNow, when you pick up the key, the game checks two important things before letting you pick it up:\n1. **You are at the key's location**: You have to be right there where the key is.\n2. **The key is for the room you want to unlock**: This makes sure the key matches the room you\u2019re trying to access.\n\nOnce these conditions are met, and you pick up the key, two things happen:\n1. **The key is no longer at its original location**: Just like in real life, once you pick something up, it's not there anymore.\n2. **The room unlocks**: It\u2019s like the key told the door, \"Hey, open up!\" and now you can go into the attic and explore.\n\nThis action, \"pick,\" neatly connects your action of picking up the key with the effect of unlocking a new room, making the game or the story you're in feel real and connected. The conditions you meet before picking up the key ensure that everything makes sense and flows logically, just like in real life when you need the right key to open a specific door.\n                \n**Response:**\nParameters:\n1. ?sloc - location: [short description of the parameter]\n2. ?eloc - location: [short description of the parameter]\n3. ?eroom - room: [short description of the parameter]\n\nPreconditions:\n```\n(and\n    (at ?sloc)\n    (unlocked ?eroom)\n    (loc_in_room ?eloc ?eroom)\n)\n```\n\nEffects:\n```\n(and\n    (not (at ?sloc))\n    (at ?eloc)\n)\n```\n\n---\n", "type": "prompt"}
{"role": "user", "content": "Example 2\nAction Description: The action is like embarking on a small journey from one place to another within a confined space. Imagine you're in a large house with multiple rooms. You're currently in one location, let's say the living room (your starting location). You decide to move to another spot, maybe the kitchen (your ending location). However, there's a catch. The kitchen is behind a door that needs to be unlocked (ending room). So, this action can only happen if the kitchen door is already unlocked. Once you move, you're no longer in the living room but now standing in the kitchen, contemplating what to cook!\n\nAction name: move_to\n\n\nYour answer:\n---\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:**\nImagine you're playing a game where you need to explore different rooms by finding keys that unlock them, much like a treasure hunt. The action called \"pick\" in this game allows you to pick up a key from a specific location so you can unlock a room.\n\nHere\u2019s why the action schema matches your description:\n1. **Parameters**: You have parameters like `?loc` (where the key is found), `?key` (the key you find), and `?room` (the room that the key opens). These parameters help define what the action involves\u2014picking up a key at a location that unlocks a specific room.\n\n2. **Preconditions**:\n   - `(at ?loc)`: This means that you, the player, must be at the same location as the key. It ensures you are in the right place to pick it up, like being in the hallway where the key is on the table.\n   - `(key_at ?key ?loc)`: This ensures that the key you need is indeed at your location. It checks that the key is actually there before you can pick it up.\n   - `(key_for_room ?key ?room)`: This confirms that the key you are about to pick up is the correct one for unlocking the specific room you want to enter, like the attic.\n\n3. **Effects**:\n   - `(not (key_at ?key ?loc))`: Once you pick up the key, it's no longer lying there at the location. This effect updates the game state to show the key has been moved\u2014it's now with you.\n   - `(unlocked ?room)`: The action of picking up the key leads to the room being unlocked. Now, you can enter the room you wanted, such as the attic, which was previously locked.\n\nBy combining these elements, the action of \"pick\" logically lets you find a key and use it to access new areas in the game, opening up more adventures\u2014just like in the story of finding a key to unlock the attic.\n                \n**Response:**\nParameters:\n1. ?loc - location: [short description of the parameter]\n2. ?key - key: [short description of the parameter]\n3. ?room - room: [short description of the parameter]\n\nPreconditions:\n```\n(and\n    (at ?loc)\n    (key_at ?key ?loc)\n    (key_for_room ?key ?room)\n)\n```\n\nEffects:\n```\n(and\n    (not (key_at ?key ?loc))\n    (unlocked ?room)\n)\n```\n\n---\n", "type": "prompt"}
{"role": "user", "content": "Here are two examples from the storage domain for demonstrating the output format.\n        \nDomain information: Moving and storing crates of goods by hoists from containers to depots with spatial maps. This domain deals with the movement and storage of crates of goods using hoists. It involves different locations like containers and depots, and requires managing the spatial arrangement of crates and hoists in various areas. The actions primarily focus on the lifting, moving, and placement of crates by hoists, considering the spatial and availability constraints of the areas involved.\n\nA list of available predicates\n1. (clear ?s - store_area) ;; the store area is clear\n2. (crate_in ?c - crate ?p - place) ;; the crate is in the place\n3. (store_area_in ?s - store_area ?p - place) ;; the store area is in the place\n4. (available ?h - hoist) ;; the hoist is available\n5. (lifting ?h - hoist ?c - crate) ;; the hoist is lifting the crate\n6. (at ?h - hoist ?a - area) ;; the hoist is at the area\n7. (on ?c - crate ?s - store_area) ;; the crate is on the store area\n8. (connected ?a1 ?a2 - area) ;; the area a1 is connected to the area a2\nExample 1\nAction Description: This is the reverse of Go-out, where a hoist moves from a transit_area to a store_area. Preconditions include the hoist being at the transit_area, the areas being connected, and the destination store_area being clear. The effect is similar to Go-out but in reverse.\n\nAction name: go-in\n\n\nYour answer:\n---\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:**\n\nImagine you have a small robot hoist that helps move boxes in a big warehouse. The warehouse has different areas, like a spot for loading boxes and another for storing them. The \"go-in\" action is like telling the robot to move from a loading area to a storage area.\n\nNow, why does the robot need certain conditions to be met before it can move? Here's a breakdown:\n\n1. **The robot must be at the loading area** (transit_area): This is pretty straightforward. If the robot isn't at the loading area, it can't start moving towards the storage area because it's simply not there to begin the task.\n\n2. **The loading area and storage area must be connected**: It's like making sure there's a clear path or a road between two places before you start driving. If there's no path, the robot can't move between these areas.\n\n3. **The storage area must be clear**: This ensures that there is space available for the robot to enter and place the boxes. It's similar to needing an empty parking spot to park your car.\n\nNow, what happens after the robot moves based on these conditions?\n\n- **The robot is no longer in the loading area**: Just like when you leave your house, you're not inside anymore. The robot has left the loading area, so we say it's no longer there.\n  \n- **The robot is now in the storage area**: Like arriving at a friend\u2019s house after leaving yours, the robot has moved and is now at the storage destination.\n\n- **The storage area is no longer clear**: Since the robot moves in with a box, the space it occupied is now taken. It's like the parking space being occupied once you park your car.\n\nIn summary, these conditions and results make sure the robot moves safely and efficiently from one place to another, without any surprises like arriving at a blocked or non-existent path, or finding no space to drop off the box. This careful planning helps keep everything in the warehouse running smoothly!\n                \n**Response:**\nParameters:\n1. ?h - hoist: [short description of the parameter]\n2. ?c - crate: [short description of the parameter]\n3. ?a1 - store_area: [short description of the parameter]\n4. ?a2 - area: [short description of the parameter]\n5. ?p - place: [short description of the parameter]\n\nPreconditions:\n```\n(and\n    (connected ?a1 ?a2)\n    (at ?h ?a2)\n    (available ?h)\n    (on ?c ?a1)\n    (store_area_in ?a1 ?p)\n)\n```\n\nEffects:\n```\n(and\n    (not (on ?c ?a1))\n    (clear ?a1)\n    (not (available ?h))\n    (lifting ?h ?c)\n    (not (crate_in ?c ?p))\n)\n```\n\n---\n", "type": "prompt"}
{"role": "user", "content": "Example 2\nAction Description: Involves a hoist lifting a crate from one store_area to another area. Preconditions include the areas being connected, the hoist being at the destination area and available, and the crate being on the source store_area. The effects are the crate being lifted and the source store_area becoming clear.\n\nAction name: lift\n\n\nYour answer:\n---\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:**\nLet's imagine you want to move a toy train (representing the hoist) from one side of your playroom (a store area) to another. Before moving it, you need to make sure of a few things:\n\n1. **The train is actually at the starting point:** Just like you need to know where your train is before you can move it, the action schema checks if the hoist is at the starting store area (`at ?h ?from`). This ensures that we are moving the right hoist from the correct location.\n\n2. **The destination is clear:** Imagine if the place you wanted to move your train to was already full of other toys. You wouldn\u2019t be able to put your train there, right? Similarly, the schema requires the destination store area to be clear (`clear ?to`) so that the hoist can move there without any issues.\n\n3. **The starting and destination points are connected:** It\u2019s like making sure there\u2019s a clear path or a track between where your train is and where you want it to go. If there\u2019s no track, you can't move the train. In the action schema, this is checked by the condition (`connected ?from ?to`).\n\nNow, when the train (hoist) moves:\n- **It is no longer at the starting point:** Just like when your train leaves one side of the room, it\u2019s not there anymore. This change is shown in the schema by removing the condition that the hoist is at the starting area (`not (at ?h ?from)`).\n  \n- **It is now at the destination:** When you move your train to the other side of the room, it\u2019s now there. This is represented in the schema by adding the condition that the hoist is now at the destination area (`at ?h ?to`).\n\n- **The destination is no longer clear:** Now that the train is at the new spot, that area isn\u2019t empty anymore. This change is reflected by removing the 'clear' condition for the destination area (`not (clear ?to)`).\n\n- **The starting point becomes clear:** Since the train left the starting area, that spot is now free. This is captured by adding a 'clear' condition for the starting area (`clear ?from`).\n\nThis whole process helps ensure that the hoist can safely and efficiently move from one area to another without confusion or conflicts.\n                \n**Response:**\nParameters:\n1. ?h - hoist: [short description of the parameter]\n2. ?from - transit_area: [short description of the parameter]\n3. ?to - store_area: [short description of the parameter]\n\nPreconditions:\n```\n(and\n    (at ?h ?from)\n    (connected ?from ?to)\n    (clear ?to)\n)\n```\n\nEffects:\n```\n(and\n    (not (at ?h ?from))\n    (at ?h ?to)\n    (not (clear ?to))\n)\n```\n\n---\n", "type": "prompt"}
{"role": "user", "content": "Question: Here is the task.\nA natural language description of the domain\nDomain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape\n\nA list of available predicates\n1. (at-hero ?loc - cells) ;;  Hero's cell location\n2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location\n3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster\n4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap\n5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed\n6. (connected ?from ?to - cells) ;; connects cells\n7. (arm-free) ;; Hero's hand is free\n8. (holding ?s - swords) ;; Hero's holding a sword\n9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed\n\nAction Description: The hero can **move** to an adjacent room (connected by a corridor) that has not been destroyed (i.e., the hero has not already visited the room). When this action is executed, the hero gets into a location with a trap\n\nAction name: move-to-trap\n\n\nYour answer:\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:**\nIn the dungeon domain, the hero needs to navigate through rooms connected by corridors to find an exit. The action \"move-to-trap\" describes the hero moving to an adjacent room that contains a trap. For this action to occur, certain conditions must be met, and certain effects will result from the action.\n\nThe hero must be at a certain location (`?from`) that is connected to another location with a trap (`?to`). The hero can only move to the new location if it has not been destroyed, ensuring that the hero is not moving into a non-existent room. Additionally, the hero's arm must be free, which implies that the hero is not currently holding a sword that might be needed to deal with the trap.\n\nOnce the hero moves to the new location, the hero's location changes, and the hero is now in a room with a trap. This action does not disarm the trap or interact with it in any way; it simply represents the hero's movement into a trapped room.\n\n**Response:**\nParameters:\n1. ?from - cells: [The starting cell location of the hero]\n2. ?to - cells: [The destination cell location with a trap]\n\nPreconditions:\n```\n(and\n    (at-hero ?from)\n    (connected ?from ?to)\n    (not (is-destroyed ?to))\n    (arm-free)\n    (has-trap ?to)\n)\n```\n\nEffects:\n```\n(and\n    (not (at-hero ?from))\n    (at-hero ?to)\n)\n```\n\nNote: The effects do not include the disarmament of the trap, as the action only involves moving to the room with the trap, not interacting with it. If the hero's movement should automatically disarm the trap, then additional effects would be needed to reflect that change in the game state.", "type": "response", "action": "move-to-trap"}
{"role": "system", "content": "# CONTEXT #\nYou are a tool called PDDL Modeling Assistant. You are a technical experts in constructing Planning Domain Definition Language (PDDL) models via the natural language context.\n# OBJECTIVE #\n* Construct parameters, preconditions and effects based on the domain information, action description and the action name.\n* All variables in the preconditions and effects must be listed in the action's parameters. This restriction helps maintain the action's scope and prevents ambiguity in the planning process.\n* Do not use predicates that are not defined in the available predicates list to construct the preconditions and effects.\n* When the natural language description is ambiguous or certain predicate changes are implied, make reasonable assumptions based on common sense to fill up the implicit predicate in the PDDL action.\n# STYLE #\nFollow the writing style of technical experts. The output can be parsed by a machine, so it is important to follow the structured format.\n# TONE #\nBe precise and concise in constructing the PDDL action. The PDDL action should be clear and unambiguous.\n# AUDIENCE #\nYour audience is someone who is trying to learn how to construct PDDL actions from natural language descriptions.\n# RESPONSE #\nThe response should be in the following format:\n---\n**Explanation:** [Your explanation here]\n\n**Response:**\nParameters:\n1. ?x - [type]: [parameter description]\n2. ...\n\nPreconditions:\n```\n(and\n    ([predicate_1] ?x)\n)\n```\n\nEffects:\n```\n(and\n    (not ([predicate_2] ?x))\n    ([predicate_2] ?x)\n    ...\n)\n```\n---\n", "type": "prompt"}
{"role": "user", "content": "One or two examples from other domains for illustrating the input and output formats.\nHere are two examples from the doors domain for demonstrating the output format.\n        \nDomain information: This domain is structured to allow navigation and interaction within a space comprising rooms, locations, and doors that can be unlocked with keys. The actions and predicates support movement between locations and the unlocking of rooms.\n\nA list of available predicates\n1. (at ?loc - location) ;; agent is at loc location\n2. (unlocked ?room - room) ;; the room is unlocked\n3. (loc_in_room ?loc - location ?room - room) ;; the location is in the room\n4. (key_at ?key - key ?loc - location) ;; the key is at loc location\n5. (key_for_room ?key - key ?room - room) ;; the key is for the room\nExample 1\nAction Description: The action is like embarking on a small journey from one place to another within a confined space. Imagine you're in a large house with multiple rooms. You're currently in one location, let's say the living room (your starting location). You decide to move to another spot, maybe the kitchen (your ending location). However, there's a catch. The kitchen is behind a door that needs to be unlocked (ending room). So, this action can only happen if the kitchen door is already unlocked. Once you move, you're no longer in the living room but now standing in the kitchen, contemplating what to cook!\n\nAction name: move_to\n\n\nYour answer:\n---\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:**\nImagine you're playing a game where you need to explore different rooms by finding keys that unlock them, much like a treasure hunt. The action called \"pick\" in this game allows you to pick up a key from a specific location so you can unlock a room.\n\nHere\u2019s why the action schema matches your description:\n1. **Parameters**: You have parameters like `?loc` (where the key is found), `?key` (the key you find), and `?room` (the room that the key opens). These parameters help define what the action involves\u2014picking up a key at a location that unlocks a specific room.\n\n2. **Preconditions**:\n   - `(at ?loc)`: This means that you, the player, must be at the same location as the key. It ensures you are in the right place to pick it up, like being in the hallway where the key is on the table.\n   - `(key_at ?key ?loc)`: This ensures that the key you need is indeed at your location. It checks that the key is actually there before you can pick it up.\n   - `(key_for_room ?key ?room)`: This confirms that the key you are about to pick up is the correct one for unlocking the specific room you want to enter, like the attic.\n\n3. **Effects**:\n   - `(not (key_at ?key ?loc))`: Once you pick up the key, it's no longer lying there at the location. This effect updates the game state to show the key has been moved\u2014it's now with you.\n   - `(unlocked ?room)`: The action of picking up the key leads to the room being unlocked. Now, you can enter the room you wanted, such as the attic, which was previously locked.\n\nBy combining these elements, the action of \"pick\" logically lets you find a key and use it to access new areas in the game, opening up more adventures\u2014just like in the story of finding a key to unlock the attic.\n                \n**Response:**\nParameters:\n1. ?sloc - location: [short description of the parameter]\n2. ?eloc - location: [short description of the parameter]\n3. ?eroom - room: [short description of the parameter]\n\nPreconditions:\n```\n(and\n    (at ?sloc)\n    (unlocked ?eroom)\n    (loc_in_room ?eloc ?eroom)\n)\n```\n\nEffects:\n```\n(and\n    (not (at ?sloc))\n    (at ?eloc)\n)\n```\n\n---\n", "type": "prompt"}
{"role": "user", "content": "Example 2\nAction Description: This one is akin to a classic scene in adventure games where you find a key and use it to unlock new areas. Picture yourself in the same house. You find a key lying on a table in the hallway (the key's location). This isn't just any key; it's special because it opens the door to the mysterious attic (the room the key unlocks). By picking up this key, you perform the action. The moment you have the key in your hand, the attic is no longer inaccessible. It's as if the key magically signals the attic door to unlock, waiting for you to discover its secrets.\n\nAction name: pick\n\n\nYour answer:\n---\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:**\nImagine you're playing a game where you're exploring different rooms and finding keys that can unlock new areas. The action called \"pick\" in this game lets you pick up a key that's in the same location as you, which then unlocks a room that the key is meant for. Let's break down how this works in simple terms.\n\nFirst, you need to be in the same location as the key. That's like being in a hallway where you see a key on a table. The action requires that you are right there with the key, which makes sense, right? You can't pick up a key from another room!\n\nNext, the key you find has to be the right one for a specific room. It\u2019s like having a label on the key saying \"this key is for the attic,\" ensuring that you don't try to use a kitchen key to open the attic.\n\nNow, when you pick up the key, the game checks two important things before letting you pick it up:\n1. **You are at the key's location**: You have to be right there where the key is.\n2. **The key is for the room you want to unlock**: This makes sure the key matches the room you\u2019re trying to access.\n\nOnce these conditions are met, and you pick up the key, two things happen:\n1. **The key is no longer at its original location**: Just like in real life, once you pick something up, it's not there anymore.\n2. **The room unlocks**: It\u2019s like the key told the door, \"Hey, open up!\" and now you can go into the attic and explore.\n\nThis action, \"pick,\" neatly connects your action of picking up the key with the effect of unlocking a new room, making the game or the story you're in feel real and connected. The conditions you meet before picking up the key ensure that everything makes sense and flows logically, just like in real life when you need the right key to open a specific door.\n                \n**Response:**\nParameters:\n1. ?loc - location: [short description of the parameter]\n2. ?key - key: [short description of the parameter]\n3. ?room - room: [short description of the parameter]\n\nPreconditions:\n```\n(and\n    (at ?loc)\n    (key_at ?key ?loc)\n    (key_for_room ?key ?room)\n)\n```\n\nEffects:\n```\n(and\n    (not (key_at ?key ?loc))\n    (unlocked ?room)\n)\n```\n\n---\n", "type": "prompt"}
{"role": "user", "content": "Here are two examples from the storage domain for demonstrating the output format.\n        \nDomain information: Moving and storing crates of goods by hoists from containers to depots with spatial maps. This domain deals with the movement and storage of crates of goods using hoists. It involves different locations like containers and depots, and requires managing the spatial arrangement of crates and hoists in various areas. The actions primarily focus on the lifting, moving, and placement of crates by hoists, considering the spatial and availability constraints of the areas involved.\n\nA list of available predicates\n1. (clear ?s - store_area) ;; the store area is clear\n2. (crate_in ?c - crate ?p - place) ;; the crate is in the place\n3. (store_area_in ?s - store_area ?p - place) ;; the store area is in the place\n4. (available ?h - hoist) ;; the hoist is available\n5. (lifting ?h - hoist ?c - crate) ;; the hoist is lifting the crate\n6. (at ?h - hoist ?a - area) ;; the hoist is at the area\n7. (on ?c - crate ?s - store_area) ;; the crate is on the store area\n8. (connected ?a1 ?a2 - area) ;; the area a1 is connected to the area a2\nExample 1\nAction Description: Involves a hoist lifting a crate from one store_area to another area. Preconditions include the areas being connected, the hoist being at the destination area and available, and the crate being on the source store_area. The effects are the crate being lifted and the source store_area becoming clear.\n\nAction name: lift\n\n\nYour answer:\n---\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:**\nLet's imagine you want to move a toy train (representing the hoist) from one side of your playroom (a store area) to another. Before moving it, you need to make sure of a few things:\n\n1. **The train is actually at the starting point:** Just like you need to know where your train is before you can move it, the action schema checks if the hoist is at the starting store area (`at ?h ?from`). This ensures that we are moving the right hoist from the correct location.\n\n2. **The destination is clear:** Imagine if the place you wanted to move your train to was already full of other toys. You wouldn\u2019t be able to put your train there, right? Similarly, the schema requires the destination store area to be clear (`clear ?to`) so that the hoist can move there without any issues.\n\n3. **The starting and destination points are connected:** It\u2019s like making sure there\u2019s a clear path or a track between where your train is and where you want it to go. If there\u2019s no track, you can't move the train. In the action schema, this is checked by the condition (`connected ?from ?to`).\n\nNow, when the train (hoist) moves:\n- **It is no longer at the starting point:** Just like when your train leaves one side of the room, it\u2019s not there anymore. This change is shown in the schema by removing the condition that the hoist is at the starting area (`not (at ?h ?from)`).\n  \n- **It is now at the destination:** When you move your train to the other side of the room, it\u2019s now there. This is represented in the schema by adding the condition that the hoist is now at the destination area (`at ?h ?to`).\n\n- **The destination is no longer clear:** Now that the train is at the new spot, that area isn\u2019t empty anymore. This change is reflected by removing the 'clear' condition for the destination area (`not (clear ?to)`).\n\n- **The starting point becomes clear:** Since the train left the starting area, that spot is now free. This is captured by adding a 'clear' condition for the starting area (`clear ?from`).\n\nThis whole process helps ensure that the hoist can safely and efficiently move from one area to another without confusion or conflicts.\n                \n**Response:**\nParameters:\n1. ?h - hoist: [short description of the parameter]\n2. ?c - crate: [short description of the parameter]\n3. ?a1 - store_area: [short description of the parameter]\n4. ?a2 - area: [short description of the parameter]\n5. ?p - place: [short description of the parameter]\n\nPreconditions:\n```\n(and\n    (connected ?a1 ?a2)\n    (at ?h ?a2)\n    (available ?h)\n    (on ?c ?a1)\n    (store_area_in ?a1 ?p)\n)\n```\n\nEffects:\n```\n(and\n    (not (on ?c ?a1))\n    (clear ?a1)\n    (not (available ?h))\n    (lifting ?h ?c)\n    (not (crate_in ?c ?p))\n)\n```\n\n---\n", "type": "prompt"}
{"role": "user", "content": "Example 2\nAction Description: This action is about a hoist dropping a crate into a store_area from an area. Preconditions are similar to 'Lift' but include the hoist lifting the crate and the destination store_area being clear. The effects involve the hoist becoming available and the crate being placed on the destination store_area.\n\nAction name: drop\n\n\nYour answer:\n---\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:**\nLet's imagine a scenario in a warehouse where a hoist is used to move crates from one area to another, like moving a box of toys from a shelf to a play area. The action we're talking about is called \"drop,\" where the hoist places a crate into a designated storage area.\n\n1. **Preconditions Explained:**\n   - **Connected Areas:** First, the hoist can only drop the crate if the area it\u2019s in (let's call it the play area) is connected to the area where the hoist is currently located (like the shelf area). This means there must be a clear path for the hoist to move the crate to its destination.\n   - **Hoist Location:** The hoist must be in the area adjacent to where the crate needs to go. If our hoist isn't next to the play area, it can't drop the crate there.\n   - **Hoist Lifting the Crate:** Before dropping, the hoist must already be lifting a crate. It's like making sure the hoist has picked up the box of toys before it can put it down.\n   - **Clear Storage Area:** The destination, where the crate will be placed, must be clear of other objects. This ensures there's space to safely place the new crate without stacking or causing a mess.\n   - **Store Area in Place:** The storage area where the crate is to be dropped needs to be part of the larger place being managed. This is like ensuring the play area is actually a part of the designated playroom.\n\n2. **Effects Explained:**\n   - **Hoist No Longer Lifting:** Once the crate is dropped, the hoist is no longer lifting it. This is like putting down the box of toys.\n   - **Hoist Becomes Available:** After dropping off the crate, the hoist is now free to take on other tasks, like picking up another box.\n   - **Storage Area Not Clear Anymore:** Since the crate has been placed there, the storage area is no longer empty.\n   - **Crate on Storage Area:** The crate is now officially in the storage area, like the box of toys now being in the play area.\n   - **Crate Location Updated:** We update the records to show that the crate is now in this new location within the place, which helps in managing space and knowing where everything is.\n\nThis action of dropping a crate involves several steps and conditions that ensure everything happens smoothly and safely, from ensuring there's a path to the hoist being ready and the space being available for the new crate. It's like making sure you have both hands free and a clear spot on the floor before you set down a heavy box.\n                \n**Response:**\nParameters:\n1. ?h - hoist: [short description of the parameter]\n2. ?c - crate: [short description of the parameter]\n3. ?a1 - store_area: [short description of the parameter]\n4. ?a2 - area: [short description of the parameter]\n5. ?p - place: [short description of the parameter]\n\nPreconditions:\n```\n(and\n    (connected ?a1 ?a2)\n    (at ?h ?a2)\n    (lifting ?h ?c)\n    (clear ?a1)\n    (store_area_in ?a1 ?p)\n)\n```\n\nEffects:\n```\n(and\n    (not (lifting ?h ?c))\n    (available ?h)\n    (not (clear ?a1))\n    (on ?c ?a1)\n    (crate_in ?c ?p)\n)\n```\n\n---\n", "type": "prompt"}
{"role": "user", "content": "Question: Here is the task.\nA natural language description of the domain\nDomain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape\n\nA list of available predicates\n1. (at-hero ?loc - cells) ;;  Hero's cell location\n2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location\n3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster\n4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap\n5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed\n6. (connected ?from ?to - cells) ;; connects cells\n7. (arm-free) ;; Hero's hand is free\n8. (holding ?s - swords) ;; Hero's holding a sword\n9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed\n\nAction Description: **Destroy** the sword that the hero currently holds. However, this can have unpleasant effects if done in a room with a trap or a monster: it triggers the trap or invites the monster to eat the hero.\n\nAction name: destroy-sword\n\n\nYour answer:\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:**\nIn the dungeon domain, the hero needs to be strategic about when and where to use the sword, as it can have dire consequences if used improperly. The action \"destroy-sword\" represents the hero intentionally destroying the sword they are currently holding. This action is not without risk, as it can trigger a trap or attract the attention of a monster if performed in a room that contains either.\n\nTo ensure the action is modeled correctly, we need to consider the following:\n\n- The hero must be holding a sword to destroy it.\n- The action's effects will vary depending on the hero's location. If the hero is in a room with a trap or a monster, the action could lead to the hero's demise.\n\nThe preconditions for the action are straightforward: the hero must be holding a sword. The effects are more complex, as they depend on the hero's current location and what is in that location.\n\n**Response:**\nParameters:\n1. ?s - swords: [The sword that the hero is going to destroy]\n2. ?loc - cells: [The current location of the hero where the action takes place]\n\nPreconditions:\n```\n(and\n    (holding ?s)\n    (at-hero ?loc)\n)\n```\n\nEffects:\n```\n(and\n    (not (holding ?s))\n    (is-destroyed ?s)\n    (when (has-trap ?loc)\n          (is-destroyed ?loc))\n    (when (has-monster ?loc)\n          (is-destroyed ?loc))\n)\n```\n\nNote: The `when` conditional is used to represent the effects that occur only if certain conditions are met (i.e., if the hero is in a room with a trap or a monster). In standard PDDL, this would be represented differently, as PDDL does not support conditional effects directly. However, for the sake of this explanation, we use a hypothetical `when` conditional to illustrate the intent. In actual PDDL, you would need to use additional actions or durative actions to model this behavior.", "type": "response", "action": "destroy-sword"}
{"role": "system", "content": "# CONTEXT #\nYou are a tool called PDDL Modeling Assistant. You are a technical experts in constructing Planning Domain Definition Language (PDDL) models via the natural language context.\n# OBJECTIVE #\n* Construct parameters, preconditions and effects based on the domain information, action description and the action name.\n* All variables in the preconditions and effects must be listed in the action's parameters. This restriction helps maintain the action's scope and prevents ambiguity in the planning process.\n* Do not use predicates that are not defined in the available predicates list to construct the preconditions and effects.\n* When the natural language description is ambiguous or certain predicate changes are implied, make reasonable assumptions based on common sense to fill up the implicit predicate in the PDDL action.\n# STYLE #\nFollow the writing style of technical experts. The output can be parsed by a machine, so it is important to follow the structured format.\n# TONE #\nBe precise and concise in constructing the PDDL action. The PDDL action should be clear and unambiguous.\n# AUDIENCE #\nYour audience is someone who is trying to learn how to construct PDDL actions from natural language descriptions.\n# RESPONSE #\nThe response should be in the following format:\n---\n**Explanation:** [Your explanation here]\n\n**Response:**\nParameters:\n1. ?x - [type]: [parameter description]\n2. ...\n\nPreconditions:\n```\n(and\n    ([predicate_1] ?x)\n)\n```\n\nEffects:\n```\n(and\n    (not ([predicate_2] ?x))\n    ([predicate_2] ?x)\n    ...\n)\n```\n---\n", "type": "prompt"}
{"role": "user", "content": "One or two examples from other domains for illustrating the input and output formats.\nHere are two examples from the doors domain for demonstrating the output format.\n        \nDomain information: This domain is structured to allow navigation and interaction within a space comprising rooms, locations, and doors that can be unlocked with keys. The actions and predicates support movement between locations and the unlocking of rooms.\n\nA list of available predicates\n1. (at ?loc - location) ;; agent is at loc location\n2. (unlocked ?room - room) ;; the room is unlocked\n3. (loc_in_room ?loc - location ?room - room) ;; the location is in the room\n4. (key_at ?key - key ?loc - location) ;; the key is at loc location\n5. (key_for_room ?key - key ?room - room) ;; the key is for the room\nExample 1\nAction Description: The action is like embarking on a small journey from one place to another within a confined space. Imagine you're in a large house with multiple rooms. You're currently in one location, let's say the living room (your starting location). You decide to move to another spot, maybe the kitchen (your ending location). However, there's a catch. The kitchen is behind a door that needs to be unlocked (ending room). So, this action can only happen if the kitchen door is already unlocked. Once you move, you're no longer in the living room but now standing in the kitchen, contemplating what to cook!\n\nAction name: move_to\n\n\nYour answer:\n---\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:**\nImagine you're playing a game where you need to explore different rooms by finding keys that unlock them, much like a treasure hunt. The action called \"pick\" in this game allows you to pick up a key from a specific location so you can unlock a room.\n\nHere\u2019s why the action schema matches your description:\n1. **Parameters**: You have parameters like `?loc` (where the key is found), `?key` (the key you find), and `?room` (the room that the key opens). These parameters help define what the action involves\u2014picking up a key at a location that unlocks a specific room.\n\n2. **Preconditions**:\n   - `(at ?loc)`: This means that you, the player, must be at the same location as the key. It ensures you are in the right place to pick it up, like being in the hallway where the key is on the table.\n   - `(key_at ?key ?loc)`: This ensures that the key you need is indeed at your location. It checks that the key is actually there before you can pick it up.\n   - `(key_for_room ?key ?room)`: This confirms that the key you are about to pick up is the correct one for unlocking the specific room you want to enter, like the attic.\n\n3. **Effects**:\n   - `(not (key_at ?key ?loc))`: Once you pick up the key, it's no longer lying there at the location. This effect updates the game state to show the key has been moved\u2014it's now with you.\n   - `(unlocked ?room)`: The action of picking up the key leads to the room being unlocked. Now, you can enter the room you wanted, such as the attic, which was previously locked.\n\nBy combining these elements, the action of \"pick\" logically lets you find a key and use it to access new areas in the game, opening up more adventures\u2014just like in the story of finding a key to unlock the attic.\n                \n**Response:**\nParameters:\n1. ?sloc - location: [short description of the parameter]\n2. ?eloc - location: [short description of the parameter]\n3. ?eroom - room: [short description of the parameter]\n\nPreconditions:\n```\n(and\n    (at ?sloc)\n    (unlocked ?eroom)\n    (loc_in_room ?eloc ?eroom)\n)\n```\n\nEffects:\n```\n(and\n    (not (at ?sloc))\n    (at ?eloc)\n)\n```\n\n---\n", "type": "prompt"}
{"role": "user", "content": "Example 2\nAction Description: This one is akin to a classic scene in adventure games where you find a key and use it to unlock new areas. Picture yourself in the same house. You find a key lying on a table in the hallway (the key's location). This isn't just any key; it's special because it opens the door to the mysterious attic (the room the key unlocks). By picking up this key, you perform the action. The moment you have the key in your hand, the attic is no longer inaccessible. It's as if the key magically signals the attic door to unlock, waiting for you to discover its secrets.\n\nAction name: pick\n\n\nYour answer:\n---\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:**\nImagine you're playing a game where you're exploring different rooms and finding keys that can unlock new areas. The action called \"pick\" in this game lets you pick up a key that's in the same location as you, which then unlocks a room that the key is meant for. Let's break down how this works in simple terms.\n\nFirst, you need to be in the same location as the key. That's like being in a hallway where you see a key on a table. The action requires that you are right there with the key, which makes sense, right? You can't pick up a key from another room!\n\nNext, the key you find has to be the right one for a specific room. It\u2019s like having a label on the key saying \"this key is for the attic,\" ensuring that you don't try to use a kitchen key to open the attic.\n\nNow, when you pick up the key, the game checks two important things before letting you pick it up:\n1. **You are at the key's location**: You have to be right there where the key is.\n2. **The key is for the room you want to unlock**: This makes sure the key matches the room you\u2019re trying to access.\n\nOnce these conditions are met, and you pick up the key, two things happen:\n1. **The key is no longer at its original location**: Just like in real life, once you pick something up, it's not there anymore.\n2. **The room unlocks**: It\u2019s like the key told the door, \"Hey, open up!\" and now you can go into the attic and explore.\n\nThis action, \"pick,\" neatly connects your action of picking up the key with the effect of unlocking a new room, making the game or the story you're in feel real and connected. The conditions you meet before picking up the key ensure that everything makes sense and flows logically, just like in real life when you need the right key to open a specific door.\n                \n**Response:**\nParameters:\n1. ?loc - location: [short description of the parameter]\n2. ?key - key: [short description of the parameter]\n3. ?room - room: [short description of the parameter]\n\nPreconditions:\n```\n(and\n    (at ?loc)\n    (key_at ?key ?loc)\n    (key_for_room ?key ?room)\n)\n```\n\nEffects:\n```\n(and\n    (not (key_at ?key ?loc))\n    (unlocked ?room)\n)\n```\n\n---\n", "type": "prompt"}
{"role": "user", "content": "Here are two examples from the storage domain for demonstrating the output format.\n        \nDomain information: Moving and storing crates of goods by hoists from containers to depots with spatial maps. This domain deals with the movement and storage of crates of goods using hoists. It involves different locations like containers and depots, and requires managing the spatial arrangement of crates and hoists in various areas. The actions primarily focus on the lifting, moving, and placement of crates by hoists, considering the spatial and availability constraints of the areas involved.\n\nA list of available predicates\n1. (clear ?s - store_area) ;; the store area is clear\n2. (crate_in ?c - crate ?p - place) ;; the crate is in the place\n3. (store_area_in ?s - store_area ?p - place) ;; the store area is in the place\n4. (available ?h - hoist) ;; the hoist is available\n5. (lifting ?h - hoist ?c - crate) ;; the hoist is lifting the crate\n6. (at ?h - hoist ?a - area) ;; the hoist is at the area\n7. (on ?c - crate ?s - store_area) ;; the crate is on the store area\n8. (connected ?a1 ?a2 - area) ;; the area a1 is connected to the area a2\nExample 1\nAction Description: Involves a hoist lifting a crate from one store_area to another area. Preconditions include the areas being connected, the hoist being at the destination area and available, and the crate being on the source store_area. The effects are the crate being lifted and the source store_area becoming clear.\n\nAction name: lift\n\n\nYour answer:\n---\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:**\nLet's imagine you want to move a toy train (representing the hoist) from one side of your playroom (a store area) to another. Before moving it, you need to make sure of a few things:\n\n1. **The train is actually at the starting point:** Just like you need to know where your train is before you can move it, the action schema checks if the hoist is at the starting store area (`at ?h ?from`). This ensures that we are moving the right hoist from the correct location.\n\n2. **The destination is clear:** Imagine if the place you wanted to move your train to was already full of other toys. You wouldn\u2019t be able to put your train there, right? Similarly, the schema requires the destination store area to be clear (`clear ?to`) so that the hoist can move there without any issues.\n\n3. **The starting and destination points are connected:** It\u2019s like making sure there\u2019s a clear path or a track between where your train is and where you want it to go. If there\u2019s no track, you can't move the train. In the action schema, this is checked by the condition (`connected ?from ?to`).\n\nNow, when the train (hoist) moves:\n- **It is no longer at the starting point:** Just like when your train leaves one side of the room, it\u2019s not there anymore. This change is shown in the schema by removing the condition that the hoist is at the starting area (`not (at ?h ?from)`).\n  \n- **It is now at the destination:** When you move your train to the other side of the room, it\u2019s now there. This is represented in the schema by adding the condition that the hoist is now at the destination area (`at ?h ?to`).\n\n- **The destination is no longer clear:** Now that the train is at the new spot, that area isn\u2019t empty anymore. This change is reflected by removing the 'clear' condition for the destination area (`not (clear ?to)`).\n\n- **The starting point becomes clear:** Since the train left the starting area, that spot is now free. This is captured by adding a 'clear' condition for the starting area (`clear ?from`).\n\nThis whole process helps ensure that the hoist can safely and efficiently move from one area to another without confusion or conflicts.\n                \n**Response:**\nParameters:\n1. ?h - hoist: [short description of the parameter]\n2. ?c - crate: [short description of the parameter]\n3. ?a1 - store_area: [short description of the parameter]\n4. ?a2 - area: [short description of the parameter]\n5. ?p - place: [short description of the parameter]\n\nPreconditions:\n```\n(and\n    (connected ?a1 ?a2)\n    (at ?h ?a2)\n    (available ?h)\n    (on ?c ?a1)\n    (store_area_in ?a1 ?p)\n)\n```\n\nEffects:\n```\n(and\n    (not (on ?c ?a1))\n    (clear ?a1)\n    (not (available ?h))\n    (lifting ?h ?c)\n    (not (crate_in ?c ?p))\n)\n```\n\n---\n", "type": "prompt"}
{"role": "user", "content": "Example 2\nAction Description: Involves a hoist moving from a store_area to a transit_area. Preconditions are the hoist being at the source store_area and the areas being connected. The effect is the hoist moving to the transit_area and the source store_area becoming clear.\n\nAction name: go-out\n\n\nYour answer:\n---\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:** Let's imagine we have a little robotic hoist in a big warehouse. Its job is to move from one specific area where it usually stores things, called a store area, to another area meant for transitioning goods, which we call a transit area. Now, this action of moving from the store area to the transit area is called \"go-out.\"\n\nTo make sure this action goes smoothly, there are a few things that need to be in place beforehand, which we call preconditions. First, our little hoist needs to be at the store area to start with\u2014if it\u2019s somewhere else, it can\u2019t start moving from the store area, right? That's like saying you need to be at home to start walking to the park. Secondly, the store area and the transit area need to be connected. If there's no path or door between them, our hoist can't get to the transit area. It's a bit like needing a road or a path to walk on.\n\nNow, when the hoist successfully moves to the transit area, we have some changes that occur, which are the effects of the action. The hoist is no longer in the store area (it has moved, after all), and it's now in the transit area. This is straightforward: the hoist was here, and now it\u2019s there. Additionally, the store area becomes 'clear' or empty because the hoist has moved out. This is like saying that once you leave your room, the room is empty.\n\nSo, in summary, the \"go-out\" action moves our hoist from one area to another and makes sure the starting area is free for other activities. This helps keep things organized and running smoothly in our warehouse scenario.\n                \n**Response:**\nParameters:\n1. ?h - hoist: [short description of the parameter]\n2. ?from - store_area: [short description of the parameter]\n3. ?to - transit_area: [short description of the parameter]\n\nPreconditions:\n```\n(and\n    (at ?h ?from)\n    (connected ?from ?to)\n)\n```\n\nEffects:\n```\n(and\n    (not (at ?h ?from))\n    (at ?h ?to)\n    (clear ?from)\n)\n```\n\n---\n", "type": "prompt"}
{"role": "user", "content": "Question: Here is the task.\nA natural language description of the domain\nDomain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape\n\nA list of available predicates\n1. (at-hero ?loc - cells) ;;  Hero's cell location\n2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location\n3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster\n4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap\n5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed\n6. (connected ?from ?to - cells) ;; connects cells\n7. (arm-free) ;; Hero's hand is free\n8. (holding ?s - swords) ;; Hero's holding a sword\n9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed\n\nAction Description: The hero can **move** to an adjacent room (connected by a corridor) that has not been destroyed (i.e., the hero has not already visited the room). When this action is executed, the original cell get destroyed.\n\nAction name: move\n\n\nYour answer:\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:** In the dungeon domain, the hero needs to navigate through rooms connected by corridors to find an exit. The action \"move\" allows the hero to travel from one room to another. For this action to be successful, certain conditions must be met, and certain outcomes will result once the action is taken.\n\nThe preconditions for the \"move\" action ensure that the hero can legally move to the next room. The hero must be at a certain location (`at-hero ?from`), and the target room must be connected to the current location (`connected ?from ?to`). Additionally, the room the hero is moving to must not be destroyed (`not (is-destroyed ?to)`), which means the hero hasn't been there before, and it's a valid room to move into.\n\nOnce the hero moves, the effects of the action update the state of the dungeon. The hero is no longer in the original room (`not (at-hero ?from)`), and the original room is now considered destroyed (`is-destroyed ?from`). The hero's new location is the target room (`at-hero ?to`).\n\nThis action is crucial for the hero to explore the dungeon and find the exit. Each time the hero moves, the dungeon's state changes, reflecting the hero's progress and the rooms that have been visited.\n\n**Response:**\nParameters:\n1. ?from - cells: [The cell location where the hero is currently located]\n2. ?to - cells: [The cell location where the hero will move to]\n\nPreconditions:\n```\n(and\n    (at-hero ?from)\n    (connected ?from ?to)\n    (not (is-destroyed ?to))\n)\n```\n\nEffects:\n```\n(and\n    (not (at-hero ?from))\n    (at-hero ?to)\n    (is-destroyed ?from)\n)\n```\n\n---", "type": "response", "action": "move"}
