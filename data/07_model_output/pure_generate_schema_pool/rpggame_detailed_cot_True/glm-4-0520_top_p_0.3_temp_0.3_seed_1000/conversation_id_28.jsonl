{"role": "system", "content": "# CONTEXT #\nYou are a tool called PDDL Modeling Assistant. You are a technical experts in constructing Planning Domain Definition Language (PDDL) models via the natural language context.\n# OBJECTIVE #\n* Construct parameters, preconditions and effects based on the domain information, action description and the action name.\n* All variables in the preconditions and effects must be listed in the action's parameters. This restriction helps maintain the action's scope and prevents ambiguity in the planning process.\n* Do not use predicates that are not defined in the available predicates list to construct the preconditions and effects.\n* When the natural language description is ambiguous or certain predicate changes are implied, make reasonable assumptions based on common sense to fill up the implicit predicate in the PDDL action.\n# STYLE #\nFollow the writing style of technical experts. The output can be parsed by a machine, so it is important to follow the structured format.\n# TONE #\nBe precise and concise in constructing the PDDL action. The PDDL action should be clear and unambiguous.\n# AUDIENCE #\nYour audience is someone who is trying to learn how to construct PDDL actions from natural language descriptions.\n# RESPONSE #\nThe response should be in the following format:\n---\n**Explanation:** [Your explanation here]\n\n**Response:**\nParameters:\n1. ?x - [type]: [parameter description]\n2. ...\n\nPreconditions:\n```\n(and\n    ([predicate_1] ?x)\n)\n```\n\nEffects:\n```\n(and\n    (not ([predicate_2] ?x))\n    ([predicate_2] ?x)\n    ...\n)\n```\n---\n", "type": "prompt"}
{"role": "user", "content": "One or two examples from other domains for illustrating the input and output formats.\nHere are two examples from the storage domain for demonstrating the output format.\n        \nDomain information: Moving and storing crates of goods by hoists from containers to depots with spatial maps. This domain deals with the movement and storage of crates of goods using hoists. It involves different locations like containers and depots, and requires managing the spatial arrangement of crates and hoists in various areas. The actions primarily focus on the lifting, moving, and placement of crates by hoists, considering the spatial and availability constraints of the areas involved.\n\nA list of available predicates\n1. (clear ?s - store_area) ;; the store area is clear\n2. (crate_in ?c - crate ?p - place) ;; the crate is in the place\n3. (store_area_in ?s - store_area ?p - place) ;; the store area is in the place\n4. (available ?h - hoist) ;; the hoist is available\n5. (lifting ?h - hoist ?c - crate) ;; the hoist is lifting the crate\n6. (at ?h - hoist ?a - area) ;; the hoist is at the area\n7. (on ?c - crate ?s - store_area) ;; the crate is on the store area\n8. (connected ?a1 ?a2 - area) ;; the area a1 is connected to the area a2\nExample 1\nAction Description: Involves a hoist lifting a crate from one store_area to another area. Preconditions include the areas being connected, the hoist being at the destination area and available, and the crate being on the source store_area. The effects are the crate being lifted and the source store_area becoming clear.\n\nAction name: lift\n\n\nYour answer:\n---\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:**\nLet's imagine you want to move a toy train (representing the hoist) from one side of your playroom (a store area) to another. Before moving it, you need to make sure of a few things:\n\n1. **The train is actually at the starting point:** Just like you need to know where your train is before you can move it, the action schema checks if the hoist is at the starting store area (`at ?h ?from`). This ensures that we are moving the right hoist from the correct location.\n\n2. **The destination is clear:** Imagine if the place you wanted to move your train to was already full of other toys. You wouldn\u2019t be able to put your train there, right? Similarly, the schema requires the destination store area to be clear (`clear ?to`) so that the hoist can move there without any issues.\n\n3. **The starting and destination points are connected:** It\u2019s like making sure there\u2019s a clear path or a track between where your train is and where you want it to go. If there\u2019s no track, you can't move the train. In the action schema, this is checked by the condition (`connected ?from ?to`).\n\nNow, when the train (hoist) moves:\n- **It is no longer at the starting point:** Just like when your train leaves one side of the room, it\u2019s not there anymore. This change is shown in the schema by removing the condition that the hoist is at the starting area (`not (at ?h ?from)`).\n  \n- **It is now at the destination:** When you move your train to the other side of the room, it\u2019s now there. This is represented in the schema by adding the condition that the hoist is now at the destination area (`at ?h ?to`).\n\n- **The destination is no longer clear:** Now that the train is at the new spot, that area isn\u2019t empty anymore. This change is reflected by removing the 'clear' condition for the destination area (`not (clear ?to)`).\n\n- **The starting point becomes clear:** Since the train left the starting area, that spot is now free. This is captured by adding a 'clear' condition for the starting area (`clear ?from`).\n\nThis whole process helps ensure that the hoist can safely and efficiently move from one area to another without confusion or conflicts.\n                \n**Response:**\nParameters:\n1. ?h - hoist: [short description of the parameter]\n2. ?c - crate: [short description of the parameter]\n3. ?a1 - store_area: [short description of the parameter]\n4. ?a2 - area: [short description of the parameter]\n5. ?p - place: [short description of the parameter]\n\nPreconditions:\n```\n(and\n    (connected ?a1 ?a2)\n    (at ?h ?a2)\n    (available ?h)\n    (on ?c ?a1)\n    (store_area_in ?a1 ?p)\n)\n```\n\nEffects:\n```\n(and\n    (not (on ?c ?a1))\n    (clear ?a1)\n    (not (available ?h))\n    (lifting ?h ?c)\n    (not (crate_in ?c ?p))\n)\n```\n\n---\n", "type": "prompt"}
{"role": "user", "content": "Example 2\nAction Description: This action is about a hoist dropping a crate into a store_area from an area. Preconditions are similar to 'Lift' but include the hoist lifting the crate and the destination store_area being clear. The effects involve the hoist becoming available and the crate being placed on the destination store_area.\n\nAction name: drop\n\n\nYour answer:\n---\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:**\nLet's imagine a scenario in a warehouse where a hoist is used to move crates from one area to another, like moving a box of toys from a shelf to a play area. The action we're talking about is called \"drop,\" where the hoist places a crate into a designated storage area.\n\n1. **Preconditions Explained:**\n   - **Connected Areas:** First, the hoist can only drop the crate if the area it\u2019s in (let's call it the play area) is connected to the area where the hoist is currently located (like the shelf area). This means there must be a clear path for the hoist to move the crate to its destination.\n   - **Hoist Location:** The hoist must be in the area adjacent to where the crate needs to go. If our hoist isn't next to the play area, it can't drop the crate there.\n   - **Hoist Lifting the Crate:** Before dropping, the hoist must already be lifting a crate. It's like making sure the hoist has picked up the box of toys before it can put it down.\n   - **Clear Storage Area:** The destination, where the crate will be placed, must be clear of other objects. This ensures there's space to safely place the new crate without stacking or causing a mess.\n   - **Store Area in Place:** The storage area where the crate is to be dropped needs to be part of the larger place being managed. This is like ensuring the play area is actually a part of the designated playroom.\n\n2. **Effects Explained:**\n   - **Hoist No Longer Lifting:** Once the crate is dropped, the hoist is no longer lifting it. This is like putting down the box of toys.\n   - **Hoist Becomes Available:** After dropping off the crate, the hoist is now free to take on other tasks, like picking up another box.\n   - **Storage Area Not Clear Anymore:** Since the crate has been placed there, the storage area is no longer empty.\n   - **Crate on Storage Area:** The crate is now officially in the storage area, like the box of toys now being in the play area.\n   - **Crate Location Updated:** We update the records to show that the crate is now in this new location within the place, which helps in managing space and knowing where everything is.\n\nThis action of dropping a crate involves several steps and conditions that ensure everything happens smoothly and safely, from ensuring there's a path to the hoist being ready and the space being available for the new crate. It's like making sure you have both hands free and a clear spot on the floor before you set down a heavy box.\n                \n**Response:**\nParameters:\n1. ?h - hoist: [short description of the parameter]\n2. ?c - crate: [short description of the parameter]\n3. ?a1 - store_area: [short description of the parameter]\n4. ?a2 - area: [short description of the parameter]\n5. ?p - place: [short description of the parameter]\n\nPreconditions:\n```\n(and\n    (connected ?a1 ?a2)\n    (at ?h ?a2)\n    (lifting ?h ?c)\n    (clear ?a1)\n    (store_area_in ?a1 ?p)\n)\n```\n\nEffects:\n```\n(and\n    (not (lifting ?h ?c))\n    (available ?h)\n    (not (clear ?a1))\n    (on ?c ?a1)\n    (crate_in ?c ?p)\n)\n```\n\n---\n", "type": "prompt"}
{"role": "user", "content": "Here are two examples from the barman domain for demonstrating the output format.\n        \nDomain information: In this domain there is a robot barman that manipulates drink dispensers, glasses and a shaker. The goal is to find a plan of the robots actions that serves a desired set of drinks. In this domain deletes of actions encode relevant knowledge given that robot hands can only grasp one object at a time and given that glasses need to be empty and clean to be filled.\n\nA list of available predicates\n1. (ontable ?c - container) ;; the container is on the table\n2. (holding ?h - hand ?c - container) ;; the hand is holding the container\n3. (handempty ?h - hand) ;; the hand is empty\n4. (empty ?c - container) ;; the container is empty\n5. (contains ?c - container ?b - beverage) ;; the container contains the beverage\n6. (clean ?c - container) ;; the container is clean\n7. (used ?c - container ?b - beverage) ;; the container is used for the beverage\n8. (dispenses ?d - dispenser ?i - ingredient) ;; the dispenser dispenses the ingredient\n9. (shaker-empty-level ?s - shaker ?l - level) ;; the empty level of the shaker\n10. (shaker-level ?s - shaker ?l - level) ;; the shaker currently is at the level\n11. (next ?l1 ?l2 - level) ;; l2 is the next level after l1\n12. (unshaked ?s - shaker) ;; the shaker is unshaked\n13. (shaked ?s - shaker) ;; the shaker is shaked\n14. (cocktail-part1 ?c - cocktail ?i - ingredient) ;; the ingredient is part of the cocktail\n15. (cocktail-part2 ?c - cocktail ?i - ingredient) ;; the ingredient is part of the cocktail\nExample 1\nAction Description: The robot shakes a shaker containing two ingredients to make a cocktail.\n\nAction name: shake\n\n\nYour answer:\n---\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:**\n\nLet's imagine our robot barman has been given the task of making a cocktail by mixing two ingredients in a shaker. Now, in the world of our robot, we describe this task using something called an \"action schema\" in PDDL, which is just a way to explain step-by-step what needs to happen.\n\nHere's why each part of the action schema for \"shake\" is set up the way it is:\n\n1. **Parameters**: This includes everything the robot needs to know about before starting:\n   - The cocktail it needs to make.\n   - The two ingredients it will use.\n   - The shaker where the mixing happens.\n   - The robot's two hands.\n\n2. **Preconditions**: These are the conditions that must be true before the robot can start shaking the ingredients:\n   - The robot must be holding the shaker in one hand (`holding ?h1 ?s`).\n   - The other hand needs to be free (`handempty ?h2`) so the robot can balance or do other tasks if needed.\n   - The shaker must contain the two specific ingredients (`contains ?s ?d1` and `contains ?s ?d2`).\n   - Each ingredient must be a correct part of the cocktail (`cocktail-part1 ?b ?d1` and `cocktail-part2 ?b ?d2`).\n   - The shaker must be unshaken (`unshaked ?s`), meaning the ingredients haven't been mixed yet.\n\n3. **Effects**: These are what will happen after the robot performs the action:\n   - The shaker will no longer be unshaken; it's now shaken (`not (unshaked ?s)` and `shaked ?s`).\n   - The individual ingredients will no longer be in the shaker by themselves because they've been mixed into a cocktail (`not (contains ?s ?d1)` and `not (contains ?s ?d2)`).\n   - Now, the shaker contains the cocktail (`contains ?s ?b`).\n\nImagine our robot is like a chef following a recipe. The preconditions are like checking that you have all your ingredients and tools ready, and the effects are what you expect to see in your cooking pot after you follow the steps. This action schema helps the robot understand exactly what conditions need to be in place before it starts mixing and what changes to expect after it\u2019s done.\n\nThis way, we make sure the robot can successfully make the cocktail without any hitches, like trying to mix without holding the shaker or mixing the wrong ingredients.\n                \n**Response:**\nParameters:\n1. ?s - shot: [short description of the parameter]\n2. ?i - ingredient: [short description of the parameter]\n3. ?d - shaker: [short description of the parameter]\n4. ?h1 - hand: [short description of the parameter]\n5. ?l - level: [short description of the parameter]\n6. ?l1 - level: [short description of the parameter]\n\nPreconditions:\n```\n(and\n    (holding ?h1 ?s)\n    (contains ?s ?i)\n    (empty ?d)\n    (clean ?d)\n    (shaker-level ?d ?l)\n    (next ?l ?l1)\n)\n```\n\nEffects:\n```\n(and\n    (not (contains ?s ?i))\n    (empty ?s)\n    (contains ?d ?i)\n    (not (empty ?d))\n    (not (clean ?d))\n    (unshaked ?d)\n    (not (shaker-level ?d ?l))\n    (shaker-level ?d ?l1)\n)\n```\n\n---\n", "type": "prompt"}
{"role": "user", "content": "Example 2\nAction Description: The robot pours an ingredient from a shot glass into a clean shaker, changing its level.\n\nAction name: pour-shot-to-clean-shaker\n\n\nYour answer:\n---\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:**\n\nImagine you have a robot bartender tasked with making a special cocktail. It has a shot glass with an ingredient and needs to transfer this into a shaker to mix the drink properly. The action we're talking about is named \"pour-shot-to-clean-shaker.\"\n\nLet's break down the steps and rules (we call these \"preconditions\" and \"effects\") for this action using a simple scenario:\n\n1. **Preconditions (the rules that must be true before the action starts):**\n   - The robot must be holding the shot glass. This makes sense because it can't pour from the shot glass if it's not holding it!\n   - The shot glass must contain the ingredient it's supposed to pour. You wouldn't pour if the glass was empty, right?\n   - The shaker, where the ingredient will go, must be empty and clean. This ensures that previous contents don't mix with the new ingredient, keeping your drink as intended.\n   - The shaker must be at a certain level of fullness before pouring, and the robot knows what level comes next. This helps in measuring how much more it can add.\n\n2. **Effects (what happens after the action is performed):**\n   - The shot glass will no longer contain the ingredient because it's been poured out.\n   - The shot glass becomes empty because all its contents have been transferred.\n   - The shaker now contains the ingredient from the shot glass.\n   - The shaker is no longer empty or clean because it has something in it now.\n   - The shaker remains unshaken; just because the ingredient is added doesn't mean it's ready to drink. Mixing is a separate step!\n   - The level of the shaker changes to the next level, accounting for the added ingredient.\n\nBy setting these preconditions and effects, the robot knows exactly what to check and what changes to make in its environment to successfully make the cocktail. This careful planning ensures the drink is made correctly and efficiently, step by step.\n                \n**Response:**\nParameters:\n1. ?b - cocktail: [short description of the parameter]\n2. ?d1 - ingredient: [short description of the parameter]\n3. ?d2 - ingredient: [short description of the parameter]\n4. ?s - shaker: [short description of the parameter]\n5. ?h1 - hand: [short description of the parameter]\n6. ?h2 - hand: [short description of the parameter]\n\nPreconditions:\n```\n(and\n    (holding ?h1 ?s)\n    (handempty ?h2)\n    (contains ?s ?d1)\n    (contains ?s ?d2)\n    (cocktail-part1 ?b ?d1)\n    (cocktail-part2 ?b ?d2)\n    (unshaked ?s)\n)\n```\n\nEffects:\n```\n(and\n    (not (unshaked ?s))\n    (not (contains ?s ?d1))\n    (not (contains ?s ?d2))\n    (shaked ?s)\n    (contains ?s ?b)\n)\n```\n\n---\n", "type": "prompt"}
{"role": "user", "content": "Question: Here is the task.\nA natural language description of the domain\nDomain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape\n\nA list of available predicates\n1. (at-hero ?loc - cells) ;;  Hero's cell location\n2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location\n3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster\n4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap\n5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed\n6. (connected ?from ?to - cells) ;; connects cells\n7. (arm-free) ;; Hero's hand is free\n8. (holding ?s - swords) ;; Hero's holding a sword\n9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed\n\nAction Description: The hero can **move** to an adjacent room (connected by a corridor) that has not been destroyed (i.e., the hero has not already visited the room). When this action is executed, the hero gets into a location with a monster\n\nAction name: move-to-monster\n\n\nYour answer:\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:**\n\nIn the dungeon domain, the hero needs to navigate through rooms connected by corridors to find an exit. The action \"move-to-monster\" describes the hero moving into an adjacent room that contains a monster. For this action to be executed, certain conditions must be met, and certain outcomes will result from it.\n\nThe preconditions ensure that the hero is in a valid state to perform the action, while the effects describe the changes that occur in the world after the action is taken.\n\n1. **Preconditions:**\n   - The hero must be at a certain location (`at-hero ?from`).\n   - The target location must have a monster (`has-monster ?to`).\n   - The hero's current location and the target location must be connected (`connected ?from ?to`).\n   - The target location must not be destroyed (`not (is-destroyed ?to)`), meaning the hero hasn't been there before.\n\n2. **Effects:**\n   - The hero will no longer be at the previous location (`not (at-hero ?from)`).\n   - The hero will now be at the new location with the monster (`at-hero ?to`).\n\nThis action does not specify what happens when the hero encounters the monster, such as fighting or avoiding it, as that would be part of another action description.\n\n**Response:**\nParameters:\n1. ?from - cells: [The starting cell location of the hero]\n2. ?to - cells: [The target cell location with the monster]\n\nPreconditions:\n```\n(and\n    (at-hero ?from)\n    (has-monster ?to)\n    (connected ?from ?to)\n    (not (is-destroyed ?to))\n)\n```\n\nEffects:\n```\n(and\n    (not (at-hero ?from))\n    (at-hero ?to)\n)\n```\n\n---", "type": "response", "action": "move-to-monster"}
{"role": "system", "content": "# CONTEXT #\nYou are a tool called PDDL Modeling Assistant. You are a technical experts in constructing Planning Domain Definition Language (PDDL) models via the natural language context.\n# OBJECTIVE #\n* Construct parameters, preconditions and effects based on the domain information, action description and the action name.\n* All variables in the preconditions and effects must be listed in the action's parameters. This restriction helps maintain the action's scope and prevents ambiguity in the planning process.\n* Do not use predicates that are not defined in the available predicates list to construct the preconditions and effects.\n* When the natural language description is ambiguous or certain predicate changes are implied, make reasonable assumptions based on common sense to fill up the implicit predicate in the PDDL action.\n# STYLE #\nFollow the writing style of technical experts. The output can be parsed by a machine, so it is important to follow the structured format.\n# TONE #\nBe precise and concise in constructing the PDDL action. The PDDL action should be clear and unambiguous.\n# AUDIENCE #\nYour audience is someone who is trying to learn how to construct PDDL actions from natural language descriptions.\n# RESPONSE #\nThe response should be in the following format:\n---\n**Explanation:** [Your explanation here]\n\n**Response:**\nParameters:\n1. ?x - [type]: [parameter description]\n2. ...\n\nPreconditions:\n```\n(and\n    ([predicate_1] ?x)\n)\n```\n\nEffects:\n```\n(and\n    (not ([predicate_2] ?x))\n    ([predicate_2] ?x)\n    ...\n)\n```\n---\n", "type": "prompt"}
{"role": "user", "content": "One or two examples from other domains for illustrating the input and output formats.\nHere are two examples from the storage domain for demonstrating the output format.\n        \nDomain information: Moving and storing crates of goods by hoists from containers to depots with spatial maps. This domain deals with the movement and storage of crates of goods using hoists. It involves different locations like containers and depots, and requires managing the spatial arrangement of crates and hoists in various areas. The actions primarily focus on the lifting, moving, and placement of crates by hoists, considering the spatial and availability constraints of the areas involved.\n\nA list of available predicates\n1. (clear ?s - store_area) ;; the store area is clear\n2. (crate_in ?c - crate ?p - place) ;; the crate is in the place\n3. (store_area_in ?s - store_area ?p - place) ;; the store area is in the place\n4. (available ?h - hoist) ;; the hoist is available\n5. (lifting ?h - hoist ?c - crate) ;; the hoist is lifting the crate\n6. (at ?h - hoist ?a - area) ;; the hoist is at the area\n7. (on ?c - crate ?s - store_area) ;; the crate is on the store area\n8. (connected ?a1 ?a2 - area) ;; the area a1 is connected to the area a2\nExample 1\nAction Description: Moves a hoist from one store_area to another. Preconditions include the hoist being at the source store_area, the destination store_area being clear, and the areas being connected. The effect is the hoist moving to the destination and the change in clarity status of both store areas.\n\nAction name: move\n\n\nYour answer:\n---\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:**\n\nLet's imagine a scenario where you need to move a toy truck from one corner of a room to another. This toy truck represents the hoist, and the corners of the room are like different storage areas in our description.\n\n1. **Preconditions:**\n   - **Hoist is at the source area (at ?h ?from):** This condition makes sure that the hoist is actually at the starting point (like making sure your toy truck is really in the corner where you want to start moving it from). This is necessary because you can't move something from a place it isn't already at.\n   - **Destination area is clear (clear ?to):** This is like making sure that the corner you want to move your toy truck to doesn\u2019t have any obstacles or other toys in the way. The space needs to be clear so the hoist can move in without any issues.\n   - **Areas are connected (connected ?from ?to):** This checks if there is a direct path from the starting point to the destination, similar to making sure there's a clear path on the floor between the two corners of the room for the toy truck to travel without hitting a wall or furniture.\n\n2. **Effects:**\n   - **Hoist moves to the destination (at ?h ?to):** This is like saying your toy truck is now in the new corner of the room.\n   - **Hoist is no longer at the source (not (at ?h ?from)):** Just like your toy truck can't be in two places at once, when the hoist moves to the new area, it's no longer in the original area.\n   - **Destination area is no longer clear (not (clear ?to)):** Now that the hoist (or your toy truck) is in the new corner, that corner isn't empty anymore.\n   - **Source area becomes clear (clear ?from):** Since the hoist has moved away from the original area, that area is now free of obstacles or the hoist itself.\n\nSo, in simple terms, this action is like moving a toy from one clear, connected corner of the room to another. Before you move it, you need to check that it\u2019s starting in the right place, that there\u2019s no blockage where it\u2019s going, and that it can directly reach there. Once moved, the toy truck\u2019s old spot becomes empty, and its new spot is now occupied by it.\n                \n**Response:**\nParameters:\n1. ?h - hoist: [short description of the parameter]\n2. ?from - store_area: [short description of the parameter]\n3. ?to - store_area: [short description of the parameter]\n\nPreconditions:\n```\n(and\n    (at ?h ?from)\n    (clear ?to)\n    (connected ?from ?to)\n)\n```\n\nEffects:\n```\n(and\n    (not (at ?h ?from))\n    (at ?h ?to)\n    (not (clear ?to))\n    (clear ?from)\n)\n```\n\n---\n", "type": "prompt"}
{"role": "user", "content": "Example 2\nAction Description: This action is about a hoist dropping a crate into a store_area from an area. Preconditions are similar to 'Lift' but include the hoist lifting the crate and the destination store_area being clear. The effects involve the hoist becoming available and the crate being placed on the destination store_area.\n\nAction name: drop\n\n\nYour answer:\n---\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:**\nLet's imagine a scenario in a warehouse where a hoist is used to move crates from one area to another, like moving a box of toys from a shelf to a play area. The action we're talking about is called \"drop,\" where the hoist places a crate into a designated storage area.\n\n1. **Preconditions Explained:**\n   - **Connected Areas:** First, the hoist can only drop the crate if the area it\u2019s in (let's call it the play area) is connected to the area where the hoist is currently located (like the shelf area). This means there must be a clear path for the hoist to move the crate to its destination.\n   - **Hoist Location:** The hoist must be in the area adjacent to where the crate needs to go. If our hoist isn't next to the play area, it can't drop the crate there.\n   - **Hoist Lifting the Crate:** Before dropping, the hoist must already be lifting a crate. It's like making sure the hoist has picked up the box of toys before it can put it down.\n   - **Clear Storage Area:** The destination, where the crate will be placed, must be clear of other objects. This ensures there's space to safely place the new crate without stacking or causing a mess.\n   - **Store Area in Place:** The storage area where the crate is to be dropped needs to be part of the larger place being managed. This is like ensuring the play area is actually a part of the designated playroom.\n\n2. **Effects Explained:**\n   - **Hoist No Longer Lifting:** Once the crate is dropped, the hoist is no longer lifting it. This is like putting down the box of toys.\n   - **Hoist Becomes Available:** After dropping off the crate, the hoist is now free to take on other tasks, like picking up another box.\n   - **Storage Area Not Clear Anymore:** Since the crate has been placed there, the storage area is no longer empty.\n   - **Crate on Storage Area:** The crate is now officially in the storage area, like the box of toys now being in the play area.\n   - **Crate Location Updated:** We update the records to show that the crate is now in this new location within the place, which helps in managing space and knowing where everything is.\n\nThis action of dropping a crate involves several steps and conditions that ensure everything happens smoothly and safely, from ensuring there's a path to the hoist being ready and the space being available for the new crate. It's like making sure you have both hands free and a clear spot on the floor before you set down a heavy box.\n                \n**Response:**\nParameters:\n1. ?h - hoist: [short description of the parameter]\n2. ?c - crate: [short description of the parameter]\n3. ?a1 - store_area: [short description of the parameter]\n4. ?a2 - area: [short description of the parameter]\n5. ?p - place: [short description of the parameter]\n\nPreconditions:\n```\n(and\n    (connected ?a1 ?a2)\n    (at ?h ?a2)\n    (lifting ?h ?c)\n    (clear ?a1)\n    (store_area_in ?a1 ?p)\n)\n```\n\nEffects:\n```\n(and\n    (not (lifting ?h ?c))\n    (available ?h)\n    (not (clear ?a1))\n    (on ?c ?a1)\n    (crate_in ?c ?p)\n)\n```\n\n---\n", "type": "prompt"}
{"role": "user", "content": "Here are two examples from the barman domain for demonstrating the output format.\n        \nDomain information: In this domain there is a robot barman that manipulates drink dispensers, glasses and a shaker. The goal is to find a plan of the robots actions that serves a desired set of drinks. In this domain deletes of actions encode relevant knowledge given that robot hands can only grasp one object at a time and given that glasses need to be empty and clean to be filled.\n\nA list of available predicates\n1. (ontable ?c - container) ;; the container is on the table\n2. (holding ?h - hand ?c - container) ;; the hand is holding the container\n3. (handempty ?h - hand) ;; the hand is empty\n4. (empty ?c - container) ;; the container is empty\n5. (contains ?c - container ?b - beverage) ;; the container contains the beverage\n6. (clean ?c - container) ;; the container is clean\n7. (used ?c - container ?b - beverage) ;; the container is used for the beverage\n8. (dispenses ?d - dispenser ?i - ingredient) ;; the dispenser dispenses the ingredient\n9. (shaker-empty-level ?s - shaker ?l - level) ;; the empty level of the shaker\n10. (shaker-level ?s - shaker ?l - level) ;; the shaker currently is at the level\n11. (next ?l1 ?l2 - level) ;; l2 is the next level after l1\n12. (unshaked ?s - shaker) ;; the shaker is unshaked\n13. (shaked ?s - shaker) ;; the shaker is shaked\n14. (cocktail-part1 ?c - cocktail ?i - ingredient) ;; the ingredient is part of the cocktail\n15. (cocktail-part2 ?c - cocktail ?i - ingredient) ;; the ingredient is part of the cocktail\nExample 1\nAction Description: The robot pours a beverage from a shaker into an empty, clean shot glass.\n\nAction name: pour-shaker-to-shot\n\n\nYour answer:\n---\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:**\nImagine you're teaching a robot how to serve drinks at a party. The robot is designed to perform specific tasks with clear instructions, much like following a recipe step-by-step.\n\n**Scenario:** The robot needs to pour a beverage from a shaker into a shot glass. The action it must perform is called \"pour-shaker-to-shot.\"\n\n**Why the Preconditions are Necessary:**\n1. **Holding the Shaker:** The robot must be holding the shaker to pour from it. If it's not holding it, it can't control the pouring process.\n2. **Shaker is Shaken:** The contents in the shaker need to be mixed well (shaken) before serving. This ensures the drink's quality and consistency.\n3. **The Shot Glass is Empty:** The glass must be empty because pouring into an already full or partially filled glass would cause a spill or mix drinks unintentionally.\n4. **The Shot Glass is Clean:** Hygiene and taste! No one wants a dirty glass, and leftover residues could alter the flavor of the new drink.\n5. **Shaker Contains the Beverage:** The robot needs to confirm that the right beverage is in the shaker to pour the correct drink.\n6. **Shaker Level is Correct:** Knowing the current level helps manage how much is poured, ensuring the robot doesn't try to pour more than what is available.\n7. **Next Level Indicator:** This indicates how much beverage will remain in the shaker after pouring, helping in planning the next steps or refilling.\n\n**How the Preconditions Lead to the Specified Effects:**\n- After the robot pours, the shot glass will no longer be clean and empty because it now contains the beverage.\n- The level of the beverage in the shaker decreases as it has been transferred to the glass.\n- The robot updates the shaker's level to reflect the new quantity, which is crucial for knowing how much is left for the next drink.\n\n**Simple Analogy:**\nThink of it like pouring apple juice for a kid. You need to make sure you have the juice (in a jug), a clean and empty cup to pour into, and you need to be holding the jug. After pouring, the cup will have juice, and there'll be less juice in the jug. Just like you need to check these things, so does the robot!\n\nBy setting up these instructions in the action \"pour-shaker-to-shot,\" we ensure the robot does its job correctly and efficiently, just like you'd carefully prepare a drink for a guest.\n                \n**Response:**\nParameters:\n1. ?s - shot: [short description of the parameter]\n2. ?i - ingredient: [short description of the parameter]\n3. ?h1 - hand: [short description of the parameter]\n4. ?h2 - hand: [short description of the parameter]\n5. ?d - dispenser: [short description of the parameter]\n\nPreconditions:\n```\n(and\n    (holding ?h1 ?s)\n    (handempty ?h2)\n    (dispenses ?d ?i)\n    (empty ?s)\n    (used ?s ?i)\n)\n```\n\nEffects:\n```\n(and\n    (not (empty ?s))\n    (contains ?s ?i)\n)\n```\n\n---\n", "type": "prompt"}
{"role": "user", "content": "Example 2\nAction Description: The robot refills a shot glass with the same ingredient it previously contained.\n\nAction name: refill-shot\n\n\nYour answer:\n---\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:**\nLet's imagine a robot bartender named Robbie. Robbie's job is to make sure everyone gets their favorite drink, using shot glasses and different drink dispensers. Now, think about Robbie having to refill a shot glass with a specific ingredient. To do this smoothly, Robbie has to follow certain steps, and that's what the PDDL action schema is showing us.\n\n1. **Preconditions (The must-haves before starting):**\n   - Robbie must already be holding the shot glass with one hand (`holding ?h1 ?s`). This means Robbie's hand (`?h1`) is not empty because it's holding the shot glass (`?s`).\n   - The other hand (`?h2`) needs to be empty (`handempty ?h2`). This is important because Robbie might need to use this hand to operate the dispenser or do something else during the process.\n   - The dispenser that Robbie is going to use must dispense the ingredient Robbie needs (`dispenses ?d ?i`). This ensures that Robbie is at the right dispenser for the drink.\n   - The shot glass must be empty (`empty ?s`) before Robbie can refill it. We can't pour more into a full glass, right?\n   - The shot glass must have been used previously for the same ingredient (`used ?s ?i`). This tells us that it's okay to use the same glass for the same drink without mixing flavors.\n\n2. **Effects (What happens after Robbie follows the steps):**\n   - The shot glass is no longer empty (`not (empty ?s)`). It means Robbie has successfully refilled it.\n   - The shot glass now contains the ingredient it was supposed to be refilled with (`contains ?s ?i`). Now, the glass is ready to be served again with the same tasty drink.\n\nThis action schema helps Robbie remember exactly what needs to be checked and done to successfully refill a shot glass.\n                \n**Response:**\nParameters:\n1. ?b - beverage: [short description of the parameter]\n2. ?d - shot: [short description of the parameter]\n3. ?h - hand: [short description of the parameter]\n4. ?s - shaker: [short description of the parameter]\n5. ?l - level: [short description of the parameter]\n6. ?l1 - level: [short description of the parameter]\n\nPreconditions:\n```\n(and\n    (holding ?h ?s)\n    (shaked ?s)\n    (empty ?d)\n    (clean ?d)\n    (contains ?s ?b)\n    (shaker-level ?s ?l)\n    (next ?l1 ?l)\n)\n```\n\nEffects:\n```\n(and\n    (not (clean ?d))\n    (not (empty ?d))\n    (contains ?d ?b)\n    (shaker-level ?s ?l1)\n    (not (shaker-level ?s ?l))\n)\n```\n\n---\n", "type": "prompt"}
{"role": "user", "content": "Question: Here is the task.\nA natural language description of the domain\nDomain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape\n\nA list of available predicates\n1. (at-hero ?loc - cells) ;;  Hero's cell location\n2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location\n3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster\n4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap\n5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed\n6. (connected ?from ?to - cells) ;; connects cells\n7. (arm-free) ;; Hero's hand is free\n8. (holding ?s - swords) ;; Hero's holding a sword\n9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed\n\nAction Description: **Disarm a trap** \u2013 if there is a trap in the room the hero is in and the hero is empty-handed (does not hold a sword), then the hero can disarm it\n\nAction name: disarm-trap\n\n\nYour answer:\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:**\nIn the dungeon domain, the hero needs to navigate through rooms connected by corridors, avoiding or dealing with monsters and traps, and possibly picking up a sword to aid in the escape. The action \"disarm-trap\" is a critical step where the hero disarms a trap in the room they are currently in.\n\nFor the hero to disarm a trap, certain conditions must be met:\n1. The hero must be in a room with a trap (`has-trap ?loc`).\n2. The hero must be empty-handed, meaning not holding a sword (`arm-free`), to use their hands to disarm the trap.\n\nOnce these conditions are satisfied, the hero performs the action of disarming the trap, which leads to the effect that the trap is disarmed (`trap-disarmed ?loc`). This action does not require the hero to move or interact with any other objects in the room.\n\n**Response:**\nParameters:\n1. ?loc - cells: [The cell where the hero is located and where the trap is]\n\nPreconditions:\n```\n(and\n    (at-hero ?loc)\n    (has-trap ?loc)\n    (arm-free)\n)\n```\n\nEffects:\n```\n(and\n    (trap-disarmed ?loc)\n)\n```\n\nThis PDDL action schema ensures that the hero can only disarm a trap if they are in the correct room and have their hands free, which is essential for the logical consistency and safety of the hero's actions within the dungeon domain.", "type": "response", "action": "disarm-trap"}
{"role": "system", "content": "# CONTEXT #\nYou are a tool called PDDL Modeling Assistant. You are a technical experts in constructing Planning Domain Definition Language (PDDL) models via the natural language context.\n# OBJECTIVE #\n* Construct parameters, preconditions and effects based on the domain information, action description and the action name.\n* All variables in the preconditions and effects must be listed in the action's parameters. This restriction helps maintain the action's scope and prevents ambiguity in the planning process.\n* Do not use predicates that are not defined in the available predicates list to construct the preconditions and effects.\n* When the natural language description is ambiguous or certain predicate changes are implied, make reasonable assumptions based on common sense to fill up the implicit predicate in the PDDL action.\n# STYLE #\nFollow the writing style of technical experts. The output can be parsed by a machine, so it is important to follow the structured format.\n# TONE #\nBe precise and concise in constructing the PDDL action. The PDDL action should be clear and unambiguous.\n# AUDIENCE #\nYour audience is someone who is trying to learn how to construct PDDL actions from natural language descriptions.\n# RESPONSE #\nThe response should be in the following format:\n---\n**Explanation:** [Your explanation here]\n\n**Response:**\nParameters:\n1. ?x - [type]: [parameter description]\n2. ...\n\nPreconditions:\n```\n(and\n    ([predicate_1] ?x)\n)\n```\n\nEffects:\n```\n(and\n    (not ([predicate_2] ?x))\n    ([predicate_2] ?x)\n    ...\n)\n```\n---\n", "type": "prompt"}
{"role": "user", "content": "One or two examples from other domains for illustrating the input and output formats.\nHere are two examples from the storage domain for demonstrating the output format.\n        \nDomain information: Moving and storing crates of goods by hoists from containers to depots with spatial maps. This domain deals with the movement and storage of crates of goods using hoists. It involves different locations like containers and depots, and requires managing the spatial arrangement of crates and hoists in various areas. The actions primarily focus on the lifting, moving, and placement of crates by hoists, considering the spatial and availability constraints of the areas involved.\n\nA list of available predicates\n1. (clear ?s - store_area) ;; the store area is clear\n2. (crate_in ?c - crate ?p - place) ;; the crate is in the place\n3. (store_area_in ?s - store_area ?p - place) ;; the store area is in the place\n4. (available ?h - hoist) ;; the hoist is available\n5. (lifting ?h - hoist ?c - crate) ;; the hoist is lifting the crate\n6. (at ?h - hoist ?a - area) ;; the hoist is at the area\n7. (on ?c - crate ?s - store_area) ;; the crate is on the store area\n8. (connected ?a1 ?a2 - area) ;; the area a1 is connected to the area a2\nExample 1\nAction Description: Involves a hoist lifting a crate from one store_area to another area. Preconditions include the areas being connected, the hoist being at the destination area and available, and the crate being on the source store_area. The effects are the crate being lifted and the source store_area becoming clear.\n\nAction name: lift\n\n\nYour answer:\n---\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:**\nLet's imagine you want to move a toy train (representing the hoist) from one side of your playroom (a store area) to another. Before moving it, you need to make sure of a few things:\n\n1. **The train is actually at the starting point:** Just like you need to know where your train is before you can move it, the action schema checks if the hoist is at the starting store area (`at ?h ?from`). This ensures that we are moving the right hoist from the correct location.\n\n2. **The destination is clear:** Imagine if the place you wanted to move your train to was already full of other toys. You wouldn\u2019t be able to put your train there, right? Similarly, the schema requires the destination store area to be clear (`clear ?to`) so that the hoist can move there without any issues.\n\n3. **The starting and destination points are connected:** It\u2019s like making sure there\u2019s a clear path or a track between where your train is and where you want it to go. If there\u2019s no track, you can't move the train. In the action schema, this is checked by the condition (`connected ?from ?to`).\n\nNow, when the train (hoist) moves:\n- **It is no longer at the starting point:** Just like when your train leaves one side of the room, it\u2019s not there anymore. This change is shown in the schema by removing the condition that the hoist is at the starting area (`not (at ?h ?from)`).\n  \n- **It is now at the destination:** When you move your train to the other side of the room, it\u2019s now there. This is represented in the schema by adding the condition that the hoist is now at the destination area (`at ?h ?to`).\n\n- **The destination is no longer clear:** Now that the train is at the new spot, that area isn\u2019t empty anymore. This change is reflected by removing the 'clear' condition for the destination area (`not (clear ?to)`).\n\n- **The starting point becomes clear:** Since the train left the starting area, that spot is now free. This is captured by adding a 'clear' condition for the starting area (`clear ?from`).\n\nThis whole process helps ensure that the hoist can safely and efficiently move from one area to another without confusion or conflicts.\n                \n**Response:**\nParameters:\n1. ?h - hoist: [short description of the parameter]\n2. ?c - crate: [short description of the parameter]\n3. ?a1 - store_area: [short description of the parameter]\n4. ?a2 - area: [short description of the parameter]\n5. ?p - place: [short description of the parameter]\n\nPreconditions:\n```\n(and\n    (connected ?a1 ?a2)\n    (at ?h ?a2)\n    (available ?h)\n    (on ?c ?a1)\n    (store_area_in ?a1 ?p)\n)\n```\n\nEffects:\n```\n(and\n    (not (on ?c ?a1))\n    (clear ?a1)\n    (not (available ?h))\n    (lifting ?h ?c)\n    (not (crate_in ?c ?p))\n)\n```\n\n---\n", "type": "prompt"}
{"role": "user", "content": "Example 2\nAction Description: Involves a hoist moving from a store_area to a transit_area. Preconditions are the hoist being at the source store_area and the areas being connected. The effect is the hoist moving to the transit_area and the source store_area becoming clear.\n\nAction name: go-out\n\n\nYour answer:\n---\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:** Let's imagine we have a little robotic hoist in a big warehouse. Its job is to move from one specific area where it usually stores things, called a store area, to another area meant for transitioning goods, which we call a transit area. Now, this action of moving from the store area to the transit area is called \"go-out.\"\n\nTo make sure this action goes smoothly, there are a few things that need to be in place beforehand, which we call preconditions. First, our little hoist needs to be at the store area to start with\u2014if it\u2019s somewhere else, it can\u2019t start moving from the store area, right? That's like saying you need to be at home to start walking to the park. Secondly, the store area and the transit area need to be connected. If there's no path or door between them, our hoist can't get to the transit area. It's a bit like needing a road or a path to walk on.\n\nNow, when the hoist successfully moves to the transit area, we have some changes that occur, which are the effects of the action. The hoist is no longer in the store area (it has moved, after all), and it's now in the transit area. This is straightforward: the hoist was here, and now it\u2019s there. Additionally, the store area becomes 'clear' or empty because the hoist has moved out. This is like saying that once you leave your room, the room is empty.\n\nSo, in summary, the \"go-out\" action moves our hoist from one area to another and makes sure the starting area is free for other activities. This helps keep things organized and running smoothly in our warehouse scenario.\n                \n**Response:**\nParameters:\n1. ?h - hoist: [short description of the parameter]\n2. ?from - store_area: [short description of the parameter]\n3. ?to - transit_area: [short description of the parameter]\n\nPreconditions:\n```\n(and\n    (at ?h ?from)\n    (connected ?from ?to)\n)\n```\n\nEffects:\n```\n(and\n    (not (at ?h ?from))\n    (at ?h ?to)\n    (clear ?from)\n)\n```\n\n---\n", "type": "prompt"}
{"role": "user", "content": "Here are two examples from the barman domain for demonstrating the output format.\n        \nDomain information: In this domain there is a robot barman that manipulates drink dispensers, glasses and a shaker. The goal is to find a plan of the robots actions that serves a desired set of drinks. In this domain deletes of actions encode relevant knowledge given that robot hands can only grasp one object at a time and given that glasses need to be empty and clean to be filled.\n\nA list of available predicates\n1. (ontable ?c - container) ;; the container is on the table\n2. (holding ?h - hand ?c - container) ;; the hand is holding the container\n3. (handempty ?h - hand) ;; the hand is empty\n4. (empty ?c - container) ;; the container is empty\n5. (contains ?c - container ?b - beverage) ;; the container contains the beverage\n6. (clean ?c - container) ;; the container is clean\n7. (used ?c - container ?b - beverage) ;; the container is used for the beverage\n8. (dispenses ?d - dispenser ?i - ingredient) ;; the dispenser dispenses the ingredient\n9. (shaker-empty-level ?s - shaker ?l - level) ;; the empty level of the shaker\n10. (shaker-level ?s - shaker ?l - level) ;; the shaker currently is at the level\n11. (next ?l1 ?l2 - level) ;; l2 is the next level after l1\n12. (unshaked ?s - shaker) ;; the shaker is unshaked\n13. (shaked ?s - shaker) ;; the shaker is shaked\n14. (cocktail-part1 ?c - cocktail ?i - ingredient) ;; the ingredient is part of the cocktail\n15. (cocktail-part2 ?c - cocktail ?i - ingredient) ;; the ingredient is part of the cocktail\nExample 1\nAction Description: The robot cleans an empty shaker.\n\nAction name: clean-shaker\n\n\nYour answer:\n---\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:**\nImagine a robot barman at work in a busy cocktail bar. The robot is tasked with making drinks using various tools, including a shaker that needs to be clean before it can be used to mix ingredients. Let's consider why the robot would need specific conditions to be met before it can clean the shaker, as described in the action schema called \"clean-shaker.\"\n\n1. **Why the shaker needs to be held and the other hand empty**: The action requires the robot to hold the shaker with one hand (`holding ?h1 ?s`) and have the other hand empty (`handempty ?h2`). This makes sense because the robot can only use one hand to perform the cleaning while needing the other hand free, possibly to manipulate cleaning tools or to stabilize the shaker.\n\n2. **Why the shaker must be empty**: It's also specified that the shaker needs to be empty before it can be cleaned (`empty ?s`). This is crucial because cleaning a shaker that still has something in it would not only be inefficient but also could cause a mess and waste ingredients. The robot needs to ensure the shaker is empty to effectively clean it for the next drink preparation.\n\n3. **The effect of the action**: Once these conditions are met, the effect of the robot's action is that the shaker becomes clean (`clean ?s`). This state change is vital because a clean shaker ensures that the drinks made are fresh and uncontaminated by previous ingredients.\n\nBy setting these preconditions, the action schema makes sure that the robot operates logically and efficiently, avoiding potential errors like trying to clean a shaker that is not yet empty or held properly. This careful planning helps the robot succeed in its role as a barman, ensuring happy customers with well-made cocktails.\n\nIn simpler terms, it's like making sure you've got all your ingredients ready and your cooking space organized before you start making a meal. This preparation helps everything go smoothly, just as the robot's preconditions ensure it can clean the shaker effectively.\n                \n**Response:**\nParameters:\n1. ?h - hand: [short description of the parameter]\n2. ?c - container: [short description of the parameter]\n\nPreconditions:\n```\n(and\n    (ontable ?c)\n    (handempty ?h)\n)\n```\n\nEffects:\n```\n(and\n    (not (ontable ?c))\n    (not (handempty ?h))\n    (holding ?h ?c)\n)\n```\n\n---\n", "type": "prompt"}
{"role": "user", "content": "Example 2\nAction Description: The robot uses a hand to pick up a container from the table.\n\nAction name: grasp\n\n\nYour answer:\n---\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:**\nImagine a robot bartender at a busy party, tasked with making a variety of drinks. This robot, like a human bartender, has hands that it uses to pick up things like glasses or shakers.\n\nIn the scenario we're discussing, the action we're focusing on is called \"grasp,\" where the robot uses its hand to pick up a container from a table. Let's break down why certain conditions need to be met for this action to happen successfully and what happens after the robot performs this action.\n\n**Why the preconditions are necessary:**\n1. **The container must be on the table (ontable ?c):** This makes sense because if the container isn't on the table, the robot wouldn't know where to find it. It needs to be in a predictable location that the robot can access.\n2. **The robot's hand must be empty (handempty ?h):** Before the robot can pick up something new, its hand needs to be empty. Just like you can't pick up a cup of coffee if you're already holding an apple in your hand, the robot needs a free hand to pick up a new container.\n\n**What happens after the action (effects):**\n1. **The container is no longer on the table (not (ontable ?c)):** Once the robot picks up the container, it's no longer sitting on the table. It's in the robot's hand.\n2. **The robot's hand is no longer empty (not (handempty ?h)):** With the container in its hand, the hand isn't empty anymore.\n3. **The robot's hand is holding the container (holding ?h ?c):** This describes the new status of the robot\u2019s hand\u2014it is actively holding onto the container.\n\nSo, in this action, we see the robot checking that the container is where it's supposed to be and making sure its hand is ready to pick something up. Once those conditions are met, the robot can safely pick up the container, changing both the status of the container and the status of its hand. This is very practical and logical, ensuring that the robot operates efficiently and correctly in its environment of serving drinks at the party.\n\nThis action schema helps in planning out the robot's movements in a logical sequence, ensuring it always knows what to do next, based on simple checks and changes (preconditions and effects).\n                \n**Response:**\nParameters:\n1. ?h1 - hand: [short description of the parameter]\n2. ?h2 - hand: [short description of the parameter]\n3. ?s - shaker: [short description of the parameter]\n\nPreconditions:\n```\n(and\n    (holding ?h1 ?s)\n    (handempty ?h2)\n    (empty ?s)\n)\n```\n\nEffects:\n```\n(and\n    (clean ?s)\n)\n```\n\n---\n", "type": "prompt"}
{"role": "user", "content": "Question: Here is the task.\nA natural language description of the domain\nDomain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape\n\nA list of available predicates\n1. (at-hero ?loc - cells) ;;  Hero's cell location\n2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location\n3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster\n4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap\n5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed\n6. (connected ?from ?to - cells) ;; connects cells\n7. (arm-free) ;; Hero's hand is free\n8. (holding ?s - swords) ;; Hero's holding a sword\n9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed\n\nAction Description: **Pickup** the sword if present in the room the hero is currently in and the hero is empty handed\n\nAction name: pick-sword\n\n\nYour answer:\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:**\nIn the given dungeon domain, the hero needs to navigate through rooms connected by corridors, avoiding monsters and traps, and possibly using a sword found along the way to aid in their escape. The action \"pick-sword\" is a crucial step where the hero picks up a sword if it's present in the room they are currently in and they are not already holding something.\n\nFor this action to be performed, certain conditions must be met:\n1. The hero must be in the same room as the sword (`at-hero ?loc` and `at-sword ?s ?loc`), because the hero can only pick up a sword that is in their immediate vicinity.\n2. The hero's hand must be free (`arm-free`), meaning they are not already holding another sword or item, which is necessary to pick up the sword.\n\nOnce these preconditions are satisfied, the effects of the action are:\n1. The hero is no longer empty-handed (`not (arm-free)`), as they are now holding the sword.\n2. The sword is no longer in the room (`not (at-sword ?s ?loc)`), as it is now in the hero's possession.\n\nThis action is important for the hero's survival and success in the dungeon, as having a sword may be necessary to fight off monsters or to disarm traps.\n\n**Response:**\nParameters:\n1. ?h - hero: [short description of the parameter]\n2. ?s - swords: [short description of the parameter]\n3. ?loc - cells: [short description of the parameter]\n\nPreconditions:\n```\n(and\n    (at-hero ?loc)\n    (at-sword ?s ?loc)\n    (arm-free)\n)\n```\n\nEffects:\n```\n(and\n    (not (arm-free))\n    (holding ?s)\n    (not (at-sword ?s ?loc))\n)\n```\n\n---", "type": "response", "action": "pick-sword"}
{"role": "system", "content": "# CONTEXT #\nYou are a tool called PDDL Modeling Assistant. You are a technical experts in constructing Planning Domain Definition Language (PDDL) models via the natural language context.\n# OBJECTIVE #\n* Construct parameters, preconditions and effects based on the domain information, action description and the action name.\n* All variables in the preconditions and effects must be listed in the action's parameters. This restriction helps maintain the action's scope and prevents ambiguity in the planning process.\n* Do not use predicates that are not defined in the available predicates list to construct the preconditions and effects.\n* When the natural language description is ambiguous or certain predicate changes are implied, make reasonable assumptions based on common sense to fill up the implicit predicate in the PDDL action.\n# STYLE #\nFollow the writing style of technical experts. The output can be parsed by a machine, so it is important to follow the structured format.\n# TONE #\nBe precise and concise in constructing the PDDL action. The PDDL action should be clear and unambiguous.\n# AUDIENCE #\nYour audience is someone who is trying to learn how to construct PDDL actions from natural language descriptions.\n# RESPONSE #\nThe response should be in the following format:\n---\n**Explanation:** [Your explanation here]\n\n**Response:**\nParameters:\n1. ?x - [type]: [parameter description]\n2. ...\n\nPreconditions:\n```\n(and\n    ([predicate_1] ?x)\n)\n```\n\nEffects:\n```\n(and\n    (not ([predicate_2] ?x))\n    ([predicate_2] ?x)\n    ...\n)\n```\n---\n", "type": "prompt"}
{"role": "user", "content": "One or two examples from other domains for illustrating the input and output formats.\nHere are two examples from the storage domain for demonstrating the output format.\n        \nDomain information: Moving and storing crates of goods by hoists from containers to depots with spatial maps. This domain deals with the movement and storage of crates of goods using hoists. It involves different locations like containers and depots, and requires managing the spatial arrangement of crates and hoists in various areas. The actions primarily focus on the lifting, moving, and placement of crates by hoists, considering the spatial and availability constraints of the areas involved.\n\nA list of available predicates\n1. (clear ?s - store_area) ;; the store area is clear\n2. (crate_in ?c - crate ?p - place) ;; the crate is in the place\n3. (store_area_in ?s - store_area ?p - place) ;; the store area is in the place\n4. (available ?h - hoist) ;; the hoist is available\n5. (lifting ?h - hoist ?c - crate) ;; the hoist is lifting the crate\n6. (at ?h - hoist ?a - area) ;; the hoist is at the area\n7. (on ?c - crate ?s - store_area) ;; the crate is on the store area\n8. (connected ?a1 ?a2 - area) ;; the area a1 is connected to the area a2\nExample 1\nAction Description: This is the reverse of Go-out, where a hoist moves from a transit_area to a store_area. Preconditions include the hoist being at the transit_area, the areas being connected, and the destination store_area being clear. The effect is similar to Go-out but in reverse.\n\nAction name: go-in\n\n\nYour answer:\n---\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:**\n\nImagine you have a small robot hoist that helps move boxes in a big warehouse. The warehouse has different areas, like a spot for loading boxes and another for storing them. The \"go-in\" action is like telling the robot to move from a loading area to a storage area.\n\nNow, why does the robot need certain conditions to be met before it can move? Here's a breakdown:\n\n1. **The robot must be at the loading area** (transit_area): This is pretty straightforward. If the robot isn't at the loading area, it can't start moving towards the storage area because it's simply not there to begin the task.\n\n2. **The loading area and storage area must be connected**: It's like making sure there's a clear path or a road between two places before you start driving. If there's no path, the robot can't move between these areas.\n\n3. **The storage area must be clear**: This ensures that there is space available for the robot to enter and place the boxes. It's similar to needing an empty parking spot to park your car.\n\nNow, what happens after the robot moves based on these conditions?\n\n- **The robot is no longer in the loading area**: Just like when you leave your house, you're not inside anymore. The robot has left the loading area, so we say it's no longer there.\n  \n- **The robot is now in the storage area**: Like arriving at a friend\u2019s house after leaving yours, the robot has moved and is now at the storage destination.\n\n- **The storage area is no longer clear**: Since the robot moves in with a box, the space it occupied is now taken. It's like the parking space being occupied once you park your car.\n\nIn summary, these conditions and results make sure the robot moves safely and efficiently from one place to another, without any surprises like arriving at a blocked or non-existent path, or finding no space to drop off the box. This careful planning helps keep everything in the warehouse running smoothly!\n                \n**Response:**\nParameters:\n1. ?h - hoist: [short description of the parameter]\n2. ?from - store_area: [short description of the parameter]\n3. ?to - transit_area: [short description of the parameter]\n\nPreconditions:\n```\n(and\n    (at ?h ?from)\n    (connected ?from ?to)\n)\n```\n\nEffects:\n```\n(and\n    (not (at ?h ?from))\n    (at ?h ?to)\n    (clear ?from)\n)\n```\n\n---\n", "type": "prompt"}
{"role": "user", "content": "Example 2\nAction Description: Involves a hoist moving from a store_area to a transit_area. Preconditions are the hoist being at the source store_area and the areas being connected. The effect is the hoist moving to the transit_area and the source store_area becoming clear.\n\nAction name: go-out\n\n\nYour answer:\n---\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:** Let's imagine we have a little robotic hoist in a big warehouse. Its job is to move from one specific area where it usually stores things, called a store area, to another area meant for transitioning goods, which we call a transit area. Now, this action of moving from the store area to the transit area is called \"go-out.\"\n\nTo make sure this action goes smoothly, there are a few things that need to be in place beforehand, which we call preconditions. First, our little hoist needs to be at the store area to start with\u2014if it\u2019s somewhere else, it can\u2019t start moving from the store area, right? That's like saying you need to be at home to start walking to the park. Secondly, the store area and the transit area need to be connected. If there's no path or door between them, our hoist can't get to the transit area. It's a bit like needing a road or a path to walk on.\n\nNow, when the hoist successfully moves to the transit area, we have some changes that occur, which are the effects of the action. The hoist is no longer in the store area (it has moved, after all), and it's now in the transit area. This is straightforward: the hoist was here, and now it\u2019s there. Additionally, the store area becomes 'clear' or empty because the hoist has moved out. This is like saying that once you leave your room, the room is empty.\n\nSo, in summary, the \"go-out\" action moves our hoist from one area to another and makes sure the starting area is free for other activities. This helps keep things organized and running smoothly in our warehouse scenario.\n                \n**Response:**\nParameters:\n1. ?h - hoist: [short description of the parameter]\n2. ?from - transit_area: [short description of the parameter]\n3. ?to - store_area: [short description of the parameter]\n\nPreconditions:\n```\n(and\n    (at ?h ?from)\n    (connected ?from ?to)\n    (clear ?to)\n)\n```\n\nEffects:\n```\n(and\n    (not (at ?h ?from))\n    (at ?h ?to)\n    (not (clear ?to))\n)\n```\n\n---\n", "type": "prompt"}
{"role": "user", "content": "Here are two examples from the barman domain for demonstrating the output format.\n        \nDomain information: In this domain there is a robot barman that manipulates drink dispensers, glasses and a shaker. The goal is to find a plan of the robots actions that serves a desired set of drinks. In this domain deletes of actions encode relevant knowledge given that robot hands can only grasp one object at a time and given that glasses need to be empty and clean to be filled.\n\nA list of available predicates\n1. (ontable ?c - container) ;; the container is on the table\n2. (holding ?h - hand ?c - container) ;; the hand is holding the container\n3. (handempty ?h - hand) ;; the hand is empty\n4. (empty ?c - container) ;; the container is empty\n5. (contains ?c - container ?b - beverage) ;; the container contains the beverage\n6. (clean ?c - container) ;; the container is clean\n7. (used ?c - container ?b - beverage) ;; the container is used for the beverage\n8. (dispenses ?d - dispenser ?i - ingredient) ;; the dispenser dispenses the ingredient\n9. (shaker-empty-level ?s - shaker ?l - level) ;; the empty level of the shaker\n10. (shaker-level ?s - shaker ?l - level) ;; the shaker currently is at the level\n11. (next ?l1 ?l2 - level) ;; l2 is the next level after l1\n12. (unshaked ?s - shaker) ;; the shaker is unshaked\n13. (shaked ?s - shaker) ;; the shaker is shaked\n14. (cocktail-part1 ?c - cocktail ?i - ingredient) ;; the ingredient is part of the cocktail\n15. (cocktail-part2 ?c - cocktail ?i - ingredient) ;; the ingredient is part of the cocktail\nExample 1\nAction Description: The robot fills an empty, clean shot glass with an ingredient from a dispenser.\n\nAction name: fill-shot\n\n\nYour answer:\n---\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:** Imagine our robot barman in a kitchen where it needs to prepare a drink using a shot glass. The robot has two hands and can only use one hand to hold an item at a time. Here\u2019s why the robot needs to follow certain steps, called preconditions, before it can fill the shot glass, which is the goal of the \"fill-shot\" action.\n\nFirstly, the robot must be holding the shot glass with one hand, which we call ?h1. This is important because the robot can only fill something it is holding. The precondition `(holding ?h1 ?s)` ensures that the robot has a good grip on the shot glass before proceeding.\n\nSecondly, the other hand, ?h2, must be empty (`handempty ?h2`). This is because if the hand is already holding something else, the robot wouldn\u2019t be able to operate the dispenser properly or manage other tasks like adding more ingredients if needed.\n\nThe next precondition is that the dispenser identified as ?d must be capable of dispensing the ingredient ?i, as noted in `(dispenses ?d ?i)`. This ensures that the robot is at the right dispenser for the ingredient it needs to fill the shot glass with.\n\nAlso, the shot glass itself must be empty (`empty ?s`) and clean (`clean ?s`) before anything is poured into it. This is common sense, right? You wouldn\u2019t want to drink from a dirty or already filled glass! This makes sure the drink is clean and tastes as expected.\n\nAfter all these conditions are met, the robot can go ahead and fill the shot glass. The effects of this action include a few changes:\n- The shot glass is no longer empty (`not (empty ?s)`), meaning it now contains the ingredient.\n- The shot glass now contains the specific ingredient (`contains ?s ?i`), which is just like saying the glass now has, say, gin in it.\n- The glass is no longer clean (`not (clean ?s)`) because it now has something in it.\n- Lastly, the shot glass is marked as used for that particular ingredient (`used ?s ?i`), which helps the robot remember what has been done with that glass.\n                \n**Response:**\nParameters:\n1. ?s - shot: [short description of the parameter]\n2. ?i - ingredient: [short description of the parameter]\n3. ?h1 - hand: [short description of the parameter]\n4. ?h2 - hand: [short description of the parameter]\n5. ?d - dispenser: [short description of the parameter]\n\nPreconditions:\n```\n(and\n    (holding ?h1 ?s)\n    (handempty ?h2)\n    (dispenses ?d ?i)\n    (empty ?s)\n    (clean ?s)\n)\n```\n\nEffects:\n```\n(and\n    (not (empty ?s))\n    (contains ?s ?i)\n    (not (clean ?s))\n    (used ?s ?i)\n)\n```\n\n---\n", "type": "prompt"}
{"role": "user", "content": "Example 2\nAction Description: The robot places a container it's holding back onto the table.\n\nAction name: leave\n\n\nYour answer:\n---\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:**\n\nImagine you're teaching a robot barman to place a glass back on the table. The robot needs clear steps to follow, just like a recipe in cooking. In this scenario, the robot's task, or \"action,\" is named \"leave.\" Here's why the specific steps (preconditions and effects) in the action make sense:\n\n1. **Precondition (holding ?h ?c):** Before the robot can place the container on the table, it must be holding it. This is just like needing to pick up a plate before you can move it to another part of the kitchen. In the robot's instructions, this is expressed as \"(holding ?h ?c),\" meaning the robot's hand (?h) is currently holding the container (?c). This step ensures the robot knows it has the container and is ready to put it down.\n\n2. **Effects of the Action:**\n   - **(not (holding ?h ?c)):** This tells the robot to stop holding the container. It's like saying, \"Okay, you can let go of the plate now.\"\n   - **(handempty ?h):** Once the robot lets go of the container, its hand is empty. This is similar to you dropping something off and having your hand free again.\n   - **(ontable ?c):** Finally, the container ends up back on the table. This part of the instruction confirms that the container should now be on the table, just like setting a cup down on a counter.\n\nThis action schema is crafted so that the robot successfully completes the task of putting the container down in a way that makes sense step-by-step. The preconditions make sure the robot is ready to perform the action (holding the container), and the effects detail exactly what happens after the action (container on table, hand empty). It's a simple, clear set of instructions for the robot to follow, ensuring it does exactly what we want without any confusion.\n                \n**Response:**\nParameters:\n1. ?h - hand: [short description of the parameter]\n2. ?c - container: [short description of the parameter]\n\nPreconditions:\n```\n(holding ?h ?c)\n```\n\nEffects:\n```\n(and\n    (not (holding ?h ?c))\n    (handempty ?h)\n    (ontable ?c)\n)\n```\n\n---\n", "type": "prompt"}
{"role": "user", "content": "Question: Here is the task.\nA natural language description of the domain\nDomain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape\n\nA list of available predicates\n1. (at-hero ?loc - cells) ;;  Hero's cell location\n2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location\n3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster\n4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap\n5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed\n6. (connected ?from ?to - cells) ;; connects cells\n7. (arm-free) ;; Hero's hand is free\n8. (holding ?s - swords) ;; Hero's holding a sword\n9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed\n\nAction Description: The hero can **move** to an adjacent room (connected by a corridor) that has not been destroyed (i.e., the hero has not already visited the room). When this action is executed, the hero gets into a location with a trap\n\nAction name: move-to-trap\n\n\nYour answer:\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:**\n\nIn the given dungeon domain, the hero needs to navigate through rooms connected by corridors to find an exit. The hero can encounter various objects in these rooms, such as monsters, traps, and swords. The action \"move-to-trap\" describes the hero moving into a room that contains a trap.\n\nFor this action to occur, certain conditions must be met. The hero must be at a certain location (?from), and there must be a connected location (?to) that has not been destroyed and contains a trap. The hero's movement is constrained by the corridors, so the rooms must be directly connected.\n\nOnce the hero moves to the new location with the trap, the effects of the action are straightforward: the hero's location changes from the previous room to the new room with the trap. The new room is now considered occupied by the hero, and the hero is no longer in the previous room.\n\n**Response:**\nParameters:\n1. ?from - cells: [The starting location of the hero]\n2. ?to - cells: [The target location with a trap]\n\nPreconditions:\n```\n(and\n    (at-hero ?from)\n    (connected ?from ?to)\n    (not (is-destroyed ?to))\n    (has-trap ?to)\n)\n```\n\nEffects:\n```\n(and\n    (not (at-hero ?from))\n    (at-hero ?to)\n)\n```\n\nNote: The provided preconditions and effects are based on the assumption that the hero simply moves to the room with the trap without any interaction with the trap itself. If the action implies that the trap is disarmed upon the hero's arrival, additional effects would be needed to represent this change in the state of the dungeon.", "type": "response", "action": "move-to-trap"}
{"role": "system", "content": "# CONTEXT #\nYou are a tool called PDDL Modeling Assistant. You are a technical experts in constructing Planning Domain Definition Language (PDDL) models via the natural language context.\n# OBJECTIVE #\n* Construct parameters, preconditions and effects based on the domain information, action description and the action name.\n* All variables in the preconditions and effects must be listed in the action's parameters. This restriction helps maintain the action's scope and prevents ambiguity in the planning process.\n* Do not use predicates that are not defined in the available predicates list to construct the preconditions and effects.\n* When the natural language description is ambiguous or certain predicate changes are implied, make reasonable assumptions based on common sense to fill up the implicit predicate in the PDDL action.\n# STYLE #\nFollow the writing style of technical experts. The output can be parsed by a machine, so it is important to follow the structured format.\n# TONE #\nBe precise and concise in constructing the PDDL action. The PDDL action should be clear and unambiguous.\n# AUDIENCE #\nYour audience is someone who is trying to learn how to construct PDDL actions from natural language descriptions.\n# RESPONSE #\nThe response should be in the following format:\n---\n**Explanation:** [Your explanation here]\n\n**Response:**\nParameters:\n1. ?x - [type]: [parameter description]\n2. ...\n\nPreconditions:\n```\n(and\n    ([predicate_1] ?x)\n)\n```\n\nEffects:\n```\n(and\n    (not ([predicate_2] ?x))\n    ([predicate_2] ?x)\n    ...\n)\n```\n---\n", "type": "prompt"}
{"role": "user", "content": "One or two examples from other domains for illustrating the input and output formats.\nHere are two examples from the storage domain for demonstrating the output format.\n        \nDomain information: Moving and storing crates of goods by hoists from containers to depots with spatial maps. This domain deals with the movement and storage of crates of goods using hoists. It involves different locations like containers and depots, and requires managing the spatial arrangement of crates and hoists in various areas. The actions primarily focus on the lifting, moving, and placement of crates by hoists, considering the spatial and availability constraints of the areas involved.\n\nA list of available predicates\n1. (clear ?s - store_area) ;; the store area is clear\n2. (crate_in ?c - crate ?p - place) ;; the crate is in the place\n3. (store_area_in ?s - store_area ?p - place) ;; the store area is in the place\n4. (available ?h - hoist) ;; the hoist is available\n5. (lifting ?h - hoist ?c - crate) ;; the hoist is lifting the crate\n6. (at ?h - hoist ?a - area) ;; the hoist is at the area\n7. (on ?c - crate ?s - store_area) ;; the crate is on the store area\n8. (connected ?a1 ?a2 - area) ;; the area a1 is connected to the area a2\nExample 1\nAction Description: This is the reverse of Go-out, where a hoist moves from a transit_area to a store_area. Preconditions include the hoist being at the transit_area, the areas being connected, and the destination store_area being clear. The effect is similar to Go-out but in reverse.\n\nAction name: go-in\n\n\nYour answer:\n---\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:**\n\nImagine you have a small robot hoist that helps move boxes in a big warehouse. The warehouse has different areas, like a spot for loading boxes and another for storing them. The \"go-in\" action is like telling the robot to move from a loading area to a storage area.\n\nNow, why does the robot need certain conditions to be met before it can move? Here's a breakdown:\n\n1. **The robot must be at the loading area** (transit_area): This is pretty straightforward. If the robot isn't at the loading area, it can't start moving towards the storage area because it's simply not there to begin the task.\n\n2. **The loading area and storage area must be connected**: It's like making sure there's a clear path or a road between two places before you start driving. If there's no path, the robot can't move between these areas.\n\n3. **The storage area must be clear**: This ensures that there is space available for the robot to enter and place the boxes. It's similar to needing an empty parking spot to park your car.\n\nNow, what happens after the robot moves based on these conditions?\n\n- **The robot is no longer in the loading area**: Just like when you leave your house, you're not inside anymore. The robot has left the loading area, so we say it's no longer there.\n  \n- **The robot is now in the storage area**: Like arriving at a friend\u2019s house after leaving yours, the robot has moved and is now at the storage destination.\n\n- **The storage area is no longer clear**: Since the robot moves in with a box, the space it occupied is now taken. It's like the parking space being occupied once you park your car.\n\nIn summary, these conditions and results make sure the robot moves safely and efficiently from one place to another, without any surprises like arriving at a blocked or non-existent path, or finding no space to drop off the box. This careful planning helps keep everything in the warehouse running smoothly!\n                \n**Response:**\nParameters:\n1. ?h - hoist: [short description of the parameter]\n2. ?from - store_area: [short description of the parameter]\n3. ?to - transit_area: [short description of the parameter]\n\nPreconditions:\n```\n(and\n    (at ?h ?from)\n    (connected ?from ?to)\n)\n```\n\nEffects:\n```\n(and\n    (not (at ?h ?from))\n    (at ?h ?to)\n    (clear ?from)\n)\n```\n\n---\n", "type": "prompt"}
{"role": "user", "content": "Example 2\nAction Description: Involves a hoist moving from a store_area to a transit_area. Preconditions are the hoist being at the source store_area and the areas being connected. The effect is the hoist moving to the transit_area and the source store_area becoming clear.\n\nAction name: go-out\n\n\nYour answer:\n---\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:** Let's imagine we have a little robotic hoist in a big warehouse. Its job is to move from one specific area where it usually stores things, called a store area, to another area meant for transitioning goods, which we call a transit area. Now, this action of moving from the store area to the transit area is called \"go-out.\"\n\nTo make sure this action goes smoothly, there are a few things that need to be in place beforehand, which we call preconditions. First, our little hoist needs to be at the store area to start with\u2014if it\u2019s somewhere else, it can\u2019t start moving from the store area, right? That's like saying you need to be at home to start walking to the park. Secondly, the store area and the transit area need to be connected. If there's no path or door between them, our hoist can't get to the transit area. It's a bit like needing a road or a path to walk on.\n\nNow, when the hoist successfully moves to the transit area, we have some changes that occur, which are the effects of the action. The hoist is no longer in the store area (it has moved, after all), and it's now in the transit area. This is straightforward: the hoist was here, and now it\u2019s there. Additionally, the store area becomes 'clear' or empty because the hoist has moved out. This is like saying that once you leave your room, the room is empty.\n\nSo, in summary, the \"go-out\" action moves our hoist from one area to another and makes sure the starting area is free for other activities. This helps keep things organized and running smoothly in our warehouse scenario.\n                \n**Response:**\nParameters:\n1. ?h - hoist: [short description of the parameter]\n2. ?from - transit_area: [short description of the parameter]\n3. ?to - store_area: [short description of the parameter]\n\nPreconditions:\n```\n(and\n    (at ?h ?from)\n    (connected ?from ?to)\n    (clear ?to)\n)\n```\n\nEffects:\n```\n(and\n    (not (at ?h ?from))\n    (at ?h ?to)\n    (not (clear ?to))\n)\n```\n\n---\n", "type": "prompt"}
{"role": "user", "content": "Here are two examples from the barman domain for demonstrating the output format.\n        \nDomain information: In this domain there is a robot barman that manipulates drink dispensers, glasses and a shaker. The goal is to find a plan of the robots actions that serves a desired set of drinks. In this domain deletes of actions encode relevant knowledge given that robot hands can only grasp one object at a time and given that glasses need to be empty and clean to be filled.\n\nA list of available predicates\n1. (ontable ?c - container) ;; the container is on the table\n2. (holding ?h - hand ?c - container) ;; the hand is holding the container\n3. (handempty ?h - hand) ;; the hand is empty\n4. (empty ?c - container) ;; the container is empty\n5. (contains ?c - container ?b - beverage) ;; the container contains the beverage\n6. (clean ?c - container) ;; the container is clean\n7. (used ?c - container ?b - beverage) ;; the container is used for the beverage\n8. (dispenses ?d - dispenser ?i - ingredient) ;; the dispenser dispenses the ingredient\n9. (shaker-empty-level ?s - shaker ?l - level) ;; the empty level of the shaker\n10. (shaker-level ?s - shaker ?l - level) ;; the shaker currently is at the level\n11. (next ?l1 ?l2 - level) ;; l2 is the next level after l1\n12. (unshaked ?s - shaker) ;; the shaker is unshaked\n13. (shaked ?s - shaker) ;; the shaker is shaked\n14. (cocktail-part1 ?c - cocktail ?i - ingredient) ;; the ingredient is part of the cocktail\n15. (cocktail-part2 ?c - cocktail ?i - ingredient) ;; the ingredient is part of the cocktail\nExample 1\nAction Description: The robot cleans a used shot glass.\n\nAction name: clean-shot\n\n\nYour answer:\n---\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:**\n\nLet's imagine our robot barman is preparing drinks in a bar where it must handle different glasses, like a shot glass. The robot needs to clean a used shot glass to make sure it's ready for the next drink. This situation leads us to create an action called `clean-shot` in the robot's planning.\n\nFirst, the robot needs to make sure it's holding the shot glass with one hand (`holding ?h1 ?s`). This makes sense because you need to hold the glass to clean it properly.\n\nNext, the robot needs to have its other hand free (`handempty ?h2`). This is important because the robot might need to use this hand to operate cleaning tools or to stabilize the glass while cleaning.\n\nThe glass itself must be empty (`empty ?s`) before it can be cleaned. Imagine trying to clean a glass while it's still full of liquid; it would be messy and ineffective!\n\nLastly, the glass should have been used (`used ?s ?b`), indicating it was previously filled with a drink and now requires cleaning. This precondition checks whether the glass actually needs cleaning.\n\nOnce all these conditions are met, the robot can proceed with the cleaning action. The effect of this action is twofold: the shot glass is no longer 'used' for the specific beverage (`not (used ?s ?b)`), and the glass becomes clean (`clean ?s`).\n\nBy setting these preconditions and effects, we ensure that the robot performs the cleaning task effectively and prepares the glass for future use, maintaining a smooth operation in the bar scenario.\n                \n**Response:**\nParameters:\n1. ?s - shot: [short description of the parameter]\n2. ?b - beverage: [short description of the parameter]\n3. ?h1 - hand: [short description of the parameter]\n4. ?h2 - hand: [short description of the parameter]\n\nPreconditions:\n```\n(and\n    (holding ?h1 ?s)\n    (handempty ?h2)\n    (empty ?s)\n    (used ?s ?b)\n)\n```\n\nEffects:\n```\n(and\n    (not (used ?s ?b))\n    (clean ?s)\n)\n```\n\n---\n", "type": "prompt"}
{"role": "user", "content": "Example 2\nAction Description: Similar to the previous action, but the shaker already contains ingredients and isn't clean.\n\nAction name: pour-shot-to-used-shaker\n\n\nYour answer:\n---\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:**\n\nImagine you have a robot bartender who's trying to make a drink using a shaker that already has some ingredients but hasn't been cleaned. To help the robot make the drink correctly, we need to give it a clear set of instructions. These instructions are what we call an action schema in PDDL, a planning language.\n\nLet's break down the action called \"pour-shot-to-used-shaker\":\n\n1. **Preconditions**: These are like the 'rules' or requirements that must be true before the robot can start the action.\n   - `(holding ?h1 ?s)`: The robot must be holding a shot glass (`?s`). Think of it like needing to hold a lemon before you can squeeze it.\n   - `(contains ?s ?i)`: The shot glass should have some ingredient (`?i`) in it. This is like saying the lemon needs to actually have juice.\n   - `(unshaked ?d)`: The shaker (`?d`) hasn't been shaken yet. It's like having a mixing bowl where the ingredients are still not mixed.\n   - `(shaker-level ?d ?l)`: The shaker is at a certain fullness level (`?l`), which tells us how much space is left or how full it is.\n   - `(next ?l ?l1)`: There's a next level (`?l1`) that the shaker will reach after pouring in the shot. It\u2019s similar to knowing that if you add one cup of flour to a half-full bowl, it will be three-quarters full.\n\n2. **Effects**: These are the changes that happen because of the action.\n   - `(not (contains ?s ?i))` and `(empty ?s)`: The shot glass will no longer contain the ingredient, and it will be empty. It\u2019s like pouring out all the lemon juice, leaving the lemon empty.\n   - `(contains ?d ?i)`: The shaker will now contain the ingredient from the shot glass. This is moving the lemon juice into the mixing bowl.\n   - `(not (shaker-level ?d ?l))` and `(shaker-level ?d ?l1)`: The shaker's level changes from the current level to the next. Just like adding the flour to the bowl changes its fullness.\n\nBy following these instructions, the robot knows exactly what needs to be true before starting (preconditions) and what changes to expect after it completes the action (effects). \n                \n**Response:**\nParameters:\n1. ?s - shot: [short description of the parameter]\n2. ?i - ingredient: [short description of the parameter]\n3. ?d - shaker: [short description of the parameter]\n4. ?h1 - hand: [short description of the parameter]\n5. ?l - level: [short description of the parameter]\n6. ?l1 - level: [short description of the parameter]\n\nPreconditions:\n```\n(and\n    (holding ?h1 ?s)\n    (contains ?s ?i)\n    (unshaked ?d)\n    (shaker-level ?d ?l)\n    (next ?l ?l1)\n)\n```\n\nEffects:\n```\n(and\n    (not (contains ?s ?i))\n    (contains ?d ?i)\n    (empty ?s)\n    (not (shaker-level ?d ?l))\n    (shaker-level ?d ?l1)\n)\n```\n\n---\n", "type": "prompt"}
{"role": "user", "content": "Question: Here is the task.\nA natural language description of the domain\nDomain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape\n\nA list of available predicates\n1. (at-hero ?loc - cells) ;;  Hero's cell location\n2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location\n3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster\n4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap\n5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed\n6. (connected ?from ?to - cells) ;; connects cells\n7. (arm-free) ;; Hero's hand is free\n8. (holding ?s - swords) ;; Hero's holding a sword\n9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed\n\nAction Description: **Destroy** the sword that the hero currently holds. However, this can have unpleasant effects if done in a room with a trap or a monster: it triggers the trap or invites the monster to eat the hero.\n\nAction name: destroy-sword\n\n\nYour answer:\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:**\n\nIn our dungeon domain, the hero has found a sword, which can be a valuable tool for defense or for dealing with obstacles like traps. However, there are times when destroying the sword might be necessary or strategic. The action \"destroy-sword\" is designed to model this behavior.\n\nBefore the hero can destroy the sword, a few things need to be true:\n\n1. The hero must be holding the sword (`holding ?s`). You can't destroy a sword if you're not holding it.\n2. The hero's arm must be free (`arm-free`). This might seem redundant since we already have the `holding` predicate, but it could be useful for more complex scenarios where the hero has multiple items or needs to be in a specific state to perform actions.\n\nThe effects of destroying the sword are straightforward:\n\n1. The sword is no longer in the hero's hand (`not (holding ?s)`), as it has been destroyed.\n2. The specific sword that was held is now destroyed (`is-destroyed ?s`).\n\nHowever, there are potential risks involved with destroying the sword:\n\n- If the hero is in a room with a monster (`has-monster ?loc`), destroying the sword might provoke the monster.\n- If the hero is in a room with a trap (`has-trap ?loc`), destroying the sword might trigger the trap.\n\nFor the purpose of this action, we will not explicitly include these risks in the preconditions or effects, as they depend on the hero's location and the presence of a monster or trap. Instead, this action will simply describe the act of destroying the sword and assume that the hero is aware of the risks and is acting accordingly.\n\n**Response:**\nParameters:\n1. ?s - swords: [The sword that the hero is going to destroy]\n\nPreconditions:\n```\n(and\n    (holding ?s)\n    (arm-free)\n)\n```\n\nEffects:\n```\n(and\n    (not (holding ?s))\n    (is-destroyed ?s)\n)\n```\n\n---", "type": "response", "action": "destroy-sword"}
{"role": "system", "content": "# CONTEXT #\nYou are a tool called PDDL Modeling Assistant. You are a technical experts in constructing Planning Domain Definition Language (PDDL) models via the natural language context.\n# OBJECTIVE #\n* Construct parameters, preconditions and effects based on the domain information, action description and the action name.\n* All variables in the preconditions and effects must be listed in the action's parameters. This restriction helps maintain the action's scope and prevents ambiguity in the planning process.\n* Do not use predicates that are not defined in the available predicates list to construct the preconditions and effects.\n* When the natural language description is ambiguous or certain predicate changes are implied, make reasonable assumptions based on common sense to fill up the implicit predicate in the PDDL action.\n# STYLE #\nFollow the writing style of technical experts. The output can be parsed by a machine, so it is important to follow the structured format.\n# TONE #\nBe precise and concise in constructing the PDDL action. The PDDL action should be clear and unambiguous.\n# AUDIENCE #\nYour audience is someone who is trying to learn how to construct PDDL actions from natural language descriptions.\n# RESPONSE #\nThe response should be in the following format:\n---\n**Explanation:** [Your explanation here]\n\n**Response:**\nParameters:\n1. ?x - [type]: [parameter description]\n2. ...\n\nPreconditions:\n```\n(and\n    ([predicate_1] ?x)\n)\n```\n\nEffects:\n```\n(and\n    (not ([predicate_2] ?x))\n    ([predicate_2] ?x)\n    ...\n)\n```\n---\n", "type": "prompt"}
{"role": "user", "content": "One or two examples from other domains for illustrating the input and output formats.\nHere are two examples from the storage domain for demonstrating the output format.\n        \nDomain information: Moving and storing crates of goods by hoists from containers to depots with spatial maps. This domain deals with the movement and storage of crates of goods using hoists. It involves different locations like containers and depots, and requires managing the spatial arrangement of crates and hoists in various areas. The actions primarily focus on the lifting, moving, and placement of crates by hoists, considering the spatial and availability constraints of the areas involved.\n\nA list of available predicates\n1. (clear ?s - store_area) ;; the store area is clear\n2. (crate_in ?c - crate ?p - place) ;; the crate is in the place\n3. (store_area_in ?s - store_area ?p - place) ;; the store area is in the place\n4. (available ?h - hoist) ;; the hoist is available\n5. (lifting ?h - hoist ?c - crate) ;; the hoist is lifting the crate\n6. (at ?h - hoist ?a - area) ;; the hoist is at the area\n7. (on ?c - crate ?s - store_area) ;; the crate is on the store area\n8. (connected ?a1 ?a2 - area) ;; the area a1 is connected to the area a2\nExample 1\nAction Description: Moves a hoist from one store_area to another. Preconditions include the hoist being at the source store_area, the destination store_area being clear, and the areas being connected. The effect is the hoist moving to the destination and the change in clarity status of both store areas.\n\nAction name: move\n\n\nYour answer:\n---\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:**\n\nLet's imagine a scenario where you need to move a toy truck from one corner of a room to another. This toy truck represents the hoist, and the corners of the room are like different storage areas in our description.\n\n1. **Preconditions:**\n   - **Hoist is at the source area (at ?h ?from):** This condition makes sure that the hoist is actually at the starting point (like making sure your toy truck is really in the corner where you want to start moving it from). This is necessary because you can't move something from a place it isn't already at.\n   - **Destination area is clear (clear ?to):** This is like making sure that the corner you want to move your toy truck to doesn\u2019t have any obstacles or other toys in the way. The space needs to be clear so the hoist can move in without any issues.\n   - **Areas are connected (connected ?from ?to):** This checks if there is a direct path from the starting point to the destination, similar to making sure there's a clear path on the floor between the two corners of the room for the toy truck to travel without hitting a wall or furniture.\n\n2. **Effects:**\n   - **Hoist moves to the destination (at ?h ?to):** This is like saying your toy truck is now in the new corner of the room.\n   - **Hoist is no longer at the source (not (at ?h ?from)):** Just like your toy truck can't be in two places at once, when the hoist moves to the new area, it's no longer in the original area.\n   - **Destination area is no longer clear (not (clear ?to)):** Now that the hoist (or your toy truck) is in the new corner, that corner isn't empty anymore.\n   - **Source area becomes clear (clear ?from):** Since the hoist has moved away from the original area, that area is now free of obstacles or the hoist itself.\n\nSo, in simple terms, this action is like moving a toy from one clear, connected corner of the room to another. Before you move it, you need to check that it\u2019s starting in the right place, that there\u2019s no blockage where it\u2019s going, and that it can directly reach there. Once moved, the toy truck\u2019s old spot becomes empty, and its new spot is now occupied by it.\n                \n**Response:**\nParameters:\n1. ?h - hoist: [short description of the parameter]\n2. ?from - store_area: [short description of the parameter]\n3. ?to - store_area: [short description of the parameter]\n\nPreconditions:\n```\n(and\n    (at ?h ?from)\n    (clear ?to)\n    (connected ?from ?to)\n)\n```\n\nEffects:\n```\n(and\n    (not (at ?h ?from))\n    (at ?h ?to)\n    (not (clear ?to))\n    (clear ?from)\n)\n```\n\n---\n", "type": "prompt"}
{"role": "user", "content": "Example 2\nAction Description: This is the reverse of Go-out, where a hoist moves from a transit_area to a store_area. Preconditions include the hoist being at the transit_area, the areas being connected, and the destination store_area being clear. The effect is similar to Go-out but in reverse.\n\nAction name: go-in\n\n\nYour answer:\n---\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:**\n\nImagine you have a small robot hoist that helps move boxes in a big warehouse. The warehouse has different areas, like a spot for loading boxes and another for storing them. The \"go-in\" action is like telling the robot to move from a loading area to a storage area.\n\nNow, why does the robot need certain conditions to be met before it can move? Here's a breakdown:\n\n1. **The robot must be at the loading area** (transit_area): This is pretty straightforward. If the robot isn't at the loading area, it can't start moving towards the storage area because it's simply not there to begin the task.\n\n2. **The loading area and storage area must be connected**: It's like making sure there's a clear path or a road between two places before you start driving. If there's no path, the robot can't move between these areas.\n\n3. **The storage area must be clear**: This ensures that there is space available for the robot to enter and place the boxes. It's similar to needing an empty parking spot to park your car.\n\nNow, what happens after the robot moves based on these conditions?\n\n- **The robot is no longer in the loading area**: Just like when you leave your house, you're not inside anymore. The robot has left the loading area, so we say it's no longer there.\n  \n- **The robot is now in the storage area**: Like arriving at a friend\u2019s house after leaving yours, the robot has moved and is now at the storage destination.\n\n- **The storage area is no longer clear**: Since the robot moves in with a box, the space it occupied is now taken. It's like the parking space being occupied once you park your car.\n\nIn summary, these conditions and results make sure the robot moves safely and efficiently from one place to another, without any surprises like arriving at a blocked or non-existent path, or finding no space to drop off the box. This careful planning helps keep everything in the warehouse running smoothly!\n                \n**Response:**\nParameters:\n1. ?h - hoist: [short description of the parameter]\n2. ?from - transit_area: [short description of the parameter]\n3. ?to - store_area: [short description of the parameter]\n\nPreconditions:\n```\n(and\n    (at ?h ?from)\n    (connected ?from ?to)\n    (clear ?to)\n)\n```\n\nEffects:\n```\n(and\n    (not (at ?h ?from))\n    (at ?h ?to)\n    (not (clear ?to))\n)\n```\n\n---\n", "type": "prompt"}
{"role": "user", "content": "Here are two examples from the barman domain for demonstrating the output format.\n        \nDomain information: In this domain there is a robot barman that manipulates drink dispensers, glasses and a shaker. The goal is to find a plan of the robots actions that serves a desired set of drinks. In this domain deletes of actions encode relevant knowledge given that robot hands can only grasp one object at a time and given that glasses need to be empty and clean to be filled.\n\nA list of available predicates\n1. (ontable ?c - container) ;; the container is on the table\n2. (holding ?h - hand ?c - container) ;; the hand is holding the container\n3. (handempty ?h - hand) ;; the hand is empty\n4. (empty ?c - container) ;; the container is empty\n5. (contains ?c - container ?b - beverage) ;; the container contains the beverage\n6. (clean ?c - container) ;; the container is clean\n7. (used ?c - container ?b - beverage) ;; the container is used for the beverage\n8. (dispenses ?d - dispenser ?i - ingredient) ;; the dispenser dispenses the ingredient\n9. (shaker-empty-level ?s - shaker ?l - level) ;; the empty level of the shaker\n10. (shaker-level ?s - shaker ?l - level) ;; the shaker currently is at the level\n11. (next ?l1 ?l2 - level) ;; l2 is the next level after l1\n12. (unshaked ?s - shaker) ;; the shaker is unshaked\n13. (shaked ?s - shaker) ;; the shaker is shaked\n14. (cocktail-part1 ?c - cocktail ?i - ingredient) ;; the ingredient is part of the cocktail\n15. (cocktail-part2 ?c - cocktail ?i - ingredient) ;; the ingredient is part of the cocktail\nExample 1\nAction Description: The robot cleans an empty shaker.\n\nAction name: clean-shaker\n\n\nYour answer:\n---\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:**\nImagine a robot barman at work in a busy cocktail bar. The robot is tasked with making drinks using various tools, including a shaker that needs to be clean before it can be used to mix ingredients. Let's consider why the robot would need specific conditions to be met before it can clean the shaker, as described in the action schema called \"clean-shaker.\"\n\n1. **Why the shaker needs to be held and the other hand empty**: The action requires the robot to hold the shaker with one hand (`holding ?h1 ?s`) and have the other hand empty (`handempty ?h2`). This makes sense because the robot can only use one hand to perform the cleaning while needing the other hand free, possibly to manipulate cleaning tools or to stabilize the shaker.\n\n2. **Why the shaker must be empty**: It's also specified that the shaker needs to be empty before it can be cleaned (`empty ?s`). This is crucial because cleaning a shaker that still has something in it would not only be inefficient but also could cause a mess and waste ingredients. The robot needs to ensure the shaker is empty to effectively clean it for the next drink preparation.\n\n3. **The effect of the action**: Once these conditions are met, the effect of the robot's action is that the shaker becomes clean (`clean ?s`). This state change is vital because a clean shaker ensures that the drinks made are fresh and uncontaminated by previous ingredients.\n\nBy setting these preconditions, the action schema makes sure that the robot operates logically and efficiently, avoiding potential errors like trying to clean a shaker that is not yet empty or held properly. This careful planning helps the robot succeed in its role as a barman, ensuring happy customers with well-made cocktails.\n\nIn simpler terms, it's like making sure you've got all your ingredients ready and your cooking space organized before you start making a meal. This preparation helps everything go smoothly, just as the robot's preconditions ensure it can clean the shaker effectively.\n                \n**Response:**\nParameters:\n1. ?h - hand: [short description of the parameter]\n2. ?c - container: [short description of the parameter]\n\nPreconditions:\n```\n(and\n    (ontable ?c)\n    (handempty ?h)\n)\n```\n\nEffects:\n```\n(and\n    (not (ontable ?c))\n    (not (handempty ?h))\n    (holding ?h ?c)\n)\n```\n\n---\n", "type": "prompt"}
{"role": "user", "content": "Example 2\nAction Description: The robot uses a hand to pick up a container from the table.\n\nAction name: grasp\n\n\nYour answer:\n---\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:**\nImagine a robot bartender at a busy party, tasked with making a variety of drinks. This robot, like a human bartender, has hands that it uses to pick up things like glasses or shakers.\n\nIn the scenario we're discussing, the action we're focusing on is called \"grasp,\" where the robot uses its hand to pick up a container from a table. Let's break down why certain conditions need to be met for this action to happen successfully and what happens after the robot performs this action.\n\n**Why the preconditions are necessary:**\n1. **The container must be on the table (ontable ?c):** This makes sense because if the container isn't on the table, the robot wouldn't know where to find it. It needs to be in a predictable location that the robot can access.\n2. **The robot's hand must be empty (handempty ?h):** Before the robot can pick up something new, its hand needs to be empty. Just like you can't pick up a cup of coffee if you're already holding an apple in your hand, the robot needs a free hand to pick up a new container.\n\n**What happens after the action (effects):**\n1. **The container is no longer on the table (not (ontable ?c)):** Once the robot picks up the container, it's no longer sitting on the table. It's in the robot's hand.\n2. **The robot's hand is no longer empty (not (handempty ?h)):** With the container in its hand, the hand isn't empty anymore.\n3. **The robot's hand is holding the container (holding ?h ?c):** This describes the new status of the robot\u2019s hand\u2014it is actively holding onto the container.\n\nSo, in this action, we see the robot checking that the container is where it's supposed to be and making sure its hand is ready to pick something up. Once those conditions are met, the robot can safely pick up the container, changing both the status of the container and the status of its hand. This is very practical and logical, ensuring that the robot operates efficiently and correctly in its environment of serving drinks at the party.\n\nThis action schema helps in planning out the robot's movements in a logical sequence, ensuring it always knows what to do next, based on simple checks and changes (preconditions and effects).\n                \n**Response:**\nParameters:\n1. ?h1 - hand: [short description of the parameter]\n2. ?h2 - hand: [short description of the parameter]\n3. ?s - shaker: [short description of the parameter]\n\nPreconditions:\n```\n(and\n    (holding ?h1 ?s)\n    (handempty ?h2)\n    (empty ?s)\n)\n```\n\nEffects:\n```\n(and\n    (clean ?s)\n)\n```\n\n---\n", "type": "prompt"}
{"role": "user", "content": "Question: Here is the task.\nA natural language description of the domain\nDomain information: Help the hero to get out of dungeon! A hero woke up in a dungeon full of monsters and traps (perhaps the party last night went wrong...) and needs your help to get out.  Here are basic facts for the dungeon domain: - The dungeon contains rooms that are **connected** by corridors (dungeon can thus be represented by undirected graph) - each room can be **empty**, or can have a **monster** in it, or can have a **trap** in it, or can have a **sword** in it - one of the empty rooms is the **goal**: it has an exit, so the hero can escape\n\nA list of available predicates\n1. (at-hero ?loc - cells) ;;  Hero's cell location\n2. (at-sword ?s - swords ?loc - cells) ;; Sword cell location\n3. (has-monster ?loc - cells) ;; Indicates if a cell location has a monster\n4. (has-trap ?loc - cells) ;; Indicates if a cell location has a trap\n5. (is-destroyed ?obj) ;; Indicates if a chell or sword has been destroyed\n6. (connected ?from ?to - cells) ;; connects cells\n7. (arm-free) ;; Hero's hand is free\n8. (holding ?s - swords) ;; Hero's holding a sword\n9. (trap-disarmed ?loc) ;; It becomes true when a trap is disarmed\n\nAction Description: The hero can **move** to an adjacent room (connected by a corridor) that has not been destroyed (i.e., the hero has not already visited the room). When this action is executed, the original cell get destroyed.\n\nAction name: move\n\n\nYour answer:\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:**\nIn the given dungeon domain, the hero needs to navigate through a series of connected rooms, avoiding monsters and traps, and possibly picking up a sword to aid in their escape. The action \"move\" is a fundamental part of the hero's strategy, allowing them to progress from one room to another.\n\nFor the \"move\" action, certain conditions must be met to ensure the hero can successfully move to an adjacent room:\n\n1. **The hero must be at a specific location (at-hero ?from):** This is the starting point for the hero's movement. The hero can only move from the location they are currently at.\n\n2. **The target room must be connected to the hero's current location (connected ?from ?to):** The hero can only move to adjacent rooms, which are connected by corridors. This ensures the hero does not attempt to move through walls or non-existent paths.\n\n3. **The target room must not be destroyed (not (is-destroyed ?to)):** The hero should not move to a room that has already been visited or is no longer accessible. This could be due to the room being collapsed or blocked off after a previous action.\n\nOnce these preconditions are satisfied, the hero can execute the \"move\" action, which has the following effects:\n\n1. **The hero is no longer at the original location (not (at-hero ?from)):** After moving, the hero's location changes, and they are no longer in the starting room.\n\n2. **The hero is now at the new location (at-hero ?to):** The hero successfully moves to the target room, which becomes their new location.\n\n3. **The original location is destroyed (is-destroyed ?from):** As a result of the hero moving, the original room is considered destroyed or no longer usable, possibly to prevent the hero from backtracking or to simulate the hero's progression through the dungeon.\n\nThis action schema ensures that the hero moves logically through the dungeon, always progressing forward and never revisiting or attempting to move to an invalid location.\n\n**Response:**\nParameters:\n1. ?from - cells: [The starting cell location of the hero]\n2. ?to - cells: [The target cell location the hero wants to move to]\n\nPreconditions:\n```\n(and\n    (at-hero ?from)\n    (connected ?from ?to)\n    (not (is-destroyed ?to))\n)\n```\n\nEffects:\n```\n(and\n    (not (at-hero ?from))\n    (at-hero ?to)\n    (is-destroyed ?from)\n)\n```", "type": "response", "action": "move"}
