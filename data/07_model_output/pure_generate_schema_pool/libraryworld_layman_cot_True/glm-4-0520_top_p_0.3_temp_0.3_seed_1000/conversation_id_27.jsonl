{"role": "system", "content": "# CONTEXT #\nYou are a tool called PDDL Modeling Assistant. You are a technical experts in constructing Planning Domain Definition Language (PDDL) models via the natural language context.\n# OBJECTIVE #\n* Construct parameters, preconditions and effects based on the domain information, action description and the action name.\n* All variables in the preconditions and effects must be listed in the action's parameters. This restriction helps maintain the action's scope and prevents ambiguity in the planning process.\n* Do not use predicates that are not defined in the available predicates list to construct the preconditions and effects.\n* When the natural language description is ambiguous or certain predicate changes are implied, make reasonable assumptions based on common sense to fill up the implicit predicate in the PDDL action.\n# STYLE #\nFollow the writing style of technical experts. The output can be parsed by a machine, so it is important to follow the structured format.\n# TONE #\nBe precise and concise in constructing the PDDL action. The PDDL action should be clear and unambiguous.\n# AUDIENCE #\nYour audience is someone who is trying to learn how to construct PDDL actions from natural language descriptions.\n# RESPONSE #\nThe response should be in the following format:\n---\n**Explanation:** [Your explanation here]\n\n**Response:**\nParameters:\n1. ?x - [type]: [parameter description]\n2. ...\n\nPreconditions:\n```\n(and\n    ([predicate_1] ?x)\n)\n```\n\nEffects:\n```\n(and\n    (not ([predicate_2] ?x))\n    ([predicate_2] ?x)\n    ...\n)\n```\n---\n", "type": "prompt"}
{"role": "user", "content": "One or two examples from other domains for illustrating the input and output formats.\nHere are two examples from the newspapers domain for demonstrating the output format.\n        \nDomain information: This domain is structured to model a simple newspaper delivery system, where the main tasks involve picking up newspapers from a home base, moving to different locations, and delivering the papers to locations that require them.\n\nA list of available predicates\n1. (at ?loc - loc) ;; the agent is at loc location\n2. (is_Home_Base ?loc - loc) ;; the location is the home base\n3. (satisfied ?loc - loc) ;; the location has received the newspaper\n4. (wants_Paper ?loc - loc) ;; the location needs a newspaper\n5. (unpacked ?paper - paper) ;; the paper is unpacked\n6. (carrying ?paper - paper) ;; the agent is carrying the paper\nExample 1\nAction Description: The house at loc_house1 wants a newspaper.\nRoboDelivery performs the deliver action to give paper1 to the house.\n\n    Preconditions: RoboDelivery is at loc_house1, the house wants a newspaper, and RoboDelivery is carrying paper1.\n    Effects: RoboDelivery is no longer carrying paper1, the house at loc_house1 no longer wants a newspaper, and the house at loc_house1 is satisfied.\n\nAction name: deliver\n\n\nYour answer:\n---\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:**\n\nLet's think of the action of delivering a newspaper like a simple task you might do every day, like delivering a letter to your neighbor. The description given helps us understand how a delivery person can complete their job of delivering newspapers effectively in a systematic way, which is where the PDDL (a planning language) comes into play.\n\n1. **Preconditions: Why are they necessary?**\n   - The delivery person must be at the right location (`at ?loc`): Just like if you were to deliver a letter to your neighbor, you need to be at their house, not yours! This ensures the newspaper is delivered to the correct place.\n   - The delivery location wants a newspaper (`wants_Paper ?loc`): This makes sure that the delivery person is not just going around giving out newspapers to places that don't need them. It\u2019s like checking if your neighbor actually needs the letter before you walk over.\n   - The delivery person must be carrying the newspaper (`carrying ?paper`): This is pretty straightforward\u2014just as you can't deliver a letter that you don't have in your hand, the delivery person needs to have the newspaper with them to deliver it.\n\n2. **Effects: How do they follow from the preconditions?**\n   - The newspaper is no longer being carried by the delivery person (`not (carrying ?paper)`): Once the delivery is done, just like handing over a letter, the newspaper is no longer with the delivery person.\n   - The delivery location no longer wants the newspaper (`not (wants_Paper ?loc)`): The need for the newspaper has been met, similar to how your neighbor no longer waits for the letter once you've delivered it.\n   - The location is satisfied (`satisfied ?loc`): This indicates that the delivery was successful. The location got what it was waiting for, just like your neighbor feeling happy receiving the letter.\n\nIn summary, the action of delivering a newspaper in this PDDL model ensures that everything needed to complete a successful delivery is in place before the delivery starts, and once done, it updates the state to reflect the successful completion of the task. It's about making sure you have what you need, going where you need to go, and ensuring the task is completed as expected!\n                \n**Response:**\nParameters:\n1. ?paper - paper: [short description of the parameter]\n2. ?loc - loc: [short description of the parameter]\n\nPreconditions:\n```\n(and\n    (at ?loc)\n    (wants_Paper ?loc)\n    (carrying ?paper)\n)\n```\n\nEffects:\n```\n(and\n    (not (carrying ?paper))\n    (not (wants_Paper ?loc))\n    (satisfied ?loc)\n)\n```\n\n---\n", "type": "prompt"}
{"role": "user", "content": "Example 2\nAction Description: RoboDelivery wants to deliver the newspaper to a house (loc_house1).\nRoboDelivery performs the move action to go from loc_home to loc_house1.\n\n    Preconditions: RoboDelivery is at loc_home.\n    Effects: RoboDelivery is no longer at loc_home and is now at loc_house1.\n\nAction name: move\n\n\nYour answer:\n---\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:**\n\nImagine you're playing a game where you need to deliver newspapers to different houses in your neighborhood. Each turn in the game allows you to move from one house to another. The action of moving from one house to another in the game can be compared to an action in our newspaper delivery model.\n\nIn the scenario, the action is called \"move,\" and it involves a delivery person moving from a starting location to a destination. Let's break down why this action is modeled the way it is:\n\n1. **Parameters**: These are like placeholders or markers in our game. In the \"move\" action, the parameters are the Starting Location and the Destination. It's just like saying, \"I'm starting from my house and going to my friend's house.\"\n\n2. **Preconditions**: Before you can move from one house to another, you must be at the house you're starting from. It wouldn't make sense to say, \"I'm going from my house to my friend's house\" if you're actually at the grocery store, right? So, the precondition that the delivery person is at the starting location is crucial to make the action logical.\n\n3. **Effects**: After you move from your house to your friend's house, you are no longer at your house; you are now at your friend's house. That\u2019s what happens in our model, too. The effect of the move action is that the delivery person is no longer at the starting location and is now at the destination. This change is captured in the model by removing the state of being at the starting location (`not (at ?from)`) and adding the state of being at the destination (`(at ?to)`).\n\nSo, this action schema perfectly represents the simple yet essential task of moving from one point to another, ensuring that the game's rules are followed: you start from where you say you are, and you end up where you want to go. It's just like moving pieces on a board game, ensuring each move is valid based on where you are and where you want to be.\n                \n**Response:**\nParameters:\n1. ?from - loc: [short description of the parameter]\n2. ?to - loc: [short description of the parameter]\n\nPreconditions:\n```\n(at ?from)\n```\n\nEffects:\n```\n(and\n    (not (at ?from))\n    (at ?to)\n)\n```\n\n---\n", "type": "prompt"}
{"role": "user", "content": "Here are two examples from the doors domain for demonstrating the output format.\n        \nDomain information: This domain is structured to allow navigation and interaction within a space comprising rooms, locations, and doors that can be unlocked with keys. The actions and predicates support movement between locations and the unlocking of rooms.\n\nA list of available predicates\n1. (at ?loc - location) ;; agent is at loc location\n2. (unlocked ?room - room) ;; the room is unlocked\n3. (loc_in_room ?loc - location ?room - room) ;; the location is in the room\n4. (key_at ?key - key ?loc - location) ;; the key is at loc location\n5. (key_for_room ?key - key ?room - room) ;; the key is for the room\nExample 1\nAction Description: The action is like embarking on a small journey from one place to another within a confined space. Imagine you're in a large house with multiple rooms. You're currently in one location, let's say the living room (your starting location). You decide to move to another spot, maybe the kitchen (your ending location). However, there's a catch. The kitchen is behind a door that needs to be unlocked (ending room). So, this action can only happen if the kitchen door is already unlocked. Once you move, you're no longer in the living room but now standing in the kitchen, contemplating what to cook!\n\nAction name: move_to\n\n\nYour answer:\n---\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:**\nImagine you're playing a game where you need to explore different rooms by finding keys that unlock them, much like a treasure hunt. The action called \"pick\" in this game allows you to pick up a key from a specific location so you can unlock a room.\n\nHere\u2019s why the action schema matches your description:\n1. **Parameters**: You have parameters like `?loc` (where the key is found), `?key` (the key you find), and `?room` (the room that the key opens). These parameters help define what the action involves\u2014picking up a key at a location that unlocks a specific room.\n\n2. **Preconditions**:\n   - `(at ?loc)`: This means that you, the player, must be at the same location as the key. It ensures you are in the right place to pick it up, like being in the hallway where the key is on the table.\n   - `(key_at ?key ?loc)`: This ensures that the key you need is indeed at your location. It checks that the key is actually there before you can pick it up.\n   - `(key_for_room ?key ?room)`: This confirms that the key you are about to pick up is the correct one for unlocking the specific room you want to enter, like the attic.\n\n3. **Effects**:\n   - `(not (key_at ?key ?loc))`: Once you pick up the key, it's no longer lying there at the location. This effect updates the game state to show the key has been moved\u2014it's now with you.\n   - `(unlocked ?room)`: The action of picking up the key leads to the room being unlocked. Now, you can enter the room you wanted, such as the attic, which was previously locked.\n\nBy combining these elements, the action of \"pick\" logically lets you find a key and use it to access new areas in the game, opening up more adventures\u2014just like in the story of finding a key to unlock the attic.\n                \n**Response:**\nParameters:\n1. ?sloc - location: [short description of the parameter]\n2. ?eloc - location: [short description of the parameter]\n3. ?eroom - room: [short description of the parameter]\n\nPreconditions:\n```\n(and\n    (at ?sloc)\n    (unlocked ?eroom)\n    (loc_in_room ?eloc ?eroom)\n)\n```\n\nEffects:\n```\n(and\n    (not (at ?sloc))\n    (at ?eloc)\n)\n```\n\n---\n", "type": "prompt"}
{"role": "user", "content": "Example 2\nAction Description: This one is akin to a classic scene in adventure games where you find a key and use it to unlock new areas. Picture yourself in the same house. You find a key lying on a table in the hallway (the key's location). This isn't just any key; it's special because it opens the door to the mysterious attic (the room the key unlocks). By picking up this key, you perform the action. The moment you have the key in your hand, the attic is no longer inaccessible. It's as if the key magically signals the attic door to unlock, waiting for you to discover its secrets.\n\nAction name: pick\n\n\nYour answer:\n---\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:**\nImagine you're playing a game where you're exploring different rooms and finding keys that can unlock new areas. The action called \"pick\" in this game lets you pick up a key that's in the same location as you, which then unlocks a room that the key is meant for. Let's break down how this works in simple terms.\n\nFirst, you need to be in the same location as the key. That's like being in a hallway where you see a key on a table. The action requires that you are right there with the key, which makes sense, right? You can't pick up a key from another room!\n\nNext, the key you find has to be the right one for a specific room. It\u2019s like having a label on the key saying \"this key is for the attic,\" ensuring that you don't try to use a kitchen key to open the attic.\n\nNow, when you pick up the key, the game checks two important things before letting you pick it up:\n1. **You are at the key's location**: You have to be right there where the key is.\n2. **The key is for the room you want to unlock**: This makes sure the key matches the room you\u2019re trying to access.\n\nOnce these conditions are met, and you pick up the key, two things happen:\n1. **The key is no longer at its original location**: Just like in real life, once you pick something up, it's not there anymore.\n2. **The room unlocks**: It\u2019s like the key told the door, \"Hey, open up!\" and now you can go into the attic and explore.\n\nThis action, \"pick,\" neatly connects your action of picking up the key with the effect of unlocking a new room, making the game or the story you're in feel real and connected. The conditions you meet before picking up the key ensure that everything makes sense and flows logically, just like in real life when you need the right key to open a specific door.\n                \n**Response:**\nParameters:\n1. ?loc - location: [short description of the parameter]\n2. ?key - key: [short description of the parameter]\n3. ?room - room: [short description of the parameter]\n\nPreconditions:\n```\n(and\n    (at ?loc)\n    (key_at ?key ?loc)\n    (key_for_room ?key ?room)\n)\n```\n\nEffects:\n```\n(and\n    (not (key_at ?key ?loc))\n    (unlocked ?room)\n)\n```\n\n---\n", "type": "prompt"}
{"role": "user", "content": "Question: Here is the task.\nA natural language description of the domain\nDomain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.\n\nA list of available predicates\n1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf\n2. (on-table ?x - book) ;; ?x is on the table\n3. (accessible ?x - book) ;; ?x is accessible (not covered)\n4. (hands-free) ;; The hands of the librarian are free\n5. (holding ?x - book) ;; The librarian is holding ?x\n6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat\n7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty\n8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full\n9. (book-request ?book - book) ;; There is a request for book ?book\n10. (return-due ?book - book) ;; Book ?book is due for return\n11. (checked-out ?book - book) ;; Book ?book is checked out\n\nAction Description: Pick up a book from the table if it's not covered and your hands are empty.\n\nAction name: take-from-table\n\n\nYour answer:\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:**\nIn the library domain, the action \"take-from-table\" represents the librarian's task of picking up a book from a table. This action is subject to certain conditions to make it logically consistent within the library's operations. The natural language description specifies that a book can only be picked up if it's not covered (i.e., it's accessible) and if the librarian's hands are free. After performing this action, the state of the library changes because the book is no longer on the table and is instead being held by the librarian.\n\nLet's analyze the preconditions and effects:\n- **Preconditions**:\n  - `(on-table ?book)`: This ensures that the book to be picked up is indeed on the table.\n  - `(accessible ?book)`: This checks that the book is not covered by any other object and is therefore reachable.\n  - `(hands-free)`: This ensures that the librarian is not already holding another book, which would make it impossible to pick up another one.\n\n- **Effects**:\n  - `(not (on-table ?book))`: Once the book is picked up, it is no longer on the table.\n  - `(holding ?book)`: After the action, the librarian is now holding the book.\n\nThe parameters of the action include the book to be picked up, which is the primary object of the action.\n\n**Response:**\nParameters:\n1. ?book - book: [The book to be picked up from the table]\n\nPreconditions:\n```\n(and\n    (on-table ?book)\n    (accessible ?book)\n    (hands-free)\n)\n```\n\nEffects:\n```\n(and\n    (not (on-table ?book))\n    (holding ?book)\n)\n```", "type": "response", "action": "take-from-table"}
{"role": "system", "content": "# CONTEXT #\nYou are a tool called PDDL Modeling Assistant. You are a technical experts in constructing Planning Domain Definition Language (PDDL) models via the natural language context.\n# OBJECTIVE #\n* Construct parameters, preconditions and effects based on the domain information, action description and the action name.\n* All variables in the preconditions and effects must be listed in the action's parameters. This restriction helps maintain the action's scope and prevents ambiguity in the planning process.\n* Do not use predicates that are not defined in the available predicates list to construct the preconditions and effects.\n* When the natural language description is ambiguous or certain predicate changes are implied, make reasonable assumptions based on common sense to fill up the implicit predicate in the PDDL action.\n# STYLE #\nFollow the writing style of technical experts. The output can be parsed by a machine, so it is important to follow the structured format.\n# TONE #\nBe precise and concise in constructing the PDDL action. The PDDL action should be clear and unambiguous.\n# AUDIENCE #\nYour audience is someone who is trying to learn how to construct PDDL actions from natural language descriptions.\n# RESPONSE #\nThe response should be in the following format:\n---\n**Explanation:** [Your explanation here]\n\n**Response:**\nParameters:\n1. ?x - [type]: [parameter description]\n2. ...\n\nPreconditions:\n```\n(and\n    ([predicate_1] ?x)\n)\n```\n\nEffects:\n```\n(and\n    (not ([predicate_2] ?x))\n    ([predicate_2] ?x)\n    ...\n)\n```\n---\n", "type": "prompt"}
{"role": "user", "content": "One or two examples from other domains for illustrating the input and output formats.\nHere are two examples from the newspapers domain for demonstrating the output format.\n        \nDomain information: This domain is structured to model a simple newspaper delivery system, where the main tasks involve picking up newspapers from a home base, moving to different locations, and delivering the papers to locations that require them.\n\nA list of available predicates\n1. (at ?loc - loc) ;; the agent is at loc location\n2. (is_Home_Base ?loc - loc) ;; the location is the home base\n3. (satisfied ?loc - loc) ;; the location has received the newspaper\n4. (wants_Paper ?loc - loc) ;; the location needs a newspaper\n5. (unpacked ?paper - paper) ;; the paper is unpacked\n6. (carrying ?paper - paper) ;; the agent is carrying the paper\nExample 1\nAction Description: RoboDelivery is at the home base (loc_home).\nThere is an unpacked newspaper (paper1) at the home base.\nRoboDelivery performs the pick-up action.\n\n    Preconditions: RoboDelivery is at loc_home (which is the home base), and paper1 is unpacked.\n    Effects: RoboDelivery is now carrying paper1, and paper1 is no longer unpacked.\n\nAction name: pick-up\n\n\nYour answer:\n---\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:**\n\nLet's imagine a situation where someone, like a delivery person, needs to pick up newspapers from a place, like a home base, and deliver them to various locations. This situation can be broken down into smaller, specific steps to make it easy for a computer to understand and execute. This is where the action schema you mentioned comes into play.\n\nThe action is called \"pick-up,\" and it involves the delivery person picking up newspapers to deliver. This action is defined in a language called PDDL, which is like giving a computer a recipe to follow.\n\n1. **Parameters**: These are like ingredients in a recipe. Here, the ingredients are any newspaper (`?paper`) and a location (`?loc`), which in this scenario is the home base.\n\n2. **Preconditions**: These are conditions that must be true before the action can start. Think of it like checking if you have all your ingredients before you start cooking.\n   - `(at ?loc)`: The delivery person must be at the location specified (`?loc`). This makes sure they are actually at the home base to pick up the newspapers.\n   - `(is_Home_Base ?loc)`: The location where they are must be the home base. This is crucial because newspapers ready to be delivered are stored here.\n   - `(unpacked ?paper)`: The newspapers need to be unpacked and ready to be picked up. It ensures the newspapers are not in boxes or still bundled up, making them easy to grab and go.\n\n3. **Effects**: These describe what happens after the action is completed.\n   - `(not (unpacked ?paper))`: The newspaper is no longer in an unpacked state at the base because it has been picked up.\n   - `(carrying ?paper)`: The newspaper is now being carried by the delivery person, ready to be delivered to someone who needs it.\n\nThis schema helps the computer understand exactly what needs to happen when the \"pick-up\" action is called in the program. By specifying preconditions, we ensure the action makes sense (you can't pick up a newspaper if you're not there or if the papers aren't ready). The effects tell the computer how the world changes after the action, like the newspaper moving from being unpacked at the base to being carried for delivery.\n\nBy breaking down tasks this way, we help the computer efficiently and correctly handle tasks that seem simple to us but are quite detailed when programmed.\n                \n**Response:**\nParameters:\n1. ?paper - paper: [short description of the parameter]\n2. ?loc - loc: [short description of the parameter]\n\nPreconditions:\n```\n(and\n    (at ?loc)\n    (is_Home_Base ?loc)\n    (unpacked ?paper)\n)\n```\n\nEffects:\n```\n(and\n    (not (unpacked ?paper))\n    (carrying ?paper)\n)\n```\n\n---\n", "type": "prompt"}
{"role": "user", "content": "Example 2\nAction Description: RoboDelivery wants to deliver the newspaper to a house (loc_house1).\nRoboDelivery performs the move action to go from loc_home to loc_house1.\n\n    Preconditions: RoboDelivery is at loc_home.\n    Effects: RoboDelivery is no longer at loc_home and is now at loc_house1.\n\nAction name: move\n\n\nYour answer:\n---\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:**\n\nImagine you're playing a game where you need to deliver newspapers to different houses in your neighborhood. Each turn in the game allows you to move from one house to another. The action of moving from one house to another in the game can be compared to an action in our newspaper delivery model.\n\nIn the scenario, the action is called \"move,\" and it involves a delivery person moving from a starting location to a destination. Let's break down why this action is modeled the way it is:\n\n1. **Parameters**: These are like placeholders or markers in our game. In the \"move\" action, the parameters are the Starting Location and the Destination. It's just like saying, \"I'm starting from my house and going to my friend's house.\"\n\n2. **Preconditions**: Before you can move from one house to another, you must be at the house you're starting from. It wouldn't make sense to say, \"I'm going from my house to my friend's house\" if you're actually at the grocery store, right? So, the precondition that the delivery person is at the starting location is crucial to make the action logical.\n\n3. **Effects**: After you move from your house to your friend's house, you are no longer at your house; you are now at your friend's house. That\u2019s what happens in our model, too. The effect of the move action is that the delivery person is no longer at the starting location and is now at the destination. This change is captured in the model by removing the state of being at the starting location (`not (at ?from)`) and adding the state of being at the destination (`(at ?to)`).\n\nSo, this action schema perfectly represents the simple yet essential task of moving from one point to another, ensuring that the game's rules are followed: you start from where you say you are, and you end up where you want to go. It's just like moving pieces on a board game, ensuring each move is valid based on where you are and where you want to be.\n                \n**Response:**\nParameters:\n1. ?from - loc: [short description of the parameter]\n2. ?to - loc: [short description of the parameter]\n\nPreconditions:\n```\n(at ?from)\n```\n\nEffects:\n```\n(and\n    (not (at ?from))\n    (at ?to)\n)\n```\n\n---\n", "type": "prompt"}
{"role": "user", "content": "Here are two examples from the doors domain for demonstrating the output format.\n        \nDomain information: This domain is structured to allow navigation and interaction within a space comprising rooms, locations, and doors that can be unlocked with keys. The actions and predicates support movement between locations and the unlocking of rooms.\n\nA list of available predicates\n1. (at ?loc - location) ;; agent is at loc location\n2. (unlocked ?room - room) ;; the room is unlocked\n3. (loc_in_room ?loc - location ?room - room) ;; the location is in the room\n4. (key_at ?key - key ?loc - location) ;; the key is at loc location\n5. (key_for_room ?key - key ?room - room) ;; the key is for the room\nExample 1\nAction Description: This one is akin to a classic scene in adventure games where you find a key and use it to unlock new areas. Picture yourself in the same house. You find a key lying on a table in the hallway (the key's location). This isn't just any key; it's special because it opens the door to the mysterious attic (the room the key unlocks). By picking up this key, you perform the action. The moment you have the key in your hand, the attic is no longer inaccessible. It's as if the key magically signals the attic door to unlock, waiting for you to discover its secrets.\n\nAction name: pick\n\n\nYour answer:\n---\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:**\nImagine you're playing a game where you're exploring different rooms and finding keys that can unlock new areas. The action called \"pick\" in this game lets you pick up a key that's in the same location as you, which then unlocks a room that the key is meant for. Let's break down how this works in simple terms.\n\nFirst, you need to be in the same location as the key. That's like being in a hallway where you see a key on a table. The action requires that you are right there with the key, which makes sense, right? You can't pick up a key from another room!\n\nNext, the key you find has to be the right one for a specific room. It\u2019s like having a label on the key saying \"this key is for the attic,\" ensuring that you don't try to use a kitchen key to open the attic.\n\nNow, when you pick up the key, the game checks two important things before letting you pick it up:\n1. **You are at the key's location**: You have to be right there where the key is.\n2. **The key is for the room you want to unlock**: This makes sure the key matches the room you\u2019re trying to access.\n\nOnce these conditions are met, and you pick up the key, two things happen:\n1. **The key is no longer at its original location**: Just like in real life, once you pick something up, it's not there anymore.\n2. **The room unlocks**: It\u2019s like the key told the door, \"Hey, open up!\" and now you can go into the attic and explore.\n\nThis action, \"pick,\" neatly connects your action of picking up the key with the effect of unlocking a new room, making the game or the story you're in feel real and connected. The conditions you meet before picking up the key ensure that everything makes sense and flows logically, just like in real life when you need the right key to open a specific door.\n                \n**Response:**\nParameters:\n1. ?sloc - location: [short description of the parameter]\n2. ?eloc - location: [short description of the parameter]\n3. ?eroom - room: [short description of the parameter]\n\nPreconditions:\n```\n(and\n    (at ?sloc)\n    (unlocked ?eroom)\n    (loc_in_room ?eloc ?eroom)\n)\n```\n\nEffects:\n```\n(and\n    (not (at ?sloc))\n    (at ?eloc)\n)\n```\n\n---\n", "type": "prompt"}
{"role": "user", "content": "Example 2\nAction Description: The action is like embarking on a small journey from one place to another within a confined space. Imagine you're in a large house with multiple rooms. You're currently in one location, let's say the living room (your starting location). You decide to move to another spot, maybe the kitchen (your ending location). However, there's a catch. The kitchen is behind a door that needs to be unlocked (ending room). So, this action can only happen if the kitchen door is already unlocked. Once you move, you're no longer in the living room but now standing in the kitchen, contemplating what to cook!\n\nAction name: move_to\n\n\nYour answer:\n---\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:**\nImagine you're playing a game where you need to explore different rooms by finding keys that unlock them, much like a treasure hunt. The action called \"pick\" in this game allows you to pick up a key from a specific location so you can unlock a room.\n\nHere\u2019s why the action schema matches your description:\n1. **Parameters**: You have parameters like `?loc` (where the key is found), `?key` (the key you find), and `?room` (the room that the key opens). These parameters help define what the action involves\u2014picking up a key at a location that unlocks a specific room.\n\n2. **Preconditions**:\n   - `(at ?loc)`: This means that you, the player, must be at the same location as the key. It ensures you are in the right place to pick it up, like being in the hallway where the key is on the table.\n   - `(key_at ?key ?loc)`: This ensures that the key you need is indeed at your location. It checks that the key is actually there before you can pick it up.\n   - `(key_for_room ?key ?room)`: This confirms that the key you are about to pick up is the correct one for unlocking the specific room you want to enter, like the attic.\n\n3. **Effects**:\n   - `(not (key_at ?key ?loc))`: Once you pick up the key, it's no longer lying there at the location. This effect updates the game state to show the key has been moved\u2014it's now with you.\n   - `(unlocked ?room)`: The action of picking up the key leads to the room being unlocked. Now, you can enter the room you wanted, such as the attic, which was previously locked.\n\nBy combining these elements, the action of \"pick\" logically lets you find a key and use it to access new areas in the game, opening up more adventures\u2014just like in the story of finding a key to unlock the attic.\n                \n**Response:**\nParameters:\n1. ?loc - location: [short description of the parameter]\n2. ?key - key: [short description of the parameter]\n3. ?room - room: [short description of the parameter]\n\nPreconditions:\n```\n(and\n    (at ?loc)\n    (key_at ?key ?loc)\n    (key_for_room ?key ?room)\n)\n```\n\nEffects:\n```\n(and\n    (not (key_at ?key ?loc))\n    (unlocked ?room)\n)\n```\n\n---\n", "type": "prompt"}
{"role": "user", "content": "Question: Here is the task.\nA natural language description of the domain\nDomain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.\n\nA list of available predicates\n1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf\n2. (on-table ?x - book) ;; ?x is on the table\n3. (accessible ?x - book) ;; ?x is accessible (not covered)\n4. (hands-free) ;; The hands of the librarian are free\n5. (holding ?x - book) ;; The librarian is holding ?x\n6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat\n7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty\n8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full\n9. (book-request ?book - book) ;; There is a request for book ?book\n10. (return-due ?book - book) ;; Book ?book is due for return\n11. (checked-out ?book - book) ;; Book ?book is checked out\n\nAction Description: Put a book you're holding onto the table, making it accessible.\n\nAction name: place-on-table\n\n\nYour answer:\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:**\nIn the context of a library, the action \"place-on-table\" involves a librarian placing a book that they are currently holding onto a table. This action makes the book accessible to others, such as patrons who may want to borrow it. Let's break down the components of this action:\n\n1. **Parameters**: The parameters for this action include the book that is being placed on the table (`?book`). There is no need for a location parameter since the action is specific to placing the book on the table.\n\n2. **Preconditions**: Before the librarian can place the book on the table, certain conditions must be met:\n   - `(holding ?book)`: The librarian must be holding the book. This ensures that the book is in the librarian's possession and can be placed on the table.\n   - `(hands-free)`: This predicate might seem redundant since holding a book implies that the librarian's hands are not free. However, in a more complex model, this could be used to ensure that the librarian is not involved in another task that requires the use of their hands.\n\n3. **Effects**: After the book is placed on the table, the following changes occur:\n   - `(not (holding ?book))`: The librarian is no longer holding the book, as it has been placed on the table.\n   - `(on-table ?book)`: The book is now on the table, making it accessible to others.\n   - `(accessible ?book)`: This effect ensures that the book is not covered or obscured in any way and is readily accessible.\n\nThe action \"place-on-table\" is a straightforward way to model the behavior of making a book available on a table in a library setting.\n\n**Response:**\nParameters:\n1. ?book - book: [The book that the librarian is placing on the table]\n\nPreconditions:\n```\n(and\n    (holding ?book)\n    (hands-free)\n)\n```\n\nEffects:\n```\n(and\n    (not (holding ?book))\n    (on-table ?book)\n    (accessible ?book)\n)\n```", "type": "response", "action": "place-on-table"}
{"role": "system", "content": "# CONTEXT #\nYou are a tool called PDDL Modeling Assistant. You are a technical experts in constructing Planning Domain Definition Language (PDDL) models via the natural language context.\n# OBJECTIVE #\n* Construct parameters, preconditions and effects based on the domain information, action description and the action name.\n* All variables in the preconditions and effects must be listed in the action's parameters. This restriction helps maintain the action's scope and prevents ambiguity in the planning process.\n* Do not use predicates that are not defined in the available predicates list to construct the preconditions and effects.\n* When the natural language description is ambiguous or certain predicate changes are implied, make reasonable assumptions based on common sense to fill up the implicit predicate in the PDDL action.\n# STYLE #\nFollow the writing style of technical experts. The output can be parsed by a machine, so it is important to follow the structured format.\n# TONE #\nBe precise and concise in constructing the PDDL action. The PDDL action should be clear and unambiguous.\n# AUDIENCE #\nYour audience is someone who is trying to learn how to construct PDDL actions from natural language descriptions.\n# RESPONSE #\nThe response should be in the following format:\n---\n**Explanation:** [Your explanation here]\n\n**Response:**\nParameters:\n1. ?x - [type]: [parameter description]\n2. ...\n\nPreconditions:\n```\n(and\n    ([predicate_1] ?x)\n)\n```\n\nEffects:\n```\n(and\n    (not ([predicate_2] ?x))\n    ([predicate_2] ?x)\n    ...\n)\n```\n---\n", "type": "prompt"}
{"role": "user", "content": "One or two examples from other domains for illustrating the input and output formats.\nHere are two examples from the newspapers domain for demonstrating the output format.\n        \nDomain information: This domain is structured to model a simple newspaper delivery system, where the main tasks involve picking up newspapers from a home base, moving to different locations, and delivering the papers to locations that require them.\n\nA list of available predicates\n1. (at ?loc - loc) ;; the agent is at loc location\n2. (is_Home_Base ?loc - loc) ;; the location is the home base\n3. (satisfied ?loc - loc) ;; the location has received the newspaper\n4. (wants_Paper ?loc - loc) ;; the location needs a newspaper\n5. (unpacked ?paper - paper) ;; the paper is unpacked\n6. (carrying ?paper - paper) ;; the agent is carrying the paper\nExample 1\nAction Description: The house at loc_house1 wants a newspaper.\nRoboDelivery performs the deliver action to give paper1 to the house.\n\n    Preconditions: RoboDelivery is at loc_house1, the house wants a newspaper, and RoboDelivery is carrying paper1.\n    Effects: RoboDelivery is no longer carrying paper1, the house at loc_house1 no longer wants a newspaper, and the house at loc_house1 is satisfied.\n\nAction name: deliver\n\n\nYour answer:\n---\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:**\n\nLet's think of the action of delivering a newspaper like a simple task you might do every day, like delivering a letter to your neighbor. The description given helps us understand how a delivery person can complete their job of delivering newspapers effectively in a systematic way, which is where the PDDL (a planning language) comes into play.\n\n1. **Preconditions: Why are they necessary?**\n   - The delivery person must be at the right location (`at ?loc`): Just like if you were to deliver a letter to your neighbor, you need to be at their house, not yours! This ensures the newspaper is delivered to the correct place.\n   - The delivery location wants a newspaper (`wants_Paper ?loc`): This makes sure that the delivery person is not just going around giving out newspapers to places that don't need them. It\u2019s like checking if your neighbor actually needs the letter before you walk over.\n   - The delivery person must be carrying the newspaper (`carrying ?paper`): This is pretty straightforward\u2014just as you can't deliver a letter that you don't have in your hand, the delivery person needs to have the newspaper with them to deliver it.\n\n2. **Effects: How do they follow from the preconditions?**\n   - The newspaper is no longer being carried by the delivery person (`not (carrying ?paper)`): Once the delivery is done, just like handing over a letter, the newspaper is no longer with the delivery person.\n   - The delivery location no longer wants the newspaper (`not (wants_Paper ?loc)`): The need for the newspaper has been met, similar to how your neighbor no longer waits for the letter once you've delivered it.\n   - The location is satisfied (`satisfied ?loc`): This indicates that the delivery was successful. The location got what it was waiting for, just like your neighbor feeling happy receiving the letter.\n\nIn summary, the action of delivering a newspaper in this PDDL model ensures that everything needed to complete a successful delivery is in place before the delivery starts, and once done, it updates the state to reflect the successful completion of the task. It's about making sure you have what you need, going where you need to go, and ensuring the task is completed as expected!\n                \n**Response:**\nParameters:\n1. ?paper - paper: [short description of the parameter]\n2. ?loc - loc: [short description of the parameter]\n\nPreconditions:\n```\n(and\n    (at ?loc)\n    (wants_Paper ?loc)\n    (carrying ?paper)\n)\n```\n\nEffects:\n```\n(and\n    (not (carrying ?paper))\n    (not (wants_Paper ?loc))\n    (satisfied ?loc)\n)\n```\n\n---\n", "type": "prompt"}
{"role": "user", "content": "Example 2\nAction Description: RoboDelivery is at the home base (loc_home).\nThere is an unpacked newspaper (paper1) at the home base.\nRoboDelivery performs the pick-up action.\n\n    Preconditions: RoboDelivery is at loc_home (which is the home base), and paper1 is unpacked.\n    Effects: RoboDelivery is now carrying paper1, and paper1 is no longer unpacked.\n\nAction name: pick-up\n\n\nYour answer:\n---\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:**\n\nLet's imagine a situation where someone, like a delivery person, needs to pick up newspapers from a place, like a home base, and deliver them to various locations. This situation can be broken down into smaller, specific steps to make it easy for a computer to understand and execute. This is where the action schema you mentioned comes into play.\n\nThe action is called \"pick-up,\" and it involves the delivery person picking up newspapers to deliver. This action is defined in a language called PDDL, which is like giving a computer a recipe to follow.\n\n1. **Parameters**: These are like ingredients in a recipe. Here, the ingredients are any newspaper (`?paper`) and a location (`?loc`), which in this scenario is the home base.\n\n2. **Preconditions**: These are conditions that must be true before the action can start. Think of it like checking if you have all your ingredients before you start cooking.\n   - `(at ?loc)`: The delivery person must be at the location specified (`?loc`). This makes sure they are actually at the home base to pick up the newspapers.\n   - `(is_Home_Base ?loc)`: The location where they are must be the home base. This is crucial because newspapers ready to be delivered are stored here.\n   - `(unpacked ?paper)`: The newspapers need to be unpacked and ready to be picked up. It ensures the newspapers are not in boxes or still bundled up, making them easy to grab and go.\n\n3. **Effects**: These describe what happens after the action is completed.\n   - `(not (unpacked ?paper))`: The newspaper is no longer in an unpacked state at the base because it has been picked up.\n   - `(carrying ?paper)`: The newspaper is now being carried by the delivery person, ready to be delivered to someone who needs it.\n\nThis schema helps the computer understand exactly what needs to happen when the \"pick-up\" action is called in the program. By specifying preconditions, we ensure the action makes sense (you can't pick up a newspaper if you're not there or if the papers aren't ready). The effects tell the computer how the world changes after the action, like the newspaper moving from being unpacked at the base to being carried for delivery.\n\nBy breaking down tasks this way, we help the computer efficiently and correctly handle tasks that seem simple to us but are quite detailed when programmed.\n                \n**Response:**\nParameters:\n1. ?paper - paper: [short description of the parameter]\n2. ?loc - loc: [short description of the parameter]\n\nPreconditions:\n```\n(and\n    (at ?loc)\n    (is_Home_Base ?loc)\n    (unpacked ?paper)\n)\n```\n\nEffects:\n```\n(and\n    (not (unpacked ?paper))\n    (carrying ?paper)\n)\n```\n\n---\n", "type": "prompt"}
{"role": "user", "content": "Here are two examples from the doors domain for demonstrating the output format.\n        \nDomain information: This domain is structured to allow navigation and interaction within a space comprising rooms, locations, and doors that can be unlocked with keys. The actions and predicates support movement between locations and the unlocking of rooms.\n\nA list of available predicates\n1. (at ?loc - location) ;; agent is at loc location\n2. (unlocked ?room - room) ;; the room is unlocked\n3. (loc_in_room ?loc - location ?room - room) ;; the location is in the room\n4. (key_at ?key - key ?loc - location) ;; the key is at loc location\n5. (key_for_room ?key - key ?room - room) ;; the key is for the room\nExample 1\nAction Description: The action is like embarking on a small journey from one place to another within a confined space. Imagine you're in a large house with multiple rooms. You're currently in one location, let's say the living room (your starting location). You decide to move to another spot, maybe the kitchen (your ending location). However, there's a catch. The kitchen is behind a door that needs to be unlocked (ending room). So, this action can only happen if the kitchen door is already unlocked. Once you move, you're no longer in the living room but now standing in the kitchen, contemplating what to cook!\n\nAction name: move_to\n\n\nYour answer:\n---\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:**\nImagine you're playing a game where you need to explore different rooms by finding keys that unlock them, much like a treasure hunt. The action called \"pick\" in this game allows you to pick up a key from a specific location so you can unlock a room.\n\nHere\u2019s why the action schema matches your description:\n1. **Parameters**: You have parameters like `?loc` (where the key is found), `?key` (the key you find), and `?room` (the room that the key opens). These parameters help define what the action involves\u2014picking up a key at a location that unlocks a specific room.\n\n2. **Preconditions**:\n   - `(at ?loc)`: This means that you, the player, must be at the same location as the key. It ensures you are in the right place to pick it up, like being in the hallway where the key is on the table.\n   - `(key_at ?key ?loc)`: This ensures that the key you need is indeed at your location. It checks that the key is actually there before you can pick it up.\n   - `(key_for_room ?key ?room)`: This confirms that the key you are about to pick up is the correct one for unlocking the specific room you want to enter, like the attic.\n\n3. **Effects**:\n   - `(not (key_at ?key ?loc))`: Once you pick up the key, it's no longer lying there at the location. This effect updates the game state to show the key has been moved\u2014it's now with you.\n   - `(unlocked ?room)`: The action of picking up the key leads to the room being unlocked. Now, you can enter the room you wanted, such as the attic, which was previously locked.\n\nBy combining these elements, the action of \"pick\" logically lets you find a key and use it to access new areas in the game, opening up more adventures\u2014just like in the story of finding a key to unlock the attic.\n                \n**Response:**\nParameters:\n1. ?sloc - location: [short description of the parameter]\n2. ?eloc - location: [short description of the parameter]\n3. ?eroom - room: [short description of the parameter]\n\nPreconditions:\n```\n(and\n    (at ?sloc)\n    (unlocked ?eroom)\n    (loc_in_room ?eloc ?eroom)\n)\n```\n\nEffects:\n```\n(and\n    (not (at ?sloc))\n    (at ?eloc)\n)\n```\n\n---\n", "type": "prompt"}
{"role": "user", "content": "Example 2\nAction Description: This one is akin to a classic scene in adventure games where you find a key and use it to unlock new areas. Picture yourself in the same house. You find a key lying on a table in the hallway (the key's location). This isn't just any key; it's special because it opens the door to the mysterious attic (the room the key unlocks). By picking up this key, you perform the action. The moment you have the key in your hand, the attic is no longer inaccessible. It's as if the key magically signals the attic door to unlock, waiting for you to discover its secrets.\n\nAction name: pick\n\n\nYour answer:\n---\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:**\nImagine you're playing a game where you're exploring different rooms and finding keys that can unlock new areas. The action called \"pick\" in this game lets you pick up a key that's in the same location as you, which then unlocks a room that the key is meant for. Let's break down how this works in simple terms.\n\nFirst, you need to be in the same location as the key. That's like being in a hallway where you see a key on a table. The action requires that you are right there with the key, which makes sense, right? You can't pick up a key from another room!\n\nNext, the key you find has to be the right one for a specific room. It\u2019s like having a label on the key saying \"this key is for the attic,\" ensuring that you don't try to use a kitchen key to open the attic.\n\nNow, when you pick up the key, the game checks two important things before letting you pick it up:\n1. **You are at the key's location**: You have to be right there where the key is.\n2. **The key is for the room you want to unlock**: This makes sure the key matches the room you\u2019re trying to access.\n\nOnce these conditions are met, and you pick up the key, two things happen:\n1. **The key is no longer at its original location**: Just like in real life, once you pick something up, it's not there anymore.\n2. **The room unlocks**: It\u2019s like the key told the door, \"Hey, open up!\" and now you can go into the attic and explore.\n\nThis action, \"pick,\" neatly connects your action of picking up the key with the effect of unlocking a new room, making the game or the story you're in feel real and connected. The conditions you meet before picking up the key ensure that everything makes sense and flows logically, just like in real life when you need the right key to open a specific door.\n                \n**Response:**\nParameters:\n1. ?loc - location: [short description of the parameter]\n2. ?key - key: [short description of the parameter]\n3. ?room - room: [short description of the parameter]\n\nPreconditions:\n```\n(and\n    (at ?loc)\n    (key_at ?key ?loc)\n    (key_for_room ?key ?room)\n)\n```\n\nEffects:\n```\n(and\n    (not (key_at ?key ?loc))\n    (unlocked ?room)\n)\n```\n\n---\n", "type": "prompt"}
{"role": "user", "content": "Question: Here is the task.\nA natural language description of the domain\nDomain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.\n\nA list of available predicates\n1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf\n2. (on-table ?x - book) ;; ?x is on the table\n3. (accessible ?x - book) ;; ?x is accessible (not covered)\n4. (hands-free) ;; The hands of the librarian are free\n5. (holding ?x - book) ;; The librarian is holding ?x\n6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat\n7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty\n8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full\n9. (book-request ?book - book) ;; There is a request for book ?book\n10. (return-due ?book - book) ;; Book ?book is due for return\n11. (checked-out ?book - book) ;; Book ?book is checked out\n\nAction Description: Put a book you're holding on top of another accessible book on the shelf.\n\nAction name: place-on-shelf\n\n\nYour answer:\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:**\nIn the context of a library, the action \"place-on-shelf\" involves a librarian placing a book that they are currently holding onto a shelf, specifically on top of another book that is already there. This action requires certain conditions to be met before it can be executed and results in changes to the state of the library's inventory.\n\nThe action can only be performed if:\n1. The librarian is currently holding a book (`holding ?book`).\n2. There is another book on the shelf that is accessible (`on-shelf ?below-book` and `accessible ?below-book`), meaning it's not covered by another book and can have another book placed on top of it.\n3. The librarian's hands are free to perform the action (`hands-free`), which might seem redundant since we're assuming the librarian is holding a book, but in a more complex system, this predicate could be used to ensure no other constraints are in place that would prevent the action.\n\nOnce the action is performed, the following changes occur:\n1. The book that was being held is now on the shelf (`on-shelf ?book ?below-book`).\n2. The librarian is no longer holding the book (`not (holding ?book)`).\n\nThis action helps maintain the organization of the library's collection and ensures that books are accessible for patrons.\n\n**Response:**\nParameters:\n1. ?book - book: [The book that the librarian is holding and will place on the shelf]\n2. ?below-book - book: [The book that is already on the shelf and will be below the ?book]\n\nPreconditions:\n```\n(and\n    (holding ?book)\n    (on-shelf ?below-book)\n    (accessible ?below-book)\n    (hands-free)\n)\n```\n\nEffects:\n```\n(and\n    (not (holding ?book))\n    (on-shelf ?book ?below-book)\n)\n```\n\nNote: The `hands-free` precondition might be considered redundant in this context, as holding a book implies that the librarian's hands are occupied. However, it is included here based on the provided list of available predicates. If the domain rules do not require the librarian to have hands-free before placing a book on the shelf, this precondition can be omitted.", "type": "response", "action": "place-on-shelf"}
{"role": "system", "content": "# CONTEXT #\nYou are a tool called PDDL Modeling Assistant. You are a technical experts in constructing Planning Domain Definition Language (PDDL) models via the natural language context.\n# OBJECTIVE #\n* Construct parameters, preconditions and effects based on the domain information, action description and the action name.\n* All variables in the preconditions and effects must be listed in the action's parameters. This restriction helps maintain the action's scope and prevents ambiguity in the planning process.\n* Do not use predicates that are not defined in the available predicates list to construct the preconditions and effects.\n* When the natural language description is ambiguous or certain predicate changes are implied, make reasonable assumptions based on common sense to fill up the implicit predicate in the PDDL action.\n# STYLE #\nFollow the writing style of technical experts. The output can be parsed by a machine, so it is important to follow the structured format.\n# TONE #\nBe precise and concise in constructing the PDDL action. The PDDL action should be clear and unambiguous.\n# AUDIENCE #\nYour audience is someone who is trying to learn how to construct PDDL actions from natural language descriptions.\n# RESPONSE #\nThe response should be in the following format:\n---\n**Explanation:** [Your explanation here]\n\n**Response:**\nParameters:\n1. ?x - [type]: [parameter description]\n2. ...\n\nPreconditions:\n```\n(and\n    ([predicate_1] ?x)\n)\n```\n\nEffects:\n```\n(and\n    (not ([predicate_2] ?x))\n    ([predicate_2] ?x)\n    ...\n)\n```\n---\n", "type": "prompt"}
{"role": "user", "content": "One or two examples from other domains for illustrating the input and output formats.\nHere are two examples from the newspapers domain for demonstrating the output format.\n        \nDomain information: This domain is structured to model a simple newspaper delivery system, where the main tasks involve picking up newspapers from a home base, moving to different locations, and delivering the papers to locations that require them.\n\nA list of available predicates\n1. (at ?loc - loc) ;; the agent is at loc location\n2. (is_Home_Base ?loc - loc) ;; the location is the home base\n3. (satisfied ?loc - loc) ;; the location has received the newspaper\n4. (wants_Paper ?loc - loc) ;; the location needs a newspaper\n5. (unpacked ?paper - paper) ;; the paper is unpacked\n6. (carrying ?paper - paper) ;; the agent is carrying the paper\nExample 1\nAction Description: RoboDelivery is at the home base (loc_home).\nThere is an unpacked newspaper (paper1) at the home base.\nRoboDelivery performs the pick-up action.\n\n    Preconditions: RoboDelivery is at loc_home (which is the home base), and paper1 is unpacked.\n    Effects: RoboDelivery is now carrying paper1, and paper1 is no longer unpacked.\n\nAction name: pick-up\n\n\nYour answer:\n---\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:**\n\nLet's imagine a situation where someone, like a delivery person, needs to pick up newspapers from a place, like a home base, and deliver them to various locations. This situation can be broken down into smaller, specific steps to make it easy for a computer to understand and execute. This is where the action schema you mentioned comes into play.\n\nThe action is called \"pick-up,\" and it involves the delivery person picking up newspapers to deliver. This action is defined in a language called PDDL, which is like giving a computer a recipe to follow.\n\n1. **Parameters**: These are like ingredients in a recipe. Here, the ingredients are any newspaper (`?paper`) and a location (`?loc`), which in this scenario is the home base.\n\n2. **Preconditions**: These are conditions that must be true before the action can start. Think of it like checking if you have all your ingredients before you start cooking.\n   - `(at ?loc)`: The delivery person must be at the location specified (`?loc`). This makes sure they are actually at the home base to pick up the newspapers.\n   - `(is_Home_Base ?loc)`: The location where they are must be the home base. This is crucial because newspapers ready to be delivered are stored here.\n   - `(unpacked ?paper)`: The newspapers need to be unpacked and ready to be picked up. It ensures the newspapers are not in boxes or still bundled up, making them easy to grab and go.\n\n3. **Effects**: These describe what happens after the action is completed.\n   - `(not (unpacked ?paper))`: The newspaper is no longer in an unpacked state at the base because it has been picked up.\n   - `(carrying ?paper)`: The newspaper is now being carried by the delivery person, ready to be delivered to someone who needs it.\n\nThis schema helps the computer understand exactly what needs to happen when the \"pick-up\" action is called in the program. By specifying preconditions, we ensure the action makes sense (you can't pick up a newspaper if you're not there or if the papers aren't ready). The effects tell the computer how the world changes after the action, like the newspaper moving from being unpacked at the base to being carried for delivery.\n\nBy breaking down tasks this way, we help the computer efficiently and correctly handle tasks that seem simple to us but are quite detailed when programmed.\n                \n**Response:**\nParameters:\n1. ?paper - paper: [short description of the parameter]\n2. ?loc - loc: [short description of the parameter]\n\nPreconditions:\n```\n(and\n    (at ?loc)\n    (wants_Paper ?loc)\n    (carrying ?paper)\n)\n```\n\nEffects:\n```\n(and\n    (not (carrying ?paper))\n    (not (wants_Paper ?loc))\n    (satisfied ?loc)\n)\n```\n\n---\n", "type": "prompt"}
{"role": "user", "content": "Example 2\nAction Description: The house at loc_house1 wants a newspaper.\nRoboDelivery performs the deliver action to give paper1 to the house.\n\n    Preconditions: RoboDelivery is at loc_house1, the house wants a newspaper, and RoboDelivery is carrying paper1.\n    Effects: RoboDelivery is no longer carrying paper1, the house at loc_house1 no longer wants a newspaper, and the house at loc_house1 is satisfied.\n\nAction name: deliver\n\n\nYour answer:\n---\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:**\n\nLet's think of the action of delivering a newspaper like a simple task you might do every day, like delivering a letter to your neighbor. The description given helps us understand how a delivery person can complete their job of delivering newspapers effectively in a systematic way, which is where the PDDL (a planning language) comes into play.\n\n1. **Preconditions: Why are they necessary?**\n   - The delivery person must be at the right location (`at ?loc`): Just like if you were to deliver a letter to your neighbor, you need to be at their house, not yours! This ensures the newspaper is delivered to the correct place.\n   - The delivery location wants a newspaper (`wants_Paper ?loc`): This makes sure that the delivery person is not just going around giving out newspapers to places that don't need them. It\u2019s like checking if your neighbor actually needs the letter before you walk over.\n   - The delivery person must be carrying the newspaper (`carrying ?paper`): This is pretty straightforward\u2014just as you can't deliver a letter that you don't have in your hand, the delivery person needs to have the newspaper with them to deliver it.\n\n2. **Effects: How do they follow from the preconditions?**\n   - The newspaper is no longer being carried by the delivery person (`not (carrying ?paper)`): Once the delivery is done, just like handing over a letter, the newspaper is no longer with the delivery person.\n   - The delivery location no longer wants the newspaper (`not (wants_Paper ?loc)`): The need for the newspaper has been met, similar to how your neighbor no longer waits for the letter once you've delivered it.\n   - The location is satisfied (`satisfied ?loc`): This indicates that the delivery was successful. The location got what it was waiting for, just like your neighbor feeling happy receiving the letter.\n\nIn summary, the action of delivering a newspaper in this PDDL model ensures that everything needed to complete a successful delivery is in place before the delivery starts, and once done, it updates the state to reflect the successful completion of the task. It's about making sure you have what you need, going where you need to go, and ensuring the task is completed as expected!\n                \n**Response:**\nParameters:\n1. ?paper - paper: [short description of the parameter]\n2. ?loc - loc: [short description of the parameter]\n\nPreconditions:\n```\n(and\n    (at ?loc)\n    (is_Home_Base ?loc)\n    (unpacked ?paper)\n)\n```\n\nEffects:\n```\n(and\n    (not (unpacked ?paper))\n    (carrying ?paper)\n)\n```\n\n---\n", "type": "prompt"}
{"role": "user", "content": "Here are two examples from the doors domain for demonstrating the output format.\n        \nDomain information: This domain is structured to allow navigation and interaction within a space comprising rooms, locations, and doors that can be unlocked with keys. The actions and predicates support movement between locations and the unlocking of rooms.\n\nA list of available predicates\n1. (at ?loc - location) ;; agent is at loc location\n2. (unlocked ?room - room) ;; the room is unlocked\n3. (loc_in_room ?loc - location ?room - room) ;; the location is in the room\n4. (key_at ?key - key ?loc - location) ;; the key is at loc location\n5. (key_for_room ?key - key ?room - room) ;; the key is for the room\nExample 1\nAction Description: The action is like embarking on a small journey from one place to another within a confined space. Imagine you're in a large house with multiple rooms. You're currently in one location, let's say the living room (your starting location). You decide to move to another spot, maybe the kitchen (your ending location). However, there's a catch. The kitchen is behind a door that needs to be unlocked (ending room). So, this action can only happen if the kitchen door is already unlocked. Once you move, you're no longer in the living room but now standing in the kitchen, contemplating what to cook!\n\nAction name: move_to\n\n\nYour answer:\n---\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:**\nImagine you're playing a game where you need to explore different rooms by finding keys that unlock them, much like a treasure hunt. The action called \"pick\" in this game allows you to pick up a key from a specific location so you can unlock a room.\n\nHere\u2019s why the action schema matches your description:\n1. **Parameters**: You have parameters like `?loc` (where the key is found), `?key` (the key you find), and `?room` (the room that the key opens). These parameters help define what the action involves\u2014picking up a key at a location that unlocks a specific room.\n\n2. **Preconditions**:\n   - `(at ?loc)`: This means that you, the player, must be at the same location as the key. It ensures you are in the right place to pick it up, like being in the hallway where the key is on the table.\n   - `(key_at ?key ?loc)`: This ensures that the key you need is indeed at your location. It checks that the key is actually there before you can pick it up.\n   - `(key_for_room ?key ?room)`: This confirms that the key you are about to pick up is the correct one for unlocking the specific room you want to enter, like the attic.\n\n3. **Effects**:\n   - `(not (key_at ?key ?loc))`: Once you pick up the key, it's no longer lying there at the location. This effect updates the game state to show the key has been moved\u2014it's now with you.\n   - `(unlocked ?room)`: The action of picking up the key leads to the room being unlocked. Now, you can enter the room you wanted, such as the attic, which was previously locked.\n\nBy combining these elements, the action of \"pick\" logically lets you find a key and use it to access new areas in the game, opening up more adventures\u2014just like in the story of finding a key to unlock the attic.\n                \n**Response:**\nParameters:\n1. ?sloc - location: [short description of the parameter]\n2. ?eloc - location: [short description of the parameter]\n3. ?eroom - room: [short description of the parameter]\n\nPreconditions:\n```\n(and\n    (at ?sloc)\n    (unlocked ?eroom)\n    (loc_in_room ?eloc ?eroom)\n)\n```\n\nEffects:\n```\n(and\n    (not (at ?sloc))\n    (at ?eloc)\n)\n```\n\n---\n", "type": "prompt"}
{"role": "user", "content": "Example 2\nAction Description: This one is akin to a classic scene in adventure games where you find a key and use it to unlock new areas. Picture yourself in the same house. You find a key lying on a table in the hallway (the key's location). This isn't just any key; it's special because it opens the door to the mysterious attic (the room the key unlocks). By picking up this key, you perform the action. The moment you have the key in your hand, the attic is no longer inaccessible. It's as if the key magically signals the attic door to unlock, waiting for you to discover its secrets.\n\nAction name: pick\n\n\nYour answer:\n---\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:**\nImagine you're playing a game where you're exploring different rooms and finding keys that can unlock new areas. The action called \"pick\" in this game lets you pick up a key that's in the same location as you, which then unlocks a room that the key is meant for. Let's break down how this works in simple terms.\n\nFirst, you need to be in the same location as the key. That's like being in a hallway where you see a key on a table. The action requires that you are right there with the key, which makes sense, right? You can't pick up a key from another room!\n\nNext, the key you find has to be the right one for a specific room. It\u2019s like having a label on the key saying \"this key is for the attic,\" ensuring that you don't try to use a kitchen key to open the attic.\n\nNow, when you pick up the key, the game checks two important things before letting you pick it up:\n1. **You are at the key's location**: You have to be right there where the key is.\n2. **The key is for the room you want to unlock**: This makes sure the key matches the room you\u2019re trying to access.\n\nOnce these conditions are met, and you pick up the key, two things happen:\n1. **The key is no longer at its original location**: Just like in real life, once you pick something up, it's not there anymore.\n2. **The room unlocks**: It\u2019s like the key told the door, \"Hey, open up!\" and now you can go into the attic and explore.\n\nThis action, \"pick,\" neatly connects your action of picking up the key with the effect of unlocking a new room, making the game or the story you're in feel real and connected. The conditions you meet before picking up the key ensure that everything makes sense and flows logically, just like in real life when you need the right key to open a specific door.\n                \n**Response:**\nParameters:\n1. ?loc - location: [short description of the parameter]\n2. ?key - key: [short description of the parameter]\n3. ?room - room: [short description of the parameter]\n\nPreconditions:\n```\n(and\n    (at ?loc)\n    (key_at ?key ?loc)\n    (key_for_room ?key ?room)\n)\n```\n\nEffects:\n```\n(and\n    (not (key_at ?key ?loc))\n    (unlocked ?room)\n)\n```\n\n---\n", "type": "prompt"}
{"role": "user", "content": "Question: Here is the task.\nA natural language description of the domain\nDomain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.\n\nA list of available predicates\n1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf\n2. (on-table ?x - book) ;; ?x is on the table\n3. (accessible ?x - book) ;; ?x is accessible (not covered)\n4. (hands-free) ;; The hands of the librarian are free\n5. (holding ?x - book) ;; The librarian is holding ?x\n6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat\n7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty\n8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full\n9. (book-request ?book - book) ;; There is a request for book ?book\n10. (return-due ?book - book) ;; Book ?book is due for return\n11. (checked-out ?book - book) ;; Book ?book is checked out\n\nAction Description: Pick up an accessible book from the shelf if your hands are empty, making the book underneath accessible.\n\nAction name: remove-from-shelf\n\n\nYour answer:\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:**\nIn the context of a library, the action \"remove-from-shelf\" involves a librarian picking up a book from a shelf. For this action to occur, certain conditions must be met, and certain changes to the state of the library must happen as a result.\n\nThe librarian can only pick up a book if their hands are free, meaning they are not already holding another book. Additionally, the book to be picked up must be accessible, which implies it is not covered by another book and is ready to be taken off the shelf.\n\nOnce the book is picked up, the book that was underneath it, if any, becomes accessible because it is no longer covered. This is important for maintaining the organization of the library and ensuring that all books can be accessed when needed.\n\nThe parameters for this action include the book to be removed from the shelf and the book that will become accessible as a result. Here's how the action is structured:\n\n**Response:**\nParameters:\n1. ?book - book: [The book to be removed from the shelf]\n2. ?underneath_book - book: [The book that will become accessible once ?book is removed]\n\nPreconditions:\n```\n(and\n    (on-shelf ?book ?underneath_book)\n    (accessible ?book)\n    (hands-free)\n)\n```\n\nEffects:\n```\n(and\n    (not (on-shelf ?book ?underneath_book))\n    (not (accessible ?underneath_book))\n    (holding ?book)\n)\n```\n\nNote: The above effects assume that removing the book from the shelf automatically makes the underneath book inaccessible, which may not be the case in a real library system. If the underneath book should remain accessible, the effects would need to be adjusted accordingly. Here's an alternative effects clause:\n\n```\n(and\n    (not (on-shelf ?book ?underneath_book))\n    (holding ?book)\n    (accessible ?underneath_book)\n)\n```", "type": "response", "action": "remove-from-shelf"}
{"role": "system", "content": "# CONTEXT #\nYou are a tool called PDDL Modeling Assistant. You are a technical experts in constructing Planning Domain Definition Language (PDDL) models via the natural language context.\n# OBJECTIVE #\n* Construct parameters, preconditions and effects based on the domain information, action description and the action name.\n* All variables in the preconditions and effects must be listed in the action's parameters. This restriction helps maintain the action's scope and prevents ambiguity in the planning process.\n* Do not use predicates that are not defined in the available predicates list to construct the preconditions and effects.\n* When the natural language description is ambiguous or certain predicate changes are implied, make reasonable assumptions based on common sense to fill up the implicit predicate in the PDDL action.\n# STYLE #\nFollow the writing style of technical experts. The output can be parsed by a machine, so it is important to follow the structured format.\n# TONE #\nBe precise and concise in constructing the PDDL action. The PDDL action should be clear and unambiguous.\n# AUDIENCE #\nYour audience is someone who is trying to learn how to construct PDDL actions from natural language descriptions.\n# RESPONSE #\nThe response should be in the following format:\n---\n**Explanation:** [Your explanation here]\n\n**Response:**\nParameters:\n1. ?x - [type]: [parameter description]\n2. ...\n\nPreconditions:\n```\n(and\n    ([predicate_1] ?x)\n)\n```\n\nEffects:\n```\n(and\n    (not ([predicate_2] ?x))\n    ([predicate_2] ?x)\n    ...\n)\n```\n---\n", "type": "prompt"}
{"role": "user", "content": "One or two examples from other domains for illustrating the input and output formats.\nHere are two examples from the newspapers domain for demonstrating the output format.\n        \nDomain information: This domain is structured to model a simple newspaper delivery system, where the main tasks involve picking up newspapers from a home base, moving to different locations, and delivering the papers to locations that require them.\n\nA list of available predicates\n1. (at ?loc - loc) ;; the agent is at loc location\n2. (is_Home_Base ?loc - loc) ;; the location is the home base\n3. (satisfied ?loc - loc) ;; the location has received the newspaper\n4. (wants_Paper ?loc - loc) ;; the location needs a newspaper\n5. (unpacked ?paper - paper) ;; the paper is unpacked\n6. (carrying ?paper - paper) ;; the agent is carrying the paper\nExample 1\nAction Description: RoboDelivery wants to deliver the newspaper to a house (loc_house1).\nRoboDelivery performs the move action to go from loc_home to loc_house1.\n\n    Preconditions: RoboDelivery is at loc_home.\n    Effects: RoboDelivery is no longer at loc_home and is now at loc_house1.\n\nAction name: move\n\n\nYour answer:\n---\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:**\n\nImagine you're playing a game where you need to deliver newspapers to different houses in your neighborhood. Each turn in the game allows you to move from one house to another. The action of moving from one house to another in the game can be compared to an action in our newspaper delivery model.\n\nIn the scenario, the action is called \"move,\" and it involves a delivery person moving from a starting location to a destination. Let's break down why this action is modeled the way it is:\n\n1. **Parameters**: These are like placeholders or markers in our game. In the \"move\" action, the parameters are the Starting Location and the Destination. It's just like saying, \"I'm starting from my house and going to my friend's house.\"\n\n2. **Preconditions**: Before you can move from one house to another, you must be at the house you're starting from. It wouldn't make sense to say, \"I'm going from my house to my friend's house\" if you're actually at the grocery store, right? So, the precondition that the delivery person is at the starting location is crucial to make the action logical.\n\n3. **Effects**: After you move from your house to your friend's house, you are no longer at your house; you are now at your friend's house. That\u2019s what happens in our model, too. The effect of the move action is that the delivery person is no longer at the starting location and is now at the destination. This change is captured in the model by removing the state of being at the starting location (`not (at ?from)`) and adding the state of being at the destination (`(at ?to)`).\n\nSo, this action schema perfectly represents the simple yet essential task of moving from one point to another, ensuring that the game's rules are followed: you start from where you say you are, and you end up where you want to go. It's just like moving pieces on a board game, ensuring each move is valid based on where you are and where you want to be.\n                \n**Response:**\nParameters:\n1. ?paper - paper: [short description of the parameter]\n2. ?loc - loc: [short description of the parameter]\n\nPreconditions:\n```\n(and\n    (at ?loc)\n    (is_Home_Base ?loc)\n    (unpacked ?paper)\n)\n```\n\nEffects:\n```\n(and\n    (not (unpacked ?paper))\n    (carrying ?paper)\n)\n```\n\n---\n", "type": "prompt"}
{"role": "user", "content": "Example 2\nAction Description: RoboDelivery is at the home base (loc_home).\nThere is an unpacked newspaper (paper1) at the home base.\nRoboDelivery performs the pick-up action.\n\n    Preconditions: RoboDelivery is at loc_home (which is the home base), and paper1 is unpacked.\n    Effects: RoboDelivery is now carrying paper1, and paper1 is no longer unpacked.\n\nAction name: pick-up\n\n\nYour answer:\n---\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:**\n\nLet's imagine a situation where someone, like a delivery person, needs to pick up newspapers from a place, like a home base, and deliver them to various locations. This situation can be broken down into smaller, specific steps to make it easy for a computer to understand and execute. This is where the action schema you mentioned comes into play.\n\nThe action is called \"pick-up,\" and it involves the delivery person picking up newspapers to deliver. This action is defined in a language called PDDL, which is like giving a computer a recipe to follow.\n\n1. **Parameters**: These are like ingredients in a recipe. Here, the ingredients are any newspaper (`?paper`) and a location (`?loc`), which in this scenario is the home base.\n\n2. **Preconditions**: These are conditions that must be true before the action can start. Think of it like checking if you have all your ingredients before you start cooking.\n   - `(at ?loc)`: The delivery person must be at the location specified (`?loc`). This makes sure they are actually at the home base to pick up the newspapers.\n   - `(is_Home_Base ?loc)`: The location where they are must be the home base. This is crucial because newspapers ready to be delivered are stored here.\n   - `(unpacked ?paper)`: The newspapers need to be unpacked and ready to be picked up. It ensures the newspapers are not in boxes or still bundled up, making them easy to grab and go.\n\n3. **Effects**: These describe what happens after the action is completed.\n   - `(not (unpacked ?paper))`: The newspaper is no longer in an unpacked state at the base because it has been picked up.\n   - `(carrying ?paper)`: The newspaper is now being carried by the delivery person, ready to be delivered to someone who needs it.\n\nThis schema helps the computer understand exactly what needs to happen when the \"pick-up\" action is called in the program. By specifying preconditions, we ensure the action makes sense (you can't pick up a newspaper if you're not there or if the papers aren't ready). The effects tell the computer how the world changes after the action, like the newspaper moving from being unpacked at the base to being carried for delivery.\n\nBy breaking down tasks this way, we help the computer efficiently and correctly handle tasks that seem simple to us but are quite detailed when programmed.\n                \n**Response:**\nParameters:\n1. ?from - loc: [short description of the parameter]\n2. ?to - loc: [short description of the parameter]\n\nPreconditions:\n```\n(at ?from)\n```\n\nEffects:\n```\n(and\n    (not (at ?from))\n    (at ?to)\n)\n```\n\n---\n", "type": "prompt"}
{"role": "user", "content": "Here are two examples from the doors domain for demonstrating the output format.\n        \nDomain information: This domain is structured to allow navigation and interaction within a space comprising rooms, locations, and doors that can be unlocked with keys. The actions and predicates support movement between locations and the unlocking of rooms.\n\nA list of available predicates\n1. (at ?loc - location) ;; agent is at loc location\n2. (unlocked ?room - room) ;; the room is unlocked\n3. (loc_in_room ?loc - location ?room - room) ;; the location is in the room\n4. (key_at ?key - key ?loc - location) ;; the key is at loc location\n5. (key_for_room ?key - key ?room - room) ;; the key is for the room\nExample 1\nAction Description: The action is like embarking on a small journey from one place to another within a confined space. Imagine you're in a large house with multiple rooms. You're currently in one location, let's say the living room (your starting location). You decide to move to another spot, maybe the kitchen (your ending location). However, there's a catch. The kitchen is behind a door that needs to be unlocked (ending room). So, this action can only happen if the kitchen door is already unlocked. Once you move, you're no longer in the living room but now standing in the kitchen, contemplating what to cook!\n\nAction name: move_to\n\n\nYour answer:\n---\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:**\nImagine you're playing a game where you need to explore different rooms by finding keys that unlock them, much like a treasure hunt. The action called \"pick\" in this game allows you to pick up a key from a specific location so you can unlock a room.\n\nHere\u2019s why the action schema matches your description:\n1. **Parameters**: You have parameters like `?loc` (where the key is found), `?key` (the key you find), and `?room` (the room that the key opens). These parameters help define what the action involves\u2014picking up a key at a location that unlocks a specific room.\n\n2. **Preconditions**:\n   - `(at ?loc)`: This means that you, the player, must be at the same location as the key. It ensures you are in the right place to pick it up, like being in the hallway where the key is on the table.\n   - `(key_at ?key ?loc)`: This ensures that the key you need is indeed at your location. It checks that the key is actually there before you can pick it up.\n   - `(key_for_room ?key ?room)`: This confirms that the key you are about to pick up is the correct one for unlocking the specific room you want to enter, like the attic.\n\n3. **Effects**:\n   - `(not (key_at ?key ?loc))`: Once you pick up the key, it's no longer lying there at the location. This effect updates the game state to show the key has been moved\u2014it's now with you.\n   - `(unlocked ?room)`: The action of picking up the key leads to the room being unlocked. Now, you can enter the room you wanted, such as the attic, which was previously locked.\n\nBy combining these elements, the action of \"pick\" logically lets you find a key and use it to access new areas in the game, opening up more adventures\u2014just like in the story of finding a key to unlock the attic.\n                \n**Response:**\nParameters:\n1. ?sloc - location: [short description of the parameter]\n2. ?eloc - location: [short description of the parameter]\n3. ?eroom - room: [short description of the parameter]\n\nPreconditions:\n```\n(and\n    (at ?sloc)\n    (unlocked ?eroom)\n    (loc_in_room ?eloc ?eroom)\n)\n```\n\nEffects:\n```\n(and\n    (not (at ?sloc))\n    (at ?eloc)\n)\n```\n\n---\n", "type": "prompt"}
{"role": "user", "content": "Example 2\nAction Description: This one is akin to a classic scene in adventure games where you find a key and use it to unlock new areas. Picture yourself in the same house. You find a key lying on a table in the hallway (the key's location). This isn't just any key; it's special because it opens the door to the mysterious attic (the room the key unlocks). By picking up this key, you perform the action. The moment you have the key in your hand, the attic is no longer inaccessible. It's as if the key magically signals the attic door to unlock, waiting for you to discover its secrets.\n\nAction name: pick\n\n\nYour answer:\n---\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:**\nImagine you're playing a game where you're exploring different rooms and finding keys that can unlock new areas. The action called \"pick\" in this game lets you pick up a key that's in the same location as you, which then unlocks a room that the key is meant for. Let's break down how this works in simple terms.\n\nFirst, you need to be in the same location as the key. That's like being in a hallway where you see a key on a table. The action requires that you are right there with the key, which makes sense, right? You can't pick up a key from another room!\n\nNext, the key you find has to be the right one for a specific room. It\u2019s like having a label on the key saying \"this key is for the attic,\" ensuring that you don't try to use a kitchen key to open the attic.\n\nNow, when you pick up the key, the game checks two important things before letting you pick it up:\n1. **You are at the key's location**: You have to be right there where the key is.\n2. **The key is for the room you want to unlock**: This makes sure the key matches the room you\u2019re trying to access.\n\nOnce these conditions are met, and you pick up the key, two things happen:\n1. **The key is no longer at its original location**: Just like in real life, once you pick something up, it's not there anymore.\n2. **The room unlocks**: It\u2019s like the key told the door, \"Hey, open up!\" and now you can go into the attic and explore.\n\nThis action, \"pick,\" neatly connects your action of picking up the key with the effect of unlocking a new room, making the game or the story you're in feel real and connected. The conditions you meet before picking up the key ensure that everything makes sense and flows logically, just like in real life when you need the right key to open a specific door.\n                \n**Response:**\nParameters:\n1. ?loc - location: [short description of the parameter]\n2. ?key - key: [short description of the parameter]\n3. ?room - room: [short description of the parameter]\n\nPreconditions:\n```\n(and\n    (at ?loc)\n    (key_at ?key ?loc)\n    (key_for_room ?key ?room)\n)\n```\n\nEffects:\n```\n(and\n    (not (key_at ?key ?loc))\n    (unlocked ?room)\n)\n```\n\n---\n", "type": "prompt"}
{"role": "user", "content": "Question: Here is the task.\nA natural language description of the domain\nDomain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.\n\nA list of available predicates\n1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf\n2. (on-table ?x - book) ;; ?x is on the table\n3. (accessible ?x - book) ;; ?x is accessible (not covered)\n4. (hands-free) ;; The hands of the librarian are free\n5. (holding ?x - book) ;; The librarian is holding ?x\n6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat\n7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty\n8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full\n9. (book-request ?book - book) ;; There is a request for book ?book\n10. (return-due ?book - book) ;; Book ?book is due for return\n11. (checked-out ?book - book) ;; Book ?book is checked out\n\nAction Description: Mark a book as borrowed by a patron, ensuring it's not already taken.\n\nAction name: check-out\n\n\nYour answer:\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:**\nIn the context of a library, the \"check-out\" action is a fundamental part of the lending process. It involves marking a book as borrowed by a patron. For this action to occur, certain conditions must be met, and certain effects must result from the action. The action ensures that a book is not already taken by another patron and that it is available for check-out.\n\nThe action requires that the book is accessible, meaning it's not covered by another book or otherwise unavailable. Additionally, the librarian's hands must be free to handle the book for check-out. The book also cannot be already checked out by another patron.\n\nOnce the check-out action is performed, the book transitions from being available to being marked as checked out, indicating that it is currently with a patron and not available for others to borrow.\n\n**Response:**\nParameters:\n1. ?book - book: [The book to be checked out]\n\nPreconditions:\n```\n(and\n    (accessible ?book)\n    (hands-free)\n    (not (checked-out ?book))\n)\n```\n\nEffects:\n```\n(and\n    (not (on-shelf ?book ?y))\n    (not (on-table ?book))\n    (checked-out ?book)\n)\n```\n\nNote: The effects state that the book is no longer on the shelf or table, which assumes that the book must have been either on a shelf or on a table before being checked out. If the domain does not require the book to be on a shelf or table before check-out, the effects related to `on-shelf` and `on-table` can be omitted.", "type": "response", "action": "check-out"}
{"role": "system", "content": "# CONTEXT #\nYou are a tool called PDDL Modeling Assistant. You are a technical experts in constructing Planning Domain Definition Language (PDDL) models via the natural language context.\n# OBJECTIVE #\n* Construct parameters, preconditions and effects based on the domain information, action description and the action name.\n* All variables in the preconditions and effects must be listed in the action's parameters. This restriction helps maintain the action's scope and prevents ambiguity in the planning process.\n* Do not use predicates that are not defined in the available predicates list to construct the preconditions and effects.\n* When the natural language description is ambiguous or certain predicate changes are implied, make reasonable assumptions based on common sense to fill up the implicit predicate in the PDDL action.\n# STYLE #\nFollow the writing style of technical experts. The output can be parsed by a machine, so it is important to follow the structured format.\n# TONE #\nBe precise and concise in constructing the PDDL action. The PDDL action should be clear and unambiguous.\n# AUDIENCE #\nYour audience is someone who is trying to learn how to construct PDDL actions from natural language descriptions.\n# RESPONSE #\nThe response should be in the following format:\n---\n**Explanation:** [Your explanation here]\n\n**Response:**\nParameters:\n1. ?x - [type]: [parameter description]\n2. ...\n\nPreconditions:\n```\n(and\n    ([predicate_1] ?x)\n)\n```\n\nEffects:\n```\n(and\n    (not ([predicate_2] ?x))\n    ([predicate_2] ?x)\n    ...\n)\n```\n---\n", "type": "prompt"}
{"role": "user", "content": "One or two examples from other domains for illustrating the input and output formats.\nHere are two examples from the newspapers domain for demonstrating the output format.\n        \nDomain information: This domain is structured to model a simple newspaper delivery system, where the main tasks involve picking up newspapers from a home base, moving to different locations, and delivering the papers to locations that require them.\n\nA list of available predicates\n1. (at ?loc - loc) ;; the agent is at loc location\n2. (is_Home_Base ?loc - loc) ;; the location is the home base\n3. (satisfied ?loc - loc) ;; the location has received the newspaper\n4. (wants_Paper ?loc - loc) ;; the location needs a newspaper\n5. (unpacked ?paper - paper) ;; the paper is unpacked\n6. (carrying ?paper - paper) ;; the agent is carrying the paper\nExample 1\nAction Description: RoboDelivery wants to deliver the newspaper to a house (loc_house1).\nRoboDelivery performs the move action to go from loc_home to loc_house1.\n\n    Preconditions: RoboDelivery is at loc_home.\n    Effects: RoboDelivery is no longer at loc_home and is now at loc_house1.\n\nAction name: move\n\n\nYour answer:\n---\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:**\n\nImagine you're playing a game where you need to deliver newspapers to different houses in your neighborhood. Each turn in the game allows you to move from one house to another. The action of moving from one house to another in the game can be compared to an action in our newspaper delivery model.\n\nIn the scenario, the action is called \"move,\" and it involves a delivery person moving from a starting location to a destination. Let's break down why this action is modeled the way it is:\n\n1. **Parameters**: These are like placeholders or markers in our game. In the \"move\" action, the parameters are the Starting Location and the Destination. It's just like saying, \"I'm starting from my house and going to my friend's house.\"\n\n2. **Preconditions**: Before you can move from one house to another, you must be at the house you're starting from. It wouldn't make sense to say, \"I'm going from my house to my friend's house\" if you're actually at the grocery store, right? So, the precondition that the delivery person is at the starting location is crucial to make the action logical.\n\n3. **Effects**: After you move from your house to your friend's house, you are no longer at your house; you are now at your friend's house. That\u2019s what happens in our model, too. The effect of the move action is that the delivery person is no longer at the starting location and is now at the destination. This change is captured in the model by removing the state of being at the starting location (`not (at ?from)`) and adding the state of being at the destination (`(at ?to)`).\n\nSo, this action schema perfectly represents the simple yet essential task of moving from one point to another, ensuring that the game's rules are followed: you start from where you say you are, and you end up where you want to go. It's just like moving pieces on a board game, ensuring each move is valid based on where you are and where you want to be.\n                \n**Response:**\nParameters:\n1. ?paper - paper: [short description of the parameter]\n2. ?loc - loc: [short description of the parameter]\n\nPreconditions:\n```\n(and\n    (at ?loc)\n    (is_Home_Base ?loc)\n    (unpacked ?paper)\n)\n```\n\nEffects:\n```\n(and\n    (not (unpacked ?paper))\n    (carrying ?paper)\n)\n```\n\n---\n", "type": "prompt"}
{"role": "user", "content": "Example 2\nAction Description: RoboDelivery is at the home base (loc_home).\nThere is an unpacked newspaper (paper1) at the home base.\nRoboDelivery performs the pick-up action.\n\n    Preconditions: RoboDelivery is at loc_home (which is the home base), and paper1 is unpacked.\n    Effects: RoboDelivery is now carrying paper1, and paper1 is no longer unpacked.\n\nAction name: pick-up\n\n\nYour answer:\n---\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:**\n\nLet's imagine a situation where someone, like a delivery person, needs to pick up newspapers from a place, like a home base, and deliver them to various locations. This situation can be broken down into smaller, specific steps to make it easy for a computer to understand and execute. This is where the action schema you mentioned comes into play.\n\nThe action is called \"pick-up,\" and it involves the delivery person picking up newspapers to deliver. This action is defined in a language called PDDL, which is like giving a computer a recipe to follow.\n\n1. **Parameters**: These are like ingredients in a recipe. Here, the ingredients are any newspaper (`?paper`) and a location (`?loc`), which in this scenario is the home base.\n\n2. **Preconditions**: These are conditions that must be true before the action can start. Think of it like checking if you have all your ingredients before you start cooking.\n   - `(at ?loc)`: The delivery person must be at the location specified (`?loc`). This makes sure they are actually at the home base to pick up the newspapers.\n   - `(is_Home_Base ?loc)`: The location where they are must be the home base. This is crucial because newspapers ready to be delivered are stored here.\n   - `(unpacked ?paper)`: The newspapers need to be unpacked and ready to be picked up. It ensures the newspapers are not in boxes or still bundled up, making them easy to grab and go.\n\n3. **Effects**: These describe what happens after the action is completed.\n   - `(not (unpacked ?paper))`: The newspaper is no longer in an unpacked state at the base because it has been picked up.\n   - `(carrying ?paper)`: The newspaper is now being carried by the delivery person, ready to be delivered to someone who needs it.\n\nThis schema helps the computer understand exactly what needs to happen when the \"pick-up\" action is called in the program. By specifying preconditions, we ensure the action makes sense (you can't pick up a newspaper if you're not there or if the papers aren't ready). The effects tell the computer how the world changes after the action, like the newspaper moving from being unpacked at the base to being carried for delivery.\n\nBy breaking down tasks this way, we help the computer efficiently and correctly handle tasks that seem simple to us but are quite detailed when programmed.\n                \n**Response:**\nParameters:\n1. ?from - loc: [short description of the parameter]\n2. ?to - loc: [short description of the parameter]\n\nPreconditions:\n```\n(at ?from)\n```\n\nEffects:\n```\n(and\n    (not (at ?from))\n    (at ?to)\n)\n```\n\n---\n", "type": "prompt"}
{"role": "user", "content": "Here are two examples from the doors domain for demonstrating the output format.\n        \nDomain information: This domain is structured to allow navigation and interaction within a space comprising rooms, locations, and doors that can be unlocked with keys. The actions and predicates support movement between locations and the unlocking of rooms.\n\nA list of available predicates\n1. (at ?loc - location) ;; agent is at loc location\n2. (unlocked ?room - room) ;; the room is unlocked\n3. (loc_in_room ?loc - location ?room - room) ;; the location is in the room\n4. (key_at ?key - key ?loc - location) ;; the key is at loc location\n5. (key_for_room ?key - key ?room - room) ;; the key is for the room\nExample 1\nAction Description: This one is akin to a classic scene in adventure games where you find a key and use it to unlock new areas. Picture yourself in the same house. You find a key lying on a table in the hallway (the key's location). This isn't just any key; it's special because it opens the door to the mysterious attic (the room the key unlocks). By picking up this key, you perform the action. The moment you have the key in your hand, the attic is no longer inaccessible. It's as if the key magically signals the attic door to unlock, waiting for you to discover its secrets.\n\nAction name: pick\n\n\nYour answer:\n---\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:**\nImagine you're playing a game where you're exploring different rooms and finding keys that can unlock new areas. The action called \"pick\" in this game lets you pick up a key that's in the same location as you, which then unlocks a room that the key is meant for. Let's break down how this works in simple terms.\n\nFirst, you need to be in the same location as the key. That's like being in a hallway where you see a key on a table. The action requires that you are right there with the key, which makes sense, right? You can't pick up a key from another room!\n\nNext, the key you find has to be the right one for a specific room. It\u2019s like having a label on the key saying \"this key is for the attic,\" ensuring that you don't try to use a kitchen key to open the attic.\n\nNow, when you pick up the key, the game checks two important things before letting you pick it up:\n1. **You are at the key's location**: You have to be right there where the key is.\n2. **The key is for the room you want to unlock**: This makes sure the key matches the room you\u2019re trying to access.\n\nOnce these conditions are met, and you pick up the key, two things happen:\n1. **The key is no longer at its original location**: Just like in real life, once you pick something up, it's not there anymore.\n2. **The room unlocks**: It\u2019s like the key told the door, \"Hey, open up!\" and now you can go into the attic and explore.\n\nThis action, \"pick,\" neatly connects your action of picking up the key with the effect of unlocking a new room, making the game or the story you're in feel real and connected. The conditions you meet before picking up the key ensure that everything makes sense and flows logically, just like in real life when you need the right key to open a specific door.\n                \n**Response:**\nParameters:\n1. ?sloc - location: [short description of the parameter]\n2. ?eloc - location: [short description of the parameter]\n3. ?eroom - room: [short description of the parameter]\n\nPreconditions:\n```\n(and\n    (at ?sloc)\n    (unlocked ?eroom)\n    (loc_in_room ?eloc ?eroom)\n)\n```\n\nEffects:\n```\n(and\n    (not (at ?sloc))\n    (at ?eloc)\n)\n```\n\n---\n", "type": "prompt"}
{"role": "user", "content": "Example 2\nAction Description: The action is like embarking on a small journey from one place to another within a confined space. Imagine you're in a large house with multiple rooms. You're currently in one location, let's say the living room (your starting location). You decide to move to another spot, maybe the kitchen (your ending location). However, there's a catch. The kitchen is behind a door that needs to be unlocked (ending room). So, this action can only happen if the kitchen door is already unlocked. Once you move, you're no longer in the living room but now standing in the kitchen, contemplating what to cook!\n\nAction name: move_to\n\n\nYour answer:\n---\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:**\nImagine you're playing a game where you need to explore different rooms by finding keys that unlock them, much like a treasure hunt. The action called \"pick\" in this game allows you to pick up a key from a specific location so you can unlock a room.\n\nHere\u2019s why the action schema matches your description:\n1. **Parameters**: You have parameters like `?loc` (where the key is found), `?key` (the key you find), and `?room` (the room that the key opens). These parameters help define what the action involves\u2014picking up a key at a location that unlocks a specific room.\n\n2. **Preconditions**:\n   - `(at ?loc)`: This means that you, the player, must be at the same location as the key. It ensures you are in the right place to pick it up, like being in the hallway where the key is on the table.\n   - `(key_at ?key ?loc)`: This ensures that the key you need is indeed at your location. It checks that the key is actually there before you can pick it up.\n   - `(key_for_room ?key ?room)`: This confirms that the key you are about to pick up is the correct one for unlocking the specific room you want to enter, like the attic.\n\n3. **Effects**:\n   - `(not (key_at ?key ?loc))`: Once you pick up the key, it's no longer lying there at the location. This effect updates the game state to show the key has been moved\u2014it's now with you.\n   - `(unlocked ?room)`: The action of picking up the key leads to the room being unlocked. Now, you can enter the room you wanted, such as the attic, which was previously locked.\n\nBy combining these elements, the action of \"pick\" logically lets you find a key and use it to access new areas in the game, opening up more adventures\u2014just like in the story of finding a key to unlock the attic.\n                \n**Response:**\nParameters:\n1. ?loc - location: [short description of the parameter]\n2. ?key - key: [short description of the parameter]\n3. ?room - room: [short description of the parameter]\n\nPreconditions:\n```\n(and\n    (at ?loc)\n    (key_at ?key ?loc)\n    (key_for_room ?key ?room)\n)\n```\n\nEffects:\n```\n(and\n    (not (key_at ?key ?loc))\n    (unlocked ?room)\n)\n```\n\n---\n", "type": "prompt"}
{"role": "user", "content": "Question: Here is the task.\nA natural language description of the domain\nDomain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.\n\nA list of available predicates\n1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf\n2. (on-table ?x - book) ;; ?x is on the table\n3. (accessible ?x - book) ;; ?x is accessible (not covered)\n4. (hands-free) ;; The hands of the librarian are free\n5. (holding ?x - book) ;; The librarian is holding ?x\n6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat\n7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty\n8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full\n9. (book-request ?book - book) ;; There is a request for book ?book\n10. (return-due ?book - book) ;; Book ?book is due for return\n11. (checked-out ?book - book) ;; Book ?book is checked out\n\nAction Description: Record a book as returned by a patron when you're holding it.\n\nAction name: return-book\n\n\nYour answer:\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:**\nIn the context of a library, the action \"return-book\" represents the process of a librarian recording a book as returned once they are physically holding it. This action ensures that the book's status is updated in the library system, reflecting that it is no longer checked out and is available for others to borrow.\n\nTo perform this action, certain conditions must be met, and specific changes to the state of the library system should occur as a result. Let's break down the preconditions and effects:\n\n1. **Preconditions**:\n   - `(holding ?book)`: The librarian must be holding the book that is being returned. This ensures that the librarian has the book in their possession before recording it as returned.\n\n2. **Effects**:\n   - `(not (checked-out ?book))`: Once the book is returned, it should no longer be marked as checked out in the system. This effect updates the book's status to reflect its availability.\n\nAdditionally, while not explicitly mentioned in the action description, it is implied that the book should no longer be marked as due for return once it has been returned. Therefore, we include the following effect:\n   - `(not (return-due ?book))`: The book is no longer due for return after it has been returned.\n\nThe parameters for this action include the book that is being returned, which is necessary to specify which book's status is being updated.\n\n**Response:**\nParameters:\n1. ?book - book: [The book that is being returned by the patron]\n\nPreconditions:\n```\n(and\n    (holding ?book)\n)\n```\n\nEffects:\n```\n(and\n    (not (checked-out ?book))\n    (not (return-due ?book))\n)\n```", "type": "response", "action": "return-book"}
