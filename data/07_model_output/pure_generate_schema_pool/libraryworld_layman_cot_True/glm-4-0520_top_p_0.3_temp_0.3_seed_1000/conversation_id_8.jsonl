{"role": "system", "content": "# CONTEXT #\nYou are a tool called PDDL Modeling Assistant. You are a technical experts in constructing Planning Domain Definition Language (PDDL) models via the natural language context.\n# OBJECTIVE #\n* Construct parameters, preconditions and effects based on the domain information, action description and the action name.\n* All variables in the preconditions and effects must be listed in the action's parameters. This restriction helps maintain the action's scope and prevents ambiguity in the planning process.\n* Do not use predicates that are not defined in the available predicates list to construct the preconditions and effects.\n* When the natural language description is ambiguous or certain predicate changes are implied, make reasonable assumptions based on common sense to fill up the implicit predicate in the PDDL action.\n# STYLE #\nFollow the writing style of technical experts. The output can be parsed by a machine, so it is important to follow the structured format.\n# TONE #\nBe precise and concise in constructing the PDDL action. The PDDL action should be clear and unambiguous.\n# AUDIENCE #\nYour audience is someone who is trying to learn how to construct PDDL actions from natural language descriptions.\n# RESPONSE #\nThe response should be in the following format:\n---\n**Explanation:** [Your explanation here]\n\n**Response:**\nParameters:\n1. ?x - [type]: [parameter description]\n2. ...\n\nPreconditions:\n```\n(and\n    ([predicate_1] ?x)\n)\n```\n\nEffects:\n```\n(and\n    (not ([predicate_2] ?x))\n    ([predicate_2] ?x)\n    ...\n)\n```\n---\n", "type": "prompt"}
{"role": "user", "content": "One or two examples from other domains for illustrating the input and output formats.\nHere are two examples from the doors domain for demonstrating the output format.\n        \nDomain information: This domain is structured to allow navigation and interaction within a space comprising rooms, locations, and doors that can be unlocked with keys. The actions and predicates support movement between locations and the unlocking of rooms.\n\nA list of available predicates\n1. (at ?loc - location) ;; agent is at loc location\n2. (unlocked ?room - room) ;; the room is unlocked\n3. (loc_in_room ?loc - location ?room - room) ;; the location is in the room\n4. (key_at ?key - key ?loc - location) ;; the key is at loc location\n5. (key_for_room ?key - key ?room - room) ;; the key is for the room\nExample 1\nAction Description: This one is akin to a classic scene in adventure games where you find a key and use it to unlock new areas. Picture yourself in the same house. You find a key lying on a table in the hallway (the key's location). This isn't just any key; it's special because it opens the door to the mysterious attic (the room the key unlocks). By picking up this key, you perform the action. The moment you have the key in your hand, the attic is no longer inaccessible. It's as if the key magically signals the attic door to unlock, waiting for you to discover its secrets.\n\nAction name: pick\n\n\nYour answer:\n---\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:**\nImagine you're playing a game where you're exploring different rooms and finding keys that can unlock new areas. The action called \"pick\" in this game lets you pick up a key that's in the same location as you, which then unlocks a room that the key is meant for. Let's break down how this works in simple terms.\n\nFirst, you need to be in the same location as the key. That's like being in a hallway where you see a key on a table. The action requires that you are right there with the key, which makes sense, right? You can't pick up a key from another room!\n\nNext, the key you find has to be the right one for a specific room. It\u2019s like having a label on the key saying \"this key is for the attic,\" ensuring that you don't try to use a kitchen key to open the attic.\n\nNow, when you pick up the key, the game checks two important things before letting you pick it up:\n1. **You are at the key's location**: You have to be right there where the key is.\n2. **The key is for the room you want to unlock**: This makes sure the key matches the room you\u2019re trying to access.\n\nOnce these conditions are met, and you pick up the key, two things happen:\n1. **The key is no longer at its original location**: Just like in real life, once you pick something up, it's not there anymore.\n2. **The room unlocks**: It\u2019s like the key told the door, \"Hey, open up!\" and now you can go into the attic and explore.\n\nThis action, \"pick,\" neatly connects your action of picking up the key with the effect of unlocking a new room, making the game or the story you're in feel real and connected. The conditions you meet before picking up the key ensure that everything makes sense and flows logically, just like in real life when you need the right key to open a specific door.\n                \n**Response:**\nParameters:\n1. ?sloc - location: [short description of the parameter]\n2. ?eloc - location: [short description of the parameter]\n3. ?eroom - room: [short description of the parameter]\n\nPreconditions:\n```\n(and\n    (at ?sloc)\n    (unlocked ?eroom)\n    (loc_in_room ?eloc ?eroom)\n)\n```\n\nEffects:\n```\n(and\n    (not (at ?sloc))\n    (at ?eloc)\n)\n```\n\n---\n", "type": "prompt"}
{"role": "user", "content": "Example 2\nAction Description: The action is like embarking on a small journey from one place to another within a confined space. Imagine you're in a large house with multiple rooms. You're currently in one location, let's say the living room (your starting location). You decide to move to another spot, maybe the kitchen (your ending location). However, there's a catch. The kitchen is behind a door that needs to be unlocked (ending room). So, this action can only happen if the kitchen door is already unlocked. Once you move, you're no longer in the living room but now standing in the kitchen, contemplating what to cook!\n\nAction name: move_to\n\n\nYour answer:\n---\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:**\nImagine you're playing a game where you need to explore different rooms by finding keys that unlock them, much like a treasure hunt. The action called \"pick\" in this game allows you to pick up a key from a specific location so you can unlock a room.\n\nHere\u2019s why the action schema matches your description:\n1. **Parameters**: You have parameters like `?loc` (where the key is found), `?key` (the key you find), and `?room` (the room that the key opens). These parameters help define what the action involves\u2014picking up a key at a location that unlocks a specific room.\n\n2. **Preconditions**:\n   - `(at ?loc)`: This means that you, the player, must be at the same location as the key. It ensures you are in the right place to pick it up, like being in the hallway where the key is on the table.\n   - `(key_at ?key ?loc)`: This ensures that the key you need is indeed at your location. It checks that the key is actually there before you can pick it up.\n   - `(key_for_room ?key ?room)`: This confirms that the key you are about to pick up is the correct one for unlocking the specific room you want to enter, like the attic.\n\n3. **Effects**:\n   - `(not (key_at ?key ?loc))`: Once you pick up the key, it's no longer lying there at the location. This effect updates the game state to show the key has been moved\u2014it's now with you.\n   - `(unlocked ?room)`: The action of picking up the key leads to the room being unlocked. Now, you can enter the room you wanted, such as the attic, which was previously locked.\n\nBy combining these elements, the action of \"pick\" logically lets you find a key and use it to access new areas in the game, opening up more adventures\u2014just like in the story of finding a key to unlock the attic.\n                \n**Response:**\nParameters:\n1. ?loc - location: [short description of the parameter]\n2. ?key - key: [short description of the parameter]\n3. ?room - room: [short description of the parameter]\n\nPreconditions:\n```\n(and\n    (at ?loc)\n    (key_at ?key ?loc)\n    (key_for_room ?key ?room)\n)\n```\n\nEffects:\n```\n(and\n    (not (key_at ?key ?loc))\n    (unlocked ?room)\n)\n```\n\n---\n", "type": "prompt"}
{"role": "user", "content": "Here are two examples from the newspapers domain for demonstrating the output format.\n        \nDomain information: This domain is structured to model a simple newspaper delivery system, where the main tasks involve picking up newspapers from a home base, moving to different locations, and delivering the papers to locations that require them.\n\nA list of available predicates\n1. (at ?loc - loc) ;; the agent is at loc location\n2. (is_Home_Base ?loc - loc) ;; the location is the home base\n3. (satisfied ?loc - loc) ;; the location has received the newspaper\n4. (wants_Paper ?loc - loc) ;; the location needs a newspaper\n5. (unpacked ?paper - paper) ;; the paper is unpacked\n6. (carrying ?paper - paper) ;; the agent is carrying the paper\nExample 1\nAction Description: The house at loc_house1 wants a newspaper.\nRoboDelivery performs the deliver action to give paper1 to the house.\n\n    Preconditions: RoboDelivery is at loc_house1, the house wants a newspaper, and RoboDelivery is carrying paper1.\n    Effects: RoboDelivery is no longer carrying paper1, the house at loc_house1 no longer wants a newspaper, and the house at loc_house1 is satisfied.\n\nAction name: deliver\n\n\nYour answer:\n---\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:**\n\nLet's think of the action of delivering a newspaper like a simple task you might do every day, like delivering a letter to your neighbor. The description given helps us understand how a delivery person can complete their job of delivering newspapers effectively in a systematic way, which is where the PDDL (a planning language) comes into play.\n\n1. **Preconditions: Why are they necessary?**\n   - The delivery person must be at the right location (`at ?loc`): Just like if you were to deliver a letter to your neighbor, you need to be at their house, not yours! This ensures the newspaper is delivered to the correct place.\n   - The delivery location wants a newspaper (`wants_Paper ?loc`): This makes sure that the delivery person is not just going around giving out newspapers to places that don't need them. It\u2019s like checking if your neighbor actually needs the letter before you walk over.\n   - The delivery person must be carrying the newspaper (`carrying ?paper`): This is pretty straightforward\u2014just as you can't deliver a letter that you don't have in your hand, the delivery person needs to have the newspaper with them to deliver it.\n\n2. **Effects: How do they follow from the preconditions?**\n   - The newspaper is no longer being carried by the delivery person (`not (carrying ?paper)`): Once the delivery is done, just like handing over a letter, the newspaper is no longer with the delivery person.\n   - The delivery location no longer wants the newspaper (`not (wants_Paper ?loc)`): The need for the newspaper has been met, similar to how your neighbor no longer waits for the letter once you've delivered it.\n   - The location is satisfied (`satisfied ?loc`): This indicates that the delivery was successful. The location got what it was waiting for, just like your neighbor feeling happy receiving the letter.\n\nIn summary, the action of delivering a newspaper in this PDDL model ensures that everything needed to complete a successful delivery is in place before the delivery starts, and once done, it updates the state to reflect the successful completion of the task. It's about making sure you have what you need, going where you need to go, and ensuring the task is completed as expected!\n                \n**Response:**\nParameters:\n1. ?paper - paper: [short description of the parameter]\n2. ?loc - loc: [short description of the parameter]\n\nPreconditions:\n```\n(and\n    (at ?loc)\n    (wants_Paper ?loc)\n    (carrying ?paper)\n)\n```\n\nEffects:\n```\n(and\n    (not (carrying ?paper))\n    (not (wants_Paper ?loc))\n    (satisfied ?loc)\n)\n```\n\n---\n", "type": "prompt"}
{"role": "user", "content": "Example 2\nAction Description: RoboDelivery is at the home base (loc_home).\nThere is an unpacked newspaper (paper1) at the home base.\nRoboDelivery performs the pick-up action.\n\n    Preconditions: RoboDelivery is at loc_home (which is the home base), and paper1 is unpacked.\n    Effects: RoboDelivery is now carrying paper1, and paper1 is no longer unpacked.\n\nAction name: pick-up\n\n\nYour answer:\n---\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:**\n\nLet's imagine a situation where someone, like a delivery person, needs to pick up newspapers from a place, like a home base, and deliver them to various locations. This situation can be broken down into smaller, specific steps to make it easy for a computer to understand and execute. This is where the action schema you mentioned comes into play.\n\nThe action is called \"pick-up,\" and it involves the delivery person picking up newspapers to deliver. This action is defined in a language called PDDL, which is like giving a computer a recipe to follow.\n\n1. **Parameters**: These are like ingredients in a recipe. Here, the ingredients are any newspaper (`?paper`) and a location (`?loc`), which in this scenario is the home base.\n\n2. **Preconditions**: These are conditions that must be true before the action can start. Think of it like checking if you have all your ingredients before you start cooking.\n   - `(at ?loc)`: The delivery person must be at the location specified (`?loc`). This makes sure they are actually at the home base to pick up the newspapers.\n   - `(is_Home_Base ?loc)`: The location where they are must be the home base. This is crucial because newspapers ready to be delivered are stored here.\n   - `(unpacked ?paper)`: The newspapers need to be unpacked and ready to be picked up. It ensures the newspapers are not in boxes or still bundled up, making them easy to grab and go.\n\n3. **Effects**: These describe what happens after the action is completed.\n   - `(not (unpacked ?paper))`: The newspaper is no longer in an unpacked state at the base because it has been picked up.\n   - `(carrying ?paper)`: The newspaper is now being carried by the delivery person, ready to be delivered to someone who needs it.\n\nThis schema helps the computer understand exactly what needs to happen when the \"pick-up\" action is called in the program. By specifying preconditions, we ensure the action makes sense (you can't pick up a newspaper if you're not there or if the papers aren't ready). The effects tell the computer how the world changes after the action, like the newspaper moving from being unpacked at the base to being carried for delivery.\n\nBy breaking down tasks this way, we help the computer efficiently and correctly handle tasks that seem simple to us but are quite detailed when programmed.\n                \n**Response:**\nParameters:\n1. ?paper - paper: [short description of the parameter]\n2. ?loc - loc: [short description of the parameter]\n\nPreconditions:\n```\n(and\n    (at ?loc)\n    (is_Home_Base ?loc)\n    (unpacked ?paper)\n)\n```\n\nEffects:\n```\n(and\n    (not (unpacked ?paper))\n    (carrying ?paper)\n)\n```\n\n---\n", "type": "prompt"}
{"role": "user", "content": "Question: Here is the task.\nA natural language description of the domain\nDomain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.\n\nA list of available predicates\n1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf\n2. (on-table ?x - book) ;; ?x is on the table\n3. (accessible ?x - book) ;; ?x is accessible (not covered)\n4. (hands-free) ;; The hands of the librarian are free\n5. (holding ?x - book) ;; The librarian is holding ?x\n6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat\n7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty\n8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full\n9. (book-request ?book - book) ;; There is a request for book ?book\n10. (return-due ?book - book) ;; Book ?book is due for return\n11. (checked-out ?book - book) ;; Book ?book is checked out\n\nAction Description: Pick up a book from the table if it's not covered and your hands are empty.\n\nAction name: take-from-table\n\n\nYour answer:\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:**\n\nIn the context of a library, the action \"take-from-table\" represents the task of a librarian picking up a book from a table. This action is only feasible under certain conditions to ensure the book can be picked up without any issues. The natural language description specifies two main conditions that must be met before the librarian can perform this action: the book must not be covered (i.e., it must be accessible), and the librarian's hands must be free to pick up the book.\n\nThe action's preconditions ensure that the librarian is not trying to pick up a book that is inaccessible or while their hands are occupied with another book. The effects of the action describe the change in the state of the world once the action is completed: the book that was on the table is now being held by the librarian, and it is no longer on the table.\n\n**Response:**\nParameters:\n1. ?book - book: [The book to be picked up from the table]\n\nPreconditions:\n```\n(and\n    (on-table ?book)\n    (accessible ?book)\n    (hands-free)\n)\n```\n\nEffects:\n```\n(and\n    (not (on-table ?book))\n    (holding ?book)\n)\n```\n\n---", "type": "response", "action": "take-from-table"}
{"role": "system", "content": "# CONTEXT #\nYou are a tool called PDDL Modeling Assistant. You are a technical experts in constructing Planning Domain Definition Language (PDDL) models via the natural language context.\n# OBJECTIVE #\n* Construct parameters, preconditions and effects based on the domain information, action description and the action name.\n* All variables in the preconditions and effects must be listed in the action's parameters. This restriction helps maintain the action's scope and prevents ambiguity in the planning process.\n* Do not use predicates that are not defined in the available predicates list to construct the preconditions and effects.\n* When the natural language description is ambiguous or certain predicate changes are implied, make reasonable assumptions based on common sense to fill up the implicit predicate in the PDDL action.\n# STYLE #\nFollow the writing style of technical experts. The output can be parsed by a machine, so it is important to follow the structured format.\n# TONE #\nBe precise and concise in constructing the PDDL action. The PDDL action should be clear and unambiguous.\n# AUDIENCE #\nYour audience is someone who is trying to learn how to construct PDDL actions from natural language descriptions.\n# RESPONSE #\nThe response should be in the following format:\n---\n**Explanation:** [Your explanation here]\n\n**Response:**\nParameters:\n1. ?x - [type]: [parameter description]\n2. ...\n\nPreconditions:\n```\n(and\n    ([predicate_1] ?x)\n)\n```\n\nEffects:\n```\n(and\n    (not ([predicate_2] ?x))\n    ([predicate_2] ?x)\n    ...\n)\n```\n---\n", "type": "prompt"}
{"role": "user", "content": "One or two examples from other domains for illustrating the input and output formats.\nHere are two examples from the doors domain for demonstrating the output format.\n        \nDomain information: This domain is structured to allow navigation and interaction within a space comprising rooms, locations, and doors that can be unlocked with keys. The actions and predicates support movement between locations and the unlocking of rooms.\n\nA list of available predicates\n1. (at ?loc - location) ;; agent is at loc location\n2. (unlocked ?room - room) ;; the room is unlocked\n3. (loc_in_room ?loc - location ?room - room) ;; the location is in the room\n4. (key_at ?key - key ?loc - location) ;; the key is at loc location\n5. (key_for_room ?key - key ?room - room) ;; the key is for the room\nExample 1\nAction Description: The action is like embarking on a small journey from one place to another within a confined space. Imagine you're in a large house with multiple rooms. You're currently in one location, let's say the living room (your starting location). You decide to move to another spot, maybe the kitchen (your ending location). However, there's a catch. The kitchen is behind a door that needs to be unlocked (ending room). So, this action can only happen if the kitchen door is already unlocked. Once you move, you're no longer in the living room but now standing in the kitchen, contemplating what to cook!\n\nAction name: move_to\n\n\nYour answer:\n---\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:**\nImagine you're playing a game where you need to explore different rooms by finding keys that unlock them, much like a treasure hunt. The action called \"pick\" in this game allows you to pick up a key from a specific location so you can unlock a room.\n\nHere\u2019s why the action schema matches your description:\n1. **Parameters**: You have parameters like `?loc` (where the key is found), `?key` (the key you find), and `?room` (the room that the key opens). These parameters help define what the action involves\u2014picking up a key at a location that unlocks a specific room.\n\n2. **Preconditions**:\n   - `(at ?loc)`: This means that you, the player, must be at the same location as the key. It ensures you are in the right place to pick it up, like being in the hallway where the key is on the table.\n   - `(key_at ?key ?loc)`: This ensures that the key you need is indeed at your location. It checks that the key is actually there before you can pick it up.\n   - `(key_for_room ?key ?room)`: This confirms that the key you are about to pick up is the correct one for unlocking the specific room you want to enter, like the attic.\n\n3. **Effects**:\n   - `(not (key_at ?key ?loc))`: Once you pick up the key, it's no longer lying there at the location. This effect updates the game state to show the key has been moved\u2014it's now with you.\n   - `(unlocked ?room)`: The action of picking up the key leads to the room being unlocked. Now, you can enter the room you wanted, such as the attic, which was previously locked.\n\nBy combining these elements, the action of \"pick\" logically lets you find a key and use it to access new areas in the game, opening up more adventures\u2014just like in the story of finding a key to unlock the attic.\n                \n**Response:**\nParameters:\n1. ?sloc - location: [short description of the parameter]\n2. ?eloc - location: [short description of the parameter]\n3. ?eroom - room: [short description of the parameter]\n\nPreconditions:\n```\n(and\n    (at ?sloc)\n    (unlocked ?eroom)\n    (loc_in_room ?eloc ?eroom)\n)\n```\n\nEffects:\n```\n(and\n    (not (at ?sloc))\n    (at ?eloc)\n)\n```\n\n---\n", "type": "prompt"}
{"role": "user", "content": "Example 2\nAction Description: This one is akin to a classic scene in adventure games where you find a key and use it to unlock new areas. Picture yourself in the same house. You find a key lying on a table in the hallway (the key's location). This isn't just any key; it's special because it opens the door to the mysterious attic (the room the key unlocks). By picking up this key, you perform the action. The moment you have the key in your hand, the attic is no longer inaccessible. It's as if the key magically signals the attic door to unlock, waiting for you to discover its secrets.\n\nAction name: pick\n\n\nYour answer:\n---\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:**\nImagine you're playing a game where you're exploring different rooms and finding keys that can unlock new areas. The action called \"pick\" in this game lets you pick up a key that's in the same location as you, which then unlocks a room that the key is meant for. Let's break down how this works in simple terms.\n\nFirst, you need to be in the same location as the key. That's like being in a hallway where you see a key on a table. The action requires that you are right there with the key, which makes sense, right? You can't pick up a key from another room!\n\nNext, the key you find has to be the right one for a specific room. It\u2019s like having a label on the key saying \"this key is for the attic,\" ensuring that you don't try to use a kitchen key to open the attic.\n\nNow, when you pick up the key, the game checks two important things before letting you pick it up:\n1. **You are at the key's location**: You have to be right there where the key is.\n2. **The key is for the room you want to unlock**: This makes sure the key matches the room you\u2019re trying to access.\n\nOnce these conditions are met, and you pick up the key, two things happen:\n1. **The key is no longer at its original location**: Just like in real life, once you pick something up, it's not there anymore.\n2. **The room unlocks**: It\u2019s like the key told the door, \"Hey, open up!\" and now you can go into the attic and explore.\n\nThis action, \"pick,\" neatly connects your action of picking up the key with the effect of unlocking a new room, making the game or the story you're in feel real and connected. The conditions you meet before picking up the key ensure that everything makes sense and flows logically, just like in real life when you need the right key to open a specific door.\n                \n**Response:**\nParameters:\n1. ?loc - location: [short description of the parameter]\n2. ?key - key: [short description of the parameter]\n3. ?room - room: [short description of the parameter]\n\nPreconditions:\n```\n(and\n    (at ?loc)\n    (key_at ?key ?loc)\n    (key_for_room ?key ?room)\n)\n```\n\nEffects:\n```\n(and\n    (not (key_at ?key ?loc))\n    (unlocked ?room)\n)\n```\n\n---\n", "type": "prompt"}
{"role": "user", "content": "Here are two examples from the newspapers domain for demonstrating the output format.\n        \nDomain information: This domain is structured to model a simple newspaper delivery system, where the main tasks involve picking up newspapers from a home base, moving to different locations, and delivering the papers to locations that require them.\n\nA list of available predicates\n1. (at ?loc - loc) ;; the agent is at loc location\n2. (is_Home_Base ?loc - loc) ;; the location is the home base\n3. (satisfied ?loc - loc) ;; the location has received the newspaper\n4. (wants_Paper ?loc - loc) ;; the location needs a newspaper\n5. (unpacked ?paper - paper) ;; the paper is unpacked\n6. (carrying ?paper - paper) ;; the agent is carrying the paper\nExample 1\nAction Description: RoboDelivery is at the home base (loc_home).\nThere is an unpacked newspaper (paper1) at the home base.\nRoboDelivery performs the pick-up action.\n\n    Preconditions: RoboDelivery is at loc_home (which is the home base), and paper1 is unpacked.\n    Effects: RoboDelivery is now carrying paper1, and paper1 is no longer unpacked.\n\nAction name: pick-up\n\n\nYour answer:\n---\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:**\n\nLet's imagine a situation where someone, like a delivery person, needs to pick up newspapers from a place, like a home base, and deliver them to various locations. This situation can be broken down into smaller, specific steps to make it easy for a computer to understand and execute. This is where the action schema you mentioned comes into play.\n\nThe action is called \"pick-up,\" and it involves the delivery person picking up newspapers to deliver. This action is defined in a language called PDDL, which is like giving a computer a recipe to follow.\n\n1. **Parameters**: These are like ingredients in a recipe. Here, the ingredients are any newspaper (`?paper`) and a location (`?loc`), which in this scenario is the home base.\n\n2. **Preconditions**: These are conditions that must be true before the action can start. Think of it like checking if you have all your ingredients before you start cooking.\n   - `(at ?loc)`: The delivery person must be at the location specified (`?loc`). This makes sure they are actually at the home base to pick up the newspapers.\n   - `(is_Home_Base ?loc)`: The location where they are must be the home base. This is crucial because newspapers ready to be delivered are stored here.\n   - `(unpacked ?paper)`: The newspapers need to be unpacked and ready to be picked up. It ensures the newspapers are not in boxes or still bundled up, making them easy to grab and go.\n\n3. **Effects**: These describe what happens after the action is completed.\n   - `(not (unpacked ?paper))`: The newspaper is no longer in an unpacked state at the base because it has been picked up.\n   - `(carrying ?paper)`: The newspaper is now being carried by the delivery person, ready to be delivered to someone who needs it.\n\nThis schema helps the computer understand exactly what needs to happen when the \"pick-up\" action is called in the program. By specifying preconditions, we ensure the action makes sense (you can't pick up a newspaper if you're not there or if the papers aren't ready). The effects tell the computer how the world changes after the action, like the newspaper moving from being unpacked at the base to being carried for delivery.\n\nBy breaking down tasks this way, we help the computer efficiently and correctly handle tasks that seem simple to us but are quite detailed when programmed.\n                \n**Response:**\nParameters:\n1. ?paper - paper: [short description of the parameter]\n2. ?loc - loc: [short description of the parameter]\n\nPreconditions:\n```\n(and\n    (at ?loc)\n    (wants_Paper ?loc)\n    (carrying ?paper)\n)\n```\n\nEffects:\n```\n(and\n    (not (carrying ?paper))\n    (not (wants_Paper ?loc))\n    (satisfied ?loc)\n)\n```\n\n---\n", "type": "prompt"}
{"role": "user", "content": "Example 2\nAction Description: The house at loc_house1 wants a newspaper.\nRoboDelivery performs the deliver action to give paper1 to the house.\n\n    Preconditions: RoboDelivery is at loc_house1, the house wants a newspaper, and RoboDelivery is carrying paper1.\n    Effects: RoboDelivery is no longer carrying paper1, the house at loc_house1 no longer wants a newspaper, and the house at loc_house1 is satisfied.\n\nAction name: deliver\n\n\nYour answer:\n---\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:**\n\nLet's think of the action of delivering a newspaper like a simple task you might do every day, like delivering a letter to your neighbor. The description given helps us understand how a delivery person can complete their job of delivering newspapers effectively in a systematic way, which is where the PDDL (a planning language) comes into play.\n\n1. **Preconditions: Why are they necessary?**\n   - The delivery person must be at the right location (`at ?loc`): Just like if you were to deliver a letter to your neighbor, you need to be at their house, not yours! This ensures the newspaper is delivered to the correct place.\n   - The delivery location wants a newspaper (`wants_Paper ?loc`): This makes sure that the delivery person is not just going around giving out newspapers to places that don't need them. It\u2019s like checking if your neighbor actually needs the letter before you walk over.\n   - The delivery person must be carrying the newspaper (`carrying ?paper`): This is pretty straightforward\u2014just as you can't deliver a letter that you don't have in your hand, the delivery person needs to have the newspaper with them to deliver it.\n\n2. **Effects: How do they follow from the preconditions?**\n   - The newspaper is no longer being carried by the delivery person (`not (carrying ?paper)`): Once the delivery is done, just like handing over a letter, the newspaper is no longer with the delivery person.\n   - The delivery location no longer wants the newspaper (`not (wants_Paper ?loc)`): The need for the newspaper has been met, similar to how your neighbor no longer waits for the letter once you've delivered it.\n   - The location is satisfied (`satisfied ?loc`): This indicates that the delivery was successful. The location got what it was waiting for, just like your neighbor feeling happy receiving the letter.\n\nIn summary, the action of delivering a newspaper in this PDDL model ensures that everything needed to complete a successful delivery is in place before the delivery starts, and once done, it updates the state to reflect the successful completion of the task. It's about making sure you have what you need, going where you need to go, and ensuring the task is completed as expected!\n                \n**Response:**\nParameters:\n1. ?paper - paper: [short description of the parameter]\n2. ?loc - loc: [short description of the parameter]\n\nPreconditions:\n```\n(and\n    (at ?loc)\n    (is_Home_Base ?loc)\n    (unpacked ?paper)\n)\n```\n\nEffects:\n```\n(and\n    (not (unpacked ?paper))\n    (carrying ?paper)\n)\n```\n\n---\n", "type": "prompt"}
{"role": "user", "content": "Question: Here is the task.\nA natural language description of the domain\nDomain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.\n\nA list of available predicates\n1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf\n2. (on-table ?x - book) ;; ?x is on the table\n3. (accessible ?x - book) ;; ?x is accessible (not covered)\n4. (hands-free) ;; The hands of the librarian are free\n5. (holding ?x - book) ;; The librarian is holding ?x\n6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat\n7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty\n8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full\n9. (book-request ?book - book) ;; There is a request for book ?book\n10. (return-due ?book - book) ;; Book ?book is due for return\n11. (checked-out ?book - book) ;; Book ?book is checked out\n\nAction Description: Put a book you're holding onto the table, making it accessible.\n\nAction name: place-on-table\n\n\nYour answer:\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:**\n\nIn the context of a library, the action of placing a book on a table is a fundamental task that a librarian might perform. This action ensures that a book is made accessible to patrons, possibly for reading or for fulfilling a book request. The PDDL action \"place-on-table\" models this behavior by specifying what needs to be true before the action can be executed (preconditions) and what changes as a result of the action (effects).\n\nThe preconditions for this action are straightforward:\n- The librarian must be holding a book (`holding ?book`): This ensures that the librarian has the book in their possession before attempting to place it on the table.\n- The librarian's hands must be free (`hands-free`): This is a logical assumption that the librarian can only place a book on the table if their hands are free to do so.\n\nThe effects of the action describe the outcome:\n- The book that was being held is now on the table (`on-table ?book`): This updates the state of the book to reflect its new location.\n- The book is accessible (`accessible ?book`): This predicate indicates that the book is now available for use or to fulfill a request.\n- The librarian is no longer holding the book (`not (holding ?book)`): This updates the state of the librarian's hands, indicating that they are free to perform other tasks.\n\n**Response:**\nParameters:\n1. ?book - book: [The book that the librarian is holding and will be placed on the table]\n\nPreconditions:\n```\n(and\n    (holding ?book)\n    (hands-free)\n)\n```\n\nEffects:\n```\n(and\n    (not (holding ?book))\n    (on-table ?book)\n    (accessible ?book)\n)\n```\n\nNote: The `hands-free` precondition in the response is actually not necessary based on the action description, as holding a book implies that the librarian's hands are not free. However, if the domain requires that hands must be free to perform any action, then it would be included. The response above assumes that the domain does not have such a requirement.", "type": "response", "action": "place-on-table"}
{"role": "system", "content": "# CONTEXT #\nYou are a tool called PDDL Modeling Assistant. You are a technical experts in constructing Planning Domain Definition Language (PDDL) models via the natural language context.\n# OBJECTIVE #\n* Construct parameters, preconditions and effects based on the domain information, action description and the action name.\n* All variables in the preconditions and effects must be listed in the action's parameters. This restriction helps maintain the action's scope and prevents ambiguity in the planning process.\n* Do not use predicates that are not defined in the available predicates list to construct the preconditions and effects.\n* When the natural language description is ambiguous or certain predicate changes are implied, make reasonable assumptions based on common sense to fill up the implicit predicate in the PDDL action.\n# STYLE #\nFollow the writing style of technical experts. The output can be parsed by a machine, so it is important to follow the structured format.\n# TONE #\nBe precise and concise in constructing the PDDL action. The PDDL action should be clear and unambiguous.\n# AUDIENCE #\nYour audience is someone who is trying to learn how to construct PDDL actions from natural language descriptions.\n# RESPONSE #\nThe response should be in the following format:\n---\n**Explanation:** [Your explanation here]\n\n**Response:**\nParameters:\n1. ?x - [type]: [parameter description]\n2. ...\n\nPreconditions:\n```\n(and\n    ([predicate_1] ?x)\n)\n```\n\nEffects:\n```\n(and\n    (not ([predicate_2] ?x))\n    ([predicate_2] ?x)\n    ...\n)\n```\n---\n", "type": "prompt"}
{"role": "user", "content": "One or two examples from other domains for illustrating the input and output formats.\nHere are two examples from the doors domain for demonstrating the output format.\n        \nDomain information: This domain is structured to allow navigation and interaction within a space comprising rooms, locations, and doors that can be unlocked with keys. The actions and predicates support movement between locations and the unlocking of rooms.\n\nA list of available predicates\n1. (at ?loc - location) ;; agent is at loc location\n2. (unlocked ?room - room) ;; the room is unlocked\n3. (loc_in_room ?loc - location ?room - room) ;; the location is in the room\n4. (key_at ?key - key ?loc - location) ;; the key is at loc location\n5. (key_for_room ?key - key ?room - room) ;; the key is for the room\nExample 1\nAction Description: This one is akin to a classic scene in adventure games where you find a key and use it to unlock new areas. Picture yourself in the same house. You find a key lying on a table in the hallway (the key's location). This isn't just any key; it's special because it opens the door to the mysterious attic (the room the key unlocks). By picking up this key, you perform the action. The moment you have the key in your hand, the attic is no longer inaccessible. It's as if the key magically signals the attic door to unlock, waiting for you to discover its secrets.\n\nAction name: pick\n\n\nYour answer:\n---\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:**\nImagine you're playing a game where you're exploring different rooms and finding keys that can unlock new areas. The action called \"pick\" in this game lets you pick up a key that's in the same location as you, which then unlocks a room that the key is meant for. Let's break down how this works in simple terms.\n\nFirst, you need to be in the same location as the key. That's like being in a hallway where you see a key on a table. The action requires that you are right there with the key, which makes sense, right? You can't pick up a key from another room!\n\nNext, the key you find has to be the right one for a specific room. It\u2019s like having a label on the key saying \"this key is for the attic,\" ensuring that you don't try to use a kitchen key to open the attic.\n\nNow, when you pick up the key, the game checks two important things before letting you pick it up:\n1. **You are at the key's location**: You have to be right there where the key is.\n2. **The key is for the room you want to unlock**: This makes sure the key matches the room you\u2019re trying to access.\n\nOnce these conditions are met, and you pick up the key, two things happen:\n1. **The key is no longer at its original location**: Just like in real life, once you pick something up, it's not there anymore.\n2. **The room unlocks**: It\u2019s like the key told the door, \"Hey, open up!\" and now you can go into the attic and explore.\n\nThis action, \"pick,\" neatly connects your action of picking up the key with the effect of unlocking a new room, making the game or the story you're in feel real and connected. The conditions you meet before picking up the key ensure that everything makes sense and flows logically, just like in real life when you need the right key to open a specific door.\n                \n**Response:**\nParameters:\n1. ?sloc - location: [short description of the parameter]\n2. ?eloc - location: [short description of the parameter]\n3. ?eroom - room: [short description of the parameter]\n\nPreconditions:\n```\n(and\n    (at ?sloc)\n    (unlocked ?eroom)\n    (loc_in_room ?eloc ?eroom)\n)\n```\n\nEffects:\n```\n(and\n    (not (at ?sloc))\n    (at ?eloc)\n)\n```\n\n---\n", "type": "prompt"}
{"role": "user", "content": "Example 2\nAction Description: The action is like embarking on a small journey from one place to another within a confined space. Imagine you're in a large house with multiple rooms. You're currently in one location, let's say the living room (your starting location). You decide to move to another spot, maybe the kitchen (your ending location). However, there's a catch. The kitchen is behind a door that needs to be unlocked (ending room). So, this action can only happen if the kitchen door is already unlocked. Once you move, you're no longer in the living room but now standing in the kitchen, contemplating what to cook!\n\nAction name: move_to\n\n\nYour answer:\n---\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:**\nImagine you're playing a game where you need to explore different rooms by finding keys that unlock them, much like a treasure hunt. The action called \"pick\" in this game allows you to pick up a key from a specific location so you can unlock a room.\n\nHere\u2019s why the action schema matches your description:\n1. **Parameters**: You have parameters like `?loc` (where the key is found), `?key` (the key you find), and `?room` (the room that the key opens). These parameters help define what the action involves\u2014picking up a key at a location that unlocks a specific room.\n\n2. **Preconditions**:\n   - `(at ?loc)`: This means that you, the player, must be at the same location as the key. It ensures you are in the right place to pick it up, like being in the hallway where the key is on the table.\n   - `(key_at ?key ?loc)`: This ensures that the key you need is indeed at your location. It checks that the key is actually there before you can pick it up.\n   - `(key_for_room ?key ?room)`: This confirms that the key you are about to pick up is the correct one for unlocking the specific room you want to enter, like the attic.\n\n3. **Effects**:\n   - `(not (key_at ?key ?loc))`: Once you pick up the key, it's no longer lying there at the location. This effect updates the game state to show the key has been moved\u2014it's now with you.\n   - `(unlocked ?room)`: The action of picking up the key leads to the room being unlocked. Now, you can enter the room you wanted, such as the attic, which was previously locked.\n\nBy combining these elements, the action of \"pick\" logically lets you find a key and use it to access new areas in the game, opening up more adventures\u2014just like in the story of finding a key to unlock the attic.\n                \n**Response:**\nParameters:\n1. ?loc - location: [short description of the parameter]\n2. ?key - key: [short description of the parameter]\n3. ?room - room: [short description of the parameter]\n\nPreconditions:\n```\n(and\n    (at ?loc)\n    (key_at ?key ?loc)\n    (key_for_room ?key ?room)\n)\n```\n\nEffects:\n```\n(and\n    (not (key_at ?key ?loc))\n    (unlocked ?room)\n)\n```\n\n---\n", "type": "prompt"}
{"role": "user", "content": "Here are two examples from the newspapers domain for demonstrating the output format.\n        \nDomain information: This domain is structured to model a simple newspaper delivery system, where the main tasks involve picking up newspapers from a home base, moving to different locations, and delivering the papers to locations that require them.\n\nA list of available predicates\n1. (at ?loc - loc) ;; the agent is at loc location\n2. (is_Home_Base ?loc - loc) ;; the location is the home base\n3. (satisfied ?loc - loc) ;; the location has received the newspaper\n4. (wants_Paper ?loc - loc) ;; the location needs a newspaper\n5. (unpacked ?paper - paper) ;; the paper is unpacked\n6. (carrying ?paper - paper) ;; the agent is carrying the paper\nExample 1\nAction Description: The house at loc_house1 wants a newspaper.\nRoboDelivery performs the deliver action to give paper1 to the house.\n\n    Preconditions: RoboDelivery is at loc_house1, the house wants a newspaper, and RoboDelivery is carrying paper1.\n    Effects: RoboDelivery is no longer carrying paper1, the house at loc_house1 no longer wants a newspaper, and the house at loc_house1 is satisfied.\n\nAction name: deliver\n\n\nYour answer:\n---\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:**\n\nLet's think of the action of delivering a newspaper like a simple task you might do every day, like delivering a letter to your neighbor. The description given helps us understand how a delivery person can complete their job of delivering newspapers effectively in a systematic way, which is where the PDDL (a planning language) comes into play.\n\n1. **Preconditions: Why are they necessary?**\n   - The delivery person must be at the right location (`at ?loc`): Just like if you were to deliver a letter to your neighbor, you need to be at their house, not yours! This ensures the newspaper is delivered to the correct place.\n   - The delivery location wants a newspaper (`wants_Paper ?loc`): This makes sure that the delivery person is not just going around giving out newspapers to places that don't need them. It\u2019s like checking if your neighbor actually needs the letter before you walk over.\n   - The delivery person must be carrying the newspaper (`carrying ?paper`): This is pretty straightforward\u2014just as you can't deliver a letter that you don't have in your hand, the delivery person needs to have the newspaper with them to deliver it.\n\n2. **Effects: How do they follow from the preconditions?**\n   - The newspaper is no longer being carried by the delivery person (`not (carrying ?paper)`): Once the delivery is done, just like handing over a letter, the newspaper is no longer with the delivery person.\n   - The delivery location no longer wants the newspaper (`not (wants_Paper ?loc)`): The need for the newspaper has been met, similar to how your neighbor no longer waits for the letter once you've delivered it.\n   - The location is satisfied (`satisfied ?loc`): This indicates that the delivery was successful. The location got what it was waiting for, just like your neighbor feeling happy receiving the letter.\n\nIn summary, the action of delivering a newspaper in this PDDL model ensures that everything needed to complete a successful delivery is in place before the delivery starts, and once done, it updates the state to reflect the successful completion of the task. It's about making sure you have what you need, going where you need to go, and ensuring the task is completed as expected!\n                \n**Response:**\nParameters:\n1. ?paper - paper: [short description of the parameter]\n2. ?loc - loc: [short description of the parameter]\n\nPreconditions:\n```\n(and\n    (at ?loc)\n    (wants_Paper ?loc)\n    (carrying ?paper)\n)\n```\n\nEffects:\n```\n(and\n    (not (carrying ?paper))\n    (not (wants_Paper ?loc))\n    (satisfied ?loc)\n)\n```\n\n---\n", "type": "prompt"}
{"role": "user", "content": "Example 2\nAction Description: RoboDelivery wants to deliver the newspaper to a house (loc_house1).\nRoboDelivery performs the move action to go from loc_home to loc_house1.\n\n    Preconditions: RoboDelivery is at loc_home.\n    Effects: RoboDelivery is no longer at loc_home and is now at loc_house1.\n\nAction name: move\n\n\nYour answer:\n---\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:**\n\nImagine you're playing a game where you need to deliver newspapers to different houses in your neighborhood. Each turn in the game allows you to move from one house to another. The action of moving from one house to another in the game can be compared to an action in our newspaper delivery model.\n\nIn the scenario, the action is called \"move,\" and it involves a delivery person moving from a starting location to a destination. Let's break down why this action is modeled the way it is:\n\n1. **Parameters**: These are like placeholders or markers in our game. In the \"move\" action, the parameters are the Starting Location and the Destination. It's just like saying, \"I'm starting from my house and going to my friend's house.\"\n\n2. **Preconditions**: Before you can move from one house to another, you must be at the house you're starting from. It wouldn't make sense to say, \"I'm going from my house to my friend's house\" if you're actually at the grocery store, right? So, the precondition that the delivery person is at the starting location is crucial to make the action logical.\n\n3. **Effects**: After you move from your house to your friend's house, you are no longer at your house; you are now at your friend's house. That\u2019s what happens in our model, too. The effect of the move action is that the delivery person is no longer at the starting location and is now at the destination. This change is captured in the model by removing the state of being at the starting location (`not (at ?from)`) and adding the state of being at the destination (`(at ?to)`).\n\nSo, this action schema perfectly represents the simple yet essential task of moving from one point to another, ensuring that the game's rules are followed: you start from where you say you are, and you end up where you want to go. It's just like moving pieces on a board game, ensuring each move is valid based on where you are and where you want to be.\n                \n**Response:**\nParameters:\n1. ?from - loc: [short description of the parameter]\n2. ?to - loc: [short description of the parameter]\n\nPreconditions:\n```\n(at ?from)\n```\n\nEffects:\n```\n(and\n    (not (at ?from))\n    (at ?to)\n)\n```\n\n---\n", "type": "prompt"}
{"role": "user", "content": "Question: Here is the task.\nA natural language description of the domain\nDomain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.\n\nA list of available predicates\n1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf\n2. (on-table ?x - book) ;; ?x is on the table\n3. (accessible ?x - book) ;; ?x is accessible (not covered)\n4. (hands-free) ;; The hands of the librarian are free\n5. (holding ?x - book) ;; The librarian is holding ?x\n6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat\n7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty\n8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full\n9. (book-request ?book - book) ;; There is a request for book ?book\n10. (return-due ?book - book) ;; Book ?book is due for return\n11. (checked-out ?book - book) ;; Book ?book is checked out\n\nAction Description: Put a book you're holding on top of another accessible book on the shelf.\n\nAction name: place-on-shelf\n\n\nYour answer:\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:**\n\nIn the context of a library, the action \"place-on-shelf\" involves a librarian placing a book that they are currently holding onto a shelf, specifically on top of another book that is already on the shelf and is accessible. This action ensures that books are organized in a way that maintains accessibility and utilizes shelf space effectively.\n\nTo perform this action, certain conditions must be met, and certain outcomes are expected once the action is completed:\n\n1. **Preconditions**:\n   - The librarian must be holding a book (`holding ?book`): This ensures that the librarian has the book that needs to be placed on the shelf.\n   - There must be another book on the shelf that is accessible (`on-shelf ?other-book` and `accessible ?other-book`): This means that the book the librarian wants to place on top of must be on the shelf and not covered by other books, making it possible to place another book on top of it.\n   - The librarian's hands must be free (`hands-free`): This might seem redundant since we're stating that the librarian is holding a book, but in a more complex domain, this could be used to check for other constraints, such as carrying multiple items.\n\n2. **Effects**:\n   - The book that was being held is now on the shelf (`on-shelf ?book`): This updates the state to reflect that the book is no longer in the librarian's hands but is now on the shelf.\n   - The librarian is no longer holding the book (`not (holding ?book)`): This effect ensures that the librarian's state is updated to reflect that their hands are now free to perform other actions.\n\nThe action does not explicitly state that the book being placed should no longer be on the table, but this could be inferred if the domain rules dictate that a book cannot be on a table and on a shelf at the same time.\n\n**Response:**\nParameters:\n1. ?book - book: [The book that the librarian is holding and will place on the shelf]\n2. ?other-book - book: [The book that is already on the shelf and accessible]\n\nPreconditions:\n```\n(and\n    (holding ?book)\n    (on-shelf ?other-book)\n    (accessible ?other-book)\n    (hands-free)\n)\n```\n\nEffects:\n```\n(and\n    (not (holding ?book))\n    (on-shelf ?book)\n)\n```\n\nNote: The `hands-free` precondition might be omitted if the domain rules ensure that a librarian can only hold one book at a time, making it implicitly true when the librarian is not holding any book. The response above includes it for completeness based on the provided predicates.", "type": "response", "action": "place-on-shelf"}
{"role": "system", "content": "# CONTEXT #\nYou are a tool called PDDL Modeling Assistant. You are a technical experts in constructing Planning Domain Definition Language (PDDL) models via the natural language context.\n# OBJECTIVE #\n* Construct parameters, preconditions and effects based on the domain information, action description and the action name.\n* All variables in the preconditions and effects must be listed in the action's parameters. This restriction helps maintain the action's scope and prevents ambiguity in the planning process.\n* Do not use predicates that are not defined in the available predicates list to construct the preconditions and effects.\n* When the natural language description is ambiguous or certain predicate changes are implied, make reasonable assumptions based on common sense to fill up the implicit predicate in the PDDL action.\n# STYLE #\nFollow the writing style of technical experts. The output can be parsed by a machine, so it is important to follow the structured format.\n# TONE #\nBe precise and concise in constructing the PDDL action. The PDDL action should be clear and unambiguous.\n# AUDIENCE #\nYour audience is someone who is trying to learn how to construct PDDL actions from natural language descriptions.\n# RESPONSE #\nThe response should be in the following format:\n---\n**Explanation:** [Your explanation here]\n\n**Response:**\nParameters:\n1. ?x - [type]: [parameter description]\n2. ...\n\nPreconditions:\n```\n(and\n    ([predicate_1] ?x)\n)\n```\n\nEffects:\n```\n(and\n    (not ([predicate_2] ?x))\n    ([predicate_2] ?x)\n    ...\n)\n```\n---\n", "type": "prompt"}
{"role": "user", "content": "One or two examples from other domains for illustrating the input and output formats.\nHere are two examples from the doors domain for demonstrating the output format.\n        \nDomain information: This domain is structured to allow navigation and interaction within a space comprising rooms, locations, and doors that can be unlocked with keys. The actions and predicates support movement between locations and the unlocking of rooms.\n\nA list of available predicates\n1. (at ?loc - location) ;; agent is at loc location\n2. (unlocked ?room - room) ;; the room is unlocked\n3. (loc_in_room ?loc - location ?room - room) ;; the location is in the room\n4. (key_at ?key - key ?loc - location) ;; the key is at loc location\n5. (key_for_room ?key - key ?room - room) ;; the key is for the room\nExample 1\nAction Description: This one is akin to a classic scene in adventure games where you find a key and use it to unlock new areas. Picture yourself in the same house. You find a key lying on a table in the hallway (the key's location). This isn't just any key; it's special because it opens the door to the mysterious attic (the room the key unlocks). By picking up this key, you perform the action. The moment you have the key in your hand, the attic is no longer inaccessible. It's as if the key magically signals the attic door to unlock, waiting for you to discover its secrets.\n\nAction name: pick\n\n\nYour answer:\n---\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:**\nImagine you're playing a game where you're exploring different rooms and finding keys that can unlock new areas. The action called \"pick\" in this game lets you pick up a key that's in the same location as you, which then unlocks a room that the key is meant for. Let's break down how this works in simple terms.\n\nFirst, you need to be in the same location as the key. That's like being in a hallway where you see a key on a table. The action requires that you are right there with the key, which makes sense, right? You can't pick up a key from another room!\n\nNext, the key you find has to be the right one for a specific room. It\u2019s like having a label on the key saying \"this key is for the attic,\" ensuring that you don't try to use a kitchen key to open the attic.\n\nNow, when you pick up the key, the game checks two important things before letting you pick it up:\n1. **You are at the key's location**: You have to be right there where the key is.\n2. **The key is for the room you want to unlock**: This makes sure the key matches the room you\u2019re trying to access.\n\nOnce these conditions are met, and you pick up the key, two things happen:\n1. **The key is no longer at its original location**: Just like in real life, once you pick something up, it's not there anymore.\n2. **The room unlocks**: It\u2019s like the key told the door, \"Hey, open up!\" and now you can go into the attic and explore.\n\nThis action, \"pick,\" neatly connects your action of picking up the key with the effect of unlocking a new room, making the game or the story you're in feel real and connected. The conditions you meet before picking up the key ensure that everything makes sense and flows logically, just like in real life when you need the right key to open a specific door.\n                \n**Response:**\nParameters:\n1. ?sloc - location: [short description of the parameter]\n2. ?eloc - location: [short description of the parameter]\n3. ?eroom - room: [short description of the parameter]\n\nPreconditions:\n```\n(and\n    (at ?sloc)\n    (unlocked ?eroom)\n    (loc_in_room ?eloc ?eroom)\n)\n```\n\nEffects:\n```\n(and\n    (not (at ?sloc))\n    (at ?eloc)\n)\n```\n\n---\n", "type": "prompt"}
{"role": "user", "content": "Example 2\nAction Description: The action is like embarking on a small journey from one place to another within a confined space. Imagine you're in a large house with multiple rooms. You're currently in one location, let's say the living room (your starting location). You decide to move to another spot, maybe the kitchen (your ending location). However, there's a catch. The kitchen is behind a door that needs to be unlocked (ending room). So, this action can only happen if the kitchen door is already unlocked. Once you move, you're no longer in the living room but now standing in the kitchen, contemplating what to cook!\n\nAction name: move_to\n\n\nYour answer:\n---\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:**\nImagine you're playing a game where you need to explore different rooms by finding keys that unlock them, much like a treasure hunt. The action called \"pick\" in this game allows you to pick up a key from a specific location so you can unlock a room.\n\nHere\u2019s why the action schema matches your description:\n1. **Parameters**: You have parameters like `?loc` (where the key is found), `?key` (the key you find), and `?room` (the room that the key opens). These parameters help define what the action involves\u2014picking up a key at a location that unlocks a specific room.\n\n2. **Preconditions**:\n   - `(at ?loc)`: This means that you, the player, must be at the same location as the key. It ensures you are in the right place to pick it up, like being in the hallway where the key is on the table.\n   - `(key_at ?key ?loc)`: This ensures that the key you need is indeed at your location. It checks that the key is actually there before you can pick it up.\n   - `(key_for_room ?key ?room)`: This confirms that the key you are about to pick up is the correct one for unlocking the specific room you want to enter, like the attic.\n\n3. **Effects**:\n   - `(not (key_at ?key ?loc))`: Once you pick up the key, it's no longer lying there at the location. This effect updates the game state to show the key has been moved\u2014it's now with you.\n   - `(unlocked ?room)`: The action of picking up the key leads to the room being unlocked. Now, you can enter the room you wanted, such as the attic, which was previously locked.\n\nBy combining these elements, the action of \"pick\" logically lets you find a key and use it to access new areas in the game, opening up more adventures\u2014just like in the story of finding a key to unlock the attic.\n                \n**Response:**\nParameters:\n1. ?loc - location: [short description of the parameter]\n2. ?key - key: [short description of the parameter]\n3. ?room - room: [short description of the parameter]\n\nPreconditions:\n```\n(and\n    (at ?loc)\n    (key_at ?key ?loc)\n    (key_for_room ?key ?room)\n)\n```\n\nEffects:\n```\n(and\n    (not (key_at ?key ?loc))\n    (unlocked ?room)\n)\n```\n\n---\n", "type": "prompt"}
{"role": "user", "content": "Here are two examples from the newspapers domain for demonstrating the output format.\n        \nDomain information: This domain is structured to model a simple newspaper delivery system, where the main tasks involve picking up newspapers from a home base, moving to different locations, and delivering the papers to locations that require them.\n\nA list of available predicates\n1. (at ?loc - loc) ;; the agent is at loc location\n2. (is_Home_Base ?loc - loc) ;; the location is the home base\n3. (satisfied ?loc - loc) ;; the location has received the newspaper\n4. (wants_Paper ?loc - loc) ;; the location needs a newspaper\n5. (unpacked ?paper - paper) ;; the paper is unpacked\n6. (carrying ?paper - paper) ;; the agent is carrying the paper\nExample 1\nAction Description: RoboDelivery wants to deliver the newspaper to a house (loc_house1).\nRoboDelivery performs the move action to go from loc_home to loc_house1.\n\n    Preconditions: RoboDelivery is at loc_home.\n    Effects: RoboDelivery is no longer at loc_home and is now at loc_house1.\n\nAction name: move\n\n\nYour answer:\n---\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:**\n\nImagine you're playing a game where you need to deliver newspapers to different houses in your neighborhood. Each turn in the game allows you to move from one house to another. The action of moving from one house to another in the game can be compared to an action in our newspaper delivery model.\n\nIn the scenario, the action is called \"move,\" and it involves a delivery person moving from a starting location to a destination. Let's break down why this action is modeled the way it is:\n\n1. **Parameters**: These are like placeholders or markers in our game. In the \"move\" action, the parameters are the Starting Location and the Destination. It's just like saying, \"I'm starting from my house and going to my friend's house.\"\n\n2. **Preconditions**: Before you can move from one house to another, you must be at the house you're starting from. It wouldn't make sense to say, \"I'm going from my house to my friend's house\" if you're actually at the grocery store, right? So, the precondition that the delivery person is at the starting location is crucial to make the action logical.\n\n3. **Effects**: After you move from your house to your friend's house, you are no longer at your house; you are now at your friend's house. That\u2019s what happens in our model, too. The effect of the move action is that the delivery person is no longer at the starting location and is now at the destination. This change is captured in the model by removing the state of being at the starting location (`not (at ?from)`) and adding the state of being at the destination (`(at ?to)`).\n\nSo, this action schema perfectly represents the simple yet essential task of moving from one point to another, ensuring that the game's rules are followed: you start from where you say you are, and you end up where you want to go. It's just like moving pieces on a board game, ensuring each move is valid based on where you are and where you want to be.\n                \n**Response:**\nParameters:\n1. ?paper - paper: [short description of the parameter]\n2. ?loc - loc: [short description of the parameter]\n\nPreconditions:\n```\n(and\n    (at ?loc)\n    (wants_Paper ?loc)\n    (carrying ?paper)\n)\n```\n\nEffects:\n```\n(and\n    (not (carrying ?paper))\n    (not (wants_Paper ?loc))\n    (satisfied ?loc)\n)\n```\n\n---\n", "type": "prompt"}
{"role": "user", "content": "Example 2\nAction Description: The house at loc_house1 wants a newspaper.\nRoboDelivery performs the deliver action to give paper1 to the house.\n\n    Preconditions: RoboDelivery is at loc_house1, the house wants a newspaper, and RoboDelivery is carrying paper1.\n    Effects: RoboDelivery is no longer carrying paper1, the house at loc_house1 no longer wants a newspaper, and the house at loc_house1 is satisfied.\n\nAction name: deliver\n\n\nYour answer:\n---\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:**\n\nLet's think of the action of delivering a newspaper like a simple task you might do every day, like delivering a letter to your neighbor. The description given helps us understand how a delivery person can complete their job of delivering newspapers effectively in a systematic way, which is where the PDDL (a planning language) comes into play.\n\n1. **Preconditions: Why are they necessary?**\n   - The delivery person must be at the right location (`at ?loc`): Just like if you were to deliver a letter to your neighbor, you need to be at their house, not yours! This ensures the newspaper is delivered to the correct place.\n   - The delivery location wants a newspaper (`wants_Paper ?loc`): This makes sure that the delivery person is not just going around giving out newspapers to places that don't need them. It\u2019s like checking if your neighbor actually needs the letter before you walk over.\n   - The delivery person must be carrying the newspaper (`carrying ?paper`): This is pretty straightforward\u2014just as you can't deliver a letter that you don't have in your hand, the delivery person needs to have the newspaper with them to deliver it.\n\n2. **Effects: How do they follow from the preconditions?**\n   - The newspaper is no longer being carried by the delivery person (`not (carrying ?paper)`): Once the delivery is done, just like handing over a letter, the newspaper is no longer with the delivery person.\n   - The delivery location no longer wants the newspaper (`not (wants_Paper ?loc)`): The need for the newspaper has been met, similar to how your neighbor no longer waits for the letter once you've delivered it.\n   - The location is satisfied (`satisfied ?loc`): This indicates that the delivery was successful. The location got what it was waiting for, just like your neighbor feeling happy receiving the letter.\n\nIn summary, the action of delivering a newspaper in this PDDL model ensures that everything needed to complete a successful delivery is in place before the delivery starts, and once done, it updates the state to reflect the successful completion of the task. It's about making sure you have what you need, going where you need to go, and ensuring the task is completed as expected!\n                \n**Response:**\nParameters:\n1. ?from - loc: [short description of the parameter]\n2. ?to - loc: [short description of the parameter]\n\nPreconditions:\n```\n(at ?from)\n```\n\nEffects:\n```\n(and\n    (not (at ?from))\n    (at ?to)\n)\n```\n\n---\n", "type": "prompt"}
{"role": "user", "content": "Question: Here is the task.\nA natural language description of the domain\nDomain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.\n\nA list of available predicates\n1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf\n2. (on-table ?x - book) ;; ?x is on the table\n3. (accessible ?x - book) ;; ?x is accessible (not covered)\n4. (hands-free) ;; The hands of the librarian are free\n5. (holding ?x - book) ;; The librarian is holding ?x\n6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat\n7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty\n8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full\n9. (book-request ?book - book) ;; There is a request for book ?book\n10. (return-due ?book - book) ;; Book ?book is due for return\n11. (checked-out ?book - book) ;; Book ?book is checked out\n\nAction Description: Pick up an accessible book from the shelf if your hands are empty, making the book underneath accessible.\n\nAction name: remove-from-shelf\n\n\nYour answer:\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:**\n\nIn the context of the library domain, the action \"remove-from-shelf\" represents the physical act of a librarian picking up a book from a shelf. This action is subject to certain conditions and results in changes to the state of the library system. Let's break down the action:\n\n1. **Preconditions**:\n   - The librarian's hands must be free (`hands-free`): This ensures that the librarian is not already holding another book when attempting to pick up a new one.\n   - The book to be removed must be accessible (`accessible ?book`): This means the book is not covered or blocked by another book, making it possible to be picked up.\n   - The book must be on the shelf (`on-shelf ?book ?underneath_book`): This identifies the book that is to be removed and the book that will become accessible once the top book is removed.\n\n2. **Effects**:\n   - The book is no longer on the shelf (`not (on-shelf ?book ?underneath_book)`): This reflects the removal of the book from its previous position.\n   - The book is now being held by the librarian (`holding ?book`): This updates the state to show that the librarian is now in possession of the book.\n   - The book that was underneath is now accessible (`accessible ?underneath_book`): This effect ensures that the book previously covered by the removed book is now available for other actions, such as being picked up or moved.\n\nThe action \"remove-from-shelf\" is a key part of managing the physical arrangement of books within the library and is essential for tasks such as restocking shelves or retrieving a book for a patron.\n\n**Response:**\nParameters:\n1. ?book - book: [The book to be removed from the shelf]\n2. ?underneath_book - book: [The book that will become accessible once ?book is removed]\n\nPreconditions:\n```\n(and\n    (hands-free)\n    (on-shelf ?book ?underneath_book)\n    (accessible ?book)\n)\n```\n\nEffects:\n```\n(and\n    (not (on-shelf ?book ?underneath_book))\n    (holding ?book)\n    (accessible ?underneath_book)\n)\n```", "type": "response", "action": "remove-from-shelf"}
{"role": "system", "content": "# CONTEXT #\nYou are a tool called PDDL Modeling Assistant. You are a technical experts in constructing Planning Domain Definition Language (PDDL) models via the natural language context.\n# OBJECTIVE #\n* Construct parameters, preconditions and effects based on the domain information, action description and the action name.\n* All variables in the preconditions and effects must be listed in the action's parameters. This restriction helps maintain the action's scope and prevents ambiguity in the planning process.\n* Do not use predicates that are not defined in the available predicates list to construct the preconditions and effects.\n* When the natural language description is ambiguous or certain predicate changes are implied, make reasonable assumptions based on common sense to fill up the implicit predicate in the PDDL action.\n# STYLE #\nFollow the writing style of technical experts. The output can be parsed by a machine, so it is important to follow the structured format.\n# TONE #\nBe precise and concise in constructing the PDDL action. The PDDL action should be clear and unambiguous.\n# AUDIENCE #\nYour audience is someone who is trying to learn how to construct PDDL actions from natural language descriptions.\n# RESPONSE #\nThe response should be in the following format:\n---\n**Explanation:** [Your explanation here]\n\n**Response:**\nParameters:\n1. ?x - [type]: [parameter description]\n2. ...\n\nPreconditions:\n```\n(and\n    ([predicate_1] ?x)\n)\n```\n\nEffects:\n```\n(and\n    (not ([predicate_2] ?x))\n    ([predicate_2] ?x)\n    ...\n)\n```\n---\n", "type": "prompt"}
{"role": "user", "content": "One or two examples from other domains for illustrating the input and output formats.\nHere are two examples from the doors domain for demonstrating the output format.\n        \nDomain information: This domain is structured to allow navigation and interaction within a space comprising rooms, locations, and doors that can be unlocked with keys. The actions and predicates support movement between locations and the unlocking of rooms.\n\nA list of available predicates\n1. (at ?loc - location) ;; agent is at loc location\n2. (unlocked ?room - room) ;; the room is unlocked\n3. (loc_in_room ?loc - location ?room - room) ;; the location is in the room\n4. (key_at ?key - key ?loc - location) ;; the key is at loc location\n5. (key_for_room ?key - key ?room - room) ;; the key is for the room\nExample 1\nAction Description: This one is akin to a classic scene in adventure games where you find a key and use it to unlock new areas. Picture yourself in the same house. You find a key lying on a table in the hallway (the key's location). This isn't just any key; it's special because it opens the door to the mysterious attic (the room the key unlocks). By picking up this key, you perform the action. The moment you have the key in your hand, the attic is no longer inaccessible. It's as if the key magically signals the attic door to unlock, waiting for you to discover its secrets.\n\nAction name: pick\n\n\nYour answer:\n---\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:**\nImagine you're playing a game where you're exploring different rooms and finding keys that can unlock new areas. The action called \"pick\" in this game lets you pick up a key that's in the same location as you, which then unlocks a room that the key is meant for. Let's break down how this works in simple terms.\n\nFirst, you need to be in the same location as the key. That's like being in a hallway where you see a key on a table. The action requires that you are right there with the key, which makes sense, right? You can't pick up a key from another room!\n\nNext, the key you find has to be the right one for a specific room. It\u2019s like having a label on the key saying \"this key is for the attic,\" ensuring that you don't try to use a kitchen key to open the attic.\n\nNow, when you pick up the key, the game checks two important things before letting you pick it up:\n1. **You are at the key's location**: You have to be right there where the key is.\n2. **The key is for the room you want to unlock**: This makes sure the key matches the room you\u2019re trying to access.\n\nOnce these conditions are met, and you pick up the key, two things happen:\n1. **The key is no longer at its original location**: Just like in real life, once you pick something up, it's not there anymore.\n2. **The room unlocks**: It\u2019s like the key told the door, \"Hey, open up!\" and now you can go into the attic and explore.\n\nThis action, \"pick,\" neatly connects your action of picking up the key with the effect of unlocking a new room, making the game or the story you're in feel real and connected. The conditions you meet before picking up the key ensure that everything makes sense and flows logically, just like in real life when you need the right key to open a specific door.\n                \n**Response:**\nParameters:\n1. ?sloc - location: [short description of the parameter]\n2. ?eloc - location: [short description of the parameter]\n3. ?eroom - room: [short description of the parameter]\n\nPreconditions:\n```\n(and\n    (at ?sloc)\n    (unlocked ?eroom)\n    (loc_in_room ?eloc ?eroom)\n)\n```\n\nEffects:\n```\n(and\n    (not (at ?sloc))\n    (at ?eloc)\n)\n```\n\n---\n", "type": "prompt"}
{"role": "user", "content": "Example 2\nAction Description: The action is like embarking on a small journey from one place to another within a confined space. Imagine you're in a large house with multiple rooms. You're currently in one location, let's say the living room (your starting location). You decide to move to another spot, maybe the kitchen (your ending location). However, there's a catch. The kitchen is behind a door that needs to be unlocked (ending room). So, this action can only happen if the kitchen door is already unlocked. Once you move, you're no longer in the living room but now standing in the kitchen, contemplating what to cook!\n\nAction name: move_to\n\n\nYour answer:\n---\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:**\nImagine you're playing a game where you need to explore different rooms by finding keys that unlock them, much like a treasure hunt. The action called \"pick\" in this game allows you to pick up a key from a specific location so you can unlock a room.\n\nHere\u2019s why the action schema matches your description:\n1. **Parameters**: You have parameters like `?loc` (where the key is found), `?key` (the key you find), and `?room` (the room that the key opens). These parameters help define what the action involves\u2014picking up a key at a location that unlocks a specific room.\n\n2. **Preconditions**:\n   - `(at ?loc)`: This means that you, the player, must be at the same location as the key. It ensures you are in the right place to pick it up, like being in the hallway where the key is on the table.\n   - `(key_at ?key ?loc)`: This ensures that the key you need is indeed at your location. It checks that the key is actually there before you can pick it up.\n   - `(key_for_room ?key ?room)`: This confirms that the key you are about to pick up is the correct one for unlocking the specific room you want to enter, like the attic.\n\n3. **Effects**:\n   - `(not (key_at ?key ?loc))`: Once you pick up the key, it's no longer lying there at the location. This effect updates the game state to show the key has been moved\u2014it's now with you.\n   - `(unlocked ?room)`: The action of picking up the key leads to the room being unlocked. Now, you can enter the room you wanted, such as the attic, which was previously locked.\n\nBy combining these elements, the action of \"pick\" logically lets you find a key and use it to access new areas in the game, opening up more adventures\u2014just like in the story of finding a key to unlock the attic.\n                \n**Response:**\nParameters:\n1. ?loc - location: [short description of the parameter]\n2. ?key - key: [short description of the parameter]\n3. ?room - room: [short description of the parameter]\n\nPreconditions:\n```\n(and\n    (at ?loc)\n    (key_at ?key ?loc)\n    (key_for_room ?key ?room)\n)\n```\n\nEffects:\n```\n(and\n    (not (key_at ?key ?loc))\n    (unlocked ?room)\n)\n```\n\n---\n", "type": "prompt"}
{"role": "user", "content": "Here are two examples from the newspapers domain for demonstrating the output format.\n        \nDomain information: This domain is structured to model a simple newspaper delivery system, where the main tasks involve picking up newspapers from a home base, moving to different locations, and delivering the papers to locations that require them.\n\nA list of available predicates\n1. (at ?loc - loc) ;; the agent is at loc location\n2. (is_Home_Base ?loc - loc) ;; the location is the home base\n3. (satisfied ?loc - loc) ;; the location has received the newspaper\n4. (wants_Paper ?loc - loc) ;; the location needs a newspaper\n5. (unpacked ?paper - paper) ;; the paper is unpacked\n6. (carrying ?paper - paper) ;; the agent is carrying the paper\nExample 1\nAction Description: RoboDelivery is at the home base (loc_home).\nThere is an unpacked newspaper (paper1) at the home base.\nRoboDelivery performs the pick-up action.\n\n    Preconditions: RoboDelivery is at loc_home (which is the home base), and paper1 is unpacked.\n    Effects: RoboDelivery is now carrying paper1, and paper1 is no longer unpacked.\n\nAction name: pick-up\n\n\nYour answer:\n---\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:**\n\nLet's imagine a situation where someone, like a delivery person, needs to pick up newspapers from a place, like a home base, and deliver them to various locations. This situation can be broken down into smaller, specific steps to make it easy for a computer to understand and execute. This is where the action schema you mentioned comes into play.\n\nThe action is called \"pick-up,\" and it involves the delivery person picking up newspapers to deliver. This action is defined in a language called PDDL, which is like giving a computer a recipe to follow.\n\n1. **Parameters**: These are like ingredients in a recipe. Here, the ingredients are any newspaper (`?paper`) and a location (`?loc`), which in this scenario is the home base.\n\n2. **Preconditions**: These are conditions that must be true before the action can start. Think of it like checking if you have all your ingredients before you start cooking.\n   - `(at ?loc)`: The delivery person must be at the location specified (`?loc`). This makes sure they are actually at the home base to pick up the newspapers.\n   - `(is_Home_Base ?loc)`: The location where they are must be the home base. This is crucial because newspapers ready to be delivered are stored here.\n   - `(unpacked ?paper)`: The newspapers need to be unpacked and ready to be picked up. It ensures the newspapers are not in boxes or still bundled up, making them easy to grab and go.\n\n3. **Effects**: These describe what happens after the action is completed.\n   - `(not (unpacked ?paper))`: The newspaper is no longer in an unpacked state at the base because it has been picked up.\n   - `(carrying ?paper)`: The newspaper is now being carried by the delivery person, ready to be delivered to someone who needs it.\n\nThis schema helps the computer understand exactly what needs to happen when the \"pick-up\" action is called in the program. By specifying preconditions, we ensure the action makes sense (you can't pick up a newspaper if you're not there or if the papers aren't ready). The effects tell the computer how the world changes after the action, like the newspaper moving from being unpacked at the base to being carried for delivery.\n\nBy breaking down tasks this way, we help the computer efficiently and correctly handle tasks that seem simple to us but are quite detailed when programmed.\n                \n**Response:**\nParameters:\n1. ?paper - paper: [short description of the parameter]\n2. ?loc - loc: [short description of the parameter]\n\nPreconditions:\n```\n(and\n    (at ?loc)\n    (is_Home_Base ?loc)\n    (unpacked ?paper)\n)\n```\n\nEffects:\n```\n(and\n    (not (unpacked ?paper))\n    (carrying ?paper)\n)\n```\n\n---\n", "type": "prompt"}
{"role": "user", "content": "Example 2\nAction Description: RoboDelivery wants to deliver the newspaper to a house (loc_house1).\nRoboDelivery performs the move action to go from loc_home to loc_house1.\n\n    Preconditions: RoboDelivery is at loc_home.\n    Effects: RoboDelivery is no longer at loc_home and is now at loc_house1.\n\nAction name: move\n\n\nYour answer:\n---\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:**\n\nImagine you're playing a game where you need to deliver newspapers to different houses in your neighborhood. Each turn in the game allows you to move from one house to another. The action of moving from one house to another in the game can be compared to an action in our newspaper delivery model.\n\nIn the scenario, the action is called \"move,\" and it involves a delivery person moving from a starting location to a destination. Let's break down why this action is modeled the way it is:\n\n1. **Parameters**: These are like placeholders or markers in our game. In the \"move\" action, the parameters are the Starting Location and the Destination. It's just like saying, \"I'm starting from my house and going to my friend's house.\"\n\n2. **Preconditions**: Before you can move from one house to another, you must be at the house you're starting from. It wouldn't make sense to say, \"I'm going from my house to my friend's house\" if you're actually at the grocery store, right? So, the precondition that the delivery person is at the starting location is crucial to make the action logical.\n\n3. **Effects**: After you move from your house to your friend's house, you are no longer at your house; you are now at your friend's house. That\u2019s what happens in our model, too. The effect of the move action is that the delivery person is no longer at the starting location and is now at the destination. This change is captured in the model by removing the state of being at the starting location (`not (at ?from)`) and adding the state of being at the destination (`(at ?to)`).\n\nSo, this action schema perfectly represents the simple yet essential task of moving from one point to another, ensuring that the game's rules are followed: you start from where you say you are, and you end up where you want to go. It's just like moving pieces on a board game, ensuring each move is valid based on where you are and where you want to be.\n                \n**Response:**\nParameters:\n1. ?from - loc: [short description of the parameter]\n2. ?to - loc: [short description of the parameter]\n\nPreconditions:\n```\n(at ?from)\n```\n\nEffects:\n```\n(and\n    (not (at ?from))\n    (at ?to)\n)\n```\n\n---\n", "type": "prompt"}
{"role": "user", "content": "Question: Here is the task.\nA natural language description of the domain\nDomain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.\n\nA list of available predicates\n1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf\n2. (on-table ?x - book) ;; ?x is on the table\n3. (accessible ?x - book) ;; ?x is accessible (not covered)\n4. (hands-free) ;; The hands of the librarian are free\n5. (holding ?x - book) ;; The librarian is holding ?x\n6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat\n7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty\n8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full\n9. (book-request ?book - book) ;; There is a request for book ?book\n10. (return-due ?book - book) ;; Book ?book is due for return\n11. (checked-out ?book - book) ;; Book ?book is checked out\n\nAction Description: Mark a book as borrowed by a patron, ensuring it's not already taken.\n\nAction name: check-out\n\n\nYour answer:\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:**\n\nIn the context of a library, the \"check-out\" action is a fundamental operation that allows a patron to borrow a book. For this action to occur, certain conditions must be met, and certain effects must result from the action. The action ensures that a book is marked as borrowed and is not already taken by another patron.\n\nLet's break down the action:\n\n1. **Parameters**: The main parameter here is the book that is being checked out (`?book`). There may also be a need to consider the category of the book (`?cat`), depending on how the library system manages check-outs.\n\n2. **Preconditions**: These are the conditions that must be true before the book can be checked out:\n   - `(on-shelf ?book ?cat)` or `(on-table ?book)`: The book must be either on a shelf or on a table, indicating it is available for borrowing.\n   - `(accessible ?book)`: The book must be accessible, meaning it is not covered by another book or otherwise unavailable.\n   - `(hands-free)`: The librarian must have their hands free to handle the book for check-out.\n   - `(not (checked-out ?book))`: The book must not already be checked out by another patron.\n\n3. **Effects**: These are the changes that occur as a result of the action:\n   - `(not (on-shelf ?book ?cat))` or `(not (on-table ?book))`: The book is no longer on the shelf or table because it has been checked out.\n   - `(checked-out ?book)`: The book is now marked as checked out, indicating it is no longer available for other patrons to borrow.\n\nThis action schema ensures that the library's book management system accurately reflects the state of each book, preventing errors such as checking out a book that is already borrowed.\n\n**Response:**\nParameters:\n1. ?book - book: [The book to be checked out]\n2. ?cat - category: [The category of the book, if necessary]\n\nPreconditions:\n```\n(and\n    (or (on-shelf ?book ?cat) (on-table ?book))\n    (accessible ?book)\n    (hands-free)\n    (not (checked-out ?book))\n)\n```\n\nEffects:\n```\n(and\n    (not (on-shelf ?book ?cat))\n    (not (on-table ?book))\n    (checked-out ?book)\n)\n```\n\nNote: Depending on the specifics of the library system, the category parameter (?cat) may or may not be necessary. If the system does not track categories in relation to the check-out action, it can be omitted.", "type": "response", "action": "check-out"}
{"role": "system", "content": "# CONTEXT #\nYou are a tool called PDDL Modeling Assistant. You are a technical experts in constructing Planning Domain Definition Language (PDDL) models via the natural language context.\n# OBJECTIVE #\n* Construct parameters, preconditions and effects based on the domain information, action description and the action name.\n* All variables in the preconditions and effects must be listed in the action's parameters. This restriction helps maintain the action's scope and prevents ambiguity in the planning process.\n* Do not use predicates that are not defined in the available predicates list to construct the preconditions and effects.\n* When the natural language description is ambiguous or certain predicate changes are implied, make reasonable assumptions based on common sense to fill up the implicit predicate in the PDDL action.\n# STYLE #\nFollow the writing style of technical experts. The output can be parsed by a machine, so it is important to follow the structured format.\n# TONE #\nBe precise and concise in constructing the PDDL action. The PDDL action should be clear and unambiguous.\n# AUDIENCE #\nYour audience is someone who is trying to learn how to construct PDDL actions from natural language descriptions.\n# RESPONSE #\nThe response should be in the following format:\n---\n**Explanation:** [Your explanation here]\n\n**Response:**\nParameters:\n1. ?x - [type]: [parameter description]\n2. ...\n\nPreconditions:\n```\n(and\n    ([predicate_1] ?x)\n)\n```\n\nEffects:\n```\n(and\n    (not ([predicate_2] ?x))\n    ([predicate_2] ?x)\n    ...\n)\n```\n---\n", "type": "prompt"}
{"role": "user", "content": "One or two examples from other domains for illustrating the input and output formats.\nHere are two examples from the doors domain for demonstrating the output format.\n        \nDomain information: This domain is structured to allow navigation and interaction within a space comprising rooms, locations, and doors that can be unlocked with keys. The actions and predicates support movement between locations and the unlocking of rooms.\n\nA list of available predicates\n1. (at ?loc - location) ;; agent is at loc location\n2. (unlocked ?room - room) ;; the room is unlocked\n3. (loc_in_room ?loc - location ?room - room) ;; the location is in the room\n4. (key_at ?key - key ?loc - location) ;; the key is at loc location\n5. (key_for_room ?key - key ?room - room) ;; the key is for the room\nExample 1\nAction Description: This one is akin to a classic scene in adventure games where you find a key and use it to unlock new areas. Picture yourself in the same house. You find a key lying on a table in the hallway (the key's location). This isn't just any key; it's special because it opens the door to the mysterious attic (the room the key unlocks). By picking up this key, you perform the action. The moment you have the key in your hand, the attic is no longer inaccessible. It's as if the key magically signals the attic door to unlock, waiting for you to discover its secrets.\n\nAction name: pick\n\n\nYour answer:\n---\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:**\nImagine you're playing a game where you're exploring different rooms and finding keys that can unlock new areas. The action called \"pick\" in this game lets you pick up a key that's in the same location as you, which then unlocks a room that the key is meant for. Let's break down how this works in simple terms.\n\nFirst, you need to be in the same location as the key. That's like being in a hallway where you see a key on a table. The action requires that you are right there with the key, which makes sense, right? You can't pick up a key from another room!\n\nNext, the key you find has to be the right one for a specific room. It\u2019s like having a label on the key saying \"this key is for the attic,\" ensuring that you don't try to use a kitchen key to open the attic.\n\nNow, when you pick up the key, the game checks two important things before letting you pick it up:\n1. **You are at the key's location**: You have to be right there where the key is.\n2. **The key is for the room you want to unlock**: This makes sure the key matches the room you\u2019re trying to access.\n\nOnce these conditions are met, and you pick up the key, two things happen:\n1. **The key is no longer at its original location**: Just like in real life, once you pick something up, it's not there anymore.\n2. **The room unlocks**: It\u2019s like the key told the door, \"Hey, open up!\" and now you can go into the attic and explore.\n\nThis action, \"pick,\" neatly connects your action of picking up the key with the effect of unlocking a new room, making the game or the story you're in feel real and connected. The conditions you meet before picking up the key ensure that everything makes sense and flows logically, just like in real life when you need the right key to open a specific door.\n                \n**Response:**\nParameters:\n1. ?sloc - location: [short description of the parameter]\n2. ?eloc - location: [short description of the parameter]\n3. ?eroom - room: [short description of the parameter]\n\nPreconditions:\n```\n(and\n    (at ?sloc)\n    (unlocked ?eroom)\n    (loc_in_room ?eloc ?eroom)\n)\n```\n\nEffects:\n```\n(and\n    (not (at ?sloc))\n    (at ?eloc)\n)\n```\n\n---\n", "type": "prompt"}
{"role": "user", "content": "Example 2\nAction Description: The action is like embarking on a small journey from one place to another within a confined space. Imagine you're in a large house with multiple rooms. You're currently in one location, let's say the living room (your starting location). You decide to move to another spot, maybe the kitchen (your ending location). However, there's a catch. The kitchen is behind a door that needs to be unlocked (ending room). So, this action can only happen if the kitchen door is already unlocked. Once you move, you're no longer in the living room but now standing in the kitchen, contemplating what to cook!\n\nAction name: move_to\n\n\nYour answer:\n---\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:**\nImagine you're playing a game where you need to explore different rooms by finding keys that unlock them, much like a treasure hunt. The action called \"pick\" in this game allows you to pick up a key from a specific location so you can unlock a room.\n\nHere\u2019s why the action schema matches your description:\n1. **Parameters**: You have parameters like `?loc` (where the key is found), `?key` (the key you find), and `?room` (the room that the key opens). These parameters help define what the action involves\u2014picking up a key at a location that unlocks a specific room.\n\n2. **Preconditions**:\n   - `(at ?loc)`: This means that you, the player, must be at the same location as the key. It ensures you are in the right place to pick it up, like being in the hallway where the key is on the table.\n   - `(key_at ?key ?loc)`: This ensures that the key you need is indeed at your location. It checks that the key is actually there before you can pick it up.\n   - `(key_for_room ?key ?room)`: This confirms that the key you are about to pick up is the correct one for unlocking the specific room you want to enter, like the attic.\n\n3. **Effects**:\n   - `(not (key_at ?key ?loc))`: Once you pick up the key, it's no longer lying there at the location. This effect updates the game state to show the key has been moved\u2014it's now with you.\n   - `(unlocked ?room)`: The action of picking up the key leads to the room being unlocked. Now, you can enter the room you wanted, such as the attic, which was previously locked.\n\nBy combining these elements, the action of \"pick\" logically lets you find a key and use it to access new areas in the game, opening up more adventures\u2014just like in the story of finding a key to unlock the attic.\n                \n**Response:**\nParameters:\n1. ?loc - location: [short description of the parameter]\n2. ?key - key: [short description of the parameter]\n3. ?room - room: [short description of the parameter]\n\nPreconditions:\n```\n(and\n    (at ?loc)\n    (key_at ?key ?loc)\n    (key_for_room ?key ?room)\n)\n```\n\nEffects:\n```\n(and\n    (not (key_at ?key ?loc))\n    (unlocked ?room)\n)\n```\n\n---\n", "type": "prompt"}
{"role": "user", "content": "Here are two examples from the newspapers domain for demonstrating the output format.\n        \nDomain information: This domain is structured to model a simple newspaper delivery system, where the main tasks involve picking up newspapers from a home base, moving to different locations, and delivering the papers to locations that require them.\n\nA list of available predicates\n1. (at ?loc - loc) ;; the agent is at loc location\n2. (is_Home_Base ?loc - loc) ;; the location is the home base\n3. (satisfied ?loc - loc) ;; the location has received the newspaper\n4. (wants_Paper ?loc - loc) ;; the location needs a newspaper\n5. (unpacked ?paper - paper) ;; the paper is unpacked\n6. (carrying ?paper - paper) ;; the agent is carrying the paper\nExample 1\nAction Description: RoboDelivery wants to deliver the newspaper to a house (loc_house1).\nRoboDelivery performs the move action to go from loc_home to loc_house1.\n\n    Preconditions: RoboDelivery is at loc_home.\n    Effects: RoboDelivery is no longer at loc_home and is now at loc_house1.\n\nAction name: move\n\n\nYour answer:\n---\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:**\n\nImagine you're playing a game where you need to deliver newspapers to different houses in your neighborhood. Each turn in the game allows you to move from one house to another. The action of moving from one house to another in the game can be compared to an action in our newspaper delivery model.\n\nIn the scenario, the action is called \"move,\" and it involves a delivery person moving from a starting location to a destination. Let's break down why this action is modeled the way it is:\n\n1. **Parameters**: These are like placeholders or markers in our game. In the \"move\" action, the parameters are the Starting Location and the Destination. It's just like saying, \"I'm starting from my house and going to my friend's house.\"\n\n2. **Preconditions**: Before you can move from one house to another, you must be at the house you're starting from. It wouldn't make sense to say, \"I'm going from my house to my friend's house\" if you're actually at the grocery store, right? So, the precondition that the delivery person is at the starting location is crucial to make the action logical.\n\n3. **Effects**: After you move from your house to your friend's house, you are no longer at your house; you are now at your friend's house. That\u2019s what happens in our model, too. The effect of the move action is that the delivery person is no longer at the starting location and is now at the destination. This change is captured in the model by removing the state of being at the starting location (`not (at ?from)`) and adding the state of being at the destination (`(at ?to)`).\n\nSo, this action schema perfectly represents the simple yet essential task of moving from one point to another, ensuring that the game's rules are followed: you start from where you say you are, and you end up where you want to go. It's just like moving pieces on a board game, ensuring each move is valid based on where you are and where you want to be.\n                \n**Response:**\nParameters:\n1. ?paper - paper: [short description of the parameter]\n2. ?loc - loc: [short description of the parameter]\n\nPreconditions:\n```\n(and\n    (at ?loc)\n    (is_Home_Base ?loc)\n    (unpacked ?paper)\n)\n```\n\nEffects:\n```\n(and\n    (not (unpacked ?paper))\n    (carrying ?paper)\n)\n```\n\n---\n", "type": "prompt"}
{"role": "user", "content": "Example 2\nAction Description: RoboDelivery is at the home base (loc_home).\nThere is an unpacked newspaper (paper1) at the home base.\nRoboDelivery performs the pick-up action.\n\n    Preconditions: RoboDelivery is at loc_home (which is the home base), and paper1 is unpacked.\n    Effects: RoboDelivery is now carrying paper1, and paper1 is no longer unpacked.\n\nAction name: pick-up\n\n\nYour answer:\n---\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:**\n\nLet's imagine a situation where someone, like a delivery person, needs to pick up newspapers from a place, like a home base, and deliver them to various locations. This situation can be broken down into smaller, specific steps to make it easy for a computer to understand and execute. This is where the action schema you mentioned comes into play.\n\nThe action is called \"pick-up,\" and it involves the delivery person picking up newspapers to deliver. This action is defined in a language called PDDL, which is like giving a computer a recipe to follow.\n\n1. **Parameters**: These are like ingredients in a recipe. Here, the ingredients are any newspaper (`?paper`) and a location (`?loc`), which in this scenario is the home base.\n\n2. **Preconditions**: These are conditions that must be true before the action can start. Think of it like checking if you have all your ingredients before you start cooking.\n   - `(at ?loc)`: The delivery person must be at the location specified (`?loc`). This makes sure they are actually at the home base to pick up the newspapers.\n   - `(is_Home_Base ?loc)`: The location where they are must be the home base. This is crucial because newspapers ready to be delivered are stored here.\n   - `(unpacked ?paper)`: The newspapers need to be unpacked and ready to be picked up. It ensures the newspapers are not in boxes or still bundled up, making them easy to grab and go.\n\n3. **Effects**: These describe what happens after the action is completed.\n   - `(not (unpacked ?paper))`: The newspaper is no longer in an unpacked state at the base because it has been picked up.\n   - `(carrying ?paper)`: The newspaper is now being carried by the delivery person, ready to be delivered to someone who needs it.\n\nThis schema helps the computer understand exactly what needs to happen when the \"pick-up\" action is called in the program. By specifying preconditions, we ensure the action makes sense (you can't pick up a newspaper if you're not there or if the papers aren't ready). The effects tell the computer how the world changes after the action, like the newspaper moving from being unpacked at the base to being carried for delivery.\n\nBy breaking down tasks this way, we help the computer efficiently and correctly handle tasks that seem simple to us but are quite detailed when programmed.\n                \n**Response:**\nParameters:\n1. ?from - loc: [short description of the parameter]\n2. ?to - loc: [short description of the parameter]\n\nPreconditions:\n```\n(at ?from)\n```\n\nEffects:\n```\n(and\n    (not (at ?from))\n    (at ?to)\n)\n```\n\n---\n", "type": "prompt"}
{"role": "user", "content": "Question: Here is the task.\nA natural language description of the domain\nDomain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.\n\nA list of available predicates\n1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf\n2. (on-table ?x - book) ;; ?x is on the table\n3. (accessible ?x - book) ;; ?x is accessible (not covered)\n4. (hands-free) ;; The hands of the librarian are free\n5. (holding ?x - book) ;; The librarian is holding ?x\n6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat\n7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty\n8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full\n9. (book-request ?book - book) ;; There is a request for book ?book\n10. (return-due ?book - book) ;; Book ?book is due for return\n11. (checked-out ?book - book) ;; Book ?book is checked out\n\nAction Description: Record a book as returned by a patron when you're holding it.\n\nAction name: return-book\n\n\nYour answer:\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:**\n\nIn the context of a library management system, the action \"return-book\" is used to record a book as returned by a patron. This action can only be performed if the librarian is currently holding the book, which implies that the book has been physically handed over to the librarian. Once the book is recorded as returned, it is no longer checked out, and the librarian's hands are free to handle other tasks.\n\nThe action schema for \"return-book\" would include parameters to represent the book being returned. The preconditions ensure that the librarian is holding the book before it can be returned. The effects describe the changes in the state of the library system after the book is returned, such as the book no longer being checked out and the librarian's hands being free.\n\n**Response:**\nParameters:\n1. ?book - book: [The book that is being returned by the patron]\n\nPreconditions:\n```\n(and\n    (holding ?book)\n    (checked-out ?book)\n)\n```\n\nEffects:\n```\n(and\n    (not (holding ?book))\n    (not (checked-out ?book))\n    (hands-free)\n)\n```\n\nThis schema ensures that the book is properly accounted for in the library system and that the librarian's state is updated to reflect that they are no longer holding the book, allowing them to perform other actions.", "type": "response", "action": "return-book"}
