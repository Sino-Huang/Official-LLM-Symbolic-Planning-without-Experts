{"role": "system", "content": "# CONTEXT #\nYou are a tool called PDDL Modeling Assistant. You are a technical experts in constructing Planning Domain Definition Language (PDDL) models via the natural language context.\n# OBJECTIVE #\n* Construct parameters, preconditions and effects based on the domain information, action description and the action name.\n* All variables in the preconditions and effects must be listed in the action's parameters. This restriction helps maintain the action's scope and prevents ambiguity in the planning process.\n* Do not use predicates that are not defined in the available predicates list to construct the preconditions and effects.\n* When the natural language description is ambiguous or certain predicate changes are implied, make reasonable assumptions based on common sense to fill up the implicit predicate in the PDDL action.\n# STYLE #\nFollow the writing style of technical experts. The output can be parsed by a machine, so it is important to follow the structured format.\n# TONE #\nBe precise and concise in constructing the PDDL action. The PDDL action should be clear and unambiguous.\n# AUDIENCE #\nYour audience is someone who is trying to learn how to construct PDDL actions from natural language descriptions.\n# RESPONSE #\nThe response should be in the following format:\n---\n**Explanation:** [Your explanation here]\n\n**Response:**\nParameters:\n1. ?x - [type]: [parameter description]\n2. ...\n\nPreconditions:\n```\n(and\n    ([predicate_1] ?x)\n)\n```\n\nEffects:\n```\n(and\n    (not ([predicate_2] ?x))\n    ([predicate_2] ?x)\n    ...\n)\n```\n---\n", "type": "prompt"}
{"role": "user", "content": "One or two examples from other domains for illustrating the input and output formats.\nHere are two examples from the barman domain for demonstrating the output format.\n        \nDomain information: In this domain there is a robot barman that manipulates drink dispensers, glasses and a shaker. The goal is to find a plan of the robots actions that serves a desired set of drinks. In this domain deletes of actions encode relevant knowledge given that robot hands can only grasp one object at a time and given that glasses need to be empty and clean to be filled.\n\nA list of available predicates\n1. (ontable ?c - container) ;; the container is on the table\n2. (holding ?h - hand ?c - container) ;; the hand is holding the container\n3. (handempty ?h - hand) ;; the hand is empty\n4. (empty ?c - container) ;; the container is empty\n5. (contains ?c - container ?b - beverage) ;; the container contains the beverage\n6. (clean ?c - container) ;; the container is clean\n7. (used ?c - container ?b - beverage) ;; the container is used for the beverage\n8. (dispenses ?d - dispenser ?i - ingredient) ;; the dispenser dispenses the ingredient\n9. (shaker-empty-level ?s - shaker ?l - level) ;; the empty level of the shaker\n10. (shaker-level ?s - shaker ?l - level) ;; the shaker currently is at the level\n11. (next ?l1 ?l2 - level) ;; l2 is the next level after l1\n12. (unshaked ?s - shaker) ;; the shaker is unshaked\n13. (shaked ?s - shaker) ;; the shaker is shaked\n14. (cocktail-part1 ?c - cocktail ?i - ingredient) ;; the ingredient is part of the cocktail\n15. (cocktail-part2 ?c - cocktail ?i - ingredient) ;; the ingredient is part of the cocktail\nExample 1\nAction Description: The robot fills an empty, clean shot glass with an ingredient from a dispenser.\n\nAction name: fill-shot\n\n\nYour answer:\n---\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:** Imagine our robot barman in a kitchen where it needs to prepare a drink using a shot glass. The robot has two hands and can only use one hand to hold an item at a time. Here\u2019s why the robot needs to follow certain steps, called preconditions, before it can fill the shot glass, which is the goal of the \"fill-shot\" action.\n\nFirstly, the robot must be holding the shot glass with one hand, which we call ?h1. This is important because the robot can only fill something it is holding. The precondition `(holding ?h1 ?s)` ensures that the robot has a good grip on the shot glass before proceeding.\n\nSecondly, the other hand, ?h2, must be empty (`handempty ?h2`). This is because if the hand is already holding something else, the robot wouldn\u2019t be able to operate the dispenser properly or manage other tasks like adding more ingredients if needed.\n\nThe next precondition is that the dispenser identified as ?d must be capable of dispensing the ingredient ?i, as noted in `(dispenses ?d ?i)`. This ensures that the robot is at the right dispenser for the ingredient it needs to fill the shot glass with.\n\nAlso, the shot glass itself must be empty (`empty ?s`) and clean (`clean ?s`) before anything is poured into it. This is common sense, right? You wouldn\u2019t want to drink from a dirty or already filled glass! This makes sure the drink is clean and tastes as expected.\n\nAfter all these conditions are met, the robot can go ahead and fill the shot glass. The effects of this action include a few changes:\n- The shot glass is no longer empty (`not (empty ?s)`), meaning it now contains the ingredient.\n- The shot glass now contains the specific ingredient (`contains ?s ?i`), which is just like saying the glass now has, say, gin in it.\n- The glass is no longer clean (`not (clean ?s)`) because it now has something in it.\n- Lastly, the shot glass is marked as used for that particular ingredient (`used ?s ?i`), which helps the robot remember what has been done with that glass.\n                \n**Response:**\nParameters:\n1. ?s - shot: [short description of the parameter]\n2. ?i - ingredient: [short description of the parameter]\n3. ?h1 - hand: [short description of the parameter]\n4. ?h2 - hand: [short description of the parameter]\n5. ?d - dispenser: [short description of the parameter]\n\nPreconditions:\n```\n(and\n    (holding ?h1 ?s)\n    (handempty ?h2)\n    (dispenses ?d ?i)\n    (empty ?s)\n    (clean ?s)\n)\n```\n\nEffects:\n```\n(and\n    (not (empty ?s))\n    (contains ?s ?i)\n    (not (clean ?s))\n    (used ?s ?i)\n)\n```\n\n---\n", "type": "prompt"}
{"role": "user", "content": "Example 2\nAction Description: The robot cleans a used shot glass.\n\nAction name: clean-shot\n\n\nYour answer:\n---\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:**\n\nLet's imagine our robot barman is preparing drinks in a bar where it must handle different glasses, like a shot glass. The robot needs to clean a used shot glass to make sure it's ready for the next drink. This situation leads us to create an action called `clean-shot` in the robot's planning.\n\nFirst, the robot needs to make sure it's holding the shot glass with one hand (`holding ?h1 ?s`). This makes sense because you need to hold the glass to clean it properly.\n\nNext, the robot needs to have its other hand free (`handempty ?h2`). This is important because the robot might need to use this hand to operate cleaning tools or to stabilize the glass while cleaning.\n\nThe glass itself must be empty (`empty ?s`) before it can be cleaned. Imagine trying to clean a glass while it's still full of liquid; it would be messy and ineffective!\n\nLastly, the glass should have been used (`used ?s ?b`), indicating it was previously filled with a drink and now requires cleaning. This precondition checks whether the glass actually needs cleaning.\n\nOnce all these conditions are met, the robot can proceed with the cleaning action. The effect of this action is twofold: the shot glass is no longer 'used' for the specific beverage (`not (used ?s ?b)`), and the glass becomes clean (`clean ?s`).\n\nBy setting these preconditions and effects, we ensure that the robot performs the cleaning task effectively and prepares the glass for future use, maintaining a smooth operation in the bar scenario.\n                \n**Response:**\nParameters:\n1. ?s - shot: [short description of the parameter]\n2. ?b - beverage: [short description of the parameter]\n3. ?h1 - hand: [short description of the parameter]\n4. ?h2 - hand: [short description of the parameter]\n\nPreconditions:\n```\n(and\n    (holding ?h1 ?s)\n    (handempty ?h2)\n    (empty ?s)\n    (used ?s ?b)\n)\n```\n\nEffects:\n```\n(and\n    (not (used ?s ?b))\n    (clean ?s)\n)\n```\n\n---\n", "type": "prompt"}
{"role": "user", "content": "Here are two examples from the storage domain for demonstrating the output format.\n        \nDomain information: Moving and storing crates of goods by hoists from containers to depots with spatial maps. This domain deals with the movement and storage of crates of goods using hoists. It involves different locations like containers and depots, and requires managing the spatial arrangement of crates and hoists in various areas. The actions primarily focus on the lifting, moving, and placement of crates by hoists, considering the spatial and availability constraints of the areas involved.\n\nA list of available predicates\n1. (clear ?s - store_area) ;; the store area is clear\n2. (crate_in ?c - crate ?p - place) ;; the crate is in the place\n3. (store_area_in ?s - store_area ?p - place) ;; the store area is in the place\n4. (available ?h - hoist) ;; the hoist is available\n5. (lifting ?h - hoist ?c - crate) ;; the hoist is lifting the crate\n6. (at ?h - hoist ?a - area) ;; the hoist is at the area\n7. (on ?c - crate ?s - store_area) ;; the crate is on the store area\n8. (connected ?a1 ?a2 - area) ;; the area a1 is connected to the area a2\nExample 1\nAction Description: This action is about a hoist dropping a crate into a store_area from an area. Preconditions are similar to 'Lift' but include the hoist lifting the crate and the destination store_area being clear. The effects involve the hoist becoming available and the crate being placed on the destination store_area.\n\nAction name: drop\n\n\nYour answer:\n---\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:**\nLet's imagine a scenario in a warehouse where a hoist is used to move crates from one area to another, like moving a box of toys from a shelf to a play area. The action we're talking about is called \"drop,\" where the hoist places a crate into a designated storage area.\n\n1. **Preconditions Explained:**\n   - **Connected Areas:** First, the hoist can only drop the crate if the area it\u2019s in (let's call it the play area) is connected to the area where the hoist is currently located (like the shelf area). This means there must be a clear path for the hoist to move the crate to its destination.\n   - **Hoist Location:** The hoist must be in the area adjacent to where the crate needs to go. If our hoist isn't next to the play area, it can't drop the crate there.\n   - **Hoist Lifting the Crate:** Before dropping, the hoist must already be lifting a crate. It's like making sure the hoist has picked up the box of toys before it can put it down.\n   - **Clear Storage Area:** The destination, where the crate will be placed, must be clear of other objects. This ensures there's space to safely place the new crate without stacking or causing a mess.\n   - **Store Area in Place:** The storage area where the crate is to be dropped needs to be part of the larger place being managed. This is like ensuring the play area is actually a part of the designated playroom.\n\n2. **Effects Explained:**\n   - **Hoist No Longer Lifting:** Once the crate is dropped, the hoist is no longer lifting it. This is like putting down the box of toys.\n   - **Hoist Becomes Available:** After dropping off the crate, the hoist is now free to take on other tasks, like picking up another box.\n   - **Storage Area Not Clear Anymore:** Since the crate has been placed there, the storage area is no longer empty.\n   - **Crate on Storage Area:** The crate is now officially in the storage area, like the box of toys now being in the play area.\n   - **Crate Location Updated:** We update the records to show that the crate is now in this new location within the place, which helps in managing space and knowing where everything is.\n\nThis action of dropping a crate involves several steps and conditions that ensure everything happens smoothly and safely, from ensuring there's a path to the hoist being ready and the space being available for the new crate. It's like making sure you have both hands free and a clear spot on the floor before you set down a heavy box.\n                \n**Response:**\nParameters:\n1. ?h - hoist: [short description of the parameter]\n2. ?c - crate: [short description of the parameter]\n3. ?a1 - store_area: [short description of the parameter]\n4. ?a2 - area: [short description of the parameter]\n5. ?p - place: [short description of the parameter]\n\nPreconditions:\n```\n(and\n    (connected ?a1 ?a2)\n    (at ?h ?a2)\n    (lifting ?h ?c)\n    (clear ?a1)\n    (store_area_in ?a1 ?p)\n)\n```\n\nEffects:\n```\n(and\n    (not (lifting ?h ?c))\n    (available ?h)\n    (not (clear ?a1))\n    (on ?c ?a1)\n    (crate_in ?c ?p)\n)\n```\n\n---\n", "type": "prompt"}
{"role": "user", "content": "Example 2\nAction Description: Involves a hoist lifting a crate from one store_area to another area. Preconditions include the areas being connected, the hoist being at the destination area and available, and the crate being on the source store_area. The effects are the crate being lifted and the source store_area becoming clear.\n\nAction name: lift\n\n\nYour answer:\n---\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:**\nLet's imagine you want to move a toy train (representing the hoist) from one side of your playroom (a store area) to another. Before moving it, you need to make sure of a few things:\n\n1. **The train is actually at the starting point:** Just like you need to know where your train is before you can move it, the action schema checks if the hoist is at the starting store area (`at ?h ?from`). This ensures that we are moving the right hoist from the correct location.\n\n2. **The destination is clear:** Imagine if the place you wanted to move your train to was already full of other toys. You wouldn\u2019t be able to put your train there, right? Similarly, the schema requires the destination store area to be clear (`clear ?to`) so that the hoist can move there without any issues.\n\n3. **The starting and destination points are connected:** It\u2019s like making sure there\u2019s a clear path or a track between where your train is and where you want it to go. If there\u2019s no track, you can't move the train. In the action schema, this is checked by the condition (`connected ?from ?to`).\n\nNow, when the train (hoist) moves:\n- **It is no longer at the starting point:** Just like when your train leaves one side of the room, it\u2019s not there anymore. This change is shown in the schema by removing the condition that the hoist is at the starting area (`not (at ?h ?from)`).\n  \n- **It is now at the destination:** When you move your train to the other side of the room, it\u2019s now there. This is represented in the schema by adding the condition that the hoist is now at the destination area (`at ?h ?to`).\n\n- **The destination is no longer clear:** Now that the train is at the new spot, that area isn\u2019t empty anymore. This change is reflected by removing the 'clear' condition for the destination area (`not (clear ?to)`).\n\n- **The starting point becomes clear:** Since the train left the starting area, that spot is now free. This is captured by adding a 'clear' condition for the starting area (`clear ?from`).\n\nThis whole process helps ensure that the hoist can safely and efficiently move from one area to another without confusion or conflicts.\n                \n**Response:**\nParameters:\n1. ?h - hoist: [short description of the parameter]\n2. ?c - crate: [short description of the parameter]\n3. ?a1 - store_area: [short description of the parameter]\n4. ?a2 - area: [short description of the parameter]\n5. ?p - place: [short description of the parameter]\n\nPreconditions:\n```\n(and\n    (connected ?a1 ?a2)\n    (at ?h ?a2)\n    (available ?h)\n    (on ?c ?a1)\n    (store_area_in ?a1 ?p)\n)\n```\n\nEffects:\n```\n(and\n    (not (on ?c ?a1))\n    (clear ?a1)\n    (not (available ?h))\n    (lifting ?h ?c)\n    (not (crate_in ?c ?p))\n)\n```\n\n---\n", "type": "prompt"}
{"role": "user", "content": "Question: Here is the task.\nA natural language description of the domain\nDomain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.\n\nA list of available predicates\n1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf\n2. (on-table ?x - book) ;; ?x is on the table\n3. (accessible ?x - book) ;; ?x is accessible (not covered)\n4. (hands-free) ;; The hands of the librarian are free\n5. (holding ?x - book) ;; The librarian is holding ?x\n6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat\n7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty\n8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full\n9. (book-request ?book - book) ;; There is a request for book ?book\n10. (return-due ?book - book) ;; Book ?book is due for return\n11. (checked-out ?book - book) ;; Book ?book is checked out\n\nAction Description: Imagine you're a librarian managing a table full of books. The 'take-from-table' action allows you to pick up a book that is on the table, provided it is accessible and your hands are free. This action simulates the scenario where you find a book on the table, ensure it's not covered by any other book, and then pick it up, thus holding it in your hands.\n\nAction name: take-from-table\n\n\nYour answer:\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:**\nIn the context of a library, the 'take-from-table' action represents the librarian's physical interaction with a book that is sitting on a table. For this action to occur, certain conditions must be met, and once the action is executed, certain changes to the state of the library environment will result.\n\nThe librarian can only take a book from the table if:\n- The book is on the table (`on-table ?b`): This is a fundamental condition because the action is specifically about picking up a book from the table.\n- The book is accessible (`accessible ?b`): This means the book is not obscured or covered by other books, ensuring the librarian can physically pick it up.\n- The librarian's hands are free (`hands-free`): The librarian needs both hands free to pick up the book properly.\n\nOnce these preconditions are satisfied, the librarian can perform the 'take-from-table' action. The effects of this action are straightforward:\n- The book is no longer on the table (`not (on-table ?b)`): This reflects the change in the book's location from the table to the librarian's hands.\n- The librarian is now holding the book (`holding ?b`): This updates the state to reflect that the librarian has physically taken possession of the book.\n\nThis action is a basic step in managing the library's collection, allowing the librarian to move books from tables to shelves or to handle checkouts and returns.\n\n**Response:**\nParameters:\n1. ?b - book: [short description of the parameter representing the book to be taken from the table]\n\nPreconditions:\n```\n(and\n    (on-table ?b)\n    (accessible ?b)\n    (hands-free)\n)\n```\n\nEffects:\n```\n(and\n    (not (on-table ?b))\n    (holding ?b)\n)\n```\n\n---", "type": "response", "action": "take-from-table"}
{"role": "system", "content": "# CONTEXT #\nYou are a tool called PDDL Modeling Assistant. You are a technical experts in constructing Planning Domain Definition Language (PDDL) models via the natural language context.\n# OBJECTIVE #\n* Construct parameters, preconditions and effects based on the domain information, action description and the action name.\n* All variables in the preconditions and effects must be listed in the action's parameters. This restriction helps maintain the action's scope and prevents ambiguity in the planning process.\n* Do not use predicates that are not defined in the available predicates list to construct the preconditions and effects.\n* When the natural language description is ambiguous or certain predicate changes are implied, make reasonable assumptions based on common sense to fill up the implicit predicate in the PDDL action.\n# STYLE #\nFollow the writing style of technical experts. The output can be parsed by a machine, so it is important to follow the structured format.\n# TONE #\nBe precise and concise in constructing the PDDL action. The PDDL action should be clear and unambiguous.\n# AUDIENCE #\nYour audience is someone who is trying to learn how to construct PDDL actions from natural language descriptions.\n# RESPONSE #\nThe response should be in the following format:\n---\n**Explanation:** [Your explanation here]\n\n**Response:**\nParameters:\n1. ?x - [type]: [parameter description]\n2. ...\n\nPreconditions:\n```\n(and\n    ([predicate_1] ?x)\n)\n```\n\nEffects:\n```\n(and\n    (not ([predicate_2] ?x))\n    ([predicate_2] ?x)\n    ...\n)\n```\n---\n", "type": "prompt"}
{"role": "user", "content": "One or two examples from other domains for illustrating the input and output formats.\nHere are two examples from the barman domain for demonstrating the output format.\n        \nDomain information: In this domain there is a robot barman that manipulates drink dispensers, glasses and a shaker. The goal is to find a plan of the robots actions that serves a desired set of drinks. In this domain deletes of actions encode relevant knowledge given that robot hands can only grasp one object at a time and given that glasses need to be empty and clean to be filled.\n\nA list of available predicates\n1. (ontable ?c - container) ;; the container is on the table\n2. (holding ?h - hand ?c - container) ;; the hand is holding the container\n3. (handempty ?h - hand) ;; the hand is empty\n4. (empty ?c - container) ;; the container is empty\n5. (contains ?c - container ?b - beverage) ;; the container contains the beverage\n6. (clean ?c - container) ;; the container is clean\n7. (used ?c - container ?b - beverage) ;; the container is used for the beverage\n8. (dispenses ?d - dispenser ?i - ingredient) ;; the dispenser dispenses the ingredient\n9. (shaker-empty-level ?s - shaker ?l - level) ;; the empty level of the shaker\n10. (shaker-level ?s - shaker ?l - level) ;; the shaker currently is at the level\n11. (next ?l1 ?l2 - level) ;; l2 is the next level after l1\n12. (unshaked ?s - shaker) ;; the shaker is unshaked\n13. (shaked ?s - shaker) ;; the shaker is shaked\n14. (cocktail-part1 ?c - cocktail ?i - ingredient) ;; the ingredient is part of the cocktail\n15. (cocktail-part2 ?c - cocktail ?i - ingredient) ;; the ingredient is part of the cocktail\nExample 1\nAction Description: Similar to the previous action, but the shaker already contains ingredients and isn't clean.\n\nAction name: pour-shot-to-used-shaker\n\n\nYour answer:\n---\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:**\n\nImagine you have a robot bartender who's trying to make a drink using a shaker that already has some ingredients but hasn't been cleaned. To help the robot make the drink correctly, we need to give it a clear set of instructions. These instructions are what we call an action schema in PDDL, a planning language.\n\nLet's break down the action called \"pour-shot-to-used-shaker\":\n\n1. **Preconditions**: These are like the 'rules' or requirements that must be true before the robot can start the action.\n   - `(holding ?h1 ?s)`: The robot must be holding a shot glass (`?s`). Think of it like needing to hold a lemon before you can squeeze it.\n   - `(contains ?s ?i)`: The shot glass should have some ingredient (`?i`) in it. This is like saying the lemon needs to actually have juice.\n   - `(unshaked ?d)`: The shaker (`?d`) hasn't been shaken yet. It's like having a mixing bowl where the ingredients are still not mixed.\n   - `(shaker-level ?d ?l)`: The shaker is at a certain fullness level (`?l`), which tells us how much space is left or how full it is.\n   - `(next ?l ?l1)`: There's a next level (`?l1`) that the shaker will reach after pouring in the shot. It\u2019s similar to knowing that if you add one cup of flour to a half-full bowl, it will be three-quarters full.\n\n2. **Effects**: These are the changes that happen because of the action.\n   - `(not (contains ?s ?i))` and `(empty ?s)`: The shot glass will no longer contain the ingredient, and it will be empty. It\u2019s like pouring out all the lemon juice, leaving the lemon empty.\n   - `(contains ?d ?i)`: The shaker will now contain the ingredient from the shot glass. This is moving the lemon juice into the mixing bowl.\n   - `(not (shaker-level ?d ?l))` and `(shaker-level ?d ?l1)`: The shaker's level changes from the current level to the next. Just like adding the flour to the bowl changes its fullness.\n\nBy following these instructions, the robot knows exactly what needs to be true before starting (preconditions) and what changes to expect after it completes the action (effects). \n                \n**Response:**\nParameters:\n1. ?s - shot: [short description of the parameter]\n2. ?i - ingredient: [short description of the parameter]\n3. ?d - shaker: [short description of the parameter]\n4. ?h1 - hand: [short description of the parameter]\n5. ?l - level: [short description of the parameter]\n6. ?l1 - level: [short description of the parameter]\n\nPreconditions:\n```\n(and\n    (holding ?h1 ?s)\n    (contains ?s ?i)\n    (unshaked ?d)\n    (shaker-level ?d ?l)\n    (next ?l ?l1)\n)\n```\n\nEffects:\n```\n(and\n    (not (contains ?s ?i))\n    (contains ?d ?i)\n    (empty ?s)\n    (not (shaker-level ?d ?l))\n    (shaker-level ?d ?l1)\n)\n```\n\n---\n", "type": "prompt"}
{"role": "user", "content": "Example 2\nAction Description: The robot empties a shot glass it's holding.\n\nAction name: empty-shot\n\n\nYour answer:\n---\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:**\nImagine a robot barman who has the job of preparing and serving drinks. Now, let\u2019s think about the action of the robot emptying a shot glass it is holding, which is named \"empty-shot\" in our planning scenario.\n\n**Why these preconditions?**\n1. The robot needs to be holding the shot glass. This is pretty straightforward: if the robot isn't holding the glass, it can\u2019t empty it. It\u2019s like you needing to hold a cup in your hand if you want to pour out its contents.\n2. The shot glass must contain a beverage. Again, this makes sense because if the glass is already empty, there's nothing to pour out!\n\n**How do these preconditions lead to the effects?**\n1. The effect that the shot glass no longer contains the beverage (`not (contains ?p ?b)`) directly follows from the action of emptying it. When you pour out a drink, the cup turns from being full to being empty.\n2. The shot glass is then marked as empty (`empty ?p`). This tells everyone (or every robot and system involved) that the glass is now ready to be used again, perhaps to be refilled or cleaned.\n\nSo, by ensuring the robot is holding a shot glass that contains a drink, and by performing the action of emptying it, the robot effectively makes the shot glass available for the next use, fulfilling its role as a bartender robot. It's like making sure a painter has a clean brush to start a new painting, ensuring the right tools are ready for the next task.\n                \n**Response:**\nParameters:\n1. ?h - hand: [short description of the parameter]\n2. ?p - shot: [short description of the parameter]\n3. ?b - beverage: [short description of the parameter]\n\nPreconditions:\n```\n(and\n    (holding ?h ?p)\n    (contains ?p ?b)\n)\n```\n\nEffects:\n```\n(and\n    (not (contains ?p ?b))\n    (empty ?p)\n)\n```\n\n---\n", "type": "prompt"}
{"role": "user", "content": "Here are two examples from the storage domain for demonstrating the output format.\n        \nDomain information: Moving and storing crates of goods by hoists from containers to depots with spatial maps. This domain deals with the movement and storage of crates of goods using hoists. It involves different locations like containers and depots, and requires managing the spatial arrangement of crates and hoists in various areas. The actions primarily focus on the lifting, moving, and placement of crates by hoists, considering the spatial and availability constraints of the areas involved.\n\nA list of available predicates\n1. (clear ?s - store_area) ;; the store area is clear\n2. (crate_in ?c - crate ?p - place) ;; the crate is in the place\n3. (store_area_in ?s - store_area ?p - place) ;; the store area is in the place\n4. (available ?h - hoist) ;; the hoist is available\n5. (lifting ?h - hoist ?c - crate) ;; the hoist is lifting the crate\n6. (at ?h - hoist ?a - area) ;; the hoist is at the area\n7. (on ?c - crate ?s - store_area) ;; the crate is on the store area\n8. (connected ?a1 ?a2 - area) ;; the area a1 is connected to the area a2\nExample 1\nAction Description: Involves a hoist moving from a store_area to a transit_area. Preconditions are the hoist being at the source store_area and the areas being connected. The effect is the hoist moving to the transit_area and the source store_area becoming clear.\n\nAction name: go-out\n\n\nYour answer:\n---\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:** Let's imagine we have a little robotic hoist in a big warehouse. Its job is to move from one specific area where it usually stores things, called a store area, to another area meant for transitioning goods, which we call a transit area. Now, this action of moving from the store area to the transit area is called \"go-out.\"\n\nTo make sure this action goes smoothly, there are a few things that need to be in place beforehand, which we call preconditions. First, our little hoist needs to be at the store area to start with\u2014if it\u2019s somewhere else, it can\u2019t start moving from the store area, right? That's like saying you need to be at home to start walking to the park. Secondly, the store area and the transit area need to be connected. If there's no path or door between them, our hoist can't get to the transit area. It's a bit like needing a road or a path to walk on.\n\nNow, when the hoist successfully moves to the transit area, we have some changes that occur, which are the effects of the action. The hoist is no longer in the store area (it has moved, after all), and it's now in the transit area. This is straightforward: the hoist was here, and now it\u2019s there. Additionally, the store area becomes 'clear' or empty because the hoist has moved out. This is like saying that once you leave your room, the room is empty.\n\nSo, in summary, the \"go-out\" action moves our hoist from one area to another and makes sure the starting area is free for other activities. This helps keep things organized and running smoothly in our warehouse scenario.\n                \n**Response:**\nParameters:\n1. ?h - hoist: [short description of the parameter]\n2. ?from - store_area: [short description of the parameter]\n3. ?to - store_area: [short description of the parameter]\n\nPreconditions:\n```\n(and\n    (at ?h ?from)\n    (clear ?to)\n    (connected ?from ?to)\n)\n```\n\nEffects:\n```\n(and\n    (not (at ?h ?from))\n    (at ?h ?to)\n    (not (clear ?to))\n    (clear ?from)\n)\n```\n\n---\n", "type": "prompt"}
{"role": "user", "content": "Example 2\nAction Description: Moves a hoist from one store_area to another. Preconditions include the hoist being at the source store_area, the destination store_area being clear, and the areas being connected. The effect is the hoist moving to the destination and the change in clarity status of both store areas.\n\nAction name: move\n\n\nYour answer:\n---\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:**\n\nLet's imagine a scenario where you need to move a toy truck from one corner of a room to another. This toy truck represents the hoist, and the corners of the room are like different storage areas in our description.\n\n1. **Preconditions:**\n   - **Hoist is at the source area (at ?h ?from):** This condition makes sure that the hoist is actually at the starting point (like making sure your toy truck is really in the corner where you want to start moving it from). This is necessary because you can't move something from a place it isn't already at.\n   - **Destination area is clear (clear ?to):** This is like making sure that the corner you want to move your toy truck to doesn\u2019t have any obstacles or other toys in the way. The space needs to be clear so the hoist can move in without any issues.\n   - **Areas are connected (connected ?from ?to):** This checks if there is a direct path from the starting point to the destination, similar to making sure there's a clear path on the floor between the two corners of the room for the toy truck to travel without hitting a wall or furniture.\n\n2. **Effects:**\n   - **Hoist moves to the destination (at ?h ?to):** This is like saying your toy truck is now in the new corner of the room.\n   - **Hoist is no longer at the source (not (at ?h ?from)):** Just like your toy truck can't be in two places at once, when the hoist moves to the new area, it's no longer in the original area.\n   - **Destination area is no longer clear (not (clear ?to)):** Now that the hoist (or your toy truck) is in the new corner, that corner isn't empty anymore.\n   - **Source area becomes clear (clear ?from):** Since the hoist has moved away from the original area, that area is now free of obstacles or the hoist itself.\n\nSo, in simple terms, this action is like moving a toy from one clear, connected corner of the room to another. Before you move it, you need to check that it\u2019s starting in the right place, that there\u2019s no blockage where it\u2019s going, and that it can directly reach there. Once moved, the toy truck\u2019s old spot becomes empty, and its new spot is now occupied by it.\n                \n**Response:**\nParameters:\n1. ?h - hoist: [short description of the parameter]\n2. ?from - store_area: [short description of the parameter]\n3. ?to - transit_area: [short description of the parameter]\n\nPreconditions:\n```\n(and\n    (at ?h ?from)\n    (connected ?from ?to)\n)\n```\n\nEffects:\n```\n(and\n    (not (at ?h ?from))\n    (at ?h ?to)\n    (clear ?from)\n)\n```\n\n---\n", "type": "prompt"}
{"role": "user", "content": "Question: Here is the task.\nA natural language description of the domain\nDomain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.\n\nA list of available predicates\n1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf\n2. (on-table ?x - book) ;; ?x is on the table\n3. (accessible ?x - book) ;; ?x is accessible (not covered)\n4. (hands-free) ;; The hands of the librarian are free\n5. (holding ?x - book) ;; The librarian is holding ?x\n6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat\n7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty\n8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full\n9. (book-request ?book - book) ;; There is a request for book ?book\n10. (return-due ?book - book) ;; Book ?book is due for return\n11. (checked-out ?book - book) ;; Book ?book is checked out\n\nAction Description: Picture a librarian holding a book. The 'place-on-table' action involves placing the held book onto the table. This action is feasible if the librarian is currently holding the book. Once placed, the book becomes accessible again, and the librarian's hands are free.\n\nAction name: place-on-table\n\n\nYour answer:\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:**\n\nIn the context of a library, the 'place-on-table' action describes a librarian placing a book that they are currently holding onto a table. This action is straightforward but has important implications for the state of the library system. The librarian must be holding the book before it can be placed on the table, which is a necessary condition for the action to occur. Once the book is placed on the table, it becomes accessible to others, and the librarian's hands are free to perform other tasks.\n\nThe preconditions ensure that the librarian is indeed holding the book, which means the book is not on a shelf or table before the action takes place. The effects describe the outcome of the action: the book is now on the table, and the librarian's hands are free. This action does not explicitly state that the book becomes accessible, but we can infer this from the context, as books on tables are generally accessible to library patrons.\n\n**Response:**\nParameters:\n1. ?b - book: [The book that the librarian is holding and will place on the table]\n\nPreconditions:\n```\n(and\n    (holding ?b)\n)\n```\n\nEffects:\n```\n(and\n    (not (holding ?b))\n    (on-table ?b)\n    (hands-free)\n    (accessible ?b)\n)\n```\n\nNote: The predicate `(accessible ?b)` is included in the effects based on the inferred context that placing a book on the table makes it accessible. If this inference is not valid within the domain, it should be omitted from the effects.", "type": "response", "action": "place-on-table"}
{"role": "system", "content": "# CONTEXT #\nYou are a tool called PDDL Modeling Assistant. You are a technical experts in constructing Planning Domain Definition Language (PDDL) models via the natural language context.\n# OBJECTIVE #\n* Construct parameters, preconditions and effects based on the domain information, action description and the action name.\n* All variables in the preconditions and effects must be listed in the action's parameters. This restriction helps maintain the action's scope and prevents ambiguity in the planning process.\n* Do not use predicates that are not defined in the available predicates list to construct the preconditions and effects.\n* When the natural language description is ambiguous or certain predicate changes are implied, make reasonable assumptions based on common sense to fill up the implicit predicate in the PDDL action.\n# STYLE #\nFollow the writing style of technical experts. The output can be parsed by a machine, so it is important to follow the structured format.\n# TONE #\nBe precise and concise in constructing the PDDL action. The PDDL action should be clear and unambiguous.\n# AUDIENCE #\nYour audience is someone who is trying to learn how to construct PDDL actions from natural language descriptions.\n# RESPONSE #\nThe response should be in the following format:\n---\n**Explanation:** [Your explanation here]\n\n**Response:**\nParameters:\n1. ?x - [type]: [parameter description]\n2. ...\n\nPreconditions:\n```\n(and\n    ([predicate_1] ?x)\n)\n```\n\nEffects:\n```\n(and\n    (not ([predicate_2] ?x))\n    ([predicate_2] ?x)\n    ...\n)\n```\n---\n", "type": "prompt"}
{"role": "user", "content": "One or two examples from other domains for illustrating the input and output formats.\nHere are two examples from the barman domain for demonstrating the output format.\n        \nDomain information: In this domain there is a robot barman that manipulates drink dispensers, glasses and a shaker. The goal is to find a plan of the robots actions that serves a desired set of drinks. In this domain deletes of actions encode relevant knowledge given that robot hands can only grasp one object at a time and given that glasses need to be empty and clean to be filled.\n\nA list of available predicates\n1. (ontable ?c - container) ;; the container is on the table\n2. (holding ?h - hand ?c - container) ;; the hand is holding the container\n3. (handempty ?h - hand) ;; the hand is empty\n4. (empty ?c - container) ;; the container is empty\n5. (contains ?c - container ?b - beverage) ;; the container contains the beverage\n6. (clean ?c - container) ;; the container is clean\n7. (used ?c - container ?b - beverage) ;; the container is used for the beverage\n8. (dispenses ?d - dispenser ?i - ingredient) ;; the dispenser dispenses the ingredient\n9. (shaker-empty-level ?s - shaker ?l - level) ;; the empty level of the shaker\n10. (shaker-level ?s - shaker ?l - level) ;; the shaker currently is at the level\n11. (next ?l1 ?l2 - level) ;; l2 is the next level after l1\n12. (unshaked ?s - shaker) ;; the shaker is unshaked\n13. (shaked ?s - shaker) ;; the shaker is shaked\n14. (cocktail-part1 ?c - cocktail ?i - ingredient) ;; the ingredient is part of the cocktail\n15. (cocktail-part2 ?c - cocktail ?i - ingredient) ;; the ingredient is part of the cocktail\nExample 1\nAction Description: The robot empties a shaker that has been shaken, changing its level.\n\nAction name: empty-shaker\n\n\nYour answer:\n---\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:**\n\nLet's think of our robot barman as someone working in a kitchen, trying to prepare a cocktail using a shaker. The robot needs to follow certain steps to make sure everything goes smoothly and safely, just like following a recipe.\n\nThe action \"empty-shaker\" is all about the robot taking a shaker that has already been shaken (which means the ingredients are mixed up properly) and emptying it out so that the drink can be served, and the shaker is ready to be cleaned and used again.\n\nNow, let's talk about the preconditions, which are like the 'must-haves' before the robot can start this action:\n1. **(holding ?h ?s)** - The robot must be holding the shaker. It can\u2019t empty it if it\u2019s not holding it, right? Just like you can't pour milk from a jug if you're not holding it.\n2. **(contains ?s ?b)** - The shaker needs to have a drink inside. There's no point in trying to empty something that's already empty.\n3. **(shaked ?s)** - The drink inside the shaker must be mixed up by shaking. This ensures the drink is ready to be served.\n4. **(shaker-level ?s ?l)** - This tells us how much drink is currently in the shaker. It\u2019s important to know this so the robot knows it\u2019s actually pouring something out.\n5. **(shaker-empty-level ?s ?l1)** - This indicates what the level of the shaker should be after emptying it. Usually, it means it will be empty or nearly empty.\n\nThe effects of the action describe what changes after the robot empties the shaker:\n1. **(not (shaked ?s))** - The shaker is no longer considered 'shaken' because it's been emptied.\n2. **(not (shaker-level ?s ?l))** - The previous level of the drink is no longer relevant because it's been poured out.\n3. **(shaker-level ?s ?l1)** - This updates the level of the shaker to show it's now empty or at the lower level expected.\n4. **(not (contains ?s ?b))** - The shaker no longer contains the drink because it\u2019s been poured out.\n5. **(empty ?s)** - Finally, the shaker is empty, ready to be washed and used again for the next drink.\n\nBy ensuring all these preconditions are met before the action and then updating everything as described in the effects, the robot efficiently manages its tasks without any mix-ups or errors, just like a good cook keeps their kitchen in order. This process helps the robot move smoothly from one task to the next, ensuring each drink is made and served perfectly.\n                \n**Response:**\nParameters:\n1. ?h - hand: [short description of the parameter]\n2. ?c - container: [short description of the parameter]\n\nPreconditions:\n```\n(holding ?h ?c)\n```\n\nEffects:\n```\n(and\n    (not (holding ?h ?c))\n    (handempty ?h)\n    (ontable ?c)\n)\n```\n\n---\n", "type": "prompt"}
{"role": "user", "content": "Example 2\nAction Description: The robot places a container it's holding back onto the table.\n\nAction name: leave\n\n\nYour answer:\n---\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:**\n\nImagine you're teaching a robot barman to place a glass back on the table. The robot needs clear steps to follow, just like a recipe in cooking. In this scenario, the robot's task, or \"action,\" is named \"leave.\" Here's why the specific steps (preconditions and effects) in the action make sense:\n\n1. **Precondition (holding ?h ?c):** Before the robot can place the container on the table, it must be holding it. This is just like needing to pick up a plate before you can move it to another part of the kitchen. In the robot's instructions, this is expressed as \"(holding ?h ?c),\" meaning the robot's hand (?h) is currently holding the container (?c). This step ensures the robot knows it has the container and is ready to put it down.\n\n2. **Effects of the Action:**\n   - **(not (holding ?h ?c)):** This tells the robot to stop holding the container. It's like saying, \"Okay, you can let go of the plate now.\"\n   - **(handempty ?h):** Once the robot lets go of the container, its hand is empty. This is similar to you dropping something off and having your hand free again.\n   - **(ontable ?c):** Finally, the container ends up back on the table. This part of the instruction confirms that the container should now be on the table, just like setting a cup down on a counter.\n\nThis action schema is crafted so that the robot successfully completes the task of putting the container down in a way that makes sense step-by-step. The preconditions make sure the robot is ready to perform the action (holding the container), and the effects detail exactly what happens after the action (container on table, hand empty). It's a simple, clear set of instructions for the robot to follow, ensuring it does exactly what we want without any confusion.\n                \n**Response:**\nParameters:\n1. ?h - hand: [short description of the parameter]\n2. ?s - shaker: [short description of the parameter]\n3. ?b - cocktail: [short description of the parameter]\n4. ?l - level: [short description of the parameter]\n5. ?l1 - level: [short description of the parameter]\n\nPreconditions:\n```\n(and\n    (holding ?h ?s)\n    (contains ?s ?b)\n    (shaked ?s)\n    (shaker-level ?s ?l)\n    (shaker-empty-level ?s ?l1)\n)\n```\n\nEffects:\n```\n(and\n    (not (shaked ?s))\n    (not (shaker-level ?s ?l))\n    (shaker-level ?s ?l1)\n    (not (contains ?s ?b))\n    (empty ?s)\n)\n```\n\n---\n", "type": "prompt"}
{"role": "user", "content": "Here are two examples from the storage domain for demonstrating the output format.\n        \nDomain information: Moving and storing crates of goods by hoists from containers to depots with spatial maps. This domain deals with the movement and storage of crates of goods using hoists. It involves different locations like containers and depots, and requires managing the spatial arrangement of crates and hoists in various areas. The actions primarily focus on the lifting, moving, and placement of crates by hoists, considering the spatial and availability constraints of the areas involved.\n\nA list of available predicates\n1. (clear ?s - store_area) ;; the store area is clear\n2. (crate_in ?c - crate ?p - place) ;; the crate is in the place\n3. (store_area_in ?s - store_area ?p - place) ;; the store area is in the place\n4. (available ?h - hoist) ;; the hoist is available\n5. (lifting ?h - hoist ?c - crate) ;; the hoist is lifting the crate\n6. (at ?h - hoist ?a - area) ;; the hoist is at the area\n7. (on ?c - crate ?s - store_area) ;; the crate is on the store area\n8. (connected ?a1 ?a2 - area) ;; the area a1 is connected to the area a2\nExample 1\nAction Description: Moves a hoist from one store_area to another. Preconditions include the hoist being at the source store_area, the destination store_area being clear, and the areas being connected. The effect is the hoist moving to the destination and the change in clarity status of both store areas.\n\nAction name: move\n\n\nYour answer:\n---\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:**\n\nLet's imagine a scenario where you need to move a toy truck from one corner of a room to another. This toy truck represents the hoist, and the corners of the room are like different storage areas in our description.\n\n1. **Preconditions:**\n   - **Hoist is at the source area (at ?h ?from):** This condition makes sure that the hoist is actually at the starting point (like making sure your toy truck is really in the corner where you want to start moving it from). This is necessary because you can't move something from a place it isn't already at.\n   - **Destination area is clear (clear ?to):** This is like making sure that the corner you want to move your toy truck to doesn\u2019t have any obstacles or other toys in the way. The space needs to be clear so the hoist can move in without any issues.\n   - **Areas are connected (connected ?from ?to):** This checks if there is a direct path from the starting point to the destination, similar to making sure there's a clear path on the floor between the two corners of the room for the toy truck to travel without hitting a wall or furniture.\n\n2. **Effects:**\n   - **Hoist moves to the destination (at ?h ?to):** This is like saying your toy truck is now in the new corner of the room.\n   - **Hoist is no longer at the source (not (at ?h ?from)):** Just like your toy truck can't be in two places at once, when the hoist moves to the new area, it's no longer in the original area.\n   - **Destination area is no longer clear (not (clear ?to)):** Now that the hoist (or your toy truck) is in the new corner, that corner isn't empty anymore.\n   - **Source area becomes clear (clear ?from):** Since the hoist has moved away from the original area, that area is now free of obstacles or the hoist itself.\n\nSo, in simple terms, this action is like moving a toy from one clear, connected corner of the room to another. Before you move it, you need to check that it\u2019s starting in the right place, that there\u2019s no blockage where it\u2019s going, and that it can directly reach there. Once moved, the toy truck\u2019s old spot becomes empty, and its new spot is now occupied by it.\n                \n**Response:**\nParameters:\n1. ?h - hoist: [short description of the parameter]\n2. ?from - store_area: [short description of the parameter]\n3. ?to - store_area: [short description of the parameter]\n\nPreconditions:\n```\n(and\n    (at ?h ?from)\n    (clear ?to)\n    (connected ?from ?to)\n)\n```\n\nEffects:\n```\n(and\n    (not (at ?h ?from))\n    (at ?h ?to)\n    (not (clear ?to))\n    (clear ?from)\n)\n```\n\n---\n", "type": "prompt"}
{"role": "user", "content": "Example 2\nAction Description: This is the reverse of Go-out, where a hoist moves from a transit_area to a store_area. Preconditions include the hoist being at the transit_area, the areas being connected, and the destination store_area being clear. The effect is similar to Go-out but in reverse.\n\nAction name: go-in\n\n\nYour answer:\n---\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:**\n\nImagine you have a small robot hoist that helps move boxes in a big warehouse. The warehouse has different areas, like a spot for loading boxes and another for storing them. The \"go-in\" action is like telling the robot to move from a loading area to a storage area.\n\nNow, why does the robot need certain conditions to be met before it can move? Here's a breakdown:\n\n1. **The robot must be at the loading area** (transit_area): This is pretty straightforward. If the robot isn't at the loading area, it can't start moving towards the storage area because it's simply not there to begin the task.\n\n2. **The loading area and storage area must be connected**: It's like making sure there's a clear path or a road between two places before you start driving. If there's no path, the robot can't move between these areas.\n\n3. **The storage area must be clear**: This ensures that there is space available for the robot to enter and place the boxes. It's similar to needing an empty parking spot to park your car.\n\nNow, what happens after the robot moves based on these conditions?\n\n- **The robot is no longer in the loading area**: Just like when you leave your house, you're not inside anymore. The robot has left the loading area, so we say it's no longer there.\n  \n- **The robot is now in the storage area**: Like arriving at a friend\u2019s house after leaving yours, the robot has moved and is now at the storage destination.\n\n- **The storage area is no longer clear**: Since the robot moves in with a box, the space it occupied is now taken. It's like the parking space being occupied once you park your car.\n\nIn summary, these conditions and results make sure the robot moves safely and efficiently from one place to another, without any surprises like arriving at a blocked or non-existent path, or finding no space to drop off the box. This careful planning helps keep everything in the warehouse running smoothly!\n                \n**Response:**\nParameters:\n1. ?h - hoist: [short description of the parameter]\n2. ?from - transit_area: [short description of the parameter]\n3. ?to - store_area: [short description of the parameter]\n\nPreconditions:\n```\n(and\n    (at ?h ?from)\n    (connected ?from ?to)\n    (clear ?to)\n)\n```\n\nEffects:\n```\n(and\n    (not (at ?h ?from))\n    (at ?h ?to)\n    (not (clear ?to))\n)\n```\n\n---\n", "type": "prompt"}
{"role": "user", "content": "Question: Here is the task.\nA natural language description of the domain\nDomain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.\n\nA list of available predicates\n1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf\n2. (on-table ?x - book) ;; ?x is on the table\n3. (accessible ?x - book) ;; ?x is accessible (not covered)\n4. (hands-free) ;; The hands of the librarian are free\n5. (holding ?x - book) ;; The librarian is holding ?x\n6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat\n7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty\n8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full\n9. (book-request ?book - book) ;; There is a request for book ?book\n10. (return-due ?book - book) ;; Book ?book is due for return\n11. (checked-out ?book - book) ;; Book ?book is checked out\n\nAction Description: Consider a librarian holding a book and standing near a shelf. The 'place-on-shelf' action involves placing the held book on top of another book on the shelf, given that the book on the shelf is accessible. This action results in the held book becoming accessible, the book on the shelf becoming inaccessible, and the librarian's hands becoming free.\n\nAction name: place-on-shelf\n\n\nYour answer:\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:**\n\nIn the context of a library, the \"place-on-shelf\" action is a fundamental task that a librarian performs to organize books. This action involves a librarian who is currently holding a book and wants to place it on a shelf. For this action to be executed, certain conditions must be met, and certain outcomes are expected as a result of the action.\n\nThe preconditions for the \"place-on-shelf\" action ensure that the librarian can successfully place the book on the shelf:\n- **(holding ?book)**: The librarian must be holding a book to place it on the shelf.\n- **(on-shelf ?below-book)**: There must be a book already on the shelf that the librarian will place the held book on top of.\n- **(accessible ?below-book)**: The book that is already on the shelf must be accessible, meaning it is not covered by another book and can be reached to place another book on top of it.\n\nThe effects of the action describe the changes that occur once the librarian places the book on the shelf:\n- **(not (holding ?book))**: The librarian is no longer holding the book because it has been placed on the shelf.\n- **(hands-free)**: With the book placed on the shelf, the librarian's hands are now free to perform other tasks.\n- **(on-shelf ?book)**: The book that was being held is now on the shelf.\n- **(not (accessible ?below-book))**: The book that was below and accessible is now covered by the newly placed book and is no longer accessible.\n\nThis action helps maintain the order of the library and ensures that books are accessible when needed and that the librarian can continue with other duties.\n\n**Response:**\nParameters:\n1. ?book - book: [The book that the librarian is holding and will place on the shelf]\n2. ?below-book - book: [The book that is already on the shelf and will be below the placed book]\n\nPreconditions:\n```\n(and\n    (holding ?book)\n    (on-shelf ?below-book)\n    (accessible ?below-book)\n)\n```\n\nEffects:\n```\n(and\n    (not (holding ?book))\n    (hands-free)\n    (on-shelf ?book)\n    (not (accessible ?below-book))\n)\n```", "type": "response", "action": "place-on-shelf"}
{"role": "system", "content": "# CONTEXT #\nYou are a tool called PDDL Modeling Assistant. You are a technical experts in constructing Planning Domain Definition Language (PDDL) models via the natural language context.\n# OBJECTIVE #\n* Construct parameters, preconditions and effects based on the domain information, action description and the action name.\n* All variables in the preconditions and effects must be listed in the action's parameters. This restriction helps maintain the action's scope and prevents ambiguity in the planning process.\n* Do not use predicates that are not defined in the available predicates list to construct the preconditions and effects.\n* When the natural language description is ambiguous or certain predicate changes are implied, make reasonable assumptions based on common sense to fill up the implicit predicate in the PDDL action.\n# STYLE #\nFollow the writing style of technical experts. The output can be parsed by a machine, so it is important to follow the structured format.\n# TONE #\nBe precise and concise in constructing the PDDL action. The PDDL action should be clear and unambiguous.\n# AUDIENCE #\nYour audience is someone who is trying to learn how to construct PDDL actions from natural language descriptions.\n# RESPONSE #\nThe response should be in the following format:\n---\n**Explanation:** [Your explanation here]\n\n**Response:**\nParameters:\n1. ?x - [type]: [parameter description]\n2. ...\n\nPreconditions:\n```\n(and\n    ([predicate_1] ?x)\n)\n```\n\nEffects:\n```\n(and\n    (not ([predicate_2] ?x))\n    ([predicate_2] ?x)\n    ...\n)\n```\n---\n", "type": "prompt"}
{"role": "user", "content": "One or two examples from other domains for illustrating the input and output formats.\nHere are two examples from the barman domain for demonstrating the output format.\n        \nDomain information: In this domain there is a robot barman that manipulates drink dispensers, glasses and a shaker. The goal is to find a plan of the robots actions that serves a desired set of drinks. In this domain deletes of actions encode relevant knowledge given that robot hands can only grasp one object at a time and given that glasses need to be empty and clean to be filled.\n\nA list of available predicates\n1. (ontable ?c - container) ;; the container is on the table\n2. (holding ?h - hand ?c - container) ;; the hand is holding the container\n3. (handempty ?h - hand) ;; the hand is empty\n4. (empty ?c - container) ;; the container is empty\n5. (contains ?c - container ?b - beverage) ;; the container contains the beverage\n6. (clean ?c - container) ;; the container is clean\n7. (used ?c - container ?b - beverage) ;; the container is used for the beverage\n8. (dispenses ?d - dispenser ?i - ingredient) ;; the dispenser dispenses the ingredient\n9. (shaker-empty-level ?s - shaker ?l - level) ;; the empty level of the shaker\n10. (shaker-level ?s - shaker ?l - level) ;; the shaker currently is at the level\n11. (next ?l1 ?l2 - level) ;; l2 is the next level after l1\n12. (unshaked ?s - shaker) ;; the shaker is unshaked\n13. (shaked ?s - shaker) ;; the shaker is shaked\n14. (cocktail-part1 ?c - cocktail ?i - ingredient) ;; the ingredient is part of the cocktail\n15. (cocktail-part2 ?c - cocktail ?i - ingredient) ;; the ingredient is part of the cocktail\nExample 1\nAction Description: Similar to the previous action, but the shaker already contains ingredients and isn't clean.\n\nAction name: pour-shot-to-used-shaker\n\n\nYour answer:\n---\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:**\n\nImagine you have a robot bartender who's trying to make a drink using a shaker that already has some ingredients but hasn't been cleaned. To help the robot make the drink correctly, we need to give it a clear set of instructions. These instructions are what we call an action schema in PDDL, a planning language.\n\nLet's break down the action called \"pour-shot-to-used-shaker\":\n\n1. **Preconditions**: These are like the 'rules' or requirements that must be true before the robot can start the action.\n   - `(holding ?h1 ?s)`: The robot must be holding a shot glass (`?s`). Think of it like needing to hold a lemon before you can squeeze it.\n   - `(contains ?s ?i)`: The shot glass should have some ingredient (`?i`) in it. This is like saying the lemon needs to actually have juice.\n   - `(unshaked ?d)`: The shaker (`?d`) hasn't been shaken yet. It's like having a mixing bowl where the ingredients are still not mixed.\n   - `(shaker-level ?d ?l)`: The shaker is at a certain fullness level (`?l`), which tells us how much space is left or how full it is.\n   - `(next ?l ?l1)`: There's a next level (`?l1`) that the shaker will reach after pouring in the shot. It\u2019s similar to knowing that if you add one cup of flour to a half-full bowl, it will be three-quarters full.\n\n2. **Effects**: These are the changes that happen because of the action.\n   - `(not (contains ?s ?i))` and `(empty ?s)`: The shot glass will no longer contain the ingredient, and it will be empty. It\u2019s like pouring out all the lemon juice, leaving the lemon empty.\n   - `(contains ?d ?i)`: The shaker will now contain the ingredient from the shot glass. This is moving the lemon juice into the mixing bowl.\n   - `(not (shaker-level ?d ?l))` and `(shaker-level ?d ?l1)`: The shaker's level changes from the current level to the next. Just like adding the flour to the bowl changes its fullness.\n\nBy following these instructions, the robot knows exactly what needs to be true before starting (preconditions) and what changes to expect after it completes the action (effects). \n                \n**Response:**\nParameters:\n1. ?s - shot: [short description of the parameter]\n2. ?i - ingredient: [short description of the parameter]\n3. ?d - shaker: [short description of the parameter]\n4. ?h1 - hand: [short description of the parameter]\n5. ?l - level: [short description of the parameter]\n6. ?l1 - level: [short description of the parameter]\n\nPreconditions:\n```\n(and\n    (holding ?h1 ?s)\n    (contains ?s ?i)\n    (unshaked ?d)\n    (shaker-level ?d ?l)\n    (next ?l ?l1)\n)\n```\n\nEffects:\n```\n(and\n    (not (contains ?s ?i))\n    (contains ?d ?i)\n    (empty ?s)\n    (not (shaker-level ?d ?l))\n    (shaker-level ?d ?l1)\n)\n```\n\n---\n", "type": "prompt"}
{"role": "user", "content": "Example 2\nAction Description: The robot fills an empty, clean shot glass with an ingredient from a dispenser.\n\nAction name: fill-shot\n\n\nYour answer:\n---\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:** Imagine our robot barman in a kitchen where it needs to prepare a drink using a shot glass. The robot has two hands and can only use one hand to hold an item at a time. Here\u2019s why the robot needs to follow certain steps, called preconditions, before it can fill the shot glass, which is the goal of the \"fill-shot\" action.\n\nFirstly, the robot must be holding the shot glass with one hand, which we call ?h1. This is important because the robot can only fill something it is holding. The precondition `(holding ?h1 ?s)` ensures that the robot has a good grip on the shot glass before proceeding.\n\nSecondly, the other hand, ?h2, must be empty (`handempty ?h2`). This is because if the hand is already holding something else, the robot wouldn\u2019t be able to operate the dispenser properly or manage other tasks like adding more ingredients if needed.\n\nThe next precondition is that the dispenser identified as ?d must be capable of dispensing the ingredient ?i, as noted in `(dispenses ?d ?i)`. This ensures that the robot is at the right dispenser for the ingredient it needs to fill the shot glass with.\n\nAlso, the shot glass itself must be empty (`empty ?s`) and clean (`clean ?s`) before anything is poured into it. This is common sense, right? You wouldn\u2019t want to drink from a dirty or already filled glass! This makes sure the drink is clean and tastes as expected.\n\nAfter all these conditions are met, the robot can go ahead and fill the shot glass. The effects of this action include a few changes:\n- The shot glass is no longer empty (`not (empty ?s)`), meaning it now contains the ingredient.\n- The shot glass now contains the specific ingredient (`contains ?s ?i`), which is just like saying the glass now has, say, gin in it.\n- The glass is no longer clean (`not (clean ?s)`) because it now has something in it.\n- Lastly, the shot glass is marked as used for that particular ingredient (`used ?s ?i`), which helps the robot remember what has been done with that glass.\n                \n**Response:**\nParameters:\n1. ?s - shot: [short description of the parameter]\n2. ?i - ingredient: [short description of the parameter]\n3. ?h1 - hand: [short description of the parameter]\n4. ?h2 - hand: [short description of the parameter]\n5. ?d - dispenser: [short description of the parameter]\n\nPreconditions:\n```\n(and\n    (holding ?h1 ?s)\n    (handempty ?h2)\n    (dispenses ?d ?i)\n    (empty ?s)\n    (clean ?s)\n)\n```\n\nEffects:\n```\n(and\n    (not (empty ?s))\n    (contains ?s ?i)\n    (not (clean ?s))\n    (used ?s ?i)\n)\n```\n\n---\n", "type": "prompt"}
{"role": "user", "content": "Here are two examples from the storage domain for demonstrating the output format.\n        \nDomain information: Moving and storing crates of goods by hoists from containers to depots with spatial maps. This domain deals with the movement and storage of crates of goods using hoists. It involves different locations like containers and depots, and requires managing the spatial arrangement of crates and hoists in various areas. The actions primarily focus on the lifting, moving, and placement of crates by hoists, considering the spatial and availability constraints of the areas involved.\n\nA list of available predicates\n1. (clear ?s - store_area) ;; the store area is clear\n2. (crate_in ?c - crate ?p - place) ;; the crate is in the place\n3. (store_area_in ?s - store_area ?p - place) ;; the store area is in the place\n4. (available ?h - hoist) ;; the hoist is available\n5. (lifting ?h - hoist ?c - crate) ;; the hoist is lifting the crate\n6. (at ?h - hoist ?a - area) ;; the hoist is at the area\n7. (on ?c - crate ?s - store_area) ;; the crate is on the store area\n8. (connected ?a1 ?a2 - area) ;; the area a1 is connected to the area a2\nExample 1\nAction Description: Involves a hoist moving from a store_area to a transit_area. Preconditions are the hoist being at the source store_area and the areas being connected. The effect is the hoist moving to the transit_area and the source store_area becoming clear.\n\nAction name: go-out\n\n\nYour answer:\n---\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:** Let's imagine we have a little robotic hoist in a big warehouse. Its job is to move from one specific area where it usually stores things, called a store area, to another area meant for transitioning goods, which we call a transit area. Now, this action of moving from the store area to the transit area is called \"go-out.\"\n\nTo make sure this action goes smoothly, there are a few things that need to be in place beforehand, which we call preconditions. First, our little hoist needs to be at the store area to start with\u2014if it\u2019s somewhere else, it can\u2019t start moving from the store area, right? That's like saying you need to be at home to start walking to the park. Secondly, the store area and the transit area need to be connected. If there's no path or door between them, our hoist can't get to the transit area. It's a bit like needing a road or a path to walk on.\n\nNow, when the hoist successfully moves to the transit area, we have some changes that occur, which are the effects of the action. The hoist is no longer in the store area (it has moved, after all), and it's now in the transit area. This is straightforward: the hoist was here, and now it\u2019s there. Additionally, the store area becomes 'clear' or empty because the hoist has moved out. This is like saying that once you leave your room, the room is empty.\n\nSo, in summary, the \"go-out\" action moves our hoist from one area to another and makes sure the starting area is free for other activities. This helps keep things organized and running smoothly in our warehouse scenario.\n                \n**Response:**\nParameters:\n1. ?h - hoist: [short description of the parameter]\n2. ?from - store_area: [short description of the parameter]\n3. ?to - store_area: [short description of the parameter]\n\nPreconditions:\n```\n(and\n    (at ?h ?from)\n    (clear ?to)\n    (connected ?from ?to)\n)\n```\n\nEffects:\n```\n(and\n    (not (at ?h ?from))\n    (at ?h ?to)\n    (not (clear ?to))\n    (clear ?from)\n)\n```\n\n---\n", "type": "prompt"}
{"role": "user", "content": "Example 2\nAction Description: Moves a hoist from one store_area to another. Preconditions include the hoist being at the source store_area, the destination store_area being clear, and the areas being connected. The effect is the hoist moving to the destination and the change in clarity status of both store areas.\n\nAction name: move\n\n\nYour answer:\n---\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:**\n\nLet's imagine a scenario where you need to move a toy truck from one corner of a room to another. This toy truck represents the hoist, and the corners of the room are like different storage areas in our description.\n\n1. **Preconditions:**\n   - **Hoist is at the source area (at ?h ?from):** This condition makes sure that the hoist is actually at the starting point (like making sure your toy truck is really in the corner where you want to start moving it from). This is necessary because you can't move something from a place it isn't already at.\n   - **Destination area is clear (clear ?to):** This is like making sure that the corner you want to move your toy truck to doesn\u2019t have any obstacles or other toys in the way. The space needs to be clear so the hoist can move in without any issues.\n   - **Areas are connected (connected ?from ?to):** This checks if there is a direct path from the starting point to the destination, similar to making sure there's a clear path on the floor between the two corners of the room for the toy truck to travel without hitting a wall or furniture.\n\n2. **Effects:**\n   - **Hoist moves to the destination (at ?h ?to):** This is like saying your toy truck is now in the new corner of the room.\n   - **Hoist is no longer at the source (not (at ?h ?from)):** Just like your toy truck can't be in two places at once, when the hoist moves to the new area, it's no longer in the original area.\n   - **Destination area is no longer clear (not (clear ?to)):** Now that the hoist (or your toy truck) is in the new corner, that corner isn't empty anymore.\n   - **Source area becomes clear (clear ?from):** Since the hoist has moved away from the original area, that area is now free of obstacles or the hoist itself.\n\nSo, in simple terms, this action is like moving a toy from one clear, connected corner of the room to another. Before you move it, you need to check that it\u2019s starting in the right place, that there\u2019s no blockage where it\u2019s going, and that it can directly reach there. Once moved, the toy truck\u2019s old spot becomes empty, and its new spot is now occupied by it.\n                \n**Response:**\nParameters:\n1. ?h - hoist: [short description of the parameter]\n2. ?from - store_area: [short description of the parameter]\n3. ?to - transit_area: [short description of the parameter]\n\nPreconditions:\n```\n(and\n    (at ?h ?from)\n    (connected ?from ?to)\n)\n```\n\nEffects:\n```\n(and\n    (not (at ?h ?from))\n    (at ?h ?to)\n    (clear ?from)\n)\n```\n\n---\n", "type": "prompt"}
{"role": "user", "content": "Question: Here is the task.\nA natural language description of the domain\nDomain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.\n\nA list of available predicates\n1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf\n2. (on-table ?x - book) ;; ?x is on the table\n3. (accessible ?x - book) ;; ?x is accessible (not covered)\n4. (hands-free) ;; The hands of the librarian are free\n5. (holding ?x - book) ;; The librarian is holding ?x\n6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat\n7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty\n8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full\n9. (book-request ?book - book) ;; There is a request for book ?book\n10. (return-due ?book - book) ;; Book ?book is due for return\n11. (checked-out ?book - book) ;; Book ?book is checked out\n\nAction Description: Imagine a librarian approaching a shelf where one book is placed on top of another. The 'remove-from-shelf' action allows the librarian to take the top book off the shelf, provided it is accessible and the librarian's hands are free. This action makes the book on the shelf accessible and the librarian holds the removed book.\n\nAction name: remove-from-shelf\n\n\nYour answer:\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:**\n\nIn the context of a library, the action \"remove-from-shelf\" involves a librarian taking a book from a shelf. For this action to be executed, certain conditions must be met. The book that the librarian wants to remove must be on top of another book on the shelf, indicating its position. The book must also be accessible, meaning it's not covered by another book or object, and the librarian's hands must be free to handle the book.\n\nOnce the librarian removes the book from the shelf, the state of the library changes. The book that was underneath the removed book becomes accessible because it's now on the top of the stack or alone on that part of the shelf. Additionally, the librarian is now holding the book that was removed.\n\nLet's break down the preconditions and effects:\n\n1. **Preconditions:**\n   - The book to be removed must be on top of another book on the shelf (`on-shelf ?book ?bottom-book`).\n   - The book to be removed must be accessible (`accessible ?book`).\n   - The librarian's hands must be free (`hands-free`).\n\n2. **Effects:**\n   - The book that was underneath becomes accessible (`accessible ?bottom-book`).\n   - The librarian is now holding the book that was removed (`holding ?book`).\n   - The book is no longer on the shelf (`not (on-shelf ?book ?bottom-book)`).\n\n**Response:**\nParameters:\n1. ?book - book: [The book to be removed from the shelf]\n2. ?bottom-book - book: [The book that is underneath the book to be removed]\n\nPreconditions:\n```\n(and\n    (on-shelf ?book ?bottom-book)\n    (accessible ?book)\n    (hands-free)\n)\n```\n\nEffects:\n```\n(and\n    (not (on-shelf ?book ?bottom-book))\n    (holding ?book)\n    (accessible ?bottom-book)\n)\n```\n\n---", "type": "response", "action": "remove-from-shelf"}
{"role": "system", "content": "# CONTEXT #\nYou are a tool called PDDL Modeling Assistant. You are a technical experts in constructing Planning Domain Definition Language (PDDL) models via the natural language context.\n# OBJECTIVE #\n* Construct parameters, preconditions and effects based on the domain information, action description and the action name.\n* All variables in the preconditions and effects must be listed in the action's parameters. This restriction helps maintain the action's scope and prevents ambiguity in the planning process.\n* Do not use predicates that are not defined in the available predicates list to construct the preconditions and effects.\n* When the natural language description is ambiguous or certain predicate changes are implied, make reasonable assumptions based on common sense to fill up the implicit predicate in the PDDL action.\n# STYLE #\nFollow the writing style of technical experts. The output can be parsed by a machine, so it is important to follow the structured format.\n# TONE #\nBe precise and concise in constructing the PDDL action. The PDDL action should be clear and unambiguous.\n# AUDIENCE #\nYour audience is someone who is trying to learn how to construct PDDL actions from natural language descriptions.\n# RESPONSE #\nThe response should be in the following format:\n---\n**Explanation:** [Your explanation here]\n\n**Response:**\nParameters:\n1. ?x - [type]: [parameter description]\n2. ...\n\nPreconditions:\n```\n(and\n    ([predicate_1] ?x)\n)\n```\n\nEffects:\n```\n(and\n    (not ([predicate_2] ?x))\n    ([predicate_2] ?x)\n    ...\n)\n```\n---\n", "type": "prompt"}
{"role": "user", "content": "One or two examples from other domains for illustrating the input and output formats.\nHere are two examples from the barman domain for demonstrating the output format.\n        \nDomain information: In this domain there is a robot barman that manipulates drink dispensers, glasses and a shaker. The goal is to find a plan of the robots actions that serves a desired set of drinks. In this domain deletes of actions encode relevant knowledge given that robot hands can only grasp one object at a time and given that glasses need to be empty and clean to be filled.\n\nA list of available predicates\n1. (ontable ?c - container) ;; the container is on the table\n2. (holding ?h - hand ?c - container) ;; the hand is holding the container\n3. (handempty ?h - hand) ;; the hand is empty\n4. (empty ?c - container) ;; the container is empty\n5. (contains ?c - container ?b - beverage) ;; the container contains the beverage\n6. (clean ?c - container) ;; the container is clean\n7. (used ?c - container ?b - beverage) ;; the container is used for the beverage\n8. (dispenses ?d - dispenser ?i - ingredient) ;; the dispenser dispenses the ingredient\n9. (shaker-empty-level ?s - shaker ?l - level) ;; the empty level of the shaker\n10. (shaker-level ?s - shaker ?l - level) ;; the shaker currently is at the level\n11. (next ?l1 ?l2 - level) ;; l2 is the next level after l1\n12. (unshaked ?s - shaker) ;; the shaker is unshaked\n13. (shaked ?s - shaker) ;; the shaker is shaked\n14. (cocktail-part1 ?c - cocktail ?i - ingredient) ;; the ingredient is part of the cocktail\n15. (cocktail-part2 ?c - cocktail ?i - ingredient) ;; the ingredient is part of the cocktail\nExample 1\nAction Description: Similar to the previous action, but the shaker already contains ingredients and isn't clean.\n\nAction name: pour-shot-to-used-shaker\n\n\nYour answer:\n---\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:**\n\nImagine you have a robot bartender who's trying to make a drink using a shaker that already has some ingredients but hasn't been cleaned. To help the robot make the drink correctly, we need to give it a clear set of instructions. These instructions are what we call an action schema in PDDL, a planning language.\n\nLet's break down the action called \"pour-shot-to-used-shaker\":\n\n1. **Preconditions**: These are like the 'rules' or requirements that must be true before the robot can start the action.\n   - `(holding ?h1 ?s)`: The robot must be holding a shot glass (`?s`). Think of it like needing to hold a lemon before you can squeeze it.\n   - `(contains ?s ?i)`: The shot glass should have some ingredient (`?i`) in it. This is like saying the lemon needs to actually have juice.\n   - `(unshaked ?d)`: The shaker (`?d`) hasn't been shaken yet. It's like having a mixing bowl where the ingredients are still not mixed.\n   - `(shaker-level ?d ?l)`: The shaker is at a certain fullness level (`?l`), which tells us how much space is left or how full it is.\n   - `(next ?l ?l1)`: There's a next level (`?l1`) that the shaker will reach after pouring in the shot. It\u2019s similar to knowing that if you add one cup of flour to a half-full bowl, it will be three-quarters full.\n\n2. **Effects**: These are the changes that happen because of the action.\n   - `(not (contains ?s ?i))` and `(empty ?s)`: The shot glass will no longer contain the ingredient, and it will be empty. It\u2019s like pouring out all the lemon juice, leaving the lemon empty.\n   - `(contains ?d ?i)`: The shaker will now contain the ingredient from the shot glass. This is moving the lemon juice into the mixing bowl.\n   - `(not (shaker-level ?d ?l))` and `(shaker-level ?d ?l1)`: The shaker's level changes from the current level to the next. Just like adding the flour to the bowl changes its fullness.\n\nBy following these instructions, the robot knows exactly what needs to be true before starting (preconditions) and what changes to expect after it completes the action (effects). \n                \n**Response:**\nParameters:\n1. ?s - shot: [short description of the parameter]\n2. ?i - ingredient: [short description of the parameter]\n3. ?d - shaker: [short description of the parameter]\n4. ?h1 - hand: [short description of the parameter]\n5. ?l - level: [short description of the parameter]\n6. ?l1 - level: [short description of the parameter]\n\nPreconditions:\n```\n(and\n    (holding ?h1 ?s)\n    (contains ?s ?i)\n    (unshaked ?d)\n    (shaker-level ?d ?l)\n    (next ?l ?l1)\n)\n```\n\nEffects:\n```\n(and\n    (not (contains ?s ?i))\n    (contains ?d ?i)\n    (empty ?s)\n    (not (shaker-level ?d ?l))\n    (shaker-level ?d ?l1)\n)\n```\n\n---\n", "type": "prompt"}
{"role": "user", "content": "Example 2\nAction Description: The robot cleans a used shot glass.\n\nAction name: clean-shot\n\n\nYour answer:\n---\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:**\n\nLet's imagine our robot barman is preparing drinks in a bar where it must handle different glasses, like a shot glass. The robot needs to clean a used shot glass to make sure it's ready for the next drink. This situation leads us to create an action called `clean-shot` in the robot's planning.\n\nFirst, the robot needs to make sure it's holding the shot glass with one hand (`holding ?h1 ?s`). This makes sense because you need to hold the glass to clean it properly.\n\nNext, the robot needs to have its other hand free (`handempty ?h2`). This is important because the robot might need to use this hand to operate cleaning tools or to stabilize the glass while cleaning.\n\nThe glass itself must be empty (`empty ?s`) before it can be cleaned. Imagine trying to clean a glass while it's still full of liquid; it would be messy and ineffective!\n\nLastly, the glass should have been used (`used ?s ?b`), indicating it was previously filled with a drink and now requires cleaning. This precondition checks whether the glass actually needs cleaning.\n\nOnce all these conditions are met, the robot can proceed with the cleaning action. The effect of this action is twofold: the shot glass is no longer 'used' for the specific beverage (`not (used ?s ?b)`), and the glass becomes clean (`clean ?s`).\n\nBy setting these preconditions and effects, we ensure that the robot performs the cleaning task effectively and prepares the glass for future use, maintaining a smooth operation in the bar scenario.\n                \n**Response:**\nParameters:\n1. ?s - shot: [short description of the parameter]\n2. ?b - beverage: [short description of the parameter]\n3. ?h1 - hand: [short description of the parameter]\n4. ?h2 - hand: [short description of the parameter]\n\nPreconditions:\n```\n(and\n    (holding ?h1 ?s)\n    (handempty ?h2)\n    (empty ?s)\n    (used ?s ?b)\n)\n```\n\nEffects:\n```\n(and\n    (not (used ?s ?b))\n    (clean ?s)\n)\n```\n\n---\n", "type": "prompt"}
{"role": "user", "content": "Here are two examples from the storage domain for demonstrating the output format.\n        \nDomain information: Moving and storing crates of goods by hoists from containers to depots with spatial maps. This domain deals with the movement and storage of crates of goods using hoists. It involves different locations like containers and depots, and requires managing the spatial arrangement of crates and hoists in various areas. The actions primarily focus on the lifting, moving, and placement of crates by hoists, considering the spatial and availability constraints of the areas involved.\n\nA list of available predicates\n1. (clear ?s - store_area) ;; the store area is clear\n2. (crate_in ?c - crate ?p - place) ;; the crate is in the place\n3. (store_area_in ?s - store_area ?p - place) ;; the store area is in the place\n4. (available ?h - hoist) ;; the hoist is available\n5. (lifting ?h - hoist ?c - crate) ;; the hoist is lifting the crate\n6. (at ?h - hoist ?a - area) ;; the hoist is at the area\n7. (on ?c - crate ?s - store_area) ;; the crate is on the store area\n8. (connected ?a1 ?a2 - area) ;; the area a1 is connected to the area a2\nExample 1\nAction Description: Involves a hoist moving from a store_area to a transit_area. Preconditions are the hoist being at the source store_area and the areas being connected. The effect is the hoist moving to the transit_area and the source store_area becoming clear.\n\nAction name: go-out\n\n\nYour answer:\n---\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:** Let's imagine we have a little robotic hoist in a big warehouse. Its job is to move from one specific area where it usually stores things, called a store area, to another area meant for transitioning goods, which we call a transit area. Now, this action of moving from the store area to the transit area is called \"go-out.\"\n\nTo make sure this action goes smoothly, there are a few things that need to be in place beforehand, which we call preconditions. First, our little hoist needs to be at the store area to start with\u2014if it\u2019s somewhere else, it can\u2019t start moving from the store area, right? That's like saying you need to be at home to start walking to the park. Secondly, the store area and the transit area need to be connected. If there's no path or door between them, our hoist can't get to the transit area. It's a bit like needing a road or a path to walk on.\n\nNow, when the hoist successfully moves to the transit area, we have some changes that occur, which are the effects of the action. The hoist is no longer in the store area (it has moved, after all), and it's now in the transit area. This is straightforward: the hoist was here, and now it\u2019s there. Additionally, the store area becomes 'clear' or empty because the hoist has moved out. This is like saying that once you leave your room, the room is empty.\n\nSo, in summary, the \"go-out\" action moves our hoist from one area to another and makes sure the starting area is free for other activities. This helps keep things organized and running smoothly in our warehouse scenario.\n                \n**Response:**\nParameters:\n1. ?h - hoist: [short description of the parameter]\n2. ?from - store_area: [short description of the parameter]\n3. ?to - store_area: [short description of the parameter]\n\nPreconditions:\n```\n(and\n    (at ?h ?from)\n    (clear ?to)\n    (connected ?from ?to)\n)\n```\n\nEffects:\n```\n(and\n    (not (at ?h ?from))\n    (at ?h ?to)\n    (not (clear ?to))\n    (clear ?from)\n)\n```\n\n---\n", "type": "prompt"}
{"role": "user", "content": "Example 2\nAction Description: Moves a hoist from one store_area to another. Preconditions include the hoist being at the source store_area, the destination store_area being clear, and the areas being connected. The effect is the hoist moving to the destination and the change in clarity status of both store areas.\n\nAction name: move\n\n\nYour answer:\n---\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:**\n\nLet's imagine a scenario where you need to move a toy truck from one corner of a room to another. This toy truck represents the hoist, and the corners of the room are like different storage areas in our description.\n\n1. **Preconditions:**\n   - **Hoist is at the source area (at ?h ?from):** This condition makes sure that the hoist is actually at the starting point (like making sure your toy truck is really in the corner where you want to start moving it from). This is necessary because you can't move something from a place it isn't already at.\n   - **Destination area is clear (clear ?to):** This is like making sure that the corner you want to move your toy truck to doesn\u2019t have any obstacles or other toys in the way. The space needs to be clear so the hoist can move in without any issues.\n   - **Areas are connected (connected ?from ?to):** This checks if there is a direct path from the starting point to the destination, similar to making sure there's a clear path on the floor between the two corners of the room for the toy truck to travel without hitting a wall or furniture.\n\n2. **Effects:**\n   - **Hoist moves to the destination (at ?h ?to):** This is like saying your toy truck is now in the new corner of the room.\n   - **Hoist is no longer at the source (not (at ?h ?from)):** Just like your toy truck can't be in two places at once, when the hoist moves to the new area, it's no longer in the original area.\n   - **Destination area is no longer clear (not (clear ?to)):** Now that the hoist (or your toy truck) is in the new corner, that corner isn't empty anymore.\n   - **Source area becomes clear (clear ?from):** Since the hoist has moved away from the original area, that area is now free of obstacles or the hoist itself.\n\nSo, in simple terms, this action is like moving a toy from one clear, connected corner of the room to another. Before you move it, you need to check that it\u2019s starting in the right place, that there\u2019s no blockage where it\u2019s going, and that it can directly reach there. Once moved, the toy truck\u2019s old spot becomes empty, and its new spot is now occupied by it.\n                \n**Response:**\nParameters:\n1. ?h - hoist: [short description of the parameter]\n2. ?from - store_area: [short description of the parameter]\n3. ?to - transit_area: [short description of the parameter]\n\nPreconditions:\n```\n(and\n    (at ?h ?from)\n    (connected ?from ?to)\n)\n```\n\nEffects:\n```\n(and\n    (not (at ?h ?from))\n    (at ?h ?to)\n    (clear ?from)\n)\n```\n\n---\n", "type": "prompt"}
{"role": "user", "content": "Question: Here is the task.\nA natural language description of the domain\nDomain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.\n\nA list of available predicates\n1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf\n2. (on-table ?x - book) ;; ?x is on the table\n3. (accessible ?x - book) ;; ?x is accessible (not covered)\n4. (hands-free) ;; The hands of the librarian are free\n5. (holding ?x - book) ;; The librarian is holding ?x\n6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat\n7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty\n8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full\n9. (book-request ?book - book) ;; There is a request for book ?book\n10. (return-due ?book - book) ;; Book ?book is due for return\n11. (checked-out ?book - book) ;; Book ?book is checked out\n\nAction Description: Envision a librarian assisting a patron who wishes to borrow a book. The 'check-out' action allows the librarian to mark a book as checked out, provided it is accessible and not already checked out. This action reflects the process of recording the book's status as borrowed and setting a return due date.\n\nAction name: check-out\n\n\nYour answer:\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:**\n\nIn a library setting, the process of checking out a book involves a librarian marking a book as borrowed by a patron. For this action to occur, certain conditions must be met. The book must be accessible, meaning it's not covered by another book or otherwise unavailable. Additionally, the book must not already be checked out, as a book cannot be borrowed by two people at the same time.\n\nOnce these preconditions are satisfied, the librarian can proceed with the check-out action. The effect of this action is that the book's status is updated to reflect that it is checked out, and a return due date is set for the book.\n\n**Response:**\nParameters:\n1. ?book - book: [The book to be checked out]\n\nPreconditions:\n```\n(and\n    (accessible ?book)\n    (not (checked-out ?book))\n)\n```\n\nEffects:\n```\n(and\n    (checked-out ?book)\n    (return-due ?book)\n)\n```\n\nNote: The `return-due` predicate is included in the effects to indicate that a return due date has been set for the book. However, in a real-world scenario, this might be represented by a more complex predicate that includes a date or timestamp. Since the available predicates do not specify a date, we use `return-due ?book` to symbolize the setting of a due date in a simplified manner.", "type": "response", "action": "check-out"}
{"role": "system", "content": "# CONTEXT #\nYou are a tool called PDDL Modeling Assistant. You are a technical experts in constructing Planning Domain Definition Language (PDDL) models via the natural language context.\n# OBJECTIVE #\n* Construct parameters, preconditions and effects based on the domain information, action description and the action name.\n* All variables in the preconditions and effects must be listed in the action's parameters. This restriction helps maintain the action's scope and prevents ambiguity in the planning process.\n* Do not use predicates that are not defined in the available predicates list to construct the preconditions and effects.\n* When the natural language description is ambiguous or certain predicate changes are implied, make reasonable assumptions based on common sense to fill up the implicit predicate in the PDDL action.\n# STYLE #\nFollow the writing style of technical experts. The output can be parsed by a machine, so it is important to follow the structured format.\n# TONE #\nBe precise and concise in constructing the PDDL action. The PDDL action should be clear and unambiguous.\n# AUDIENCE #\nYour audience is someone who is trying to learn how to construct PDDL actions from natural language descriptions.\n# RESPONSE #\nThe response should be in the following format:\n---\n**Explanation:** [Your explanation here]\n\n**Response:**\nParameters:\n1. ?x - [type]: [parameter description]\n2. ...\n\nPreconditions:\n```\n(and\n    ([predicate_1] ?x)\n)\n```\n\nEffects:\n```\n(and\n    (not ([predicate_2] ?x))\n    ([predicate_2] ?x)\n    ...\n)\n```\n---\n", "type": "prompt"}
{"role": "user", "content": "One or two examples from other domains for illustrating the input and output formats.\nHere are two examples from the barman domain for demonstrating the output format.\n        \nDomain information: In this domain there is a robot barman that manipulates drink dispensers, glasses and a shaker. The goal is to find a plan of the robots actions that serves a desired set of drinks. In this domain deletes of actions encode relevant knowledge given that robot hands can only grasp one object at a time and given that glasses need to be empty and clean to be filled.\n\nA list of available predicates\n1. (ontable ?c - container) ;; the container is on the table\n2. (holding ?h - hand ?c - container) ;; the hand is holding the container\n3. (handempty ?h - hand) ;; the hand is empty\n4. (empty ?c - container) ;; the container is empty\n5. (contains ?c - container ?b - beverage) ;; the container contains the beverage\n6. (clean ?c - container) ;; the container is clean\n7. (used ?c - container ?b - beverage) ;; the container is used for the beverage\n8. (dispenses ?d - dispenser ?i - ingredient) ;; the dispenser dispenses the ingredient\n9. (shaker-empty-level ?s - shaker ?l - level) ;; the empty level of the shaker\n10. (shaker-level ?s - shaker ?l - level) ;; the shaker currently is at the level\n11. (next ?l1 ?l2 - level) ;; l2 is the next level after l1\n12. (unshaked ?s - shaker) ;; the shaker is unshaked\n13. (shaked ?s - shaker) ;; the shaker is shaked\n14. (cocktail-part1 ?c - cocktail ?i - ingredient) ;; the ingredient is part of the cocktail\n15. (cocktail-part2 ?c - cocktail ?i - ingredient) ;; the ingredient is part of the cocktail\nExample 1\nAction Description: The robot cleans an empty shaker.\n\nAction name: clean-shaker\n\n\nYour answer:\n---\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:**\nImagine a robot barman at work in a busy cocktail bar. The robot is tasked with making drinks using various tools, including a shaker that needs to be clean before it can be used to mix ingredients. Let's consider why the robot would need specific conditions to be met before it can clean the shaker, as described in the action schema called \"clean-shaker.\"\n\n1. **Why the shaker needs to be held and the other hand empty**: The action requires the robot to hold the shaker with one hand (`holding ?h1 ?s`) and have the other hand empty (`handempty ?h2`). This makes sense because the robot can only use one hand to perform the cleaning while needing the other hand free, possibly to manipulate cleaning tools or to stabilize the shaker.\n\n2. **Why the shaker must be empty**: It's also specified that the shaker needs to be empty before it can be cleaned (`empty ?s`). This is crucial because cleaning a shaker that still has something in it would not only be inefficient but also could cause a mess and waste ingredients. The robot needs to ensure the shaker is empty to effectively clean it for the next drink preparation.\n\n3. **The effect of the action**: Once these conditions are met, the effect of the robot's action is that the shaker becomes clean (`clean ?s`). This state change is vital because a clean shaker ensures that the drinks made are fresh and uncontaminated by previous ingredients.\n\nBy setting these preconditions, the action schema makes sure that the robot operates logically and efficiently, avoiding potential errors like trying to clean a shaker that is not yet empty or held properly. This careful planning helps the robot succeed in its role as a barman, ensuring happy customers with well-made cocktails.\n\nIn simpler terms, it's like making sure you've got all your ingredients ready and your cooking space organized before you start making a meal. This preparation helps everything go smoothly, just as the robot's preconditions ensure it can clean the shaker effectively.\n                \n**Response:**\nParameters:\n1. ?h1 - hand: [short description of the parameter]\n2. ?h2 - hand: [short description of the parameter]\n3. ?s - shaker: [short description of the parameter]\n\nPreconditions:\n```\n(and\n    (holding ?h1 ?s)\n    (handempty ?h2)\n    (empty ?s)\n)\n```\n\nEffects:\n```\n(and\n    (clean ?s)\n)\n```\n\n---\n", "type": "prompt"}
{"role": "user", "content": "Example 2\nAction Description: The robot empties a shaker that has been shaken, changing its level.\n\nAction name: empty-shaker\n\n\nYour answer:\n---\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:**\n\nLet's think of our robot barman as someone working in a kitchen, trying to prepare a cocktail using a shaker. The robot needs to follow certain steps to make sure everything goes smoothly and safely, just like following a recipe.\n\nThe action \"empty-shaker\" is all about the robot taking a shaker that has already been shaken (which means the ingredients are mixed up properly) and emptying it out so that the drink can be served, and the shaker is ready to be cleaned and used again.\n\nNow, let's talk about the preconditions, which are like the 'must-haves' before the robot can start this action:\n1. **(holding ?h ?s)** - The robot must be holding the shaker. It can\u2019t empty it if it\u2019s not holding it, right? Just like you can't pour milk from a jug if you're not holding it.\n2. **(contains ?s ?b)** - The shaker needs to have a drink inside. There's no point in trying to empty something that's already empty.\n3. **(shaked ?s)** - The drink inside the shaker must be mixed up by shaking. This ensures the drink is ready to be served.\n4. **(shaker-level ?s ?l)** - This tells us how much drink is currently in the shaker. It\u2019s important to know this so the robot knows it\u2019s actually pouring something out.\n5. **(shaker-empty-level ?s ?l1)** - This indicates what the level of the shaker should be after emptying it. Usually, it means it will be empty or nearly empty.\n\nThe effects of the action describe what changes after the robot empties the shaker:\n1. **(not (shaked ?s))** - The shaker is no longer considered 'shaken' because it's been emptied.\n2. **(not (shaker-level ?s ?l))** - The previous level of the drink is no longer relevant because it's been poured out.\n3. **(shaker-level ?s ?l1)** - This updates the level of the shaker to show it's now empty or at the lower level expected.\n4. **(not (contains ?s ?b))** - The shaker no longer contains the drink because it\u2019s been poured out.\n5. **(empty ?s)** - Finally, the shaker is empty, ready to be washed and used again for the next drink.\n\nBy ensuring all these preconditions are met before the action and then updating everything as described in the effects, the robot efficiently manages its tasks without any mix-ups or errors, just like a good cook keeps their kitchen in order. This process helps the robot move smoothly from one task to the next, ensuring each drink is made and served perfectly.\n                \n**Response:**\nParameters:\n1. ?h - hand: [short description of the parameter]\n2. ?s - shaker: [short description of the parameter]\n3. ?b - cocktail: [short description of the parameter]\n4. ?l - level: [short description of the parameter]\n5. ?l1 - level: [short description of the parameter]\n\nPreconditions:\n```\n(and\n    (holding ?h ?s)\n    (contains ?s ?b)\n    (shaked ?s)\n    (shaker-level ?s ?l)\n    (shaker-empty-level ?s ?l1)\n)\n```\n\nEffects:\n```\n(and\n    (not (shaked ?s))\n    (not (shaker-level ?s ?l))\n    (shaker-level ?s ?l1)\n    (not (contains ?s ?b))\n    (empty ?s)\n)\n```\n\n---\n", "type": "prompt"}
{"role": "user", "content": "Here are two examples from the storage domain for demonstrating the output format.\n        \nDomain information: Moving and storing crates of goods by hoists from containers to depots with spatial maps. This domain deals with the movement and storage of crates of goods using hoists. It involves different locations like containers and depots, and requires managing the spatial arrangement of crates and hoists in various areas. The actions primarily focus on the lifting, moving, and placement of crates by hoists, considering the spatial and availability constraints of the areas involved.\n\nA list of available predicates\n1. (clear ?s - store_area) ;; the store area is clear\n2. (crate_in ?c - crate ?p - place) ;; the crate is in the place\n3. (store_area_in ?s - store_area ?p - place) ;; the store area is in the place\n4. (available ?h - hoist) ;; the hoist is available\n5. (lifting ?h - hoist ?c - crate) ;; the hoist is lifting the crate\n6. (at ?h - hoist ?a - area) ;; the hoist is at the area\n7. (on ?c - crate ?s - store_area) ;; the crate is on the store area\n8. (connected ?a1 ?a2 - area) ;; the area a1 is connected to the area a2\nExample 1\nAction Description: Involves a hoist moving from a store_area to a transit_area. Preconditions are the hoist being at the source store_area and the areas being connected. The effect is the hoist moving to the transit_area and the source store_area becoming clear.\n\nAction name: go-out\n\n\nYour answer:\n---\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:** Let's imagine we have a little robotic hoist in a big warehouse. Its job is to move from one specific area where it usually stores things, called a store area, to another area meant for transitioning goods, which we call a transit area. Now, this action of moving from the store area to the transit area is called \"go-out.\"\n\nTo make sure this action goes smoothly, there are a few things that need to be in place beforehand, which we call preconditions. First, our little hoist needs to be at the store area to start with\u2014if it\u2019s somewhere else, it can\u2019t start moving from the store area, right? That's like saying you need to be at home to start walking to the park. Secondly, the store area and the transit area need to be connected. If there's no path or door between them, our hoist can't get to the transit area. It's a bit like needing a road or a path to walk on.\n\nNow, when the hoist successfully moves to the transit area, we have some changes that occur, which are the effects of the action. The hoist is no longer in the store area (it has moved, after all), and it's now in the transit area. This is straightforward: the hoist was here, and now it\u2019s there. Additionally, the store area becomes 'clear' or empty because the hoist has moved out. This is like saying that once you leave your room, the room is empty.\n\nSo, in summary, the \"go-out\" action moves our hoist from one area to another and makes sure the starting area is free for other activities. This helps keep things organized and running smoothly in our warehouse scenario.\n                \n**Response:**\nParameters:\n1. ?h - hoist: [short description of the parameter]\n2. ?c - crate: [short description of the parameter]\n3. ?a1 - store_area: [short description of the parameter]\n4. ?a2 - area: [short description of the parameter]\n5. ?p - place: [short description of the parameter]\n\nPreconditions:\n```\n(and\n    (connected ?a1 ?a2)\n    (at ?h ?a2)\n    (available ?h)\n    (on ?c ?a1)\n    (store_area_in ?a1 ?p)\n)\n```\n\nEffects:\n```\n(and\n    (not (on ?c ?a1))\n    (clear ?a1)\n    (not (available ?h))\n    (lifting ?h ?c)\n    (not (crate_in ?c ?p))\n)\n```\n\n---\n", "type": "prompt"}
{"role": "user", "content": "Example 2\nAction Description: Involves a hoist lifting a crate from one store_area to another area. Preconditions include the areas being connected, the hoist being at the destination area and available, and the crate being on the source store_area. The effects are the crate being lifted and the source store_area becoming clear.\n\nAction name: lift\n\n\nYour answer:\n---\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:**\nLet's imagine you want to move a toy train (representing the hoist) from one side of your playroom (a store area) to another. Before moving it, you need to make sure of a few things:\n\n1. **The train is actually at the starting point:** Just like you need to know where your train is before you can move it, the action schema checks if the hoist is at the starting store area (`at ?h ?from`). This ensures that we are moving the right hoist from the correct location.\n\n2. **The destination is clear:** Imagine if the place you wanted to move your train to was already full of other toys. You wouldn\u2019t be able to put your train there, right? Similarly, the schema requires the destination store area to be clear (`clear ?to`) so that the hoist can move there without any issues.\n\n3. **The starting and destination points are connected:** It\u2019s like making sure there\u2019s a clear path or a track between where your train is and where you want it to go. If there\u2019s no track, you can't move the train. In the action schema, this is checked by the condition (`connected ?from ?to`).\n\nNow, when the train (hoist) moves:\n- **It is no longer at the starting point:** Just like when your train leaves one side of the room, it\u2019s not there anymore. This change is shown in the schema by removing the condition that the hoist is at the starting area (`not (at ?h ?from)`).\n  \n- **It is now at the destination:** When you move your train to the other side of the room, it\u2019s now there. This is represented in the schema by adding the condition that the hoist is now at the destination area (`at ?h ?to`).\n\n- **The destination is no longer clear:** Now that the train is at the new spot, that area isn\u2019t empty anymore. This change is reflected by removing the 'clear' condition for the destination area (`not (clear ?to)`).\n\n- **The starting point becomes clear:** Since the train left the starting area, that spot is now free. This is captured by adding a 'clear' condition for the starting area (`clear ?from`).\n\nThis whole process helps ensure that the hoist can safely and efficiently move from one area to another without confusion or conflicts.\n                \n**Response:**\nParameters:\n1. ?h - hoist: [short description of the parameter]\n2. ?from - store_area: [short description of the parameter]\n3. ?to - transit_area: [short description of the parameter]\n\nPreconditions:\n```\n(and\n    (at ?h ?from)\n    (connected ?from ?to)\n)\n```\n\nEffects:\n```\n(and\n    (not (at ?h ?from))\n    (at ?h ?to)\n    (clear ?from)\n)\n```\n\n---\n", "type": "prompt"}
{"role": "user", "content": "Question: Here is the task.\nA natural language description of the domain\nDomain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.\n\nA list of available predicates\n1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf\n2. (on-table ?x - book) ;; ?x is on the table\n3. (accessible ?x - book) ;; ?x is accessible (not covered)\n4. (hands-free) ;; The hands of the librarian are free\n5. (holding ?x - book) ;; The librarian is holding ?x\n6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat\n7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty\n8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full\n9. (book-request ?book - book) ;; There is a request for book ?book\n10. (return-due ?book - book) ;; Book ?book is due for return\n11. (checked-out ?book - book) ;; Book ?book is checked out\n\nAction Description: Imagine a patron returning a borrowed book to the library. The 'return-book' action enables the librarian to process the return, updating the book's status and removing any return due date. This action is applicable when the librarian is holding the book that needs to be returned.\n\nAction name: return-book\n\n\nYour answer:\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:**\nIn the context of a library, the 'return-book' action is a fundamental part of managing the circulation of books. When a patron returns a book, the librarian needs to process this return to update the library's records and make the book available for others to borrow again. \n\nFor this action to occur, certain conditions must be met. The librarian must be holding the book that is being returned, ensuring that the librarian is actively processing the return. Additionally, the book must have a return due date, indicating that it is indeed a book that has been borrowed and is now being returned.\n\nOnce the librarian processes the return, the effects of this action are straightforward: the book is no longer checked out, and the return due date is removed. This reflects the book's status as available within the library system once again.\n\n**Response:**\nParameters:\n1. ?book - book: [The book that is being returned]\n\nPreconditions:\n```\n(and\n    (holding ?book)\n    (return-due ?book)\n)\n```\n\nEffects:\n```\n(and\n    (not (return-due ?book))\n    (not (checked-out ?book))\n)\n```\n\nThis PDDL action schema ensures that the librarian can only process a return for a book that is currently being held and has a return due date, and it updates the book's status accordingly once the return is processed.", "type": "response", "action": "return-book"}
