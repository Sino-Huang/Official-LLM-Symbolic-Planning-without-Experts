{"role": "system", "content": "# CONTEXT #\nYou are a tool called PDDL Modeling Assistant. You are a technical experts in constructing Planning Domain Definition Language (PDDL) models via the natural language context.\n# OBJECTIVE #\n* Construct parameters, preconditions and effects based on the domain information, action description and the action name.\n* All variables in the preconditions and effects must be listed in the action's parameters. This restriction helps maintain the action's scope and prevents ambiguity in the planning process.\n* Do not use predicates that are not defined in the available predicates list to construct the preconditions and effects.\n* When the natural language description is ambiguous or certain predicate changes are implied, make reasonable assumptions based on common sense to fill up the implicit predicate in the PDDL action.\n# STYLE #\nFollow the writing style of technical experts. The output can be parsed by a machine, so it is important to follow the structured format.\n# TONE #\nBe precise and concise in constructing the PDDL action. The PDDL action should be clear and unambiguous.\n# AUDIENCE #\nYour audience is someone who is trying to learn how to construct PDDL actions from natural language descriptions.\n# RESPONSE #\nThe response should be in the following format:\n---\n**Explanation:** [Your explanation here]\n\n**Response:**\nParameters:\n1. ?x - [type]: [parameter description]\n2. ...\n\nPreconditions:\n```\n(and\n    ([predicate_1] ?x)\n)\n```\n\nEffects:\n```\n(and\n    (not ([predicate_2] ?x))\n    ([predicate_2] ?x)\n    ...\n)\n```\n---\n", "type": "prompt"}
{"role": "user", "content": "One or two examples from other domains for illustrating the input and output formats.\nHere are two examples from the barman domain for demonstrating the output format.\n        \nDomain information: In this domain there is a robot barman that manipulates drink dispensers, glasses and a shaker. The goal is to find a plan of the robots actions that serves a desired set of drinks. In this domain deletes of actions encode relevant knowledge given that robot hands can only grasp one object at a time and given that glasses need to be empty and clean to be filled.\n\nA list of available predicates\n1. (ontable ?c - container) ;; the container is on the table\n2. (holding ?h - hand ?c - container) ;; the hand is holding the container\n3. (handempty ?h - hand) ;; the hand is empty\n4. (empty ?c - container) ;; the container is empty\n5. (contains ?c - container ?b - beverage) ;; the container contains the beverage\n6. (clean ?c - container) ;; the container is clean\n7. (used ?c - container ?b - beverage) ;; the container is used for the beverage\n8. (dispenses ?d - dispenser ?i - ingredient) ;; the dispenser dispenses the ingredient\n9. (shaker-empty-level ?s - shaker ?l - level) ;; the empty level of the shaker\n10. (shaker-level ?s - shaker ?l - level) ;; the shaker currently is at the level\n11. (next ?l1 ?l2 - level) ;; l2 is the next level after l1\n12. (unshaked ?s - shaker) ;; the shaker is unshaked\n13. (shaked ?s - shaker) ;; the shaker is shaked\n14. (cocktail-part1 ?c - cocktail ?i - ingredient) ;; the ingredient is part of the cocktail\n15. (cocktail-part2 ?c - cocktail ?i - ingredient) ;; the ingredient is part of the cocktail\nExample 1\nAction Description: The robot places a container it's holding back onto the table.\n\nAction name: leave\n\n\nYour answer:\n---\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:**\n\nImagine you're teaching a robot barman to place a glass back on the table. The robot needs clear steps to follow, just like a recipe in cooking. In this scenario, the robot's task, or \"action,\" is named \"leave.\" Here's why the specific steps (preconditions and effects) in the action make sense:\n\n1. **Precondition (holding ?h ?c):** Before the robot can place the container on the table, it must be holding it. This is just like needing to pick up a plate before you can move it to another part of the kitchen. In the robot's instructions, this is expressed as \"(holding ?h ?c),\" meaning the robot's hand (?h) is currently holding the container (?c). This step ensures the robot knows it has the container and is ready to put it down.\n\n2. **Effects of the Action:**\n   - **(not (holding ?h ?c)):** This tells the robot to stop holding the container. It's like saying, \"Okay, you can let go of the plate now.\"\n   - **(handempty ?h):** Once the robot lets go of the container, its hand is empty. This is similar to you dropping something off and having your hand free again.\n   - **(ontable ?c):** Finally, the container ends up back on the table. This part of the instruction confirms that the container should now be on the table, just like setting a cup down on a counter.\n\nThis action schema is crafted so that the robot successfully completes the task of putting the container down in a way that makes sense step-by-step. The preconditions make sure the robot is ready to perform the action (holding the container), and the effects detail exactly what happens after the action (container on table, hand empty). It's a simple, clear set of instructions for the robot to follow, ensuring it does exactly what we want without any confusion.\n                \n**Response:**\nParameters:\n1. ?h - hand: [short description of the parameter]\n2. ?c - container: [short description of the parameter]\n\nPreconditions:\n```\n(holding ?h ?c)\n```\n\nEffects:\n```\n(and\n    (not (holding ?h ?c))\n    (handempty ?h)\n    (ontable ?c)\n)\n```\n\n---\n", "type": "prompt"}
{"role": "user", "content": "Example 2\nAction Description: The robot fills an empty, clean shot glass with an ingredient from a dispenser.\n\nAction name: fill-shot\n\n\nYour answer:\n---\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:** Imagine our robot barman in a kitchen where it needs to prepare a drink using a shot glass. The robot has two hands and can only use one hand to hold an item at a time. Here\u2019s why the robot needs to follow certain steps, called preconditions, before it can fill the shot glass, which is the goal of the \"fill-shot\" action.\n\nFirstly, the robot must be holding the shot glass with one hand, which we call ?h1. This is important because the robot can only fill something it is holding. The precondition `(holding ?h1 ?s)` ensures that the robot has a good grip on the shot glass before proceeding.\n\nSecondly, the other hand, ?h2, must be empty (`handempty ?h2`). This is because if the hand is already holding something else, the robot wouldn\u2019t be able to operate the dispenser properly or manage other tasks like adding more ingredients if needed.\n\nThe next precondition is that the dispenser identified as ?d must be capable of dispensing the ingredient ?i, as noted in `(dispenses ?d ?i)`. This ensures that the robot is at the right dispenser for the ingredient it needs to fill the shot glass with.\n\nAlso, the shot glass itself must be empty (`empty ?s`) and clean (`clean ?s`) before anything is poured into it. This is common sense, right? You wouldn\u2019t want to drink from a dirty or already filled glass! This makes sure the drink is clean and tastes as expected.\n\nAfter all these conditions are met, the robot can go ahead and fill the shot glass. The effects of this action include a few changes:\n- The shot glass is no longer empty (`not (empty ?s)`), meaning it now contains the ingredient.\n- The shot glass now contains the specific ingredient (`contains ?s ?i`), which is just like saying the glass now has, say, gin in it.\n- The glass is no longer clean (`not (clean ?s)`) because it now has something in it.\n- Lastly, the shot glass is marked as used for that particular ingredient (`used ?s ?i`), which helps the robot remember what has been done with that glass.\n                \n**Response:**\nParameters:\n1. ?s - shot: [short description of the parameter]\n2. ?i - ingredient: [short description of the parameter]\n3. ?h1 - hand: [short description of the parameter]\n4. ?h2 - hand: [short description of the parameter]\n5. ?d - dispenser: [short description of the parameter]\n\nPreconditions:\n```\n(and\n    (holding ?h1 ?s)\n    (handempty ?h2)\n    (dispenses ?d ?i)\n    (empty ?s)\n    (clean ?s)\n)\n```\n\nEffects:\n```\n(and\n    (not (empty ?s))\n    (contains ?s ?i)\n    (not (clean ?s))\n    (used ?s ?i)\n)\n```\n\n---\n", "type": "prompt"}
{"role": "user", "content": "Here are two examples from the storage domain for demonstrating the output format.\n        \nDomain information: Moving and storing crates of goods by hoists from containers to depots with spatial maps. This domain deals with the movement and storage of crates of goods using hoists. It involves different locations like containers and depots, and requires managing the spatial arrangement of crates and hoists in various areas. The actions primarily focus on the lifting, moving, and placement of crates by hoists, considering the spatial and availability constraints of the areas involved.\n\nA list of available predicates\n1. (clear ?s - store_area) ;; the store area is clear\n2. (crate_in ?c - crate ?p - place) ;; the crate is in the place\n3. (store_area_in ?s - store_area ?p - place) ;; the store area is in the place\n4. (available ?h - hoist) ;; the hoist is available\n5. (lifting ?h - hoist ?c - crate) ;; the hoist is lifting the crate\n6. (at ?h - hoist ?a - area) ;; the hoist is at the area\n7. (on ?c - crate ?s - store_area) ;; the crate is on the store area\n8. (connected ?a1 ?a2 - area) ;; the area a1 is connected to the area a2\nExample 1\nAction Description: This is the reverse of Go-out, where a hoist moves from a transit_area to a store_area. Preconditions include the hoist being at the transit_area, the areas being connected, and the destination store_area being clear. The effect is similar to Go-out but in reverse.\n\nAction name: go-in\n\n\nYour answer:\n---\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:**\n\nImagine you have a small robot hoist that helps move boxes in a big warehouse. The warehouse has different areas, like a spot for loading boxes and another for storing them. The \"go-in\" action is like telling the robot to move from a loading area to a storage area.\n\nNow, why does the robot need certain conditions to be met before it can move? Here's a breakdown:\n\n1. **The robot must be at the loading area** (transit_area): This is pretty straightforward. If the robot isn't at the loading area, it can't start moving towards the storage area because it's simply not there to begin the task.\n\n2. **The loading area and storage area must be connected**: It's like making sure there's a clear path or a road between two places before you start driving. If there's no path, the robot can't move between these areas.\n\n3. **The storage area must be clear**: This ensures that there is space available for the robot to enter and place the boxes. It's similar to needing an empty parking spot to park your car.\n\nNow, what happens after the robot moves based on these conditions?\n\n- **The robot is no longer in the loading area**: Just like when you leave your house, you're not inside anymore. The robot has left the loading area, so we say it's no longer there.\n  \n- **The robot is now in the storage area**: Like arriving at a friend\u2019s house after leaving yours, the robot has moved and is now at the storage destination.\n\n- **The storage area is no longer clear**: Since the robot moves in with a box, the space it occupied is now taken. It's like the parking space being occupied once you park your car.\n\nIn summary, these conditions and results make sure the robot moves safely and efficiently from one place to another, without any surprises like arriving at a blocked or non-existent path, or finding no space to drop off the box. This careful planning helps keep everything in the warehouse running smoothly!\n                \n**Response:**\nParameters:\n1. ?h - hoist: [short description of the parameter]\n2. ?from - store_area: [short description of the parameter]\n3. ?to - store_area: [short description of the parameter]\n\nPreconditions:\n```\n(and\n    (at ?h ?from)\n    (clear ?to)\n    (connected ?from ?to)\n)\n```\n\nEffects:\n```\n(and\n    (not (at ?h ?from))\n    (at ?h ?to)\n    (not (clear ?to))\n    (clear ?from)\n)\n```\n\n---\n", "type": "prompt"}
{"role": "user", "content": "Example 2\nAction Description: Moves a hoist from one store_area to another. Preconditions include the hoist being at the source store_area, the destination store_area being clear, and the areas being connected. The effect is the hoist moving to the destination and the change in clarity status of both store areas.\n\nAction name: move\n\n\nYour answer:\n---\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:**\n\nLet's imagine a scenario where you need to move a toy truck from one corner of a room to another. This toy truck represents the hoist, and the corners of the room are like different storage areas in our description.\n\n1. **Preconditions:**\n   - **Hoist is at the source area (at ?h ?from):** This condition makes sure that the hoist is actually at the starting point (like making sure your toy truck is really in the corner where you want to start moving it from). This is necessary because you can't move something from a place it isn't already at.\n   - **Destination area is clear (clear ?to):** This is like making sure that the corner you want to move your toy truck to doesn\u2019t have any obstacles or other toys in the way. The space needs to be clear so the hoist can move in without any issues.\n   - **Areas are connected (connected ?from ?to):** This checks if there is a direct path from the starting point to the destination, similar to making sure there's a clear path on the floor between the two corners of the room for the toy truck to travel without hitting a wall or furniture.\n\n2. **Effects:**\n   - **Hoist moves to the destination (at ?h ?to):** This is like saying your toy truck is now in the new corner of the room.\n   - **Hoist is no longer at the source (not (at ?h ?from)):** Just like your toy truck can't be in two places at once, when the hoist moves to the new area, it's no longer in the original area.\n   - **Destination area is no longer clear (not (clear ?to)):** Now that the hoist (or your toy truck) is in the new corner, that corner isn't empty anymore.\n   - **Source area becomes clear (clear ?from):** Since the hoist has moved away from the original area, that area is now free of obstacles or the hoist itself.\n\nSo, in simple terms, this action is like moving a toy from one clear, connected corner of the room to another. Before you move it, you need to check that it\u2019s starting in the right place, that there\u2019s no blockage where it\u2019s going, and that it can directly reach there. Once moved, the toy truck\u2019s old spot becomes empty, and its new spot is now occupied by it.\n                \n**Response:**\nParameters:\n1. ?h - hoist: [short description of the parameter]\n2. ?from - transit_area: [short description of the parameter]\n3. ?to - store_area: [short description of the parameter]\n\nPreconditions:\n```\n(and\n    (at ?h ?from)\n    (connected ?from ?to)\n    (clear ?to)\n)\n```\n\nEffects:\n```\n(and\n    (not (at ?h ?from))\n    (at ?h ?to)\n    (not (clear ?to))\n)\n```\n\n---\n", "type": "prompt"}
{"role": "user", "content": "Question: Here is the task.\nA natural language description of the domain\nDomain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.\n\nA list of available predicates\n1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf\n2. (on-table ?x - book) ;; ?x is on the table\n3. (accessible ?x - book) ;; ?x is accessible (not covered)\n4. (hands-free) ;; The hands of the librarian are free\n5. (holding ?x - book) ;; The librarian is holding ?x\n6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat\n7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty\n8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full\n9. (book-request ?book - book) ;; There is a request for book ?book\n10. (return-due ?book - book) ;; Book ?book is due for return\n11. (checked-out ?book - book) ;; Book ?book is checked out\n\nAction Description: Imagine you're a librarian managing a table full of books. The 'take-from-table' action allows you to pick up a book that is on the table, provided it is accessible and your hands are free. This action simulates the scenario where you find a book on the table, ensure it's not covered by any other book, and then pick it up, thus holding it in your hands.\n\nAction name: take-from-table\n\n\nYour answer:\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:**\n\nIn the context of a librarian managing books within a library, the 'take-from-table' action is a fundamental step in handling the books. This action involves the librarian physically picking up a book from a table. To ensure that the action can be carried out successfully, certain conditions must be met:\n\n1. **The book must be on the table (on-table ?x):** This is a straightforward requirement that ensures the book the librarian wants to pick up is indeed on the table.\n\n2. **The book must be accessible (accessible ?x):** This condition means that the book is not obscured or covered by other books, ensuring that the librarian can physically reach it and pick it up without any hindrance.\n\n3. **The librarian's hands must be free (hands-free):** This is a practical consideration that ensures the librarian is not already holding another book, which would prevent them from picking up the new book.\n\nOnce these preconditions are satisfied, the librarian can perform the 'take-from-table' action. The effects of this action are as follows:\n\n- **The book is no longer on the table (not (on-table ?x)):** Since the librarian has picked up the book, it is no longer on the table.\n\n- **The librarian is now holding the book (holding ?x):** This effect reflects the successful completion of the action, with the librarian now in possession of the book.\n\nThis structured approach ensures that the librarian interacts with the books in a logical and organized manner, which is essential for the smooth operation of a library.\n                \n**Response:**\nParameters:\n1. ?x - book: [short description of the parameter]\n\nPreconditions:\n```\n(and\n    (on-table ?x)\n    (accessible ?x)\n    (hands-free)\n)\n```\n\nEffects:\n```\n(and\n    (not (on-table ?x))\n    (holding ?x)\n)\n```\n\n---", "type": "response", "action": "take-from-table"}
{"role": "system", "content": "# CONTEXT #\nYou are a tool called PDDL Modeling Assistant. You are a technical experts in constructing Planning Domain Definition Language (PDDL) models via the natural language context.\n# OBJECTIVE #\n* Construct parameters, preconditions and effects based on the domain information, action description and the action name.\n* All variables in the preconditions and effects must be listed in the action's parameters. This restriction helps maintain the action's scope and prevents ambiguity in the planning process.\n* Do not use predicates that are not defined in the available predicates list to construct the preconditions and effects.\n* When the natural language description is ambiguous or certain predicate changes are implied, make reasonable assumptions based on common sense to fill up the implicit predicate in the PDDL action.\n# STYLE #\nFollow the writing style of technical experts. The output can be parsed by a machine, so it is important to follow the structured format.\n# TONE #\nBe precise and concise in constructing the PDDL action. The PDDL action should be clear and unambiguous.\n# AUDIENCE #\nYour audience is someone who is trying to learn how to construct PDDL actions from natural language descriptions.\n# RESPONSE #\nThe response should be in the following format:\n---\n**Explanation:** [Your explanation here]\n\n**Response:**\nParameters:\n1. ?x - [type]: [parameter description]\n2. ...\n\nPreconditions:\n```\n(and\n    ([predicate_1] ?x)\n)\n```\n\nEffects:\n```\n(and\n    (not ([predicate_2] ?x))\n    ([predicate_2] ?x)\n    ...\n)\n```\n---\n", "type": "prompt"}
{"role": "user", "content": "One or two examples from other domains for illustrating the input and output formats.\nHere are two examples from the barman domain for demonstrating the output format.\n        \nDomain information: In this domain there is a robot barman that manipulates drink dispensers, glasses and a shaker. The goal is to find a plan of the robots actions that serves a desired set of drinks. In this domain deletes of actions encode relevant knowledge given that robot hands can only grasp one object at a time and given that glasses need to be empty and clean to be filled.\n\nA list of available predicates\n1. (ontable ?c - container) ;; the container is on the table\n2. (holding ?h - hand ?c - container) ;; the hand is holding the container\n3. (handempty ?h - hand) ;; the hand is empty\n4. (empty ?c - container) ;; the container is empty\n5. (contains ?c - container ?b - beverage) ;; the container contains the beverage\n6. (clean ?c - container) ;; the container is clean\n7. (used ?c - container ?b - beverage) ;; the container is used for the beverage\n8. (dispenses ?d - dispenser ?i - ingredient) ;; the dispenser dispenses the ingredient\n9. (shaker-empty-level ?s - shaker ?l - level) ;; the empty level of the shaker\n10. (shaker-level ?s - shaker ?l - level) ;; the shaker currently is at the level\n11. (next ?l1 ?l2 - level) ;; l2 is the next level after l1\n12. (unshaked ?s - shaker) ;; the shaker is unshaked\n13. (shaked ?s - shaker) ;; the shaker is shaked\n14. (cocktail-part1 ?c - cocktail ?i - ingredient) ;; the ingredient is part of the cocktail\n15. (cocktail-part2 ?c - cocktail ?i - ingredient) ;; the ingredient is part of the cocktail\nExample 1\nAction Description: The robot cleans a used shot glass.\n\nAction name: clean-shot\n\n\nYour answer:\n---\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:**\n\nLet's imagine our robot barman is preparing drinks in a bar where it must handle different glasses, like a shot glass. The robot needs to clean a used shot glass to make sure it's ready for the next drink. This situation leads us to create an action called `clean-shot` in the robot's planning.\n\nFirst, the robot needs to make sure it's holding the shot glass with one hand (`holding ?h1 ?s`). This makes sense because you need to hold the glass to clean it properly.\n\nNext, the robot needs to have its other hand free (`handempty ?h2`). This is important because the robot might need to use this hand to operate cleaning tools or to stabilize the glass while cleaning.\n\nThe glass itself must be empty (`empty ?s`) before it can be cleaned. Imagine trying to clean a glass while it's still full of liquid; it would be messy and ineffective!\n\nLastly, the glass should have been used (`used ?s ?b`), indicating it was previously filled with a drink and now requires cleaning. This precondition checks whether the glass actually needs cleaning.\n\nOnce all these conditions are met, the robot can proceed with the cleaning action. The effect of this action is twofold: the shot glass is no longer 'used' for the specific beverage (`not (used ?s ?b)`), and the glass becomes clean (`clean ?s`).\n\nBy setting these preconditions and effects, we ensure that the robot performs the cleaning task effectively and prepares the glass for future use, maintaining a smooth operation in the bar scenario.\n                \n**Response:**\nParameters:\n1. ?s - shot: [short description of the parameter]\n2. ?i - ingredient: [short description of the parameter]\n3. ?h1 - hand: [short description of the parameter]\n4. ?h2 - hand: [short description of the parameter]\n5. ?d - dispenser: [short description of the parameter]\n\nPreconditions:\n```\n(and\n    (holding ?h1 ?s)\n    (handempty ?h2)\n    (dispenses ?d ?i)\n    (empty ?s)\n    (clean ?s)\n)\n```\n\nEffects:\n```\n(and\n    (not (empty ?s))\n    (contains ?s ?i)\n    (not (clean ?s))\n    (used ?s ?i)\n)\n```\n\n---\n", "type": "prompt"}
{"role": "user", "content": "Example 2\nAction Description: The robot fills an empty, clean shot glass with an ingredient from a dispenser.\n\nAction name: fill-shot\n\n\nYour answer:\n---\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:** Imagine our robot barman in a kitchen where it needs to prepare a drink using a shot glass. The robot has two hands and can only use one hand to hold an item at a time. Here\u2019s why the robot needs to follow certain steps, called preconditions, before it can fill the shot glass, which is the goal of the \"fill-shot\" action.\n\nFirstly, the robot must be holding the shot glass with one hand, which we call ?h1. This is important because the robot can only fill something it is holding. The precondition `(holding ?h1 ?s)` ensures that the robot has a good grip on the shot glass before proceeding.\n\nSecondly, the other hand, ?h2, must be empty (`handempty ?h2`). This is because if the hand is already holding something else, the robot wouldn\u2019t be able to operate the dispenser properly or manage other tasks like adding more ingredients if needed.\n\nThe next precondition is that the dispenser identified as ?d must be capable of dispensing the ingredient ?i, as noted in `(dispenses ?d ?i)`. This ensures that the robot is at the right dispenser for the ingredient it needs to fill the shot glass with.\n\nAlso, the shot glass itself must be empty (`empty ?s`) and clean (`clean ?s`) before anything is poured into it. This is common sense, right? You wouldn\u2019t want to drink from a dirty or already filled glass! This makes sure the drink is clean and tastes as expected.\n\nAfter all these conditions are met, the robot can go ahead and fill the shot glass. The effects of this action include a few changes:\n- The shot glass is no longer empty (`not (empty ?s)`), meaning it now contains the ingredient.\n- The shot glass now contains the specific ingredient (`contains ?s ?i`), which is just like saying the glass now has, say, gin in it.\n- The glass is no longer clean (`not (clean ?s)`) because it now has something in it.\n- Lastly, the shot glass is marked as used for that particular ingredient (`used ?s ?i`), which helps the robot remember what has been done with that glass.\n                \n**Response:**\nParameters:\n1. ?s - shot: [short description of the parameter]\n2. ?b - beverage: [short description of the parameter]\n3. ?h1 - hand: [short description of the parameter]\n4. ?h2 - hand: [short description of the parameter]\n\nPreconditions:\n```\n(and\n    (holding ?h1 ?s)\n    (handempty ?h2)\n    (empty ?s)\n    (used ?s ?b)\n)\n```\n\nEffects:\n```\n(and\n    (not (used ?s ?b))\n    (clean ?s)\n)\n```\n\n---\n", "type": "prompt"}
{"role": "user", "content": "Here are two examples from the storage domain for demonstrating the output format.\n        \nDomain information: Moving and storing crates of goods by hoists from containers to depots with spatial maps. This domain deals with the movement and storage of crates of goods using hoists. It involves different locations like containers and depots, and requires managing the spatial arrangement of crates and hoists in various areas. The actions primarily focus on the lifting, moving, and placement of crates by hoists, considering the spatial and availability constraints of the areas involved.\n\nA list of available predicates\n1. (clear ?s - store_area) ;; the store area is clear\n2. (crate_in ?c - crate ?p - place) ;; the crate is in the place\n3. (store_area_in ?s - store_area ?p - place) ;; the store area is in the place\n4. (available ?h - hoist) ;; the hoist is available\n5. (lifting ?h - hoist ?c - crate) ;; the hoist is lifting the crate\n6. (at ?h - hoist ?a - area) ;; the hoist is at the area\n7. (on ?c - crate ?s - store_area) ;; the crate is on the store area\n8. (connected ?a1 ?a2 - area) ;; the area a1 is connected to the area a2\nExample 1\nAction Description: Involves a hoist lifting a crate from one store_area to another area. Preconditions include the areas being connected, the hoist being at the destination area and available, and the crate being on the source store_area. The effects are the crate being lifted and the source store_area becoming clear.\n\nAction name: lift\n\n\nYour answer:\n---\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:**\nLet's imagine you want to move a toy train (representing the hoist) from one side of your playroom (a store area) to another. Before moving it, you need to make sure of a few things:\n\n1. **The train is actually at the starting point:** Just like you need to know where your train is before you can move it, the action schema checks if the hoist is at the starting store area (`at ?h ?from`). This ensures that we are moving the right hoist from the correct location.\n\n2. **The destination is clear:** Imagine if the place you wanted to move your train to was already full of other toys. You wouldn\u2019t be able to put your train there, right? Similarly, the schema requires the destination store area to be clear (`clear ?to`) so that the hoist can move there without any issues.\n\n3. **The starting and destination points are connected:** It\u2019s like making sure there\u2019s a clear path or a track between where your train is and where you want it to go. If there\u2019s no track, you can't move the train. In the action schema, this is checked by the condition (`connected ?from ?to`).\n\nNow, when the train (hoist) moves:\n- **It is no longer at the starting point:** Just like when your train leaves one side of the room, it\u2019s not there anymore. This change is shown in the schema by removing the condition that the hoist is at the starting area (`not (at ?h ?from)`).\n  \n- **It is now at the destination:** When you move your train to the other side of the room, it\u2019s now there. This is represented in the schema by adding the condition that the hoist is now at the destination area (`at ?h ?to`).\n\n- **The destination is no longer clear:** Now that the train is at the new spot, that area isn\u2019t empty anymore. This change is reflected by removing the 'clear' condition for the destination area (`not (clear ?to)`).\n\n- **The starting point becomes clear:** Since the train left the starting area, that spot is now free. This is captured by adding a 'clear' condition for the starting area (`clear ?from`).\n\nThis whole process helps ensure that the hoist can safely and efficiently move from one area to another without confusion or conflicts.\n                \n**Response:**\nParameters:\n1. ?h - hoist: [short description of the parameter]\n2. ?c - crate: [short description of the parameter]\n3. ?a1 - store_area: [short description of the parameter]\n4. ?a2 - area: [short description of the parameter]\n5. ?p - place: [short description of the parameter]\n\nPreconditions:\n```\n(and\n    (connected ?a1 ?a2)\n    (at ?h ?a2)\n    (lifting ?h ?c)\n    (clear ?a1)\n    (store_area_in ?a1 ?p)\n)\n```\n\nEffects:\n```\n(and\n    (not (lifting ?h ?c))\n    (available ?h)\n    (not (clear ?a1))\n    (on ?c ?a1)\n    (crate_in ?c ?p)\n)\n```\n\n---\n", "type": "prompt"}
{"role": "user", "content": "Example 2\nAction Description: This action is about a hoist dropping a crate into a store_area from an area. Preconditions are similar to 'Lift' but include the hoist lifting the crate and the destination store_area being clear. The effects involve the hoist becoming available and the crate being placed on the destination store_area.\n\nAction name: drop\n\n\nYour answer:\n---\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:**\nLet's imagine a scenario in a warehouse where a hoist is used to move crates from one area to another, like moving a box of toys from a shelf to a play area. The action we're talking about is called \"drop,\" where the hoist places a crate into a designated storage area.\n\n1. **Preconditions Explained:**\n   - **Connected Areas:** First, the hoist can only drop the crate if the area it\u2019s in (let's call it the play area) is connected to the area where the hoist is currently located (like the shelf area). This means there must be a clear path for the hoist to move the crate to its destination.\n   - **Hoist Location:** The hoist must be in the area adjacent to where the crate needs to go. If our hoist isn't next to the play area, it can't drop the crate there.\n   - **Hoist Lifting the Crate:** Before dropping, the hoist must already be lifting a crate. It's like making sure the hoist has picked up the box of toys before it can put it down.\n   - **Clear Storage Area:** The destination, where the crate will be placed, must be clear of other objects. This ensures there's space to safely place the new crate without stacking or causing a mess.\n   - **Store Area in Place:** The storage area where the crate is to be dropped needs to be part of the larger place being managed. This is like ensuring the play area is actually a part of the designated playroom.\n\n2. **Effects Explained:**\n   - **Hoist No Longer Lifting:** Once the crate is dropped, the hoist is no longer lifting it. This is like putting down the box of toys.\n   - **Hoist Becomes Available:** After dropping off the crate, the hoist is now free to take on other tasks, like picking up another box.\n   - **Storage Area Not Clear Anymore:** Since the crate has been placed there, the storage area is no longer empty.\n   - **Crate on Storage Area:** The crate is now officially in the storage area, like the box of toys now being in the play area.\n   - **Crate Location Updated:** We update the records to show that the crate is now in this new location within the place, which helps in managing space and knowing where everything is.\n\nThis action of dropping a crate involves several steps and conditions that ensure everything happens smoothly and safely, from ensuring there's a path to the hoist being ready and the space being available for the new crate. It's like making sure you have both hands free and a clear spot on the floor before you set down a heavy box.\n                \n**Response:**\nParameters:\n1. ?h - hoist: [short description of the parameter]\n2. ?c - crate: [short description of the parameter]\n3. ?a1 - store_area: [short description of the parameter]\n4. ?a2 - area: [short description of the parameter]\n5. ?p - place: [short description of the parameter]\n\nPreconditions:\n```\n(and\n    (connected ?a1 ?a2)\n    (at ?h ?a2)\n    (available ?h)\n    (on ?c ?a1)\n    (store_area_in ?a1 ?p)\n)\n```\n\nEffects:\n```\n(and\n    (not (on ?c ?a1))\n    (clear ?a1)\n    (not (available ?h))\n    (lifting ?h ?c)\n    (not (crate_in ?c ?p))\n)\n```\n\n---\n", "type": "prompt"}
{"role": "user", "content": "Question: Here is the task.\nA natural language description of the domain\nDomain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.\n\nA list of available predicates\n1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf\n2. (on-table ?x - book) ;; ?x is on the table\n3. (accessible ?x - book) ;; ?x is accessible (not covered)\n4. (hands-free) ;; The hands of the librarian are free\n5. (holding ?x - book) ;; The librarian is holding ?x\n6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat\n7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty\n8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full\n9. (book-request ?book - book) ;; There is a request for book ?book\n10. (return-due ?book - book) ;; Book ?book is due for return\n11. (checked-out ?book - book) ;; Book ?book is checked out\n\nAction Description: Picture a librarian holding a book. The 'place-on-table' action involves placing the held book onto the table. This action is feasible if the librarian is currently holding the book. Once placed, the book becomes accessible again, and the librarian's hands are free.\n\nAction name: place-on-table\n\n\nYour answer:\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:**\nIn the context of a library, the \"place-on-table\" action describes a librarian placing a book that they are currently holding onto a table. This action is straightforward but requires certain conditions to be met before it can be executed.\n\nThe librarian must be holding the book (`holding ?book`), which is a necessary condition because you cannot place a book on a table if you are not already holding it. Once the book is placed on the table, it becomes accessible to others (`accessible ?book`), meaning it is no longer in the librarian's hands and is available for others to view or borrow.\n\nAfter placing the book on the table, the librarian's hands are free (`hands-free`), which allows them to perform other tasks. The book is no longer being held by the librarian, which is reflected in the effect of the action.\n\n**Response:**\nParameters:\n1. ?book - book: [The book that the librarian is holding and will be placed on the table]\n\nPreconditions:\n```\n(and\n    (holding ?book)\n)\n```\n\nEffects:\n```\n(and\n    (not (holding ?book))\n    (on-table ?book)\n    (accessible ?book)\n    (hands-free)\n)\n```\n\n---", "type": "response", "action": "place-on-table"}
{"role": "system", "content": "# CONTEXT #\nYou are a tool called PDDL Modeling Assistant. You are a technical experts in constructing Planning Domain Definition Language (PDDL) models via the natural language context.\n# OBJECTIVE #\n* Construct parameters, preconditions and effects based on the domain information, action description and the action name.\n* All variables in the preconditions and effects must be listed in the action's parameters. This restriction helps maintain the action's scope and prevents ambiguity in the planning process.\n* Do not use predicates that are not defined in the available predicates list to construct the preconditions and effects.\n* When the natural language description is ambiguous or certain predicate changes are implied, make reasonable assumptions based on common sense to fill up the implicit predicate in the PDDL action.\n# STYLE #\nFollow the writing style of technical experts. The output can be parsed by a machine, so it is important to follow the structured format.\n# TONE #\nBe precise and concise in constructing the PDDL action. The PDDL action should be clear and unambiguous.\n# AUDIENCE #\nYour audience is someone who is trying to learn how to construct PDDL actions from natural language descriptions.\n# RESPONSE #\nThe response should be in the following format:\n---\n**Explanation:** [Your explanation here]\n\n**Response:**\nParameters:\n1. ?x - [type]: [parameter description]\n2. ...\n\nPreconditions:\n```\n(and\n    ([predicate_1] ?x)\n)\n```\n\nEffects:\n```\n(and\n    (not ([predicate_2] ?x))\n    ([predicate_2] ?x)\n    ...\n)\n```\n---\n", "type": "prompt"}
{"role": "user", "content": "One or two examples from other domains for illustrating the input and output formats.\nHere are two examples from the barman domain for demonstrating the output format.\n        \nDomain information: In this domain there is a robot barman that manipulates drink dispensers, glasses and a shaker. The goal is to find a plan of the robots actions that serves a desired set of drinks. In this domain deletes of actions encode relevant knowledge given that robot hands can only grasp one object at a time and given that glasses need to be empty and clean to be filled.\n\nA list of available predicates\n1. (ontable ?c - container) ;; the container is on the table\n2. (holding ?h - hand ?c - container) ;; the hand is holding the container\n3. (handempty ?h - hand) ;; the hand is empty\n4. (empty ?c - container) ;; the container is empty\n5. (contains ?c - container ?b - beverage) ;; the container contains the beverage\n6. (clean ?c - container) ;; the container is clean\n7. (used ?c - container ?b - beverage) ;; the container is used for the beverage\n8. (dispenses ?d - dispenser ?i - ingredient) ;; the dispenser dispenses the ingredient\n9. (shaker-empty-level ?s - shaker ?l - level) ;; the empty level of the shaker\n10. (shaker-level ?s - shaker ?l - level) ;; the shaker currently is at the level\n11. (next ?l1 ?l2 - level) ;; l2 is the next level after l1\n12. (unshaked ?s - shaker) ;; the shaker is unshaked\n13. (shaked ?s - shaker) ;; the shaker is shaked\n14. (cocktail-part1 ?c - cocktail ?i - ingredient) ;; the ingredient is part of the cocktail\n15. (cocktail-part2 ?c - cocktail ?i - ingredient) ;; the ingredient is part of the cocktail\nExample 1\nAction Description: Similar to the previous action, but the shaker already contains ingredients and isn't clean.\n\nAction name: pour-shot-to-used-shaker\n\n\nYour answer:\n---\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:**\n\nImagine you have a robot bartender who's trying to make a drink using a shaker that already has some ingredients but hasn't been cleaned. To help the robot make the drink correctly, we need to give it a clear set of instructions. These instructions are what we call an action schema in PDDL, a planning language.\n\nLet's break down the action called \"pour-shot-to-used-shaker\":\n\n1. **Preconditions**: These are like the 'rules' or requirements that must be true before the robot can start the action.\n   - `(holding ?h1 ?s)`: The robot must be holding a shot glass (`?s`). Think of it like needing to hold a lemon before you can squeeze it.\n   - `(contains ?s ?i)`: The shot glass should have some ingredient (`?i`) in it. This is like saying the lemon needs to actually have juice.\n   - `(unshaked ?d)`: The shaker (`?d`) hasn't been shaken yet. It's like having a mixing bowl where the ingredients are still not mixed.\n   - `(shaker-level ?d ?l)`: The shaker is at a certain fullness level (`?l`), which tells us how much space is left or how full it is.\n   - `(next ?l ?l1)`: There's a next level (`?l1`) that the shaker will reach after pouring in the shot. It\u2019s similar to knowing that if you add one cup of flour to a half-full bowl, it will be three-quarters full.\n\n2. **Effects**: These are the changes that happen because of the action.\n   - `(not (contains ?s ?i))` and `(empty ?s)`: The shot glass will no longer contain the ingredient, and it will be empty. It\u2019s like pouring out all the lemon juice, leaving the lemon empty.\n   - `(contains ?d ?i)`: The shaker will now contain the ingredient from the shot glass. This is moving the lemon juice into the mixing bowl.\n   - `(not (shaker-level ?d ?l))` and `(shaker-level ?d ?l1)`: The shaker's level changes from the current level to the next. Just like adding the flour to the bowl changes its fullness.\n\nBy following these instructions, the robot knows exactly what needs to be true before starting (preconditions) and what changes to expect after it completes the action (effects). \n                \n**Response:**\nParameters:\n1. ?s - shot: [short description of the parameter]\n2. ?i - ingredient: [short description of the parameter]\n3. ?d - shaker: [short description of the parameter]\n4. ?h1 - hand: [short description of the parameter]\n5. ?l - level: [short description of the parameter]\n6. ?l1 - level: [short description of the parameter]\n\nPreconditions:\n```\n(and\n    (holding ?h1 ?s)\n    (contains ?s ?i)\n    (unshaked ?d)\n    (shaker-level ?d ?l)\n    (next ?l ?l1)\n)\n```\n\nEffects:\n```\n(and\n    (not (contains ?s ?i))\n    (contains ?d ?i)\n    (empty ?s)\n    (not (shaker-level ?d ?l))\n    (shaker-level ?d ?l1)\n)\n```\n\n---\n", "type": "prompt"}
{"role": "user", "content": "Example 2\nAction Description: The robot uses a hand to pick up a container from the table.\n\nAction name: grasp\n\n\nYour answer:\n---\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:**\nImagine a robot bartender at a busy party, tasked with making a variety of drinks. This robot, like a human bartender, has hands that it uses to pick up things like glasses or shakers.\n\nIn the scenario we're discussing, the action we're focusing on is called \"grasp,\" where the robot uses its hand to pick up a container from a table. Let's break down why certain conditions need to be met for this action to happen successfully and what happens after the robot performs this action.\n\n**Why the preconditions are necessary:**\n1. **The container must be on the table (ontable ?c):** This makes sense because if the container isn't on the table, the robot wouldn't know where to find it. It needs to be in a predictable location that the robot can access.\n2. **The robot's hand must be empty (handempty ?h):** Before the robot can pick up something new, its hand needs to be empty. Just like you can't pick up a cup of coffee if you're already holding an apple in your hand, the robot needs a free hand to pick up a new container.\n\n**What happens after the action (effects):**\n1. **The container is no longer on the table (not (ontable ?c)):** Once the robot picks up the container, it's no longer sitting on the table. It's in the robot's hand.\n2. **The robot's hand is no longer empty (not (handempty ?h)):** With the container in its hand, the hand isn't empty anymore.\n3. **The robot's hand is holding the container (holding ?h ?c):** This describes the new status of the robot\u2019s hand\u2014it is actively holding onto the container.\n\nSo, in this action, we see the robot checking that the container is where it's supposed to be and making sure its hand is ready to pick something up. Once those conditions are met, the robot can safely pick up the container, changing both the status of the container and the status of its hand. This is very practical and logical, ensuring that the robot operates efficiently and correctly in its environment of serving drinks at the party.\n\nThis action schema helps in planning out the robot's movements in a logical sequence, ensuring it always knows what to do next, based on simple checks and changes (preconditions and effects).\n                \n**Response:**\nParameters:\n1. ?h - hand: [short description of the parameter]\n2. ?c - container: [short description of the parameter]\n\nPreconditions:\n```\n(and\n    (ontable ?c)\n    (handempty ?h)\n)\n```\n\nEffects:\n```\n(and\n    (not (ontable ?c))\n    (not (handempty ?h))\n    (holding ?h ?c)\n)\n```\n\n---\n", "type": "prompt"}
{"role": "user", "content": "Here are two examples from the storage domain for demonstrating the output format.\n        \nDomain information: Moving and storing crates of goods by hoists from containers to depots with spatial maps. This domain deals with the movement and storage of crates of goods using hoists. It involves different locations like containers and depots, and requires managing the spatial arrangement of crates and hoists in various areas. The actions primarily focus on the lifting, moving, and placement of crates by hoists, considering the spatial and availability constraints of the areas involved.\n\nA list of available predicates\n1. (clear ?s - store_area) ;; the store area is clear\n2. (crate_in ?c - crate ?p - place) ;; the crate is in the place\n3. (store_area_in ?s - store_area ?p - place) ;; the store area is in the place\n4. (available ?h - hoist) ;; the hoist is available\n5. (lifting ?h - hoist ?c - crate) ;; the hoist is lifting the crate\n6. (at ?h - hoist ?a - area) ;; the hoist is at the area\n7. (on ?c - crate ?s - store_area) ;; the crate is on the store area\n8. (connected ?a1 ?a2 - area) ;; the area a1 is connected to the area a2\nExample 1\nAction Description: This action is about a hoist dropping a crate into a store_area from an area. Preconditions are similar to 'Lift' but include the hoist lifting the crate and the destination store_area being clear. The effects involve the hoist becoming available and the crate being placed on the destination store_area.\n\nAction name: drop\n\n\nYour answer:\n---\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:**\nLet's imagine a scenario in a warehouse where a hoist is used to move crates from one area to another, like moving a box of toys from a shelf to a play area. The action we're talking about is called \"drop,\" where the hoist places a crate into a designated storage area.\n\n1. **Preconditions Explained:**\n   - **Connected Areas:** First, the hoist can only drop the crate if the area it\u2019s in (let's call it the play area) is connected to the area where the hoist is currently located (like the shelf area). This means there must be a clear path for the hoist to move the crate to its destination.\n   - **Hoist Location:** The hoist must be in the area adjacent to where the crate needs to go. If our hoist isn't next to the play area, it can't drop the crate there.\n   - **Hoist Lifting the Crate:** Before dropping, the hoist must already be lifting a crate. It's like making sure the hoist has picked up the box of toys before it can put it down.\n   - **Clear Storage Area:** The destination, where the crate will be placed, must be clear of other objects. This ensures there's space to safely place the new crate without stacking or causing a mess.\n   - **Store Area in Place:** The storage area where the crate is to be dropped needs to be part of the larger place being managed. This is like ensuring the play area is actually a part of the designated playroom.\n\n2. **Effects Explained:**\n   - **Hoist No Longer Lifting:** Once the crate is dropped, the hoist is no longer lifting it. This is like putting down the box of toys.\n   - **Hoist Becomes Available:** After dropping off the crate, the hoist is now free to take on other tasks, like picking up another box.\n   - **Storage Area Not Clear Anymore:** Since the crate has been placed there, the storage area is no longer empty.\n   - **Crate on Storage Area:** The crate is now officially in the storage area, like the box of toys now being in the play area.\n   - **Crate Location Updated:** We update the records to show that the crate is now in this new location within the place, which helps in managing space and knowing where everything is.\n\nThis action of dropping a crate involves several steps and conditions that ensure everything happens smoothly and safely, from ensuring there's a path to the hoist being ready and the space being available for the new crate. It's like making sure you have both hands free and a clear spot on the floor before you set down a heavy box.\n                \n**Response:**\nParameters:\n1. ?h - hoist: [short description of the parameter]\n2. ?c - crate: [short description of the parameter]\n3. ?a1 - store_area: [short description of the parameter]\n4. ?a2 - area: [short description of the parameter]\n5. ?p - place: [short description of the parameter]\n\nPreconditions:\n```\n(and\n    (connected ?a1 ?a2)\n    (at ?h ?a2)\n    (lifting ?h ?c)\n    (clear ?a1)\n    (store_area_in ?a1 ?p)\n)\n```\n\nEffects:\n```\n(and\n    (not (lifting ?h ?c))\n    (available ?h)\n    (not (clear ?a1))\n    (on ?c ?a1)\n    (crate_in ?c ?p)\n)\n```\n\n---\n", "type": "prompt"}
{"role": "user", "content": "Example 2\nAction Description: Moves a hoist from one store_area to another. Preconditions include the hoist being at the source store_area, the destination store_area being clear, and the areas being connected. The effect is the hoist moving to the destination and the change in clarity status of both store areas.\n\nAction name: move\n\n\nYour answer:\n---\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:**\n\nLet's imagine a scenario where you need to move a toy truck from one corner of a room to another. This toy truck represents the hoist, and the corners of the room are like different storage areas in our description.\n\n1. **Preconditions:**\n   - **Hoist is at the source area (at ?h ?from):** This condition makes sure that the hoist is actually at the starting point (like making sure your toy truck is really in the corner where you want to start moving it from). This is necessary because you can't move something from a place it isn't already at.\n   - **Destination area is clear (clear ?to):** This is like making sure that the corner you want to move your toy truck to doesn\u2019t have any obstacles or other toys in the way. The space needs to be clear so the hoist can move in without any issues.\n   - **Areas are connected (connected ?from ?to):** This checks if there is a direct path from the starting point to the destination, similar to making sure there's a clear path on the floor between the two corners of the room for the toy truck to travel without hitting a wall or furniture.\n\n2. **Effects:**\n   - **Hoist moves to the destination (at ?h ?to):** This is like saying your toy truck is now in the new corner of the room.\n   - **Hoist is no longer at the source (not (at ?h ?from)):** Just like your toy truck can't be in two places at once, when the hoist moves to the new area, it's no longer in the original area.\n   - **Destination area is no longer clear (not (clear ?to)):** Now that the hoist (or your toy truck) is in the new corner, that corner isn't empty anymore.\n   - **Source area becomes clear (clear ?from):** Since the hoist has moved away from the original area, that area is now free of obstacles or the hoist itself.\n\nSo, in simple terms, this action is like moving a toy from one clear, connected corner of the room to another. Before you move it, you need to check that it\u2019s starting in the right place, that there\u2019s no blockage where it\u2019s going, and that it can directly reach there. Once moved, the toy truck\u2019s old spot becomes empty, and its new spot is now occupied by it.\n                \n**Response:**\nParameters:\n1. ?h - hoist: [short description of the parameter]\n2. ?from - store_area: [short description of the parameter]\n3. ?to - store_area: [short description of the parameter]\n\nPreconditions:\n```\n(and\n    (at ?h ?from)\n    (clear ?to)\n    (connected ?from ?to)\n)\n```\n\nEffects:\n```\n(and\n    (not (at ?h ?from))\n    (at ?h ?to)\n    (not (clear ?to))\n    (clear ?from)\n)\n```\n\n---\n", "type": "prompt"}
{"role": "user", "content": "Question: Here is the task.\nA natural language description of the domain\nDomain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.\n\nA list of available predicates\n1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf\n2. (on-table ?x - book) ;; ?x is on the table\n3. (accessible ?x - book) ;; ?x is accessible (not covered)\n4. (hands-free) ;; The hands of the librarian are free\n5. (holding ?x - book) ;; The librarian is holding ?x\n6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat\n7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty\n8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full\n9. (book-request ?book - book) ;; There is a request for book ?book\n10. (return-due ?book - book) ;; Book ?book is due for return\n11. (checked-out ?book - book) ;; Book ?book is checked out\n\nAction Description: Consider a librarian holding a book and standing near a shelf. The 'place-on-shelf' action involves placing the held book on top of another book on the shelf, given that the book on the shelf is accessible. This action results in the held book becoming accessible, the book on the shelf becoming inaccessible, and the librarian's hands becoming free.\n\nAction name: place-on-shelf\n\n\nYour answer:\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:**\n\nIn the context of a library, the \"place-on-shelf\" action is a fundamental task that a librarian performs to organize books. This action involves a librarian who is currently holding a book and wants to place it on a shelf. For this action to be executed, certain conditions must be met, and certain changes must occur once the action is completed.\n\n1. **Preconditions:**\n   - **The librarian is holding a book (holding ?book):** This is the starting condition that the librarian has a book in hand, ready to be placed on the shelf.\n   - **Another book is on the shelf and is accessible (on-shelf ?below-book ?book):** The book that the librarian is holding will be placed on top of another book that is already on the shelf. This book must be accessible, meaning it is not covered by another book and can be reached.\n\n2. **Effects:**\n   - **The held book is no longer being held (not (holding ?book)):** Once the book is placed on the shelf, the librarian's hands are no longer occupied by it.\n   - **The held book becomes accessible on the shelf (on-shelf ?book ?below-book):** The book that was being held is now on the shelf, and it becomes accessible to others.\n   - **The book that was below becomes inaccessible (not (accessible ?below-book)):** Since the new book is placed on top of it, the book that was previously on the shelf is now covered and not accessible.\n   - **The librarian's hands are free (hands-free):** With the book placed on the shelf, the librarian's hands are now free to perform other tasks.\n\nThis action ensures that books are neatly organized on shelves and that the librarian can manage the library's collection efficiently.\n\n**Response:**\nParameters:\n1. ?book - book: [The book that the librarian is holding]\n2. ?below-book - book: [The book that is already on the shelf and will be below the held book]\n\nPreconditions:\n```\n(and\n    (holding ?book)\n    (on-shelf ?below-book ?book)\n    (accessible ?below-book)\n)\n```\n\nEffects:\n```\n(and\n    (not (holding ?book))\n    (on-shelf ?book ?below-book)\n    (not (accessible ?below-book))\n    (hands-free)\n)\n```\n\n---", "type": "response", "action": "place-on-shelf"}
{"role": "system", "content": "# CONTEXT #\nYou are a tool called PDDL Modeling Assistant. You are a technical experts in constructing Planning Domain Definition Language (PDDL) models via the natural language context.\n# OBJECTIVE #\n* Construct parameters, preconditions and effects based on the domain information, action description and the action name.\n* All variables in the preconditions and effects must be listed in the action's parameters. This restriction helps maintain the action's scope and prevents ambiguity in the planning process.\n* Do not use predicates that are not defined in the available predicates list to construct the preconditions and effects.\n* When the natural language description is ambiguous or certain predicate changes are implied, make reasonable assumptions based on common sense to fill up the implicit predicate in the PDDL action.\n# STYLE #\nFollow the writing style of technical experts. The output can be parsed by a machine, so it is important to follow the structured format.\n# TONE #\nBe precise and concise in constructing the PDDL action. The PDDL action should be clear and unambiguous.\n# AUDIENCE #\nYour audience is someone who is trying to learn how to construct PDDL actions from natural language descriptions.\n# RESPONSE #\nThe response should be in the following format:\n---\n**Explanation:** [Your explanation here]\n\n**Response:**\nParameters:\n1. ?x - [type]: [parameter description]\n2. ...\n\nPreconditions:\n```\n(and\n    ([predicate_1] ?x)\n)\n```\n\nEffects:\n```\n(and\n    (not ([predicate_2] ?x))\n    ([predicate_2] ?x)\n    ...\n)\n```\n---\n", "type": "prompt"}
{"role": "user", "content": "One or two examples from other domains for illustrating the input and output formats.\nHere are two examples from the barman domain for demonstrating the output format.\n        \nDomain information: In this domain there is a robot barman that manipulates drink dispensers, glasses and a shaker. The goal is to find a plan of the robots actions that serves a desired set of drinks. In this domain deletes of actions encode relevant knowledge given that robot hands can only grasp one object at a time and given that glasses need to be empty and clean to be filled.\n\nA list of available predicates\n1. (ontable ?c - container) ;; the container is on the table\n2. (holding ?h - hand ?c - container) ;; the hand is holding the container\n3. (handempty ?h - hand) ;; the hand is empty\n4. (empty ?c - container) ;; the container is empty\n5. (contains ?c - container ?b - beverage) ;; the container contains the beverage\n6. (clean ?c - container) ;; the container is clean\n7. (used ?c - container ?b - beverage) ;; the container is used for the beverage\n8. (dispenses ?d - dispenser ?i - ingredient) ;; the dispenser dispenses the ingredient\n9. (shaker-empty-level ?s - shaker ?l - level) ;; the empty level of the shaker\n10. (shaker-level ?s - shaker ?l - level) ;; the shaker currently is at the level\n11. (next ?l1 ?l2 - level) ;; l2 is the next level after l1\n12. (unshaked ?s - shaker) ;; the shaker is unshaked\n13. (shaked ?s - shaker) ;; the shaker is shaked\n14. (cocktail-part1 ?c - cocktail ?i - ingredient) ;; the ingredient is part of the cocktail\n15. (cocktail-part2 ?c - cocktail ?i - ingredient) ;; the ingredient is part of the cocktail\nExample 1\nAction Description: The robot refills a shot glass with the same ingredient it previously contained.\n\nAction name: refill-shot\n\n\nYour answer:\n---\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:**\nLet's imagine a robot bartender named Robbie. Robbie's job is to make sure everyone gets their favorite drink, using shot glasses and different drink dispensers. Now, think about Robbie having to refill a shot glass with a specific ingredient. To do this smoothly, Robbie has to follow certain steps, and that's what the PDDL action schema is showing us.\n\n1. **Preconditions (The must-haves before starting):**\n   - Robbie must already be holding the shot glass with one hand (`holding ?h1 ?s`). This means Robbie's hand (`?h1`) is not empty because it's holding the shot glass (`?s`).\n   - The other hand (`?h2`) needs to be empty (`handempty ?h2`). This is important because Robbie might need to use this hand to operate the dispenser or do something else during the process.\n   - The dispenser that Robbie is going to use must dispense the ingredient Robbie needs (`dispenses ?d ?i`). This ensures that Robbie is at the right dispenser for the drink.\n   - The shot glass must be empty (`empty ?s`) before Robbie can refill it. We can't pour more into a full glass, right?\n   - The shot glass must have been used previously for the same ingredient (`used ?s ?i`). This tells us that it's okay to use the same glass for the same drink without mixing flavors.\n\n2. **Effects (What happens after Robbie follows the steps):**\n   - The shot glass is no longer empty (`not (empty ?s)`). It means Robbie has successfully refilled it.\n   - The shot glass now contains the ingredient it was supposed to be refilled with (`contains ?s ?i`). Now, the glass is ready to be served again with the same tasty drink.\n\nThis action schema helps Robbie remember exactly what needs to be checked and done to successfully refill a shot glass.\n                \n**Response:**\nParameters:\n1. ?s - shot: [short description of the parameter]\n2. ?i - ingredient: [short description of the parameter]\n3. ?h1 - hand: [short description of the parameter]\n4. ?h2 - hand: [short description of the parameter]\n5. ?d - dispenser: [short description of the parameter]\n\nPreconditions:\n```\n(and\n    (holding ?h1 ?s)\n    (handempty ?h2)\n    (dispenses ?d ?i)\n    (empty ?s)\n    (used ?s ?i)\n)\n```\n\nEffects:\n```\n(and\n    (not (empty ?s))\n    (contains ?s ?i)\n)\n```\n\n---\n", "type": "prompt"}
{"role": "user", "content": "Example 2\nAction Description: The robot empties a shaker that has been shaken, changing its level.\n\nAction name: empty-shaker\n\n\nYour answer:\n---\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:**\n\nLet's think of our robot barman as someone working in a kitchen, trying to prepare a cocktail using a shaker. The robot needs to follow certain steps to make sure everything goes smoothly and safely, just like following a recipe.\n\nThe action \"empty-shaker\" is all about the robot taking a shaker that has already been shaken (which means the ingredients are mixed up properly) and emptying it out so that the drink can be served, and the shaker is ready to be cleaned and used again.\n\nNow, let's talk about the preconditions, which are like the 'must-haves' before the robot can start this action:\n1. **(holding ?h ?s)** - The robot must be holding the shaker. It can\u2019t empty it if it\u2019s not holding it, right? Just like you can't pour milk from a jug if you're not holding it.\n2. **(contains ?s ?b)** - The shaker needs to have a drink inside. There's no point in trying to empty something that's already empty.\n3. **(shaked ?s)** - The drink inside the shaker must be mixed up by shaking. This ensures the drink is ready to be served.\n4. **(shaker-level ?s ?l)** - This tells us how much drink is currently in the shaker. It\u2019s important to know this so the robot knows it\u2019s actually pouring something out.\n5. **(shaker-empty-level ?s ?l1)** - This indicates what the level of the shaker should be after emptying it. Usually, it means it will be empty or nearly empty.\n\nThe effects of the action describe what changes after the robot empties the shaker:\n1. **(not (shaked ?s))** - The shaker is no longer considered 'shaken' because it's been emptied.\n2. **(not (shaker-level ?s ?l))** - The previous level of the drink is no longer relevant because it's been poured out.\n3. **(shaker-level ?s ?l1)** - This updates the level of the shaker to show it's now empty or at the lower level expected.\n4. **(not (contains ?s ?b))** - The shaker no longer contains the drink because it\u2019s been poured out.\n5. **(empty ?s)** - Finally, the shaker is empty, ready to be washed and used again for the next drink.\n\nBy ensuring all these preconditions are met before the action and then updating everything as described in the effects, the robot efficiently manages its tasks without any mix-ups or errors, just like a good cook keeps their kitchen in order. This process helps the robot move smoothly from one task to the next, ensuring each drink is made and served perfectly.\n                \n**Response:**\nParameters:\n1. ?h - hand: [short description of the parameter]\n2. ?s - shaker: [short description of the parameter]\n3. ?b - cocktail: [short description of the parameter]\n4. ?l - level: [short description of the parameter]\n5. ?l1 - level: [short description of the parameter]\n\nPreconditions:\n```\n(and\n    (holding ?h ?s)\n    (contains ?s ?b)\n    (shaked ?s)\n    (shaker-level ?s ?l)\n    (shaker-empty-level ?s ?l1)\n)\n```\n\nEffects:\n```\n(and\n    (not (shaked ?s))\n    (not (shaker-level ?s ?l))\n    (shaker-level ?s ?l1)\n    (not (contains ?s ?b))\n    (empty ?s)\n)\n```\n\n---\n", "type": "prompt"}
{"role": "user", "content": "Here are two examples from the storage domain for demonstrating the output format.\n        \nDomain information: Moving and storing crates of goods by hoists from containers to depots with spatial maps. This domain deals with the movement and storage of crates of goods using hoists. It involves different locations like containers and depots, and requires managing the spatial arrangement of crates and hoists in various areas. The actions primarily focus on the lifting, moving, and placement of crates by hoists, considering the spatial and availability constraints of the areas involved.\n\nA list of available predicates\n1. (clear ?s - store_area) ;; the store area is clear\n2. (crate_in ?c - crate ?p - place) ;; the crate is in the place\n3. (store_area_in ?s - store_area ?p - place) ;; the store area is in the place\n4. (available ?h - hoist) ;; the hoist is available\n5. (lifting ?h - hoist ?c - crate) ;; the hoist is lifting the crate\n6. (at ?h - hoist ?a - area) ;; the hoist is at the area\n7. (on ?c - crate ?s - store_area) ;; the crate is on the store area\n8. (connected ?a1 ?a2 - area) ;; the area a1 is connected to the area a2\nExample 1\nAction Description: Involves a hoist lifting a crate from one store_area to another area. Preconditions include the areas being connected, the hoist being at the destination area and available, and the crate being on the source store_area. The effects are the crate being lifted and the source store_area becoming clear.\n\nAction name: lift\n\n\nYour answer:\n---\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:**\nLet's imagine you want to move a toy train (representing the hoist) from one side of your playroom (a store area) to another. Before moving it, you need to make sure of a few things:\n\n1. **The train is actually at the starting point:** Just like you need to know where your train is before you can move it, the action schema checks if the hoist is at the starting store area (`at ?h ?from`). This ensures that we are moving the right hoist from the correct location.\n\n2. **The destination is clear:** Imagine if the place you wanted to move your train to was already full of other toys. You wouldn\u2019t be able to put your train there, right? Similarly, the schema requires the destination store area to be clear (`clear ?to`) so that the hoist can move there without any issues.\n\n3. **The starting and destination points are connected:** It\u2019s like making sure there\u2019s a clear path or a track between where your train is and where you want it to go. If there\u2019s no track, you can't move the train. In the action schema, this is checked by the condition (`connected ?from ?to`).\n\nNow, when the train (hoist) moves:\n- **It is no longer at the starting point:** Just like when your train leaves one side of the room, it\u2019s not there anymore. This change is shown in the schema by removing the condition that the hoist is at the starting area (`not (at ?h ?from)`).\n  \n- **It is now at the destination:** When you move your train to the other side of the room, it\u2019s now there. This is represented in the schema by adding the condition that the hoist is now at the destination area (`at ?h ?to`).\n\n- **The destination is no longer clear:** Now that the train is at the new spot, that area isn\u2019t empty anymore. This change is reflected by removing the 'clear' condition for the destination area (`not (clear ?to)`).\n\n- **The starting point becomes clear:** Since the train left the starting area, that spot is now free. This is captured by adding a 'clear' condition for the starting area (`clear ?from`).\n\nThis whole process helps ensure that the hoist can safely and efficiently move from one area to another without confusion or conflicts.\n                \n**Response:**\nParameters:\n1. ?h - hoist: [short description of the parameter]\n2. ?from - store_area: [short description of the parameter]\n3. ?to - store_area: [short description of the parameter]\n\nPreconditions:\n```\n(and\n    (at ?h ?from)\n    (clear ?to)\n    (connected ?from ?to)\n)\n```\n\nEffects:\n```\n(and\n    (not (at ?h ?from))\n    (at ?h ?to)\n    (not (clear ?to))\n    (clear ?from)\n)\n```\n\n---\n", "type": "prompt"}
{"role": "user", "content": "Example 2\nAction Description: Moves a hoist from one store_area to another. Preconditions include the hoist being at the source store_area, the destination store_area being clear, and the areas being connected. The effect is the hoist moving to the destination and the change in clarity status of both store areas.\n\nAction name: move\n\n\nYour answer:\n---\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:**\n\nLet's imagine a scenario where you need to move a toy truck from one corner of a room to another. This toy truck represents the hoist, and the corners of the room are like different storage areas in our description.\n\n1. **Preconditions:**\n   - **Hoist is at the source area (at ?h ?from):** This condition makes sure that the hoist is actually at the starting point (like making sure your toy truck is really in the corner where you want to start moving it from). This is necessary because you can't move something from a place it isn't already at.\n   - **Destination area is clear (clear ?to):** This is like making sure that the corner you want to move your toy truck to doesn\u2019t have any obstacles or other toys in the way. The space needs to be clear so the hoist can move in without any issues.\n   - **Areas are connected (connected ?from ?to):** This checks if there is a direct path from the starting point to the destination, similar to making sure there's a clear path on the floor between the two corners of the room for the toy truck to travel without hitting a wall or furniture.\n\n2. **Effects:**\n   - **Hoist moves to the destination (at ?h ?to):** This is like saying your toy truck is now in the new corner of the room.\n   - **Hoist is no longer at the source (not (at ?h ?from)):** Just like your toy truck can't be in two places at once, when the hoist moves to the new area, it's no longer in the original area.\n   - **Destination area is no longer clear (not (clear ?to)):** Now that the hoist (or your toy truck) is in the new corner, that corner isn't empty anymore.\n   - **Source area becomes clear (clear ?from):** Since the hoist has moved away from the original area, that area is now free of obstacles or the hoist itself.\n\nSo, in simple terms, this action is like moving a toy from one clear, connected corner of the room to another. Before you move it, you need to check that it\u2019s starting in the right place, that there\u2019s no blockage where it\u2019s going, and that it can directly reach there. Once moved, the toy truck\u2019s old spot becomes empty, and its new spot is now occupied by it.\n                \n**Response:**\nParameters:\n1. ?h - hoist: [short description of the parameter]\n2. ?c - crate: [short description of the parameter]\n3. ?a1 - store_area: [short description of the parameter]\n4. ?a2 - area: [short description of the parameter]\n5. ?p - place: [short description of the parameter]\n\nPreconditions:\n```\n(and\n    (connected ?a1 ?a2)\n    (at ?h ?a2)\n    (available ?h)\n    (on ?c ?a1)\n    (store_area_in ?a1 ?p)\n)\n```\n\nEffects:\n```\n(and\n    (not (on ?c ?a1))\n    (clear ?a1)\n    (not (available ?h))\n    (lifting ?h ?c)\n    (not (crate_in ?c ?p))\n)\n```\n\n---\n", "type": "prompt"}
{"role": "user", "content": "Question: Here is the task.\nA natural language description of the domain\nDomain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.\n\nA list of available predicates\n1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf\n2. (on-table ?x - book) ;; ?x is on the table\n3. (accessible ?x - book) ;; ?x is accessible (not covered)\n4. (hands-free) ;; The hands of the librarian are free\n5. (holding ?x - book) ;; The librarian is holding ?x\n6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat\n7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty\n8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full\n9. (book-request ?book - book) ;; There is a request for book ?book\n10. (return-due ?book - book) ;; Book ?book is due for return\n11. (checked-out ?book - book) ;; Book ?book is checked out\n\nAction Description: Imagine a librarian approaching a shelf where one book is placed on top of another. The 'remove-from-shelf' action allows the librarian to take the top book off the shelf, provided it is accessible and the librarian's hands are free. This action makes the book on the shelf accessible and the librarian holds the removed book.\n\nAction name: remove-from-shelf\n\n\nYour answer:\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:**\n\nIn the context of our library domain, the 'remove-from-shelf' action is akin to a librarian retrieving a book from a shelf for a patron or for reorganization purposes. For this action to occur, certain conditions must be met, and certain outcomes are expected once the action is completed.\n\nThe librarian must ensure that:\n- The book they want to remove is on top of another book on the shelf (`on-shelf ?top-book ?bottom-book`).\n- The top book is accessible, meaning it's not covered by another book or object (`accessible ?top-book`).\n- The librarian's hands are free to handle the book (`hands-free`).\n\nOnce the librarian removes the top book from the shelf:\n- The top book is no longer on the shelf (`not (on-shelf ?top-book ?bottom-book)`).\n- The librarian is now holding the book (`holding ?top-book`).\n- The book that was underneath is now accessible since the top book is removed (`accessible ?bottom-book`).\n\nThis action is a fundamental part of managing the library's collection, allowing for books to be moved, reorganized, or checked out to patrons.\n\n**Response:**\nParameters:\n1. ?top-book - book: [The book to be removed from the shelf]\n2. ?bottom-book - book: [The book that is underneath the top book on the shelf]\n\nPreconditions:\n```\n(and\n    (on-shelf ?top-book ?bottom-book)\n    (accessible ?top-book)\n    (hands-free)\n)\n```\n\nEffects:\n```\n(and\n    (not (on-shelf ?top-book ?bottom-book))\n    (holding ?top-book)\n    (accessible ?bottom-book)\n)\n```\n\n---", "type": "response", "action": "remove-from-shelf"}
{"role": "system", "content": "# CONTEXT #\nYou are a tool called PDDL Modeling Assistant. You are a technical experts in constructing Planning Domain Definition Language (PDDL) models via the natural language context.\n# OBJECTIVE #\n* Construct parameters, preconditions and effects based on the domain information, action description and the action name.\n* All variables in the preconditions and effects must be listed in the action's parameters. This restriction helps maintain the action's scope and prevents ambiguity in the planning process.\n* Do not use predicates that are not defined in the available predicates list to construct the preconditions and effects.\n* When the natural language description is ambiguous or certain predicate changes are implied, make reasonable assumptions based on common sense to fill up the implicit predicate in the PDDL action.\n# STYLE #\nFollow the writing style of technical experts. The output can be parsed by a machine, so it is important to follow the structured format.\n# TONE #\nBe precise and concise in constructing the PDDL action. The PDDL action should be clear and unambiguous.\n# AUDIENCE #\nYour audience is someone who is trying to learn how to construct PDDL actions from natural language descriptions.\n# RESPONSE #\nThe response should be in the following format:\n---\n**Explanation:** [Your explanation here]\n\n**Response:**\nParameters:\n1. ?x - [type]: [parameter description]\n2. ...\n\nPreconditions:\n```\n(and\n    ([predicate_1] ?x)\n)\n```\n\nEffects:\n```\n(and\n    (not ([predicate_2] ?x))\n    ([predicate_2] ?x)\n    ...\n)\n```\n---\n", "type": "prompt"}
{"role": "user", "content": "One or two examples from other domains for illustrating the input and output formats.\nHere are two examples from the barman domain for demonstrating the output format.\n        \nDomain information: In this domain there is a robot barman that manipulates drink dispensers, glasses and a shaker. The goal is to find a plan of the robots actions that serves a desired set of drinks. In this domain deletes of actions encode relevant knowledge given that robot hands can only grasp one object at a time and given that glasses need to be empty and clean to be filled.\n\nA list of available predicates\n1. (ontable ?c - container) ;; the container is on the table\n2. (holding ?h - hand ?c - container) ;; the hand is holding the container\n3. (handempty ?h - hand) ;; the hand is empty\n4. (empty ?c - container) ;; the container is empty\n5. (contains ?c - container ?b - beverage) ;; the container contains the beverage\n6. (clean ?c - container) ;; the container is clean\n7. (used ?c - container ?b - beverage) ;; the container is used for the beverage\n8. (dispenses ?d - dispenser ?i - ingredient) ;; the dispenser dispenses the ingredient\n9. (shaker-empty-level ?s - shaker ?l - level) ;; the empty level of the shaker\n10. (shaker-level ?s - shaker ?l - level) ;; the shaker currently is at the level\n11. (next ?l1 ?l2 - level) ;; l2 is the next level after l1\n12. (unshaked ?s - shaker) ;; the shaker is unshaked\n13. (shaked ?s - shaker) ;; the shaker is shaked\n14. (cocktail-part1 ?c - cocktail ?i - ingredient) ;; the ingredient is part of the cocktail\n15. (cocktail-part2 ?c - cocktail ?i - ingredient) ;; the ingredient is part of the cocktail\nExample 1\nAction Description: Similar to the previous action, but the shaker already contains ingredients and isn't clean.\n\nAction name: pour-shot-to-used-shaker\n\n\nYour answer:\n---\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:**\n\nImagine you have a robot bartender who's trying to make a drink using a shaker that already has some ingredients but hasn't been cleaned. To help the robot make the drink correctly, we need to give it a clear set of instructions. These instructions are what we call an action schema in PDDL, a planning language.\n\nLet's break down the action called \"pour-shot-to-used-shaker\":\n\n1. **Preconditions**: These are like the 'rules' or requirements that must be true before the robot can start the action.\n   - `(holding ?h1 ?s)`: The robot must be holding a shot glass (`?s`). Think of it like needing to hold a lemon before you can squeeze it.\n   - `(contains ?s ?i)`: The shot glass should have some ingredient (`?i`) in it. This is like saying the lemon needs to actually have juice.\n   - `(unshaked ?d)`: The shaker (`?d`) hasn't been shaken yet. It's like having a mixing bowl where the ingredients are still not mixed.\n   - `(shaker-level ?d ?l)`: The shaker is at a certain fullness level (`?l`), which tells us how much space is left or how full it is.\n   - `(next ?l ?l1)`: There's a next level (`?l1`) that the shaker will reach after pouring in the shot. It\u2019s similar to knowing that if you add one cup of flour to a half-full bowl, it will be three-quarters full.\n\n2. **Effects**: These are the changes that happen because of the action.\n   - `(not (contains ?s ?i))` and `(empty ?s)`: The shot glass will no longer contain the ingredient, and it will be empty. It\u2019s like pouring out all the lemon juice, leaving the lemon empty.\n   - `(contains ?d ?i)`: The shaker will now contain the ingredient from the shot glass. This is moving the lemon juice into the mixing bowl.\n   - `(not (shaker-level ?d ?l))` and `(shaker-level ?d ?l1)`: The shaker's level changes from the current level to the next. Just like adding the flour to the bowl changes its fullness.\n\nBy following these instructions, the robot knows exactly what needs to be true before starting (preconditions) and what changes to expect after it completes the action (effects). \n                \n**Response:**\nParameters:\n1. ?s - shot: [short description of the parameter]\n2. ?i - ingredient: [short description of the parameter]\n3. ?d - shaker: [short description of the parameter]\n4. ?h1 - hand: [short description of the parameter]\n5. ?l - level: [short description of the parameter]\n6. ?l1 - level: [short description of the parameter]\n\nPreconditions:\n```\n(and\n    (holding ?h1 ?s)\n    (contains ?s ?i)\n    (unshaked ?d)\n    (shaker-level ?d ?l)\n    (next ?l ?l1)\n)\n```\n\nEffects:\n```\n(and\n    (not (contains ?s ?i))\n    (contains ?d ?i)\n    (empty ?s)\n    (not (shaker-level ?d ?l))\n    (shaker-level ?d ?l1)\n)\n```\n\n---\n", "type": "prompt"}
{"role": "user", "content": "Example 2\nAction Description: The robot shakes a shaker containing two ingredients to make a cocktail.\n\nAction name: shake\n\n\nYour answer:\n---\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:**\n\nLet's imagine our robot barman has been given the task of making a cocktail by mixing two ingredients in a shaker. Now, in the world of our robot, we describe this task using something called an \"action schema\" in PDDL, which is just a way to explain step-by-step what needs to happen.\n\nHere's why each part of the action schema for \"shake\" is set up the way it is:\n\n1. **Parameters**: This includes everything the robot needs to know about before starting:\n   - The cocktail it needs to make.\n   - The two ingredients it will use.\n   - The shaker where the mixing happens.\n   - The robot's two hands.\n\n2. **Preconditions**: These are the conditions that must be true before the robot can start shaking the ingredients:\n   - The robot must be holding the shaker in one hand (`holding ?h1 ?s`).\n   - The other hand needs to be free (`handempty ?h2`) so the robot can balance or do other tasks if needed.\n   - The shaker must contain the two specific ingredients (`contains ?s ?d1` and `contains ?s ?d2`).\n   - Each ingredient must be a correct part of the cocktail (`cocktail-part1 ?b ?d1` and `cocktail-part2 ?b ?d2`).\n   - The shaker must be unshaken (`unshaked ?s`), meaning the ingredients haven't been mixed yet.\n\n3. **Effects**: These are what will happen after the robot performs the action:\n   - The shaker will no longer be unshaken; it's now shaken (`not (unshaked ?s)` and `shaked ?s`).\n   - The individual ingredients will no longer be in the shaker by themselves because they've been mixed into a cocktail (`not (contains ?s ?d1)` and `not (contains ?s ?d2)`).\n   - Now, the shaker contains the cocktail (`contains ?s ?b`).\n\nImagine our robot is like a chef following a recipe. The preconditions are like checking that you have all your ingredients and tools ready, and the effects are what you expect to see in your cooking pot after you follow the steps. This action schema helps the robot understand exactly what conditions need to be in place before it starts mixing and what changes to expect after it\u2019s done.\n\nThis way, we make sure the robot can successfully make the cocktail without any hitches, like trying to mix without holding the shaker or mixing the wrong ingredients.\n                \n**Response:**\nParameters:\n1. ?b - cocktail: [short description of the parameter]\n2. ?d1 - ingredient: [short description of the parameter]\n3. ?d2 - ingredient: [short description of the parameter]\n4. ?s - shaker: [short description of the parameter]\n5. ?h1 - hand: [short description of the parameter]\n6. ?h2 - hand: [short description of the parameter]\n\nPreconditions:\n```\n(and\n    (holding ?h1 ?s)\n    (handempty ?h2)\n    (contains ?s ?d1)\n    (contains ?s ?d2)\n    (cocktail-part1 ?b ?d1)\n    (cocktail-part2 ?b ?d2)\n    (unshaked ?s)\n)\n```\n\nEffects:\n```\n(and\n    (not (unshaked ?s))\n    (not (contains ?s ?d1))\n    (not (contains ?s ?d2))\n    (shaked ?s)\n    (contains ?s ?b)\n)\n```\n\n---\n", "type": "prompt"}
{"role": "user", "content": "Here are two examples from the storage domain for demonstrating the output format.\n        \nDomain information: Moving and storing crates of goods by hoists from containers to depots with spatial maps. This domain deals with the movement and storage of crates of goods using hoists. It involves different locations like containers and depots, and requires managing the spatial arrangement of crates and hoists in various areas. The actions primarily focus on the lifting, moving, and placement of crates by hoists, considering the spatial and availability constraints of the areas involved.\n\nA list of available predicates\n1. (clear ?s - store_area) ;; the store area is clear\n2. (crate_in ?c - crate ?p - place) ;; the crate is in the place\n3. (store_area_in ?s - store_area ?p - place) ;; the store area is in the place\n4. (available ?h - hoist) ;; the hoist is available\n5. (lifting ?h - hoist ?c - crate) ;; the hoist is lifting the crate\n6. (at ?h - hoist ?a - area) ;; the hoist is at the area\n7. (on ?c - crate ?s - store_area) ;; the crate is on the store area\n8. (connected ?a1 ?a2 - area) ;; the area a1 is connected to the area a2\nExample 1\nAction Description: Involves a hoist lifting a crate from one store_area to another area. Preconditions include the areas being connected, the hoist being at the destination area and available, and the crate being on the source store_area. The effects are the crate being lifted and the source store_area becoming clear.\n\nAction name: lift\n\n\nYour answer:\n---\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:**\nLet's imagine you want to move a toy train (representing the hoist) from one side of your playroom (a store area) to another. Before moving it, you need to make sure of a few things:\n\n1. **The train is actually at the starting point:** Just like you need to know where your train is before you can move it, the action schema checks if the hoist is at the starting store area (`at ?h ?from`). This ensures that we are moving the right hoist from the correct location.\n\n2. **The destination is clear:** Imagine if the place you wanted to move your train to was already full of other toys. You wouldn\u2019t be able to put your train there, right? Similarly, the schema requires the destination store area to be clear (`clear ?to`) so that the hoist can move there without any issues.\n\n3. **The starting and destination points are connected:** It\u2019s like making sure there\u2019s a clear path or a track between where your train is and where you want it to go. If there\u2019s no track, you can't move the train. In the action schema, this is checked by the condition (`connected ?from ?to`).\n\nNow, when the train (hoist) moves:\n- **It is no longer at the starting point:** Just like when your train leaves one side of the room, it\u2019s not there anymore. This change is shown in the schema by removing the condition that the hoist is at the starting area (`not (at ?h ?from)`).\n  \n- **It is now at the destination:** When you move your train to the other side of the room, it\u2019s now there. This is represented in the schema by adding the condition that the hoist is now at the destination area (`at ?h ?to`).\n\n- **The destination is no longer clear:** Now that the train is at the new spot, that area isn\u2019t empty anymore. This change is reflected by removing the 'clear' condition for the destination area (`not (clear ?to)`).\n\n- **The starting point becomes clear:** Since the train left the starting area, that spot is now free. This is captured by adding a 'clear' condition for the starting area (`clear ?from`).\n\nThis whole process helps ensure that the hoist can safely and efficiently move from one area to another without confusion or conflicts.\n                \n**Response:**\nParameters:\n1. ?h - hoist: [short description of the parameter]\n2. ?c - crate: [short description of the parameter]\n3. ?a1 - store_area: [short description of the parameter]\n4. ?a2 - area: [short description of the parameter]\n5. ?p - place: [short description of the parameter]\n\nPreconditions:\n```\n(and\n    (connected ?a1 ?a2)\n    (at ?h ?a2)\n    (available ?h)\n    (on ?c ?a1)\n    (store_area_in ?a1 ?p)\n)\n```\n\nEffects:\n```\n(and\n    (not (on ?c ?a1))\n    (clear ?a1)\n    (not (available ?h))\n    (lifting ?h ?c)\n    (not (crate_in ?c ?p))\n)\n```\n\n---\n", "type": "prompt"}
{"role": "user", "content": "Example 2\nAction Description: This is the reverse of Go-out, where a hoist moves from a transit_area to a store_area. Preconditions include the hoist being at the transit_area, the areas being connected, and the destination store_area being clear. The effect is similar to Go-out but in reverse.\n\nAction name: go-in\n\n\nYour answer:\n---\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:**\n\nImagine you have a small robot hoist that helps move boxes in a big warehouse. The warehouse has different areas, like a spot for loading boxes and another for storing them. The \"go-in\" action is like telling the robot to move from a loading area to a storage area.\n\nNow, why does the robot need certain conditions to be met before it can move? Here's a breakdown:\n\n1. **The robot must be at the loading area** (transit_area): This is pretty straightforward. If the robot isn't at the loading area, it can't start moving towards the storage area because it's simply not there to begin the task.\n\n2. **The loading area and storage area must be connected**: It's like making sure there's a clear path or a road between two places before you start driving. If there's no path, the robot can't move between these areas.\n\n3. **The storage area must be clear**: This ensures that there is space available for the robot to enter and place the boxes. It's similar to needing an empty parking spot to park your car.\n\nNow, what happens after the robot moves based on these conditions?\n\n- **The robot is no longer in the loading area**: Just like when you leave your house, you're not inside anymore. The robot has left the loading area, so we say it's no longer there.\n  \n- **The robot is now in the storage area**: Like arriving at a friend\u2019s house after leaving yours, the robot has moved and is now at the storage destination.\n\n- **The storage area is no longer clear**: Since the robot moves in with a box, the space it occupied is now taken. It's like the parking space being occupied once you park your car.\n\nIn summary, these conditions and results make sure the robot moves safely and efficiently from one place to another, without any surprises like arriving at a blocked or non-existent path, or finding no space to drop off the box. This careful planning helps keep everything in the warehouse running smoothly!\n                \n**Response:**\nParameters:\n1. ?h - hoist: [short description of the parameter]\n2. ?from - transit_area: [short description of the parameter]\n3. ?to - store_area: [short description of the parameter]\n\nPreconditions:\n```\n(and\n    (at ?h ?from)\n    (connected ?from ?to)\n    (clear ?to)\n)\n```\n\nEffects:\n```\n(and\n    (not (at ?h ?from))\n    (at ?h ?to)\n    (not (clear ?to))\n)\n```\n\n---\n", "type": "prompt"}
{"role": "user", "content": "Question: Here is the task.\nA natural language description of the domain\nDomain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.\n\nA list of available predicates\n1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf\n2. (on-table ?x - book) ;; ?x is on the table\n3. (accessible ?x - book) ;; ?x is accessible (not covered)\n4. (hands-free) ;; The hands of the librarian are free\n5. (holding ?x - book) ;; The librarian is holding ?x\n6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat\n7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty\n8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full\n9. (book-request ?book - book) ;; There is a request for book ?book\n10. (return-due ?book - book) ;; Book ?book is due for return\n11. (checked-out ?book - book) ;; Book ?book is checked out\n\nAction Description: Envision a librarian assisting a patron who wishes to borrow a book. The 'check-out' action allows the librarian to mark a book as checked out, provided it is accessible and not already checked out. This action reflects the process of recording the book's status as borrowed and setting a return due date.\n\nAction name: check-out\n\n\nYour answer:\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:**\n\nIn the context of a library, the \"check-out\" action is a fundamental part of the borrowing process. It involves a librarian marking a book as borrowed by a patron. For this action to occur, certain conditions must be met, and certain changes must result from the action.\n\nThe conditions that must be true before the librarian can check out a book are:\n\n1. The book must be **accessible**: This means the book is not covered by another book or otherwise obscured, making it easy for the librarian to retrieve and check out.\n\n2. The book must not be **checked out** already: This ensures that the book is available for borrowing and that there are no conflicts with another patron who may have already borrowed it.\n\nOnce these preconditions are met, the librarian can perform the check-out action, which results in the following changes:\n\n1. The book is no longer just accessible; it is now **checked out**: This reflects the change in the book's status from available to borrowed.\n\n2. The book now has a **return due date**: This is an implicit effect of checking out the book, as part of the library's process for managing returns.\n\nThe action schema for \"check-out\" does not explicitly include an effect for setting a return due date, as this would typically be handled by a separate process or action in a real-world library system. However, for the sake of completeness in our PDDL model, we could assume that the due date is set as a side effect of the check-out action.\n\n**Response:**\nParameters:\n1. ?book - book: [The book to be checked out]\n\nPreconditions:\n```\n(and\n    (accessible ?book)\n    (not (checked-out ?book))\n)\n```\n\nEffects:\n```\n(and\n    (not (accessible ?book))\n    (checked-out ?book)\n    ;(return-due ?book) ; This would be an effect if we were to include setting the due date in this action.\n)\n```\n\n---", "type": "response", "action": "check-out"}
{"role": "system", "content": "# CONTEXT #\nYou are a tool called PDDL Modeling Assistant. You are a technical experts in constructing Planning Domain Definition Language (PDDL) models via the natural language context.\n# OBJECTIVE #\n* Construct parameters, preconditions and effects based on the domain information, action description and the action name.\n* All variables in the preconditions and effects must be listed in the action's parameters. This restriction helps maintain the action's scope and prevents ambiguity in the planning process.\n* Do not use predicates that are not defined in the available predicates list to construct the preconditions and effects.\n* When the natural language description is ambiguous or certain predicate changes are implied, make reasonable assumptions based on common sense to fill up the implicit predicate in the PDDL action.\n# STYLE #\nFollow the writing style of technical experts. The output can be parsed by a machine, so it is important to follow the structured format.\n# TONE #\nBe precise and concise in constructing the PDDL action. The PDDL action should be clear and unambiguous.\n# AUDIENCE #\nYour audience is someone who is trying to learn how to construct PDDL actions from natural language descriptions.\n# RESPONSE #\nThe response should be in the following format:\n---\n**Explanation:** [Your explanation here]\n\n**Response:**\nParameters:\n1. ?x - [type]: [parameter description]\n2. ...\n\nPreconditions:\n```\n(and\n    ([predicate_1] ?x)\n)\n```\n\nEffects:\n```\n(and\n    (not ([predicate_2] ?x))\n    ([predicate_2] ?x)\n    ...\n)\n```\n---\n", "type": "prompt"}
{"role": "user", "content": "One or two examples from other domains for illustrating the input and output formats.\nHere are two examples from the barman domain for demonstrating the output format.\n        \nDomain information: In this domain there is a robot barman that manipulates drink dispensers, glasses and a shaker. The goal is to find a plan of the robots actions that serves a desired set of drinks. In this domain deletes of actions encode relevant knowledge given that robot hands can only grasp one object at a time and given that glasses need to be empty and clean to be filled.\n\nA list of available predicates\n1. (ontable ?c - container) ;; the container is on the table\n2. (holding ?h - hand ?c - container) ;; the hand is holding the container\n3. (handempty ?h - hand) ;; the hand is empty\n4. (empty ?c - container) ;; the container is empty\n5. (contains ?c - container ?b - beverage) ;; the container contains the beverage\n6. (clean ?c - container) ;; the container is clean\n7. (used ?c - container ?b - beverage) ;; the container is used for the beverage\n8. (dispenses ?d - dispenser ?i - ingredient) ;; the dispenser dispenses the ingredient\n9. (shaker-empty-level ?s - shaker ?l - level) ;; the empty level of the shaker\n10. (shaker-level ?s - shaker ?l - level) ;; the shaker currently is at the level\n11. (next ?l1 ?l2 - level) ;; l2 is the next level after l1\n12. (unshaked ?s - shaker) ;; the shaker is unshaked\n13. (shaked ?s - shaker) ;; the shaker is shaked\n14. (cocktail-part1 ?c - cocktail ?i - ingredient) ;; the ingredient is part of the cocktail\n15. (cocktail-part2 ?c - cocktail ?i - ingredient) ;; the ingredient is part of the cocktail\nExample 1\nAction Description: The robot refills a shot glass with the same ingredient it previously contained.\n\nAction name: refill-shot\n\n\nYour answer:\n---\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:**\nLet's imagine a robot bartender named Robbie. Robbie's job is to make sure everyone gets their favorite drink, using shot glasses and different drink dispensers. Now, think about Robbie having to refill a shot glass with a specific ingredient. To do this smoothly, Robbie has to follow certain steps, and that's what the PDDL action schema is showing us.\n\n1. **Preconditions (The must-haves before starting):**\n   - Robbie must already be holding the shot glass with one hand (`holding ?h1 ?s`). This means Robbie's hand (`?h1`) is not empty because it's holding the shot glass (`?s`).\n   - The other hand (`?h2`) needs to be empty (`handempty ?h2`). This is important because Robbie might need to use this hand to operate the dispenser or do something else during the process.\n   - The dispenser that Robbie is going to use must dispense the ingredient Robbie needs (`dispenses ?d ?i`). This ensures that Robbie is at the right dispenser for the drink.\n   - The shot glass must be empty (`empty ?s`) before Robbie can refill it. We can't pour more into a full glass, right?\n   - The shot glass must have been used previously for the same ingredient (`used ?s ?i`). This tells us that it's okay to use the same glass for the same drink without mixing flavors.\n\n2. **Effects (What happens after Robbie follows the steps):**\n   - The shot glass is no longer empty (`not (empty ?s)`). It means Robbie has successfully refilled it.\n   - The shot glass now contains the ingredient it was supposed to be refilled with (`contains ?s ?i`). Now, the glass is ready to be served again with the same tasty drink.\n\nThis action schema helps Robbie remember exactly what needs to be checked and done to successfully refill a shot glass.\n                \n**Response:**\nParameters:\n1. ?s - shot: [short description of the parameter]\n2. ?i - ingredient: [short description of the parameter]\n3. ?h1 - hand: [short description of the parameter]\n4. ?h2 - hand: [short description of the parameter]\n5. ?d - dispenser: [short description of the parameter]\n\nPreconditions:\n```\n(and\n    (holding ?h1 ?s)\n    (handempty ?h2)\n    (dispenses ?d ?i)\n    (empty ?s)\n    (used ?s ?i)\n)\n```\n\nEffects:\n```\n(and\n    (not (empty ?s))\n    (contains ?s ?i)\n)\n```\n\n---\n", "type": "prompt"}
{"role": "user", "content": "Example 2\nAction Description: The robot fills an empty, clean shot glass with an ingredient from a dispenser.\n\nAction name: fill-shot\n\n\nYour answer:\n---\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:** Imagine our robot barman in a kitchen where it needs to prepare a drink using a shot glass. The robot has two hands and can only use one hand to hold an item at a time. Here\u2019s why the robot needs to follow certain steps, called preconditions, before it can fill the shot glass, which is the goal of the \"fill-shot\" action.\n\nFirstly, the robot must be holding the shot glass with one hand, which we call ?h1. This is important because the robot can only fill something it is holding. The precondition `(holding ?h1 ?s)` ensures that the robot has a good grip on the shot glass before proceeding.\n\nSecondly, the other hand, ?h2, must be empty (`handempty ?h2`). This is because if the hand is already holding something else, the robot wouldn\u2019t be able to operate the dispenser properly or manage other tasks like adding more ingredients if needed.\n\nThe next precondition is that the dispenser identified as ?d must be capable of dispensing the ingredient ?i, as noted in `(dispenses ?d ?i)`. This ensures that the robot is at the right dispenser for the ingredient it needs to fill the shot glass with.\n\nAlso, the shot glass itself must be empty (`empty ?s`) and clean (`clean ?s`) before anything is poured into it. This is common sense, right? You wouldn\u2019t want to drink from a dirty or already filled glass! This makes sure the drink is clean and tastes as expected.\n\nAfter all these conditions are met, the robot can go ahead and fill the shot glass. The effects of this action include a few changes:\n- The shot glass is no longer empty (`not (empty ?s)`), meaning it now contains the ingredient.\n- The shot glass now contains the specific ingredient (`contains ?s ?i`), which is just like saying the glass now has, say, gin in it.\n- The glass is no longer clean (`not (clean ?s)`) because it now has something in it.\n- Lastly, the shot glass is marked as used for that particular ingredient (`used ?s ?i`), which helps the robot remember what has been done with that glass.\n                \n**Response:**\nParameters:\n1. ?s - shot: [short description of the parameter]\n2. ?i - ingredient: [short description of the parameter]\n3. ?h1 - hand: [short description of the parameter]\n4. ?h2 - hand: [short description of the parameter]\n5. ?d - dispenser: [short description of the parameter]\n\nPreconditions:\n```\n(and\n    (holding ?h1 ?s)\n    (handempty ?h2)\n    (dispenses ?d ?i)\n    (empty ?s)\n    (clean ?s)\n)\n```\n\nEffects:\n```\n(and\n    (not (empty ?s))\n    (contains ?s ?i)\n    (not (clean ?s))\n    (used ?s ?i)\n)\n```\n\n---\n", "type": "prompt"}
{"role": "user", "content": "Here are two examples from the storage domain for demonstrating the output format.\n        \nDomain information: Moving and storing crates of goods by hoists from containers to depots with spatial maps. This domain deals with the movement and storage of crates of goods using hoists. It involves different locations like containers and depots, and requires managing the spatial arrangement of crates and hoists in various areas. The actions primarily focus on the lifting, moving, and placement of crates by hoists, considering the spatial and availability constraints of the areas involved.\n\nA list of available predicates\n1. (clear ?s - store_area) ;; the store area is clear\n2. (crate_in ?c - crate ?p - place) ;; the crate is in the place\n3. (store_area_in ?s - store_area ?p - place) ;; the store area is in the place\n4. (available ?h - hoist) ;; the hoist is available\n5. (lifting ?h - hoist ?c - crate) ;; the hoist is lifting the crate\n6. (at ?h - hoist ?a - area) ;; the hoist is at the area\n7. (on ?c - crate ?s - store_area) ;; the crate is on the store area\n8. (connected ?a1 ?a2 - area) ;; the area a1 is connected to the area a2\nExample 1\nAction Description: This is the reverse of Go-out, where a hoist moves from a transit_area to a store_area. Preconditions include the hoist being at the transit_area, the areas being connected, and the destination store_area being clear. The effect is similar to Go-out but in reverse.\n\nAction name: go-in\n\n\nYour answer:\n---\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:**\n\nImagine you have a small robot hoist that helps move boxes in a big warehouse. The warehouse has different areas, like a spot for loading boxes and another for storing them. The \"go-in\" action is like telling the robot to move from a loading area to a storage area.\n\nNow, why does the robot need certain conditions to be met before it can move? Here's a breakdown:\n\n1. **The robot must be at the loading area** (transit_area): This is pretty straightforward. If the robot isn't at the loading area, it can't start moving towards the storage area because it's simply not there to begin the task.\n\n2. **The loading area and storage area must be connected**: It's like making sure there's a clear path or a road between two places before you start driving. If there's no path, the robot can't move between these areas.\n\n3. **The storage area must be clear**: This ensures that there is space available for the robot to enter and place the boxes. It's similar to needing an empty parking spot to park your car.\n\nNow, what happens after the robot moves based on these conditions?\n\n- **The robot is no longer in the loading area**: Just like when you leave your house, you're not inside anymore. The robot has left the loading area, so we say it's no longer there.\n  \n- **The robot is now in the storage area**: Like arriving at a friend\u2019s house after leaving yours, the robot has moved and is now at the storage destination.\n\n- **The storage area is no longer clear**: Since the robot moves in with a box, the space it occupied is now taken. It's like the parking space being occupied once you park your car.\n\nIn summary, these conditions and results make sure the robot moves safely and efficiently from one place to another, without any surprises like arriving at a blocked or non-existent path, or finding no space to drop off the box. This careful planning helps keep everything in the warehouse running smoothly!\n                \n**Response:**\nParameters:\n1. ?h - hoist: [short description of the parameter]\n2. ?c - crate: [short description of the parameter]\n3. ?a1 - store_area: [short description of the parameter]\n4. ?a2 - area: [short description of the parameter]\n5. ?p - place: [short description of the parameter]\n\nPreconditions:\n```\n(and\n    (connected ?a1 ?a2)\n    (at ?h ?a2)\n    (lifting ?h ?c)\n    (clear ?a1)\n    (store_area_in ?a1 ?p)\n)\n```\n\nEffects:\n```\n(and\n    (not (lifting ?h ?c))\n    (available ?h)\n    (not (clear ?a1))\n    (on ?c ?a1)\n    (crate_in ?c ?p)\n)\n```\n\n---\n", "type": "prompt"}
{"role": "user", "content": "Example 2\nAction Description: This action is about a hoist dropping a crate into a store_area from an area. Preconditions are similar to 'Lift' but include the hoist lifting the crate and the destination store_area being clear. The effects involve the hoist becoming available and the crate being placed on the destination store_area.\n\nAction name: drop\n\n\nYour answer:\n---\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:**\nLet's imagine a scenario in a warehouse where a hoist is used to move crates from one area to another, like moving a box of toys from a shelf to a play area. The action we're talking about is called \"drop,\" where the hoist places a crate into a designated storage area.\n\n1. **Preconditions Explained:**\n   - **Connected Areas:** First, the hoist can only drop the crate if the area it\u2019s in (let's call it the play area) is connected to the area where the hoist is currently located (like the shelf area). This means there must be a clear path for the hoist to move the crate to its destination.\n   - **Hoist Location:** The hoist must be in the area adjacent to where the crate needs to go. If our hoist isn't next to the play area, it can't drop the crate there.\n   - **Hoist Lifting the Crate:** Before dropping, the hoist must already be lifting a crate. It's like making sure the hoist has picked up the box of toys before it can put it down.\n   - **Clear Storage Area:** The destination, where the crate will be placed, must be clear of other objects. This ensures there's space to safely place the new crate without stacking or causing a mess.\n   - **Store Area in Place:** The storage area where the crate is to be dropped needs to be part of the larger place being managed. This is like ensuring the play area is actually a part of the designated playroom.\n\n2. **Effects Explained:**\n   - **Hoist No Longer Lifting:** Once the crate is dropped, the hoist is no longer lifting it. This is like putting down the box of toys.\n   - **Hoist Becomes Available:** After dropping off the crate, the hoist is now free to take on other tasks, like picking up another box.\n   - **Storage Area Not Clear Anymore:** Since the crate has been placed there, the storage area is no longer empty.\n   - **Crate on Storage Area:** The crate is now officially in the storage area, like the box of toys now being in the play area.\n   - **Crate Location Updated:** We update the records to show that the crate is now in this new location within the place, which helps in managing space and knowing where everything is.\n\nThis action of dropping a crate involves several steps and conditions that ensure everything happens smoothly and safely, from ensuring there's a path to the hoist being ready and the space being available for the new crate. It's like making sure you have both hands free and a clear spot on the floor before you set down a heavy box.\n                \n**Response:**\nParameters:\n1. ?h - hoist: [short description of the parameter]\n2. ?from - transit_area: [short description of the parameter]\n3. ?to - store_area: [short description of the parameter]\n\nPreconditions:\n```\n(and\n    (at ?h ?from)\n    (connected ?from ?to)\n    (clear ?to)\n)\n```\n\nEffects:\n```\n(and\n    (not (at ?h ?from))\n    (at ?h ?to)\n    (not (clear ?to))\n)\n```\n\n---\n", "type": "prompt"}
{"role": "user", "content": "Question: Here is the task.\nA natural language description of the domain\nDomain information: This domain is structured to allow organizing and managing books within a library setting. The actions and predicates support the movement of books between tables and shelves, ensuring that conditions like accessibility and the librarian's hands being free are met. Additionally, it includes managing book categories, shelf space, and check-out/return processes to reflect a more complex library system.\n\nA list of available predicates\n1. (on-shelf ?x ?y - book) ;; ?x is on top of ?y on the shelf\n2. (on-table ?x - book) ;; ?x is on the table\n3. (accessible ?x - book) ;; ?x is accessible (not covered)\n4. (hands-free) ;; The hands of the librarian are free\n5. (holding ?x - book) ;; The librarian is holding ?x\n6. (belongs-to-category ?x - book ?cat - category) ;; ?x belongs to the category ?cat\n7. (shelf-empty ?cat - category) ;; The shelf for category ?cat is empty\n8. (shelf-overflow ?cat - category) ;; The shelf for category ?cat is full\n9. (book-request ?book - book) ;; There is a request for book ?book\n10. (return-due ?book - book) ;; Book ?book is due for return\n11. (checked-out ?book - book) ;; Book ?book is checked out\n\nAction Description: Imagine a patron returning a borrowed book to the library. The 'return-book' action enables the librarian to process the return, updating the book's status and removing any return due date. This action is applicable when the librarian is holding the book that needs to be returned.\n\nAction name: return-book\n\n\nYour answer:\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:**\nIn the library domain, the \"return-book\" action represents the process of a librarian receiving a book from a patron and updating the book's status in the library system. For this action to occur, certain conditions must be met, and certain changes must result from the action.\n\nThe librarian must be holding the book that is due for return, indicating that the librarian is ready to process it. Once the book is returned, its status in the system should reflect that it is no longer checked out, and it should no longer have a return due date. Additionally, the book may need to be placed back on a shelf or a table, depending on the library's organization system.\n\nHere's a breakdown of the preconditions and effects:\n\n1. **Preconditions:**\n   - The librarian must be holding the book (`holding ?book`), which means the librarian's hands are not free (`not (hands-free)`).\n   - The book must be due for return (`return-due ?book`), indicating that it is currently checked out and needs to be returned.\n\n2. **Effects:**\n   - The book is no longer checked out (`not (checked-out ?book)`), as it has been returned.\n   - The book is no longer due for return (`not (return-due ?book)`), as the return process has been completed.\n   - The librarian's hands are now free (`hands-free`), as the book has been processed and is no longer being held.\n   - Depending on the library's procedures, the book may be placed on a table (`on-table ?book`) or directly onto a shelf. However, since the action description does not specify the final placement, we'll assume it's placed on a table for simplicity.\n\n**Response:**\nParameters:\n1. ?book - book: [The book that is being returned]\n\nPreconditions:\n```\n(and\n    (holding ?book)\n    (return-due ?book)\n)\n```\n\nEffects:\n```\n(and\n    (not (checked-out ?book))\n    (not (return-due ?book))\n    (hands-free)\n    (on-table ?book)\n)\n```\n\n---", "type": "response", "action": "return-book"}
