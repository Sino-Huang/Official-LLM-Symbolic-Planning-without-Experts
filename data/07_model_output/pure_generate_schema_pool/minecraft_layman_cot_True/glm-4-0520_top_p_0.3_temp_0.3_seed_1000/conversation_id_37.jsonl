{"role": "system", "content": "# CONTEXT #\nYou are a tool called PDDL Modeling Assistant. You are a technical experts in constructing Planning Domain Definition Language (PDDL) models via the natural language context.\n# OBJECTIVE #\n* Construct parameters, preconditions and effects based on the domain information, action description and the action name.\n* All variables in the preconditions and effects must be listed in the action's parameters. This restriction helps maintain the action's scope and prevents ambiguity in the planning process.\n* Do not use predicates that are not defined in the available predicates list to construct the preconditions and effects.\n* When the natural language description is ambiguous or certain predicate changes are implied, make reasonable assumptions based on common sense to fill up the implicit predicate in the PDDL action.\n# STYLE #\nFollow the writing style of technical experts. The output can be parsed by a machine, so it is important to follow the structured format.\n# TONE #\nBe precise and concise in constructing the PDDL action. The PDDL action should be clear and unambiguous.\n# AUDIENCE #\nYour audience is someone who is trying to learn how to construct PDDL actions from natural language descriptions.\n# RESPONSE #\nThe response should be in the following format:\n---\n**Explanation:** [Your explanation here]\n\n**Response:**\nParameters:\n1. ?x - [type]: [parameter description]\n2. ...\n\nPreconditions:\n```\n(and\n    ([predicate_1] ?x)\n)\n```\n\nEffects:\n```\n(and\n    (not ([predicate_2] ?x))\n    ([predicate_2] ?x)\n    ...\n)\n```\n---\n", "type": "prompt"}
{"role": "user", "content": "One or two examples from other domains for illustrating the input and output formats.\nHere are two examples from the storage domain for demonstrating the output format.\n        \nDomain information: Moving and storing crates of goods by hoists from containers to depots with spatial maps. This domain deals with the movement and storage of crates of goods using hoists. It involves different locations like containers and depots, and requires managing the spatial arrangement of crates and hoists in various areas. The actions primarily focus on the lifting, moving, and placement of crates by hoists, considering the spatial and availability constraints of the areas involved.\n\nA list of available predicates\n1. (clear ?s - store_area) ;; the store area is clear\n2. (crate_in ?c - crate ?p - place) ;; the crate is in the place\n3. (store_area_in ?s - store_area ?p - place) ;; the store area is in the place\n4. (available ?h - hoist) ;; the hoist is available\n5. (lifting ?h - hoist ?c - crate) ;; the hoist is lifting the crate\n6. (at ?h - hoist ?a - area) ;; the hoist is at the area\n7. (on ?c - crate ?s - store_area) ;; the crate is on the store area\n8. (connected ?a1 ?a2 - area) ;; the area a1 is connected to the area a2\nExample 1\nAction Description: This is the reverse of Go-out, where a hoist moves from a transit_area to a store_area. Preconditions include the hoist being at the transit_area, the areas being connected, and the destination store_area being clear. The effect is similar to Go-out but in reverse.\n\nAction name: go-in\n\n\nYour answer:\n---\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:**\n\nImagine you have a small robot hoist that helps move boxes in a big warehouse. The warehouse has different areas, like a spot for loading boxes and another for storing them. The \"go-in\" action is like telling the robot to move from a loading area to a storage area.\n\nNow, why does the robot need certain conditions to be met before it can move? Here's a breakdown:\n\n1. **The robot must be at the loading area** (transit_area): This is pretty straightforward. If the robot isn't at the loading area, it can't start moving towards the storage area because it's simply not there to begin the task.\n\n2. **The loading area and storage area must be connected**: It's like making sure there's a clear path or a road between two places before you start driving. If there's no path, the robot can't move between these areas.\n\n3. **The storage area must be clear**: This ensures that there is space available for the robot to enter and place the boxes. It's similar to needing an empty parking spot to park your car.\n\nNow, what happens after the robot moves based on these conditions?\n\n- **The robot is no longer in the loading area**: Just like when you leave your house, you're not inside anymore. The robot has left the loading area, so we say it's no longer there.\n  \n- **The robot is now in the storage area**: Like arriving at a friend\u2019s house after leaving yours, the robot has moved and is now at the storage destination.\n\n- **The storage area is no longer clear**: Since the robot moves in with a box, the space it occupied is now taken. It's like the parking space being occupied once you park your car.\n\nIn summary, these conditions and results make sure the robot moves safely and efficiently from one place to another, without any surprises like arriving at a blocked or non-existent path, or finding no space to drop off the box. This careful planning helps keep everything in the warehouse running smoothly!\n                \n**Response:**\nParameters:\n1. ?h - hoist: [short description of the parameter]\n2. ?from - store_area: [short description of the parameter]\n3. ?to - store_area: [short description of the parameter]\n\nPreconditions:\n```\n(and\n    (at ?h ?from)\n    (clear ?to)\n    (connected ?from ?to)\n)\n```\n\nEffects:\n```\n(and\n    (not (at ?h ?from))\n    (at ?h ?to)\n    (not (clear ?to))\n    (clear ?from)\n)\n```\n\n---\n", "type": "prompt"}
{"role": "user", "content": "Example 2\nAction Description: Moves a hoist from one store_area to another. Preconditions include the hoist being at the source store_area, the destination store_area being clear, and the areas being connected. The effect is the hoist moving to the destination and the change in clarity status of both store areas.\n\nAction name: move\n\n\nYour answer:\n---\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:**\n\nLet's imagine a scenario where you need to move a toy truck from one corner of a room to another. This toy truck represents the hoist, and the corners of the room are like different storage areas in our description.\n\n1. **Preconditions:**\n   - **Hoist is at the source area (at ?h ?from):** This condition makes sure that the hoist is actually at the starting point (like making sure your toy truck is really in the corner where you want to start moving it from). This is necessary because you can't move something from a place it isn't already at.\n   - **Destination area is clear (clear ?to):** This is like making sure that the corner you want to move your toy truck to doesn\u2019t have any obstacles or other toys in the way. The space needs to be clear so the hoist can move in without any issues.\n   - **Areas are connected (connected ?from ?to):** This checks if there is a direct path from the starting point to the destination, similar to making sure there's a clear path on the floor between the two corners of the room for the toy truck to travel without hitting a wall or furniture.\n\n2. **Effects:**\n   - **Hoist moves to the destination (at ?h ?to):** This is like saying your toy truck is now in the new corner of the room.\n   - **Hoist is no longer at the source (not (at ?h ?from)):** Just like your toy truck can't be in two places at once, when the hoist moves to the new area, it's no longer in the original area.\n   - **Destination area is no longer clear (not (clear ?to)):** Now that the hoist (or your toy truck) is in the new corner, that corner isn't empty anymore.\n   - **Source area becomes clear (clear ?from):** Since the hoist has moved away from the original area, that area is now free of obstacles or the hoist itself.\n\nSo, in simple terms, this action is like moving a toy from one clear, connected corner of the room to another. Before you move it, you need to check that it\u2019s starting in the right place, that there\u2019s no blockage where it\u2019s going, and that it can directly reach there. Once moved, the toy truck\u2019s old spot becomes empty, and its new spot is now occupied by it.\n                \n**Response:**\nParameters:\n1. ?h - hoist: [short description of the parameter]\n2. ?from - transit_area: [short description of the parameter]\n3. ?to - store_area: [short description of the parameter]\n\nPreconditions:\n```\n(and\n    (at ?h ?from)\n    (connected ?from ?to)\n    (clear ?to)\n)\n```\n\nEffects:\n```\n(and\n    (not (at ?h ?from))\n    (at ?h ?to)\n    (not (clear ?to))\n)\n```\n\n---\n", "type": "prompt"}
{"role": "user", "content": "Here are two examples from the doors domain for demonstrating the output format.\n        \nDomain information: This domain is structured to allow navigation and interaction within a space comprising rooms, locations, and doors that can be unlocked with keys. The actions and predicates support movement between locations and the unlocking of rooms.\n\nA list of available predicates\n1. (at ?loc - location) ;; agent is at loc location\n2. (unlocked ?room - room) ;; the room is unlocked\n3. (loc_in_room ?loc - location ?room - room) ;; the location is in the room\n4. (key_at ?key - key ?loc - location) ;; the key is at loc location\n5. (key_for_room ?key - key ?room - room) ;; the key is for the room\nExample 1\nAction Description: The action is like embarking on a small journey from one place to another within a confined space. Imagine you're in a large house with multiple rooms. You're currently in one location, let's say the living room (your starting location). You decide to move to another spot, maybe the kitchen (your ending location). However, there's a catch. The kitchen is behind a door that needs to be unlocked (ending room). So, this action can only happen if the kitchen door is already unlocked. Once you move, you're no longer in the living room but now standing in the kitchen, contemplating what to cook!\n\nAction name: move_to\n\n\nYour answer:\n---\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:**\nImagine you're playing a game where you need to explore different rooms by finding keys that unlock them, much like a treasure hunt. The action called \"pick\" in this game allows you to pick up a key from a specific location so you can unlock a room.\n\nHere\u2019s why the action schema matches your description:\n1. **Parameters**: You have parameters like `?loc` (where the key is found), `?key` (the key you find), and `?room` (the room that the key opens). These parameters help define what the action involves\u2014picking up a key at a location that unlocks a specific room.\n\n2. **Preconditions**:\n   - `(at ?loc)`: This means that you, the player, must be at the same location as the key. It ensures you are in the right place to pick it up, like being in the hallway where the key is on the table.\n   - `(key_at ?key ?loc)`: This ensures that the key you need is indeed at your location. It checks that the key is actually there before you can pick it up.\n   - `(key_for_room ?key ?room)`: This confirms that the key you are about to pick up is the correct one for unlocking the specific room you want to enter, like the attic.\n\n3. **Effects**:\n   - `(not (key_at ?key ?loc))`: Once you pick up the key, it's no longer lying there at the location. This effect updates the game state to show the key has been moved\u2014it's now with you.\n   - `(unlocked ?room)`: The action of picking up the key leads to the room being unlocked. Now, you can enter the room you wanted, such as the attic, which was previously locked.\n\nBy combining these elements, the action of \"pick\" logically lets you find a key and use it to access new areas in the game, opening up more adventures\u2014just like in the story of finding a key to unlock the attic.\n                \n**Response:**\nParameters:\n1. ?sloc - location: [short description of the parameter]\n2. ?eloc - location: [short description of the parameter]\n3. ?eroom - room: [short description of the parameter]\n\nPreconditions:\n```\n(and\n    (at ?sloc)\n    (unlocked ?eroom)\n    (loc_in_room ?eloc ?eroom)\n)\n```\n\nEffects:\n```\n(and\n    (not (at ?sloc))\n    (at ?eloc)\n)\n```\n\n---\n", "type": "prompt"}
{"role": "user", "content": "Example 2\nAction Description: This one is akin to a classic scene in adventure games where you find a key and use it to unlock new areas. Picture yourself in the same house. You find a key lying on a table in the hallway (the key's location). This isn't just any key; it's special because it opens the door to the mysterious attic (the room the key unlocks). By picking up this key, you perform the action. The moment you have the key in your hand, the attic is no longer inaccessible. It's as if the key magically signals the attic door to unlock, waiting for you to discover its secrets.\n\nAction name: pick\n\n\nYour answer:\n---\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:**\nImagine you're playing a game where you're exploring different rooms and finding keys that can unlock new areas. The action called \"pick\" in this game lets you pick up a key that's in the same location as you, which then unlocks a room that the key is meant for. Let's break down how this works in simple terms.\n\nFirst, you need to be in the same location as the key. That's like being in a hallway where you see a key on a table. The action requires that you are right there with the key, which makes sense, right? You can't pick up a key from another room!\n\nNext, the key you find has to be the right one for a specific room. It\u2019s like having a label on the key saying \"this key is for the attic,\" ensuring that you don't try to use a kitchen key to open the attic.\n\nNow, when you pick up the key, the game checks two important things before letting you pick it up:\n1. **You are at the key's location**: You have to be right there where the key is.\n2. **The key is for the room you want to unlock**: This makes sure the key matches the room you\u2019re trying to access.\n\nOnce these conditions are met, and you pick up the key, two things happen:\n1. **The key is no longer at its original location**: Just like in real life, once you pick something up, it's not there anymore.\n2. **The room unlocks**: It\u2019s like the key told the door, \"Hey, open up!\" and now you can go into the attic and explore.\n\nThis action, \"pick,\" neatly connects your action of picking up the key with the effect of unlocking a new room, making the game or the story you're in feel real and connected. The conditions you meet before picking up the key ensure that everything makes sense and flows logically, just like in real life when you need the right key to open a specific door.\n                \n**Response:**\nParameters:\n1. ?loc - location: [short description of the parameter]\n2. ?key - key: [short description of the parameter]\n3. ?room - room: [short description of the parameter]\n\nPreconditions:\n```\n(and\n    (at ?loc)\n    (key_at ?key ?loc)\n    (key_for_room ?key ?room)\n)\n```\n\nEffects:\n```\n(and\n    (not (key_at ?key ?loc))\n    (unlocked ?room)\n)\n```\n\n---\n", "type": "prompt"}
{"role": "user", "content": "Question: Here is the task.\nA natural language description of the domain\nDomain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.\n\nA list of available predicates\n1. (is_grass ?arg0 - moveable) ;; the object is grass\n2. (is_log ?arg0 - moveable) ;; the object is a log\n3. (is_planks ?arg0 - moveable) ;; the object is a plank\n4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location\n5. (agent_at ?arg0 - static) ;; the agent is at a location\n6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory\n7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical\n8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object\n9. (handsfree ?arg0 - agent) ;; the agent has empty hands\n\nAction Description: equip var0 from inventory and thus agent var1 has something in his hand \n\nAction name: equip\n\n\nYour answer:\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:**\nIn this simplified Minecraft-like environment, the action \"equip\" represents the process of taking an item from your inventory and holding it in your hand, making it ready for use. To perform this action, there are a few key things that must be true before you can equip an item:\n\n1. **The item must be in your inventory**: You can't equip an item that you don't have with you. This is like checking your backpack to make sure you have the item before you try to use it.\n\n2. **The agent (player) must have empty hands**: If your hands are already full, you can't equip another item until you put down or use what you're currently holding.\n\nAfter the action is performed, the item that was in your inventory is now in your hand, which means your hands are no longer free, and the item is no longer just sitting in your inventory\u2014it's ready to be used.\n\n**Response:**\nParameters:\n1. ?item - moveable: [The item to be equipped]\n2. ?agent - agent: [The agent performing the action]\n\nPreconditions:\n```\n(and\n    (inventory ?item)\n    (handsfree ?agent)\n)\n```\n\nEffects:\n```\n(and\n    (not (inventory ?item))\n    (equipped ?item ?agent)\n    (not (handsfree ?agent))\n)\n```\n\n---", "type": "response", "action": "equip"}
{"role": "system", "content": "# CONTEXT #\nYou are a tool called PDDL Modeling Assistant. You are a technical experts in constructing Planning Domain Definition Language (PDDL) models via the natural language context.\n# OBJECTIVE #\n* Construct parameters, preconditions and effects based on the domain information, action description and the action name.\n* All variables in the preconditions and effects must be listed in the action's parameters. This restriction helps maintain the action's scope and prevents ambiguity in the planning process.\n* Do not use predicates that are not defined in the available predicates list to construct the preconditions and effects.\n* When the natural language description is ambiguous or certain predicate changes are implied, make reasonable assumptions based on common sense to fill up the implicit predicate in the PDDL action.\n# STYLE #\nFollow the writing style of technical experts. The output can be parsed by a machine, so it is important to follow the structured format.\n# TONE #\nBe precise and concise in constructing the PDDL action. The PDDL action should be clear and unambiguous.\n# AUDIENCE #\nYour audience is someone who is trying to learn how to construct PDDL actions from natural language descriptions.\n# RESPONSE #\nThe response should be in the following format:\n---\n**Explanation:** [Your explanation here]\n\n**Response:**\nParameters:\n1. ?x - [type]: [parameter description]\n2. ...\n\nPreconditions:\n```\n(and\n    ([predicate_1] ?x)\n)\n```\n\nEffects:\n```\n(and\n    (not ([predicate_2] ?x))\n    ([predicate_2] ?x)\n    ...\n)\n```\n---\n", "type": "prompt"}
{"role": "user", "content": "One or two examples from other domains for illustrating the input and output formats.\nHere are two examples from the storage domain for demonstrating the output format.\n        \nDomain information: Moving and storing crates of goods by hoists from containers to depots with spatial maps. This domain deals with the movement and storage of crates of goods using hoists. It involves different locations like containers and depots, and requires managing the spatial arrangement of crates and hoists in various areas. The actions primarily focus on the lifting, moving, and placement of crates by hoists, considering the spatial and availability constraints of the areas involved.\n\nA list of available predicates\n1. (clear ?s - store_area) ;; the store area is clear\n2. (crate_in ?c - crate ?p - place) ;; the crate is in the place\n3. (store_area_in ?s - store_area ?p - place) ;; the store area is in the place\n4. (available ?h - hoist) ;; the hoist is available\n5. (lifting ?h - hoist ?c - crate) ;; the hoist is lifting the crate\n6. (at ?h - hoist ?a - area) ;; the hoist is at the area\n7. (on ?c - crate ?s - store_area) ;; the crate is on the store area\n8. (connected ?a1 ?a2 - area) ;; the area a1 is connected to the area a2\nExample 1\nAction Description: This action is about a hoist dropping a crate into a store_area from an area. Preconditions are similar to 'Lift' but include the hoist lifting the crate and the destination store_area being clear. The effects involve the hoist becoming available and the crate being placed on the destination store_area.\n\nAction name: drop\n\n\nYour answer:\n---\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:**\nLet's imagine a scenario in a warehouse where a hoist is used to move crates from one area to another, like moving a box of toys from a shelf to a play area. The action we're talking about is called \"drop,\" where the hoist places a crate into a designated storage area.\n\n1. **Preconditions Explained:**\n   - **Connected Areas:** First, the hoist can only drop the crate if the area it\u2019s in (let's call it the play area) is connected to the area where the hoist is currently located (like the shelf area). This means there must be a clear path for the hoist to move the crate to its destination.\n   - **Hoist Location:** The hoist must be in the area adjacent to where the crate needs to go. If our hoist isn't next to the play area, it can't drop the crate there.\n   - **Hoist Lifting the Crate:** Before dropping, the hoist must already be lifting a crate. It's like making sure the hoist has picked up the box of toys before it can put it down.\n   - **Clear Storage Area:** The destination, where the crate will be placed, must be clear of other objects. This ensures there's space to safely place the new crate without stacking or causing a mess.\n   - **Store Area in Place:** The storage area where the crate is to be dropped needs to be part of the larger place being managed. This is like ensuring the play area is actually a part of the designated playroom.\n\n2. **Effects Explained:**\n   - **Hoist No Longer Lifting:** Once the crate is dropped, the hoist is no longer lifting it. This is like putting down the box of toys.\n   - **Hoist Becomes Available:** After dropping off the crate, the hoist is now free to take on other tasks, like picking up another box.\n   - **Storage Area Not Clear Anymore:** Since the crate has been placed there, the storage area is no longer empty.\n   - **Crate on Storage Area:** The crate is now officially in the storage area, like the box of toys now being in the play area.\n   - **Crate Location Updated:** We update the records to show that the crate is now in this new location within the place, which helps in managing space and knowing where everything is.\n\nThis action of dropping a crate involves several steps and conditions that ensure everything happens smoothly and safely, from ensuring there's a path to the hoist being ready and the space being available for the new crate. It's like making sure you have both hands free and a clear spot on the floor before you set down a heavy box.\n                \n**Response:**\nParameters:\n1. ?h - hoist: [short description of the parameter]\n2. ?c - crate: [short description of the parameter]\n3. ?a1 - store_area: [short description of the parameter]\n4. ?a2 - area: [short description of the parameter]\n5. ?p - place: [short description of the parameter]\n\nPreconditions:\n```\n(and\n    (connected ?a1 ?a2)\n    (at ?h ?a2)\n    (available ?h)\n    (on ?c ?a1)\n    (store_area_in ?a1 ?p)\n)\n```\n\nEffects:\n```\n(and\n    (not (on ?c ?a1))\n    (clear ?a1)\n    (not (available ?h))\n    (lifting ?h ?c)\n    (not (crate_in ?c ?p))\n)\n```\n\n---\n", "type": "prompt"}
{"role": "user", "content": "Example 2\nAction Description: Involves a hoist lifting a crate from one store_area to another area. Preconditions include the areas being connected, the hoist being at the destination area and available, and the crate being on the source store_area. The effects are the crate being lifted and the source store_area becoming clear.\n\nAction name: lift\n\n\nYour answer:\n---\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:**\nLet's imagine you want to move a toy train (representing the hoist) from one side of your playroom (a store area) to another. Before moving it, you need to make sure of a few things:\n\n1. **The train is actually at the starting point:** Just like you need to know where your train is before you can move it, the action schema checks if the hoist is at the starting store area (`at ?h ?from`). This ensures that we are moving the right hoist from the correct location.\n\n2. **The destination is clear:** Imagine if the place you wanted to move your train to was already full of other toys. You wouldn\u2019t be able to put your train there, right? Similarly, the schema requires the destination store area to be clear (`clear ?to`) so that the hoist can move there without any issues.\n\n3. **The starting and destination points are connected:** It\u2019s like making sure there\u2019s a clear path or a track between where your train is and where you want it to go. If there\u2019s no track, you can't move the train. In the action schema, this is checked by the condition (`connected ?from ?to`).\n\nNow, when the train (hoist) moves:\n- **It is no longer at the starting point:** Just like when your train leaves one side of the room, it\u2019s not there anymore. This change is shown in the schema by removing the condition that the hoist is at the starting area (`not (at ?h ?from)`).\n  \n- **It is now at the destination:** When you move your train to the other side of the room, it\u2019s now there. This is represented in the schema by adding the condition that the hoist is now at the destination area (`at ?h ?to`).\n\n- **The destination is no longer clear:** Now that the train is at the new spot, that area isn\u2019t empty anymore. This change is reflected by removing the 'clear' condition for the destination area (`not (clear ?to)`).\n\n- **The starting point becomes clear:** Since the train left the starting area, that spot is now free. This is captured by adding a 'clear' condition for the starting area (`clear ?from`).\n\nThis whole process helps ensure that the hoist can safely and efficiently move from one area to another without confusion or conflicts.\n                \n**Response:**\nParameters:\n1. ?h - hoist: [short description of the parameter]\n2. ?c - crate: [short description of the parameter]\n3. ?a1 - store_area: [short description of the parameter]\n4. ?a2 - area: [short description of the parameter]\n5. ?p - place: [short description of the parameter]\n\nPreconditions:\n```\n(and\n    (connected ?a1 ?a2)\n    (at ?h ?a2)\n    (lifting ?h ?c)\n    (clear ?a1)\n    (store_area_in ?a1 ?p)\n)\n```\n\nEffects:\n```\n(and\n    (not (lifting ?h ?c))\n    (available ?h)\n    (not (clear ?a1))\n    (on ?c ?a1)\n    (crate_in ?c ?p)\n)\n```\n\n---\n", "type": "prompt"}
{"role": "user", "content": "Here are two examples from the doors domain for demonstrating the output format.\n        \nDomain information: This domain is structured to allow navigation and interaction within a space comprising rooms, locations, and doors that can be unlocked with keys. The actions and predicates support movement between locations and the unlocking of rooms.\n\nA list of available predicates\n1. (at ?loc - location) ;; agent is at loc location\n2. (unlocked ?room - room) ;; the room is unlocked\n3. (loc_in_room ?loc - location ?room - room) ;; the location is in the room\n4. (key_at ?key - key ?loc - location) ;; the key is at loc location\n5. (key_for_room ?key - key ?room - room) ;; the key is for the room\nExample 1\nAction Description: The action is like embarking on a small journey from one place to another within a confined space. Imagine you're in a large house with multiple rooms. You're currently in one location, let's say the living room (your starting location). You decide to move to another spot, maybe the kitchen (your ending location). However, there's a catch. The kitchen is behind a door that needs to be unlocked (ending room). So, this action can only happen if the kitchen door is already unlocked. Once you move, you're no longer in the living room but now standing in the kitchen, contemplating what to cook!\n\nAction name: move_to\n\n\nYour answer:\n---\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:**\nImagine you're playing a game where you need to explore different rooms by finding keys that unlock them, much like a treasure hunt. The action called \"pick\" in this game allows you to pick up a key from a specific location so you can unlock a room.\n\nHere\u2019s why the action schema matches your description:\n1. **Parameters**: You have parameters like `?loc` (where the key is found), `?key` (the key you find), and `?room` (the room that the key opens). These parameters help define what the action involves\u2014picking up a key at a location that unlocks a specific room.\n\n2. **Preconditions**:\n   - `(at ?loc)`: This means that you, the player, must be at the same location as the key. It ensures you are in the right place to pick it up, like being in the hallway where the key is on the table.\n   - `(key_at ?key ?loc)`: This ensures that the key you need is indeed at your location. It checks that the key is actually there before you can pick it up.\n   - `(key_for_room ?key ?room)`: This confirms that the key you are about to pick up is the correct one for unlocking the specific room you want to enter, like the attic.\n\n3. **Effects**:\n   - `(not (key_at ?key ?loc))`: Once you pick up the key, it's no longer lying there at the location. This effect updates the game state to show the key has been moved\u2014it's now with you.\n   - `(unlocked ?room)`: The action of picking up the key leads to the room being unlocked. Now, you can enter the room you wanted, such as the attic, which was previously locked.\n\nBy combining these elements, the action of \"pick\" logically lets you find a key and use it to access new areas in the game, opening up more adventures\u2014just like in the story of finding a key to unlock the attic.\n                \n**Response:**\nParameters:\n1. ?sloc - location: [short description of the parameter]\n2. ?eloc - location: [short description of the parameter]\n3. ?eroom - room: [short description of the parameter]\n\nPreconditions:\n```\n(and\n    (at ?sloc)\n    (unlocked ?eroom)\n    (loc_in_room ?eloc ?eroom)\n)\n```\n\nEffects:\n```\n(and\n    (not (at ?sloc))\n    (at ?eloc)\n)\n```\n\n---\n", "type": "prompt"}
{"role": "user", "content": "Example 2\nAction Description: This one is akin to a classic scene in adventure games where you find a key and use it to unlock new areas. Picture yourself in the same house. You find a key lying on a table in the hallway (the key's location). This isn't just any key; it's special because it opens the door to the mysterious attic (the room the key unlocks). By picking up this key, you perform the action. The moment you have the key in your hand, the attic is no longer inaccessible. It's as if the key magically signals the attic door to unlock, waiting for you to discover its secrets.\n\nAction name: pick\n\n\nYour answer:\n---\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:**\nImagine you're playing a game where you're exploring different rooms and finding keys that can unlock new areas. The action called \"pick\" in this game lets you pick up a key that's in the same location as you, which then unlocks a room that the key is meant for. Let's break down how this works in simple terms.\n\nFirst, you need to be in the same location as the key. That's like being in a hallway where you see a key on a table. The action requires that you are right there with the key, which makes sense, right? You can't pick up a key from another room!\n\nNext, the key you find has to be the right one for a specific room. It\u2019s like having a label on the key saying \"this key is for the attic,\" ensuring that you don't try to use a kitchen key to open the attic.\n\nNow, when you pick up the key, the game checks two important things before letting you pick it up:\n1. **You are at the key's location**: You have to be right there where the key is.\n2. **The key is for the room you want to unlock**: This makes sure the key matches the room you\u2019re trying to access.\n\nOnce these conditions are met, and you pick up the key, two things happen:\n1. **The key is no longer at its original location**: Just like in real life, once you pick something up, it's not there anymore.\n2. **The room unlocks**: It\u2019s like the key told the door, \"Hey, open up!\" and now you can go into the attic and explore.\n\nThis action, \"pick,\" neatly connects your action of picking up the key with the effect of unlocking a new room, making the game or the story you're in feel real and connected. The conditions you meet before picking up the key ensure that everything makes sense and flows logically, just like in real life when you need the right key to open a specific door.\n                \n**Response:**\nParameters:\n1. ?loc - location: [short description of the parameter]\n2. ?key - key: [short description of the parameter]\n3. ?room - room: [short description of the parameter]\n\nPreconditions:\n```\n(and\n    (at ?loc)\n    (key_at ?key ?loc)\n    (key_for_room ?key ?room)\n)\n```\n\nEffects:\n```\n(and\n    (not (key_at ?key ?loc))\n    (unlocked ?room)\n)\n```\n\n---\n", "type": "prompt"}
{"role": "user", "content": "Question: Here is the task.\nA natural language description of the domain\nDomain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.\n\nA list of available predicates\n1. (is_grass ?arg0 - moveable) ;; the object is grass\n2. (is_log ?arg0 - moveable) ;; the object is a log\n3. (is_planks ?arg0 - moveable) ;; the object is a plank\n4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location\n5. (agent_at ?arg0 - static) ;; the agent is at a location\n6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory\n7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical\n8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object\n9. (handsfree ?arg0 - agent) ;; the agent has empty hands\n\nAction Description: put a moveable back to inventory\n\nAction name: recall\n\n\nYour answer:\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:**\nIn a Minecraft-like environment, the action \"recall\" would involve taking an item that the agent is currently holding or has placed somewhere and putting it back into their inventory. This action would be useful for managing items when the agent wants to free up their hands or organize their inventory.\n\nFor this action to occur, certain conditions must be met:\n1. The item must be a moveable object, which means it can be picked up and placed into inventory.\n2. The item must either be in the agent's hands or at a location where the agent can access it.\n\nOnce the item is recalled, the following changes should take place:\n1. The item should no longer be in the agent's hands if it was equipped, allowing the agent to have handsfree to perform other actions.\n2. The item should no longer be at a location if it was placed there, as it is now back in the inventory.\n3. The item should be in the agent's inventory, ready to be used or moved again.\n\n**Response:**\nParameters:\n1. ?item - moveable: [The item to be placed back into the inventory]\n2. ?loc - static: [The location where the item is placed or where the agent is if the item is equipped]\n3. ?agent - agent: [The agent performing the action]\n\nPreconditions:\n```\n(and\n    (or\n        (equipped ?item ?agent)\n        (at ?item ?loc)\n    )\n    (agent_at ?loc)\n)\n```\n\nEffects:\n```\n(and\n    (not (equipped ?item ?agent))\n    (not (at ?item ?loc))\n    (inventory ?item)\n    (handsfree ?agent)\n)\n```\n\n---", "type": "response", "action": "recall"}
{"role": "system", "content": "# CONTEXT #\nYou are a tool called PDDL Modeling Assistant. You are a technical experts in constructing Planning Domain Definition Language (PDDL) models via the natural language context.\n# OBJECTIVE #\n* Construct parameters, preconditions and effects based on the domain information, action description and the action name.\n* All variables in the preconditions and effects must be listed in the action's parameters. This restriction helps maintain the action's scope and prevents ambiguity in the planning process.\n* Do not use predicates that are not defined in the available predicates list to construct the preconditions and effects.\n* When the natural language description is ambiguous or certain predicate changes are implied, make reasonable assumptions based on common sense to fill up the implicit predicate in the PDDL action.\n# STYLE #\nFollow the writing style of technical experts. The output can be parsed by a machine, so it is important to follow the structured format.\n# TONE #\nBe precise and concise in constructing the PDDL action. The PDDL action should be clear and unambiguous.\n# AUDIENCE #\nYour audience is someone who is trying to learn how to construct PDDL actions from natural language descriptions.\n# RESPONSE #\nThe response should be in the following format:\n---\n**Explanation:** [Your explanation here]\n\n**Response:**\nParameters:\n1. ?x - [type]: [parameter description]\n2. ...\n\nPreconditions:\n```\n(and\n    ([predicate_1] ?x)\n)\n```\n\nEffects:\n```\n(and\n    (not ([predicate_2] ?x))\n    ([predicate_2] ?x)\n    ...\n)\n```\n---\n", "type": "prompt"}
{"role": "user", "content": "One or two examples from other domains for illustrating the input and output formats.\nHere are two examples from the storage domain for demonstrating the output format.\n        \nDomain information: Moving and storing crates of goods by hoists from containers to depots with spatial maps. This domain deals with the movement and storage of crates of goods using hoists. It involves different locations like containers and depots, and requires managing the spatial arrangement of crates and hoists in various areas. The actions primarily focus on the lifting, moving, and placement of crates by hoists, considering the spatial and availability constraints of the areas involved.\n\nA list of available predicates\n1. (clear ?s - store_area) ;; the store area is clear\n2. (crate_in ?c - crate ?p - place) ;; the crate is in the place\n3. (store_area_in ?s - store_area ?p - place) ;; the store area is in the place\n4. (available ?h - hoist) ;; the hoist is available\n5. (lifting ?h - hoist ?c - crate) ;; the hoist is lifting the crate\n6. (at ?h - hoist ?a - area) ;; the hoist is at the area\n7. (on ?c - crate ?s - store_area) ;; the crate is on the store area\n8. (connected ?a1 ?a2 - area) ;; the area a1 is connected to the area a2\nExample 1\nAction Description: Involves a hoist lifting a crate from one store_area to another area. Preconditions include the areas being connected, the hoist being at the destination area and available, and the crate being on the source store_area. The effects are the crate being lifted and the source store_area becoming clear.\n\nAction name: lift\n\n\nYour answer:\n---\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:**\nLet's imagine you want to move a toy train (representing the hoist) from one side of your playroom (a store area) to another. Before moving it, you need to make sure of a few things:\n\n1. **The train is actually at the starting point:** Just like you need to know where your train is before you can move it, the action schema checks if the hoist is at the starting store area (`at ?h ?from`). This ensures that we are moving the right hoist from the correct location.\n\n2. **The destination is clear:** Imagine if the place you wanted to move your train to was already full of other toys. You wouldn\u2019t be able to put your train there, right? Similarly, the schema requires the destination store area to be clear (`clear ?to`) so that the hoist can move there without any issues.\n\n3. **The starting and destination points are connected:** It\u2019s like making sure there\u2019s a clear path or a track between where your train is and where you want it to go. If there\u2019s no track, you can't move the train. In the action schema, this is checked by the condition (`connected ?from ?to`).\n\nNow, when the train (hoist) moves:\n- **It is no longer at the starting point:** Just like when your train leaves one side of the room, it\u2019s not there anymore. This change is shown in the schema by removing the condition that the hoist is at the starting area (`not (at ?h ?from)`).\n  \n- **It is now at the destination:** When you move your train to the other side of the room, it\u2019s now there. This is represented in the schema by adding the condition that the hoist is now at the destination area (`at ?h ?to`).\n\n- **The destination is no longer clear:** Now that the train is at the new spot, that area isn\u2019t empty anymore. This change is reflected by removing the 'clear' condition for the destination area (`not (clear ?to)`).\n\n- **The starting point becomes clear:** Since the train left the starting area, that spot is now free. This is captured by adding a 'clear' condition for the starting area (`clear ?from`).\n\nThis whole process helps ensure that the hoist can safely and efficiently move from one area to another without confusion or conflicts.\n                \n**Response:**\nParameters:\n1. ?h - hoist: [short description of the parameter]\n2. ?from - store_area: [short description of the parameter]\n3. ?to - transit_area: [short description of the parameter]\n\nPreconditions:\n```\n(and\n    (at ?h ?from)\n    (connected ?from ?to)\n)\n```\n\nEffects:\n```\n(and\n    (not (at ?h ?from))\n    (at ?h ?to)\n    (clear ?from)\n)\n```\n\n---\n", "type": "prompt"}
{"role": "user", "content": "Example 2\nAction Description: Involves a hoist moving from a store_area to a transit_area. Preconditions are the hoist being at the source store_area and the areas being connected. The effect is the hoist moving to the transit_area and the source store_area becoming clear.\n\nAction name: go-out\n\n\nYour answer:\n---\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:** Let's imagine we have a little robotic hoist in a big warehouse. Its job is to move from one specific area where it usually stores things, called a store area, to another area meant for transitioning goods, which we call a transit area. Now, this action of moving from the store area to the transit area is called \"go-out.\"\n\nTo make sure this action goes smoothly, there are a few things that need to be in place beforehand, which we call preconditions. First, our little hoist needs to be at the store area to start with\u2014if it\u2019s somewhere else, it can\u2019t start moving from the store area, right? That's like saying you need to be at home to start walking to the park. Secondly, the store area and the transit area need to be connected. If there's no path or door between them, our hoist can't get to the transit area. It's a bit like needing a road or a path to walk on.\n\nNow, when the hoist successfully moves to the transit area, we have some changes that occur, which are the effects of the action. The hoist is no longer in the store area (it has moved, after all), and it's now in the transit area. This is straightforward: the hoist was here, and now it\u2019s there. Additionally, the store area becomes 'clear' or empty because the hoist has moved out. This is like saying that once you leave your room, the room is empty.\n\nSo, in summary, the \"go-out\" action moves our hoist from one area to another and makes sure the starting area is free for other activities. This helps keep things organized and running smoothly in our warehouse scenario.\n                \n**Response:**\nParameters:\n1. ?h - hoist: [short description of the parameter]\n2. ?c - crate: [short description of the parameter]\n3. ?a1 - store_area: [short description of the parameter]\n4. ?a2 - area: [short description of the parameter]\n5. ?p - place: [short description of the parameter]\n\nPreconditions:\n```\n(and\n    (connected ?a1 ?a2)\n    (at ?h ?a2)\n    (available ?h)\n    (on ?c ?a1)\n    (store_area_in ?a1 ?p)\n)\n```\n\nEffects:\n```\n(and\n    (not (on ?c ?a1))\n    (clear ?a1)\n    (not (available ?h))\n    (lifting ?h ?c)\n    (not (crate_in ?c ?p))\n)\n```\n\n---\n", "type": "prompt"}
{"role": "user", "content": "Here are two examples from the doors domain for demonstrating the output format.\n        \nDomain information: This domain is structured to allow navigation and interaction within a space comprising rooms, locations, and doors that can be unlocked with keys. The actions and predicates support movement between locations and the unlocking of rooms.\n\nA list of available predicates\n1. (at ?loc - location) ;; agent is at loc location\n2. (unlocked ?room - room) ;; the room is unlocked\n3. (loc_in_room ?loc - location ?room - room) ;; the location is in the room\n4. (key_at ?key - key ?loc - location) ;; the key is at loc location\n5. (key_for_room ?key - key ?room - room) ;; the key is for the room\nExample 1\nAction Description: The action is like embarking on a small journey from one place to another within a confined space. Imagine you're in a large house with multiple rooms. You're currently in one location, let's say the living room (your starting location). You decide to move to another spot, maybe the kitchen (your ending location). However, there's a catch. The kitchen is behind a door that needs to be unlocked (ending room). So, this action can only happen if the kitchen door is already unlocked. Once you move, you're no longer in the living room but now standing in the kitchen, contemplating what to cook!\n\nAction name: move_to\n\n\nYour answer:\n---\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:**\nImagine you're playing a game where you need to explore different rooms by finding keys that unlock them, much like a treasure hunt. The action called \"pick\" in this game allows you to pick up a key from a specific location so you can unlock a room.\n\nHere\u2019s why the action schema matches your description:\n1. **Parameters**: You have parameters like `?loc` (where the key is found), `?key` (the key you find), and `?room` (the room that the key opens). These parameters help define what the action involves\u2014picking up a key at a location that unlocks a specific room.\n\n2. **Preconditions**:\n   - `(at ?loc)`: This means that you, the player, must be at the same location as the key. It ensures you are in the right place to pick it up, like being in the hallway where the key is on the table.\n   - `(key_at ?key ?loc)`: This ensures that the key you need is indeed at your location. It checks that the key is actually there before you can pick it up.\n   - `(key_for_room ?key ?room)`: This confirms that the key you are about to pick up is the correct one for unlocking the specific room you want to enter, like the attic.\n\n3. **Effects**:\n   - `(not (key_at ?key ?loc))`: Once you pick up the key, it's no longer lying there at the location. This effect updates the game state to show the key has been moved\u2014it's now with you.\n   - `(unlocked ?room)`: The action of picking up the key leads to the room being unlocked. Now, you can enter the room you wanted, such as the attic, which was previously locked.\n\nBy combining these elements, the action of \"pick\" logically lets you find a key and use it to access new areas in the game, opening up more adventures\u2014just like in the story of finding a key to unlock the attic.\n                \n**Response:**\nParameters:\n1. ?sloc - location: [short description of the parameter]\n2. ?eloc - location: [short description of the parameter]\n3. ?eroom - room: [short description of the parameter]\n\nPreconditions:\n```\n(and\n    (at ?sloc)\n    (unlocked ?eroom)\n    (loc_in_room ?eloc ?eroom)\n)\n```\n\nEffects:\n```\n(and\n    (not (at ?sloc))\n    (at ?eloc)\n)\n```\n\n---\n", "type": "prompt"}
{"role": "user", "content": "Example 2\nAction Description: This one is akin to a classic scene in adventure games where you find a key and use it to unlock new areas. Picture yourself in the same house. You find a key lying on a table in the hallway (the key's location). This isn't just any key; it's special because it opens the door to the mysterious attic (the room the key unlocks). By picking up this key, you perform the action. The moment you have the key in your hand, the attic is no longer inaccessible. It's as if the key magically signals the attic door to unlock, waiting for you to discover its secrets.\n\nAction name: pick\n\n\nYour answer:\n---\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:**\nImagine you're playing a game where you're exploring different rooms and finding keys that can unlock new areas. The action called \"pick\" in this game lets you pick up a key that's in the same location as you, which then unlocks a room that the key is meant for. Let's break down how this works in simple terms.\n\nFirst, you need to be in the same location as the key. That's like being in a hallway where you see a key on a table. The action requires that you are right there with the key, which makes sense, right? You can't pick up a key from another room!\n\nNext, the key you find has to be the right one for a specific room. It\u2019s like having a label on the key saying \"this key is for the attic,\" ensuring that you don't try to use a kitchen key to open the attic.\n\nNow, when you pick up the key, the game checks two important things before letting you pick it up:\n1. **You are at the key's location**: You have to be right there where the key is.\n2. **The key is for the room you want to unlock**: This makes sure the key matches the room you\u2019re trying to access.\n\nOnce these conditions are met, and you pick up the key, two things happen:\n1. **The key is no longer at its original location**: Just like in real life, once you pick something up, it's not there anymore.\n2. **The room unlocks**: It\u2019s like the key told the door, \"Hey, open up!\" and now you can go into the attic and explore.\n\nThis action, \"pick,\" neatly connects your action of picking up the key with the effect of unlocking a new room, making the game or the story you're in feel real and connected. The conditions you meet before picking up the key ensure that everything makes sense and flows logically, just like in real life when you need the right key to open a specific door.\n                \n**Response:**\nParameters:\n1. ?loc - location: [short description of the parameter]\n2. ?key - key: [short description of the parameter]\n3. ?room - room: [short description of the parameter]\n\nPreconditions:\n```\n(and\n    (at ?loc)\n    (key_at ?key ?loc)\n    (key_for_room ?key ?room)\n)\n```\n\nEffects:\n```\n(and\n    (not (key_at ?key ?loc))\n    (unlocked ?room)\n)\n```\n\n---\n", "type": "prompt"}
{"role": "user", "content": "Question: Here is the task.\nA natural language description of the domain\nDomain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.\n\nA list of available predicates\n1. (is_grass ?arg0 - moveable) ;; the object is grass\n2. (is_log ?arg0 - moveable) ;; the object is a log\n3. (is_planks ?arg0 - moveable) ;; the object is a plank\n4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location\n5. (agent_at ?arg0 - static) ;; the agent is at a location\n6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory\n7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical\n8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object\n9. (handsfree ?arg0 - agent) ;; the agent has empty hands\n\nAction Description: pick var0 at var1 location\n\nAction name: pick\n\n\nYour answer:\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:**\nIn this simplified Minecraft-like environment, the action \"pick\" allows an agent to pick up an object from a location. To perform this action, certain conditions must be met, and certain changes should occur once the action is executed.\n\nThe agent must be at the same location as the object to pick it up, which is represented by the `(agent_at ?arg1)` predicate. Additionally, the object that the agent wants to pick up must be a physical, moveable object that is present at that location, indicated by `(at ?arg0 ?arg1)`.\n\nOnce the object is picked up, it should no longer be at its original location, and it should now be in the agent's inventory, represented by `(inventory ?arg0)`. If the object was hypothetical (not yet existing in the world), picking it up would make it real, so the `(hypothetical ?arg0)` predicate should be removed.\n\nThe action does not explicitly state that the agent's hands must be free before picking up the object, but it is a reasonable assumption to make. Therefore, we include `(handsfree ?arg1)` in the preconditions to ensure that the agent is not already holding another object.\n\n**Response:**\nParameters:\n1. ?arg0 - moveable: [The object to be picked up]\n2. ?arg1 - static: [The location where the object is]\n\nPreconditions:\n```\n(and\n    (agent_at ?arg1)\n    (at ?arg0 ?arg1)\n    (handsfree ?arg1)\n)\n```\n\nEffects:\n```\n(and\n    (not (at ?arg0 ?arg1))\n    (inventory ?arg0)\n    (not (hypothetical ?arg0))\n)\n```\n\nNote: The `(not (hypothetical ?arg0))` effect is included to account for the possibility that the object might be hypothetical. If this is not the case in the domain, this effect can be omitted.", "type": "response", "action": "pick"}
{"role": "system", "content": "# CONTEXT #\nYou are a tool called PDDL Modeling Assistant. You are a technical experts in constructing Planning Domain Definition Language (PDDL) models via the natural language context.\n# OBJECTIVE #\n* Construct parameters, preconditions and effects based on the domain information, action description and the action name.\n* All variables in the preconditions and effects must be listed in the action's parameters. This restriction helps maintain the action's scope and prevents ambiguity in the planning process.\n* Do not use predicates that are not defined in the available predicates list to construct the preconditions and effects.\n* When the natural language description is ambiguous or certain predicate changes are implied, make reasonable assumptions based on common sense to fill up the implicit predicate in the PDDL action.\n# STYLE #\nFollow the writing style of technical experts. The output can be parsed by a machine, so it is important to follow the structured format.\n# TONE #\nBe precise and concise in constructing the PDDL action. The PDDL action should be clear and unambiguous.\n# AUDIENCE #\nYour audience is someone who is trying to learn how to construct PDDL actions from natural language descriptions.\n# RESPONSE #\nThe response should be in the following format:\n---\n**Explanation:** [Your explanation here]\n\n**Response:**\nParameters:\n1. ?x - [type]: [parameter description]\n2. ...\n\nPreconditions:\n```\n(and\n    ([predicate_1] ?x)\n)\n```\n\nEffects:\n```\n(and\n    (not ([predicate_2] ?x))\n    ([predicate_2] ?x)\n    ...\n)\n```\n---\n", "type": "prompt"}
{"role": "user", "content": "One or two examples from other domains for illustrating the input and output formats.\nHere are two examples from the storage domain for demonstrating the output format.\n        \nDomain information: Moving and storing crates of goods by hoists from containers to depots with spatial maps. This domain deals with the movement and storage of crates of goods using hoists. It involves different locations like containers and depots, and requires managing the spatial arrangement of crates and hoists in various areas. The actions primarily focus on the lifting, moving, and placement of crates by hoists, considering the spatial and availability constraints of the areas involved.\n\nA list of available predicates\n1. (clear ?s - store_area) ;; the store area is clear\n2. (crate_in ?c - crate ?p - place) ;; the crate is in the place\n3. (store_area_in ?s - store_area ?p - place) ;; the store area is in the place\n4. (available ?h - hoist) ;; the hoist is available\n5. (lifting ?h - hoist ?c - crate) ;; the hoist is lifting the crate\n6. (at ?h - hoist ?a - area) ;; the hoist is at the area\n7. (on ?c - crate ?s - store_area) ;; the crate is on the store area\n8. (connected ?a1 ?a2 - area) ;; the area a1 is connected to the area a2\nExample 1\nAction Description: Moves a hoist from one store_area to another. Preconditions include the hoist being at the source store_area, the destination store_area being clear, and the areas being connected. The effect is the hoist moving to the destination and the change in clarity status of both store areas.\n\nAction name: move\n\n\nYour answer:\n---\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:**\n\nLet's imagine a scenario where you need to move a toy truck from one corner of a room to another. This toy truck represents the hoist, and the corners of the room are like different storage areas in our description.\n\n1. **Preconditions:**\n   - **Hoist is at the source area (at ?h ?from):** This condition makes sure that the hoist is actually at the starting point (like making sure your toy truck is really in the corner where you want to start moving it from). This is necessary because you can't move something from a place it isn't already at.\n   - **Destination area is clear (clear ?to):** This is like making sure that the corner you want to move your toy truck to doesn\u2019t have any obstacles or other toys in the way. The space needs to be clear so the hoist can move in without any issues.\n   - **Areas are connected (connected ?from ?to):** This checks if there is a direct path from the starting point to the destination, similar to making sure there's a clear path on the floor between the two corners of the room for the toy truck to travel without hitting a wall or furniture.\n\n2. **Effects:**\n   - **Hoist moves to the destination (at ?h ?to):** This is like saying your toy truck is now in the new corner of the room.\n   - **Hoist is no longer at the source (not (at ?h ?from)):** Just like your toy truck can't be in two places at once, when the hoist moves to the new area, it's no longer in the original area.\n   - **Destination area is no longer clear (not (clear ?to)):** Now that the hoist (or your toy truck) is in the new corner, that corner isn't empty anymore.\n   - **Source area becomes clear (clear ?from):** Since the hoist has moved away from the original area, that area is now free of obstacles or the hoist itself.\n\nSo, in simple terms, this action is like moving a toy from one clear, connected corner of the room to another. Before you move it, you need to check that it\u2019s starting in the right place, that there\u2019s no blockage where it\u2019s going, and that it can directly reach there. Once moved, the toy truck\u2019s old spot becomes empty, and its new spot is now occupied by it.\n                \n**Response:**\nParameters:\n1. ?h - hoist: [short description of the parameter]\n2. ?from - store_area: [short description of the parameter]\n3. ?to - store_area: [short description of the parameter]\n\nPreconditions:\n```\n(and\n    (at ?h ?from)\n    (clear ?to)\n    (connected ?from ?to)\n)\n```\n\nEffects:\n```\n(and\n    (not (at ?h ?from))\n    (at ?h ?to)\n    (not (clear ?to))\n    (clear ?from)\n)\n```\n\n---\n", "type": "prompt"}
{"role": "user", "content": "Example 2\nAction Description: Involves a hoist moving from a store_area to a transit_area. Preconditions are the hoist being at the source store_area and the areas being connected. The effect is the hoist moving to the transit_area and the source store_area becoming clear.\n\nAction name: go-out\n\n\nYour answer:\n---\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:** Let's imagine we have a little robotic hoist in a big warehouse. Its job is to move from one specific area where it usually stores things, called a store area, to another area meant for transitioning goods, which we call a transit area. Now, this action of moving from the store area to the transit area is called \"go-out.\"\n\nTo make sure this action goes smoothly, there are a few things that need to be in place beforehand, which we call preconditions. First, our little hoist needs to be at the store area to start with\u2014if it\u2019s somewhere else, it can\u2019t start moving from the store area, right? That's like saying you need to be at home to start walking to the park. Secondly, the store area and the transit area need to be connected. If there's no path or door between them, our hoist can't get to the transit area. It's a bit like needing a road or a path to walk on.\n\nNow, when the hoist successfully moves to the transit area, we have some changes that occur, which are the effects of the action. The hoist is no longer in the store area (it has moved, after all), and it's now in the transit area. This is straightforward: the hoist was here, and now it\u2019s there. Additionally, the store area becomes 'clear' or empty because the hoist has moved out. This is like saying that once you leave your room, the room is empty.\n\nSo, in summary, the \"go-out\" action moves our hoist from one area to another and makes sure the starting area is free for other activities. This helps keep things organized and running smoothly in our warehouse scenario.\n                \n**Response:**\nParameters:\n1. ?h - hoist: [short description of the parameter]\n2. ?from - store_area: [short description of the parameter]\n3. ?to - transit_area: [short description of the parameter]\n\nPreconditions:\n```\n(and\n    (at ?h ?from)\n    (connected ?from ?to)\n)\n```\n\nEffects:\n```\n(and\n    (not (at ?h ?from))\n    (at ?h ?to)\n    (clear ?from)\n)\n```\n\n---\n", "type": "prompt"}
{"role": "user", "content": "Here are two examples from the doors domain for demonstrating the output format.\n        \nDomain information: This domain is structured to allow navigation and interaction within a space comprising rooms, locations, and doors that can be unlocked with keys. The actions and predicates support movement between locations and the unlocking of rooms.\n\nA list of available predicates\n1. (at ?loc - location) ;; agent is at loc location\n2. (unlocked ?room - room) ;; the room is unlocked\n3. (loc_in_room ?loc - location ?room - room) ;; the location is in the room\n4. (key_at ?key - key ?loc - location) ;; the key is at loc location\n5. (key_for_room ?key - key ?room - room) ;; the key is for the room\nExample 1\nAction Description: The action is like embarking on a small journey from one place to another within a confined space. Imagine you're in a large house with multiple rooms. You're currently in one location, let's say the living room (your starting location). You decide to move to another spot, maybe the kitchen (your ending location). However, there's a catch. The kitchen is behind a door that needs to be unlocked (ending room). So, this action can only happen if the kitchen door is already unlocked. Once you move, you're no longer in the living room but now standing in the kitchen, contemplating what to cook!\n\nAction name: move_to\n\n\nYour answer:\n---\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:**\nImagine you're playing a game where you need to explore different rooms by finding keys that unlock them, much like a treasure hunt. The action called \"pick\" in this game allows you to pick up a key from a specific location so you can unlock a room.\n\nHere\u2019s why the action schema matches your description:\n1. **Parameters**: You have parameters like `?loc` (where the key is found), `?key` (the key you find), and `?room` (the room that the key opens). These parameters help define what the action involves\u2014picking up a key at a location that unlocks a specific room.\n\n2. **Preconditions**:\n   - `(at ?loc)`: This means that you, the player, must be at the same location as the key. It ensures you are in the right place to pick it up, like being in the hallway where the key is on the table.\n   - `(key_at ?key ?loc)`: This ensures that the key you need is indeed at your location. It checks that the key is actually there before you can pick it up.\n   - `(key_for_room ?key ?room)`: This confirms that the key you are about to pick up is the correct one for unlocking the specific room you want to enter, like the attic.\n\n3. **Effects**:\n   - `(not (key_at ?key ?loc))`: Once you pick up the key, it's no longer lying there at the location. This effect updates the game state to show the key has been moved\u2014it's now with you.\n   - `(unlocked ?room)`: The action of picking up the key leads to the room being unlocked. Now, you can enter the room you wanted, such as the attic, which was previously locked.\n\nBy combining these elements, the action of \"pick\" logically lets you find a key and use it to access new areas in the game, opening up more adventures\u2014just like in the story of finding a key to unlock the attic.\n                \n**Response:**\nParameters:\n1. ?sloc - location: [short description of the parameter]\n2. ?eloc - location: [short description of the parameter]\n3. ?eroom - room: [short description of the parameter]\n\nPreconditions:\n```\n(and\n    (at ?sloc)\n    (unlocked ?eroom)\n    (loc_in_room ?eloc ?eroom)\n)\n```\n\nEffects:\n```\n(and\n    (not (at ?sloc))\n    (at ?eloc)\n)\n```\n\n---\n", "type": "prompt"}
{"role": "user", "content": "Example 2\nAction Description: This one is akin to a classic scene in adventure games where you find a key and use it to unlock new areas. Picture yourself in the same house. You find a key lying on a table in the hallway (the key's location). This isn't just any key; it's special because it opens the door to the mysterious attic (the room the key unlocks). By picking up this key, you perform the action. The moment you have the key in your hand, the attic is no longer inaccessible. It's as if the key magically signals the attic door to unlock, waiting for you to discover its secrets.\n\nAction name: pick\n\n\nYour answer:\n---\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:**\nImagine you're playing a game where you're exploring different rooms and finding keys that can unlock new areas. The action called \"pick\" in this game lets you pick up a key that's in the same location as you, which then unlocks a room that the key is meant for. Let's break down how this works in simple terms.\n\nFirst, you need to be in the same location as the key. That's like being in a hallway where you see a key on a table. The action requires that you are right there with the key, which makes sense, right? You can't pick up a key from another room!\n\nNext, the key you find has to be the right one for a specific room. It\u2019s like having a label on the key saying \"this key is for the attic,\" ensuring that you don't try to use a kitchen key to open the attic.\n\nNow, when you pick up the key, the game checks two important things before letting you pick it up:\n1. **You are at the key's location**: You have to be right there where the key is.\n2. **The key is for the room you want to unlock**: This makes sure the key matches the room you\u2019re trying to access.\n\nOnce these conditions are met, and you pick up the key, two things happen:\n1. **The key is no longer at its original location**: Just like in real life, once you pick something up, it's not there anymore.\n2. **The room unlocks**: It\u2019s like the key told the door, \"Hey, open up!\" and now you can go into the attic and explore.\n\nThis action, \"pick,\" neatly connects your action of picking up the key with the effect of unlocking a new room, making the game or the story you're in feel real and connected. The conditions you meet before picking up the key ensure that everything makes sense and flows logically, just like in real life when you need the right key to open a specific door.\n                \n**Response:**\nParameters:\n1. ?loc - location: [short description of the parameter]\n2. ?key - key: [short description of the parameter]\n3. ?room - room: [short description of the parameter]\n\nPreconditions:\n```\n(and\n    (at ?loc)\n    (key_at ?key ?loc)\n    (key_for_room ?key ?room)\n)\n```\n\nEffects:\n```\n(and\n    (not (key_at ?key ?loc))\n    (unlocked ?room)\n)\n```\n\n---\n", "type": "prompt"}
{"role": "user", "content": "Question: Here is the task.\nA natural language description of the domain\nDomain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.\n\nA list of available predicates\n1. (is_grass ?arg0 - moveable) ;; the object is grass\n2. (is_log ?arg0 - moveable) ;; the object is a log\n3. (is_planks ?arg0 - moveable) ;; the object is a plank\n4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location\n5. (agent_at ?arg0 - static) ;; the agent is at a location\n6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory\n7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical\n8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object\n9. (handsfree ?arg0 - agent) ;; the agent has empty hands\n\nAction Description: move from var1 to var0\n\nAction name: move\n\n\nYour answer:\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:**\nIn a simplified Minecraft-like environment, the action of moving from one location to another is fundamental. The action \"move\" described here involves an agent (the player or a character) transitioning from one static location (var1) to another (var0). For this action to occur, there are certain conditions that must be met, and certain outcomes that result from the action.\n\nThe preconditions for the \"move\" action are straightforward. The agent must be at the starting location (var1) before it can move to the destination (var0). There are no other preconditions stated in the natural language description, so we assume that the agent is capable of moving freely between locations without any additional requirements.\n\nThe effects of the action are also simple: the agent is no longer at the starting location (var1) and is now at the destination (var0). This reflects a change in the agent's position within the environment.\n\n**Response:**\nParameters:\n1. ?agent - agent: [The agent performing the move]\n2. ?from - static: [The starting location of the agent]\n3. ?to - static: [The destination location of the agent]\n\nPreconditions:\n```\n(and\n    (agent_at ?from)\n)\n```\n\nEffects:\n```\n(and\n    (not (agent_at ?from))\n    (agent_at ?to)\n)\n```\n\nNote that in the provided list of available predicates, there is no direct predicate for \"agent_at\" as written in the preconditions and effects. However, based on the context and the typical structure of such domains, it is assumed that \"agent_at\" is a valid predicate that indicates the presence of an agent at a specific location. If \"agent_at\" is not a valid predicate, it would need to be replaced with an appropriate predicate from the provided list, such as using \"at\" with an agent as the first argument. If this is the case, the response would need to be adjusted accordingly.", "type": "response", "action": "move"}
{"role": "system", "content": "# CONTEXT #\nYou are a tool called PDDL Modeling Assistant. You are a technical experts in constructing Planning Domain Definition Language (PDDL) models via the natural language context.\n# OBJECTIVE #\n* Construct parameters, preconditions and effects based on the domain information, action description and the action name.\n* All variables in the preconditions and effects must be listed in the action's parameters. This restriction helps maintain the action's scope and prevents ambiguity in the planning process.\n* Do not use predicates that are not defined in the available predicates list to construct the preconditions and effects.\n* When the natural language description is ambiguous or certain predicate changes are implied, make reasonable assumptions based on common sense to fill up the implicit predicate in the PDDL action.\n# STYLE #\nFollow the writing style of technical experts. The output can be parsed by a machine, so it is important to follow the structured format.\n# TONE #\nBe precise and concise in constructing the PDDL action. The PDDL action should be clear and unambiguous.\n# AUDIENCE #\nYour audience is someone who is trying to learn how to construct PDDL actions from natural language descriptions.\n# RESPONSE #\nThe response should be in the following format:\n---\n**Explanation:** [Your explanation here]\n\n**Response:**\nParameters:\n1. ?x - [type]: [parameter description]\n2. ...\n\nPreconditions:\n```\n(and\n    ([predicate_1] ?x)\n)\n```\n\nEffects:\n```\n(and\n    (not ([predicate_2] ?x))\n    ([predicate_2] ?x)\n    ...\n)\n```\n---\n", "type": "prompt"}
{"role": "user", "content": "One or two examples from other domains for illustrating the input and output formats.\nHere are two examples from the storage domain for demonstrating the output format.\n        \nDomain information: Moving and storing crates of goods by hoists from containers to depots with spatial maps. This domain deals with the movement and storage of crates of goods using hoists. It involves different locations like containers and depots, and requires managing the spatial arrangement of crates and hoists in various areas. The actions primarily focus on the lifting, moving, and placement of crates by hoists, considering the spatial and availability constraints of the areas involved.\n\nA list of available predicates\n1. (clear ?s - store_area) ;; the store area is clear\n2. (crate_in ?c - crate ?p - place) ;; the crate is in the place\n3. (store_area_in ?s - store_area ?p - place) ;; the store area is in the place\n4. (available ?h - hoist) ;; the hoist is available\n5. (lifting ?h - hoist ?c - crate) ;; the hoist is lifting the crate\n6. (at ?h - hoist ?a - area) ;; the hoist is at the area\n7. (on ?c - crate ?s - store_area) ;; the crate is on the store area\n8. (connected ?a1 ?a2 - area) ;; the area a1 is connected to the area a2\nExample 1\nAction Description: This is the reverse of Go-out, where a hoist moves from a transit_area to a store_area. Preconditions include the hoist being at the transit_area, the areas being connected, and the destination store_area being clear. The effect is similar to Go-out but in reverse.\n\nAction name: go-in\n\n\nYour answer:\n---\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:**\n\nImagine you have a small robot hoist that helps move boxes in a big warehouse. The warehouse has different areas, like a spot for loading boxes and another for storing them. The \"go-in\" action is like telling the robot to move from a loading area to a storage area.\n\nNow, why does the robot need certain conditions to be met before it can move? Here's a breakdown:\n\n1. **The robot must be at the loading area** (transit_area): This is pretty straightforward. If the robot isn't at the loading area, it can't start moving towards the storage area because it's simply not there to begin the task.\n\n2. **The loading area and storage area must be connected**: It's like making sure there's a clear path or a road between two places before you start driving. If there's no path, the robot can't move between these areas.\n\n3. **The storage area must be clear**: This ensures that there is space available for the robot to enter and place the boxes. It's similar to needing an empty parking spot to park your car.\n\nNow, what happens after the robot moves based on these conditions?\n\n- **The robot is no longer in the loading area**: Just like when you leave your house, you're not inside anymore. The robot has left the loading area, so we say it's no longer there.\n  \n- **The robot is now in the storage area**: Like arriving at a friend\u2019s house after leaving yours, the robot has moved and is now at the storage destination.\n\n- **The storage area is no longer clear**: Since the robot moves in with a box, the space it occupied is now taken. It's like the parking space being occupied once you park your car.\n\nIn summary, these conditions and results make sure the robot moves safely and efficiently from one place to another, without any surprises like arriving at a blocked or non-existent path, or finding no space to drop off the box. This careful planning helps keep everything in the warehouse running smoothly!\n                \n**Response:**\nParameters:\n1. ?h - hoist: [short description of the parameter]\n2. ?from - store_area: [short description of the parameter]\n3. ?to - store_area: [short description of the parameter]\n\nPreconditions:\n```\n(and\n    (at ?h ?from)\n    (clear ?to)\n    (connected ?from ?to)\n)\n```\n\nEffects:\n```\n(and\n    (not (at ?h ?from))\n    (at ?h ?to)\n    (not (clear ?to))\n    (clear ?from)\n)\n```\n\n---\n", "type": "prompt"}
{"role": "user", "content": "Example 2\nAction Description: Moves a hoist from one store_area to another. Preconditions include the hoist being at the source store_area, the destination store_area being clear, and the areas being connected. The effect is the hoist moving to the destination and the change in clarity status of both store areas.\n\nAction name: move\n\n\nYour answer:\n---\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:**\n\nLet's imagine a scenario where you need to move a toy truck from one corner of a room to another. This toy truck represents the hoist, and the corners of the room are like different storage areas in our description.\n\n1. **Preconditions:**\n   - **Hoist is at the source area (at ?h ?from):** This condition makes sure that the hoist is actually at the starting point (like making sure your toy truck is really in the corner where you want to start moving it from). This is necessary because you can't move something from a place it isn't already at.\n   - **Destination area is clear (clear ?to):** This is like making sure that the corner you want to move your toy truck to doesn\u2019t have any obstacles or other toys in the way. The space needs to be clear so the hoist can move in without any issues.\n   - **Areas are connected (connected ?from ?to):** This checks if there is a direct path from the starting point to the destination, similar to making sure there's a clear path on the floor between the two corners of the room for the toy truck to travel without hitting a wall or furniture.\n\n2. **Effects:**\n   - **Hoist moves to the destination (at ?h ?to):** This is like saying your toy truck is now in the new corner of the room.\n   - **Hoist is no longer at the source (not (at ?h ?from)):** Just like your toy truck can't be in two places at once, when the hoist moves to the new area, it's no longer in the original area.\n   - **Destination area is no longer clear (not (clear ?to)):** Now that the hoist (or your toy truck) is in the new corner, that corner isn't empty anymore.\n   - **Source area becomes clear (clear ?from):** Since the hoist has moved away from the original area, that area is now free of obstacles or the hoist itself.\n\nSo, in simple terms, this action is like moving a toy from one clear, connected corner of the room to another. Before you move it, you need to check that it\u2019s starting in the right place, that there\u2019s no blockage where it\u2019s going, and that it can directly reach there. Once moved, the toy truck\u2019s old spot becomes empty, and its new spot is now occupied by it.\n                \n**Response:**\nParameters:\n1. ?h - hoist: [short description of the parameter]\n2. ?from - transit_area: [short description of the parameter]\n3. ?to - store_area: [short description of the parameter]\n\nPreconditions:\n```\n(and\n    (at ?h ?from)\n    (connected ?from ?to)\n    (clear ?to)\n)\n```\n\nEffects:\n```\n(and\n    (not (at ?h ?from))\n    (at ?h ?to)\n    (not (clear ?to))\n)\n```\n\n---\n", "type": "prompt"}
{"role": "user", "content": "Here are two examples from the doors domain for demonstrating the output format.\n        \nDomain information: This domain is structured to allow navigation and interaction within a space comprising rooms, locations, and doors that can be unlocked with keys. The actions and predicates support movement between locations and the unlocking of rooms.\n\nA list of available predicates\n1. (at ?loc - location) ;; agent is at loc location\n2. (unlocked ?room - room) ;; the room is unlocked\n3. (loc_in_room ?loc - location ?room - room) ;; the location is in the room\n4. (key_at ?key - key ?loc - location) ;; the key is at loc location\n5. (key_for_room ?key - key ?room - room) ;; the key is for the room\nExample 1\nAction Description: The action is like embarking on a small journey from one place to another within a confined space. Imagine you're in a large house with multiple rooms. You're currently in one location, let's say the living room (your starting location). You decide to move to another spot, maybe the kitchen (your ending location). However, there's a catch. The kitchen is behind a door that needs to be unlocked (ending room). So, this action can only happen if the kitchen door is already unlocked. Once you move, you're no longer in the living room but now standing in the kitchen, contemplating what to cook!\n\nAction name: move_to\n\n\nYour answer:\n---\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:**\nImagine you're playing a game where you need to explore different rooms by finding keys that unlock them, much like a treasure hunt. The action called \"pick\" in this game allows you to pick up a key from a specific location so you can unlock a room.\n\nHere\u2019s why the action schema matches your description:\n1. **Parameters**: You have parameters like `?loc` (where the key is found), `?key` (the key you find), and `?room` (the room that the key opens). These parameters help define what the action involves\u2014picking up a key at a location that unlocks a specific room.\n\n2. **Preconditions**:\n   - `(at ?loc)`: This means that you, the player, must be at the same location as the key. It ensures you are in the right place to pick it up, like being in the hallway where the key is on the table.\n   - `(key_at ?key ?loc)`: This ensures that the key you need is indeed at your location. It checks that the key is actually there before you can pick it up.\n   - `(key_for_room ?key ?room)`: This confirms that the key you are about to pick up is the correct one for unlocking the specific room you want to enter, like the attic.\n\n3. **Effects**:\n   - `(not (key_at ?key ?loc))`: Once you pick up the key, it's no longer lying there at the location. This effect updates the game state to show the key has been moved\u2014it's now with you.\n   - `(unlocked ?room)`: The action of picking up the key leads to the room being unlocked. Now, you can enter the room you wanted, such as the attic, which was previously locked.\n\nBy combining these elements, the action of \"pick\" logically lets you find a key and use it to access new areas in the game, opening up more adventures\u2014just like in the story of finding a key to unlock the attic.\n                \n**Response:**\nParameters:\n1. ?sloc - location: [short description of the parameter]\n2. ?eloc - location: [short description of the parameter]\n3. ?eroom - room: [short description of the parameter]\n\nPreconditions:\n```\n(and\n    (at ?sloc)\n    (unlocked ?eroom)\n    (loc_in_room ?eloc ?eroom)\n)\n```\n\nEffects:\n```\n(and\n    (not (at ?sloc))\n    (at ?eloc)\n)\n```\n\n---\n", "type": "prompt"}
{"role": "user", "content": "Example 2\nAction Description: This one is akin to a classic scene in adventure games where you find a key and use it to unlock new areas. Picture yourself in the same house. You find a key lying on a table in the hallway (the key's location). This isn't just any key; it's special because it opens the door to the mysterious attic (the room the key unlocks). By picking up this key, you perform the action. The moment you have the key in your hand, the attic is no longer inaccessible. It's as if the key magically signals the attic door to unlock, waiting for you to discover its secrets.\n\nAction name: pick\n\n\nYour answer:\n---\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:**\nImagine you're playing a game where you're exploring different rooms and finding keys that can unlock new areas. The action called \"pick\" in this game lets you pick up a key that's in the same location as you, which then unlocks a room that the key is meant for. Let's break down how this works in simple terms.\n\nFirst, you need to be in the same location as the key. That's like being in a hallway where you see a key on a table. The action requires that you are right there with the key, which makes sense, right? You can't pick up a key from another room!\n\nNext, the key you find has to be the right one for a specific room. It\u2019s like having a label on the key saying \"this key is for the attic,\" ensuring that you don't try to use a kitchen key to open the attic.\n\nNow, when you pick up the key, the game checks two important things before letting you pick it up:\n1. **You are at the key's location**: You have to be right there where the key is.\n2. **The key is for the room you want to unlock**: This makes sure the key matches the room you\u2019re trying to access.\n\nOnce these conditions are met, and you pick up the key, two things happen:\n1. **The key is no longer at its original location**: Just like in real life, once you pick something up, it's not there anymore.\n2. **The room unlocks**: It\u2019s like the key told the door, \"Hey, open up!\" and now you can go into the attic and explore.\n\nThis action, \"pick,\" neatly connects your action of picking up the key with the effect of unlocking a new room, making the game or the story you're in feel real and connected. The conditions you meet before picking up the key ensure that everything makes sense and flows logically, just like in real life when you need the right key to open a specific door.\n                \n**Response:**\nParameters:\n1. ?loc - location: [short description of the parameter]\n2. ?key - key: [short description of the parameter]\n3. ?room - room: [short description of the parameter]\n\nPreconditions:\n```\n(and\n    (at ?loc)\n    (key_at ?key ?loc)\n    (key_for_room ?key ?room)\n)\n```\n\nEffects:\n```\n(and\n    (not (key_at ?key ?loc))\n    (unlocked ?room)\n)\n```\n\n---\n", "type": "prompt"}
{"role": "user", "content": "Question: Here is the task.\nA natural language description of the domain\nDomain information: This domain definition sets up a basic framework for actions and interactions in a simplified Minecraft-like environment, focusing on movement, item management, and basic crafting.\n\nA list of available predicates\n1. (is_grass ?arg0 - moveable) ;; the object is grass\n2. (is_log ?arg0 - moveable) ;; the object is a log\n3. (is_planks ?arg0 - moveable) ;; the object is a plank\n4. (at ?arg0 - moveable ?arg1 - static) ;; the object is at a location\n5. (agent_at ?arg0 - static) ;; the agent is at a location\n6. (inventory ?arg0 - moveable) ;; the object is in the agent's inventory\n7. (hypothetical ?arg0 - moveable) ;; the object is hypothetical\n8. (equipped ?arg0 - moveable ?arg1 - agent) ;; the agent is holding the object\n9. (handsfree ?arg0 - agent) ;; the agent has empty hands\n\nAction Description: craft var0 into a plank using var2 log.\n\nAction name: craft_plank\n\n\nYour answer:\n", "type": "prompt"}
{"role": "assistant", "content": "**Explanation:**\nIn this simplified Minecraft-like environment, the action \"craft_plank\" represents the process of converting a log into a plank. This is a common crafting action in Minecraft where players gather resources and transform them into other useful items.\n\nTo craft a plank, there are certain conditions that must be met before the action can take place:\n1. **The agent must have a log**: This is the raw material needed to craft the plank. The log must be in the agent's inventory or equipped (held) by the agent.\n2. **The agent must not be holding anything else that would prevent crafting**: This means the agent's hands must be free or holding the log that will be crafted.\n\nOnce the conditions are met and the action is executed, the following changes occur:\n1. **The log is no longer in the inventory or equipped**: Since the log is used up in the crafting process, it is no longer available in the agent's inventory or hands after the action.\n2. **A plank is created and added to the inventory**: The result of the crafting action is a new plank, which is then placed in the agent's inventory for future use.\n\nThe action assumes that crafting is an immediate process and does not require the agent to be at a specific location, as it can be done from the inventory.\n\n**Response:**\nParameters:\n1. ?log - moveable: [The log that will be crafted into a plank]\n2. ?agent - agent: [The agent performing the crafting action]\n\nPreconditions:\n```\n(and\n    (or (inventory ?log) (equipped ?log ?agent))\n    (handsfree ?agent)\n)\n```\n\nEffects:\n```\n(and\n    (not (inventory ?log))\n    (not (equipped ?log ?agent))\n    (inventory (is_planks ?log))\n)\n```\n\nNote: The `?log` variable is used to represent both the input log and the resulting plank, assuming that the crafting process transforms the log into a plank directly. If the crafting process were to consume multiple logs to create multiple planks, additional logic would be needed to handle the quantities.", "type": "response", "action": "craft_plank"}
